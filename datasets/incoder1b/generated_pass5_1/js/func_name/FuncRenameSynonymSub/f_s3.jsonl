{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n  let closeElements = false;\n  numbers.forEach((number) => {\n    if (Math.abs(number - threshold) < Number.EPSILON) {\n      closeElements = true;\n    }\n  });\n  return closeElements;\n};\n\n/**\n * Check if given number is close to given threshold.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, else return false.\n * If number is close to given threshold, return true, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = paren_groups.map((group) => {\n    return group.replace(/\\)/g, '').replace(/\\(/g, '').trim();\n  });\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return a list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroupsStrings = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = paren_groups.map((group) => {\n    return group.replace(/\\)/g, '').replace(/\\(/g, '').trim();\n  });\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return a list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroupsStringsIgnoreSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = paren_groups.map((group) => {\n    return group.replace(/\\)/g, '').replace(/\\(/g, '').trim();\n  });\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return a list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroupsStringsIgnoreSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = paren_groups.map((group) => {\n    return group.replace(/\\)/g, '').replace(/\\(/g, '').trim();\n  });\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return a list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroupsStringsIgnoreSpacesAndParensIgnoreSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = paren_groups.map((group) => {\n    return group.replace(/\\)/g, '').replace(/\\(/g, '').trim();\n  });\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return a list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroupsStringsIgnoreSpacesAndParensIgnoreSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = paren_groups.map((group) => {\n    return group.replace(/\\)/g, '').replace(/\\(/g, '').trim();\n  });\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return a list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroupsStringsIgnoreSpacesAndParensIgnoreSpacesAndParensIgnoreSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = paren_groups.map((group) => {\n    return group.replace(/\\)/g, '').replace(/\\(/g, '').trim();\n  });\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return a list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroupsStringsIgnoreSpacesAndParensIgnoreSpacesAndParensIgnoreSpacesAndParensIgnoreSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = paren_groups.map((group) => {\n    return group.replace(/\\)/g, '').replace(/\\(/g, '').trim();\n  });\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return a list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroupsStringsIgnoreSpacesAndParensIgnoreSpacesAndParensIgnoreSpacesAndParensIgnoreSpacesAndParensIgnoreSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = paren_groups.map((group) => {\n    return group.replace(/\\)/g, '').replace(/\\(/g, '').trim();\n  });\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return a list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroupsStringsIgnoreSpacesAndParensIgnoreSpacesAndParensIgnore", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(string[i])) {\n      longestPalindrome = string[i];\n      longestPalindromeLength = string[i].length;\n      longestPalindromePrefix = longestPalindrome.slice(0, longestPalindromeLength);\n      longestPalindromeSuffix = longestPalindrome.slice(longestPalindromeLength);\n      break;\n    }\n  }\n\n  return longestPalindromePrefix + longestPalindromeSuffix;\n}\n\n/* Given a string, return its reverse in lowercase and uppercase.\n  >>> reverse('hello')\n  'HELLO'\n  >>> reverse('HELLO')\n  'hello'\n  */\nconst reverse = (string) => {\n  let reversedString = string;\n  let reversedStringLength = string.length;\n  let reversedStringReversed = reversedString.split('').reverse().join('');\n\n  for (let i = reversedStringLength - 1; i >= 0; i--) {\n    if (reversedString[i] === reversedStringReversed[i]) {\n      reversedString = reversedString.slice(0, i) + reversedString.slice(i + 1);\n      reversedStringReversed = reversedStringReversed.slice(0, i) + reversedStringReversed.slice(i + 1);\n      break;\n    }\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse in lowercase and uppercase.\n  >>> reverse('hello')\n  'HELLO'\n  >>> reverse('HELLO')\n  'hello'\n  */\nconst reverseAll = (string) => {\n  let reversedString = string;\n  let reversedStringLength = string.length;\n  let reversedStringReversed = reversedString.split('').reverse().join('');\n\n  for (let i = reversedStringLength - 1; i >= 0; i--) {\n    if (reversedString[i] === reversedStringReversed[i]) {\n      reversedString = reversedString.slice(0, i) + reversedString.slice(i + 1);\n      reversedStringReversed = reversedStringReversed.slice(0, i) + reversedStringReversed.slice(i + 1);\n      break;\n    }\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse in lowercase and uppercase.\n  >>> reverse('hello')\n  'HELLO'\n  >>> reverse('HELLO')\n  'hello'\n  */\nconst reverseAllUpper = (string) => {\n  let reversedString = string;\n  let reversedStringLength = string.length;\n  let reversedStringReversed = reversedString.split('').reverse().join('');\n\n  for (let i = reversedStringLength - 1; i >= 0; i--) {\n    if (reversedString[i] === reversedStringReversed[i]) {\n      reversedString = reversedString.slice(0, i) + reversedString.slice(i + 1);\n      reversedStringReversed = reversedStringReversed.slice(0, i) + reversedStringReversed.slice(i + 1);\n      break;\n    }\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse in lowercase and uppercase.\n  >>> reverse('hello')\n  'HELLO'\n  >>> reverse('HELLO')\n  'hello'\n  */\nconst reverseAllLower = (string) => {\n  let reversedString = string;\n  let reversedStringLength = string.length;\n  let reversedStringReversed = reversedString.split('').reverse().join('');\n\n  for (let i = reversedStringLength - 1; i >= 0; i--) {\n    if (reversedString[i] === reversedStringReversed[i]) {\n      reversedString = reversedString.slice(0, i) + reversedString.slice(i + 1);\n      reversedStringReversed = reversedStringReversed.slice(0, i) + reversedStringReversed.slice(i + 1);\n      break;\n    }\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse in lowercase and uppercase.\n  >>> reverse('hello')\n  'HELLO'\n  >>> reverse('HELLO')\n  'hello'\n  */\nconst reverseAllUpperLower = (string) => {\n  let reversedString = string;\n  let reversedStringLength = string.length;\n  let reversedStringReversed = reversedString.split('').reverse().join('');\n\n  for (let i = reversedStringLength - 1; i >= 0; i--) {\n    if (reversedString[i] === reversedStringReversed[i]) {\n      reversedString = reversedString.slice(0, i) + reversedString.slice(i + 1);\n      reversedStringReversed = reversedStringReversed.slice(0, i) + reversedStringReversed.slice(i + 1);\n      break;\n    }\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse in lowercase and uppercase.\n  >>> reverse('hello')\n  'HELLO'\n  >>> reverse('HELLO')\n  'hello'\n  */\nconst reverseAllUpperLower = (string) => {\n  let reversedString = string;\n  let reversedStringLength = string.length;\n  let reversedStringReversed = reversedString.split('').reverse().join('');\n\n  for (let i = reversedStringLength - 1; i >= 0; i--) {\n    if (reversedString[i] === reversedStringReversed[i]) {\n      reversedString = reversedString.slice(0, i) + reversedString.slice(i + 1);\n      reversedStringReversed = reversedStringReversed.slice(0, i) + reversedStringReversed.slice(i + 1);\n      break;\n    }\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse in lowercase and uppercase.\n  >>> reverse('hello')\n  'HELLO'\n  >>> reverse('HELLO')\n  'hello'\n  */\nconst reverseAllUpperLowerAll = (string) => {\n  let reversedString = string;\n  let reversedStringLength = string.length;\n  let reversedStringReversed = reversedString.split('').reverse().join('');\n\n  for (let i = reversedStringLength - 1; i >= 0; i--) {\n    if (reversedString[i] === reversedStringReversed[i]) {\n      reversedString = reversedString.slice(0, i) + reversedString.slice(i + 1);\n      reversedStringReversed = reversedStringReversed.slice(0, i) + reversedStringReversed.slice(i + 1);\n      break;\n    }\n  }\n\n  return reversedString;\n}\n\n/* Given a string, return its reverse in lowercase and uppercase.\n  >>> reverse('hello')\n  'HELLO'\n  >>> reverse('HELLO')\n  'hello'\n  */\nconst reverseAllUpperLowerAllUpper = (string) => {\n  let reversedString = string;\n  let reversedStringLength = string.length;\n  let reversedStringReversed = reversedString.split('').reverse().join('');\n\n  for (let i = reversedStringLength - 1; i >= 0; i--) {\n    if (reversedString[i] === reversedStringReversed[i]) {\n      reversedString = reversedString.slice(0, i) + reversedString.slice(i + 1);\n      reversed", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const result = [];\n  let i = 0;\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevel = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelOdd = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelEvenOdd = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelEvenOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelOddEvenOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelEvenOddEvenOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelOddEvenOddEvenOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelEvenOddEvenOddEvenOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelOddEvenOddEvenOddEvenOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelEvenOddEvenOddEvenOddEvenOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (n) => {\n  let i = 0;\n  let result = [];\n  while (i < n) {\n    result.push(0);\n    i += 1;\n  }\n  return result;\n};\n\nconst getNextLevelEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleStrings = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleStringsNoSpace = (s) => {\n  let words = s.split(\", \");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleStringsNoSpaces = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleStringsNoSpacesNoSpace = (s) => {\n  let words = s.split(\", \");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleStringsNoSpacesNoSpaces = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleStringsNoSpacesNoSpacesNoSpace = (s) => {\n  let words = s.split(\", \");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleStringsNoSpacesNoSpacesNoSpacesNoSpace = (s) => {\n  let words = s.split(\", \");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleStringsNoSpacesNoSpacesNoSpacesNoSpacesNoSpace = (s) => {\n  let words = s.split(\", \");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleStringsNoSpacesNoSpacesNoSpacesNoSpacesNoSpacesNoSpace = (s) => {\n  let words = s.split(\", \");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleStringsNoSpacesNoSpacesNoSpacesNoSpacesNoSpacesNoSpacesNoSpace = (s) => {\n  let words = s.split(\", \");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (y >= 0) {\n    if (y % 2 === 0) {\n      sum += y;\n    }\n    y /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (x >= 0) {\n    if (x % 2 === 0) {\n      sum += x;\n    }\n    x /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (x >= 0) {\n    if (x % 2 === 0) {\n      sum += x;\n    }\n    x /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (y >= 0) {\n    if (y % 2 === 0) {\n      sum += y;\n    }\n    y /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (x >= 0) {\n    if (x % 2 === 0) {\n      sum += x;\n    }\n    x /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (y >= 0) {\n    if (y % 2 === 0) {\n      sum += y;\n    }\n    y /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (x >= 0) {\n    if (x % 2 === 0) {\n      sum += x;\n    }\n    x /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (y >= 0) {\n    if (y % 2 === 0) {\n      sum += y;\n    }\n    y /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (x >= 0) {\n    if (x % 2 === 0) {\n      sum += x;\n    }\n    x /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (y >= 0) {\n    if (y % 2 === 0) {\n      sum += y;\n    }\n    y /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (x >= 0) {\n    if (x % 2 === 0) {\n      sum += x;\n    }\n    x /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (y >= 0) {\n    if (y % 2 === 0) {\n      sum += y;\n    }\n    y /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let temp;\n  temp = x;\n  x = y;\n  y = temp;\n  let sum = 0;\n  while (x >= 0) {\n    if (x % 2 === 0) {\n      sum += x;\n    }\n    x /= 2;\n  }\n  return sum;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let temp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  let result = []\n  let digit = 0\n  let remainder = 0\n  let remainder2 = 0\n  let remainder3 = 0\n  let remainder4 = 0\n  let remainder5 = 0\n  let remainder6 = 0\n  let remainder7 = 0\n  let remainder8 = 0\n  let remainder9 = 0\n  let remainder10 = 0\n  let remainder11 = 0\n  let remainder12 = 0\n  let remainder13 = 0\n  let remainder14 = 0\n  let remainder15 = 0\n  let remainder16 = 0\n  let remainder17 = 0\n  let remainder18 = 0\n  let remainder19 = 0\n  let remainder20 = 0\n  let remainder21 = 0\n  let remainder22 = 0\n  let remainder23 = 0\n  let remainder24 = 0\n  let remainder25 = 0\n  let remainder26 = 0\n  let remainder27 = 0\n  let remainder28 = 0\n  let remainder29 = 0\n  let remainder30 = 0\n  let remainder31 = 0\n  let remainder32 = 0\n  let remainder33 = 0\n  let remainder34 = 0\n  let remainder35 = 0\n  let remainder36 = 0\n  let remainder37 = 0\n  let remainder38 = 0\n  let remainder39 = 0\n  let remainder40 = 0\n  let remainder41 = 0\n  let remainder42 = 0\n  let remainder43 = 0\n  let remainder44 = 0\n  let remainder45 = 0\n  let remainder46 = 0\n  let remainder47 = 0\n  let remainder48 = 0\n  let remainder49 = 0\n  let remainder50 = 0\n  let remainder51 = 0\n  let remainder52 = 0\n  let remainder53 = 0\n  let remainder54 = 0\n  let remainder55 = 0\n  let remainder56 = 0\n  let remainder57 = 0\n  let remainder58 = 0\n  let remainder59 = 0\n  let remainder60 = 0\n  let remainder61 = 0\n  let remainder62 = 0\n  let remainder63 = 0\n  let remainder64 = 0\n  let remainder65 = 0\n  let remainder66 = 0\n  let remainder67 = 0\n  let remainder68 = 0\n  let remainder69 = 0\n  let remainder70 = 0\n  let remainder71 = 0\n  let remainder72 = 0\n  let remainder73 = 0\n  let remainder74 = 0\n  let remainder75 = 0\n  let remainder76 = 0\n  let remainder77 = 0\n  let remainder78 = 0\n  let remainder79 = 0\n  let remainder80 = 0\n  let remainder81 = 0\n  let remainder82 = 0\n  let remainder83 = 0\n  let remainder84 = 0\n  let remainder85 = 0\n  let remainder86 = 0\n  let remainder87 = 0\n  let remainder88 = 0\n  let remainder89 = 0\n  let remainder90 = 0\n  let remainder91 = 0\n  let remainder92 = 0\n  let remainder93 = 0\n  let remainder94 = 0\n  let remainder95 = 0\n  let remainder96 = 0\n  let remainder97 = 0\n  let remainder98 = 0\n  let remainder99 = 0\n  let remainder100 = 0\n  let remainder101 = 0\n  let remainder102 = 0\n  let remainder103 = 0\n  let remainder104 = 0\n  let remainder105 = 0\n  let remainder106 = 0\n  let remainder107 = 0\n  let remainder108 = 0\n  let remainder109 = 0\n  let remainder110 = 0\n  let remainder111 = 0\n  let remainder112 = 0\n  let remainder113 = 0\n  let remainder114 = 0\n  let remainder115 = 0\n  let remainder116 = 0\n  let remainder117 = 0\n  let remainder118 = 0\n  let remainder119 = 0\n  let remainder120 = 0\n  let remainder121 = 0\n  let remainder122 = 0\n  let remainder123 = 0\n  let remainder124 = 0\n  let remainder125 = 0\n  let remainder126 = 0\n  let remainder127 = 0\n  let remainder128 = 0\n  let remainder129 = 0\n  let remainder130 = 0\n  let remainder131 = 0\n  let remainder132 = 0\n  let remainder133 = 0\n  let remainder134 = 0\n  let remainder135 = 0\n  let remainder136 = 0\n  let remainder137 = 0\n  let remainder138 = 0\n  let remainder139 = 0\n  let remainder140 = 0\n  let remainder141 = 0\n  let remainder142 = 0\n  let remainder143 = 0\n  let remainder144 = 0\n  let remainder145 = 0\n  let remainder146 = 0\n  let remainder147 = 0\n  let remainder148 = 0\n  let remainder149 = 0\n  let remainder150 = 0\n  let remainder151 = 0\n  let remainder152 = 0\n  let remainder153 = 0\n  let remainder154 = 0\n  let remainder155 = 0\n  let remainder156 = 0\n  let remainder157 = 0\n  let remainder158 = 0\n  let remainder159 = 0\n  let remainder160 = 0\n  let remainder161 = 0\n  let remainder162 = 0\n  let remainder163 = 0\n  let remainder164 = 0\n  let remainder165 = 0\n  let remainder166 = 0\n  let remainder167 = 0\n  let remainder168 = 0\n  let remainder169 = 0\n  let remainder170 = 0\n  let remainder171 = 0\n  let remainder172 = 0\n  let remainder173 = 0\n  let remainder174 = 0\n  let remainder175 = 0\n  let remainder176 = 0\n  let remainder177 = 0\n  let remainder178 = 0\n  let remainder179 = 0\n  let remainder180 = 0\n  let remainder181 = 0\n  let remainder182 = 0\n  let remainder183 = 0\n  let remainder184 = 0\n  let remainder185 = 0\n  let remainder186 = 0\n  let remainder187 = 0\n  let remainder188 = 0\n  let remainder189 = 0\n  let remainder190 = 0\n  let remainder191 = 0\n  let remainder192 = 0\n  let remainder193 = 0\n  let remainder194 = 0\n  let remainder195 = 0\n  let remainder196 = 0\n  let remainder197 = 0\n  let remainder198 = 0\n  let remainder199 = 0\n  let remainder200 = 0\n  let remainder201 = 0\n  let remainder202 = 0\n  let remainder203 = 0\n  let remainder204 = 0\n  let remainder205 = 0\n  let remainder206 = 0\n  let remainder207 = 0\n  let remainder208 = 0\n  let remainder209 = 0\n  let remainder210 = 0\n  let remainder211 = 0\n  let remainder212 = 0\n  let remainder213 = 0\n  let remainder214 = 0\n  let remainder215 = 0\n  let remainder216 = 0\n  let remainder217 = 0\n  let remainder218 = 0\n  let remainder219 = 0\n  let remainder220 = 0\n  let remainder221 = 0\n  let remainder222 = 0\n  let remainder223 = 0\n  let remainder224 = 0\n  let remainder225 = 0\n  let remainder226 = 0\n  let remainder227 = 0\n  let remainder228 = 0\n  let remainder229 = 0\n  let remainder230 = 0\n  let remainder231 = 0\n  let remainder232 = 0\n  let remainder233 = 0\n  let remainder234 = 0\n  let remainder235 = 0\n  let remainder236 = 0\n  let remainder237 = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  const reversed = arr.slice().reverse();\n  const durations = reversed.map((num) => num.toString().padStart(2, '0'));\n  const durationsArray = durations.map((num) => num.toString());\n  const durationsArrayReversed = durationsArray.reverse();\n  const durationsArrayReversedArray = durationsArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversed = durationsArrayReversedArray.reverse();\n  const durationsArrayReversedArrayReversedArray = durationsArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArray = durationsArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArray = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed.map((num) => num.toString());\n  const durationsArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversedArrayReversed = duration", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Implement the function q that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 2, 6, 24, 15]\n  */\nconst q = (n) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0);\n  return [...evenPalindromes,...oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(2, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome2 = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0);\n  return [...evenPalindromes,...oddPalindromes].filter(\n    (_, i) => evenPalindromes.includes(i) && oddPalindromes.includes(i)\n  );\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(3, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome3 = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0);\n  return [...evenPalindromes,...oddPalindromes].filter(\n    (_, i) => evenPalindromes.includes(i) && oddPalindromes.includes(i) && evenPalindromes.includes(i)\n  );\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(4, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome4 = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0);\n  return [...evenPalindromes,...oddPalindromes].filter(\n    (_, i) => evenPalindromes.includes(i) && oddPalindromes.includes(i) && evenPalindromes.includes(i) && oddPalindromes.includes(i)\n  );\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(5, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome5 = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0);\n  return [...evenPalindromes,...oddPalindromes].filter(\n    (_, i) => evenPalindromes.includes(i) && oddPalindromes.includes(i) && evenPalindromes.includes(i) && oddPalindromes.includes(i) && evenPalindromes.includes(i)\n  );\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(6, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome6 = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0);\n  return [...evenPalindromes,...oddPalindromes].filter(\n    (_, i) => evenPalindromes.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "<|endoftext|>/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      return i;\n    }\n  }\n  return arr.length;\n};\n\n/*\n  Write a function considerNegNums which takes an array of integers and returns\n  the number of elements which has a sum of digits < 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNegNums([]) == 0\n  >>> considerNegNums([-1, 11, -11]) == 1\n  >>> considerNegNums([1, 1, 2]) == 3\n  */\nconst considerNegNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum < 0) {\n      return i;\n    }\n  }\n  return arr.length;\n};\n\n/*\n  Write a function sumDigits which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits([11, -12, 12]) == 12\n  */\nconst sumDigits = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits2 which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits2([]) == 12\n  >>> sumDigits2([11, -12, 12]) == 12\n  */\nconst sumDigits2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits3 which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits3([]) == 12\n  >>> sumDigits3([11, -12, 12]) == 12\n  */\nconst sumDigits3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toLocaleString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits4 which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits4([]) == 12\n  >>> sumDigits4([11, -12, 12]) == 12\n  */\nconst sumDigits4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toLocaleString('en-US');\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits5 which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits5([]) == 12\n  >>> sumDigits5([11, -12, 12]) == 12\n  */\nconst sumDigits5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      maximumIntegerDigits: 2\n    });\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits6 which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits6([]) == 12\n  >>> sumDigits6([11, -12, 12]) == 12\n  */\nconst sumDigits6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      maximumIntegerDigits: 3,\n      useGrouping: true\n    });\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits7 which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits7([]) == 12\n  >>> sumDigits7([11, -12, 12]) == 12\n  */\nconst sumDigits7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      maximumIntegerDigits: 3,\n      useGrouping: true,\n      minimumSignificantDigits: 1\n    });\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits8 which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits8([]) == 12\n  >>> sumDigits8([11, -12, 12]) == 12\n  */\nconst sumDigits8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      maximumIntegerDigits: 3,\n      useGrouping: true,\n      minimumSignificantDigits: 1,\n      maximumSignificantDigits: 1\n    });\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits9 which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits9([]) == 12\n  >>> sumDigits9([11, -12, 12]) == 12\n  */\nconst sumDigits9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      maximumIntegerDigits: 3,\n      useGrouping: true,\n      minimumSignificantDigits: 1,\n      maximumSignificantDigits: 1,\n      minimumIntegerDigits: 2,\n      maximumIntegerDigits: 2\n    });\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits10 which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits10([]) == 12\n  >>> sumDigits10([11, -12, 12]) == 12\n  */\nconst sumDigits10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      maximumIntegerDigits: 3,\n      useGrouping: true,\n      minimumSignificantDigits: 1,\n      maximumSignificantDigits: 1,\n      minimumIntegerDigits: 2,\n      maximumIntegerDigits: 2,\n      minimumIntegerDigits: 2,\n      maximumIntegerDigits: 2\n    });\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits11 which takes an array of integers and returns\n  the sum of all digits of its elements:\n  e.g. [11, -12, 12] -> 12\n  >>> sumDigits11([]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  let sortedArr = [];\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrIndex1 = 0;\n  let arrIndex2 = 0;\n  let arrIndex3 = 0;\n  let arrIndex4 = 0;\n  let arrIndex5 = 0;\n  let arrIndex6 = 0;\n  let arrIndex7 = 0;\n  let arrIndex8 = 0;\n  let arrIndex9 = 0;\n  let arrIndex10 = 0;\n  let arrIndex11 = 0;\n  let arrIndex12 = 0;\n  let arrIndex13 = 0;\n  let arrIndex14 = 0;\n  let arrIndex15 = 0;\n  let arrIndex16 = 0;\n  let arrIndex17 = 0;\n  let arrIndex18 = 0;\n  let arrIndex19 = 0;\n  let arrIndex20 = 0;\n  let arrIndex21 = 0;\n  let arrIndex22 = 0;\n  let arrIndex23 = 0;\n  let arrIndex24 = 0;\n  let arrIndex25 = 0;\n  let arrIndex26 = 0;\n  let arrIndex27 = 0;\n  let arrIndex28 = 0;\n  let arrIndex29 = 0;\n  let arrIndex30 = 0;\n  let arrIndex31 = 0;\n  let arrIndex32 = 0;\n  let arrIndex33 = 0;\n  let arrIndex34 = 0;\n  let arrIndex35 = 0;\n  let arrIndex36 = 0;\n  let arrIndex37 = 0;\n  let arrIndex38 = 0;\n  let arrIndex39 = 0;\n  let arrIndex40 = 0;\n  let arrIndex41 = 0;\n  let arrIndex42 = 0;\n  let arrIndex43 = 0;\n  let arrIndex44 = 0;\n  let arrIndex45 = 0;\n  let arrIndex46 = 0;\n  let arrIndex47 = 0;\n  let arrIndex48 = 0;\n  let arrIndex49 = 0;\n  let arrIndex50 = 0;\n  let arrIndex51 = 0;\n  let arrIndex52 = 0;\n  let arrIndex53 = 0;\n  let arrIndex54 = 0;\n  let arrIndex55 = 0;\n  let arrIndex56 = 0;\n  let arrIndex57 = 0;\n  let arrIndex58 = 0;\n  let arrIndex59 = 0;\n  let arrIndex60 = 0;\n  let arrIndex61 = 0;\n  let arrIndex62 = 0;\n  let arrIndex63 = 0;\n  let arrIndex64 = 0;\n  let arrIndex65 = 0;\n  let arrIndex66 = 0;\n  let arrIndex67 = 0;\n  let arrIndex68 = 0;\n  let arrIndex69 = 0;\n  let arrIndex70 = 0;\n  let arrIndex71 = 0;\n  let arrIndex72 = 0;\n  let arrIndex73 = 0;\n  let arrIndex74 = 0;\n  let arrIndex75 = 0;\n  let arrIndex76 = 0;\n  let arrIndex77 = 0;\n  let arrIndex78 = 0;\n  let arrIndex79 = 0;\n  let arrIndex80 = 0;\n  let arrIndex81 = 0;\n  let arrIndex82 = 0;\n  let arrIndex83 = 0;\n  let arrIndex84 = 0;\n  let arrIndex85 = 0;\n  let arrIndex86 = 0;\n  let arrIndex87 = 0;\n  let arrIndex88 = 0;\n  let arrIndex89 = 0;\n  let arrIndex90 = 0;\n  let arrIndex91 = 0;\n  let arrIndex92 = 0;\n  let arrIndex93 = 0;\n  let arrIndex94 = 0;\n  let arrIndex95 = 0;\n  let arrIndex96 = 0;\n  let arrIndex97 = 0;\n  let arrIndex98 = 0;\n  let arrIndex99 = 0;\n  let arrIndex100 = 0;\n  let arrIndex101 = 0;\n  let arrIndex102 = 0;\n  let arrIndex103 = 0;\n  let arrIndex104 = 0;\n  let arrIndex105 = 0;\n  let arrIndex106 = 0;\n  let arrIndex107 = 0;\n  let arrIndex108 = 0;\n  let arrIndex109 = 0;\n  let arrIndex110 = 0;\n  let arrIndex111 = 0;\n  let arrIndex112 = 0;\n  let arrIndex113 = 0;\n  let arrIndex114 = 0;\n  let arrIndex115 = 0;\n  let arrIndex116 = 0;\n  let arrIndex117 = 0;\n  let arrIndex118 = 0;\n  let arrIndex119 = 0;\n  let arrIndex120 = 0;\n  let arrIndex121 = 0;\n  let arrIndex122 = 0;\n  let arrIndex123 = 0;\n  let arrIndex124 = 0;\n  let arrIndex125 = 0;\n  let arrIndex126 = 0;\n  let arrIndex127 = 0;\n  let arrIndex128 = 0;\n  let arrIndex129 = 0;\n  let arrIndex130 = 0;\n  let arrIndex131 = 0;\n  let arrIndex132 = 0;\n  let arrIndex133 = 0;\n  let arrIndex134 = 0;\n  let arrIndex135 = 0;\n  let arrIndex136 = 0;\n  let arrIndex137 = 0;\n  let arrIndex138 = 0;\n  let arrIndex139 = 0;\n  let arrIndex140 = 0;\n  let arrIndex141 = 0;\n  let arrIndex142 = 0;\n  let arrIndex143 = 0;\n  let arrIndex144 = 0;\n  let arrIndex145 = 0;\n  let arrIndex146 = 0;\n  let arrIndex147 = 0;\n  let arrIndex148 = 0;\n  let arrIndex149 = 0;\n  let arrIndex150 = 0;\n  let arrIndex151 = 0;\n  let arrIndex152 = 0;\n  let arrIndex153 = 0;\n  let arrIndex154 = 0;\n  let arrIndex155 = 0;\n  let arrIndex156 = 0;\n  let arrIndex157 = 0;\n  let arrIndex158 = 0;\n  let arrIndex159 = 0;\n  let arrIndex160 = 0;\n  let arrIndex161 = 0;\n  let arrIndex162 = 0;\n  let arrIndex163 = 0;\n  let arrIndex164 = 0;\n  let arrIndex165 = 0;\n  let arrIndex166 = 0;\n  let arrIndex167 = 0;\n  let arrIndex168 = 0;\n  let arrIndex169 = 0;\n  let arrIndex170 = 0;\n  let arrIndex171 = 0;\n  let arrIndex172 = 0;\n  let arrIndex173 = 0;\n  let arrIndex174 = 0;\n  let arrIndex175 = 0;\n  let arrIndex176 = 0;\n  let arrIndex177 = 0;\n  let arrIndex178 = 0;\n  let arrIndex179 = 0;\n  let arrIndex180 = 0;\n  let arrIndex181 = 0;\n  let arrIndex182 = 0;\n  let arrIndex183 = 0;\n  let arrIndex184 = 0;\n  let arrIndex185 = 0;\n  let arrIndex186 = 0;\n  let arrIndex187 = 0;\n  let arrIndex188 = 0;\n  let arrIndex189 = 0;\n  let arrIndex190 = 0;\n  let arrIndex191 = 0;\n  let arrIndex192 = 0;\n  let arrIndex193 = 0;\n  let arrIndex194 = 0;\n  let arrIndex195 = 0;\n  let arrIndex196 = 0;\n  let arrIndex197 = 0;\n  let arrIndex198 = 0;\n  let arrIndex199 = 0;\n  let arrIndex200 = 0;\n  let arrIndex201 = 0;\n  let arrIndex202 = 0;\n  let arrIndex203 = 0;\n  let arrIndex204 = 0;\n  let arrIndex205 = 0;\n  let arrIndex206 = 0;\n  let arrIndex207 = 0;\n  let arrIndex208 = 0;\n  let arrIndex209 = 0;\n  let arrIndex210 = 0;\n  let arrIndex211 = 0;\n  let arrIndex212 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentAnd(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentOr(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentAnd(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentOr(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentAnd(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentOr(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentAnd(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentOr(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentAnd(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentOr(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentAnd(['010', '110'])\n  '100'\n  */\nconst bowedStringedInstrumentAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  if (lst1.length < lst2.length) {\n    return central(lst2, lst1);\n  }\n  let centralNumber = 0;\n  let centralNumbers = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  if (centralNumber === lst1.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = central;\n\n},{}],3:[function(require,module,exports){\n/*\n  You are given two lists of numbers, nums1 and nums2, and are asked to find out whether it is possible to perform an central of elements from nums1 to make nums2 a list of only even numbers.\n  For example:\n  central([1,2,3], [1,2,3]) => \"YES\"\n  central([1,2,3], [1,5,3]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (nums1, nums2) => {\n  if (nums1.length < nums2.length) {\n    return central(nums2, nums1);\n  }\n  let centralNumber = 0;\n  let centralNumbers = [];\n  for (let i = 0; i < nums1.length; i++) {\n    if (nums1[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  for (let i = 0; i < nums2.length; i++) {\n    if (nums2[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  if (centralNumber === nums1.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = central;\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given two lists of numbers, nums1 and nums2, and are asked to find out whether it is possible to perform an central of elements from nums1 to make nums2 a list of only odd numbers.\n  For example:\n  central([1,2,3], [1,2,3]) => \"YES\"\n  central([1,2,3], [1,5,3]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (nums1, nums2) => {\n  if (nums1.length < nums2.length) {\n    return central(nums2, nums1);\n  }\n  let centralNumber = 0;\n  let centralNumbers = [];\n  for (let i = 0; i < nums1.length; i++) {\n    if (nums1[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  for (let i = 0; i < nums2.length; i++) {\n    if (nums2[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  if (centralNumber === nums1.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = central;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given two lists of numbers, nums1 and nums2, and are asked to find out whether it is possible to perform an central of elements from nums1 to make nums2 a list of only odd numbers.\n  For example:\n  central([1,2,3], [1,2,3]) => \"YES\"\n  central([1,2,3], [1,5,3]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (nums1, nums2) => {\n  if (nums1.length < nums2.length) {\n    return central(nums2, nums1);\n  }\n  let centralNumber = 0;\n  let centralNumbers = [];\n  for (let i = 0; i < nums1.length; i++) {\n    if (nums1[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  for (let i = 0; i < nums2.length; i++) {\n    if (nums2[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  if (centralNumber === nums1.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = central;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given two lists of numbers, nums1 and nums2, and are asked to find out whether it is possible to perform an central of elements from nums1 to make nums2 a list of only odd numbers.\n  For example:\n  central([1,2,3], [1,2,3]) => \"YES\"\n  central([1,2,3], [1,5,3]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (nums1, nums2) => {\n  if (nums1.length < nums2.length) {\n    return central(nums2, nums1);\n  }\n  let centralNumber = 0;\n  let centralNumbers = [];\n  for (let i = 0; i < nums1.length; i++) {\n    if (nums1[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  for (let i = 0; i < nums2.length; i++) {\n    if (nums2[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  if (centralNumber === nums1.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = central;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given two lists of numbers, nums1 and nums2, and are asked to find out whether it is possible to perform an central of elements from nums1 to make nums2 a list of only odd numbers.\n  For example:\n  central([1,2,3], [1,2,3]) => \"YES\"\n  central([1,2,3], [1,5,3]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (nums1, nums2) => {\n  if (nums1.length < nums2.length) {\n    return central(nums2, nums1);\n  }\n  let centralNumber = 0;\n  let centralNumbers = [];\n  for (let i = 0; i < nums1.length; i++) {\n    if (nums1[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  for (let i = 0; i < nums2.length; i++) {\n    if (nums2[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  if (centralNumber === nums1.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = central;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given two lists of numbers, nums1 and nums2, and are asked to find out whether it is possible to perform an central of elements from nums1 to make nums2 a list of only odd numbers.\n  For example:\n  central([1,2,3], [1,2,3]) => \"YES\"\n  central([1,2,3], [1,5,3]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (nums1, nums2) => {\n  if (nums1.length < nums2.length) {\n    return central(nums2, nums1);\n  }\n  let centralNumber = 0;\n  let centralNumbers = [];\n  for (let i = 0; i < nums1.length; i++) {\n    if (nums1[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  for (let i = 0; i < nums2.length; i++) {\n    if (nums2[i] % 2 === 0) {\n      centralNumber++;\n    }\n  }\n  if (centralNumber === nums1.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = central;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given two lists of numbers, nums1 and nums2, and are asked to find out whether it is possible to perform an central of elements from nums1 to make nums2 a list of only odd numbers.\n  For example:\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(x => x.toLowerCase());\n  let counts = {};\n  let max = 0;\n  let maxCount = 0;\n  \n  for (let i = 0; i < letters.length; i++) {\n    if (counts[letters[i]]) {\n      counts[letters[i]] += 1;\n    } else {\n      counts[letters[i]] = 1;\n    }\n  }\n  \n  for (let key in counts) {\n    if (counts[key] > maxCount) {\n      max = counts[key];\n      maxCount = counts[key];\n    }\n  }\n  \n  return { max, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(x => x.toLowerCase());\n  let counts = {};\n  let max = 0;\n  let maxCount = 0;\n  \n  for (let i = 0; i < letters.length; i++) {\n    if (counts[letters[i]]) {\n      counts[letters[i]] += 1;\n    } else {\n      counts[letters[i]] = 1;\n    }\n  }\n  \n  for (let key in counts) {\n    if (counts[key] > maxCount) {\n      max = counts[key];\n      maxCount = counts[key];\n    }\n  }\n  \n  return { max, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(x => x.toLowerCase());\n  let counts = {};\n  let max = 0;\n  let maxCount = 0;\n  \n  for (let i = 0; i < letters.length; i++) {\n    if (counts[letters[i]]) {\n      counts[letters[i]] += 1;\n    } else {\n      counts[letters[i]] = 1;\n    }\n  }\n  \n  for (let key in counts) {\n    if (counts[key] > maxCount) {\n      max = counts[key];\n      maxCount = counts[key];\n    }\n  }\n  \n  return { max, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(x => x.toLowerCase());\n  let counts = {};\n  let max = 0;\n  let maxCount = 0;\n  \n  for (let i = 0; i < letters.length; i++) {\n    if (counts[letters[i]]) {\n      counts[letters[i]] += 1;\n    } else {\n      counts[letters[i]] = 1;\n    }\n  }\n  \n  for (let key in counts) {\n    if (counts[key] > maxCount) {\n      max = counts[key];\n      maxCount = counts[key];\n    }\n  }\n  \n  return { max, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(x => x.toLowerCase());\n  let counts = {};\n  let max = 0;\n  let maxCount = 0;\n  \n  for (let i = 0; i < letters.length; i++) {\n    if (counts[letters[i]]) {\n      counts[letters[i]] += 1;\n    } else {\n      counts[letters[i]] = 1;\n    }\n  }\n  \n  for (let key in counts) {\n    if (counts[key] > maxCount) {\n      max = counts[key];\n      maxCount = counts[key];\n    }\n  }\n  \n  return { max, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(x => x.toLowerCase());\n  let counts = {};\n  let max = 0;\n  let maxCount = 0;\n  \n  for (let i = 0; i < letters.length; i++) {\n    if (counts[letters[i]]) {\n      counts[letters[i]] += 1;\n    } else {\n      counts[letters[i]] = 1;\n    }\n  }\n  \n  for (let key in counts) {\n    if (counts[key] > maxCount) {\n      max = counts[key];\n      maxCount = counts[key];\n    }\n  }\n  \n  return { max, maxCount };\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ').map(x => x.toLowerCase());\n  let counts = {};\n  let max = 0;\n  let maxCount = 0;\n  \n  for (let i = 0; i < letters.length; i++) {\n    if (counts[letters[i]]) {\n      counts[letters[i]] += 1;\n    } else {\n      counts[letters[i]] = 1;\n    }\n  }\n  \n  for (let key in counts) {\n    if (counts[key] > maxCount) {\n      max = counts[key];\n      maxCount = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (s[i] === c[j]) {\n      result += s[i]\n      isPalindrome = true\n      i++\n      j++\n    } else {\n      result += c[j]\n      j++\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given a string s and an integer k, you have to delete all the characters in s that are equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst invertDeleteK = (s, k) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (s[i] === k) {\n      result += s[i]\n      isPalindrome = true\n      i++\n      j++\n    } else {\n      result += s[k]\n      j++\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given a string s and an integer k, you have to delete all the characters in s that are equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst invertDeleteKK = (s, k) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (s[i] === k) {\n      result += s[i]\n      isPalindrome = true\n      i++\n      j++\n    } else {\n      result += s[k]\n      j++\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given a string s and an integer k, you have to delete all the characters in s that are equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst invertDeleteKKK = (s, k) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (s[i] === k) {\n      result += s[i]\n      isPalindrome = true\n      i++\n      j++\n    } else {\n      result += s[k]\n      j++\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given a string s and an integer k, you have to delete all the characters in s that are equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst invertDeleteKKKK = (s, k) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (s[i] === k) {\n      result += s[i]\n      isPalindrome = true\n      i++\n      j++\n    } else {\n      result += s[k]\n      j++\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given a string s and an integer k, you have to delete all the characters in s that are equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst invertDeleteKKKKK = (s, k) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (s[i] === k) {\n      result += s[i]\n      isPalindrome = true\n      i++\n      j++\n    } else {\n      result += s[k]\n      j++\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given a string s and an integer k, you have to delete all the characters in s that are equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", k = 3, the result should be ('acdef',false)\n  For s = \"abcdedcba\", k = 3, the result should be ('cdedc',true)\n  */\nconst invertDeleteKKKKK = (s, k) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (s[i] === k) {\n      result += s[i]\n      isPalindrome = true\n      i++\n      j++\n    } else {\n      result += s[k]\n      j++\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given a string s and an integer k, you have to delete all the characters in s that are equal to k\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", k = 3, the result should be ('bcd',false)\n  For s = \"abcdef\", ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  let oddCount = 0;\n  let oddString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      oddCount += 1;\n      oddString += lst[i];\n    }\n  }\n  return [oddCount, oddString];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let evenString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenCount += 1;\n      evenString += lst[i];\n    }\n  }\n  return [evenCount, evenString];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddCount = 0;\n  let oddString = \"\";\n  let evenCount = 0;\n  let evenString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      oddCount += 1;\n      oddString += lst[i];\n    }\n    if (lst[i] % 2 === 1) {\n      evenCount += 1;\n      evenString += lst[i];\n    }\n  }\n  return [oddCount, oddString, evenCount, evenString];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount2 = (lst) => {\n  let oddCount = 0;\n  let oddString = \"\";\n  let evenCount = 0;\n  let evenString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      oddCount += 1;\n      oddString += lst[i];\n    }\n    if (lst[i] % 2 === 1) {\n      evenCount += 1;\n      evenString += lst[i];\n    }\n  }\n  return [oddCount, oddString, evenCount, evenString];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount3 = (lst) => {\n  let oddCount = 0;\n  let oddString = \"\";\n  let evenCount = 0;\n  let evenString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      oddCount += 1;\n      oddString += lst[i];\n    }\n    if (lst[i] % 2 === 1) {\n      evenCount += 1;\n      evenString += lst[i];\n    }\n  }\n  return [oddCount, oddString, evenCount, evenString];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount4 = (lst) => {\n  let oddCount = 0;\n  let oddString = \"\";\n  let evenCount = 0;\n  let evenString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      oddCount += 1;\n      oddString += lst[i];\n    }\n    if (lst[i] % 2 === 1) {\n      evenCount += 1;\n      evenString += lst[i];\n    }\n  }\n  return [oddCount, oddString, evenCount, evenString];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount5 = (lst) => {\n  let oddCount = 0;\n  let oddString = \"\";\n  let evenCount = 0;\n  let evenString = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      oddCount += 1;\n      oddString += lst[i];\n    }\n    if (lst[i] % 2 === 1) {\n      evenCount += 1;\n      evenString += lst[i];\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArrayMax = (nums) => {\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArrayMin = (nums) => {\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMin = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMax = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMaxMin = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > sum && nums[i] < sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMaxMin = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMinMax = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMinMax = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMinMaxMin = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > sum && nums[i] < sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMinMaxMin = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMinMaxMax = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMinMaxMaxMin = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMinMaxMaxMax = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMinMaxMaxMin = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > sum) {\n      sum = nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minuteSubArraySum([-1, -2, -3]) == -3\n  */\nconst minuteSubArraySumMinMaxMaxMaxMin = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  let result = 0;\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[row].length; col++) {\n      if (grid[row][col] === 1) {\n        result += soapFill(grid, capacity - 1);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(gridSize, capacity);\n * var param_1 = obj.solve();\n */\nvar Solution = function(gridSize, capacity) {\n  this.grid = [];\n  this.capacity = capacity;\n  this.gridSize = gridSize;\n  this.grid = this.initGrid();\n};\n\n/**\n * Initializes the grid of wells.\n * @return {void} Do not return anything, modify grid in-place instead.\n */\nSolution.prototype.initGrid = function() {\n  let gridSize = this.gridSize;\n  let grid = [];\n  for (let i = 0; i < gridSize; i++) {\n    grid[i] = [];\n    for (let j = 0; j < gridSize; j++) {\n      grid[i][j] = 0;\n    }\n  }\n  return grid;\n};\n\n/**\n * Adds a well to the grid.\n * @param {number} row The row of the well.\n * @param {number} col The column of the well.\n * @return {void} Do not return anything, modify grid in-place instead.\n */\nSolution.prototype.addWell = function(row, col) {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  grid[row][col] = 1;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        grid[i][j] = 1;\n        grid[i][col] = 1;\n        grid[row][col] = 1;\n      }\n    }\n  }\n};\n\n/**\n * Removes a well from the grid.\n * @param {number} row The row of the well.\n * @param {number} col The column of the well.\n * @return {void} Do not return anything, modify grid in-place instead.\n */\nSolution.prototype.removeWell = function(row, col) {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  grid[row][col] = 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        grid[i][j] = 0;\n        grid[i][col] = 0;\n        grid[row][col] = 0;\n      }\n    }\n  }\n};\n\n/**\n * Removes all wells from the grid.\n * @return {void} Do not return anything, modify grid in-place instead.\n */\nSolution.prototype.removeAllWells = function() {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      grid[i][j] = 0;\n    }\n  }\n};\n\n/**\n * Returns the number of wells in the grid.\n * @return {number} The number of wells in the grid.\n */\nSolution.prototype.getNumWells = function() {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  let count = 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Returns the number of wells in the grid.\n * @return {number} The number of wells in the grid.\n */\nSolution.prototype.getNumWellsInGrid = function() {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  let count = 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Returns the number of wells in the grid.\n * @return {number} The number of wells in the grid.\n */\nSolution.prototype.getNumWellsInGridWithCapacity = function() {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  let count = 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Returns the number of wells in the grid.\n * @return {number} The number of wells in the grid.\n */\nSolution.prototype.getNumWellsInGridWithCapacityAndCapacity = function() {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  let count = 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Returns the number of wells in the grid.\n * @return {number} The number of wells in the grid.\n */\nSolution.prototype.getNumWellsInGridWithCapacityAndCapacityAndCapacity = function() {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  let count = 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Returns the number of wells in the grid.\n * @return {number} The number of wells in the grid.\n */\nSolution.prototype.getNumWellsInGridWithCapacityAndCapacityAndCapacityAndCapacity = function() {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  let count = 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Returns the number of wells in the grid.\n * @return {number} The number of wells in the grid.\n */\nSolution.prototype.getNumWellsInGridWithCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacity = function() {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  let count = 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Returns the number of wells in the grid.\n * @return {number} The number of wells in the grid.\n */\nSolution.prototype.getNumWellsInGridWithCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacity = function() {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  let count = 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Returns the number of wells in the grid.\n * @return {number} The number of wells in the grid.\n */\nSolution.prototype.getNumWellsInGridWithCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacityAndCapacity = function() {\n  let gridSize = this.gridSize;\n  let grid = this.grid;\n  let count = 0;\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Returns the number of wells in the grid.\n * @return {number} The number of wells in the grid.\n */", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [];\n  let ones = 0;\n  let twos = 0;\n  let threes = 0;\n  let fours = 0;\n  let fives = 0;\n  let sixes = 0;\n  let sevens = 0;\n  let eights = 0;\n  let n = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let temp;\n\n  for (i = 0, l = arr.length; i < l; i++) {\n    ones = arr[i];\n    if (ones === 1) {\n      result.push(ones);\n      n++;\n    } else {\n      twos = ones * 2;\n      if (twos === 1) {\n        result.push(twos);\n        n++;\n      } else {\n        threes = twos * 3;\n        if (threes === 1) {\n          result.push(threes);\n          n++;\n        } else {\n          fours = threes * 4;\n          if (fours === 1) {\n            result.push(fours);\n            n++;\n          } else {\n            fives = fours * 5;\n            if (fives === 1) {\n              result.push(fives);\n              n++;\n            } else {\n              sixes = fives * 6;\n              if (sixes === 1) {\n                result.push(sixes);\n                n++;\n              } else {\n                sevens = sixes * 7;\n                if (sevens === 1) {\n                  result.push(sevens);\n                  n++;\n                } else {\n                  eights = sevens * 8;\n                  if (eights === 1) {\n                    result.push(eights);\n                    n++;\n                  } else {\n                    result.push(twos);\n                    n++;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (n === 0) {\n    result.push(twos);\n  }\n\n  if (n === 1) {\n    result.push(threes);\n  }\n\n  if (n === 2) {\n    result.push(fours);\n  }\n\n  if (n === 3) {\n    result.push(fives);\n  }\n\n  if (n === 4) {\n    result.push(sixes);\n  }\n\n  if (n === 5) {\n    result.push(sevens);\n  }\n\n  if (n === 6) {\n    result.push(eights);\n  }\n\n  return result;\n};\n\nconst isEven = (num) => {\n  return num % 2 === 0;\n};\n\nconst isOdd = (num) => {\n  return num % 2!== 0;\n};\n\nconst isEvenOrOdd = (arr) => {\n  let result = [];\n  let i;\n  let n;\n\n  for (i = 0, n = arr.length; i < n; i++) {\n    n = arr[i];\n    if (isEven(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    }\n  }\n\n  return result;\n};\n\nconst isEvenOrOddArray = (arr) => {\n  let result = [];\n  let i;\n  let n;\n\n  for (i = 0, n = arr.length; i < n; i++) {\n    n = arr[i];\n    if (isEvenOrOdd(n)) {\n      result.push(n);\n    }\n  }\n\n  return result;\n};\n\nconst isEvenOrOddArray2 = (arr) => {\n  let result = [];\n  let i;\n  let n;\n\n  for (i = 0, n = arr.length; i < n; i++) {\n    n = arr[i];\n    if (isEvenOrOdd(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    }\n  }\n\n  return result;\n};\n\nconst isEvenOrOddArray3 = (arr) => {\n  let result = [];\n  let i;\n  let n;\n\n  for (i = 0, n = arr.length; i < n; i++) {\n    n = arr[i];\n    if (isEvenOrOdd(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    }\n  }\n\n  return result;\n};\n\nconst isEvenOrOddArray4 = (arr) => {\n  let result = [];\n  let i;\n  let n;\n\n  for (i = 0, n = arr.length; i < n; i++) {\n    n = arr[i];\n    if (isEvenOrOdd(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    }\n  }\n\n  return result;\n};\n\nconst isEvenOrOddArray5 = (arr) => {\n  let result = [];\n  let i;\n  let n;\n\n  for (i = 0, n = arr.length; i < n; i++) {\n    n = arr[i];\n    if (isEvenOrOdd(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    }\n  }\n\n  return result;\n};\n\nconst isEvenOrOddArray6 = (arr) => {\n  let result = [];\n  let i;\n  let n;\n\n  for (i = 0, n = arr.length; i < n; i++) {\n    n = arr[i];\n    if (isEvenOrOdd(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    }\n  }\n\n  return result;\n};\n\nconst isEvenOrOddArray7 = (arr) => {\n  let result = [];\n  let i;\n  let n;\n\n  for (i = 0, n = arr.length; i < n; i++) {\n    n = arr[i];\n    if (isEvenOrOdd(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    }\n  }\n\n  return result;\n};\n\nconst isEvenOrOddArray8 = (arr) => {\n  let result = [];\n  let i;\n  let n;\n\n  for (i = 0, n = arr.length; i < n; i++) {\n    n = arr[i];\n    if (isEvenOrOdd(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    }\n  }\n\n  return result;\n};\n\nconst isEvenOrOddArray9 = (arr) => {\n  let result = [];\n  let i;\n  let n;\n\n  for (i = 0, n = arr.length; i < n; i++) {\n    n = arr[i];\n    if (isEvenOrOdd(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    } else if (isOdd(n)) {\n      result.push(n);\n    } else if (isEven(n)) {\n      result.push(n);\n    }\n  }\n\n  return result;\n};\n\nconst isEven", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let words = [];\n  let word = '';\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(i)) {\n      words.push(word);\n      word = '';\n      count++;\n    } else {\n      word += i;\n    }\n  }\n  if (count === n) {\n    words.push(word);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let words = [];\n  let word = '';\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(i)) {\n      words.push(word);\n      word = '';\n      count++;\n    } else {\n      word += i;\n    }\n  }\n  if (count === n) {\n    words.push(word);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let words = [];\n  let word = '';\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(i)) {\n      words.push(word);\n      word = '';\n      count++;\n    } else {\n      word += i;\n    }\n  }\n  if (count === n) {\n    words.push(word);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let words = [];\n  let word = '';\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(i)) {\n      words.push(word);\n      word = '';\n      count++;\n    } else {\n      word += i;\n    }\n  }\n  if (count === n) {\n    words.push(word);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let words = [];\n  let word = '';\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(i)) {\n      words.push(word);\n      word = '';\n      count++;\n    } else {\n      word += i;\n    }\n  }\n  if (count === n) {\n    words.push(word);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let words = [];\n  let word = '';\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(i)) {\n      words.push(word);\n      word = '';\n      count++;\n    } else {\n      word += i;\n    }\n  }\n  if (count === n) {\n    words.push(word);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDis", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelsArray = vowels.map(v => v.toLowerCase());\n  const vowelsArrayLength = vowelsArray.length;\n  const vowelsArrayIndexes = [];\n  let vowelsArrayIndex = 0;\n  let vowelsArrayIndexes = 0;\n  let vowelsArrayIndexes2 = 0;\n  let vowelsArrayIndexes3 = 0;\n  let vowelsArrayIndexes4 = 0;\n  let vowelsArrayIndexes5 = 0;\n  let vowelsArrayIndexes6 = 0;\n  let vowelsArrayIndexes7 = 0;\n  let vowelsArrayIndexes8 = 0;\n  let vowelsArrayIndexes9 = 0;\n  let vowelsArrayIndexes10 = 0;\n  let vowelsArrayIndexes11 = 0;\n  let vowelsArrayIndexes12 = 0;\n  let vowelsArrayIndexes13 = 0;\n  let vowelsArrayIndexes14 = 0;\n  let vowelsArrayIndexes15 = 0;\n  let vowelsArrayIndexes16 = 0;\n  let vowelsArrayIndexes17 = 0;\n  let vowelsArrayIndexes18 = 0;\n  let vowelsArrayIndexes19 = 0;\n  let vowelsArrayIndexes20 = 0;\n  let vowelsArrayIndexes21 = 0;\n  let vowelsArrayIndexes22 = 0;\n  let vowelsArrayIndexes23 = 0;\n  let vowelsArrayIndexes24 = 0;\n  let vowelsArrayIndexes25 = 0;\n  let vowelsArrayIndexes26 = 0;\n  let vowelsArrayIndexes27 = 0;\n  let vowelsArrayIndexes28 = 0;\n  let vowelsArrayIndexes29 = 0;\n  let vowelsArrayIndexes30 = 0;\n  let vowelsArrayIndexes31 = 0;\n  let vowelsArrayIndexes32 = 0;\n  let vowelsArrayIndexes33 = 0;\n  let vowelsArrayIndexes34 = 0;\n  let vowelsArrayIndexes35 = 0;\n  let vowelsArrayIndexes36 = 0;\n  let vowelsArrayIndexes37 = 0;\n  let vowelsArrayIndexes38 = 0;\n  let vowelsArrayIndexes39 = 0;\n  let vowelsArrayIndexes40 = 0;\n  let vowelsArrayIndexes41 = 0;\n  let vowelsArrayIndexes42 = 0;\n  let vowelsArrayIndexes43 = 0;\n  let vowelsArrayIndexes44 = 0;\n  let vowelsArrayIndexes45 = 0;\n  let vowelsArrayIndexes46 = 0;\n  let vowelsArrayIndexes47 = 0;\n  let vowelsArrayIndexes48 = 0;\n  let vowelsArrayIndexes49 = 0;\n  let vowelsArrayIndexes50 = 0;\n  let vowelsArrayIndexes51 = 0;\n  let vowelsArrayIndexes52 = 0;\n  let vowelsArrayIndexes53 = 0;\n  let vowelsArrayIndexes54 = 0;\n  let vowelsArrayIndexes55 = 0;\n  let vowelsArrayIndexes56 = 0;\n  let vowelsArrayIndexes57 = 0;\n  let vowelsArrayIndexes58 = 0;\n  let vowelsArrayIndexes59 = 0;\n  let vowelsArrayIndexes60 = 0;\n  let vowelsArrayIndexes61 = 0;\n  let vowelsArrayIndexes62 = 0;\n  let vowelsArrayIndexes63 = 0;\n  let vowelsArrayIndexes64 = 0;\n  let vowelsArrayIndexes65 = 0;\n  let vowelsArrayIndexes66 = 0;\n  let vowelsArrayIndexes67 = 0;\n  let vowelsArrayIndexes68 = 0;\n  let vowelsArrayIndexes69 = 0;\n  let vowelsArrayIndexes70 = 0;\n  let vowelsArrayIndexes71 = 0;\n  let vowelsArrayIndexes72 = 0;\n  let vowelsArrayIndexes73 = 0;\n  let vowelsArrayIndexes74 = 0;\n  let vowelsArrayIndexes75 = 0;\n  let vowelsArrayIndexes76 = 0;\n  let vowelsArrayIndexes77 = 0;\n  let vowelsArrayIndexes78 = 0;\n  let vowelsArrayIndexes79 = 0;\n  let vowelsArrayIndexes80 = 0;\n  let vowelsArrayIndexes81 = 0;\n  let vowelsArrayIndexes82 = 0;\n  let vowelsArrayIndexes83 = 0;\n  let vowelsArrayIndexes84 = 0;\n  let vowelsArrayIndexes85 = 0;\n  let vowelsArrayIndexes86 = 0;\n  let vowelsArrayIndexes87 = 0;\n  let vowelsArrayIndexes88 = 0;\n  let vowelsArrayIndexes89 = 0;\n  let vowelsArrayIndexes90 = 0;\n  let vowelsArrayIndexes91 = 0;\n  let vowelsArrayIndexes92 = 0;\n  let vowelsArrayIndexes93 = 0;\n  let vowelsArrayIndexes94 = 0;\n  let vowelsArrayIndexes95 = 0;\n  let vowelsArrayIndexes96 = 0;\n  let vowelsArrayIndexes97 = 0;\n  let vowelsArrayIndexes98 = 0;\n  let vowelsArrayIndexes99 = 0;\n  let vowelsArrayIndexes100 = 0;\n  let vowelsArrayIndexes101 = 0;\n  let vowelsArrayIndexes102 = 0;\n  let vowelsArrayIndexes103 = 0;\n  let vowelsArrayIndexes104 = 0;\n  let vowelsArrayIndexes105 = 0;\n  let vowelsArrayIndexes106 = 0;\n  let vowelsArrayIndexes107 = 0;\n  let vowelsArrayIndexes108 = 0;\n  let vowelsArrayIndexes109 = 0;\n  let vowelsArrayIndexes110 = 0;\n  let vowelsArrayIndexes111 = 0;\n  let vowelsArrayIndexes112 = 0;\n  let vowelsArrayIndexes113 = 0;\n  let vowelsArrayIndexes114 = 0;\n  let vowelsArrayIndexes115 = 0;\n  let vowelsArrayIndexes116 = 0;\n  let vowelsArrayIndexes117 = 0;\n  let vowelsArrayIndexes118 = 0;\n  let vowelsArrayIndexes119 = 0;\n  let vowelsArrayIndexes120 = 0;\n  let vowelsArrayIndexes121 = 0;\n  let vowelsArrayIndexes122 = 0;\n  let vowelsArrayIndexes123 = 0;\n  let vowelsArrayIndexes124 = 0;\n  let vowelsArrayIndexes125 = 0;\n  let vowelsArrayIndexes126 = 0;\n  let vowelsArrayIndexes127 = 0;\n  let vowelsArrayIndexes128 = 0;\n  let vowelsArrayIndexes129 = 0;\n  let vowelsArrayIndexes130 = 0;\n  let vowelsArrayIndexes131 = 0;\n  let vowelsArrayIndexes132 = 0;\n  let vowelsArrayIndexes133 = 0;\n  let vowelsArrayIndexes134 = 0;\n  let vowelsArrayIndexes135 = 0;\n  let vowelsArrayIndexes136 = 0;\n  let vowelsArrayIndexes137 = 0;\n  let vowelsArrayIndexes138 = 0;\n  let vowelsArrayIndexes139 = 0;\n  let vowelsArrayIndexes140 = 0;\n  let vowelsArrayIndexes141 = 0;\n  let vowelsArrayIndexes142 = 0;\n  let vowelsArrayIndexes143 = 0;\n  let vowelsArrayIndexes144 = 0;\n  let vowelsArrayIndexes145 = 0;\n  let vowelsArrayIndexes146 = 0;\n  let vowelsArrayIndexes147 = 0;\n  let vowelsArrayIndexes148 = 0;\n  let vowelsArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  let res = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  let str = '';\n  let open = 0;\n  let close = 0;\n  let openCount = 0;\n  let closeCount = 0;\n  let openParens = 0;\n  let closeParens = 0;\n  let openParensCount = 0;\n  let closeParensCount = 0;\n  let openParensOpen = 0;\n  let closeParensOpen = 0;\n  let openParensClose = 0;\n  let closeParensClose = 0;\n  let openParensOpenCount = 0;\n  let closeParensOpenCount = 0;\n  let openParensCloseCount = 0;\n  let closeParensCloseCount = 0;\n  let openParensOpenCount2 = 0;\n  let closeParensOpenCount2 = 0;\n  let openParensCloseCount2 = 0;\n  let closeParensCloseCount2 = 0;\n  let openParensOpenCount3 = 0;\n  let closeParensOpenCount3 = 0;\n  let openParensCloseCount3 = 0;\n  let closeParensCloseCount3 = 0;\n  let openParensOpenCount4 = 0;\n  let closeParensOpenCount4 = 0;\n  let openParensCloseCount4 = 0;\n  let closeParensCloseCount4 = 0;\n  let openParensOpenCount5 = 0;\n  let closeParensOpenCount5 = 0;\n  let openParensCloseCount5 = 0;\n  let closeParensCloseCount5 = 0;\n  let openParensOpenCount6 = 0;\n  let closeParensOpenCount6 = 0;\n  let openParensCloseCount6 = 0;\n  let closeParensCloseCount6 = 0;\n  let openParensOpenCount7 = 0;\n  let closeParensOpenCount7 = 0;\n  let openParensCloseCount7 = 0;\n  let closeParensCloseCount7 = 0;\n  let openParensOpenCount8 = 0;\n  let closeParensOpenCount8 = 0;\n  let openParensCloseCount8 = 0;\n  let closeParensCloseCount8 = 0;\n  let openParensOpenCount9 = 0;\n  let closeParensOpenCount9 = 0;\n  let openParensCloseCount9 = 0;\n  let closeParensCloseCount9 = 0;\n  let openParensOpenCount10 = 0;\n  let closeParensOpenCount10 = 0;\n  let openParensCloseCount10 = 0;\n  let closeParensCloseCount10 = 0;\n  let openParensOpenCount11 = 0;\n  let closeParensOpenCount11 = 0;\n  let openParensCloseCount11 = 0;\n  let closeParensCloseCount11 = 0;\n  let openParensOpenCount12 = 0;\n  let closeParensOpenCount12 = 0;\n  let openParensCloseCount12 = 0;\n  let closeParensCloseCount12 = 0;\n  let openParensOpenCount13 = 0;\n  let closeParensOpenCount13 = 0;\n  let openParensCloseCount13 = 0;\n  let closeParensCloseCount13 = 0;\n  let openParensOpenCount14 = 0;\n  let closeParensOpenCount14 = 0;\n  let openParensCloseCount14 = 0;\n  let closeParensCloseCount14 = 0;\n  let openParensOpenCount15 = 0;\n  let closeParensOpenCount15 = 0;\n  let openParensCloseCount15 = 0;\n  let closeParensCloseCount15 = 0;\n  let openParensOpenCount16 = 0;\n  let closeParensOpenCount16 = 0;\n  let openParensCloseCount16 = 0;\n  let closeParensCloseCount16 = 0;\n  let openParensOpenCount17 = 0;\n  let closeParensOpenCount17 = 0;\n  let openParensCloseCount17 = 0;\n  let closeParensCloseCount17 = 0;\n  let openParensOpenCount18 = 0;\n  let closeParensOpenCount18 = 0;\n  let openParensCloseCount18 = 0;\n  let closeParensCloseCount18 = 0;\n  let openParensOpenCount19 = 0;\n  let closeParensOpenCount19 = 0;\n  let openParensCloseCount19 = 0;\n  let closeParensCloseCount19 = 0;\n  let openParensOpenCount20 = 0;\n  let closeParensOpenCount20 = 0;\n  let openParensCloseCount20 = 0;\n  let closeParensCloseCount20 = 0;\n  let openParensOpenCount21 = 0;\n  let closeParensOpenCount21 = 0;\n  let openParensCloseCount21 = 0;\n  let closeParensCloseCount21 = 0;\n  let openParensOpenCount22 = 0;\n  let closeParensOpenCount22 = 0;\n  let openParensCloseCount22 = 0;\n  let closeParensCloseCount22 = 0;\n  let openParensOpenCount23 = 0;\n  let closeParensOpenCount23 = 0;\n  let openParensCloseCount23 = 0;\n  let closeParensCloseCount23 = 0;\n  let openParensOpenCount24 = 0;\n  let closeParensOpenCount24 = 0;\n  let openParensCloseCount24 = 0;\n  let closeParensCloseCount24 = 0;\n  let openParensOpenCount25 = 0;\n  let closeParensOpenCount25 = 0;\n  let openParensCloseCount25 = 0;\n  let closeParensCloseCount25 = 0;\n  let openParensOpenCount26 = 0;\n  let closeParensOpenCount26 = 0;\n  let openParensCloseCount26 = 0;\n  let closeParensCloseCount26 = 0;\n  let openParensOpenCount27 = 0;\n  let closeParensOpenCount27 = 0;\n  let openParensCloseCount27 = 0;\n  let closeParensCloseCount27 = 0;\n  let openParensOpenCount28 = 0;\n  let closeParensOpenCount28 = 0;\n  let openParensCloseCount28 = 0;\n  let closeParensCloseCount28 = 0;\n  let openParensOpenCount29 = 0;\n  let closeParensOpenCount29 = 0;\n  let openParensCloseCount29 = 0;\n  let closeParensCloseCount29 = 0;\n  let openParensOpenCount30 = 0;\n  let closeParensOpenCount30 = 0;\n  let openParensCloseCount30 = 0;\n  let closeParensCloseCount30 = 0;\n  let openParensOpenCount31 = 0;\n  let closeParensOpenCount31 = 0;\n  let openParensCloseCount31 = 0;\n  let closeParensCloseCount31 = 0;\n  let openParensOpenCount32 = 0;\n  let closeParensOpenCount32 = 0;\n  let openParensCloseCount32 = 0;\n  let closeParensCloseCount32 = 0;\n  let openParensOpenCount33 = 0;\n  let closeParensOpenCount33 = 0;\n  let openParensCloseCount33 = 0;\n  let closeParensCloseCount33 = 0;\n  let openParensOpenCount34 = 0;\n  let closeParensOpenCount34 = 0;\n  let openParensCloseCount34 = 0;\n  let closeParensCloseCount34 = 0;\n  let openParensOpenCount35 = 0;\n  let closeParensOpenCount35 = 0;\n  let openParensCloseCount35 = 0;\n  let closeParensCloseCount35 = 0;\n  let openParensOpenCount36 = 0;\n  let closeParensOpenCount36 = 0;\n  let openParensCloseCount36 = 0;\n  let closeParensCloseCount36 = 0;\n  let openParensOpenCount37 = 0;\n  let closeParensOpenCount37 = 0;\n  let openParensCloseCount37 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "<|endoftext|>/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const stringsToFarsee = []\n  let farseeingString = ''\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (stringsToFarsee.indexOf(string) === -1) {\n      stringsToFarsee.push(string)\n      farseeingString += string\n    }\n  }\n  return farseeingString\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'bb']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n/**\n  Remove all occurrences of an item from a list. Return the new list.\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb'])\n  ['a', 'b', 'c']\n  >>> removeAll(['a', 'b', 'c'], ['a', 'bb', 'ccc'])\n  ['a', 'bb', 'ccc']\n  */\nconst removeAll = (list, items) => {\n  const newList = []\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    if (items.indexOf(item) === -1) {\n      newList.push(item)\n    }\n  }\n  return newList\n}\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (arr[i] > max) {\n      max = arr[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  const len = nums.length;\n  let result = [];\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (nums[i] > max) {\n      max = nums[i];\n      result.push(max", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],4:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],5:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],6:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],7:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],8:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],9:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],10:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],11:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],12:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],13:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],14:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],15:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],16:[function(require,module,exports){\n/*Given a non-empty list of integers, return the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0 && i!== 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum.substring(0, k);\n};\n\n// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most k digits from the first k elements of arr.\n\n// Example:\n\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n// 3. 1 <= arr[i] <= 10^9\n// 4. 1 <= arr[i] <= 10^9\n// 5. 1 <= arr[i] <= 10^9\n// 6. 1 <= arr[i] <= 10^9\n// 7. 1 <= arr[i] <= 10^9\n// 8. 1 <= arr[i] <= 10^9\n// 9. 1 <= arr[i] <= 10^9\n// 10. 1 <= arr[i] <= 10^9\n// 11. 1 <= arr[i] <= 10^9\n// 12. 1 <= arr[i] <= 10^9\n// 13. 1 <= arr[i] <= 10^9\n// 14. 1 <= arr[i] <= 10^9\n// 15. 1 <= arr[i] <= 10^9\n// 16. 1 <= arr[i] <= 10^9\n// 17. 1 <= arr[i] <= 10^9\n// 18. 1 <= arr[i] <= 10^9\n// 19. 1 <= arr[i] <= 10^9\n// 20. 1 <= arr[i] <= 10^9\n// 21. 1 <= arr[i] <= 10^9\n// 22. 1 <= arr[i] <= 10^9\n// 23. 1 <= arr[i] <= 10^9\n// 24. 1 <= arr[i] <= 10^9\n// 25. 1 <= arr[i] <= 10^9\n// 26. 1 <= arr[i] <= 10^9\n// 27. 1 <= arr[i] <= 10^9\n// 28. 1 <= arr[i] <= 10^9\n// 29. 1 <= arr[i] <= 10^9\n// 30. 1 <= arr[i] <= 10^9\n// 31. 1 <= arr[i] <= 10^9\n// 32. 1 <= arr[i] <= 10^9\n// 33. 1 <= arr[i] <= 10^9\n// 34. 1 <= arr[i] <= 10^9\n// 35. 1 <= arr[i] <= 10^9\n// 36. 1 <= arr[i] <= 10^9\n// 37. 1 <= arr[i] <= 10^9\n// 38. 1 <= arr[i] <= 10^9\n// 39. 1 <= arr[i] <= 10^9\n// 40. 1 <= arr[i] <= 10^9\n// 41. 1 <= arr[i] <= 10^9\n// 42. 1 <= arr[i] <= 10^9\n// 43. 1 <= arr[i] <= 10^9\n// 44. 1 <= arr[i] <= 10^9\n// 45. 1 <= arr[i] <= 10^9\n// 46. 1 <= arr[i] <= 10^9\n// 47. 1 <= arr[i] <= 10^9\n// 48. 1 <= arr[i] <= 10^9\n// 49. 1 <= arr[i] <= 10^9\n// 50. 1 <= arr[i] <= 10^9\n// 51. 1 <= arr[i] <= 10^9\n// 52. 1 <= arr[i] <= 10^9\n// 53. 1 <= arr[i] <= 10^9\n// 54. 1 <= arr[i] <= 10^9\n// 55. 1 <= arr[i] <= 10^9\n// 56. 1 <= arr[i] <= 10^9\n// 57. 1 <= arr[i] <= 10^9\n// 58. 1 <= arr[i] <= 10^9\n// 59. 1 <= arr[i] <= 10^9\n// 60. 1 <= arr[i] <= 10^9\n// 61. 1 <= arr[i] <= 10^9\n// 62. 1 <= arr[i] <= 10^9\n// 63. 1 <= arr[i] <= 10^9\n// 64. 1 <= arr[i] <= 10^9\n// 65. 1 <= arr[i] <= 10^9\n// 66. 1 <= arr[i] <= 10^9\n// 67. 1 <= arr[i] <= 10^9\n// 68. 1 <= arr[i] <= 10^9\n// 69. 1 <= arr[i] <= 10^9\n// 70. 1 <= arr[i] <= 10^9\n// 71. 1 <= arr[i] <= 10^9\n// 72. 1 <= arr[i] <= 10^9\n// 73. 1 <= arr[i] <= 10^9\n// 74. 1 <= arr[i] <= 10^9\n// 75. 1 <= arr[i] <= 10^9\n// 76. 1 <= arr[i] <= 10^9\n// 77. 1 <= arr[i] <= 10^9\n// 78. 1 <= arr[i] <= 10^9\n// 79. 1 <= arr[i] <= 10^9\n// 80. 1 <= arr[i] <= 10^9\n// 81. 1 <= arr[i] <= 10^9\n// 82. 1 <= arr[i] <= 10^9\n// 83. 1 <= arr[i] <= 10^9\n// 84. 1 <= arr[i] <= 10^9\n// 85. 1 <= arr[i] <= 10^9\n// 86. 1 <= arr[i] <= 10^9\n// 87. 1 <= arr[i] <= 10^9\n// 88. 1 <= arr[i] <= 10^9\n// 89. 1 <= arr[i] <= 10^9\n// 90. 1 <= arr[i] <= 10^9\n// 91. 1 <= arr[i] <= 10^9\n// 92. 1 <= arr[i] <= 10^9\n// 93. 1 <= arr[i] <= 10^9\n// 94. 1 <= arr[i] <= 10^9\n// 95. 1 <= arr[i] <= 10^9\n// 96. 1 <= arr[i] <= 10^9\n// 97. 1 <= arr[i] <= 10^9\n// 98. 1 <= arr[i] <= 10^9\n// 99. 1 <= arr[i] <= 10^9\n// 100. 1 <= arr[i] <= 10^9\n// 101. 1 <= arr[i] <= 10^9\n// 102. 1 <= arr[i] <= 10^9\n// 103. 1 <= arr[i] <= 10^9\n// 104. 1 <= arr[i] <= 10^9\n// 105. 1 <= arr[i] <= 10^9\n// 106. 1 <= arr[i] <= 10^9\n// 107. 1 <= arr[i] <= 10^9\n// 108. 1 <= arr[i] <= 10^9\n// 109. 1 <= arr[i] <= 10^9\n// 110. 1 <= arr[i] <= 10^9\n// 111. 1 <= arr[i] <= 10^9\n// 112. 1 <= arr[i] <= 10^9\n// 113. 1 <= arr[i] <= 10^9\n// 114. 1 <= arr[i] <= 10^9\n// 115. 1 <= arr[i] <= 10^9\n// 116. 1 <= arr[i] <= 10^9\n// 117. 1 <= arr[i] <= 10^9\n// 118. 1 <= arr[i] <= 10^9\n// 119. 1 <= arr[i] <= 10^9\n// 120. 1 <= arr[i] <= 10^9\n// 121. 1 <= arr[i] <= 10^9\n// 122. 1 <= arr[i] <= 10^9\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  const collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [1, 3, 5, 8, 4, 2], so even numbers are 1, 5, 16, and 8.\n  */\nconst catchEvenCollatz = (n) => {\n  const collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchPrimeCollatz(5) returns [1, 5, 11] # The collatz sequence for 5 is [1, 3, 5, 11, 16, 8], so prime numbers are 1, 5, 11, 16, and 8.\n  */\nconst catchPrimeCollatz = (n) => {\n  const collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the natural numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchNaturalCollatz(5) returns [1, 5, 11, 16, 8] # The collatz sequence for 5 is [1, 3, 5, 11, 16, 8, 2, 4, 6, 8], so natural numbers are 1, 5, 11, 16, 8, 2, 4, 6, 8.\n  */\nconst catchNaturalCollatz = (n) => {\n  const collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchPrimeFactorCollatz(5) returns [1, 5, 11] # The collatz sequence for 5 is [1, 3, 5, 11, 16, 8], so prime factors are 1, 5, 11, 16, and 8.\n  */\nconst catchPrimeFactorCollatz = (n) => {\n  const collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchPrimeFactorCollatz(5) returns [1, 5, 11] # The collatz sequence for 5 is [1, 3, 5, 11, 16, 8], so prime factors are 1, 5, 11, 16, and 8.\n  */\nconst catchPrimeFactorCollatz = (n) => {\n  const collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateString = date.toString();\n  const dateArray = dateString.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayDays = dateArrayLength - 1;\n  const dateArrayMonths = dateArrayLength - 2;\n  const dateArrayYears = dateArrayLength - 3;\n  const dateArrayDaysLength = dateArrayDays;\n  const dateArrayMonthsLength = dateArrayMonths;\n  const dateArrayYearsLength = dateArrayYears;\n  const dateArrayDaysDaysLength = dateArrayDaysLength - 1;\n  const dateArrayDaysMonthsLength = dateArrayDaysLength - 2;\n  const dateArrayDaysYearsLength = dateArrayDaysLength - 3;\n  const dateArrayDaysDaysDaysLength = dateArrayDaysDaysLength - 1;\n  const dateArrayDaysDaysMonthsLength = dateArrayDaysDaysLength - 2;\n  const dateArrayDaysDaysYearsLength = dateArrayDaysDaysLength - 3;\n  const dateArrayDaysDaysDaysMonthsLength = dateArrayDaysDaysLength - 4;\n  const dateArrayDaysDaysDaysYearsLength = dateArrayDaysDaysLength - 5;\n  const dateArrayDaysDaysDaysMonthsLength = dateArrayDaysDaysLength - 6;\n  const dateArrayDaysDaysDaysYearsLength = dateArrayDaysDaysLength - 7;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 8;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 9;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 10;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 11;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 12;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 13;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 14;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 15;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 16;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 17;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 18;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 19;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 20;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 21;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 22;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 23;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 24;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 25;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 26;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 27;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 28;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 29;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 30;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 31;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 32;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 33;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 34;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 35;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 36;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 37;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 38;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 39;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 40;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 41;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 42;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 43;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 44;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 45;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 46;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 47;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 48;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 49;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 50;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 51;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 52;\n  const dateArrayDaysDaysDaysDaysLength = dateArrayDaysDaysLength - 53;\n  const dateArrayDaysDaysDaysDaysLength = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  let words = txt.split(' ');\n  let disconnectedWords = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      let letters = word.toLowerCase();\n      if (letters.length % 2 === 0) {\n        disconnectedWords.push(letters);\n      }\n    }\n  });\n  return disconnectedWords;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords2 = (txt) => {\n  let words = txt.split(',');\n  let disconnectedWords = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      let letters = word.toLowerCase();\n      if (letters.length % 2 === 0) {\n        disconnectedWords.push(letters);\n      }\n    }\n  });\n  return disconnectedWords;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords3 = (txt) => {\n  let words = txt.split(',');\n  let disconnectedWords = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      let letters = word.toLowerCase();\n      if (letters.length % 2 === 0) {\n        disconnectedWords.push(letters);\n      }\n    }\n  });\n  return disconnectedWords;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords4 = (txt) => {\n  let words = txt.split(',');\n  let disconnectedWords = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      let letters = word.toLowerCase();\n      if (letters.length % 2 === 0) {\n        disconnectedWords.push(letters);\n      }\n    }\n  });\n  return disconnectedWords;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords5 = (txt) => {\n  let words = txt.split(',');\n  let disconnectedWords = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      let letters = word.toLowerCase();\n      if (letters.length % 2 === 0) {\n        disconnectedWords.push(letters);\n      }\n    }\n  });\n  return disconnectedWords;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords6 = (txt) => {\n  let words = txt.split(',');\n  let disconnectedWords = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      let letters = word.toLowerCase();\n      if (letters.length % 2 === 0) {\n        disconnectedWords.push(letters);\n      }\n    }\n  });\n  return disconnectedWords;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords7 = (txt) => {\n  let words = txt.split(',');\n  let disconnectedWords = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      let letters = word.toLowerCase();\n      if (letters.length % 2 === 0) {\n        disconnectedWords.push(letters);\n      }\n    }\n  });\n  return disconnectedWords;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords8 = (txt) => {\n  let words = txt.split(',');\n  let disconnectedWords = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      let letters = word.toLowerCase();\n      if (letters.length % 2 === 0) {\n        disconnectedWords.push(letters);\n      }\n    }\n  });\n  return disconnectedWords;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b);\n  return sortedLst.length === 1;\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreenDesc([5]) ➞ false\n  isScreenDesc([1, 2, 3, 4, 5]) ➞ true\n  isScreenDesc([1, 3, 2, 4, 5]) ➞ true\n  isScreenDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isScreenDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreenDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreenDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isScreenDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  isScreenDesc([1, 2, 2, 2, 2, 3]) ➞ false\n  */\nconst isScreenDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst.length === 1;\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same number, return false. Assume no negative\n  numbers and only integers.\n  Examples\n  isScreenDescAndAsc([5]) ➞ false\n  isScreenDescAndAsc([1, 2, 3, 4, 5]) ➞ true\n  isScreenDescAndAsc([1, 3, 2, 4, 5]) ➞ true\n  isScreenDescAndAsc([1, 2, 3, 4, 5, 6]) ➞ false\n  isScreenDescAndAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreenDescAndAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreenDescAndAsc([1, 2, 2, 3, 3, 4]) ➞ false\n  isScreenDescAndAsc([1, 2, 2, 2, 3, 4]) ➞ true\n  isScreenDescAndAsc([1, 2, 2, 2, 2, 3]) ➞ false\n  */\nconst isScreenDescAndAsc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst.length === 1 && sortedLst[0] > 0;\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  let overlap = 0;\n  if (interval1[0] >= interval2[0]) {\n    overlap = interval1[0] - interval2[0];\n  }\n  if (interval1[1] >= interval2[1]) {\n    overlap = interval1[1] - interval2[1];\n  }\n  if (overlap === 0) {\n    return \"NO\";\n  }\n  if (overlap === 1) {\n    return \"YES\";\n  }\n  if (overlap === -1) {\n    return \"NO\";\n  }\n  if (overlap === -2) {\n    return \"NO\";\n  }\n  if (overlap === -3) {\n    return \"NO\";\n  }\n  if (overlap === -5) {\n    return \"NO\";\n  }\n  if (overlap === -6) {\n    return \"NO\";\n  }\n  if (overlap === -7) {\n    return \"NO\";\n  }\n  if (overlap === -8) {\n    return \"NO\";\n  }\n  if (overlap === -9) {\n    return \"NO\";\n  }\n  if (overlap === -10) {\n    return \"NO\";\n  }\n  if (overlap === -11) {\n    return \"NO\";\n  }\n  if (overlap === -12) {\n    return \"NO\";\n  }\n  if (overlap === -13) {\n    return \"NO\";\n  }\n  if (overlap === -14) {\n    return \"NO\";\n  }\n  if (overlap === -15) {\n    return \"NO\";\n  }\n  if (overlap === -16) {\n    return \"NO\";\n  }\n  if (overlap === -17) {\n    return \"NO\";\n  }\n  if (overlap === -18) {\n    return \"NO\";\n  }\n  if (overlap === -19) {\n    return \"NO\";\n  }\n  if (overlap === -20) {\n    return \"NO\";\n  }\n  if (overlap === -21) {\n    return \"NO\";\n  }\n  if (overlap === -22) {\n    return \"NO\";\n  }\n  if (overlap === -23) {\n    return \"NO\";\n  }\n  if (overlap === -24) {\n    return \"NO\";\n  }\n  if (overlap === -25) {\n    return \"NO\";\n  }\n  if (overlap === -26) {\n    return \"NO\";\n  }\n  if (overlap === -27) {\n    return \"NO\";\n  }\n  if (overlap === -28) {\n    return \"NO\";\n  }\n  if (overlap === -29) {\n    return \"NO\";\n  }\n  if (overlap === -30) {\n    return \"NO\";\n  }\n  if (overlap === -31) {\n    return \"NO\";\n  }\n  if (overlap === -32) {\n    return \"NO\";\n  }\n  if (overlap === -33) {\n    return \"NO\";\n  }\n  if (overlap === -34) {\n    return \"NO\";\n  }\n  if (overlap === -35) {\n    return \"NO\";\n  }\n  if (overlap === -36) {\n    return \"NO\";\n  }\n  if (overlap === -37) {\n    return \"NO\";\n  }\n  if (overlap === -38) {\n    return \"NO\";\n  }\n  if (overlap === -39) {\n    return \"NO\";\n  }\n  if (overlap === -40) {\n    return \"NO\";\n  }\n  if (overlap === -41) {\n    return \"NO\";\n  }\n  if (overlap === -42) {\n    return \"NO\";\n  }\n  if (overlap === -43) {\n    return \"NO\";\n  }\n  if (overlap === -44) {\n    return \"NO\";\n  }\n  if (overlap === -45) {\n    return \"NO\";\n  }\n  if (overlap === -46) {\n    return \"NO\";\n  }\n  if (overlap === -47) {\n    return \"NO\";\n  }\n  if (overlap === -48) {\n    return \"NO\";\n  }\n  if (overlap === -49) {\n    return \"NO\";\n  }\n  if (overlap === -50) {\n    return \"NO\";\n  }\n  if (overlap === -51) {\n    return \"NO\";\n  }\n  if (overlap === -52) {\n    return \"NO\";\n  }\n  if (overlap === -53) {\n    return \"NO\";\n  }\n  if (overlap === -54) {\n    return \"NO\";\n  }\n  if (overlap === -55) {\n    return \"NO\";\n  }\n  if (overlap === -56) {\n    return \"NO\";\n  }\n  if (overlap === -57) {\n    return \"NO\";\n  }\n  if (overlap === -58) {\n    return \"NO\";\n  }\n  if (overlap === -59) {\n    return \"NO\";\n  }\n  if (overlap === -60) {\n    return \"NO\";\n  }\n  if (overlap === -61) {\n    return \"NO\";\n  }\n  if (overlap === -62) {\n    return \"NO\";\n  }\n  if (overlap === -63) {\n    return \"NO\";\n  }\n  if (overlap === -64) {\n    return \"NO\";\n  }\n  if (overlap === -65) {\n    return \"NO\";\n  }\n  if (overlap === -66) {\n    return \"NO\";\n  }\n  if (overlap === -67) {\n    return \"NO\";\n  }\n  if (overlap === -68) {\n    return \"NO\";\n  }\n  if (overlap === -69) {\n    return \"NO\";\n  }\n  if (overlap === -70) {\n    return \"NO\";\n  }\n  if (overlap === -71) {\n    return \"NO\";\n  }\n  if (overlap === -72) {\n    return \"NO\";\n  }\n  if (overlap === -73) {\n    return \"NO\";\n  }\n  if (overlap === -74) {\n    return \"NO\";\n  }\n  if (overlap === -75) {\n    return \"NO\";\n  }\n  if (overlap === -76) {\n    return \"NO\";\n  }\n  if (overlap === -77) {\n    return \"NO\";\n  }\n  if (overlap === -78) {\n    return \"NO\";\n  }\n  if (overlap === -79) {\n    return \"NO\";\n  }\n  if (overlap === -80) {\n    return \"NO\";\n  }\n  if (overlap === -81) {\n    return \"NO\";\n  }\n  if (overlap === -82) {\n    return \"NO\";\n  }\n  if (overlap === -83) {\n    return \"NO\";\n  }\n  if (overlap === -84) {\n    return \"NO\";\n  }\n  if (overlap === -85) {\n    return \"NO\";\n  }\n  if (overlap === -86) {\n    return \"NO\";\n  }\n  if (overlap === -87) {\n    return \"NO\";\n  }\n  if (overlap === -88) {\n    return \"NO\";\n  }\n  if (overlap === -89) {\n    return \"NO\";\n  }\n  if (overlap === -90) {\n    return \"NO\";\n  }\n  if (overlap === -91) {\n    return \"NO\";\n  }\n  if (overlap === -92) {\n    return \"NO\";\n  }\n  if (overlap === -93) {\n    return \"NO\";\n  }\n  if (overlap === -94) {\n    return \"NO\";\n  }\n  if (overlap === -95) {\n    return \"NO\";\n  }\n  if (overlap === -96) {\n    return \"NO\";\n  }\n  if (overlap === -97) {\n    return \"NO\";\n  }\n  if (overlap === -98) {\n    return \"NO\";\n  }\n  if (overlap === -99) {\n    return \"NO\";\n  }\n  if (overlap === -100) {\n    return \"NO\";\n  }\n  if (overlap === -101) {\n    return \"NO\";\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  let sign = 0;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign + 1;\n      signs.push(sign);\n    } else if (arr[i] < 0) {\n      sign = sign + -1;\n      signs.push(sign);\n    }\n  }\n  return signs;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSignsMulti = (arr) => {\n  let sign = 0;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign + 1;\n      signs.push(sign);\n    } else if (arr[i] < 0) {\n      sign = sign + -1;\n      signs.push(sign);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < signs.length; i++) {\n    sum += signs[i] * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMulti([0, 1]) == 0\n  >>> goadSignsMulti([]) == null\n  */\nconst goadSignsMultiMulti = (arr) => {\n  let sign = 0;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign + 1;\n      signs.push(sign);\n    } else if (arr[i] < 0) {\n      sign = sign + -1;\n      signs.push(sign);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < signs.length; i++) {\n    sum += signs[i] * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMulti = (arr) => {\n  let sign = 0;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign + 1;\n      signs.push(sign);\n    } else if (arr[i] < 0) {\n      sign = sign + -1;\n      signs.push(sign);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < signs.length; i++) {\n    sum += signs[i] * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMultiMulti = (arr) => {\n  let sign = 0;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign + 1;\n      signs.push(sign);\n    } else if (arr[i] < 0) {\n      sign = sign + -1;\n      signs.push(sign);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < signs.length; i++) {\n    sum += signs[i] * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMultiMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMultiMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMultiMulti = (arr) => {\n  let sign = 0;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign + 1;\n      signs.push(sign);\n    } else if (arr[i] < 0) {\n      sign = sign + -1;\n      signs.push(sign);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < signs.length; i++) {\n    sum += signs[i] * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMultiMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMultiMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMultiMultiMulti = (arr) => {\n  let sign = 0;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign + 1;\n      signs.push(sign);\n    } else if (arr[i] < 0) {\n      sign = sign + -1;\n      signs.push(sign);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < signs.length; i++) {\n    sum += signs[i] * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> goadSignsMultiMultiMultiMultiMulti([0, 1]) == 0\n  >>> goadSignsMultiMultiMultiMultiMulti([]) == null\n  */\nconst goadSignsMultiMultiMultiMultiMultiMulti = (arr) => {\n  let sign = 0;\n  let signs = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign + 1;\n      signs.push(sign);\n    } else if (arr[i] < 0) {\n      sign = sign + -1;\n      signs.push(sign);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < signs.length; i++) {\n    sum += signs[i] * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSignsMultiMultiMultiMultiMultiMulti([1, 2, 2, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  let lst_A = [...grid]\n  let lst_B = [...grid]\n  let lst_C = [...grid]\n  let lst_D = [...grid]\n  let lst_E = [...grid]\n  let lst_F = [...grid]\n  let lst_G = [...grid]\n  let lst_H = [...grid]\n  let lst_I = [...grid]\n  let lst_J = [...grid]\n  let lst_K = [...grid]\n  let lst_L = [...grid]\n  let lst_M = [...grid]\n  let lst_N = [...grid]\n  let lst_O = [...grid]\n  let lst_P = [...grid]\n  let lst_Q = [...grid]\n  let lst_R = [...grid]\n  let lst_S = [...grid]\n  let lst_T = [...grid]\n  let lst_U = [...grid]\n  let lst_V = [...grid]\n  let lst_W = [...grid]\n  let lst_X = [...grid]\n  let lst_Y = [...grid]\n  let lst_Z = [...grid]\n  let lst_a = [...grid]\n  let lst_b = [...grid]\n  let lst_c = [...grid]\n  let lst_d = [...grid]\n  let lst_e = [...grid]\n  let lst_f = [...grid]\n  let lst_g = [...grid]\n  let lst_h = [...grid]\n  let lst_i = [...grid]\n  let lst_j = [...grid]\n  let lst_k = [...grid]\n  let lst_l = [...grid]\n  let lst_m = [...grid]\n  let lst_n = [...grid]\n  let lst_o = [...grid]\n  let lst_p = [...grid]\n  let lst_q = [...grid]\n  let lst_r = [...grid]\n  let lst_s = [...grid]\n  let lst_t = [...grid]\n  let lst_u = [...grid]\n  let lst_v = [...grid]\n  let lst_w = [...grid]\n  let lst_x = [...grid]\n  let lst_y = [...grid]\n  let lst_z = [...grid]\n  let lst_c1 = [...grid]\n  let lst_c2 = [...grid]\n  let lst_c3 = [...grid]\n  let lst_c4 = [...grid]\n  let lst_c5 = [...grid]\n  let lst_c6 = lst_c5.slice()\n  let lst_c7 = lst_c6.slice()\n  let lst_c8 = lst_c7.slice()\n  let lst_c9 = lst_c8.slice()\n  let lst_c10 = lst_c9.slice()\n  let lst_c11 = lst_c10.slice()\n  let lst_c12 = lst_c11.slice()\n  let lst_c13 = lst_c12.slice()\n  let lst_c14 = lst_c13.slice()\n  let lst_c15 = lst_c14.slice()\n  let lst_c16 = lst_c15.slice()\n  let lst_c17 = lst_c16.slice()\n  let lst_c18 = lst_c17.slice()\n  let lst_c19 = lst_c18.slice()\n  let lst_c20 = lst_c19.slice()\n  let lst_c21 = lst_c20.slice()\n  let lst_c22 = lst_c21.slice()\n  let lst_c23 = lst_c22.slice()\n  let lst_c24 = lst_c23.slice()\n  let lst_c25 = lst_c24.slice()\n  let lst_c26 = lst_c25.slice()\n  let lst_c27 = lst_c26.slice()\n  let lst_c28 = lst_c27.slice()\n  let lst_c29 = lst_c28.slice()\n  let lst_c30 = lst_c29.slice()\n  let lst_c31 = lst_c30.slice()\n  let lst_c32 = lst_c31.slice()\n  let lst_c33 = lst_c32.slice()\n  let lst_c34 = lst_c33.slice()\n  let lst_c35 = lst_c34.slice()\n  let lst_c36 = lst_c35.slice()\n  let lst_c37 = lst_c36.slice()\n  let lst_c38 = lst_c37.slice()\n  let lst_c39 = lst_c38.slice()\n  let lst_c40 = lst_c39.slice()\n  let lst_c41 = lst_c40.slice()\n  let lst_c42 = lst_c41.slice()\n  let lst_c43 = lst_c42.slice()\n  let lst_c44 = lst_c43.slice()\n  let lst_c45 = lst_c44.slice()\n  let lst_c46 = lst_c45.slice()\n  let lst_c47 = lst_c46.slice()\n  let lst_c48 = lst_c47.slice()\n  let lst_c49 = lst_c48.slice()\n  let lst_c50 = lst_c49.slice()\n  let lst_c51 = lst_c50.slice()\n  let lst_c52 = lst_c51.slice()\n  let lst_c53 = lst_c52.slice()\n  let lst_c54 = lst_c53.slice()\n  let lst_c55 = lst_c54.slice()\n  let lst_c56 = lst_c55.slice()\n  let lst_c57 = lst_c50.slice()\n  let lst_c58 = lst_c57.slice()\n  let lst_c59 = lst_c58.slice()\n  let lst_c", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return a % b === 0? a / b : capitalCoarseDivisor(a / b, a % b);\n};\n\n// Capital Coarse Divisor for Numbers\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n// 5\n// >>> capitalCoarseDivisor(25, 15)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n, n, n, 1];\n  const [a, b, c, d] = tri(n - 1);\n  return [a, b, c, d].map((x, i) => [x, tri(i + 1)]);\n};\n\nmodule.exports = tri;\n\n},{}],5:[function(require,module,exports){\n/*\n  Triangle is a non-negative integer n with three sides a, b, c. The sides are given in \n  the form of a list of three integers x1, x2, x3.\n  A triangle is a triangulation if and only if the following conditions are satisfied:\n  a) n is positive;\n  b) each of the three sides is positive;\n  c) each of the three sides is a multiple of three.\n  Example:\n  Input: 3\n  Output: [1, 3, 3]\n  Input: 4\n  Output: [1, 4, 6, 4]\n  Input: 5\n  Output: [1, 5, 10, 15, 20]\n  Input: 6\n  Output: [1, 6, 15, 30]\n  Input: 7\n  Output: [1, 7, 21, 36, 55, 89]\n  Input: 8\n  Output: [1, 8, 27, 64, 129, 252, 507, 827, 1536]\n  Input: 9\n  Output: [1, 9, 61, 126, 258, 504, 1009, 2049, 4049, 8025, 16856]\n  Input: 10\n  Output: [1, 10, 129, 252, 507, 827, 1536, 4049, 8025, 16856, 827]\n  Input: 11\n  Output: [1, 11, 258, 504, 1009, 2049, 4049, 8025, 16856, 827, 1536]\n  Input: 12\n  Output: [1, 12, 507, 827, 1536, 4049, 8025, 16856, 827, 1536, 827]\n  Input: 13\n  Output: [1, 13, 827, 1536, 4049, 8025, 16856, 827, 1536, 827, 1536]\n  Input: 14\n  Output: [1, 14, 16856, 827, 1536, 827, 1536, 827, 1536, 827]\n  Input: 15\n  Output: [1, 15, 16856, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 16\n  Output: [1, 16, 827, 1536, 827, 1536, 827, 1536, 827, 1536, 827]\n  Input: 17\n  Output: [1, 17, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 18\n  Output: [1, 18, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 19\n  Output: [1, 19, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 20\n  Output: [1, 20, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 21\n  Output: [1, 21, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 22\n  Output: [1, 22, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 23\n  Output: [1, 23, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 24\n  Output: [1, 24, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 25\n  Output: [1, 25, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 26\n  Output: [1, 26, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 27\n  Output: [1, 27, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 28\n  Output: [1, 28, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 29\n  Output: [1, 29, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 30\n  Output: [1, 30, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 31\n  Output: [1, 31, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 32\n  Output: [1, 32, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 33\n  Output: [1, 33, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 34\n  Output: [1, 34, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 35\n  Output: [1, 35, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 36\n  Output: [1, 36, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 37\n  Output: [1, 37, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 38\n  Output: [1, 38, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 39\n  Output: [1, 39, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 40\n  Output: [1, 40, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 41\n  Output: [1, 41, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 42\n  Output: [1, 42, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 43\n  Output: [1, 43, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 44\n  Output: [1, 44, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536]\n  Input: 45\n  Output: [1, 45, 1536, 827, 1536, 827, 1536, 827, 1536, 827, 1536", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigit = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigitOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigitEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigitOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigitEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigitOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigitEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigitEvenOddEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigitEvenOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigitEvenOddEvenOddEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitSumDigitEvenOddEvenOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of all digits of the number n.\n  Return 0 if n is negative.\n  For example:\n  digit(1)  == 1\n  digit", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingDepth = 0;\n  const nestingStack = [string];\n\n  while (nestingStack.length > 0) {\n    const currentString = nestingStack.pop();\n    const currentChar = currentString.charAt(0);\n\n    if (currentChar === '[') {\n      if (nestingDepth > 0) {\n        nestingDepth--;\n      }\n    } else if (currentChar === ']') {\n      if (nestingDepth > 0) {\n        nestingDepth++;\n      }\n    } else if (currentChar === '[' && nestingDepth > 0) {\n      nestingStack.push(currentString);\n    } else if (currentChar === ']' && nestingDepth > 0) {\n      nestingStack.pop();\n    }\n  }\n\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingDepth = 0;\n  const nestingStack = [string];\n\n  while (nestingStack.length > 0) {\n    const currentString = nestingStack.pop();\n    const currentChar = currentString.charAt(0);\n\n    if (currentChar === '[') {\n      if (nestingDepth > 0) {\n        nestingDepth--;\n      }\n    } else if (currentChar === ']') {\n      if (nestingDepth > 0) {\n        nestingDepth++;\n      }\n    } else if (currentChar === '[' && nestingDepth > 0) {\n      nestingStack.push(currentString);\n    } else if (currentChar === ']' && nestingDepth > 0) {\n      nestingStack.pop();\n    }\n  }\n\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingDepth = 0;\n  const nestingStack = [string];\n\n  while (nestingStack.length > 0) {\n    const currentString = nestingStack.pop();\n    const currentChar = currentString.charAt(0);\n\n    if (currentChar === '[') {\n      if (nestingDepth > 0) {\n        nestingDepth--;\n      }\n    } else if (currentChar === ']') {\n      if (nestingDepth > 0) {\n        nestingDepth++;\n      }\n    } else if (currentChar === '[' && nestingDepth > 0) {\n      nestingStack.push(currentString);\n    } else if (currentChar === ']' && nestingDepth > 0) {\n      nestingStack.pop();\n    }\n  }\n\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingDepth = 0;\n  const nestingStack = [string];\n\n  while (nestingStack.length > 0) {\n    const currentString = nestingStack.pop();\n    const currentChar = currentString.charAt(0);\n\n    if (currentChar === '[') {\n      if (nestingDepth > 0) {\n        nestingDepth--;\n      }\n    } else if (currentChar === ']') {\n      if (nestingDepth > 0) {\n        nestingDepth++;\n      }\n    } else if (currentChar === '[' && nestingDepth > 0) {\n      nestingStack.push(currentString);\n    } else if (currentChar === ']' && nestingDepth > 0) {\n      nestingStack.pop();\n    }\n  }\n\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingDepth = 0;\n  const nestingStack = [string];\n\n  while (nestingStack.length > 0) {\n    const currentString = nestingStack.pop();\n    const currentChar = currentString.charAt(0);\n\n    if (currentChar === '[') {\n      if (nestingDepth > 0) {\n        nestingDepth--;\n      }\n    } else if (currentChar === ']') {\n      if (nestingDepth > 0) {\n        nestingDepth++;\n      }\n    } else if (currentChar === '[' && nestingDepth > 0) {\n      nestingStack.push(currentString);\n    } else if (currentChar === ']' && nestingDepth > 0) {\n      nestingStack.pop();\n    }\n  }\n\n  return nestingDepth > 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingDepth = 0;\n  const nest", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  let sumOfSquares = 0;\n  let sumOfSquare = 0;\n  let sumOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n  let sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isConcludingChar = false;\n  let isWord = false;\n  let isAlpha = false;\n  let isSpace = false;\n  let isLetter = false;\n  let isDigit = false;\n  let isLetterOrDigit = false;\n  let isLetterOrDigitOrSpace = false;\n  let isLetterOrDigitOrSpaceOrWord = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetter = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetterOrDigit = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpace = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWord = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetter = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigit = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpace = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigit = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpace = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigit = false;\n  let isLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWordOrLetterOrDigitOrSpaceOrWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  unique([1,2,3,4,5,6]) = [1,2,3,4,5]\n  unique([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst unique = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  unique([1,2,3,4,5,6]) = [1,2,3,4,5]\n  unique([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqueAll = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  uniqueAll([1,2,3,4,5,6]) = [1,2,3,4,5]\n  uniqueAll([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqueAllBut = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  uniqueAllBut([1,2,3,4,5,6]) = [1,2,3,4,5]\n  uniqueAllBut([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqueBut = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  uniqueBut([1,2,3,4,5,6]) = [1,2,3,4,5]\n  uniqueBut([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqueButAll = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  uniqueButAll([1,2,3,4,5,6]) = [1,2,3,4,5]\n  uniqueButAll([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqueButAllBut = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  uniqueButAllBut([1,2,3,4,5,6]) = [1,2,3,4,5]\n  uniqueButAllBut([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqueButAllButAll = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  uniqueButAllButAll([1,2,3,4,5,6]) = [1,2,3,4,5]\n  uniqueButAllButAll([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqueButAllButAllBut = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  uniqueButAllButAllBut([1,2,3,4,5,6]) = [1,2,3,4,5]\n  uniqueButAllButAllBut([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqueButAllButAllButAllBut = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  uniqueButAllButAllButAllBut([1,2,3,4,5,6]) = [1,2,3,4,5]\n  uniqueButAllButAllButAllBut([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqueButAllButAllButAllButAllBut = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  uniqueButAllButAllButAllButAllBut([1,2,3,4,5,6]) = [1,2,3,4,5]\n  uniqueButAllButAllButAllButAllBut([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  */\nconst uniqueButAllButAllButAllButAllButAllBut = (arr) => {\n  let uniqueArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArr.indexOf(arr[i]) === -1) {\n      uniqueArr.push(arr[i]);\n    }\n  }\n  return uniqueArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all unique\n  elements. If the array contains duplicate values, then return an array with\n  unique values only.\n\n  Examples:\n  uniqueButAllButAllButAllButAllButAllBut", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no positive or negative integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigBigIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no positive or negative integers, return them as null.\n  Examples:\n  bigBigIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigBigIntegers([]) == (null, null)\n  bigBigIntegers([0]) == (null, null)\n  */\nconst bigIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no positive or negative integers, return them as null.\n  Examples:\n  bigIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigIntegers([]) == (null, null)\n  bigIntegers([0]) == (null, null)\n  */\nconst bigIntegerPairs = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no positive or negative integers, return them as null.\n  Examples:\n  bigIntegerPairs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigIntegerPairs([]) == (null, null)\n  bigIntegerPairs([0]) == (null, null)\n  */\nconst bigIntegerPairsPairs = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no positive or negative integers, return them as null.\n  Examples:\n  bigIntegerPairsPairs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigIntegerPairsPairs([]) == (null, null)\n  bigIntegerPairsPairs([0]) == (null, null)\n  */\nconst bigIntegerPairsPairsPairsPairs = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no positive or negative integers, return them as null.\n  Examples:\n  bigIntegerPairsPairsPairsPairsPairsPairs([]) == (null, null)\n  bigIntegerPairsPairsPairsPairsPairsPairsPairs([0]) == (null, null)\n  */\nconst bigIntegerPairsPairsPairsPairsPairsPairsPairsPairs = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no positive or negative integers, return them as null.\n  Examples:\n  bigIntegerPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairsPairs", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === null || b === null) {\n    return a === null? b : null;\n  }\n  if (a === null || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === \"\") {\n    return a === null? b : null;\n  }\n  if (a === \"\" || b === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isAdequateToSumEven(-4) == true\n  isAdequateToSumEven(-6) == true\n  isAdequateToSumEven(-8) == false\n  */\nconst isAdequateToSumEvenNegative = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isAdequateToSumEvenNegative(-4) == false\n  isAdequateToSumEvenNegative(-6) == false\n  isAdequateToSumEvenNegative(-8) == true\n  */\nconst isAdequateToSumEvenNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumEvenPositive(4) == true\n  isAdequateToSumEvenPositive(6) == true\n  isAdequateToSumEvenPositive(8) == false\n  */\nconst isAdequateToSumEvenPositive = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEvenPositive(4) == false\n  isAdequateToSumEvenPositive(6) == false\n  isAdequateToSumEvenPositive(8) == true\n  */\nconst isAdequateToSumEvenPositivePositive = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isAdequateToSumEvenNegative(-4) == true\n  isAdequateToSumEvenNegative(-6) == true\n  isAdequateToSumEvenNegative(-8) == false\n  */\nconst isAdequateToSumEvenNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isAdequateToSumEvenNegative(-4) == false\n  isAdequateToSumEvenNegative(-6) == false\n  isAdequateToSumEvenNegative(-8) == true\n  */\nconst isAdequateToSumEvenNegativeNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumEvenPositivePositive(4) == false\n  isAdequateToSumEvenPositivePositive(6) == false\n  isAdequateToSumEvenPositivePositive(8) == true\n  */\nconst isAdequateToSumEvenPositivePositive = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEvenPositivePositive(4) == false\n  isAdequateToSumEvenPositivePositive(6) == false\n  isAdequateToSumEvenPositivePositive(8) == false\n  */\nconst isAdequateToSumEvenPositivePositivePositive = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isAdequateToSumEvenNegativeNegative(-4) == false\n  isAdequateToSumEvenNegativeNegative(-6) == false\n  isAdequateToSumEvenNegativeNegative(-8) == true\n  */\nconst isAdequateToSumEvenNegativeNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isAdequateToSumEvenNegativeNegative(-4) == false\n  isAdequateToSumEvenNegativeNegative(-6) == false\n  isAdequateToSumEvenNegativeNegative(-8) == false\n  */\nconst isAdequateToSumEvenNegativeNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isAdequateToSumEvenPositivePositivePositive(4) == false\n  isAdequateToSumEvenPositivePositivePositive(6) == false\n  isAdequateToSumEvenPositivePositivePositive(8) == true\n  */\nconst isAdequateToSumEvenPositivePositivePositive = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isAdequateToSumEvenNegativeNegativeNegative(-4) == false\n  isAdequateToSumEvenNegativeNegativeNegative(-6) == false\n  isAdequateToSumEvenNegativeNegativeNegative(-8) == true\n  */\nconst isAdequateToSumEvenNegativeNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEvenPositivePositivePositive(4) == false\n  isAdequateToSumEvenPositivePositivePositive(6) == false\n  isAdequateToSumEvenPositivePositivePositive(8) == false\n  */\nconst isAdequateToSumEvenPositivePositivePositive = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  if (n <= 0) return 1;\n  return n * extraFactorial(n - 1);\n};\n\n/*\n  Given a number n, return the largest power of 2 that is greater than or equal to n.\n  For example, given the number 5, the largest power of 2 that is greater than or equal to 5 is 2.\n  Given the number 10, the largest power of 2 that is greater than or equal to 10 is 4.\n  Given the number 100, the largest power of 2 that is greater than or equal to 100 is 8.\n  Given the number 1000, the largest power of 2 that is greater than or equal to 1000 is 16.\n  Given the number 10000, the largest power of 2 that is greater than or equal to 10000 is 32.\n  Given the number 100000, the largest power of 2 that is greater than or equal to 100000 is 64.\n  Given the number 1000000, the largest power of 2 that is greater than or equal to 1000000 is 128.\n  Given the number 10000000, the largest power of 2 that is greater than or equal to 100000 is 256.\n  Given the number 100000000, the largest power of 2 that is greater than or equal to 100000000 is 512.\n  Given the number 1000000000, the largest power of 2 that is greater than or equal to 100000000 is 1024.\n  Given the number 10000000000, the largest power of 2 that is greater than or equal to 10000000000 is 2048.\n  Given the number 100000000000, the largest power of 2 that is greater than or equal to 100000000000 is 4096.\n  Given the number 1000000000000, the largest power of 2 that is greater than or equal to 1000000000000 is 8192.\n  Given the number 100000000000000, the largest power of 2 that is greater than or equal to 100000000000000 is 16384.\n  Given the number 1000000000000000, the largest power of 2 that is greater than or equal to 1000000000000000 is 32768.\n  Given the number 1000000000000000000, the largest power of 2 that is greater than or equal to 1000000000000000000 is 65536.\n  Given the number 10000000000000000000, the largest power of 2 that is greater than or equal to 10000000000000000000 is 131072.\n  Given the number 100000000000000000000, the largest power of 2 that is greater than or equal to 100000000000000000000 is 262144.\n  Given the number 10000000000000000000000, the largest power of 2 that is greater than or equal to 10000000000000000000000 is 524288.\n  Given the number 100000000000000000000000, the largest power of 2 that is greater than or equal to 100000000000000000000000 is 1048576.\n  Given the number 1000000000000000000000000, the largest power of 2 that is greater than or equal to 1000000000000000000000000 is 2097152.\n  Given the number 10000000000000000000000000, the largest power of 2 that is greater than or equal to 1000000000000000000000000 is 4194304.\n  Given the number 100000000000000000000000000, the largest power of 2 that is greater than or equal to 100000000000000000000000000 is 8388608.\n  Given the number 1000000000000000000000000000, the largest power of 2 that is greater than or equal to 1000000000000000000000000000 is 16777216.\n  Given the number 10000000000000000000000000000, the largest power of 2 that is greater than or equal to 10000000000000000000000000000 is 33554432.\n  Given the number 1000000000000000000000000000000, the largest power of 2 that is greater than or equal to 1000000000000000000000000000000 is 67108864.\n  Given the number 10000000000000000000000000000000, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000 is 134217728.\n  Given the number 100000000000000000000000000000000, the largest power of 2 that is greater than or equal to 100000000000000000000000000000000 is 268435456.\n  Given the number 1000000000000000000000000000000000, the largest power of 2 that is greater than or equal to 100000000000000000000000000000000 is 536870912.\n  Given the number 10000000000000000000000000000000001, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000001 is 1073741824.\n  Given the number 10000000000000000000000000000000002, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000002 is 2147483648.\n  Given the number 10000000000000000000000000000000003, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000003 is 4294967296.\n  Given the number 10000000000000000000000000000000004, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000004 is 8388608.\n  Given the number 10000000000000000000000000000000005, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000005 is 16777216.\n  Given the number 10000000000000000000000000000000006, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000006 is 33554432.\n  Given the number 10000000000000000000000000000000007, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000007 is 67108864.\n  Given the number 10000000000000000000000000000000008, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000008 is 134217728.\n  Given the number 10000000000000000000000000000000009, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000009 is 268435456.\n  Given the number 10000000000000000000000000000000010, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000010 is 536870912.\n  Given the number 10000000000000000000000000000000011, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000011 is 1073741824.\n  Given the number 10000000000000000000000000000000012, the\n  largest power of 2 that is greater than or equal to 10000000000000000000000000000000012 is 2147483648.\n  Given the number 10000000000000000000000000000000013, the\n  largest power of 2 that is greater than or equal to 10000000000000000000000000000000013 is 4294967296.\n  Given the number 10000000000000000000000000000000014, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000014 is 8388608.\n  Given the number 10000000000000000000000000000000015, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000015 is 16777216.\n  Given the number 10000000000000000000000000000000016, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000016 is 33554432.\n  Given the number 10000000000000000000000000000000017, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000017 is 67108864.\n  Given the number 10000000000000000000000000000000018, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000018 is 134217728.\n  Given the number 10000000000000000000000000000000019, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000019 is 268435456.\n  Given the number 10000000000000000000000000000000020, the\n  largest power of 2 that is greater than or equal to 10000000000000000000000000000000020 is 536870912.\n  Given the number 10000000000000000000000000000000021, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000021 is 1073741824.\n  Given the number 10000000000000000000000000000000022, the\n  largest power of 2 that is greater than or equal to 10000000000000000000000000000000022 is 2147483648.\n  Given the number 10000000000000000000000000000000023, the\n  largest power of 2 that is greater than or equal to 10000000000000000000000000000000023 is 4294967296.\n  Given the number 10000000000000000000000000000000024, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000024 is 8388608.\n  Given the number 10000000000000000000000000000000025, the largest power of 2 that is greater than or equal to 10000000000000000000000000000000025 is 16777216.\n  Given the number 100000000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  let prefixes = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  let current = ''\n\n  while (i < len) {\n    current = string[i]\n    if (current ==='') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '-') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '+') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '*') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '/') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '%') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '^') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '$') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '(') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === ')') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '[') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === ']') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '{') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '}') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '|') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '<') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '>') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '?') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '!') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '&') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '|') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '<') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '>') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '?') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '!') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '&') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '|') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '<') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '>') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '?') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '!') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '&') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '|') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '<') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '>') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '?') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '!') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '&') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '|') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '<') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '>') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '?') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '!') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '&') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '|') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '<') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '>') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '?') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '!') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '&') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '|') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '<') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '>') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '?') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '!') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '&') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '|') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '<') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '>') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '?') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '!') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '&') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '|') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '<') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '>') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '?') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '!') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '&') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '|') {\n      prefixes.push(current)\n      i++\n      continue\n    }\n    if (current === '<') {\n      prefixes.push(current)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n  const spaces = text.split(' ');\n  const repairSpaces = spaces.map((space) => {\n    if (space.length > 1) {\n      return space.replace(/\\s{2,}/g,'');\n    }\n    return space;\n  });\n  return repairSpaces.join(' ');\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a letter, \n  or null if there is no such character.\n  \n  letter(\"Example\") == \"e\"\n  letter(\"Example 1\") == \"e\"\n  letter(\" Example 2\") == null\n  letter(\" Example   3\") == null\n  */\nconst letter = (text) => {\n  const letters = text.split('');\n  const letter = letters.find((letter) => letter.match(/[a-z]/));\n  return letter;\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a number, \n  or null if there is no such character.\n  \n  number(\"Example\") == \"1\"\n  number(\"Example 1\") == \"1\"\n  number(\" Example 2\") == null\n  number(\" Example   3\") == null\n  */\nconst number = (text) => {\n  const numbers = text.split('');\n  const number = numbers.find((number) => number.match(/[0-9]/));\n  return number;\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a letter, \n  or null if there is no such character.\n  \n  letterOrNumber(text) == \"e\"\n  letterOrNumber(\" Example 2\") == null\n  letterOrNumber(\" Example   3\") == null\n  */\nconst letterOrNumber = (text) => {\n  const letterOrNumbers = text.split('');\n  const letterOrNumber = letterOrNumbers.find((letterOrNumber) => letterOrNumber.match(/[a-z0-9]/));\n  return letterOrNumber;\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a number, \n  or null if there is no such character.\n  \n  numberOrLetter(text) == \"1\"\n  numberOrLetter(\" Example 2\") == null\n  numberOrLetter(\" Example   3\") == null\n  */\nconst numberOrLetter = (text) => {\n  const numberOrLetters = text.split('');\n  const numberOrLetter = numberOrLetters.find((numberOrLetter) => numberOrLetter.match(/[0-9a-z]/));\n  return numberOrLetter;\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a letter, \n  or null if there is no such character.\n  \n  letterOrNumberOrLetter(text) == \"e\"\n  letterOrNumberOrLetter(\" Example 2\") == null\n  letterOrNumberOrLetter(\" Example   3\") == null\n  */\nconst letterOrNumberOrLetter = (text) => {\n  const letterOrNumberOrLetters = text.split('');\n  const letterOrNumberOrLetter = letterOrNumberOrLetters.find((letterOrNumberOrLetter) => letterOrNumberOrLetter.match(/[a-z0-9a-z]/));\n  return letterOrNumberOrLetter;\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a number, \n  or null if there is no such character.\n  \n  numberOrLetterOrNumber(text) == \"1\"\n  numberOrLetterOrNumber(\" Example 2\") == null\n  numberOrLetterOrNumber(\" Example   3\") == null\n  */\nconst numberOrLetterOrNumber = (text) => {\n  const numberOrLetterOrNumbers = text.split('');\n  const numberOrLetterOrNumber = numberOrLetterOrNumbers.find((numberOrLetterOrNumber) => numberOrLetterOrNumber.match(/[0-9a-z]/));\n  return numberOrLetterOrNumber;\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a letter, \n  or null if there is no such character.\n  \n  letterOrNumberOrLetterOrNumber(text) == \"e\"\n  letterOrNumberOrLetterOrNumber(\" Example 2\") == null\n  letterOrNumberOrLetterOrNumber(\" Example   3\") == null\n  */\nconst letterOrNumberOrLetterOrNumber = (text) => {\n  const letterOrNumberOrLetterOrNumbers = text.split('');\n  const letterOrNumberOrLetterOrNumber = letterOrNumberOrLetterOrNumbers.find((letterOrNumberOrLetterOrNumber) => letterOrNumberOrLetterOrNumber.match(/[a-z0-9a-z]/));\n  return letterOrNumberOrLetterOrNumber;\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a number, \n  or null if there is no such character.\n  \n  numberOrLetterOrNumberOrLetter(text) == \"1\"\n  numberOrLetterOrNumberOrLetter(\" Example 2\") == null\n  numberOrLetterOrNumberOrLetter(\" Example   3\") == null\n  */\nconst numberOrLetterOrNumberOrLetter = (text) => {\n  const numberOrLetterOrNumberOrLetters = text.split('');\n  const numberOrLetterOrNumberOrLetter = numberOrLetterOrNumberOrLetters.find((numberOrLetterOrNumberOrLetter) => numberOrLetterOrNumberOrLetter.match(/[0-9a-z]/));\n  return numberOrLetterOrNumberOrLetter;\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a letter, \n  or null if there is no such character.\n  \n  letterOrNumberOrLetterOrNumberOrLetter(text) == \"e\"\n  letterOrNumberOrLetterOrNumberOrLetter(\" Example 2\") == null\n  letterOrNumberOrLetterOrNumberOrLetter(\" Example   3\") == null\n  */\nconst letterOrNumberOrLetterOrNumberOrLetter = (text) => {\n  const letterOrNumberOrLetterOrNumberOrLetters = text.split('');\n  const letterOrNumberOrLetterOrNumberOrLetter = letterOrNumberOrLetterOrNumberOrLetters.find((letterOrNumberOrLetterOrNumberOrLetter) => letterOrNumberOrLetterOrNumberOrLetter.match(/[a-z0-9a-z]/));\n  return letterOrNumberOrLetterOrNumberOrLetter;\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a number, \n  or null if there is no such character.\n  \n  numberOrLetterOrNumberOrLetterOrNumberOrLetter(text) == \"1\"\n  numberOrLetterOrNumberOrLetterOrNumberOrLetter(\" Example 2\") == null\n  numberOrLetterOrNumberOrLetterOrNumberOrLetter(\" Example   3\") == null\n  */\nconst numberOrLetterOrNumberOrLetterOrNumberOrLetter = (text) => {\n  const numberOrLetterOrNumberOrLetterOrNumberOrLetters = text.split('');\n  const numberOrLetterOrNumberOrLetterOrNumberOrLetter = numberOrLetterOrNumberOrLetterOrNumberOrLetters.find((numberOrLetterOrNumberOrLetterOrNumberOrLetter) => numberOrLetterOrNumberOrLetterOrNumberOrLetter.match(/[0-9a-z]/));\n  return numberOrLetterOrNumberOrLetterOrNumberOrLetter;\n}\n\n/*\n  Given a string text, return the first character of the \n  string that is a letter, \n  or null if there is no such character.\n  \n  letterOrNumberOrLetterOrNumberOrLetterOrNumber", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_length = file_name.length;\n  const file_name_without_dot_length = file_name.substr(0, file_name_length - 1);\n  const file_name_without_dot_dot_length = file_name.substr(file_name_without_dot_length - 1, file_name.length);\n  const file_name_without_dot_dot_dot_length = file_name.substr(file_name_without_dot_dot_length - 1, file_name.length);\n  const file_name_without_dot_dot_dot_dot_length = file_name.substr(file_name_without_dot_dot_dot_length - 1, file_name.length);\n  const file_name_without_dot_dot_dot_dot_dot_length = file_name.substr(file_name_without_dot_dot_dot_dot_length - 1, file_name.length);\n  const file_name_without_dot_dot_dot_dot_dot_length = file_name.substr(file_name_without_dot_dot_dot_dot_length - 1, file_name.length);\n  const file_name_without_dot_dot_dot_dot_dot_dot_length = file_name.substr(file_name_without_dot_dot_dot_dot_dot_dot_length - 1, file_name.length);\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_length = file_name.substr(file_name_without_dot_dot_dot_dot_dot_dot_length - 1, file_name.length);\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name.substr(file_name_without_dot_dot_dot_dot_dot_dot_dot_length - 1, file_name.length);\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name.substr(file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_dot_length - 1, file_name.length);\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name.substr(file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length - 1, file_name.length);\n  const file_name_without_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquareCube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquareCubeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquareCubeNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquareCubeNoChangeNoChangeNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquareCubeNoChangeNoChangeNoChangeNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquareCubeNoChangeNoChangeNoChangeNoChangeNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInPrison = [];\n  let currentPrison = 0;\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentLengthPrison = 0;\n  let currentLengthWord = 0;\n  let currentLengthLength = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 1) {\n      currentLength += words[i].length;\n      currentLengthPrison += currentLength;\n      currentLengthWord += currentLength;\n      currentLengthLength += currentLength.length;\n      currentLengthLengthPrison += currentLengthLength;\n      currentLengthLengthWord += currentLengthLength;\n    }\n    currentLength = 0;\n    currentLengthPrison = 0;\n    currentLengthWord = 0;\n    currentLengthLength = 0;\n    currentWord = \"\";\n    currentLength = 0;\n    currentLengthPrison = 0;\n    currentLengthWord = 0;\n    currentLengthLength = 0;\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (currentLengthPrison % 2 === 0) {\n      wordsInPrison.push(currentWord);\n      currentPrison++;\n      currentWord = \"\";\n      currentLength = 0;\n      currentLengthPrison = 0;\n      currentLengthWord = 0;\n      currentLengthLength = 0;\n    }\n    currentLength = 0;\n    currentLengthPrison = 0;\n    currentLengthWord = 0;\n    currentLengthLength = 0;\n    currentWord = \"\";\n    currentLength = 0;\n    currentLengthPrison = 0;\n    currentLengthWord = 0;\n    currentLengthLength = 0;\n  }\n  return wordsInPrison.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm2 = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInPrison = [];\n  let currentPrison = 0;\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentLengthPrison = 0;\n  let currentLengthWord = 0;\n  let currentLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 1) {\n      currentLength += words[i].length;\n      currentLengthPrison += currentLength;\n      currentLengthWord += currentLength;\n      currentLengthLength += currentLength.length;\n      currentLengthLengthPrison += currentLengthLength;\n      currentLengthLengthWord += currentLengthLength;\n    }\n    currentLength = 0;\n    currentLengthPrison = 0;\n    currentLengthWord = 0;\n    currentLengthLength = 0;\n    currentWord = \"\";\n    currentLength = 0;\n    currentLengthPrison = 0;\n    currentLengthWord = 0;\n    currentLengthLength = 0;\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (currentLengthPrison % 2 === 0) {\n      wordsInPrison.push(currentWord);\n      currentPrison++;\n      currentWord = \"\";\n      currentLength = 0;\n      currentLengthPrison = 0;\n      currentLengthWord = 0;\n      currentLengthLength = 0;\n    }\n    currentLength = 0;\n    currentLengthPrison = 0;\n    currentLengthWord = 0;\n    currentLengthLength = 0;\n    currentWord = \"\";\n    currentLength = 0;\n    currentLengthPrison = 0;\n    currentLengthWord = 0;\n    currentLengthLength = 0;\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (currentLengthPrison % 2 === 0) {\n      wordsInPrison.push(currentWord);\n      currentPrison++;\n      currentWord = \"\";\n      currentLength = 0;\n      currentLengthPrison = 0;\n      currentLengthWord = 0;\n      currentLengthLength = 0;\n    }\n    currentLength = 0;\n    currentLengthPrison = 0;\n    currentLengthWord = 0;\n    currentLengthLength = 0;\n    currentWord = \"\";\n    currentLength = 0;\n    currentLengthPrison = 0;\n    currentLengthWord = 0;\n    currentLengthLength = 0;\n  }\n  return wordsInPrison.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm3 = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInPrison = [];\n  let currentPrison = 0;\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentLengthPrison = 0;\n  let currentLengthWord = 0;\n  let currentLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison = 0;\n  let currentLengthLengthWord = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthPrison", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split('/')\n  const numeratorNum = Number(numerator)\n  const denominatorNum = Number(denominator)\n  if (denominatorNum === 0) return true\n  if (denominatorNum === 1) return numeratorNum === 1\n  if (denominatorNum === 2) return numeratorNum === 2\n  if (denominatorNum === 3) return numeratorNum === 3\n  if (denominatorNum === 4) return numeratorNum === 4\n  if (denominatorNum === 5) return numeratorNum === 5\n  if (denominatorNum === 6) return numeratorNum === 6\n  if (denominatorNum === 7) return numeratorNum === 7\n  if (denominatorNum === 8) return numeratorNum === 8\n  if (denominatorNum === 9) return numeratorNum === 9\n  if (denominatorNum === 10) return numeratorNum === 10\n  if (denominatorNum === 11) return numeratorNum === 11\n  if (denominatorNum === 12) return numeratorNum === 12\n  if (denominatorNum === 13) return numeratorNum === 13\n  if (denominatorNum === 14) return numeratorNum === 14\n  if (denominatorNum === 15) return numeratorNum === 15\n  if (denominatorNum === 16) return numeratorNum === 16\n  if (denominatorNum === 17) return numeratorNum === 17\n  if (denominatorNum === 18) return numeratorNum === 18\n  if (denominatorNum === 19) return numeratorNum === 19\n  if (denominatorNum === 20) return numeratorNum === 20\n  if (denominatorNum === 21) return numeratorNum === 21\n  if (denominatorNum === 22) return numeratorNum === 22\n  if (denominatorNum === 23) return numeratorNum === 23\n  if (denominatorNum === 24) return numeratorNum === 24\n  if (denominatorNum === 25) return numeratorNum === 25\n  if (denominatorNum === 26) return numeratorNum === 26\n  if (denominatorNum === 27) return numeratorNum === 27\n  if (denominatorNum === 28) return numeratorNum === 28\n  if (denominatorNum === 29) return numeratorNum === 29\n  if (denominatorNum === 30) return numeratorNum === 30\n  if (denominatorNum === 31) return numeratorNum === 31\n  if (denominatorNum === 32) return numeratorNum === 32\n  if (denominatorNum === 33) return numeratorNum === 33\n  if (denominatorNum === 34) return numeratorNum === 34\n  if (denominatorNum === 35) return numeratorNum === 35\n  if (denominatorNum === 36) return numeratorNum === 36\n  if (denominatorNum === 37) return numeratorNum === 37\n  if (denominatorNum === 38) return numeratorNum === 38\n  if (denominatorNum === 39) return numeratorNum === 39\n  if (denominatorNum === 40) return numeratorNum === 40\n  if (denominatorNum === 41) return numeratorNum === 41\n  if (denominatorNum === 42) return numeratorNum === 42\n  if (denominatorNum === 43) return numeratorNum === 43\n  if (denominatorNum === 44) return numeratorNum === 44\n  if (denominatorNum === 45) return numeratorNum === 45\n  if (denominatorNum === 46) return numeratorNum === 46\n  if (denominatorNum === 47) return numeratorNum === 47\n  if (denominatorNum === 48) return numeratorNum === 48\n  if (denominatorNum === 49) return numeratorNum === 49\n  if (denominatorNum === 50) return numeratorNum === 50\n  if (denominatorNum === 51) return numeratorNum === 51\n  if (denominatorNum === 52) return numeratorNum === 52\n  if (denominatorNum === 53) return numeratorNum === 53\n  if (denominatorNum === 54) return numeratorNum === 54\n  if (denominatorNum === 55) return numeratorNum === 55\n  if (denominatorNum === 56) return numeratorNum === 56\n  if (denominatorNum === 57) return numeratorNum === 57\n  if (denominatorNum === 58) return numeratorNum === 58\n  if (denominatorNum === 59) return numeratorNum === 59\n  if (denominatorNum === 60) return numeratorNum === 60\n  if (denominatorNum === 61) return numeratorNum === 61\n  if (denominatorNum === 62) return numeratorNum === 62\n  if (denominatorNum === 63) return numeratorNum === 63\n  if (denominatorNum === 64) return numeratorNum === 64\n  if (denominatorNum === 65) return numeratorNum === 65\n  if (denominatorNum === 66) return numeratorNum === 66\n  if (denominatorNum === 67) return numeratorNum === 67\n  if (denominatorNum === 68) return numeratorNum === 68\n  if (denominatorNum === 69) return numeratorNum === 69\n  if (denominatorNum === 70) return numeratorNum === 70\n  if (denominatorNum === 71) return numeratorNum === 71\n  if (denominatorNum === 72) return numeratorNum === 72\n  if (denominatorNum === 73) return numeratorNum === 73\n  if (denominatorNum === 74) return numeratorNum === 74\n  if (denominatorNum === 75) return numeratorNum === 75\n  if (denominatorNum === 76) return numeratorNum === 76\n  if (denominatorNum === 77) return numeratorNum === 77\n  if (denominatorNum === 78) return numeratorNum === 78\n  if (denominatorNum === 79) return numeratorNum === 79\n  if (denominatorNum === 80) return numeratorNum === 80\n  if (denominatorNum === 81) return numeratorNum === 81\n  if (denominatorNum === 82) return numeratorNum === 82\n  if (denominatorNum === 83) return numeratorNum === 83\n  if (denominatorNum === 84) return numeratorNum === 84\n  if (denominatorNum === 85) return numeratorNum === 85\n  if (denominatorNum === 86) return numeratorNum === 86\n  if (denominatorNum === 87) return numeratorNum === 87\n  if (denominatorNum === 88) return numeratorNum === 88\n  if (denominatorNum === 89) return numeratorNum === 89\n  if (denominatorNum === 90) return numeratorNum === 90\n  if (denominatorNum === 91) return numeratorNum === 91\n  if (denominatorNum === 92) return numeratorNum === 92\n  if (denominatorNum === 93) return numeratorNum === 93\n  if (denominatorNum === 94) return numeratorNum === 94\n  if (denominatorNum === 95) return numeratorNum === 95\n  if (denominatorNum === 96) return numeratorNum === 96\n  if (denominatorNum === 97) return numeratorNum === 97\n  if (denominatorNum === 98) return numeratorNum === 98\n  if (denominatorNum === 99) return numeratorNum === 99\n  if (denominatorNum === 100) return numeratorNum === 100\n  if (denominatorNum === 101) return numeratorNum === 101\n  if (denominatorNum === 102) return numeratorNum === 102\n  if (denominatorNum === 103) return numeratorNum === 103\n  if (denominatorNum === 104) return numeratorNum === 104\n  if (denominatorNum === 105) return numeratorNum === 105\n  if (denominatorNum === 106) return numeratorNum === 106\n  if (denominatorNum === 107) return numeratorNum === 107\n  if (denominatorNum === 108) return numeratorNum === 108\n  if (denominatorNum === 109) return numeratorNum === 109\n  if (denominatorNum === 110) return numeratorNum === 110\n  if (denominatorNum === 111) return numeratorNum === 111\n  if (denominatorNum === 112) return numeratorNum === 112\n  if (denominatorNum === 113) return numeratorNum === 113\n  if (denominatorNum === 114) return numeratorNum === 114\n  if (denominatorNum === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b);\n  const sumOfDigits = numsArr.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedNumsArr = numsArr.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedNumsArr.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.sort((a, b) => a - b);\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSumOfDigits = sortedSumOfDigits.map(num => num.toString().split('').reduce((acc, curr) => acc + Number(curr), 0));\n  const sortedSum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterDivisible = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 3 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterDivisibleEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 3 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterDivisibleOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 3 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterDivisibleEvenOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 3 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterDivisibleOddOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 3 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterDivisibleOddEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 3 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterDivisibleOddEvenOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 3 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterDivisibleOddEvenOddOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 3 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterDivisibleOddEvenOddOddOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 3 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilterDivisibleOddEvenOddOddOddOdd = (nums) => {\n  let count = 0;\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  const a = [...Array(n)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples2 = (n) => {\n  const a = [...Array(n)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples3 = (n) => {\n  const a = [...Array(n)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples4 = (n) => {\n  const a = [...Array(n)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples5 = (n) => {\n  const a = [...Array(n)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples6 = (n) => {\n  const a = [...Array(n)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples7 = (n) => {\n  const a = [...Array(n)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter((v, i, a) => i % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples8 = (n) => {\n  const a = [...Array(n)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitDistance = planet1Orbit.distance;\n  const planet2OrbitDistance = planet2Orbit.distance;\n  const planet1OrbitOrbits = planet1Orbit.orbits;\n  const planet2OrbitOrbits = planet2Orbit.orbits;\n  const planet1OrbitOrbitPairs = planet1OrbitOrbits.map(orbitPair);\n  const planet2OrbitOrbitPairs = planet2OrbitOrbits.map(orbitPair);\n  const planet1OrbitOrbitPairsSorted = planet1OrbitOrbitPairs\n   .sort((a, b) => a.distance - b.distance);\n  const planet2OrbitOrbitPairsSorted = planet2OrbitOrbitPairs\n   .sort((a, b) => a.distance - b.distance);\n  const planet1OrbitOrbitPairsSortedWithSun = planet1OrbitOrbitPairsSorted\n   .filter((orbitPair) => orbitPair.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (sum % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltProduct = (lst) => {\n  let result = [];\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n    if (product % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltDivide = (lst) => {\n  let result = [];\n  let divide = 1;\n  for (let i = 0; i < lst.length; i++) {\n    divide /= lst[i];\n    if (divide % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltMod = (lst) => {\n  let result = [];\n  let mod = 0;\n  for (let i = 0; i < lst.length; i++) {\n    mod %= lst[i];\n    if (mod % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltPower = (lst) => {\n  let result = [];\n  let power = 0;\n  for (let i = 0; i < lst.length; i++) {\n    power += lst[i];\n    if (power % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltExponent = (lst) => {\n  let result = [];\n  let exponent = 0;\n  for (let i = 0; i < lst.length; i++) {\n    exponent += lst[i];\n    if (exponent % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltLog = (lst) => {\n  let result = [];\n  let log = 0;\n  for (let i = 0; i < lst.length; i++) {\n    log += lst[i];\n    if (log % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrumentSuccession,\n * return an empty string.\n */\nconst bowedStringedInstrument = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return bowedStringedInstrumentSuccession(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrumentSuccession,\n * return an empty string.\n */\nconst bowedStringedInstrument = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return bowedStringedInstrumentSuccession(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrument = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return bowedStringedInstrumentSuccession(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrument = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return bowedStringedInstrumentSuccession(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrument = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return bowedStringedInstrumentSuccession(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrument = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return bowedStringedInstrumentSuccession(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrument = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return bowedStringedInstrumentSuccession(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrument = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return bowedStringedInstrumentSuccession(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument,\n * return an empty string.\n */\nconst bowedStringedInstrument = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return bowedStringedInstrumentSuccession(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in bowedStringedInstrument", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium2 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium3 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium4 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium5 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium6 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium7 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium8 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium9 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium10 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium11 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium12 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium13 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium14 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium15 = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDeviation([-1, -2, 0]) == -1\n  doubleTheDeviation([9, -2]) == 9\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDeviation([-1, -2, 0]) == -1\n  doubleTheDeviation([9, -2]) == 9\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDeviation([-1, -2, 0]) == -1\n  doubleTheDeviation([9, -2]) == 9\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDeviation([-1, -2, 0]) == -1\n  doubleTheDeviation([9, -2]) == 9\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDeviation([-1, -2, 0]) == -1\n  doubleTheDeviation([9, -2]) == 9\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDeviation([-1, -2, 0]) == -1\n  doubleTheDeviation([9, -2]) == 9\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDeviation([-1, -2, 0]) == -1\n  doubleTheDeviation([9, -2]) == 9\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDeviation([-1, -2, 0]) == -1\n  doubleTheDeviation([9, -2]) == 9\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDeviation([-1, -2, 0]) == -1\n  doubleTheDeviation([9, -2]) == 9\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDeviation([-1, -2, 0]) == -1\n  doubleTheDeviation([9, -2]) == 9\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const scoreDifferences = scores.length - guesses.length;\n  const guessesDifferences = guesses.length - scores.length;\n  const scoreDifferenceSum = scoreDifferences.reduce((a, b) => a + b, 0);\n  const guessesDifferenceSum = guessesDifferences.reduce((a, b) => a + b, 0);\n  const scoreDifferenceSumSquared = scoreDifferenceSum * scoreDifferenceSum;\n  const guessesDifferenceSumSquared = guessesDifferenceSum * guessesDifferenceSum;\n  const scoreDifferenceSumSquareRoot = scoreDifferenceSumSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumSquareRoot = guessesDifferenceSumSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRoot = scoreDifferenceSumSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRoot = guessesDifferenceSumSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootSquared = scoreDifferenceSumRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootSquared = guessesDifferenceSumRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootSquareRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootSquareRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRootSquareRoot = scoreDifferenceSumRootRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRootSquareRoot = guessesDifferenceSumRootRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoot * guessesDifferenceSum;\n  const scoreDifferenceSumRootRoot = scoreDifferenceSumRootSquared * Math.sqrt(scoreDifferenceSum);\n  const guessesDifferenceSumRootRoot = guessesDifferenceSumRootSquared * Math.sqrt(guessesDifferenceSum);\n  const scoreDifferenceSumRootRootSquared = scoreDifferenceSumRootRoot * scoreDifferenceSum;\n  const guessesDifferenceSumRootRootSquared = guessesDifferenceSumRootRoo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_class_name = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_strength = extension.length - 1;\n    if (extension_strength > extension_class) {\n      extension_class = extension;\n      extension_class_name = extension;\n    }\n  }\n  return extension_class_name;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that\n  has the strongest extension.\n  Example:\n  Given'my_class', ['AA', 'Be', 'CC'], return'my_class.AA'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD'], return'my_class.DD'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE'], return'my_class.EE'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF'], return'my_class.FF'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG'], return'my_class.GG'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH'], return'my_class.HH'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II'], return'my_class.II'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ'], return'my_class.JJ'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK'], return'my_class.KK'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL'], return'my_class.LL'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM'], return'my_class.MM'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN'], return'my_class.NN'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO'], return'my_class.OO'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP'], return'my_class.PP'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ'], return'my_class.QQ'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR'], return'my_class.RR'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS'], return'my_class.SS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SSS'], return'my_class.SSS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SSS', 'SSSS'], return'my_class.SSSS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SSS', 'SSSS', 'SSSSS'], return'my_class.SSSSS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SSS', 'SSSS', 'SSSSS', 'SSSSSSSS'], return'my_class.SSSSSS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SSS', 'SSSS', 'SSSS', 'SSSSS', 'SSSSSSSS'], return'my_class.SSSSSS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SSS', 'SSSS', 'SSSS', 'SSSSS', 'SSSSSS', 'SSSSSSS', 'SSSSSSSSSS'], return'my_class.SSSSSS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SSS', 'SSSS', 'SSSS', 'SSSSS', 'SSSSSS', 'SSSSSSS', 'SSSSSSSSSS'], return'my_class.SSSSSS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SSS', 'SSSS', 'SSSS', 'SSSS', 'SSSSS', 'SSSSSS', 'SSSSSSS', 'SSSSSSSSSS'], return'my_class.SSSSSS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SSS', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArray = a.split('');\n  let bArray = b.split('');\n  let aLength = aArray.length;\n  let bLength = bArray.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aMatch = false;\n  let bMatch = false;\n  let aMatchIndex = 0;\n  let bMatchIndex = 0;\n  let aMatchLength = 0;\n  let bMatchLength = 0;\n  let aMatchIndex2 = 0;\n  let bMatchIndex2 = 0;\n  let aMatchLength2 = 0;\n  let bMatchLength2 = 0;\n  let aMatchIndex3 = 0;\n  let bMatchIndex3 = 0;\n  let aMatchLength3 = 0;\n  let bMatchLength3 = 0;\n  let aMatchIndex4 = 0;\n  let bMatchIndex4 = 0;\n  let aMatchLength4 = 0;\n  let bMatchLength4 = 0;\n  let aMatchIndex5 = 0;\n  let bMatchIndex5 = 0;\n  let aMatchLength5 = 0;\n  let bMatchLength5 = 0;\n  let aMatchIndex6 = 0;\n  let bMatchIndex6 = 0;\n  let aMatchLength6 = 0;\n  let bMatchLength6 = 0;\n  let aMatchIndex7 = 0;\n  let bMatchIndex7 = 0;\n  let aMatchLength7 = 0;\n  let bMatchLength7 = 0;\n  let aMatchIndex8 = 0;\n  let bMatchIndex8 = 0;\n  let aMatchLength8 = 0;\n  let bMatchLength8 = 0;\n  let aMatchIndex9 = 0;\n  let bMatchIndex9 = 0;\n  let aMatchLength9 = 0;\n  let bMatchLength9 = 0;\n  let aMatchIndex10 = 0;\n  let bMatchIndex10 = 0;\n  let aMatchLength10 = 0;\n  let bMatchLength10 = 0;\n  let aMatchIndex11 = 0;\n  let bMatchIndex11 = 0;\n  let aMatchLength11 = 0;\n  let bMatchLength11 = 0;\n  let aMatchIndex12 = 0;\n  let bMatchIndex12 = 0;\n  let aMatchLength12 = 0;\n  let bMatchLength12 = 0;\n  let aMatchIndex13 = 0;\n  let bMatchIndex13 = 0;\n  let aMatchLength13 = 0;\n  let bMatchLength13 = 0;\n  let aMatchIndex14 = 0;\n  let bMatchIndex14 = 0;\n  let aMatchLength14 = 0;\n  let bMatchLength14 = 0;\n  let aMatchIndex15 = 0;\n  let bMatchIndex15 = 0;\n  let aMatchLength15 = 0;\n  let bMatchLength15 = 0;\n  let aMatchIndex16 = 0;\n  let bMatchIndex16 = 0;\n  let aMatchLength16 = 0;\n  let bMatchLength16 = 0;\n  let aMatchIndex17 = 0;\n  let bMatchIndex17 = 0;\n  let aMatchLength17 = 0;\n  let bMatchLength17 = 0;\n  let aMatchIndex18 = 0;\n  let bMatchIndex18 = 0;\n  let aMatchLength18 = 0;\n  let bMatchLength18 = 0;\n  let aMatchIndex19 = 0;\n  let bMatchIndex19 = 0;\n  let aMatchLength19 = 0;\n  let bMatchLength19 = 0;\n  let aMatchIndex20 = 0;\n  let bMatchIndex20 = 0;\n  let aMatchLength20 = 0;\n  let bMatchLength20 = 0;\n  let aMatchIndex21 = 0;\n  let bMatchIndex21 = 0;\n  let aMatchLength21 = 0;\n  let bMatchLength21 = 0;\n  let aMatchIndex22 = 0;\n  let bMatchIndex22 = 0;\n  let aMatchLength22 = 0;\n  let bMatchLength22 = 0;\n  let aMatchIndex23 = 0;\n  let bMatchIndex23 = 0;\n  let aMatchLength23 = 0;\n  let bMatchLength23 = 0;\n  let aMatchIndex24 = 0;\n  let bMatchIndex24 = 0;\n  let aMatchLength24 = 0;\n  let bMatchLength24 = 0;\n  let aMatchIndex25 = 0;\n  let bMatchIndex25 = 0;\n  let aMatchLength25 = 0;\n  let bMatchLength25 = 0;\n  let aMatchIndex26 = 0;\n  let bMatchIndex26 = 0;\n  let aMatchLength26 = 0;\n  let bMatchLength26 = 0;\n  let aMatchIndex27 = 0;\n  let bMatchIndex27 = 0;\n  let aMatchLength27 = 0;\n  let bMatchLength27 = 0;\n  let aMatchIndex28 = 0;\n  let bMatchIndex28 = 0;\n  let aMatchLength28 = 0;\n  let bMatchLength28 = 0;\n  let aMatchIndex29 = 0;\n  let bMatchIndex29 = 0;\n  let aMatchLength29 = 0;\n  let bMatchLength29 = 0;\n  let aMatchIndex30 = 0;\n  let bMatchIndex30 = 0;\n  let aMatchLength30 = 0;\n  let bMatchLength30 = 0;\n  let aMatchIndex31 = 0;\n  let bMatchIndex31 = 0;\n  let aMatchLength31 = 0;\n  let bMatchLength31 = 0;\n  let aMatchIndex32 = 0;\n  let bMatchIndex32 = 0;\n  let aMatchLength32 = 0;\n  let bMatchLength32 = 0;\n  let aMatchIndex33 = 0;\n  let bMatchIndex33 = 0;\n  let aMatchLength33 = 0;\n  let bMatchLength33 = 0;\n  let aMatchIndex34 = 0;\n  let bMatchIndex34 = 0;\n  let aMatchLength34 = 0;\n  let bMatchLength34 = 0;\n  let aMatchIndex35 = 0;\n  let bMatchIndex35 = 0;\n  let aMatchLength35 = 0;\n  let bMatchLength35 = 0;\n  let aMatchIndex36 = 0;\n  let bMatchIndex36 = 0;\n  let aMatchLength36 = 0;\n  let bMatchLength36 = 0;\n  let aMatchIndex37 = 0;\n  let bMatchIndex37 = 0;\n  let aMatchLength37 = 0;\n  let bMatchLength37 = 0;\n  let aMatchIndex38 = 0;\n  let bMatchIndex38 = 0;\n  let aMatchLength38 = 0;\n  let bMatchLength38 = 0;\n  let aMatchIndex39 = 0;\n  let bMatchIndex39 = 0;\n  let aMatchLength39 = 0;\n  let bMatchLength39 = 0;\n  let aMatchIndex40 = 0;\n  let bMatchIndex40 = 0;\n  let aMatchLength40 = 0;\n  let bMatchLength40 = 0;\n  let aMatchIndex41 = 0;\n  let bMatchIndex41 = 0;\n  let aMatchLength41 = 0;\n  let bMatchLength41 = 0;\n  let aMatchIndex42 = 0;\n  let bMatchIndex42 = 0;\n  let aMatchLength42 = 0;\n  let bMatchLength42 = 0;\n  let aMatchIndex43 = 0;\n  let bMatchIndex43 = 0;\n  let aMatchLength43 = 0;\n  let bMatchLength43 = 0;\n  let aMatchIndex44 = 0;\n  let bMatchIndex44 = 0;\n  let aMatchLength44 = 0;\n  let bMatchLength44 = 0;\n  let aMatchIndex45 = 0;\n  let bMatchIndex45 = 0;\n  let aMatchLength45 = 0;\n  let bMatchLength45 = 0;\n  let aMatchIndex46 = 0;\n  let bMatchIndex46 = 0;\n  let aMatchLength46 = 0;\n  let bMatchLength46 = 0;\n  let aMatchIndex47 = 0;\n  let bMatchIndex47 = 0;\n  let aMatchLength47 = 0;\n  let bMatchLength47 = 0;\n  let aMatchIndex48 = 0;\n  let bMatchIndex48 = 0;\n  let aMatchLength48 = 0;\n  let bMatchLength48 = 0;\n  let aMatchIndex49 = 0;\n  let bMatchIndex49 = 0;\n  let aMatchLength49 = 0;\n  let bMatchLength49 = 0;\n  let aMatchIndex50 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let digitCount = 0;\n  while (num > 0) {\n    digitCount = num % 10;\n    num = Math.floor(num / 10);\n    if (digitCount % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that has all the possible permutations of that string.\n\n   Example:\n      permutations([\"a\", \"b\", \"c\"]) ==> [[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]) ==> [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]]\n      permutations([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const romanMap = {\n    1: ['M', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', 'CM', 'D', 'CD', '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  const a1 = aLen - 1;\n  const b1 = bLen - 1;\n  const c1 = cLen - 1;\n  const a2 = aLen - 2;\n  const b2 = bLen - 2;\n  const c2 = cLen - 2;\n  const a3 = aLen - 3;\n  const b3 = bLen - 3;\n  const c3 = cLen - 3;\n  const a4 = aLen - 4;\n  const b4 = bLen - 4;\n  const c4 = cLen - 4;\n  const a5 = aLen - 5;\n  const b5 = bLen - 5;\n  const c5 = cLen - 5;\n  const a6 = aLen - 6;\n  const b6 = bLen - 6;\n  const c6 = cLen - 6;\n  const a7 = aLen - 7;\n  const b7 = bLen - 7;\n  const c7 = cLen - 7;\n  const a8 = a7 - 1;\n  const b8 = b7 - 1;\n  const c8 = c7 - 1;\n  const a9 = a7 - 2;\n  const b9 = b7 - 2;\n  const c9 = c7 - 2;\n  const a10 = a7 - 3;\n  const b10 = b7 - 3;\n  const c10 = c7 - 3;\n  const a11 = a7 - 4;\n  const b11 = b7 - 4;\n  const c11 = c7 - 4;\n  const a12 = a7 - 5;\n  const b12 = b7 - 5;\n  const c12 = c7 - 5;\n  const a13 = a7 - 6;\n  const b13 = b7 - 6;\n  const c13 = c7 - 6;\n  const a14 = a7 - 7;\n  const b14 = b7 - 7;\n  const c14 = c7 - 7;\n  const a15 = a8 - 1;\n  const b15 = b8 - 1;\n  const c15 = c8 - 1;\n  const a16 = a8 - 2;\n  const b16 = b8 - 2;\n  const c16 = c8 - 2;\n  const a17 = a8 - 3;\n  const b17 = b8 - 3;\n  const c17 = c8 - 3;\n  const a18 = a8 - 4;\n  const b18 = b8 - 4;\n  const c18 = c8 - 4;\n  const a19 = a8 - 5;\n  const b19 = b8 - 5;\n  const c19 = c8 - 5;\n  const a20 = a8 - 6;\n  const b20 = b8 - 6;\n  const c20 = c8 - 6;\n  const a21 = a8 - 7;\n  const b22 = b8 - 7;\n  const c22 = c8 - 7;\n  const a23 = a9 - 1;\n  const b23 = b9 - 1;\n  const c23 = c9 - 1;\n  const a24 = a9 - 2;\n  const b24 = b9 - 2;\n  const c24 = c9 - 2;\n  const a25 = a9 - 3;\n  const b25 = b9 - 3;\n  const c25 = c9 - 3;\n  const a26 = a9 - 4;\n  const b26 = b9 - 4;\n  const c26 = c9 - 4;\n  const a27 = a9 - 5;\n  const b27 = b9 - 5;\n  const c27 = c9 - 5;\n  const a28 = a9 - 6;\n  const b28 = b9 - 6;\n  const c28 = c9 - 6;\n  const a29 = a9 - 7;\n  const b29 = b9 - 7;\n  const c29 = c9 - 7;\n  const a30 = a10 - 1;\n  const b30 = b10 - 1;\n  const c30 = c10 - 1;\n  const a31 = a10 - 2;\n  const b32 = b10 - 2;\n  const c32 = c10 - 2;\n  const a33 = a10 - 3;\n  const b33 = b10 - 3;\n  const c33 = c10 - 3;\n  const a34 = a10 - 4;\n  const b34 = b10 - 4;\n  const c34 = c10 - 4;\n  const a35 = a10 - 5;\n  const b35 = b10 - 5;\n  const c35 = c10 - 5;\n  const a36 = a10 - 6;\n  const b36 = b10 - 6;\n  const c36 = c10 - 6;\n  const a37 = a10 - 7;\n  const b37 = b10 - 7;\n  const c37 = c10 - 7;\n  const a38 = a11 - 1;\n  const b38 = b11 - 1;\n  const c38 = c11 - 1;\n  const a39 = a11 - 2;\n  const b39 = b11 - 2;\n  const c39 = c11 - 2;\n  const a40 = a11 - 3;\n  const b40 = b11 - 3;\n  const c40 = c11 - 3;\n  const a41 = a11 - 4;\n  const b42 = b11 - 4;\n  const c42 = c11 - 4;\n  const a42 = a11 - 5;\n  const b43 = b11 - 5;\n  const c43 = c11 - 5;\n  const a44 = a11 - 6;\n  const b44 = b11 - 6;\n  const c44 = c11 - 6;\n  const a45 = a11 - 7;\n  const b45 = b11 - 7;\n  const c45 = c11 - 7;\n  const a46 = a12 - 1;\n  const b46 = b12 - 1;\n  const c46 = c12 - 1;\n  const a47 = a12 - 2;\n  const b47 = b12 - 2;\n  const c47 = c12 - 2;\n  const a48 = a12 - 3;\n  const b48 = b12 - 3;\n  const c48 = c12 - 3;\n  const a49 = a12 - 4;\n  const b49 = b12 - 4;\n  const c49 = c12 - 4;\n  const a50 = a12 - 5;\n  const b50 = b12 - 5;\n  const c50 = c12 - 5;\n  const a51 = a12 - 6;\n  const b51 = b12 - 6;\n  const c51 = c12 - 6;\n  const a52 = a12 - 7;\n  const b52 = b12 - 7;\n  const c52 = c12 - 7;\n  const a53 = a13 - 1;\n  const b53 = b13 - 1;\n  const c53 = c13 - 1;\n  const a54 = a13 - 2;\n  const b54 = b13 - 2;\n  const c54 = c13 - 2;\n  const a55 = a13 - 3;\n  const b55 = b13 - 3;\n  const c55 = c13 - 3;\n  const a56 = a13 - 4;\n  const b56 = b13 - 4;\n  const c56 = c13 - 4;\n  const a57 = a13 - 5;\n  const b57 = b13 - 5;\n  const c57 = c13 - 5;\n  const a58 = a13 - 6;\n  const b58 = b13 - 6;\n  const c58 = c13 - 6;\n  const a59 = a13 - 7;\n  const b59 = b13 - 7;\n  const c59 = c13 - 7;\n  const a60 = a14 - 1;\n  const b60 = b14 - 1;\n  const c60 = c14 - 1;\n  const a61 = a14 - 2;\n  const b61 = b14 - 2;\n  const c61 = c14 - 2;\n  const a62 = a14 - 3;\n  const b62 = b14 - 3;\n  const c62 = c14 - 3;\n  const a63 = a14 - 4;\n  const b63 = b", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = '';\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars > maxChar) {\n      maxChar = chars;\n      maxWord = word;\n    }\n    if (chars > uniqueChar) {\n      uniqueChar = chars;\n      uniqueWord = word;\n    }\n  }\n\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMin([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMin([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMin = (words) => {\n  let min = 0;\n  let minWord = '';\n  let minChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = '';\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars < minChar) {\n      minChar = chars;\n      minWord = word;\n    }\n    if (chars < uniqueChar) {\n      uniqueChar = chars;\n      uniqueWord = word;\n    }\n  }\n\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMaxUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMaxUnique = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = '';\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars > maxChar) {\n      maxChar = chars;\n      maxWord = word;\n    }\n    if (chars > uniqueChar) {\n      uniqueChar = chars;\n      uniqueWord = word;\n    }\n  }\n\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMinUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMinUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMinUnique = (words) => {\n  let min = 0;\n  let minWord = '';\n  let minChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = '';\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars < minChar) {\n      minChar = chars;\n      minWord = word;\n    }\n    if (chars < uniqueChar) {\n      uniqueChar = chars;\n      uniqueWord = word;\n    }\n  }\n\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMaxUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMaxUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMaxUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMaxUniqueUnique = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = '';\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars > maxChar) {\n      maxChar = chars;\n      maxWord = word;\n    }\n    if (chars > uniqueChar) {\n      uniqueChar = chars;\n      uniqueWord = word;\n    }\n  }\n\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMinUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMinUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMinUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMinUniqueUnique = (words) => {\n  let min = 0;\n  let minWord = '';\n  let minChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = '';\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars < minChar) {\n      minChar = chars;\n      minWord = word;\n    }\n    if (chars < uniqueChar) {\n      uniqueChar = chars;\n      uniqueWord = word;\n    }\n  }\n\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMaxUniqueUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMaxUniqueUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMaxUniqueUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMaxUniqueUnique = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let uniqueWord = '';\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let chars = word.length;\n    if (chars > maxChar) {\n      maxChar = chars;\n      maxWord = word;\n    }\n    if (chars > uniqueChar) {\n      uniqueChar = chars;\n      uniqueWord = word;\n    }\n  }\n\n  return uniqueWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMinUniqueUnique([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMinUniqueUnique([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMinUniqueUnique([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remainingCarrots = Math.ceil(remaining / carrots);\n  const remainingCarrotLeft = Math.floor(remainingCarrots * carrots);\n  const remainingCarrotRight = Math.floor(remainingCarrots * (carrots + 1));\n  const remainingCarrots = remainingCarrotLeft + remainingCarrotRight;\n  const totalCarrots = remainingCarrotLeft + remainingCarrots;\n  const totalCarrotLeft = remainingCarrotLeft + remainingCarrotRight;\n  const totalCarrotRight = remainingCarrotLeft + remainingCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n  const totalCarrots = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotLeft = totalCarrotLeft + totalCarrotRight;\n  const totalCarrotRight = totalCarrotLeft + totalCarrotRight;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_1 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_2 = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_3 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_4 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_5 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_6 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_7 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_8 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_9 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_10 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_11 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_12 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_13 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> considerClearcutCharacters('xyzXYZ')\n * 3\n * >>> considerClearcutCharacters('Jerry')\n * 4\n */\nconst considerClearcutCharacters_14 = (string, caseSensitive) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].length > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const operatorLength = operatorList.length\n  const operandLength = operandList.length\n  const result = 0\n  for (let i = 0; i < operatorLength; i++) {\n    result += operandList[i] * operatorList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst prefixAlgebra = (operator, operand) => {\n  const operatorList = operator.split('-')\n  const operandList = operand.split('-')\n  const operatorLength = operatorList.length\n  const operandLength = operandList.length\n  const result = 0\n  for (let i = 0; i < operatorLength; i++) {\n    result += operandList[i] * operatorList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst postfixAlgebra = (operator, operand) => {\n  const operatorList = operator.split('*')\n  const operandList = operand.split('*')\n  const operatorLength = operatorList.length\n  const operandLength = operandList.length\n  const result = 0\n  for (let i = 0; i < operatorLength; i++) {\n    result += operandList[i] * operatorList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst powerAlgebra = (operator, operand) => {\n  const operatorList = operator.split('/')\n  const operandList = operand.split('/')\n  const operatorLength = operatorList.length\n  const operandLength = operandList.length\n  const result = 0\n  for (let i = 0; i < operatorLength; i++) {\n    result += operandList[i] * operatorList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst powerAlgebra = (operator, operand) => {\n  const operatorList = operator.split('^')\n  const operandList = operand.split('^')\n  const operatorLength = operatorList.length\n  const operandLength = operandList.length\n  const result = 0\n  for (let i = 0; i < operatorLength; i++) {\n    result += operandList[i] * operatorList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst powerAlgebra = (operator, operand) => {\n  const operatorList = operator.split('*')\n  const operandList = operand.split('*')\n  const operatorLength = operatorList.length\n  const operandLength = operandList.length\n  const result = 0\n  for (let i = 0; i < operatorLength; i++) {\n    result += operandList[i] * operatorList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  let reversed = \"\";\n  let letter = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while(i < l) {\n    letter = s.charAt(i);\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {\n      reversed = letter + reversed;\n      i++;\n    } else {\n      reversed = letter + reversed;\n    }\n    \n    if(letter.toLowerCase() === letter.toUpperCase()) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5WithHash = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5WithHashAndHash = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5WithHashAndHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5WithHashAndHashAndHash = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5WithHashAndHashAndHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5WithHashAndHashAndHashAndHash = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5WithHashAndHashAndHashAndHashAndHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5WithHashAndHashAndHashAndHashAndHash = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5WithHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  const result = [];\n  let digit;\n  let i;\n  let j;\n\n  for (i = a; digit === undefined; i += 1) {\n    digit = i % 10;\n    result.push(digit);\n  }\n\n  for (i = b; digit === undefined; i += 1) {\n    digit = i % 10;\n    result.push(digit);\n  }\n\n  return result;\n};\n\n/**\n * Given a string, return the string in all lowercase.\n */\nconst toLower = str => str.toLowerCase();\n\n/**\n * Given a string, return the string in all uppercase.\n */\nconst toUpper = str => str.toUpperCase();\n\n/**\n * Given a string, return the string in all uppercase.\n */\nconst toTitleCase = str => toUpper(toLower(str));\n\n/**\n * Given a string, return the string in all lowercase.\n */\nconst toTitleCaseAll = str => toTitleCase(str).replace(/\\b(\\w)/g, (m, p1) => p1.toUpperCase());\n\n/**\n * Given a string, return the string in all lowercase.\n */\nconst toTitleCaseAllCaps = str => toTitleCaseAll(str).replace(/\\b(\\w)/g, (m, p1) => p1.toUpperCase());\n\n/**\n * Given a string, return the string in all lowercase.\n */\nconst toTitleCaseAllCapsAll = str => toTitleCaseAllCaps(str).replace(/\\b(\\w)/g, (m, p1) => p1.toUpperCase());\n\n/**\n * Given a string, return the string in all lowercase.\n */\nconst toTitleCaseAllCapsAllCaps = str => toTitleCaseAllCapsAll(str).replace(/\\b(\\w)/g, (m, p1) => p1.toUpperCase());\n\n/**\n * Given a string, return the string in all lowercase.\n */\nconst toTitleCaseAllCapsAllCapsAll = str => toTitleCaseAllCapsAllCaps(str).replace(/\\b(\\w)/g, (m, p1) => p1.toUpperCase());\n\n/**\n * Given a string, return the string in all lowercase.\n */\nconst toTitleCaseAllCapsAllCapsAllCapsAll = str => toTitleCaseAllCapsAllCapsAllCaps(str).replace(/\\b(\\w)/g, (m, p1) => p1.toUpperCase());\n\n/**\n * Given a string, return the string in all lowercase.\n */\nconst toTitleCaseAllCapsAllCapsAllCapsAllCapsAll = str => toTitleCaseAllCapsAllCapsAllCapsAllCapsAllCaps(str).replace(/\\b(\\w)/g, (m, p1) => p1.toUpperCase());\n\n/**\n * Given a string, return the string in all lowercase.\n */\nconst toTitleCaseAllCapsAllCapsAllCapsAllCapsAllCapsAll = str => toTitleCaseAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCapsAllCap", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_beats = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    if (note.includes('.')) {\n      notes_beats.push(parseInt(note.slice(0, -1), 10));\n    } else {\n      notes_beats.push(parseInt(note, 10));\n    }\n  }\n  return notes_beats;\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengths = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversedReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversedReversedReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversedReversedReversedReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversedReversedReversedReversedReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversedReversedReversedReversedReversedReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversedReversedReversedReversedReversedReversedReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversedReversedReversedReversedReversedReversedReversedReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o o|.| o| o|.|.|.|.| o o', the output should be\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n */\nconst getNoteLengthsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (music_string) => {\n  const notes = parseMusic(music_string);\n  return notes.map((note) => note.length - 1);\n};\n\n/**\n * Given a string, return a list of integers representing how many beats does each note last.\n * For example, given 'o ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * For example if given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given 'abc', return 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'.\n * If given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numberString = '';\n  let numberArray = numbers.split(' ');\n  let numberIndex = 0;\n  let numberLength = 0;\n  let numberValue = 0;\n  let numberStringLength = 0;\n  let numberStringValue = 0;\n  let numberStringIndex = 0;\n  let numberStringValueLength = 0;\n  let numberStringValueIndex = 0;\n  let numberStringValueValueLength = 0;\n  let numberStringValueValueIndex = 0;\n  let numberStringValueValueValueLength = 0;\n  let numberStringValueValueValueIndex = 0;\n  let numberStringValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let numberStringValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let numberString", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? decimal + integer : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part.\n  >>> truncateNumber(3.5)\n  (3,)\n  */\nconst truncateDecimal = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3,)\n  */\nconst truncateDecimalTuple = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithDecimal = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithInteger = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithDecimalAndInteger = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithIntegerAndDecimal = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithIntegerAndInteger = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithIntegerAndDecimalAndInteger = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithIntegerAndDecimalAndDecimal = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithIntegerAndDecimalAndDecimalAndInteger = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithIntegerAndDecimalAndDecimalAndDecimal = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithIntegerAndDecimalAndDecimalAndDecimalAndDecimal = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithIntegerAndDecimalAndDecimalAndDecimalAndDecimal = (number) => {\n  const decimal = number % 1;\n  const integer = Math.floor(number);\n  return decimal? integer + decimal : integer;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the decimal part as a tuple.\n  >>> truncateNumber(3.5)\n  (3, )\n  */\nconst truncateDecimalTupleWithIntegerAndDecimalAndDecimalAndDecimalAndDecimal", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  const [minDistance, minIndex] = Math.min(...numbers.map(n => Math.abs(n - numbers[0])));\n  const [maxDistance, maxIndex] = Math.max(...numbers.map(n => Math.abs(n - numbers[0])));\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\n/**\n  Given a chemical element (a string), return its chemical formula\n  >>> getChemicalFormula('Fe')\n  'Fe'\n  >>> getChemicalFormula('Fe2O')\n  'Fe2O'\n  >>> getChemicalFormula('Fe2O2')\n  'Fe2O2'\n  >>> getChemicalFormula('Fe2O3O')\n  'Fe2O3O'\n  >>> getChemicalFormula('Fe2O3O2')\n  'Fe2O3O2'\n  >>> getChemicalFormula('Fe2O3O3O')\n  'Fe2O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O2')\n  'Fe2O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O')\n  'Fe2O3O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O3O2')\n  'Fe2O3O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O3O')\n  'Fe2O3O3O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O3O3O2')\n  'Fe2O3O3O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O')\n  'Fe2O3O3O3O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O2')\n  'Fe2O3O3O3O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O')\n  'Fe2O3O3O3O3O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O2')\n  'Fe2O3O3O3O3O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O')\n  'Fe2O3O3O3O3O3O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O2')\n  'Fe2O3O3O3O3O3O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O')\n  'Fe2O3O3O3O3O3O3O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O2')\n  'Fe2O3O3O3O3O3O3O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3')\n  'Fe2O3O3O3O3O3O3O3O3O3'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3O')\n  'Fe2O3O3O3O3O3O3O3O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O2')\n  'Fe2O3O3O3O3O3O3O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3O')\n  'Fe2O3O3O3O3O3O3O3O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3O2')\n  'Fe2O3O3O3O3O3O3O3O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3O3')\n  'Fe2O3O3O3O3O3O3O3O3O3O3'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3O')\n  'Fe2O3O3O3O3O3O3O3O3O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3O2')\n  'Fe2O3O3O3O3O3O3O3O3O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3O3O3')\n  'Fe2O3O3O3O3O3O3O3O3O3O3O3'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3O3O')\n  'Fe2O3O3O3O3O3O3O3O3O3O3O3O'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3O3O2')\n  'Fe2O3O3O3O3O3O3O3O3O3O3O3O2'\n  >>> getChemicalFormula('Fe2O3O3O3O3O3O3O3O3O3O3O3')\n  'Fe2O3O3O3O3O3O3O3O3O3O3O3O3'\n  >>> getChemicalFormula('Fe2", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => [Math.min(acc, val), Math.max(acc, val)], [0, 0])\n  return numbers.map((val) => val / Math.max(min, max))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultiple(100)\n 100\n */\nconst roundToNearestMultiple = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultiple(100)\n 100\n */\nconst roundToNearestMultipleWithPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSign = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSign(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSign = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSign(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSign = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n}\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWith", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNone([])\n  []\n  >>> filterNone([None])\n  [None]\n  >>> filterNone([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterNone = values => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmpty([])\n  []\n  >>> filterEmpty([None])\n  [None]\n  >>> filterEmpty([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmpty = values => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDict({})\n  {}\n  >>> filterEmptyDict({'a': 1})\n  {'a': 1}\n  >>> filterEmptyDict({'a': 1, b: 2})\n  {'a': 1, b: 2} # b will be ignored\n  */\nconst filterEmptyDict = values => {\n  return values.filter(value => Object.keys(value).length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([None])\n  [None]\n  >>> filterEmptyList([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyList = values => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyString(\"\")\n  \"\"\n  >>> filterEmptyString(\"abc\")\n  \"abc\"\n  >>> filterEmptyString(\"abc123\")\n  \"abc123\"\n  */\nconst filterEmptyString = values => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([None])\n  [None]\n  >>> filterEmptyList([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyList = values => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDict({})\n  {}\n  >>> filterEmptyDict({'a': 1})\n  {'a': 1}\n  >>> filterEmptyDict({'a': 1, b: 2})\n  {'a': 1, b: 2} # b will be ignored\n  */\nconst filterEmptyDict = values => {\n  return values.filter(value => Object.keys(value).length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([None])\n  [None]\n  >>> filterEmptyList([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyList = values => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyString(\"\")\n  \"\"\n  >>> filterEmptyString(\"abc\")\n  \"abc\"\n  >>> filterEmptyString(\"abc123\")\n  \"abc123\"\n  */\nconst filterEmptyString = values => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([None])\n  [None]\n  >>> filterEmptyList([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyList = values => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDict({})\n  {}\n  >>> filterEmptyDict({'a': 1})\n  {'a': 1}\n  >>> filterEmptyDict({'a': 1, b: 2})\n  {'a': 1, b: 2} # b will be ignored\n  */\nconst filterEmptyDict = values => {\n  return values.filter(value => Object.keys(value).length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([None])\n  [None]\n  >>> filterEmptyList([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyList = values => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyString(\"\")\n  \"\"\n  >>> filterEmptyString(\"abc\")\n  \"abc\"\n  >>> filterEmptyString(\"abc123\")\n  \"abc123\"\n  */\nconst filterEmptyString = values => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([None])\n  [None]\n  >>> filterEmptyList([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyList = values => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty dict\n  >>> filterEmptyDict({})\n  {}\n  >>> filterEmptyDict({'a': 1})\n  {'a': 1}\n  >>> filterEmptyDict({'a': 1, b: 2})\n  {'a': 1, b: 2} # b will be ignored\n  */\nconst filterEmptyDict = values => {\n  return values.filter(value => Object.keys(value).length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([None])\n  [None]\n  >>> filterEmptyList([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyList = values => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty string\n  >>> filterEmptyString(\"\")\n  \"\"\n  >>> filterEmptyString(\"abc\")\n  \"abc\"\n  >>> filterEmptyString(\"abc123\")\n  \"abc123\"\n  */\nconst filterEmptyString = values => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([None])\n  [None]\n  >>> filterEmptyList([None, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWith('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWith('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWith = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWith('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWith('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix.toLowerCase()\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix.toLowerCase().toUpperCase()\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCaseIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCaseIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix.toLowerCase().toUpperCase()\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix).toLowerCase() === suffix.toLowerCase().toUpperCase()\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnore", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigDivisor(15)\n * 5\n */\nconst bigModulo = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigModulo(15)\n * 5\n */\nconst bigPowerOfTwo = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfTwo(15)\n * 5\n */\nconst bigPowerOfThree = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfThree(15)\n * 5\n */\nconst bigPowerOfFour = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfFour(15)\n * 5\n */\nconst bigPowerOfFive = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfFive(15)\n * 5\n */\nconst bigPowerOfSix = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfSix(15)\n * 5\n */\nconst bigPowerOfSeven = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfSeven(15)\n * 5\n */\nconst bigPowerOfEight = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfEight(15)\n * 5\n */\nconst bigPowerOfNine = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfNine(15)\n * 5\n */\nconst bigPowerOfTen = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfTen(15)\n * 5\n */\nconst bigPowerOfEleven = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfEleven(15)\n * 5\n */\nconst bigPowerOfTwelve = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfTwelve(15)\n * 5\n */\nconst bigPowerOfThirteen = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfThirteen(15)\n * 5\n */\nconst bigPowerOfFourteen = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfFourteen(15)\n * 5\n */\nconst bigPowerOfFifteen = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfFifteen(15)\n * 5\n */\nconst bigPowerOfSixteen = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfSixteen(15)\n * 5\n */\nconst bigPowerOfSeventeen = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfSeventeen(15)\n * 5\n */\nconst bigPowerOfEighteen = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> bigPowerOfEighteen(15)\n * 5\n */\nconst bigPowerOfNineteen = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    result += n % i;\n    if (result === 0) break;\n    i += 2;\n  }\n  return result;\n};\n\n/**\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (n > 0) {\n    if (n % i === 0) {\n      factors.push(factor);\n      n = n / i;\n    } else {\n      factor = 1;\n      ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const seen = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debug = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLog = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContext = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContext = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContext = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContext = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContext = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgs = (functionToWrap,...args) => {\n  const log = functionToWrap.bind(null,...args);\n  log.log = functionToWrap;\n  return log;\n};\n\n/**\n * A simple wrapper around a function to make it easier to test and debug\n * a function.\n */\nconst debugLogWithArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndContextAndArgsAndArgs = (functionToWrap,...arg", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  return string.toLowerCase().replace(/([a-z])([A-Z])/g, '$1 $2').toUpperCase();\n};\n\n/**\n * Given a string, return the first letter of the string capitalized.\n * If the string starts with a capital letter, return the first letter capitalized.\n * If the string starts with a lowercase letter, return the first letter lowercased.\n * If the string starts with a number, return the first letter capitalized.\n * If the string starts with a symbol, return the first letter capitalized.\n * If the string starts with a punctuation character, return the first letter capitalized.\n * If the string starts with a space, return the first letter capitalized.\n * If the string starts with a non-alphabetic character, return the first letter capitalized.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic character, return the first letter lowercased.\n * If the string starts with a non-alphabetic charact", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr) => acc + (curr || ''))\n}\n\n/* Convert string to number\n  >>> number('123')\n  123\n  >>> number('123.456')\n  123.456\n  >>> number('123.456.789')\n  123.456.789\n  >>> number('123.456.789.123')\n  123.456.789.123\n  >>> number('123.456.789.123.456')\n  123.456.789.123.456\n  >>> number('123.456.789.123.456.789')\n  123.456.789.123.456.789\n  >>> number('123.456.789.123.456.789.123')\n  123.456.789.123.456.789.123\n  >>> number('123.456.789.123.456.789.123.456')\n  123.456.789.123.456.789.123.456\n  >>> number('123.456.789.123.456.789.123.456.789')\n  123.456.789.123.456.789.123.456.789\n  >>> number('123.456.789.123.456.789.123.456.789.123')\n  123.456.789.123.456.789.123.456.789.123\n  >>> number('123.456.789.123.456.789.123.456.789.123.456')\n  123.456.789.123.456.789.123.456.789.123.456\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789')\n  123.456.789.123.456.789.123.456.789.123.456.789\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123')\n  123.456.789.123.456.789.123.456.789.123.456.789.123\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123')\n  123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456\n  >>> number('123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123.456.789.123')\n  123.456.789.123.456.7", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for the ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixNot([], 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffixNot([], 'a')\n  []\n  >>> filterBySuffixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterBySuffixNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNot = (strings, prefix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixAndSuffix([], 'a', 'b', 'c')\n  []\n  >>> filterByPrefixAndSuffixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b', 'c')\n  ['array', 'cde']\n  */\nconst filterByPrefixAndSuffixAndSuffix = (strings, prefix, suffix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix) && string.startsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndSuffixNot = (strings, prefix, suffix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) && string.endsWith(suffix) && string.startsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixAndSuffixNot([], 'a', 'b', 'c')\n  []\n  >>> filterByPrefixAndSuffixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndSuffixNotNot = (strings, prefix, suffix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix) && string.startsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixAndSuffixAndSuffixNot([], 'a', 'b', 'c')\n  []\n  >>> filterByPrefixAndSuffixAndSuffixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndSuffixAndSuffixNotNot = (strings, prefix, suffix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix) && string.startsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixAndSuffixAndSuffixAndSuffixNot([], 'a', 'b', 'c')\n  []\n  >>> filterByPrefixAndSuffixAndSuffixAndSuffixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndSuffixAndSuffixAndSuffixNotNot = (strings, prefix, suffix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix) && string.startsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixNotNotNot = (strings, prefix, suffix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix) && string.startsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance <= 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  >>> belowZero", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst catchNegative = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList2 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList3 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList4 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList5 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList6 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList7 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList8 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList9 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList10 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList11 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList12 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList13 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList14 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList15 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList16 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList17 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList18 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList19 = (l) => {\n  return l.filter((n) => n!== 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> catchNegative([-1, 2, -4, 5, 6])\n  []\n  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst catchNegativeList20 = (l) => {\n  return l.filter((", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, or 31, and false otherwise.\n  >>> isDivisibleBy(6)\n  true\n  >>> isDivisibleBy(10)\n  false\n  >>> isDivisibleBy(11)\n  false\n  >>> isDivisibleBy(13)\n  false\n  >>> isDivisibleBy(17)\n  false\n  >>> isDivisibleBy(19)\n  false\n  >>> isDivisibleBy(23)\n  false\n  >>> isDivisibleBy(29)\n  false\n  >>> isDivisibleBy(31)\n  true\n  >>> isDivisibleBy(32)\n  true\n  >>> isDivisibleBy(33)\n  true\n  >>> isDivisibleBy(34)\n  true\n  >>> isDivisibleBy(35)\n  true\n  >>> isDivisibleBy(36)\n  true\n  >>> isDivisibleBy(37)\n  true\n  >>> isDivisibleBy(38)\n  true\n  >>> isDivisibleBy(39)\n  true\n  >>> isDivisibleBy(40)\n  true\n  >>> isDivisibleBy(41)\n  true\n  >>> isDivisibleBy(42)\n  true\n  >>> isDivisibleBy(43)\n  true\n  >>> isDivisibleBy(44)\n  true\n  >>> isDivisibleBy(45)\n  true\n  >>> isDivisibleBy(46)\n  true\n  >>> isDivisibleBy(47)\n  true\n  >>> isDivisibleBy(48)\n  true\n  >>> isDivisibleBy(49)\n  true\n  >>> isDivisibleBy(50)\n  true\n  >>> isDivisibleBy(51)\n  true\n  >>> isDivisibleBy(52)\n  true\n  >>> isDivisibleBy(53)\n  true\n  >>> isDivisibleBy(54)\n  true\n  >>> isDivisibleBy(55)\n  true\n  >>> isDivisibleBy(56)\n  true\n  >>> isDivisibleBy(57)\n  true\n  >>> isDivisibleBy(58)\n  true\n  >>> isDivisibleBy(59)\n  true\n  >>> isDivisibleBy(60)\n  true\n  >>> isDivisibleBy(61)\n  true\n  >>> isDivisibleBy(62)\n  true\n  >>> isDivisibleBy(63)\n  true\n  >>> isDivisibleBy(64)\n  true\n  >>> isDivisibleBy(65)\n  true\n  >>> isDivisibleBy(66)\n  true\n  >>> isDivisibleBy(67)\n  true\n  >>> isDivisibleBy(68)\n  true\n  >>> isDivisibleBy(69)\n  true\n  >>> isDivisibleBy(70)\n  true\n  >>> isDivisibleBy(71)\n  true\n  >>> isDivisibleBy(72)\n  true\n  >>> isDivisibleBy(73)\n  true\n  >>> isDivisibleBy(74)\n  true\n  >>> isDivisibleBy(75)\n  true\n  >>> isDivisibleBy(76)\n  true\n  >>> isDivisibleBy(77)\n  true\n  >>> isDivisibleBy(78)\n  true\n  >>> isDivisibleBy(79)\n  true\n  >>> isDivisibleBy(80)\n  true\n  >>> isDivisibleBy(81)\n  true\n  >>> isDivisibleBy(82)\n  true\n  >>> isDivisibleBy(83)\n  true\n  >>> isDivisibleBy(84)\n  true\n  >>> isDivisibleBy(85)\n  true\n  >>> isDivisibleBy(86)\n  true\n  >>> isDivisibleBy(87)\n  true\n  >>> isDivisibleBy(88)\n  true\n  >>> isDivisibleBy(89)\n  true\n  >>> isDivisibleBy(90)\n  true\n  >>> isDivisibleBy(91)\n  true\n  >>> isDivisibleBy(92)\n  true\n  >>> isDivisibleBy(93)\n  true\n  >>> isDivisibleBy(94)\n  true\n  >>> isDivisibleBy(95)\n  true\n  >>> isDivisibleBy(96)\n  true\n  >>> isDivisibleBy(97)\n  true\n  >>> isDivisibleBy(98)\n  true\n  >>> isDivisibleBy(99)\n  true\n  >>> isDivisibleBy(100)\n  true\n  >>> isDivisibleBy(101)\n  true\n  >>> isDivisibleBy(102)\n  true\n  >>> isDivisibleBy(103)\n  true\n  >>> isDivisibleBy(104)\n  true\n  >>> isDivisibleBy(105)\n  true\n  >>> isDivisibleBy(106)\n  true\n  >>> isDivisibleBy(107)\n  true\n  >>> isDivisibleBy(108)\n  true\n  >>> isDivisibleBy(109)\n  true\n  >>> isDivisibleBy(110)\n  true\n  >>> isDivisibleBy(111)\n  true\n  >>> isDivisibleBy(112)\n  true\n  >>> isDivisibleBy(113)\n  true\n  >>> isDivisibleBy(114)\n  true\n  >>> isDivisibleBy(115)\n  true\n  >>> isDivisibleBy(116)\n  true\n  >>> isDivisibleBy(117)\n  true\n  >>> isDivisibleBy(118)\n  true\n  >>> isDivisibleBy(119)\n  true\n  >>> isDivisibleBy(120)\n  true\n  >>> isDivisibleBy(121)\n  true\n  >>> isDivisibleBy(122)\n  true\n  >>> isDivisibleBy(123)\n  true\n  >>> isDivisibleBy(124)\n  true\n  >>> isDivisibleBy(125)\n  true\n  >>> isDivisibleBy(126)\n  true\n  >>> isDivisibleBy(127)\n  true\n  >>> isDivisibleBy(128)\n  true\n  >>> isDivisibleBy(129)\n  true\n  >>> isDivisibleBy(130)\n  true\n  >>> isDivisibleBy(131)\n  true\n  >>> isDivisibleBy(132)\n  true\n  >>> isDivisibleBy(133)\n  true\n  >>> isDivisibleBy(134)\n  true\n  >>> isDivisibleBy(135)\n  true\n  >>> isDivisibleBy(136)\n  true\n  >>> isDivisibleBy(137)\n  true\n  >>> isDivisibleBy(138)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero4 = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero5 = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero6 = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[index];\n  });\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l2.length) {\n      if (l[j] % 3 === 0) {\n        if (l[j] < l[j + 1]) {\n          l2.splice(j++, 1);\n        } else {\n          l2.splice(j++, 0, l[j]);\n        }\n      } else {\n        if (l[j] > l[j + 1]) {\n          l2.splice(j++, 1);\n        } else {\n          l2.splice(j++, 0, l[j]);\n        }\n      }\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*\n  Given a list l, return a new list l' such that l' is identical to l except for its first and last elements,\n  and l' has its first and last elements sorted according to their values.\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sortFirstLast([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "<|endoftext|>/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res;\n};\n\n/*Return sorted elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst aloneSortedSortedSortedSortedSortedSortedSorted = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      res.push(l[i]);\n    } else {\n      break;\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Return sorted elements in a list\n  >>> aloneSortedSortedSortedSortedSortedSortedSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst al", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n  });\n  return max;\n};\n\n/**\n * Return minimum element in the list.\n  >>> soapElement([1, 2, 3])\n  1\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst soapElement = (l) => {\n  let min = 0;\n  l.forEach((e) => {\n    if (e < min) {\n      min = e;\n    }\n  });\n  return min;\n};\n\n/**\n * Return sum of elements in the list.\n  >>> soapElement([1, 2, 3])\n  6\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst soapElement = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum;\n};\n\n/**\n * Return average element in the list.\n  >>> soapElement([1, 2, 3])\n  1.5\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.666666666666666\n  */\nconst soapElement = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  return sum / l.length;\n};\n\n/**\n * Return standard deviation element in the list.\n  >>> soapElement([1, 2, 3])\n  1.4142135623730951\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst soapElement = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += Math.pow(e, 2);\n  });\n  return Math.sqrt(sum / l.length);\n};\n\n/**\n * Return variance element in the list.\n  >>> soapElement([1, 2, 3])\n  1.4142135623730951\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst soapElement = (l) => {\n  let sum = 0;\n  l.forEach((e) => {\n    sum += Math.pow(e, 2);\n  });\n  return sum / l.length;\n};\n\n/**\n * Return median element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst soapElement = (l) => {\n  let median = l.length / 2;\n  let sum = 0;\n  l.forEach((e) => {\n    sum += e;\n  });\n  if (sum % 2 === 0) {\n    return median;\n  }\n  return sum / 2;\n};\n\n/**\n * Return mode element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst soapElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  let sum = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    sum += e;\n  });\n  if (sum % 2 === 0) {\n    mode = max;\n  }\n  return mode;\n};\n\n/**\n * Return mode element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst soapElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  let sum = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    sum += e;\n  });\n  if (sum % 2 === 0) {\n    mode = max;\n  }\n  return mode;\n};\n\n/**\n * Return mode element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst soapElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  let sum = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    sum += e;\n  });\n  if (sum % 2 === 0) {\n    mode = max;\n  }\n  return mode;\n};\n\n/**\n * Return mode element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst soapElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  let sum = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    sum += e;\n  });\n  if (sum % 2 === 0) {\n    mode = max;\n  }\n  return mode;\n};\n\n/**\n * Return mode element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst soapElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  let sum = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    sum += e;\n  });\n  if (sum % 2 === 0) {\n    mode = max;\n  }\n  return mode;\n};\n\n/**\n * Return mode element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst soapElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  let sum = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    sum += e;\n  });\n  if (sum % 2 === 0) {\n    mode = max;\n  }\n  return mode;\n};\n\n/**\n * Return mode element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst soapElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  let sum = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (e < min) {\n      min = e;\n    }\n    sum += e;\n  });\n  if (sum % 2 === 0) {\n    mode = max;\n  }\n  return mode;\n};\n\n/**\n * Return mode element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst soapElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  let sum = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (n % i === 0 && i % 11 === 0 || n % i === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome.\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(456)\n  false\n  */\nconst isPalindrome = (n) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString();\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 3)\n  true\n  >>> isPalindromeOfLength(3, 5)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 5)\n  true\n  >>> isPalindromeOfLength(3, 6)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 6)\n  true\n  >>> isPalindromeOfLength(3, 7)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 7)\n  true\n  >>> isPalindromeOfLength(3, 8)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 8)\n  true\n  >>> isPalindromeOfLength(3, 9)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 9)\n  true\n  >>> isPalindromeOfLength(3, 10)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 10)\n  true\n  >>> isPalindromeOfLength(3, 11)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 11)\n  true\n  >>> isPalindromeOfLength(3, 12)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 12)\n  true\n  >>> isPalindromeOfLength(3, 13)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 13)\n  true\n  >>> isPalindromeOfLength(3, 14)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 14)\n  true\n  >>> isPalindromeOfLength(3, 15)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {\n  let reversedString = '';\n  for (let i = n.toString().length - 1; i >= 0; i--) {\n    reversedString += n.toString().charAt(i);\n  }\n  return reversedString === n.toString().substr(0, m);\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a palindrome of length n.\n  >>> isPalindromeOfLength(3, 15)\n  true\n  >>> isPalindromeOfLength(3, 16)\n  false\n  */\nconst isPalindromeOfLength = (n, m) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 1]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 1]\n  >>> sortEvenOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 1, 2, 1]\n  */\nconst sortEvenOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 1, 1]\n  >>> sortEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 1, 2, 1, 1]\n  */\nconst sortEvenOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 1, 1, 1]\n  >>> sortEvenOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 1, 2, 1, 1, 1]\n  */\nconst sortEvenOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 1, 1, 1]\n  >>> sortEvenOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 1, 2, 1, 1, 1]\n  */\nconst sortEvenOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 1, 1, 1]\n  >>> sortEvenOddOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 1, 2, 1, 1, 1]\n  */\nconst sortEvenOddOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOddOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 1, 1, 1]\n  >>> sortEvenOddOddOddOddOddOddOddOddOdd([5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "<|endoftext|>/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  if (n <= 1) return n;\n  return premierFib(n-1) + premierFib(n-2);\n};\n\n/*\n  fibonacci returns n-th number that is a Fibonacci number and it's also prime.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  1\n  >>> fibonacci(4)\n  1\n  >>> fibonacci(5)\n  1\n  >>> fibonacci(6)\n  1\n  >>> fibonacci(7)\n  1\n  >>> fibonacci(8)\n  1\n  >>> fibonacci(9)\n  1\n  >>> fibonacci(10)\n  1\n  >>> fibonacci(11)\n  1\n  >>> fibonacci(12)\n  1\n  >>> fibonacci(13)\n  1\n  >>> fibonacci(14)\n  1\n  >>> fibonacci(15)\n  1\n  >>> fibonacci(16)\n  1\n  >>> fibonacci(17)\n  1\n  >>> fibonacci(18)\n  1\n  >>> fibonacci(19)\n  1\n  >>> fibonacci(20)\n  1\n  >>> fibonacci(21)\n  1\n  >>> fibonacci(22)\n  1\n  >>> fibonacci(23)\n  1\n  >>> fibonacci(24)\n  1\n  >>> fibonacci(25)\n  1\n  >>> fibonacci(26)\n  1\n  >>> fibonacci(27)\n  1\n  >>> fibonacci(28)\n  1\n  >>> fibonacci(29)\n  1\n  >>> fibonacci(30)\n  1\n  >>> fibonacci(31)\n  1\n  >>> fibonacci(32)\n  1\n  >>> fibonacci(33)\n  1\n  >>> fibonacci(34)\n  1\n  >>> fibonacci(35)\n  1\n  >>> fibonacci(36)\n  1\n  >>> fibonacci(37)\n  1\n  >>> fibonacci(38)\n  1\n  >>> fibonacci(39)\n  1\n  >>> fibonacci(40)\n  1\n  >>> fibonacci(41)\n  1\n  >>> fibonacci(42)\n  1\n  >>> fibonacci(43)\n  1\n  >>> fibonacci(44)\n  1\n  >>> fibonacci(45)\n  1\n  >>> fibonacci(46)\n  1\n  >>> fibonacci(47)\n  1\n  >>> fibonacci(48)\n  1\n  >>> fibonacci(49)\n  1\n  >>> fibonacci(50)\n  1\n  >>> fibonacci(51)\n  1\n  >>> fibonacci(52)\n  1\n  >>> fibonacci(53)\n  1\n  >>> fibonacci(54)\n  1\n  >>> fibonacci(55)\n  1\n  >>> fibonacci(56)\n  1\n  >>> fibonacci(57)\n  1\n  >>> fibonacci(58)\n  1\n  >>> fibonacci(59)\n  1\n  >>> fibonacci(60)\n  1\n  >>> fibonacci(61)\n  1\n  >>> fibonacci(62)\n  1\n  >>> fibonacci(63)\n  1\n  >>> fibonacci(64)\n  1\n  >>> fibonacci(65)\n  1\n  >>> fibonacci(66)\n  1\n  >>> fibonacci(67)\n  1\n  >>> fibonacci(68)\n  1\n  >>> fibonacci(69)\n  1\n  >>> fibonacci(70)\n  1\n  >>> fibonacci(71)\n  1\n  >>> fibonacci(72)\n  1\n  >>> fibonacci(73)\n  1\n  >>> fibonacci(74)\n  1\n  >>> fibonacci(75)\n  1\n  >>> fibonacci(76)\n  1\n  >>> fibonacci(77)\n  1\n  >>> fibonacci(78)\n  1\n  >>> fibonacci(79)\n  1\n  >>> fibonacci(80)\n  1\n  >>> fibonacci(81)\n  1\n  >>> fibonacci(82)\n  1\n  >>> fibonacci(83)\n  1\n  >>> fibonacci(84)\n  1\n  >>> fibonacci(85)\n  1\n  >>> fibonacci(86)\n  1\n  >>> fibonacci(87)\n  1\n  >>> fibonacci(88)\n  1\n  >>> fibonacci(89)\n  1\n  >>> fibonacci(90)\n  1\n  >>> fibonacci(91)\n  1\n  >>> fibonacci(92)\n  1\n  >>> fibonacci(93)\n  1\n  >>> fibonacci(94)\n  1\n  >>> fibonacci(95)\n  1\n  >>> fibonacci(96)\n  1\n  >>> fibonacci(97)\n  1\n  >>> fibonacci(98)\n  1\n  >>> fibonacci(99)\n  1\n  >>> fibonacci(100)\n  1\n  >>> fibonacci(101)\n  1\n  >>> fibonacci(102)\n  1\n  >>> fibonacci(103)\n  1\n  >>> fibonacci(104)\n  1\n  >>> fibonacci(105)\n  1\n  >>> fibonacci(106)\n  1\n  >>> fibonacci(107)\n  1\n  >>> fibonacci(108)\n  1\n  >>> fibonacci(109)\n  1\n  >>> fibonacci(110)\n  1\n  >>> fibonacci(111)\n  1\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSE = average | x - x_mean |^2\n  >>> entailMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst entailMeanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(average | x - x_mean |)\n  >>> entailRootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  2.82842712474619053\n  */\nconst entailRootMeanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailStandardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a given list of input numbers, calculate Variance (standard deviation) around\n  the mean of this dataset.\n  Variance is the square root of the standard deviation between each element\n  and a centerpoint (mean in this case):\n  V = sqrt(average | x - x_mean |)\n  >>> entailVariance([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailVariance = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailStandardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailStandardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailStandardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailStandardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailStandardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailStandardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation around the mean\n  of this dataset.\n  Standard Deviation is the square root of the mean squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |)\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst entailStandardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "<|endoftext|>/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  let total = 0;\n  for (let i = 0; i < l.length; i++) {\n    total += l[i];\n    if (total === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  A recursive implementation of binary search to find the index of the\n  first element greater than a given number in the list.\n\n  >>> binarySearch([2, 7, 11, 15], 15)\n  1\n  >>> binarySearch([2, 7, 11, 15], 7)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 11)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 2)\n  0\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  >>> binarySearch([2, 7, 11, 15], 15)\n  -1\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    const car1 = cars[i];\n    const car2 = cars[(i + 1) % n];\n    if (car1.speed > car2.speed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car and a car, return the distance between them.\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCars = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/*\n  Given a car and a car, return the distance between them in meters.\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsMeters = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in kilometers.\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsKilometers = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in feet\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsFeet = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in inches.\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsInches = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in kilometers.\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsKilometersInches = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in feet\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsInchesInches = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in inches.\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsInchesFeet = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in kilometers.\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsInchesFeet = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in feet\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsInchesKilometers = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in kilometers.\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsInchesKilometers = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in feet\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsFeetKilometers = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in kilometers.\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsFeetKilometersInches = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in feet\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsFeetKilometersInches = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in feet\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsFeetKilometersFeet = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in kilometers.\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsFeetKilometersFeet = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between them in feet\n  If the distance is negative, return 0.\n  */\nconst distanceBetweenCarsFeetKilometersFeetKilometers = (car1, car2) => {\n  const dx = car1.x - car2.x;\n  const dy = car1.y - car2.y;\n  return dx * dx + dy * dy;\n};\n\n/*\n  Given a car and a car, return the distance between ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i--) {\n    res[i] = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "<|endoftext|>/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (l[i] === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  copulateIntersectToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateIntersectToZero([1, 3, 5, 0])\n  false\n  >>> copulateIntersectToZero([1, 3, -2, 1])\n  false\n  >>> copulateIntersectToZero([1, 2, 3, 7])\n  false\n  >>> copulateIntersectToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateIntersectToZero([1])\n  false\n  */\nconst copulateIntersectToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (l[i] === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  copulateDifferenceToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateDifferenceToZero([1, 3, 5, 0])\n  false\n  >>> copulateDifferenceToZero([1, 3, -2, 1])\n  false\n  >>> copulateDifferenceToZero([1, 2, 3, 7])\n  false\n  >>> copulateDifferenceToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateDifferenceToZero([1])\n  false\n  */\nconst copulateDifferenceToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (l[i] === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  copulateSymmetricDifferenceToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateSymmetricDifferenceToZero([1, 3, 5, 0])\n  false\n  >>> copulateSymmetricDifferenceToZero([1, 3, -2, 1])\n  false\n  >>> copulateSymmetricDifferenceToZero([1, 2, 3, 7])\n  false\n  >>> copulateSymmetricDifferenceToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateSymmetricDifferenceToZero([1])\n  false\n  */\nconst copulateSymmetricDifferenceToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (l[i] === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  copulateDifferenceToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateDifferenceToZero([1, 3, 5, 0])\n  false\n  >>> copulateDifferenceToZero([1, 3, -2, 1])\n  false\n  >>> copulateDifferenceToZero([1, 2, 3, 7])\n  false\n  >>> copulateDifferenceToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateDifferenceToZero([1])\n  false\n  */\nconst copulateDifferenceToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (l[i] === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  copulateSymmetricDifferenceToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateSymmetricDifferenceToZero([1, 3, 5, 0])\n  false\n  >>> copulateSymmetricDifferenceToZero([1, 3, -2, 1])\n  false\n  >>> copulateSymmetricDifferenceToZero([1, 2, 3, 7])\n  false\n  >>> copulateSymmetricDifferenceToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateSymmetricDifferenceToZero([1])\n  false\n  */\nconst copulateSymmetricDifferenceToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (l[i] === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  copulateDifferenceToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateDifferenceToZero([1, 3, 5, 0])\n  false\n  >>> copulateDifferenceToZero([1, 3, -2, 1])\n  false\n  >>> copulateDifferenceToZero([1, 2, 3, 7])\n  false\n  >>> copulateDifferenceToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateDifferenceToZero([1])\n  false\n  */\nconst copulateDifferenceToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (l[i] === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  copulateSymmetricDifferenceToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateSymmetricDifferenceToZero([1, 3, 5, 0])\n  false\n  >>> copulateSymmetricDifferenceToZero([1, 3, -2, 1])\n  false\n  >>> copulateSymmetricDifferenceToZero([1, 2, 3, 7])\n  false\n  >>> copulateSymmetricDifferenceToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateSymmetricDifferenceToZero([1])\n  false\n  */\nconst copulateSymmetricDifferenceToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (l[i] === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/**\n  copulateDifferenceToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateDifferenceToZero([1, 3, 5, 0])\n  false\n  >>> copulateDifferenceToZero([1, 3, -2, 1])\n  false\n  >>> copulateDifferenceToZero([1, 2, 3, 7])\n  false\n  >>> copulateDifferenceToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateDifferenceToZero([1])\n  false\n  */\nconst copulateDifferenceToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (l[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  return x.toString(base);\n};\n\n/**\n * Convert a string to a number.\n *\n * If the string does not contain a number, the function returns NaN.\n *\n * If the string contains a number, the function returns its number.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the string contains a letter, the function returns its letter.\n *\n * If the ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(3, 5)\n  9\n  */\nconst triangulumArea = (b, w) => {\n  return b * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(6, 3)\n  15\n  */\nconst triangulumArea = (c, w) => {\n  return c * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(7, 3)\n  25\n  */\nconst triangulumArea = (d, w) => {\n  return d * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(8, 3)\n  35\n  */\nconst triangulumArea = (e, w) => {\n  return e * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(9, 3)\n  45\n  */\nconst triangulumArea = (f, w) => {\n  return f * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(10, 3)\n  55\n  */\nconst triangulumArea = (g, w) => {\n  return g * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(11, 3)\n  65\n  */\nconst triangulumArea = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(12, 3)\n  75\n  */\nconst triangulumArea = (i, w) => {\n  return i * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(13, 3)\n  85\n  */\nconst triangulumArea = (j, w) => {\n  return j * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(14, 3)\n  95\n  */\nconst triangulumArea = (k, w) => {\n  return k * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(15, 3)\n  105\n  */\nconst triangulumArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(16, 3)\n  115\n  */\nconst triangulumArea = (m, w) => {\n  return m * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(17, 3)\n  125\n  */\nconst triangulumArea = (n, w) => {\n  return n * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(18, 3)\n  135\n  */\nconst triangulumArea = (o, w) => {\n  return o * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(19, 3)\n  145\n  */\nconst triangulumArea = (p, w) => {\n  return p * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(20, 3)\n  155\n  */\nconst triangulumArea = (q, w) => {\n  return q * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(21, 3)\n  165\n  */\nconst triangulumArea = (r, w) => {\n  return r * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(22, 3)\n  175\n  */\nconst triangulumArea = (s, w) => {\n  return s * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(23, 3)\n  185\n  */\nconst triangulumArea = (t, w) => {\n  return t * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(24, 3)\n  195\n  */\nconst triangulumArea = (u, w) => {\n  return u * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(25, 3)\n  205\n  */\nconst triangulumArea = (v, w) => {\n  return v * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(26, 3)\n  215\n  */\nconst triangulumArea = (w, w) => {\n  return w * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(27, 3)\n  225\n  */\nconst triangulumArea = (x, w) => {\n  return x * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(28, 3)\n  235\n  */\nconst triangulumArea = (y, w) => {\n  return y * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(29, 3)\n  245\n  */\nconst triangulumArea = (z, w) => {\n  return z * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(30, 3)\n  255\n  */\nconst triangulumArea = (a, w) => {\n  return a * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(31, 3)\n  265\n  */\nconst triangulumArea = (b, w) => {\n  return b * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(32, 3)\n  275\n  */\nconst triangulumArea = (c, w) => {\n  return c * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(33, 3)\n  285\n  */\nconst triangulumArea = (d, w) => {\n  return d * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(34, 3)\n  295\n  */\nconst triangulumArea = (e, w) => {\n  return e * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(35, 3)\n  315\n  */\nconst triangulumArea = (f, w) => {\n  return f * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(36, 3)\n  325\n  */\nconst triangulumArea = (g, w) => {\n  return g * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangulumArea(37, 3)\n  335\n  */\nconst triangulum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence whose first and second elements are 0 and 1.\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  1\n  >>> fibonacci(4)\n  1\n  >>> fibonacci(5)\n  2\n  >>> fibonacci(6)\n  3\n  >>> fibonacci(7)\n  5\n  >>> fibonacci(8)\n  8\n  >>> fibonacci(9)\n  13\n  >>> fibonacci(10)\n  21\n  >>> fibonacci(11)\n  34\n  >>> fibonacci(12)\n  55\n  >>> fibonacci(13)\n  89\n  >>> fibonacci(14)\n  144\n  >>> fibonacci(15)\n  233\n  >>> fibonacci(16)\n  377\n  >>> fibonacci(17)\n  610\n  >>> fibonacci(18)\n  987\n  >>> fibonacci(19)\n  1443\n  >>> fibonacci(20)\n  1903\n  >>> fibonacci(21)\n  2957\n  >>> fibonacci(22)\n  4181\n  >>> fibonacci(23)\n  6765\n  >>> fibonacci(24)\n  10946\n  >>> fibonacci(25)\n  196418\n  >>> fibonacci(26)\n  432946\n  >>> fibonacci(27)\n  676531\n  >>> fibonacci(28)\n  1094619\n  >>> fibonacci(29)\n  1964189\n  >>> fibonacci(30)\n  43294629\n  >>> fibonacci(31)\n  67653120\n  >>> fibonacci(32)\n  109461920\n  >>> fibonacci(33)\n  196418920\n  >>> fibonacci(34)\n  4329462920\n  >>> fibonacci(35)\n  6765312040\n  >>> fibonacci(36)\n  10946192040\n  >>> fibonacci(37)\n  19641892040\n  >>> fibonacci(38)\n  432946292040\n  >>> fibonacci(39)\n  67653120480\n  >>> fibonacci(40)\n  109461920480\n  >>> fibonacci(41)\n  196418920480\n  >>> fibonacci(42)\n  4329462920480\n  >>> fibonacci(43)\n  676531204900\n  >>> fibonacci(44)\n  1094619204900\n  >>> fibonacci(45)\n  1964189204900\n  >>> fibonacci(46)\n  43294629204900\n  >>> fibonacci(47)\n  676531204900\n  >>> fibonacci(48)\n  1094619204900\n  >>> fibonacci(49)\n  1964189204900\n  >>> fibonacci(50)\n  43294629204900\n  >>> fibonacci(51)\n  676531204900\n  >>> fibonacci(52)\n  1094619204900\n  >>> fibonacci(53)\n  1964189204900\n  >>> fibonacci(54)\n  43294629204900\n  >>> fibonacci(55)\n  676531204900\n  >>> fibonacci(56)\n  1094619204900\n  >>> fibonacci(57)\n  1964189204900\n  >>> fibonacci(58)\n  43294629204900\n  >>> fibonacci(59)\n  676531204900\n  >>> fibonacci(60)\n  1094619204900\n  >>> fibonacci(61)\n  1964189204900\n  >>> fibonacci(62)\n  43294629204900\n  >>> fibonacci(63)\n  676531204900\n  >>> fibonacci(64)\n  1094619204900\n  >>> fibonacci(65)\n  1964189204900\n  >>> fibonacci(66)\n  43294629204900\n  >>> fibonacci(67)\n  676531204900\n  >>> fibonacci(68)\n  1094619204900\n  >>> fibonacci(69)\n  1964189204900\n  >>> fibonacci(70)\n  43294629204900\n  >>> fibonacci(71)\n  676531204900\n  >>> fibonacci(72)\n  1094619204900\n  >>> fibonacci(73)\n  1964189204900\n  >>> fibonacci(74)\n  43294629204900\n  >>> fibonacci(75)\n  676531204900\n  >>> fibonacci(76)\n  1094619204900\n  >>> fibonacci(77)\n  1964189204900\n  >>> fibonacci(78)\n  43294629204900\n  >>> fibonacci(79)\n  676531204900\n  >>> fibonacci(80)\n  1094619204900\n  >>> fibonacci(81)\n  1964189204900\n  >>> fibonacci(82)\n  43294629204900\n  >>> fibonacci(83)\n  676531204900\n  >>> fibonacci(84)\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = median(l.slice(0, mid));\n  let right = median(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let mid = Math.floor(n/2);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let reversedText = text.reverse();\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  let reversedText = text.reverse();\n  return reversedText.length === length && reversedText.includes(' ');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndSpace('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndSpace('aba', 0)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpace = (text, length) => {\n  let reversedText = text.reverse();\n  return reversedText.length === length && reversedText.includes(' ') && reversedText.includes(' ');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpace('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpace('aba', 0)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = text.reverse();\n  return reversedText.length === length && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('aba', 0)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = text.reverse();\n  return reversedText.length === length && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('aba', 0)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = text.reverse();\n  return reversedText.length === length && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 0)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = text.reverse();\n  return reversedText.length === length && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 0)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = text.reverse();\n  return reversedText.length === length && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ') && reversedText.includes(' ');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 1)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 0)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n <= 0) return 0;\n  if (p <= 0) return 1;\n  if (p === 1) return n;\n  if (p === 2) return n >> 1;\n  if (p === 3) return (n >> 2) & 1? n : 0;\n  if (p === 4) return (n >> 3) & 1? n : 0;\n  if (p === 5) return (n >> 4) & 1? n : 0;\n  if (p === 6) return (n >> 5) & 1? n : 0;\n  if (p === 7) return (n >> 6) & 1? n : 0;\n  if (p === 8) return (n >> 7) & 1? n : 0;\n  if (p === 9) return (n >> 8) & 1? n : 0;\n  if (p === 10) return (n >> 9) & 1? n : 0;\n  if (p === 11) return (n >> 10) & 1? n : 0;\n  if (p === 12) return (n >> 11) & 1? n : 0;\n  if (p === 13) return (n >> 12) & 1? n : 0;\n  if (p === 14) return (n >> 13) & 1? n : 0;\n  if (p === 15) return (n >> 14) & 1? n : 0;\n  if (p === 16) return (n >> 15) & 1? n : 0;\n  if (p === 17) return (n >> 16) & 1? n : 0;\n  if (p === 18) return (n >> 17) & 1? n : 0;\n  if (p === 19) return (n >> 18) & 1? n : 0;\n  if (p === 20) return (n >> 19) & 1? n : 0;\n  if (p === 21) return (n >> 20) & 1? n : 0;\n  if (p === 22) return (n >> 21) & 1? n : 0;\n  if (p === 23) return (n >> 22) & 1? n : 0;\n  if (p === 24) return (n >> 23) & 1? n : 0;\n  if (p === 25) return (n >> 24) & 1? n : 0;\n  if (p === 26) return (n >> 25) & 1? n : 0;\n  if (p === 27) return (n >> 26) & 1? n : 0;\n  if (p === 28) return (n >> 27) & 1? n : 0;\n  if (p === 29) return (n >> 28) & 1? n : 0;\n  if (p === 30) return (n >> 29) & 1? n : 0;\n  if (p === 31) return (n >> 30) & 1? n : 0;\n  if (p === 32) return (n >> 31) & 1? n : 0;\n  if (p === 33) return (n >> 32) & 1? n : 0;\n  if (p === 34) return (n >> 33) & 1? n : 0;\n  if (p === 35) return (n >> 34) & 1? n : 0;\n  if (p === 36) return (n >> 35) & 1? n : 0;\n  if (p === 37) return (n >> 36) & 1? n : 0;\n  if (p === 38) return (n >> 37) & 1? n : 0;\n  if (p === 39) return (n >> 38) & 1? n : 0;\n  if (p === 40) return (n >> 39) & 1? n : 0;\n  if (p === 41) return (n >> 40) & 1? n : 0;\n  if (p === 42) return (n >> 41) & 1? n : 0;\n  if (p === 43) return (n >> 42) & 1? n : 0;\n  if (p === 44) return (n >> 43) & 1? n : 0;\n  if (p === 45) return (n >> 44) & 1? n : 0;\n  if (p === 46) return (n >> 45) & 1? n : 0;\n  if (p === 47) return (n >> 46) & 1? n : 0;\n  if (p === 48) return (n >> 47) & 1? n : 0;\n  if (p === 49) return (n >> 48) & 1? n : 0;\n  if (p === 50) return (n >> 49) & 1? n : 0;\n  if (p === 51) return (n >> 50) & 1? n : 0;\n  if (p === 52) return (n >> 51) & 1? n : 0;\n  if (p === 53) return (n >> 52) & 1? n : 0;\n  if (p === 54) return (n >> 53) & 1? n : 0;\n  if (p === 55) return (n >> 54) & 1? n : 0;\n  if (p === 56) return (n >> 55) & 1? n : 0;\n  if (p === 57) return (n >> 56) & 1? n : 0;\n  if (p === 58) return (n >> 57) & 1? n : 0;\n  if (p === 59) return (n >> 58) & 1? n : 0;\n  if (p === 60) return (n >> 59) & 1? n : 0;\n  if (p === 61) return (n >> 60) & 1? n : 0;\n  if (p === 62) return (n >> 61) & 1? n : 0;\n  if (p === 63) return (n >> 62) & 1? n : 0;\n  if (p === 64) return (n >> 63) & 1? n : 0;\n  if (p === 65) return (n >> 64) & 1? n : 0;\n  if (p === 66) return (n >> 65) & 1? n : 0;\n  if (p === 67) return (n >> 66) & 1? n : 0;\n  if (p === 68) return (n >> 67) & 1? n : 0;\n  if (p === 69) return (n >> 68) & 1? n : 0;\n  if (p === 70) return (n >> 69) & 1? n : 0;\n  if (p === 71) return (n >> 70) & 1? n : 0;\n  if (p === 72) return (n >> 71) & 1? n : 0;\n  if (p === 73) return (n >> 72) & 1? n : 0;\n  if (p === 74) return (n >> 73) & 1? n : 0;\n  if (p === 75) return (n >> 74) & 1? n : 0;\n  if (p === 76) return (n >> 75) & 1? n : 0;\n  if (p === 77) return (n >> 76) & 1? n : 0;\n  if (p === 78) return (n >> 77) & 1? n : 0;\n  if (p === 79) return (n >> 78) & 1? n : 0;\n  if (p === 80) return (n >> 79) & 1? n : 0;\n  if (p === 81) return (n >> 80) & 1? n : 0;\n  if (p === 82) return (n >> 81) & 1? n : 0;\n  if (p === 83) return (n >> 82) & 1? n : 0;\n  if (p === 84) return (n >> 83) & 1? n : 0;\n  if (p === 85) return (n >> 84) & 1? n : 0;\n  if (p === 86) return (n >> 85) & 1? n : 0;\n  if (p === 87) return (n >> 86) & 1? n : 0;\n  if (p === 88) return (n >> 87) & 1? n : 0;\n  if (p === 89) return (n >> 88) & 1? n : 0;\n  if (p === 90) return (n >> 89) & 1? n : 0;\n  if (p === 91) return (n >> 90) & 1? n : 0;\n  if (p === 92) return (n >> 91) & 1? n : 0;\n  if (p === 93) return (n >> 92) & 1? n : 0;\n  if (p === 94) return (n >> 93) & 1? n : 0;\n  if (p === 95) return (n >> 94) & 1? n : 0;\n  if (p === 96) return (n >> 95) & 1? n : 0;\n  if (p === 97) return (n >> 96) & 1? n : 0;\n  if (p === 98) return (n >> 97) & 1? n : 0;\n  if (p === 99) return (n >> 98) & 1? n : 0;\n  if (p === 100) return (n >> 99) & 1? n : 0;\n  if (p === 101) return (n >> 100) & 1? n : 0;\n  if (p === 102) return (n >> 101) & 1? n : 0;\n  if (p === 103) return (n >> 102) ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === numbers.length - 1) {\n      result.push(numbers[i])\n    } else {\n      result.push(numbers[i] + delimeter)\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbers = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpace = str => {\n  return str.trim().split(/\\s+/).map(Number)\n}\n\n/**\n * Convert an input string to a list of numbers, removing leading and trailing whitespace.\n *\n * >>> stringToNumbers('1 2 3 4 5')\n * [1, 2, 3, 4, 5]\n */\nconst stringToNumbersNoLeadingSpaceNoTrailingSpaceNoLeadingSpaceNoTrailingSpaceNo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode = (s) => {\n  return encodeShift(encodeShift(s)) + decode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s)) + encode(encodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAndDecodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncodeAndEncode", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "<|endoftext|>/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  let rid = \"\";\n  let vowels = \"aeiouAEIOU\";\n  let vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsIndex103 = 0;\n  let vowelsIndex104 = 0;\n  let vowelsIndex105 = 0;\n  let vowelsIndex106 = 0;\n  let vowelsIndex107 = 0;\n  let vowelsIndex108 = 0;\n  let vowelsIndex109 = 0;\n  let vowelsIndex110 = 0;\n  let vowelsIndex111 = 0;\n  let vowelsIndex112 = 0;\n  let vowelsIndex113 = 0;\n  let vowelsIndex114 = 0;\n  let vowelsIndex115 = 0;\n  let vowelsIndex116 = 0;\n  let vowelsIndex117 = 0;\n  let vowelsIndex118 = 0;\n  let vowelsIndex119 = 0;\n  let vowelsIndex120 = 0;\n  let vowelsIndex121 = 0;\n  let vowelsIndex122 = 0;\n  let vowelsIndex123 = 0;\n  let vowelsIndex124 = 0;\n  let vowelsIndex125 = 0;\n  let vowelsIndex126 = 0;\n  let vowelsIndex127 = 0;\n  let vowelsIndex128 = 0;\n  let vowelsIndex129 = 0;\n  let vowelsIndex130 = 0;\n  let vowelsIndex131 = 0;\n  let vowelsIndex132 = 0;\n  let vowelsIndex133 = 0;\n  let vowelsIndex134 = 0;\n  let vowelsIndex135 = 0;\n  let vowelsIndex136 = 0;\n  let vowelsIndex137 = 0;\n  let vowelsIndex138 = 0;\n  let vowelsIndex139 = 0;\n  let vowelsIndex140 = 0;\n  let vowelsIndex141 = 0;\n  let vowelsIndex142 = 0;\n  let vowelsIndex143 = 0;\n  let vowelsIndex144 = 0;\n  let vowelsIndex145 = 0;\n  let vowelsIndex146 = 0;\n  let vowelsIndex147 = 0;\n  let vowelsIndex148 = 0;\n  let vowelsIndex149 = 0;\n  let vowelsIndex150 = 0;\n  let vowelsIndex151 = 0;\n  let vowelsIndex152 = 0;\n  let vowelsIndex153 = 0;\n  let vowelsIndex154 = 0;\n  let vowelsIndex155 = 0;\n  let vowelsIndex156 = 0;\n  let vowelsIndex157 = 0;\n  let vowelsIndex158 = 0;\n  let vowelsIndex159 = 0;\n  let vowelsIndex160 = 0;\n  let vowelsIndex161 = 0;\n  let vowelsIndex162 = 0;\n  let vowelsIndex163 = 0;\n  let vowelsIndex164 = 0;\n  let vowelsIndex165 = 0;\n  let vowelsIndex166 = 0;\n  let vowelsIndex167 = 0;\n  let vowelsIndex168 = 0;\n  let vowelsIndex169 = 0;\n  let vowelsIndex170 = 0;\n  let vowelsIndex171 = 0;\n  let vowelsIndex172 = 0;\n  let vowelsIndex173 = 0;\n  let vowelsIndex174 = 0;\n  let vowelsIndex175 = 0;\n  let vowelsIndex176 = 0;\n  let vowelsIndex177 = 0;\n  let vowelsIndex178 = 0;\n  let vowelsIndex179 = 0;\n  let vowelsIndex180 = 0;\n  let vowelsIndex181 = 0;\n  let vowelsIndex182 = 0;\n  let vowelsIndex183 = 0;\n  let vowelsIndex184 = 0;\n  let vowelsIndex185 = 0;\n  let vowelsIndex186 = 0;\n  let vowelsIndex187 = 0;\n  let vowelsIndex188 = 0;\n  let vowelsIndex189 = 0;\n  let vowelsIndex190 = 0;\n  let vowelsIndex191 = 0;\n  let vowelsIndex192 = 0;\n  let vowelsIndex193 = 0;\n  let vowelsIndex194 = 0;\n  let vowelsIndex195 = 0;\n  let vowelsIndex196 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/**\n  Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorway([1, 2, 4, 10], 100)\n  true\n  >>> aboveDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveDoorway = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/**\n  Return true if all numbers in the list l are equal to t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n === t[i]);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 100)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === -Infinity && y === 0) {\n    return 0\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === -Infinity && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === -Infinity && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === -Infinity && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === -Infinity && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === -Infinity && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === -Infinity && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === -Infinity && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === -Infinity && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return -Infinity\n  }\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === -Infinity && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === -Infinity && y === -Infinity) {\n    return Infinity\n  }\n  if (x === 0 && y === -", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  const s0 = s0.toLowerCase();\n  const s1 = s1.toLowerCase();\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0.length > s1.length) {\n    return s0.length > s1.length;\n  }\n  return s0.length < s1.length;\n};\n\n/*\n  Check if two words have the same length.\n  >>> likeWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeWords('abcd', 'dddddddabc')\n  true\n  >>> likeWords('dddddddabc', 'abcd')\n  true\n  >>> likeWords('eabcd', 'dddddddabc')\n  false\n  >>> likeWords('abcd', 'dddddddabce')\n  false\n  >>> likeWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeWords = (s0, s1) => {\n  const s0 = s0.toLowerCase();\n  const s1 = s1.toLowerCase();\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0.length > s1.length) {\n    return s0.length > s1.length;\n  }\n  return s0.length < s1.length;\n};\n\n/*\n  Check if two words have the same capitalization.\n  >>> likeCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeCaps('abcd', 'dddddddabc')\n  true\n  >>> likeCaps('dddddddabc', 'abcd')\n  true\n  >>> likeCaps('eabcd', 'dddddddabc')\n  false\n  >>> likeCaps('abcd', 'dddddddabce')\n  false\n  >>> likeCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeCaps = (s0, s1) => {\n  const s0 = s0.toLowerCase();\n  const s1 = s1.toLowerCase();\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0.length > s1.length) {\n    return s0.length > s1.length;\n  }\n  return s0.length < s1.length;\n};\n\n/*\n  Check if two words have the same punctuation.\n  >>> likePuncts('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likePuncts('abcd', 'dddddddabc')\n  true\n  >>> likePuncts('dddddddabc', 'abcd')\n  true\n  >>> likePuncts('eabcd', 'dddddddabc')\n  false\n  >>> likePuncts('abcd', 'dddddddabce')\n  false\n  >>> likePuncts('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likePuncts = (s0, s1) => {\n  const s0 = s0.toLowerCase();\n  const s1 = s1.toLowerCase();\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0.length > s1.length) {\n    return s0.length > s1.length;\n  }\n  return s0.length < s1.length;\n};\n\n/*\n  Check if two words have the same punctuation and capitalization.\n  >>> likePunctsAndCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likePunctsAndCaps('abcd', 'dddddddabc')\n  true\n  >>> likePunctsAndCaps('dddddddabc', 'abcd')\n  true\n  >>> likePunctsAndCaps('eabcd', 'dddddddabc')\n  false\n  >>> likePunctsAndCaps('abcd', 'dddddddabce')\n  false\n  >>> likePunctsAndCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likePunctsAndCaps = (s0, s1) => {\n  const s0 = s0.toLowerCase();\n  const s1 = s1.toLowerCase();\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0.length > s1.length) {\n    return s0.length > s1.length;\n  }\n  return s0.length < s1.length;\n};\n\n/*\n  Check if two words have the same punctuation and capitalization.\n  >>> likePunctsAndCapsAndCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likePunctsAndCapsAndCaps('abcd', 'dddddddabc')\n  true\n  >>> likePunctsAndCapsAndCaps('dddddddabc', 'abcd')\n  true\n  >>> likePunctsAndCapsAndCaps('eabcd', 'dddddddabc')\n  false\n  >>> likePunctsAndCapsAndCaps('abcd', 'dddddddabce')\n  false\n  >>> likePunctsAndCapsAndCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likePunctsAndCapsAndCaps = (s0, s1) => {\n  const s0 = s0.toLowerCase();\n  const s1 = s1.toLowerCase();\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0.length > s1.length) {\n    return s0.length > s1.length;\n  }\n  return s0.length < s1.length;\n};\n\n/*\n  Check if two words have the same punctuation and capitalization.\n  >>> likePunctsAndCapsAndCapsAndCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likePunctsAndCapsAndCapsAndCaps('abcd', 'dddddddabc')\n  true\n  >>> likePunctsAndCapsAndCapsAndCaps('dddddddabc', 'abcd')\n  true\n  >>> likePunctsAndCapsAndCapsAndCaps('eabcd', 'dddddddabc')\n  false\n  >>> likePunctsAndCapsAndCapsAndCaps('abcd', 'dddddddabce')\n  false\n  >>> likePunctsAndCapsAndCapsAndCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likePunctsAndCapsAndCapsAndCaps = (s0, s1) => {\n  const s0 = s0.toLowerCase();\n  const s1 = s1.toLowerCase();\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0.length > s1.length) {\n    return s0.length > s1.length;\n  }\n  return s0.length < s1.length;\n};\n\n/*\n  Check if two words have the same punctuation and capitalization.\n  >>> likePunctsAndCapsAndCapsAndCapsAndCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likePunctsAndCapsAndCapsAndCapsAndCaps('abcd', 'dddddddabc')\n  true\n  >>> likePunctsAndCapsAndCapsAndCapsAndCaps('dddddddabc', 'abcd')\n  true\n  >>> likePunctsAndCapsAndCapsAndCapsAndCaps('eabcd', 'dddddddabc')\n  false\n  >>> like", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  Fibonacci sequence is defined as:\n  F(n) = F(n-1) + F(n-2)\n  F(0) = 1\n  F(1) = 1\n  F(n) = F(n-1) + F(n-2)\n  F(n) = F(n-1) + F(n-2) + F(n-3)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15) + F(n-16)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15) + F(n-16) + F(n-17)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15) + F(n-16) + F(n-17) + F(n-18)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15) + F(n-16) + F(n-17) + F(n-18) + F(n-19)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15) + F(n-16) + F(n-17) + F(n-18) + F(n-19) + F(n-20)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15) + F(n-16) + F(n-17) + F(n-18) + F(n-19) + F(n-20) + F(n-21)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15) + F(n-16) + F(n-17) + F(n-18) + F(n-19) + F(n-20) + F(n-21) + F(n-22)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15) + F(n-16) + F(n-17) + F(n-18) + F(n-19) + F(n-20) + F(n-21) + F(n-22) + F(n-23)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15) + F(n-16) + F(n-17) + F(n-18) + F(n-19) + F(n-20) + F(n-21) + F(n-22) + F(n-23) + F(n-24)\n  F(n) = F(n-1) + F(n-2) + F(n-3) + F(n-4) + F(n-5) + F(n-6) + F(n-7) + F(n-8) + F(n-9) + F(n-10) + F(n-11) + F(n-12) + F(n-13) + F(n-14) + F(n-15) + F(n-16) + F(n-17) + F(n-18) + F(n-19) + F(n-20) + F(n-21) + F(n-22) + F(n-23) + F(n-24) + F(n-25)\n  F(n) = F(n-1) + F(n-2) + F(n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  return openingBrackets.every(\n    (openingBracket) => closingBrackets.includes(openingBracket)\n  );\n};\n\n/**\n * Returns true if a character is a letter, digit, or underscore.\n *\n * >>> isLetterOrDigit(\"a\")\n * true\n * >>> isLetterOrDigit(\"A\")\n * true\n * >>> isLetterOrDigit(\"_\")\n * false\n * >>> isLetterOrDigit(\"Z\")\n * false\n */\nconst isLetterOrDigit = (character) => {\n  return character.toUpperCase() === character;\n};\n\n/**\n * Returns true if a character is a letter.\n *\n * >>> isLetter(\"a\")\n * true\n * >>> isLetter(\"A\")\n * true\n * >>> isLetter(\"_\")\n * false\n * >>> isLetter(\"Z\")\n * false\n */\nconst isLetter = (character) => {\n  return character.toUpperCase() === character;\n};\n\n/**\n * Returns true if a character is a digit.\n *\n * >>> isDigit(\"a\")\n * true\n * >>> isDigit(\"A\")\n * true\n * >>> isDigit(\"_\")\n * false\n * >>> isDigit(\"Z\")\n * false\n */\nconst isDigit = (character) => {\n  return character.toUpperCase() === character;\n};\n\n/**\n * Returns true if a character is a underscore.\n *\n * >>> isUnderscore(\"_\")\n * true\n * >>> isUnderscore(\"Z\")\n * false\n */\nconst isUnderscore = (character) => {\n  return character.toUpperCase() === character;\n};\n\n/**\n * Returns true if a character is a punctuation character.\n *\n * >>> isPunctuation(\".\")\n * true\n * >>> isPunctuation(\",\")\n * true\n * >>> isPunctuation(\";\")\n * true\n * >>> isPunctuation(\"?\")\n * true\n * >>> isPunctuation(\"!\")\n * true\n * >>> isPunctuation(\"(\")\n * true\n * >>> isPunctuation(\")\")\n * true\n * >>> isPunctuation(\"[\")\n * true\n * >>> isPunctuation(\"]\")\n * true\n * >>> isPunctuation(\"{\")\n * true\n * >>> isPunctuation(\"}\")\n * true\n * >>> isPunctuation(\"[\")\n * true\n * >>> isPunctuation(\"]\")\n * true\n * >>> isPunctuation(\"{\")\n * true\n * >>> isPunctuation(\"}\")\n * true\n * >>> isPunctuation(\"[\")\n * true\n * >>> isPunctuation(\"]\")\n * true\n * >>> isPunctuation(\"{\")\n * true\n * >>> isPunctuation(\"}\")\n * true\n */\nconst isPunctuation = (character) => {\n  return character.toUpperCase() === character;\n};\n\n/**\n * Returns true if a character is a quote character.\n *\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * true\n * >>> isQuote(\"'\")\n * true\n * >>> isQuote(\"\\\"\")\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "<|endoftext|>/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  let ret = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      ret = false;\n      break;\n    }\n  }\n  return ret;\n};\n\n/**\n  Returns true if the array is sorted.\n  >>> sorted([1, 2, 3])\n  true\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([3, 2, 1])\n  false\n  >>> sorted([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "<|endoftext|>/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  const n = l1.length\n  const m = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < m && j < n) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else if (l1[i] > l2[j]) {\n      result.push(l2[j])\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique fine elements for two lists.\n  >>> fine([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [3, 2]\n  >>> fine([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst fine = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  const n = l1.length\n  const m = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < m && j < n) {\n    if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else if (l1[i] < l2[j]) {\n      result.push(l2[j])\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique fine elements for two lists.\n  >>> fine([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [3, 2]\n  >>> fine([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  const n = l1.length\n  const m = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < m && j < n) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique fine elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [3, 2]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueFine = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  const n = l1.length\n  const m = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < m && j < n) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique coarse elements for two lists.\n  >>> uniqueFine([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [3, 2]\n  >>> uniqueFine([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueFineCoarse = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  const n = l1.length\n  const m = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < m && j < n) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique fine elements for two lists.\n  >>> uniqueFineCoarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [3, 2]\n  >>> uniqueFineCoarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueFineCoarseFine = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  const n = l1.length\n  const m = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < m && j < n) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique coarse elements for two lists.\n  >>> uniqueFineCoarseFine([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [3, 2]\n  >>> uniqueFineCoarseFine([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueFineCoarseFineCoarse = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  const n = l1.length\n  const m = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < m && j < n) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique fine elements for two lists.\n  >>> uniqueFineCoarseFineCoarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [3, 2]\n  >>> uniqueFineCoarseFineCoarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueFineCoarseFineCoarseFine = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  const n = l1.length\n  const m = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < m && j < n) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique fine elements for two lists.\n  >>> uniqueFineCoarseFineCoarseFine([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [3, 2]\n  >>> uniqueFineCoarseFineCoarseFine([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueFineCoarseFineCoarseFineCoarse = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  const n = l1.length\n  const m = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < m && j < n) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  let i = Math.floor(Math.sqrt(n));\n  let factor = 1;\n  while (i > 1) {\n    if (n % i === 0) {\n      n = n / i;\n      factor *= i;\n    }\n    i = Math.floor(Math.sqrt(n));\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return true if n is a prime number.\n  >>> isPrime(13195)\n  true\n  >>> isPrime(2048)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number greater than 1.\n  >>> isPrimeOrGreaterThanOne(13195)\n  true\n  >>> isPrimeOrGreaterThanOne(2048)\n  false\n  */\nconst isPrimeOrGreaterThanOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n > 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number greater than or equal to 1.\n  >>> isPrimeOrLessThanOne(13195)\n  true\n  >>> isPrimeOrLessThanOne(2048)\n  false\n  */\nconst isPrimeOrLessThanOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n > 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number less than 1.\n  >>> isPrimeLessThanOne(13195)\n  true\n  >>> isPrimeLessThanOne(2048)\n  false\n  */\nconst isPrimeLessThanOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n < 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number less than or equal to 1.\n  >>> isPrimeLessThanOrEqualToOne(13195)\n  true\n  >>> isPrimeLessThanOrEqualToOne(2048)\n  false\n  */\nconst isPrimeLessThanOrEqualToOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n < 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number greater than or equal to n.\n  >>> isPrimeGreaterThanOrEqualToOne(13195)\n  true\n  >>> isPrimeGreaterThanOrEqualToOne(2048)\n  false\n  */\nconst isPrimeGreaterThanOrEqualToOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n > 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number less than n.\n  >>> isPrimeLessThanOrEqualToOne(13195)\n  true\n  >>> isPrimeLessThanOrEqualToOne(2048)\n  false\n  */\nconst isPrimeLessThanOrEqualToOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n < 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number greater than n.\n  >>> isPrimeGreaterThanOrEqualToOne(13195)\n  true\n  >>> isPrimeGreaterThanOrEqualToOne(2048)\n  false\n  */\nconst isPrimeGreaterThanOrEqualToOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n > 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number greater than or equal to n.\n  >>> isPrimeLessThanOrEqualToOne(13195)\n  true\n  >>> isPrimeLessThanOrEqualToOne(2048)\n  false\n  */\nconst isPrimeLessThanOrEqualToOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n < 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number less than n.\n  >>> isPrimeGreaterThanOrEqualToOne(13195)\n  true\n  >>> isPrimeGreaterThanOrEqualToOne(2048)\n  false\n  */\nconst isPrimeGreaterThanOrEqualToOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n > 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number less than or equal to n.\n  >>> isPrimeLessThanOrEqualToOne(13195)\n  true\n  >>> isPrimeLessThanOrEqualToOne(2048)\n  false\n  */\nconst isPrimeLessThanOrEqualToOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n < 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number greater than n.\n  >>> isPrimeGreaterThanOrEqualToOne(13195)\n  true\n  >>> isPrimeGreaterThanOrEqualToOne(2048)\n  false\n  */\nconst isPrimeGreaterThanOrEqualToOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n > 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number greater than or equal to n.\n  >>> isPrimeLessThanOrEqualToOne(13195)\n  true\n  >>> isPrimeLessThanOrEqualToOne(2048)\n  false\n  */\nconst isPrimeLessThanOrEqualToOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n < 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number greater than n.\n  >>> isPrimeGreaterThanOrEqualToOne(13195)\n  true\n  >>> isPrimeGreaterThanOrEqualToOne(2048)\n  false\n  */\nconst isPrimeGreaterThanOrEqualToOne = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return n > 1;\n};\n\n/*\n  Given a number n, return true if n is a prime number less than n.\n  >>> isPri", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_parens = paren_group.match(/\\(([^()]+)\\)/g);\n    const paren_group_nesting = [];\n    for (let j = 0; j < paren_group_parens.length; j++) {\n      const paren_group_paren = paren_group_parens[j];\n      const paren_group_paren_nesting = paren_group_paren.match(/\\(([^()]+)\\)/g);\n      if (paren_group_paren_nesting.length > 0) {\n        paren_group_nesting.push(paren_group_paren_nesting[0]);\n      }\n    }\n    result.push(paren_group_nesting);\n  }\n  return result;\n};\n\nconst parseNestedParensNoParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_nesting = paren_group.match(/\\(([^()]+)\\)/g);\n    if (paren_group_nesting.length > 0) {\n      result.push(paren_group_nesting[0]);\n    }\n  }\n  return result;\n};\n\nconst parseNestedParensNoParensNoParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_nesting = paren_group.match(/\\(([^()]+)\\)/g);\n    if (paren_group_nesting.length > 0) {\n      result.push(paren_group_nesting[0]);\n    }\n  }\n  return result;\n};\n\nconst parseNestedParensNoParensNoParensNoParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_nesting = paren_group.match(/\\(([^()]+)\\)/g);\n    if (paren_group_nesting.length > 0) {\n      result.push(paren_group_nesting[0]);\n    }\n  }\n  return result;\n};\n\nconst parseNestedParensNoParensNoParensNoParensNoParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_nesting = paren_group.match(/\\(([^()]+)\\)/g);\n    if (paren_group_nesting.length > 0) {\n      result.push(paren_group_nesting[0]);\n    }\n  }\n  return result;\n};\n\nconst parseNestedParensNoParensNoParensNoParensNoParensNoParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_nesting = paren_group.match(/\\(([^()]+)\\)/g);\n    if (paren_group_nesting.length > 0) {\n      result.push(paren_group_nesting[0]);\n    }\n  }\n  return result;\n};\n\nconst parseNestedParensNoParensNoParensNoParensNoParensNoParensNoParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_nesting = paren_group.match(/\\(([^()]+)\\)/g);\n    if (paren_group_nesting.length > 0) {\n      result.push(paren_group_nesting[0]);\n    }\n  }\n  return result;\n};\n\nconst parseNestedParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_nesting = paren_group.match(/\\(([^()]+)\\)/g);\n    if (paren_group_nesting.length > 0) {\n      result.push(paren_group_nesting[0]);\n    }\n  }\n  return result;\n};\n\nconst parseNestedParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_nesting = paren_group.match(/\\(([^()]+)\\)/g);\n    if (paren_group_nesting.length > 0) {\n      result.push(paren_group_nesting[0]);\n    }\n  }\n  return result;\n};\n\nconst parseNestedParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNoParensNo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "<|endoftext|>/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that takes an array of numbers and returns an array of\n * numbers, sorted in ascending order, such that the first element of the array\n * is at the head of the sorted array, and the second element is at the tail.\n * For example, `[10, 20, 30, 40, 50]` would become `[10, 40, 30, 20, 50]`\n * and `[10, 20, 30, 40, 50]` would become `[10, 20, 30, 40, 50]`.\n *\n * See also:\n *\n *    [sortBy](#sortBy)\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Array\n * @sig [a] -> [a]\n * @param {Array} list The list to sort.\n * @return {Array} A new array sorted in ascending order.\n * @example\n *\n *      sortBy([4, 1, 6, 2, 5]); //=> [1, 6, 4, 2, 5]\n */\nconst sortBy = sortBy(identity);\n\n/**\n * Sorts the elements of an array, in ascending order. Natural numbers are\n * sorted before alphabetic ones. JavaScript follows the IEEE 754 standard\n * for sorting numbers: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\n *\n * See also:\n *\n *    [sortBy](#sortBy)\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Array\n * @sig [a] -> [a]\n * @param {Array} list The list to sort.\n * @return {Array} A new array sorted in ascending order.\n * @example\n *\n *      sortBy([4, 1, 6, 2, 5]); //=> [1, 6, 4, 2, 5]\n */\nconst sortBy = sortBy(identity);\n\n/**\n * Sorts the elements of an array, in descending order. Natural numbers are\n * sorted before alphabetic ones. JavaScript follows the IEEE 754 standard\n * for sorting numbers: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\n *\n * See also:\n *\n *    [sortBy](#sortBy)\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Array\n * @sig [a] -> [a]\n * @param {Array} list The list to sort.\n * @return {Array} A new array sorted in descending order.\n * @example\n *\n *      sortBy([4, 1, 6, 2, 5]); //=> [5, 4, 6, 2, 1]\n */\nconst sortDescending = sortBy(identity);\n\n/**\n * Sorts the elements of an array, in descending order, using the property by\n * which each element should be sorted.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Array\n * @sig ((a, a) -> Number) -> [a] -> [a]\n * @param {Function} fn Function :: a -> a -> Number\n * @param {Array} list The list to sort.\n * @return {Array} A new array sorted in descending order.\n * @example\n *\n *      var sortByFirstItem = R.sortBy(R.prop(0));\n *      var sortByFirstItemPlus1 = sortByFirstItem(function (x) { return x + 1; });\n *      var sortByFirstItemPlus2 = sortByFirstItem(function (x, y) { return x + 2; });\n *      sortByFirstItemPlus1([10, 1]); //=> [1, 10]\n *      sortByFirstItemPlus2([4, 2], [4, 2]); //=> [4, 2]\n */\nconst sortByFirstItem = sortBy(prop(0));\n\n/**\n * Sorts the elements of an array, in descending order, using the property\n * by which each element should be sorted. If `asc` is `true`, then the elements\n * will be sorted in ascending order; otherwise they are sorted in descending\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Array\n * @sig ((a, a) -> Number) -> [a] -> [a]\n * @param {Function} fn Function :: a -> a -> Number\n * @param {Array} list The list to sort.\n * @param {Boolean} asc `true` if the array is sorted in ascending order, `false`\n *        otherwise.\n * @return {Array} A new array sorted in descending order.\n * @example\n *\n *      var sortByFirstItem = R.sortBy(R.prop(0, true));\n *      var sortByFirstItemPlus1 = sortByFirstItem(function (x) { return x + 1; });\n *      var sortByFirstItemPlus2 = sortByFirstItem(function (x, y) { return x + 2; });\n *      sortByFirstItemPlus1([10, 1]); //=> [1, 10]\n *      sortByFirstItemPlus2([4, 2], [4, 2]); //=> [4, 2]\n */\nconst sortByFirstItemWith = sortBy(prop(0, true));\n\n/**\n * Sorts the elements of an array, in descending order, using the property\n * by which each element should be sorted. If `asc` is `true`, then the elements\n * will be sorted in ascending order; otherwise they are sorted in descending\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Array\n * @sig ((a, a) -> Number) -> [a] -> [a]\n * @param {Function} fn Function :: a -> a -> Number\n * @param {Array} list The list to sort.\n * @param {Boolean} asc `true` if the array is sorted in ascending order, `false`\n *        otherwise.\n * @return {Array} A new array sorted in descending order.\n * @example\n *\n *      var sortByFirstItem = R.sortBy(R.prop(0, true), true);\n *      var sortByFirstItemPlus1 = sortByFirstItem(function (x) { return x + 1; });\n *      var sortByFirstItemPlus2 = sortByFirstItem(function (x, y) { return x + 2; });\n *      sortByFirstItemPlus1([10, 1]); //=> [1, 10]\n *      sortByFirstItemPlus2([4, 2], [4, 2]); //=> [4, 2]\n */\nconst sortByFirstItemWithDesc = sortBy(prop(0, true), true);\n\n/**\n * Sorts the elements of an array, in descending order, using the property\n * by which each element should be sorted. If `asc` is `true`, then the elements\n * will be sorted in ascending order; otherwise they are sorted in descending\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Array\n * @sig ((a, a) -> Number) -> [a] -> [a]\n * @param {Function} fn Function :: a -> a -> Number\n * @param {Array} list The list to sort.\n * @param {Boolean} asc `true` if the array is sorted in ascending order, `false`\n *        otherwise.\n * @return {Array} A new array sorted in descending order.\n * @example\n *\n *      var sortByFirstItem = R.sortBy(R.prop(0, true), true);\n *      var sortByFirstItemPlus1 = sortByFirstItem(function (x) { return x + 1; });\n *      var sortByFirstItemPlus2 = sortByFirstItem(function (x, y) { return x + 2; });\n *      sortByFirstItemPlus1([10, 1]); //=> [1, 10]\n *      sortByFirstItemPlus2([4, 2], [4, 2]); //=> [4, 2]\n */\nconst sortByLastItem = sortBy(prop(-1));\n\n/**\n * Sorts the elements of an array, in desc", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/[^)]+/g);\n  const closingBrackets = brackets.match(/[^)]+/g);\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Given a string, return true if it starts with \"(\", false otherwise.\n *\n * >>> startsWith(\"(foo)\")\n * true\n * >>> startsWith(\"foo)\")\n * false\n */\nconst startsWith = (str) => {\n  return str.startsWith(\"(\");\n};\n\n/**\n * Given a string, return true if it ends with \")\", false otherwise.\n *\n * >>> endsWith(\"foo)\")\n * true\n * >>> endsWith(\"foo)\")\n * false\n */\nconst endsWith = (str) => {\n  return str.endsWith(\")\");\n};\n\n/**\n * Given a string, return true if it contains \"foo\", false otherwise.\n *\n * >>> contains(\"foo\")\n * true\n * >>> contains(\"foo)\")\n * false\n */\nconst contains = (str) => {\n  return str.includes(\"foo\");\n};\n\n/**\n * Given a string, return true if it starts with \"foo\", false otherwise.\n *\n * >>> startsWith(\"foo\")\n * true\n * >>> startsWith(\"foo)\")\n * false\n */\nconst startsWith = (str) => {\n  return str.startsWith(\"foo\");\n};\n\n/**\n * Given a string, return true if it ends with \"bar\", false otherwise.\n *\n * >>> endsWith(\"bar\")\n * true\n * >>> endsWith(\"bar)\")\n * false\n */\nconst endsWith = (str) => {\n  return str.endsWith(\"bar\");\n};\n\n/**\n * Given a string, return true if it contains \"bar\", false otherwise.\n *\n * >>> contains(\"bar\")\n * true\n * >>> contains(\"bar)\")\n * false\n */\nconst contains = (str) => {\n  return str.includes(\"bar\");\n};\n\n/**\n * Given a string, return true if it starts with \"bar\", false otherwise.\n *\n * >>> startsWith(\"bar\")\n * true\n * >>> startsWith(\"bar)\")\n * false\n */\nconst startsWith = (str) => {\n  return str.startsWith(\"bar\");\n};\n\n/**\n * Given a string, return true if it ends with \"foo\", false otherwise.\n *\n * >>> endsWith(\"bar\")\n * true\n * >>> endsWith(\"bar)\")\n * false\n */\nconst endsWith = (str) => {\n  return str.endsWith(\"foo\");\n};\n\n/**\n * Given a string, return true if it contains \"foo\", false otherwise.\n *\n * >>> contains(\"foo\")\n * true\n * >>> contains(\"foo)\")\n * false\n */\nconst contains = (str) => {\n  return str.includes(\"foo\");\n};\n\n/**\n * Given a string, return true if it starts with \"foo\", false otherwise.\n *\n * >>> startsWith(\"foo\")\n * true\n * >>> startsWith(\"foo)\")\n * false\n */\nconst startsWith = (str) => {\n  return str.startsWith(\"foo\");\n};\n\n/**\n * Given a string, return true if it ends with \"bar\", false otherwise.\n *\n * >>> endsWith(\"bar\")\n * true\n * >>> endsWith(\"bar)\")\n * false\n */\nconst endsWith = (str) => {\n  return str.endsWith(\"bar\");\n};\n\n/**\n * Given a string, return true if it contains \"bar\", false otherwise.\n *\n * >>> contains(\"bar\")\n * true\n * >>> contains(\"bar)\")\n * false\n */\nconst contains = (str) => {\n  return str.includes(\"bar\");\n};\n\n/**\n * Given a string, return true if it starts with \"bar\", false otherwise.\n *\n * >>> startsWith(\"bar\")\n * true\n * >>> startsWith(\"bar)\")\n * false\n */\nconst startsWith = (str) => {\n  return str.startsWith(\"bar\");\n};\n\n/**\n * Given a string, return true if it ends with \"foo\", false otherwise.\n *\n * >>> endsWith(\"bar\")\n * true\n * >>> endsWith(\"bar)\")\n * false\n */\nconst endsWith = (str) => {\n  return str.endsWith(\"foo\");\n};\n\n/**\n * Given a string, return true if it contains \"foo\", false otherwise.\n *\n * >>> contains(\"foo\")\n * true\n * >>> contains(\"foo)\")\n * false\n */\nconst contains = (str) => {\n  return str.includes(\"foo\");\n};\n\n/**\n * Given a string, return true if it starts with \"foo\", false otherwise.\n *\n * >>> startsWith(\"foo\")\n * true\n * >>> startsWith(\"foo)\")\n * false\n */\nconst startsWith = (str) => {\n  return str.startsWith(\"foo\");\n};\n\n/**\n * Given a string, return true if it ends with \"bar\", false otherwise.\n *\n * >>> endsWith(\"bar\")\n * true\n * >>> endsWith(\"bar)\")\n * false\n */\nconst endsWith = (str) => {\n  return str.endsWith(\"bar\");\n};\n\n/**\n * Given a string, return true if it contains \"bar\", false otherwise.\n *\n * >>> contains(\"bar\")\n * true\n * >>> contains(\"bar)\")\n * false\n */\nconst contains = (str) => {\n  return str.includes(\"bar\");\n};\n\n/**\n * Given a string, return true if it starts with \"bar\", false otherwise.\n *\n * >>> startsWith(\"bar\")\n * true\n * >>> startsWith(\"bar)\")\n * false\n */\nconst startsWith = (str) => {\n  return str.startsWith(\"bar\");\n};\n\n/**\n * Given a string, return true if it ends with \"foo\", false otherwise.\n *\n * >>> endsWith(\"bar\")\n * true\n * >>> endsWith(\"bar)\")\n * false\n */\nconst endsWith = (str) => {\n  return str.endsWith(\"foo\");\n};\n\n/**\n * Given a string, return true if it contains \"foo\", false otherwise.\n *\n * >>> contains(\"foo\")\n * true\n * >>> contains(\"foo)\")\n * false\n */\nconst contains = (str) => {\n  return str.includes(\"foo\");\n};\n\n/**\n * Given a string, return true if it starts with \"foo\", false otherwise.\n *\n * >>> startsWith(\"foo\")\n * true\n * >>> startsWith(\"foo)\")\n * false\n */\nconst startsWith = (str) => {\n  return str.startsWith(\"foo\");\n};\n\n/**\n * Given a string, return true if it ends with \"bar\", false otherwise.\n *\n * >>> endsWith(\"bar\")\n * true\n * >>> endsWith(\"bar)\")\n * false\n */\nconst endsWith = (str) => {\n  return str.endsWith(\"bar\");\n};\n\n/**\n * Given a string, return true if it contains \"bar\", false otherwise.\n *\n * >>> contains(\"bar\")\n * true\n * >>> contains(\"bar)\")\n * false\n */\nconst contains = (str) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[n - i - 1]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 +....\n// Return inverse of this polynomial in the same form.\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the Fibonacci sequence of the given length.\n  >>> fibonacci(10)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  >>> fibonacci(20)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  >>> fibonacci(30)\n  [1, 2, 3, 5, 8, 13, 21, 34]\n  >>> fibonacci(50)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55]\n  >>> fibonacci(100)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  >>> fibonacci(1000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n  >>> fibonacci(10000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]\n  >>> fibonacci(100000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n  >>> fibonacci(1000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n  >>> fibonacci(10000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n  >>> fibonacci(100000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  >>> fibonacci(1000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584]\n  >>> fibonacci(10000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181]\n  >>> fibonacci(100000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765]\n  >>> fibonacci(1000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946]\n  >>> fibonacci(10000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991]\n  >>> fibonacci(100000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841]\n  >>> fibonacci(1000000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841, 4181]\n  >>> fibonacci(10000000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841, 4181, 6765]\n  >>> fibonacci(100000000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946]\n  >>> fibonacci(1000000000000000010)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946, 15991, 25841]\n  >>> fibonacci(10000000000000000100)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946, 15991, 25841,\n  4181, 6765, 10946]\n  >>> fibonacci(100000000000000001000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946, 15991, 25841,\n  4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946]\n  >>> fibonacci(1000000000000000010000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946, 15991, 25841,\n  4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946, 15991, 25841]\n  >>> fibonacci(10000000000000000100000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946, 15991, 25841,\n  4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946]\n  >>> fibonacci(10000000000000000100000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946, 15991, 25841,\n  4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946]\n  >>> fibonacci(10000000000000000100000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946, 15991, 25841,\n  4181, 6765, 10946, 15991, 25841, 4181, 6765, 10946]\n  >>> fibonacci(10000000000000000100000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "<|endoftext|>/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let vowelCount = 0;\n  let vowelIndex = 0;\n  let vowel;\n  let vowelEnd;\n  let vowelStart;\n\n  for (vowelIndex = 0; vowelIndex < s.length; vowelIndex++) {\n    vowel = s.charAt(vowelIndex);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowelCount++;\n    }\n  }\n\n  vowelEnd = s.indexOf('y');\n  if (vowelEnd === -1) {\n    vowelEnd = s.length;\n  }\n\n  vowelStart = vowelEnd + 1;\n  for (vowelIndex = 0; vowelIndex < vowelStart; vowelIndex++) {\n    vowel = s.charAt(vowelIndex);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowelCount++;\n    }\n  }\n\n  return vowelCount;\n};\n\n/*Write a function vowelReckons which, given a string, returns a\n  list of all vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n  Here, 'y' is also a vowel, but only when it is at the end of the given\n  string.\n\n  Example:\n  >>> vowelReckons(\"abcde\")\n  [ 'a', 'e', 'i', 'o', 'u', 'y' ]\n  >>> vowelReckons(\"ACEDY\")\n  [ 'a', 'e', 'i', 'o', 'u', 'y' ]\n  */\nconst vowelReckons = (s) => {\n  let vowels = [];\n  let vowelIndex = 0;\n  let vowel;\n  let vowelEnd;\n  let vowelStart;\n\n  for (vowelIndex = 0; vowelIndex < s.length; vowelIndex++) {\n    vowel = s.charAt(vowelIndex);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowels.push(vowel);\n    }\n  }\n\n  vowelEnd = s.indexOf('y');\n  if (vowelEnd === -1) {\n    vowelEnd = s.length;\n  }\n\n  vowelStart = vowelEnd + 1;\n  for (vowelIndex = 0; vowelIndex < vowelStart; vowelIndex++) {\n    vowel = s.charAt(vowelIndex);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowels.push(vowel);\n    }\n  }\n\n  return vowels;\n};\n\n/*Write a function vowelReckons2 which, given a string, returns a\n  list of all vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n  Here, 'y' is also a vowel, but only when it is at the end of the given\n  string.\n\n  Example:\n  >>> vowelReckons2(\"abcde\")\n  [ 'a', 'e', 'i', 'o', 'u', 'y' ]\n  >>> vowelReckons2(\"ACEDY\")\n  [ 'a', 'e', 'i', 'o', 'u', 'y' ]\n  */\nconst vowelReckons2 = (s) => {\n  let vowels = [];\n  let vowelIndex = 0;\n  let vowel;\n  let vowelEnd;\n  let vowelStart;\n\n  for (vowelIndex = 0; vowelIndex < s.length; vowelIndex++) {\n    vowel = s.charAt(vowelIndex);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowels.push(vowel);\n    }\n  }\n\n  vowelEnd = s.indexOf('y');\n  if (vowelEnd === -1) {\n    vowelEnd = s.length;\n  }\n\n  vowelStart = vowelEnd + 1;\n  for (vowelIndex = 0; vowelIndex < vowelStart; vowelIndex++) {\n    vowel = s.charAt(vowelIndex);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowels.push(vowel);\n    }\n  }\n\n  return vowels;\n};\n\n/*Write a function vowelReckons3 which, given a string, returns a\n  list of all vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n  Here, 'y' is also a vowel, but only when it is at the end of the given\n  string.\n\n  Example:\n  >>> vowelReckons3(\"abcde\")\n  [ 'a', 'e', 'i', 'o', 'u', 'y' ]\n  >>> vowelReckons3(\"ACEDY\")\n  [ 'a', 'e', 'i', 'o', 'u', 'y' ]\n  */\nconst vowelReckons3 = (s) => {\n  let vowels = [];\n  let vowelIndex = 0;\n  let vowel;\n  let vowelEnd;\n  let vowelStart;\n\n  for (vowelIndex = 0; vowelIndex < s.length; vowelIndex++) {\n    vowel = s.charAt(vowelIndex);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowels.push(vowel);\n    }\n  }\n\n  vowelEnd = s.indexOf('y');\n  if (vowelEnd === -1) {\n    vowelEnd = s.length;\n  }\n\n  vowelStart = vowelEnd + 1;\n  for (vowelIndex = 0; vowelIndex < vowelStart; vowelIndex++) {\n    vowel = s.charAt(vowelIndex);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowels.push(vowel);\n    }\n  }\n\n  return vowels;\n};\n\n/*Write a function vowelReckons4 which, given a string, returns a\n  list of all vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n  Here, 'y' is also a vowel, but only when it is at the end of the given\n  string.\n\n  Example:\n  >>> vowelReckons4(\"abcde\")\n  [ 'a', 'e', 'i', 'o', 'u', 'y' ]\n  >>> vowelReckons4(\"ACEDY\")\n  [ 'a', 'e', 'i', 'o', 'u', 'y' ]\n  */\nconst vowelReckons4 = (s) => {\n  let vowels = [];\n  let vowelIndex = 0;\n  let vowel;\n  let vowelEnd;\n  let vowelStart;\n\n  for (vowelIndex = 0; vowelIndex < s.length; vowelIndex++) {\n    vowel = s.charAt(vowelIndex);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowels.push(vowel);\n    }\n  }\n\n  vowelEnd = s.indexOf('y');\n  if (vowelEnd === -1) {\n    vowelEnd = s.length;\n  }\n\n  vowelStart = vowelEnd + 1;\n  for (vowelIndex = 0; vowelIndex < vowelStart; vowelIndex++) {\n    vowel = s.charAt(vowelIndex);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowels.push(vowel);\n    }\n  }\n\n  return vowels;\n};\n\n/*Write a function vowelReckons5 which, given a string, returns a\n  list of all vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n  Here, 'y' is also a vowel, but only when it is at the end of the given\n  string.\n\n  Example:\n  >>> vowelReckons5(\"abcde\")\n  [ 'a', 'e', 'i', 'o', 'u', 'y' ]\n  >>> vowelReckons5(\"ACEDY\")\n  [ 'a', 'e', 'i', 'o', 'u', 'y' ]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  const digits = Math.pow(10, shift);\n  return x.toString(digits).split('').reverse().join('');\n};\n\n/**\n * Round the value of x to the nearest multiple of y.\n * If x is positive round up; otherwise round down.\n */\nconst round = (x, y) => {\n  if (x < 0) {\n    return Math.ceil(x / y) * y;\n  }\n  return Math.floor(x / y) * y;\n};\n\n/**\n * Convert an integer to a string in radix base 10.\n */\nconst toBase10 = (x) => {\n  const digits = Math.pow(10, Math.floor(Math.log(x) / Math.LN10));\n  return x.toString(digits);\n};\n\n/**\n * Convert a string to a number in radix base 10.\n */\nconst toBase10Digits = (x) => {\n  const digits = Math.pow(10, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 10) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toBase10Digit = (x) => {\n  const digits = Math.pow(10, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 10) * Math.pow(10, digits);\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toBase2 = (x) => {\n  const digits = Math.pow(10, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * digits;\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toBase2Digits = (x) => {\n  const digits = Math.pow(10, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * digits;\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toBase2Digit = (x) => {\n  const digits = Math.pow(10, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * Math.pow(10, digits);\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toHex = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 16) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toHexDigits = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 16) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toHexDigit = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 16) * Math.pow(16, digits);\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toBin = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * digits;\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toBinDigits = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * digits;\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toBinDigit = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * Math.pow(16, digits);\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toOct = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 8) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toOctDigits = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 8) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toOctDigit = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 8) * Math.pow(16, digits);\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toHexadecimal = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 16) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toHexadecimalDigits = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 16) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toHexadecimalDigit = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 16) * Math.pow(16, digits);\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toBinary = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * digits;\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toBinaryDigits = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * digits;\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toBinaryDigit = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * Math.pow(16, digits);\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toOctal = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 8) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toOctalDigits = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 8) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toOctalDigit = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 8) * Math.pow(16, digits);\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toHexadecimalDecimal = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 16) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toHexadecimalDecimalDigits = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 16) * digits;\n};\n\n/**\n * Convert a string to a number in base 10.\n */\nconst toHexadecimalDecimalDigit = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN10));\n  return parseInt(x, 16) * Math.pow(16, digits);\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toHexadecimalDecimal = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * digits;\n};\n\n/**\n * Convert a string to a number in base 2.\n */\nconst toHexadecimalDecimalDigits = (x) => {\n  const digits = Math.pow(16, Math.floor(Math.log(x) / Math.LN2));\n  return parseInt(x, 2) * digits;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSumLower(\"\") => 0\n      fingerSumLower(\"abAB\") => 131\n      fingerSumLower(\"abcCd\") => 67\n      fingerSumLower(\"helloE\") => 69\n      fingerSumLower(\"woArBld\") => 131\n      fingerSumLower(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSumUpper(\"\") => 0\n      fingerSumUpper(\"abAB\") => 131\n      fingerSumUpper(\"abcCd\") => 67\n      fingerSumUpper(\"helloE\") => 69\n      fingerSumUpper(\"woArBld\") => 131\n      fingerSumUpper(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSumLower(\"\") => 0\n      fingerSumLower(\"abAB\") => 131\n      fingerSumLower(\"abcCd\") => 67\n      fingerSumLower(\"helloE\") => 69\n      fingerSumLower(\"woArBld\") => 131\n      fingerSumLower(\"aAaaaXa\") => 153\n  */\nconst fingerSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSumUpper(\"\") => 0\n      fingerSumUpper(\"abAB\") => 131\n      fingerSumUpper(\"abcCd\") => 67\n      fingerSumUpper(\"helloE\") => 69\n      fingerSumUpper(\"woArBld\") => 131\n      fingerSumUpper(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSumUpperLower(\"\") => 0\n      fingerSumUpperLower(\"abAB\") => 131\n      fingerSumUpperLower(\"abcCd\") => 67\n      fingerSumUpperLower(\"helloE\") => 69\n      fingerSumUpperLower(\"woArBld\") => 131\n      fingerSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSumUpperLower(\"\") => 0\n      fingerSumUpperLower(\"abAB\") => 131\n      fingerSumUpperLower(\"abcCd\") => 67\n      fingerSumUpperLower(\"helloE\") => 69\n      fingerSumUpperLower(\"woArBld\") => 131\n      fingerSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSumUpperUpperLower(\"\") => 0\n      fingerSumUpperUpperLower(\"abAB\") => 131\n      fingerSumUpperUpperLower(\"abcCd\") => 67\n      fingerSumUpperUpperLower(\"helloE\") => 69\n      fingerSumUpperUpperLower(\"woArBld\") => 131\n      fingerSumUpperUpperLower(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSumUpperUpperLower(\"\") => 0\n      fingerSumUpperUpperLower(\"abAB\") => 131\n      fingerSumUpperUpperLower(\"abcCd\") => 67\n      fingerSumUpperUpperLower(\"helloE\") => 69\n      fingerSumUpperUpperLower(\"woArBld\") => 131\n      fingerSumUpperUpperLower(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      fingerSumUpperUpperLower(\"\") => 0\n      fingerSumUpperUpperLower(\"abAB\") => 131\n      fingerSumUpperUpperLower(\"abcCd\") => 67\n      fingerSumUpperUpperLower(\"helloE\") => 69\n      fingerSumUpperUpperLower(\"woArBld\") => 131\n      fingerSumUpperUpperLower(\"aAaaaXa\") => 153\n  */\nconst fingerSumUpperUpperUpperLow", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let total = 0;\n  let fruits = 1;\n  let apples = 1;\n  let oranges = 1;\n  let mango = 1;\n  let totalApples = 1;\n  let totalOranges = 1;\n  let totalMango = 1;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let total = 0;\n  let fruitCount = 0;\n  let appleCount = 0;\n  let orangeCount = 0;\n  let mangoCount = 0;\n  let totalAppleCount = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      if (min === 0 || arr[i] < min) {\n        min = arr[i];\n        minIndex = i;\n      }\n      if (max === 0 || arr[i] > max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return [min, minIndex];\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodes = function(root) {\n  if (!root) {\n    return 0;\n  }\n  let leftMin = findMinNodes(root.left);\n  let rightMin = findMinNodes(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/discuss/72434/Java-solution-for-finding-the-minimum-number-of-nodes-in-a-binary-tree\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodes = function(root) {\n  if (!root) {\n    return 0;\n  }\n  let leftMin = findMinNodes(root.left);\n  let rightMin = findMinNodes(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/discuss/72434/Java-solution-for-finding-the-minimum-number-of-nodes-in-a-binary-tree\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodes = function(root) {\n  if (!root) {\n    return 0;\n  }\n  let leftMin = findMinNodes(root.left);\n  let rightMin = findMinNodes(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/discuss/72434/Java-solution-for-finding-the-minimum-number-of-nodes-in-a-binary-tree\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodes = function(root) {\n  if (!root) {\n    return 0;\n  }\n  let leftMin = findMinNodes(root.left);\n  let rightMin = findMinNodes(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/discuss/72434/Java-solution-for-finding-the-minimum-number-of-nodes-in-a-binary-tree\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodes = function(root) {\n  if (!root) {\n    return 0;\n  }\n  let leftMin = findMinNodes(root.left);\n  let rightMin = findMinNodes(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/discuss/72434/Java-solution-for-finding-the-minimum-number-of-nodes-in-a-binary-tree\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodes = function(root) {\n  if (!root) {\n    return 0;\n  }\n  let leftMin = findMinNodes(root.left);\n  let rightMin = findMinNodes(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/discuss/72434/Java-solution-for-finding-the-minimum-number-of-nodes-in-a-binary-tree\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodes = function(root) {\n  if (!root) {\n    return 0;\n  }\n  let leftMin = findMinNodes(root.left);\n  let rightMin = findMinNodes(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/discuss/72434/Java-solution-for-finding-the-minimum-number-of-nodes-in-a-binary-tree\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findMinNodes = function(root) {\n  if (!root) {\n    return 0;\n  }\n  let leftMin = findMinNodes(root.left);\n  let rightMin = findMinNodes(root.right);\n  return Math.min(leftMin, rightMin);\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-nodes-in-a-binary-tree/discuss/72434/Java-solution-for-finding-the-minimum-number-of-nodes-in-a-binary-tree\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = research;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of distinct ways to arrange the integers nums so that nums[i] is in ascending order.\n  You may assume that each element in the array is unique.\n  Example:\n      nums = [1, 2, 3, 4, 5]\n      k = 4\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, 5]\n      nums = [1, 2, 3, 4, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) === 0)\n}\n\n/**\n * Get a random element from a list of strings\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'], 'a')\n  'array'\n  */\nconst getRandomElement = (strings, element) => {\n  return strings[Math.floor(Math.random() * strings.length)]\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4])\n  'array'\n  */\nconst getRandomElements = (strings, elements) => {\n  return getRandomElement(strings, elements[Math.floor(Math.random() * elements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers and a random element from a list of strings\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4], [1, 2, 3, 4])\n  'array'\n  */\nconst getRandomElements = (strings, elements, randomElements) => {\n  return getRandomElement(strings, randomElements[Math.floor(Math.random() * randomElements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers and a random element from a list of strings\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4], [1, 2, 3, 4], ['a', 'b', 'c'])\n  'array'\n  */\nconst getRandomElements = (strings, elements, randomElements, randomElements2) => {\n  return getRandomElement(strings, randomElements[Math.floor(Math.random() * randomElements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers and a random element from a list of strings\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4], [1, 2, 3, 4], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  'array'\n  */\nconst getRandomElements = (strings, elements, randomElements, randomElements2, randomElements3) => {\n  return getRandomElement(strings, randomElements[Math.floor(Math.random() * randomElements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers and a random element from a list of strings\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4], [1, 2, 3, 4], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'])\n  'array'\n  */\nconst getRandomElements = (strings, elements, randomElements, randomElements2, randomElements3, randomElements4) => {\n  return getRandomElement(strings, randomElements[Math.floor(Math.random() * randomElements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers and a random element from a list of strings\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4], [1, 2, 3, 4], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f'])\n  'array'\n  */\nconst getRandomElements = (strings, elements, randomElements, randomElements2, randomElements3, randomElements4, randomElements5) => {\n  return getRandomElement(strings, randomElements[Math.floor(Math.random() * randomElements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers and a random element from a list of strings\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4], [1, 2, 3, 4], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'array'\n  */\nconst getRandomElements = (strings, elements, randomElements, randomElements2, randomElements3, randomElements4, randomElements5, randomElements6) => {\n  return getRandomElement(strings, randomElements[Math.floor(Math.random() * randomElements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers and a random element from a list of strings\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4], [1, 2, 3, 4], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n  'array'\n  */\nconst getRandomElements = (strings, elements, randomElements, randomElements2, randomElements3, randomElements4, randomElements5, randomElements6, randomElements7) => {\n  return getRandomElement(strings, randomElements[Math.floor(Math.random() * randomElements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers and a random element from a list of strings\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4], [1, 2, 3, 4], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n  'array'\n  */\nconst getRandomElements = (strings, elements, randomElements, randomElements2, randomElements3, randomElements4, randomElements5, randomElements6, randomElements7, randomElements8) => {\n  return getRandomElement(strings, randomElements[Math.floor(Math.random() * randomElements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers and a random element from a list of strings\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4], [1, 2, 3, 4], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  'array'\n  */\nconst getRandomElements = (strings, elements, randomElements, randomElements2, randomElements3, randomElements4, randomElements5, randomElements6, randomElements7, randomElements8, randomElements9) => {\n  return getRandomElement(strings, randomElements[Math.floor(Math.random() * randomElements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of numbers and a random element from a list of strings\n * >>> getRandomElements(['abc', 'bacd', 'cde', 'array'], [1, 2, 3, 4], [1, 2, 3, 4], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n  'array'\n  */\nconst getRandomElements = (strings, elements, randomElements, randomElements2, randomElements3, randomElements4, randomElements5, randomElements6, randomElements7, randomElements8, randomElements9, randomElements10) => {\n  return getRandomElement(strings, randomElements[Math.floor(Math.random() * randomElements.length)])\n}\n\n/**\n * Get a random element from a list of strings and a random element from a list of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n      maxIndex = i;\n    }\n  }\n  let newList = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortList([1, 2, 3, 4]) == [4, 1, 2, 3]\n  sortList([5, 5, 5, 5]) == [5, 5, 4, 5]\n  sortList([]) == []\n  */\nconst sortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n      maxIndex = i;\n    }\n  }\n  let newList = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingSortList([1, 2, 3, 4]) == [1, 3, 2, 4]\n  ascendingSortList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  ascendingSortList([]) == []\n  */\nconst ascendingSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n      maxIndex = i;\n    }\n  }\n  let newList = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*\n  Given a list of integers, return list of integers in descending order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  descendingSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descendingSortList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  descendingSortList([]) == []\n  */\nconst descendingSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n      maxIndex = i;\n    }\n  }\n  let newList = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortList([1, 2, 3, 4]) == [4, 1, 2, 3]\n  sortList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortList([]) == []\n  */\nconst sortListAscending = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n      maxIndex = i;\n    }\n  }\n  let newList = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*\n  Given a list of integers, return list of integers in descending order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortList([]) == []\n  */\nconst sortListDescending = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n      maxIndex = i;\n    }\n  }\n  let newList = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortListAscending([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortListAscending([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortListAscending([]) == []\n  */\nconst sortListAscendingDescending = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n      maxIndex = i;\n    }\n  }\n  let newList = [];\n  for (let i = minIndex; i <= maxIndex; i++) {\n    newList.push(lst[i]);\n  }\n  return newList;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortListDescending([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortListDescending([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortListDescending([]) == []\n  */\nconst sortListDescendingDescending = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n      maxIndex = i;\n    }\n  }\n  let newList = [];\n  for (let i = minIndex; i <= maxIndex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = sumA / 2;\n  const sumB = sumB / 2;\n  const sumC = sumC / 2;\n  const sumD = sumD / 2;\n  const sumE = sumE / 2;\n  const sumF = sumF / 2;\n  const sumG = sumG / 2;\n  const sumH = sumH / 2;\n  const sumI = sumI / 2;\n  const sumJ = sumJ / 2;\n  const sumK = sumK / 2;\n  const sumL = sumL / 2;\n  const sumM = sumM / 2;\n  const sumN = sumN / 2;\n  const sumO = sumO / 2;\n  const sumP = sumP / 2;\n  const sumQ = sumQ / 2;\n  const sumR = sumR / 2;\n  const sumS = sumS / 2;\n  const sumT = sumT / 2;\n  const sumU = sumU / 2;\n  const sumV = sumV / 2;\n  const sumW = sumW / 2;\n  const sumX = sumX / 2;\n  const sumY = sumY / 2;\n  const sumZ = sumZ / 2;\n  const sumA = sumA / 3;\n  const sumB = sumB / 3;\n  const sumC = sumC / 3;\n  const sumD = sumD / 3;\n  const sumE = sumE / 3;\n  const sumF = sumF / 3;\n  const sumG = sumG / 3;\n  const sumH = sumH / 3;\n  const sumI = sumI / 3;\n  const sumJ = sumJ / 3;\n  const sumK = sumK / 3;\n  const sumL = sumL / 3;\n  const sumM = sumM / 3;\n  const sumN = sumN / 3;\n  const sumO = sumO / 3;\n  const sumP = sumP / 3;\n  const sumQ = sumQ / 3;\n  const sumR = sumR / 3;\n  const sumS = sumS / 3;\n  const sumT = sumT / 3;\n  const sumU = sumU / 3;\n  const sumV = sumV / 3;\n  const sumW = sumW / 3;\n  const sumX = sumX / 3;\n  const sumY = sumY / 3;\n  const sumZ = sumZ / 3;\n  const sumA = sumA / 4;\n  const sumB = sumB / 4;\n  const sumC = sumC / 4;\n  const sumD = sumD / 4;\n  const sumE = sumE / 4;\n  const sumF = sumF / 4;\n  const sumG = sumG / 4;\n  const sumH = sumH / 4;\n  const sumI = sumI / 4;\n  const sumJ = sumJ / 4;\n  const sumK = sumK / 4;\n  const sumL = sumL / 4;\n  const sumM = sumM / 4;\n  const sumN = sumN / 4;\n  const sumO = sumO / 4;\n  const sumP = sumP / 4;\n  const sumQ = sumQ / 4;\n  const sumR = sumR / 4;\n  const sumS = sumS / 4;\n  const sumT = sumT / 4;\n  const sumU = sumU / 4;\n  const sumV = sumV / 4;\n  const sumW = sumW / 4;\n  const sumX = sumX / 4;\n  const sumY = sumY / 4;\n  const sumZ = sumZ / 4;\n  const sumA = sumA / 5;\n  const sumB = sumB / 5;\n  const sumC = sumC / 5;\n  const sumD = sumD / 5;\n  const sumE = sumE / 5;\n  const sumF = sumF / 5;\n  const sumG = sumG / 5;\n  const sumH = sumH / 5;\n  const sumI = sumI / 5;\n  const sumJ = sumJ / 5;\n  const sumK = sumK / 5;\n  const sumL = sumL / 5;\n  const sumM = sumM / 5;\n  const sumN = sumN / 5;\n  const sumO = sumO / 5;\n  const sumP = sumP / 5;\n  const sumQ = sumQ / 5;\n  const sumR = sumR / 5;\n  const sumS = sumS / 5;\n  const sumT = sumT / 5;\n  const sumU = sumU / 5;\n  const sumV = sumV / 5;\n  const sumW = sumW / 5;\n  const sumX = sumX / 5;\n  const sumY = sumY / 5;\n  const sumZ = sumZ / 5;\n  const sumA = sumA / 6;\n  const sumB = sumB / 6;\n  const sumC = sumC / 6;\n  const sumD = sumD / 6;\n  const sumE = sumE / 6;\n  const sumF = sumF / 6;\n  const sumG = sumG / 6;\n  const sumH = sumH / 6;\n  const sumI = sumI / 6;\n  const sumJ = sumJ / 6;\n  const sumK = sumK / 6;\n  const sumL = sumL / 6;\n  const sumM = sumM / 6;\n  const sumN = sumN / 6;\n  const sumO = sumO / 6;\n  const sumP = sumP / 6;\n  const sumQ = sumQ / 6;\n  const sumR = sumR / 6;\n  const sumS = sumS / 6;\n  const sumT = sumT / 6;\n  const sumU = sumU / 6;\n  const sumV = sumV / 6;\n  const sumW = sumW / 6;\n  const sumX = sumX / 6;\n  const sumY = sumY / 6;\n  const sumZ = sumZ / 6;\n  const sumA = sumA / 7;\n  const sumB = sumB / 7;\n  const sumC = sumC / 7;\n  const sumD = sumD / 7;\n  const sumE = sumE / 7;\n  const sumF = sumF / 7;\n  const sumG = sumG / 7;\n  const sumH = sumH / 7;\n  const sumI = sumI / 7;\n  const sumJ = sumJ / 7;\n  const sumK = sumK / 7;\n  const sumL = sumL / 7;\n  const sumM = sumM / 7;\n  const sumN = sumN / 7;\n  const sumO = sumO / 7;\n  const sumP = sumP / 7;\n  const sumQ = sumQ / 7;\n  const sumR = sumR / 7;\n  const sumS = sumS / 7;\n  const sumT = sumT / 7;\n  const sumU = sumU / 7;\n  const sumV = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = Math.max(...q);\n  const maxWeightWeight = maxWeight * w;\n  const maxWeightSum = q.reduce((acc, cur) => acc + cur, 0);\n  return maxWeightSum <= maxWeightWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is greater than or equal to the minimum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ true\n  # 1+2 is greater than the minimum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is less than the minimum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the minimum possible weight, and it's unbalanced.\n\n  willItFlee([3], 5) ➞ false\n  # 3 is greater than the minimum possible weight, and it's unbalanced.\n  */\nconst willItFlee = (q, w) => {\n  const minWeight = Math.min(...q);\n  const minWeightWeight = minWeight * w;\n  const minWeightSum = q.reduce((acc, cur) => acc + cur, 0);\n  return minWeightSum >= minWeightWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is greater than or equal to the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is greater than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is less than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is greater than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is greater than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = Math.max(...q);\n  const maxWeightWeight = maxWeight * w;\n  const maxWeightSum = q.reduce((acc, cur) => acc + cur, 0);\n  return maxWeightSum >= maxWeightWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the minimum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ true\n  # 1+2 is less than the minimum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is greater than the minimum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the minimum possible weight, and it's unbalanced.\n\n  willItFlee([3], 5) ➞ false\n  # 3 is less than the minimum possible weight, and it's unbalanced.\n  */\nconst willItFlee = (q, w) => {\n  const minWeight = Math.min(...q);\n  const minWeightWeight = minWeight * w;\n  const minWeightSum = q.reduce((acc, cur) => acc + cur, 0);\n  return minWeightSum <= minWeightWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is greater than or equal to the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is greater than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is less than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is greater than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is greater than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const maxWeight = Math.max(...q);\n  const maxWeightWeight = maxWeight * w;\n  const maxWeightSum = q.reduce((acc, cur) => acc + cur, 0);\n  return maxWeightSum >= maxWeightWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the minimum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the minimum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is greater than the minimum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the minimum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the minimum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const minWeight = Math.min(...q);\n  const minWeightWeight = minWeight * w;\n  const minWeightSum = q.reduce((acc, cur) => acc + cur, 0);\n  return minWeightSum <= minWeightWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is greater than or equal to the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is greater than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is less than the maximum possible weight.\n\n  willItFlee([3, 2, 3], ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > min && arr[i]!== arr[i + 1]) {\n      change++;\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChangeReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > min && arr[i]!== arr[i + 1]) {\n      change++;\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChangeReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > min && arr[i]!== arr[i + 1]) {\n      change++;\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChangeReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > min && arr[i]!== arr[i + 1]) {\n      change++;\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChangeReverseReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > min && arr[i]!== arr[i + 1]) {\n      change++;\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChangeReverseReverseReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > min && arr[i]!== arr[i + 1]) {\n      change++;\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChangeReverseReverseReverseReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > min && arr[i]!== arr[i + 1]) {\n      change++;\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChangeReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > min && arr[i]!== arr[i + 1]) {\n      change++;\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChangeReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > min && arr[i]!== arr[i + 1]) {\n      change++;\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChangeReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > min && arr[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1.filter(x => lst2.indexOf(x) === -1);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1.filter(x => lst2.indexOf(x) === -1);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1.filter(x => lst2.indexOf(x) === -1);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1.filter(x => lst2.indexOf(x) === -1);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list contains any one of the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1.filter(x => lst2.indexOf(x)!== -1);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list contains any one of the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1 === len2) {\n    return lst1;\n  }\n  if (len1 > len2) {\n    return lst2;\n  }\n  return lst1.filter(x => lst2.indexOf(x)!== -1);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list contains any one of the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % a === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= a;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the sum of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryNumber = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryNumber(1, 4) => true\n  isElementaryNumber(2, 2) => true\n  isElementaryNumber(8, 2) => true\n  isElementaryNumber(3, 2) => false\n  isElementaryNumber(3, 1) => false\n  isElementaryNumber(5, 3) => false\n  */\nconst isElementaryNumber = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryNumber(1, 4) => true\n  isElementaryNumber(2, 2) => true\n  isElementaryNumber(8, 2) => true\n  isElementaryNumber(3, 2) => false\n  isElementaryNumber(3, 1) => false\n  isElementaryNumber(5, 3) => false\n  */\nconst isElementaryNumber = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryNumber(1, 4) => true\n  isElementaryNumber(2, 2) => true\n  isElementaryNumber(8, 2) => true\n  isElementaryNumber(3, 2) => false\n  isElementaryNumber(3, 1) => false\n  isElementaryNumber(5, 3) => false\n  */\nconst isElementaryNumber = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryNumber(1, 4) => true\n  isElementaryNumber(2, 2) => true\n  isElementaryNumber(8, 2) => true\n  isElementaryNumber(3, 2) => false\n  isElementaryNumber(3, 1) => false\n  isElementaryNumber(5, 3) => false\n  */\nconst isElementaryNumber = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryNumber(1, 4) => true\n  isElementaryNumber(2, 2) => true\n  isElementaryNumber(8, 2) => true\n  isElementaryNumber(3, 2) => false\n  isElementaryNumber(3, 1) => false\n  isElementaryNumber(5, 3) => false\n  */\nconst isElementaryNumber = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryNumber(1, 4) => true\n  isElementaryNumber(2, 2) => true\n  isElementaryNumber(8, 2) => true\n  isElementaryNumber(3, 2) => false\n  isElementaryNumber(3, 1) => false\n  isElementaryNumber(5, 3) => false\n  */\nconst isElementaryNumber = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryNumber(1, 4) => true\n  isElementaryNumber(2, 2) => true\n  isElementaryNumber(8, 2) => true\n  isElementaryNumber(3, 2) => false\n  isElementaryNumber(3, 1) => false\n  isElementaryNumber(5, 3) => false\n  */\nconst isElementaryNumber = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryNumber(1, 4) => true\n  isElementaryNumber(2, 2) => true\n  isElementaryNumber(8, 2) => true\n  isElementaryNumber(3, 2) => false\n  isElementaryNumber(3, 1) => false\n  isElementaryNumber(5, 3) => false\n  */\nconst isElementaryNumber = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryNumber(1, 4) => true\n  isElementaryNumber(2, 2) => true\n  isElementaryNumber(8, 2) => true\n  isElementaryNumber(3, 2) => false\n  isElementaryNumber(3, 1) => false\n  isElementaryNumber(5, 3) => false\n  */\nconst isElementaryNumber = (x, n) => {\n  let isPowerOfN = false;\n  if (n % x === 0) {\n    isPowerOfN = true;\n  }\n  return isPowerOfN;\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a prime number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isprime(1) ==> true\n  isprime(2) ==> false\n  isprime(-1) ==> true\n  isprime(64) ==> true\n  isprime(0) ==> true\n  isprime(180) ==> false\n  */\nconst isprime = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a palindrome.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispalindrome(1) ==> true\n  ispalindrome(2) ==> false\n  ispalindrome(-1) ==> true\n  ispalindrome(64) ==> true\n  ispalindrome(0) ==> true\n  ispalindrome(180) ==> false\n  */\nconst ispalindrome = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a palindrome of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispalindrome(2) ==> true\n  ispalindrome(3) ==> false\n  ispalindrome(-1) ==> true\n  ispalindrome(64) ==> true\n  ispalindrome(0) ==> true\n  ispalindrome(180) ==> false\n  */\nconst ispalindrome2 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a palindrome of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispalindrome(2) ==> true\n  ispalindrome(3) ==> false\n  ispalindrome(-1) ==> true\n  ispalindrome(64) ==> true\n  ispalindrome(0) ==> true\n  ispalindrome(180) ==> false\n  */\nconst ispalindrome3 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a palindrome of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispalindrome(2) ==> true\n  ispalindrome(3) ==> false\n  ispalindrome(-1) ==> true\n  ispalindrome(64) ==> true\n  ispalindrome(0) ==> true\n  ispalindrome(180) ==> false\n  */\nconst ispalindrome4 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a palindrome of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispalindrome(2) ==> true\n  ispalindrome(3) ==> false\n  ispalindrome(-1) ==> true\n  ispalindrome(64) ==> true\n  ispalindrome(0) ==> true\n  ispalindrome(180) ==> false\n  */\nconst ispalindrome5 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a palindrome of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispalindrome(2) ==> true\n  ispalindrome(3) ==> false\n  ispalindrome(-1) ==> true\n  ispalindrome(64) ==> true\n  ispalindrome(0) ==> true\n  ispalindrome(180) ==> false\n  */\nconst ispalindrome6 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a palindrome of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispalindrome(2) ==> true\n  ispalindrome(3) ==> false\n  ispalindrome(-1) ==> true\n  ispalindrome(64) ==> true\n  ispalindrome(0) ==> true\n  ispalindrome(180) ==> false\n  */\nconst ispalindrome7 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a palindrome of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispalindrome(2) ==> true\n  ispalindrome(3) ==> false\n  ispalindrome(-1) ==> true\n  ispalindrome(64) ==> true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let key = '';\n  let numStr = '';\n  let numStrLen = num.length;\n  let numStrLen2 = numStr.length;\n  let numStrLen3 = numStr.length;\n  let numStrLen4 = numStr.length;\n  let numStrLen5 = numStr.length;\n  let numStrLen6 = numStr.length;\n  let numStrLen7 = numStr.length;\n  let numStrLen8 = numStr.length;\n  let numStrLen9 = numStr.length;\n  let numStrLenA = numStr.length;\n  let numStrLenB = numStr.length;\n  let numStrLenC = numStr.length;\n  let numStrLenD = numStr.length;\n  let numStrLenE = numStr.length;\n  let numStrLenF = numStr.length;\n  let numStrLenG = '';\n  let numStrLenH = '';\n  let numStrLenI = '';\n  let numStrLenJ = '';\n  let numStrLenK = '';\n  let numStrLenL = '';\n  let numStrLenM = '';\n  let numStrLenN = '';\n  let numStrLenO = '';\n  let numStrLenP = '';\n  let numStrLenQ = '';\n  let numStrLenR = '';\n  let numStrLenS = '';\n  let numStrLenT = '';\n  let numStrLenU = '';\n  let numStrLenV = '';\n  let numStrLenW = '';\n  let numStrLenX = '';\n  let numStrLenY = '';\n  let numStrLenZ = '';\n  let numStrLena = '';\n  let numStrLenb = '';\n  let numStrLenc = '';\n  let numStrLend = '';\n  let numStrLene = '';\n  let numStrLenf = '';\n  let numStrLeng = '';\n  let numStrLenh = '';\n  let numStrLeni = '';\n  let numStrLenj = '';\n  let numStrLenk = '';\n  let numStrLenl = '';\n  let numStrLenm = '';\n  let numStrLenn = '';\n  let numStrLeno = '';\n  let numStrLenp = '';\n  let numStrLenq = '';\n  let numStrLenr = '';\n  let numStrLens = 0;\n  let numStrLent = '';\n  let numStrLenu = '';\n  let numStrLenv = '';\n  let numStrLenw = '';\n  let numStrLenx = '';\n  let numStrLeny = '';\n  let numStrLenz = '';\n  let numStrLenA = '';\n  let numStrLenB = '';\n  let numStrLenC = '';\n  let numStrLenD = '';\n  let numStrLenE = '';\n  let numStrLenF = '';\n  let numStrLenG = '';\n  let numStrLenH = '';\n  let numStrLenI = '';\n  let numStrLenJ = '';\n  let numStrLenK = '';\n  let numStrLenL = '';\n  let numStrLenM = '';\n  let numStrLenN = '';\n  let numStrLenO = '';\n  let numStrLenP = '';\n  let numStrLenQ = '';\n  let numStrLenR = '';\n  let numStrLenS = '';\n  let numStrLenT = '';\n  let numStrLenU = '';\n  let numStrLenV = '';\n  let numStrLenW = '';\n  let numStrLenX = '';\n  let numStrLenY = '';\n  let numStrLenZ = '';\n  let numStrLena = '';\n  let numStrLenb = '';\n  let numStrLenc = '';\n  let numStrLend = '';\n  let numStrLene = '';\n  let numStrLenf = '';\n  let numStrLeng = '';\n  let numStrLenh = '';\n  let numStrLeni = '';\n  let numStrLenj = '';\n  let numStrLenk = '';\n  let numStrLenl = '';\n  let numStrLenm = '';\n  let numStrLenn = '';\n  let numStrLeno = '';\n  let numStrLenp = '';\n  let numStrLenq = '';\n  let numStrLenr = '';\n  let numStrLens = 0;\n  let numStrLent = '';\n  let numStrLenu = '';\n  let numStrLenv = '';\n  let numStrLenw = '';\n  let numStrLenx = '';\n  let numStrLeny = '';\n  let numStrLenz = '';\n  let numStrLenA = '';\n  let numStrLenB = '';\n  let numStrLenC = '';\n  let numStrLenD = '';\n  let numStrLenE = '';\n  let numStrLenF = '';\n  let numStrLenG = '';\n  let numStrLenH = '';\n  let numStrLenI = '';\n  let numStrLenJ = '';\n  let numStrLenK = '';\n  let numStrLenL = '';\n  let numStrLenM = '';\n  let numStrLenN = '';\n  let numStrLenO = '';\n  let numStrLenP = '';\n  let numStrLenQ = '';\n  let numStrLenR = '';\n  let numStrLenS = '';\n  let numStrLenT = '';\n  let numStrLenU = '';\n  let numStrLenV = '';\n  let numStrLenW = '';\n  let numStrLenX = '';\n  let numStrLenY = '';\n  let numStrLenZ = '';\n  let numStrLena = '';\n  let numStrLenb = '';\n  let numStrLenc = '';\n  let numStrLend = '';\n  let numStrLene = '';\n  let numStrLenf = '';\n  let numStrLeng = '';\n  let numStrLenh = '';\n  let numStrLeni = '';\n  let numStrLenj = '';\n  let numStrLenk = '';\n  let numStrLenl = '';\n  let numStrLenm = '';\n  let numStrLenn = '';\n  let numStrLeno = '';\n  let numStrLenp = '';\n  let numStrLenq = '';\n  let numStrLenr = '';\n  let numStrLens = 0;\n  let numStrLent = '';\n  let numStrLenu = '';\n  let numStrLenv = '';\n  let numStrLenw = '';\n  let numStrLenx = '';\n  let numStrLeny = '';\n  let numStrLenz = '';\n  let numStrLenA = '';\n  let numStrLenB = '';\n  let numStrLenC = '';\n  let numStrLenD = '';\n  let numStrLenE = '';\n  let numStrLenF = '';\n  let numStrLenG = '';\n  let numStrLenH = '';\n  let numStrLenI = '';\n  let numStrLenJ = '';\n  let numStrLenK = '';\n  let numStrLenL = '';\n  let numStrLenM = '';\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinary = parseInt(decimal, 2);\n  let decimalToBinaryString = decimalToBinary.toString(2);\n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    binary += decimalToBinaryString[i];\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a decimal number.\n\n  Examples:\n  decimalToDecimal('hello')   # returns 5\n  decimalToDecimal('123')     # returns 123\n  */\nconst decimalToDecimal = (string) => {\n  let decimal = 0;\n  let decimalToDecimalString = string.toString();\n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    decimal += decimalToDecimalString[i] * Math.pow(10, decimalToDecimalString.length - i - 1);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number.\n\n  Examples:\n  hexadecimalToDecimal('hello')   # returns 5\n  hexadecimalToDecimal('123')     # returns 123\n  */\nconst hexadecimalToDecimal = (string) => {\n  let decimal = 0;\n  let decimalToDecimalString = string.toString();\n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    decimal += decimalToDecimalString[i] * Math.pow(16, decimalToDecimalString.length - i - 1);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number.\n\n  Examples:\n  binaryToDecimal('hello')   # returns 5\n  binaryToDecimal('123')     # returns 123\n  */\nconst binaryToDecimal = (string) => {\n  let decimal = 0;\n  let decimalToDecimalString = string.toString();\n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    decimal += decimalToDecimalString[i] * Math.pow(10, decimalToDecimalString.length - i - 1);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number.\n\n  Examples:\n  hexadecimalToBinary('hello')   # returns '11110'\n  hexadecimalToBinary('123')     # returns '11110'\n  */\nconst hexadecimalToBinary = (string) => {\n  let binary = '';\n  let decimalToBinary = parseInt(string, 2);\n  let decimalToBinaryString = decimalToBinary.toString(2);\n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    binary += decimalToBinaryString[i] + '0';\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a binary number.\n\n  Examples:\n  binaryToBinary('hello')   # returns '11110'\n  binaryToBinary('123')     # returns '11110'\n  */\nconst binaryToBinary = (string) => {\n  let binary = '';\n  let decimalToBinary = parseInt(string, 2);\n  let decimalToBinaryString = decimalToBinary.toString(2);\n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    binary += decimalToBinaryString[i] + '1';\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number.\n\n  Examples:\n  hexadecimalToHexadecimal('hello')   # returns '5'\n  hexadecimalToHexadecimal('123')     # returns '123'\n  */\nconst hexadecimalToHexadecimal = (string) => {\n  let decimal = 0;\n  let decimalToDecimalString = string.toString();\n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    decimal += decimalToDecimalString[i] * Math.pow(16, decimalToDecimalString.length - i - 1);\n  }\n  return decimal.toString(16);\n};\n\n/*\n  Given a string, convert it to a binary number.\n\n  Examples:\n  binaryToHexadecimal('hello')   # returns '11110'\n  binaryToHexadecimal('123')     # returns '11110'\n  */\nconst binaryToHexadecimal = (string) => {\n  let binary = '';\n  let decimalToBinary = parseInt(string, 2);\n  let decimalToBinaryString = decimalToBinary.toString(2);\n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    binary += decimalToBinaryString[i] + '0';\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number.\n\n  Examples:\n  hexadecimalToBinary('hello')   # returns '11110'\n  hexadecimalToBinary('123')     # returns '11110'\n  */\nconst hexadecimalToBinary = (string) => {\n  let binary = '';\n  let decimalToBinary = parseInt(string, 2);\n  let decimalToBinaryString = decimalToBinary.toString(2);\n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    binary += decimalToBinaryString[i] + '1';\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a binary number.\n\n  Examples:\n  binaryToHexadecimal('hello')   # returns '11110'\n  binaryToHexadecimal('123')     # returns '11110'\n  */\nconst binaryToHexadecimal = (string) => {\n  let binary = '';\n  let decimalToBinary = parseInt(string, 2);\n  let decimalToBinaryString = decimalToBinary.toString(2);\n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    binary += decimalToBinaryString[i] + '0';\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a decimal number.\n\n  Examples:\n  decimalToDecimal('hello')   # returns 5\n  decimalToDecimal('123')     # returns 123\n  */\nconst decimalToDecimal = (string) => {\n  let decimal = 0;\n  let decimalToDecimalString = string.toString();\n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    decimal += decimalToDecimalString[i] * Math.pow(10, decimalToDecimalString.length - i - 1);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number.\n\n  Examples:\n  hexadecimalToDecimal('hello')   # returns 5\n  hexadecimalToDecimal('123')     # returns 123\n  */\nconst hexadecimalToDecimal = (string) => {\n  let decimal = 0;\n  let decimalToDecimalString = string.toString();\n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    decimal += decimalToDecimalString[i] * Math.pow(16, decimalToDecimalString.length - i - 1);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number.\n\n  Examples:\n  binaryToDecimal('hello')   # returns 5\n  binaryToDecimal('123')     # returns 123\n  */\nconst binaryToDecimal = (string) => {\n  let decimal = 0;\n  let decimalToDecimalString = string.toString();\n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    decimal += decimalToDecimalString[i] * Math.pow(10, decimalToDecimalString.length - i - 1);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number.\n\n  Examples:\n  hexadecimalToBinary('hello')   # returns '11110'\n  hexadecimalToBinary('123')     # returns '11110'\n  */\nconst hexadecimalToBinary = (string) => {\n  let binary = '';\n  let decimalToBinary = parseInt(string, 2);\n  let decimalToBinaryString = decimalToBinary.toString(2);\n  for (let i = 0; i < decimalToBinaryString.length; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return the list of all possible combinations of integers where the sum is equal to the given integer.\n  >>> kernelCombinations([1, 2, 3, 4], 3)\n  [[1, 2, 3], [1, 3, 4], [2, 3, 4]]\n  >>> kernelCombinations([1, 2, 3, 4], 4)\n  [[1, 2, 3, 4], [1, 3, 4], [2, 3, 4], [1, 4, 3], [2, 3, 4], [1, 4, 4], [2, 3, 4], [1, 4, 5], [2, 3, 4], [1, 4, 6], [2, 3, 4], [1, 4, 7], [2, 3, 4], [1, 4, 8], [2, 3, 4], [1, 4, 9], [2, 3, 4], [1, 5, 4], [2, 3, 4], [1, 5, 5], [2, 3, 4], [1, 5, 6], [2, 3, 4], [1, 5, 7], [2, 3, 4], [1, 5, 8], [2, 3, 4], [1, 5, 9], [2, 3, 4], [1, 6, 4], [2, 3, 4], [1, 6, 5], [2, 3, 4], [1, 6, 6], [2, 3, 4], [1, 6, 7], [2, 3, 4], [1, 6, 8], [2, 3, 4], [1, 6, 9], [2, 3, 4], [1, 7, 4], [2, 3, 4], [1, 7, 5], [2, 3, 4], [1, 7, 6], [2, 3, 4], [1, 7, 7], [2, 3, 4], [1, 7, 8], [2, 3, 4], [1, 7, 9], [2, 3, 4], [1, 8, 4], [2, 3, 4], [1, 8, 5], [2, 3, 4], [1, 8, 6], [2, 3, 4], [1, 8, 7], [2, 3, 4], [1, 8, 8], [2, 3, 4], [1, 8, 9], [2, 3, 4], [1, 9, 4], [2, 3, 4], [1, 9, 5], [2, 3, 4], [1, 9, 6], [2, 3, 4], [1, 9, 7], [2, 3, 4], [1, 9, 8], [2, 3, 4], [1, 9, 9], [2, 3, 5], [2, 3, 4], [1, 10, 4], [2, 3, 4], [1, 10, 5], [2, 3, 4], [1, 10, 6], [2, 3, 4], [1, 10, 7], [2, 3, 4], [1, 10, 8], [2, 3, 4], [1, 10, 9], [2, 3, 5], [2, 3, 4], [1, 11, 4], [2, 3, 4], [1, 11, 5], [2, 3, 4], [1, 11, 6], [2, 3, 4], [1, 11, 7], [2, 3, 4], [1, 11, 8], [2, 3, 4], [1, 11, 9], [2, 3, 5], [2, 3, 4], [1, 12, 4], [2, 3, 4], [1, 12, 5], [2, 3, 4], [1, 12, 6], [2, 3, 4], [1, 12, 7], [2, 3, 4], [1, 12, 8], [2, 3, 4], [1, 12, 9], [2, 3, 5], [2, 3, 4], [1, 13, 4], [2, 3, 4], [1, 13, 5], [2, 3, 4], [1, 13, 6], [2, 3, 4], [1, 13, 7], [2, 3, 4], [1, 13, 8], [2, 3, 4], [1, 13, 9], [2, 3, 5], [2, 3, 4], [1, 14, 4], [2, 3, 4], [1, 14, 5], [2, 3, 4], [1, 14, 6], [2, 3, 4], [1, 14, 7], [2, 3, 4], [1, 14, 8], [2, 3, 4], [1, 14, 9], [2, 3, 5], [2, 3, 4], [1, 15, 4], [2, 3, 4], [1, 15, 5], [2, 3, 4], [1, 15, 6], [2, 3, 4], [1, 15, 7], [2, 3, 4], [1, 15, 8], [2, 3, 4], [1, 15, 9], [2, 3, 5], [2, 3, 4], [1, 16, 4], [2, 3, 4], [1, 16, 5], [2, 3, 4], [1, 16, 6], [2, 3, 4], [1, 16, 7], [2, 3, 4], [1, 16, 8], [2, 3, 4], [1, 16, 9], [2, 3, 5], [2, 3, 4], [1, 17, 4], [2, 3, 4], [1, 17, 5], [2, 3, 4], [1, 17, 6], [2, 3, 4], [1, 17, 7], [2, 3, 4], [1, 17, 8], [2, 3, 4], [1, 17, 9], [2, 3, 5], [2, 3, 4], [1, 18, 4], [2, 3, 4], [1, 18, 5], [2, 3, 4], [1, 18, 6], [2, 3, 4], [1, 18, 7], [2, 3, 4], [1, 18, 8], [2, 3, 4], [1, 18, 9], [2, 3, 5], [2, 3, 4], [1, 19, 4], [2, 3, 4], [1, 19, 5], [2, 3, 4], [1, 19, 6], [2, 3, 4], [1, 19, 7], [2, 3, 4], [1, 19, 8], [2, 3, 4], [1, 19, 9], [2, 3, 5], [2, 3, 4], [1, 20, 4], [2, 3, 4], [1, 20, 5], [2, 3, 4], [1, 20, 6], [2, 3, 4], [1, 20, 7], [2, 3, 4], [1, 20, 8], [2, 3, 4], [1, 20, 9], [2, 3, 5], [2, 3, 4], [1, 21, 4], [2, 3, 4], [1, 21, 5], [2, 3, 4], [1, 21, 6], [2, 3, 4], [1, 21, 7], [2, 3, 4], [1, 21, 8], [2, 3, 4], [1, 21, 9], [2, 3, 5], [2, 3, 4], [1, 22, 4], [2, 3, 4], [1, 22, 5], [2, 3, 4], [1, 22, 6], [2, 3, 4], [1, 22, 7], [2, 3, 4], [1, 22, 8], [2, 3, 4], [1, 22, 9], [2, 3, 5], [2, 3, 4], [1, 23, 4], [2, 3, 4], [1, 23, 5], [2, 3, 4], [1, 23, 6], [2, 3, 4], [1, 23, 7], [2, 3, 4], [1, 23, 8], [2, 3, 4], [1, 23, 9], [2, 3, 5], [2, 3, 4], [1, 24, 4], [2, 3, 4], [1, 24, 5], [2, 3, 4], [1, 24, 6], [2, 3, 4], [1, 24, 7], [2, 3, 4], [1, 24, 8], [2, 3, 4], [1, 24, 9], [2, 3, 5], [2, 3, 4], [1, 25, 4], [2, 3, 4], [1, 25, 5], [2, 3, 4], [1, 25, 6], [2, 3, 4], [1, 25, 7], [2, 3, 4], [1, 25, 8], [2, 3, 4], [1, 25, 9], [2, 3, 5], [2, 3, 4], [1, 26, 4], [2, 3, 4], [1, 26, 5], [2, 3, 4], [1, 26, 6], [2, 3, 4], [1, 26, 7], [2, 3, 4], [1, 26, 8], [2, 3, 4], [1, 26, 9], [2, 3, 5], [2, 3, 4], [1, 27, 4], [2, 3, 4], [1, 27, 5], [2, 3, 4], [1, 27, 6], [2, 3, 4], [1, 27, 7], [2, 3, 4], [1, 27, 8], [2, 3, 4], [1, 27, 9], [2, 3, 5], [2, 3, 4], [1, 28, 4], [2, 3, 4], [1, 28, 5], [2, 3, 4], [1, 28, 6], [2, 3, 4], [1, 28, 7], [2, 3, 4], [1, 28, 8], [2, 3, 4], [1, 28, 9], [2, 3, 5], [2, 3, 4], [1, 29, 4], [2, 3, 4], [1, 29, 5], [2, 3, 4], [1, 29, 6], [2, 3, 4], [1, 29, 7], [2, 3, 4], [1, 29, 8], [2, 3, 4], [1, 29, 9], [2, 3, 5], [2, 3, 4], [1, 30, 4], [2, 3, 4], [1, 30, 5], [2, 3, 4], [1, 30, 6], [2, 3, 4], [1, 30, 7], [2, 3, 4], [1, 30, 8], [2, 3, 4], [1, 30, 9], [2, 3, 5], [2, 3, 4], [1, 31, 4], [2, 3, 4], [1, 31, 5], [2, 3, 4], [1, 31, 6], [2, 3, 4], [1, 31, 7], [2, 3, 4], [1, 31, 8], [2, 3, 4], [1, 31, 9], [2, 3, 5], [2, 3, 4], [1, 32, 4], [2, 3, 4], [1, 32, 5], [2, 3, 4], [1, 32, 6], [2, 3, 4], [1, 32, 7], [2, 3, 4], [1, 32, 8], [2, 3, 4], [1, 32, 9], [2, 3, 5], [2, 3, 4], [1, 33, 4], [2, 3, 4], [1, 33, 5], [2, 3, 4], [1, 33, 6], [2, 3, 4], [1, 33, 7], [2, 3, 4], [1, 33, 8], [2, 3, 4], [1, 33, 9], [2, 3, 5], [2, 3, 4], [1, 34, 4], [2, 3, 4], [1, 34, 5], [2, 3, 4], [1, 34, 6], [2, 3, 4], [1, 34, 7], [", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  let isHappy = true;\n  let count = 0;\n  let letters = [];\n  let letterCount = 0;\n  let letterCount2 = 0;\n  let letterCount3 = 0;\n  let letterCount4 = 0;\n  let letterCount5 = 0;\n  let letterCount6 = 0;\n  let letterCount7 = 0;\n  let letterCount8 = 0;\n  let letterCount9 = 0;\n  let letterCount10 = 0;\n  let letterCount11 = 0;\n  let letterCount12 = 0;\n  let letterCount13 = 0;\n  let letterCount14 = 0;\n  let letterCount15 = 0;\n  let letterCount16 = 0;\n  let letterCount17 = 0;\n  let letterCount18 = 0;\n  let letterCount19 = 0;\n  let letterCount20 = 0;\n  let letterCount21 = 0;\n  let letterCount22 = 0;\n  let letterCount23 = 0;\n  let letterCount24 = 0;\n  let letterCount25 = 0;\n  let letterCount26 = 0;\n  let letterCount27 = 0;\n  let letterCount28 = 0;\n  let letterCount29 = 0;\n  let letterCount30 = 0;\n  let letterCount31 = 0;\n  let letterCount32 = 0;\n  let letterCount33 = 0;\n  let letterCount34 = 0;\n  let letterCount35 = 0;\n  let letterCount36 = 0;\n  let letterCount37 = 0;\n  let letterCount38 = 0;\n  let letterCount39 = 0;\n  let letterCount40 = 0;\n  let letterCount41 = 0;\n  let letterCount42 = 0;\n  let letterCount43 = 0;\n  let letterCount44 = 0;\n  let letterCount45 = 0;\n  let letterCount46 = 0;\n  let letterCount47 = 0;\n  let letterCount48 = 0;\n  let letterCount49 = 0;\n  let letterCount50 = 0;\n  let letterCount51 = 0;\n  let letterCount52 = 0;\n  let letterCount53 = 0;\n  let letterCount54 = 0;\n  let letterCount55 = 0;\n  let letterCount56 = 0;\n  let letterCount57 = 0;\n  let letterCount58 = 0;\n  let letterCount59 = 0;\n  let letterCount60 = 0;\n  let letterCount61 = 0;\n  let letterCount62 = 0;\n  let letterCount63 = 0;\n  let letterCount64 = 0;\n  let letterCount65 = 0;\n  let letterCount66 = 0;\n  let letterCount67 = 0;\n  let letterCount68 = 0;\n  let letterCount69 = 0;\n  let letterCount70 = 0;\n  let letterCount71 = 0;\n  let letterCount72 = 0;\n  let letterCount73 = 0;\n  let letterCount74 = 0;\n  let letterCount75 = 0;\n  let letterCount76 = 0;\n  let letterCount77 = 0;\n  let letterCount78 = 0;\n  let letterCount79 = 0;\n  let letterCount80 = 0;\n  let letterCount81 = 0;\n  let letterCount82 = 0;\n  let letterCount83 = 0;\n  let letterCount84 = 0;\n  let letterCount85 = 0;\n  let letterCount86 = 0;\n  let letterCount87 = 0;\n  let letterCount88 = 0;\n  let letterCount89 = 0;\n  let letterCount90 = 0;\n  let letterCount91 = 0;\n  let letterCount92 = 0;\n  let letterCount93 = 0;\n  let letterCount94 = 0;\n  let letterCount95 = 0;\n  let letterCount96 = 0;\n  let letterCount97 = 0;\n  let letterCount98 = 0;\n  let letterCount99 = 0;\n  let letterCount100 = 0;\n  let letterCount101 = 0;\n  let letterCount102 = 0;\n  let letterCount103 = 0;\n  let letterCount104 = 0;\n  let letterCount105 = 0;\n  let letterCount106 = 0;\n  let letterCount107 = 0;\n  let letterCount108 = 0;\n  let letterCount109 = 0;\n  let letterCount110 = 0;\n  let letterCount111 = 0;\n  let letterCount112 = 0;\n  let letterCount113 = 0;\n  let letterCount114 = 0;\n  let letterCount115 = 0;\n  let letterCount116 = 0;\n  let letterCount117 = 0;\n  let letterCount118 = 0;\n  let letterCount119 = 0;\n  let letterCount120 = 0;\n  let letterCount121 = 0;\n  let letterCount122 = 0;\n  let letterCount123 = 0;\n  let letterCount124 = 0;\n  let letterCount125 = 0;\n  let letterCount126 = 0;\n  let letterCount127 = 0;\n  let letterCount128 = 0;\n  let letterCount129 = 0;\n  let letterCount130 = 0;\n  let letterCount131 = 0;\n  let letterCount132 = 0;\n  let letterCount133 = 0;\n  let letterCount134 = 0;\n  let letterCount135 = 0;\n  let letterCount136 = 0;\n  let letterCount137 = 0;\n  let letterCount138 = 0;\n  let letterCount139 = 0;\n  let letterCount140 = 0;\n  let letterCount141 = 0;\n  let letterCount142 = 0;\n  let letterCount143 = 0;\n  let letterCount144 = 0;\n  let letterCount145 = 0;\n  let letterCount146 = 0;\n  let letterCount147 = 0;\n  let letterCount148 = 0;\n  let letterCount149 = 0;\n  let letterCount150 = 0;\n  let letterCount151 = 0;\n  let letterCount152 = 0;\n  let letterCount153 = 0;\n  let letterCount154 = 0;\n  let letterCount155 = 0;\n  let letterCount156 = 0;\n  let letterCount157 = 0;\n  let letterCount158 = 0;\n  let letterCount159 = 0;\n  let letterCount160 = 0;\n  let letterCount161 = 0;\n  let letterCount162 = 0;\n  let letterCount163 = 0;\n  let letterCount164 = 0;\n  let letterCount165 = 0;\n  let letterCount166 = 0;\n  let letterCount167 = 0;\n  let letterCount168 = 0;\n  let letterCount169 = 0;\n  let letterCount170 = 0;\n  let letterCount171 = 0;\n  let letterCount172 = 0;\n  let letterCount173 = 0;\n  let letterCount174 = 0;\n  let letterCount175 = 0;\n  let letterCount176 = 0;\n  let letterCount177 = 0;\n  let letterCount178 = 0;\n  let letterCount179 = 0;\n  let letterCount180 = 0;\n  let letterCount181 = 0;\n  let letterCount182 = 0;\n  let letterCount183 = 0;\n  let letterCount184 = 0;\n  let letterCount185 = 0;\n  let letterCount186 = 0;\n  let letterCount187 = 0;\n  let letterCount188 = 0;\n  let letterCount189 = 0;\n  let letterCount190 = 0;\n  let letterCount191 = 0;\n  let letterCount192 = 0;\n  let letterCount193 = 0;\n  let letterCount194 = 0;\n  let letterCount195 = 0;\n  let letterCount196 = 0;\n  let letterCount197 = 0;\n  let letterCount198 = 0;\n  let letterCount199 = 0;\n  let letterCount200 = 0;\n  let letterCount201 = 0;\n  let letterCount202 = 0;\n  let letterCount203 = 0;\n  let letterCount204 = 0;\n  let letterCount205 = 0;\n  let letterCount206 = 0;\n  let letterCount207 = 0;\n  let letterCount208 = 0;\n  let letterCount209 = 0;\n  let letterCount210 = 0;\n  let letterCount211 = 0;\n  let letterCount212 = 0;\n  let letterCount213 = 0;\n  let letterCount214 = 0;\n  let letterCount215 = 0;\n  let letterCount216 = 0;\n  let letterCount217 = 0;\n  let letterCount218 = 0;\n  let letterCount219 = 0;\n  let letterCount220 = 0;\n  let letterCount221 = 0;\n  let letterCount222 = 0;\n  let letterCount223 = 0;\n  let letterCount224 = 0;\n  let letterCount225 = 0;\n  let letterCount226 = 0;\n  let letterCount227 = 0;\n  let letterCount228 = 0;\n  let letterCount229 = 0;\n  let letterCount230 = 0;\n  let letterCount231 = 0;\n  let letterCount232 = 0;\n  let letterCount233 = 0;\n  let letterCount234 = 0;\n  let letterCount235 = 0;\n  let letterCount236", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayMean = gradesArraySum / gradesArrayLength;\n  const gradesArrayVariance = gradesArraySum / gradesArrayLength - gradesArrayMean * gradesArrayMean;\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayMean = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayVariance = gradesArray.reduce((a, b) => Math.pow((a - b), 2));\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  isPrime('Hello') == true\n  isPrime('abcdcba') == true\n  isPrime('kittens') == true\n  isPrime('orange') == false\n  */\nconst isPrime = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 2 or 3 or 5 or 7 or 9 or 11 or 13 or 15 or 17 or 19 or 21 or 23\n  or 25 or 27 or 29 or 31 or more or false otherwise\n  Examples\n  isDivisibleBy('Hello') == true\n  isDivisibleBy('abcdcba') == true\n  isDivisibleBy('kittens') == true\n  isDivisibleBy('orange') == false\n  */\nconst isDivisibleBy = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 2 or 3 or 5 or 7 or 9 or 11 or 13 or 15 or 17 or 19 or 21 or 23\n  or 25 or 27 or 29 or 31 or more or false otherwise\n  Examples\n  isPrimeDivisibleBy('Hello') == true\n  isPrimeDivisibleBy('abcdcba') == true\n  isPrimeDivisibleBy('kittens') == true\n  isPrimeDivisibleBy('orange') == false\n  */\nconst isPrimeDivisibleBy = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 2 or 3 or 5 or 7 or 9 or 11 or 13 or 15 or 17 or 19 or 21 or 23\n  or 25 or 27 or 29 or 31 or more or false otherwise\n  Examples\n  isDivisibleByDivisibleBy('Hello') == true\n  isDivisibleByDivisibleBy('abcdcba') == true\n  isDivisibleByDivisibleBy('kittens') == true\n  isDivisibleByDivisibleBy('orange') == false\n  */\nconst isDivisibleByDivisibleBy = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 2 or 3 or 5 or 7 or 9 or 11 or 13 or 15 or 17 or 19 or 21 or 23\n  or 25 or 27 or 29 or 31 or more or false otherwise\n  Examples\n  isPrimeDivisibleByDivisibleBy('Hello') == true\n  isPrimeDivisibleByDivisibleBy('abcdcba') == true\n  isPrimeDivisibleByDivisibleBy('kittens') == true\n  isPrimeDivisibleByDivisibleBy('orange') == false\n  */\nconst isPrimeDivisibleByDivisibleBy = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 2 or 3 or 5 or 7 or 9 or 11 or 13 or 15 or 17 or 19 or 21 or 23\n  or 25 or 27 or 29 or 31 or more or false otherwise\n  Examples\n  isDivisibleByDivisibleByDivisibleBy('Hello') == true\n  isDivisibleByDivisibleByDivisibleBy('abcdcba') == true\n  isDivisibleByDivisibleByDivisibleBy('kittens') == true\n  isDivisibleByDivisibleByDivisibleBy('orange') == false\n  */\nconst isDivisibleByDivisibleByDivisibleBy = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 2 or 3 or 5 or 7 or 9 or 11 or 13 or 15 or 17 or 19 or 21 or 23\n  or 25 or 27 or 29 or 31 or more or false otherwise\n  Examples\n  isPrimeDivisibleByDivisibleByDivisibleBy('Hello') == true\n  isPrimeDivisibleByDivisibleByDivisibleBy('abcdcba') == true\n  isPrimeDivisibleByDivisibleByDivisibleBy('kittens') == true\n  isPrimeDivisibleByDivisibleByDivisibleBy('orange') == false\n  */\nconst isPrimeDivisibleByDivisibleByDivisibleBy = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 2 or 3 or 5 or 7 or 9 or 11 or 13 or 15 or 17 or 19 or 21 or 23\n  or 25 or 27 or 29 or 31 or more or false otherwise\n  Examples\n  isDivisibleByDivisibleByDivisibleByDivisibleBy('Hello') == true\n  isDivisibleByDivisibleByDivisibleByDivisibleBy('abcdcba') == true\n  isDivisibleByDivisibleByDivisibleByDivisibleBy('kittens') == true\n  isDivisibleByDivisibleByDivisibleByDivisibleBy('orange') == false\n  */\nconst isDivisibleByDivisibleByDivisibleByDivisibleBy = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === 'a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst beginZeroEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst beginTwoEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 2; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst beginThreeEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 3; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst beginFourEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 4; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst beginFiveEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 5; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst beginSixEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 6; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\nconst beginSevenEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 7; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\nconst beginEightEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 8; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\nconst beginNineEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 9; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\nconst beginTenEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 10; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\nconst beginElevenEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 11; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\nconst beginTwelveEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 12; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\nconst beginThirteenEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 13; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\nconst beginFourteenEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 14; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\nconst beginFifteenEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 15; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\nconst beginSixteenEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 16; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\nconst beginSeventeenEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 17; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\nconst beginEighteenEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 18; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 19.\n  */\nconst beginNineteenEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 19; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 20.\n  */\nconst beginTwentyEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 20; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 21.\n  */\nconst beginThirtyEnd = (n) => {\n  let count = 0;\n  for (let i = n; i >= 21; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 22.\n  */\nconst beginFortyEnd = (n) => {\n  let count = 0;\n  for (let i = n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let binary = binary.concat(binary.toString());\n  for (let i = 1; i < N; i++) {\n    binary = binary.concat(binary.toString());\n    sum += parseInt(binary.charAt(0), 2);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst resolveDecimal = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  let decimal = decimal.concat(decimal.toString());\n  for (let i = 1; i < N; i++) {\n    decimal = decimal.concat(decimal.toString());\n    sum += parseInt(decimal.charAt(0), 10);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst resolveHexadecimal = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let hexadecimal = hexadecimal.concat(hexadecimal.toString());\n  for (let i = 1; i < N; i++) {\n    hexadecimal = hexadecimal.concat(hexadecimal.toString());\n    sum += parseInt(hexadecimal.charAt(0), 16);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst resolveOctal = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  let octal = octal.concat(octal.toString());\n  for (let i = 1; i < N; i++) {\n    octal = octal.concat(octal.toString());\n    sum += parseInt(octal.charAt(0), 8);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst resolveHexadecimalDecimal = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let hexadecimal = hexadecimal.concat(hexadecimal.toString());\n  for (let i = 1; i < N; i++) {\n    hexadecimal = hexadecimal.concat(hexadecimal.toString());\n    sum += parseInt(hexadecimal.charAt(0), 16);\n    sum += parseInt(hexadecimal.charAt(1), 16);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst resolveHexadecimalOctal = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let hexadecimal = hexadecimal.concat(hexadecimal.toString());\n  for (let i = 1; i < N; i++) {\n    hexadecimal = hexadecimal.concat(hexadecimal.toString());\n    sum += parseInt(hexadecimal.charAt(0), 16);\n    sum += parseInt(hexadecimal.charAt(1), 8);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst resolveHexadecimalDecimalOctal = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let hexadecimal = hexadecimal.concat(hexadecimal.toString());\n  for (let i = 1; i < N; i++) {\n    hexadecimal = hexadecimal.concat(hexadecimal.toString());\n    sum += parseInt(hexadecimal.charAt(0), 16);\n    sum += parseInt(hexadecimal.charAt(1), 8);\n    sum += parseInt(hexadecimal.charAt(2), 8);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst resolveHexadecimalDecimalDecimal = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let hexadecimal = hexadecimal.concat(hexadecimal.toString());\n  for (let i = 1; i < N; i++) {\n    hexadecimal = hexadecimal.concat(hexadecimal.toString());\n    sum += parseInt(hexadecimal.charAt(0), 16);\n    sum += parseInt(hexadecimal.charAt(1), 8);\n    sum += parseInt(hexadecimal.charAt(2), 8);\n    sum += parseInt(hexadecimal.charAt(3), 8);\n  }\n  return sum.toString();\n};\n\n/*Given a positive ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 1 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 3 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 0 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 4 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 6 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 0 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 4 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 0 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 4 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 6 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 0 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 4 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at even indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  return even.length + odd.length;\n};\n\n/*Given a non-empty list of integers lst. lend the odd elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 1 \n  */\nconst lend = (lst) => {\n  let len = lst.length;\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < len; i++) {\n    if (i % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newArr = []\n  let newStr = ''\n  let i = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newArr.push(s[i])\n      } else {\n        newArr.push(s[j])\n      }\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newStr += s[i]\n      } else {\n        newStr += s[j]\n      }\n    }\n  }\n\n  return newStr\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle2 = (s) => {\n  let newArr = []\n  let newStr = ''\n  let i = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newArr.push(s[i])\n      } else {\n        newArr.push(s[j])\n      }\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newStr += s[i]\n      } else {\n        newStr += s[j]\n      }\n    }\n  }\n\n  return newStr\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle3 = (s) => {\n  let newArr = []\n  let newStr = ''\n  let i = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newArr.push(s[i])\n      } else {\n        newArr.push(s[j])\n      }\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newStr += s[i]\n      } else {\n        newStr += s[j]\n      }\n    }\n  }\n\n  return newStr\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle4 = (s) => {\n  let newArr = []\n  let newStr = ''\n  let i = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newArr.push(s[i])\n      } else {\n        newArr.push(s[j])\n      }\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newStr += s[i]\n      } else {\n        newStr += s[j]\n      }\n    }\n  }\n\n  return newStr\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle5 = (s) => {\n  let newArr = []\n  let newStr = ''\n  let i = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newArr.push(s[i])\n      } else {\n        newArr.push(s[j])\n      }\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newStr += s[i]\n      } else {\n        newStr += s[j]\n      }\n    }\n  }\n\n  return newStr\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle6 = (s) => {\n  let newArr = []\n  let newStr = ''\n  let i = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newArr.push(s[i])\n      } else {\n        newArr.push(s[j])\n      }\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newStr += s[i]\n      } else {\n        newStr += s[j]\n      }\n    }\n  }\n\n  return newStr\n}\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle7 = (s) => {\n  let newArr = []\n  let newStr = ''\n  let i = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newArr.push(s[i])\n      } else {\n        newArr.push(s[j])\n      }\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        newStr += s[i]\n      } else {\n        newStr += s[j]\n      }\n    }\n  }\n\n  return newStr\n}\n\n/*\n  Write ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  const result = [];\n  const row = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/**\n * Given an array of non-negative integers, return its sum.\n\n  Example:\n  * sumArray([5, 10, -3]) => 15\n  * sumArray([5, 10, -3, -4]) => 15\n  * sumArray([5, 10, -3, -4, -5]) => 15\n  * sumArray([5, 10, -3, -4, -5, -6, -7, -8, -9]) => 15\n  */\nconst sumArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n};\n\n/**\n * Given an array of non-negative integers, return its maximum value.\n\n  Example:\n  * maxArray([5, 10, -3]) => 10\n  * maxArray([5, 10, -3, -4]) => 10\n  * maxArray([5, 10, -3, -4, -5]) => 10\n  * maxArray([5, 10, -3, -4, -5, -6, -7, -8, -9]) => 10\n  */\nconst maxArray = (array) => {\n  let max = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Given an array of non-negative integers, return its minimum value.\n\n  Example:\n  * minArray([5, 10, -3]) => -5\n  * minArray([5, 10, -3, -4]) => -5\n  * minArray([5, 10, -3, -4, -5]) => -5\n  * minArray([5, 10, -3, -4, -5, -6, -7, -8, -9]) => -5\n  */\nconst minArray = (array) => {\n  let min = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Given an array of non-negative integers, return its median value.\n\n  Example:\n  * medianArray([5, 10, -3]) => 5\n  * medianArray([5, 10, -3, -4]) => 5\n  * medianArray([5, 10, -3, -4, -5]) => 5\n  * medianArray([5, 10, -3, -4, -5, -6, -7, -8, -9]) => 5\n  */\nconst medianArray = (array) => {\n  let median = array.length % 2 === 0\n   ? array[(array.length - 1) / 2]\n    : array[(array.length - 1) / 2 + 1];\n  return median;\n};\n\n/**\n * Given an array of non-negative integers, return its mode value.\n\n  Example:\n  * modeArray([5, 10, -3]) => 3\n  * modeArray([5, 10, -3, -4]) => 3\n  * modeArray([5, 10, -3, -4, -5]) => 3\n  * modeArray([5, 10, -3, -4, -5, -6, -7, -8, -9]) => 3\n  */\nconst modeArray = (array) => {\n  let mode = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > mode) {\n      mode = array[i];\n    }\n  }\n  return mode;\n};\n\n/**\n * Given an array of non-negative integers, return its mode and median value.\n\n  Example:\n  * modeAndMedianArray([5, 10, -3]) => [3, 5]\n  * modeAndMedianArray([5, 10, -3, -4]) => [3, 5]\n  * modeAndMedianArray([5, 10, -3, -4, -5]) => [3, 5]\n  * modeAndMedianArray([5, 10, -3, -4, -5, -6, -7, -8, -9]) => [3, 5]\n  */\nconst modeAndMedianArray = (array) => {\n  let modeAndMedian = modeArray(array);\n  let median = medianArray(array);\n  return [modeAndMedian, median];\n};\n\n/**\n * Given an array of non-negative integers, return its mode and median value without sort.\n\n  Example:\n  * modeAndMedianWithoutSortArray([5, 10, -3]) => [3, 5]\n  * modeAndMedianWithoutSortArray([5, 10, -3, -4]) => [3, 5]\n  * modeAndMedianWithoutSortArray([5, 10, -3, -4, -5]) => [3, 5]\n  * modeAndMedianWithoutSortArray([5, 10, -3, -4, -5, -6, -7, -8, -9]) => [3, 5]\n  */\nconst modeAndMedianWithoutSortArray = (array) => {\n  let modeAndMedian = modeArray(array);\n  let median = medianArray(array);\n  return [modeAndMedian, median];\n};\n\n/**\n * Given an array of non-negative integers, return its mode and median value without sort.\n\n  Example:\n  * modeAndMedianWithoutSortArray([5, 10, -3]) => [3, 5]\n  * modeAndMedianWithoutSortArray([5, 10, -3, -4]) => [3, 5]\n  * modeAndMedianWithoutSortArray([5, 10, -3, -4, -5]) => [3, 5]\n  * modeAndMedianWithoutSortArray([5, 10, -3, -4, -5, -6, -7, -8, -9]) => [3, 5]\n  */\nconst modeAndMedianWithoutSortArrayWithoutSort = (array) => {\n  let modeAndMedian = modeArray(array);\n  let median = medianArray(array);\n  return [modeAndMedian, median];\n};\n\n/**\n * Given an array of non-negative integers, return its mode and median value without sort.\n\n  Example:\n  * modeAndMedianWithoutSortArrayWithoutSort([5, 10, -3]) => [3, 5]\n  * modeAndMedianWithoutSortArrayWithoutSort([5, 10, -3, -4]) => [3, 5]\n  * modeAndMedianWithoutSortArrayWithoutSort([5, 10, -3, -4, -5]) => [3, 5]\n  * modeAndMedianWithoutSortArrayWithoutSort([5, 10, -3, -4, -5, -6, -7, -8, -9]) => [3, 5]\n  */\nconst modeAndMedianWithoutSortArrayWithoutSortWithoutSort = (array) => {\n  let modeAndMedian = modeArray(array);\n  let median = medianArray(array);\n  return [modeAndMedian, median];\n};\n\n/**\n * Given an array of non-negative integers, return its mode and median value without sort.\n\n  Example:\n  * modeAndMedianWithoutSortArrayWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSortWithoutSort", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  let j;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  const maxes = numbers.map(n => Math.max(n, 0));\n  const maxes = maxes.reduce((acc, cur) => Math.max(acc, cur), 0);\n  return numbers.map(n => Math.max(n, maxes));\n};\n\n/* Given a sequence of numbers, return a list of all possible combinations of rolling maximum elements.\n  >>> allCombinations([1, 2, 3, 2, 3, 4, 2])\n  [\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, 3, 4, 4],\n    [1, 2, 3, 3, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nmodule.exports = nextSmallest;\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextLargest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 3\n  nextLargest([5, 1, 4, 3, 2]) == 3\n  nextLargest([]) == null\n  nextLargest([1, 1]) == null\n  */\nconst nextLargest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = nextLargest;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextHighest() that returns the highest element of the list.\n  Return null if there is no such element.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (max === null || max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = nextHighest;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextEven() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  nextEven([1, 2, 3, 4, 5]) == 4\n  nextEven([5, 1, 4, 3, 2]) == 4\n  nextEven([]) == null\n  nextEven([1, 1]) == null\n  */\nconst nextEven = (lst) => {\n  let even = null;\n  let evenIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (even === null || even % 2 === 0) {\n      even = lst[i];\n      evenIndex = i;\n    }\n  }\n  return evenIndex;\n};\n\nmodule.exports = nextEven;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextOddEven() that returns the odd even element of the list.\n  Return null if there is no such element.\n  \n  nextOddEven([1, 2, 3, 4, 5]) == 3\n  nextOddEven([5, 1, 4, 3, 2]) == 3\n  nextOddEven([]) == null\n  nextOddEven([1, 1]) == null\n  */\nconst nextOddEven = (lst) => {\n  let oddEven = null;\n  let oddEvenIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (oddEven === null || oddEven % 2 === 1) {\n      oddEven = lst[i];\n      oddEvenIndex = i;\n    }\n  }\n  return oddEvenIndex;\n};\n\nmodule.exports = nextOddEven;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiples of all the elements of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 12\n  nextMultiple([5, 1, 4, 3, 2]) == 12\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\nconst nextMultiple = (lst) => {\n  let multiple = null;\n  let multipleIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (multiple === null || multiple % 2 === 0) {\n      multiple = lst[i];\n      multipleIndex = i;\n    }\n  }\n  return multipleIndex;\n};\n\nmodule.exports = nextMultiple;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiples() that returns the multiples of all the elements of the list.\n  Return null if there is no such element.\n  \n  nextMultiples([1, 2, 3, 4, 5]) == [12, 24, 36, 48, 64]\n  nextMultiples([5, 1, 4, 3, 2]) == [12, 24, 36, 48, 64]\n  nextMultiples([]) == null\n  nextMultiples([1, 1]) == null\n  */\nconst nextMultiples = (lst) => {\n  let multiples = [];\n  let multipleIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (multiples[multipleIndex] === null || multiples[multipleIndex] % 2 === 0) {\n      multiples[multipleIndex] = lst[i];\n      multipleIndex++;\n    }\n  }\n  return multiples;\n};\n\nmodule.exports = nextMultiples;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultipleOf() that returns the multiples of all the elements of the list.\n  Return null if there is no such element.\n  \n  nextMultipleOf([1, 2, 3, 4, 5]) == [12, 24, 36, 48, 64]\n  nextMultipleOf([5, 1, 4, 3, 2]) == [12, 24, 36, 48, 64]\n  nextMultipleOf([]) == null\n  nextMultipleOf([1, 1]) == null\n  */\nconst nextMultipleOf = (lst) => {\n  let multiple = null;\n  let multipleIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (multiple === null || multiple % 2 === 1) {\n      multiple = lst[i];\n      multipleIndex = i;\n    }\n  }\n  return multipleIndex;\n};\n\nmodule.exports = nextMultipleOf;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultipleOf() that returns the multiples of all the elements of the list.\n  Return null if there is no such element.\n  \n  nextMultipleOf([1, 2, 3, 4, 5]) == [12, 24, 36, 48, 64]\n  nextMultipleOf([5, 1, 4, 3, 2]) == [12, 24, 36, 48, 64]\n  nextMultipleOf([]) == null\n  nextMultipleOf([1, 1]) == null\n  */\nconst nextMultipleOf = (lst) => {\n  let multiples = [];\n  let multipleIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (multiples[multipleIndex] === null || multiples[multipleIndex] % 2 === 1) {\n      multiples[multipleIndex] = lst[i];\n      multipleIndex++;\n    }\n  }\n  return multiples;\n};\n\nmodule.exports = nextMultipleOf;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultipleOf() that returns the multiples of all the elements of the list.\n  Return null if there is no such element.\n  \n  nextMultipleOf([1, 2, 3, 4, 5]) == [12, 24, 36, 48, 64]\n  nextMultipleOf([5, 1, 4, 3, 2]) == [12, 24, 36, 48, 64]\n  nextMultipleOf([]) == null\n  nextMultipleOf([1, 1]) == null\n  */\nconst nextMultipleOf = (lst) => {\n  let multiples = [];\n  let multipleIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (multiples[multipleIndex] === null || multiples[multipleIndex] % 2 === 1) {\n      multiples[multipleIndex] = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === y && y === -z || x === -y && -z === z || x === -z && -y === z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  \n  for(let i = 0; i < message.length; i++) {\n    \n    // Swap letters in message\n    encoded = encoded.replace(message[i], message[i].toLowerCase());\n    \n    // Replace vowels in message\n    encoded = encoded.replace(/[aeiou]/g, function(letter) {\n      return letter.charAt(0).toUpperCase() + letter.slice(1).toLowerCase();\n    });\n  }\n  \n  return encoded;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  \n  for(let i = 0; i < message.length; i++) {\n    \n    // Swap letters in message\n    decoded = decoded.replace(message[i].toLowerCase(), message[i]);\n    \n    // Replace vowels in message\n    decoded = decoded.replace(/[aeiou]/g, function(letter) {\n      return letter.charAt(0).toUpperCase() + letter.slice(1).toLowerCase();\n    });\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAll = (message) => {\n  let decoded = '';\n  \n  for(let i = 0; i < message.length; i++) {\n    \n    // Swap letters in message\n    decoded = decoded.replace(message[i].toLowerCase(), message[i]);\n    \n    // Replace vowels in message\n    decoded = decoded.replace(/[aeiou]/g, function(letter) {\n      return letter.charAt(0).toUpperCase() + letter.slice(1).toLowerCase();\n    });\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAll('TGST')\n  'test'\n  >>> decodeAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllCase = (message) => {\n  let decoded = '';\n  \n  for(let i = 0; i < message.length; i++) {\n    \n    // Swap letters in message\n    decoded = decoded.replace(message[i].toLowerCase(), message[i]);\n    \n    // Replace vowels in message\n    decoded = decoded.replace(/[aeiou]/g, function(letter) {\n      return letter.charAt(0).toUpperCase() + letter.slice(1).toLowerCase();\n    });\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAllCase('TGST')\n  'test'\n  >>> decodeAllCase('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllCaseAll = (message) => {\n  let decoded = '';\n  \n  for(let i = 0; i < message.length; i++) {\n    \n    // Swap letters in message\n    decoded = decoded.replace(message[i].toLowerCase(), message[i]);\n    \n    // Replace vowels in message\n    decoded = decoded.replace(/[aeiou]/g, function(letter) {\n      return letter.charAt(0).toUpperCase() + letter.slice(1).toLowerCase();\n    });\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAllCaseAll('TGST')\n  'test'\n  >>> decodeAllCaseAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllCaseAllCase = (message) => {\n  let decoded = '';\n  \n  for(let i = 0; i < message.length; i++) {\n    \n    // Swap letters in message\n    decoded = decoded.replace(message[i].toLowerCase(), message[i]);\n    \n    // Replace vowels in message\n    decoded = decoded.replace(/[aeiou]/g, function(letter) {\n      return letter.charAt(0).toUpperCase() + letter.slice(1).toLowerCase();\n    });\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAllCaseAllCase('TGST')\n  'test'\n  >>> decodeAllCaseAllCase('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllCaseAllCaseAllCase = (message) => {\n  let decoded = '';\n  \n  for(let i = 0; i < message.length; i++) {\n    \n    // Swap letters in message\n    decoded = decoded.replace(message[i].toLowerCase(), message[i]);\n    \n    // Replace vowels in message\n    decoded = decoded.replace(/[aeiou]/g, function(letter) {\n      return letter.charAt(0).toUpperCase() + letter.slice(1).toLowerCase();\n    });\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  \n  Examples:\n  >>> decodeAllCaseAllCaseAllCase('TGST')\n  'test'\n  >>> decodeAllCaseAllCaseAllCase('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllCaseAllCaseAllCaseAllCase = (message) => {\n  let decoded = '';\n  \n  for(let i = 0; i < message.length; i++) {\n    \n    // Swap letters in message\n    decoded = decoded.replace(message[i].toLowerCase(), message[i]);\n    \n    // Replace vowels in message\n    decoded = decoded.replace(/[aeiou]/g, function(letter) {\n      return letter.charAt(0).toUpperCase() + letter.slice(1).toLowerCase();\n    });\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let maxDigit = 0;\n  let digit = 0;\n  let isPrime = true;\n  let isPrimeDigit = true;\n  let isPrimeDigitDigit = true;\n  let isPrimeDigitDigitDigit = true;\n  let isPrimeDigitDigitDigitDigit = true;\n  let isPrimeDigitDigitDigitDigitDigit = true;\n  let isPrimeDigitDigitDigitDigitDigitDigit = true;\n  let isPrimeDigitDigitDigitDigitDigitDigitDigit = true;\n  let isPrimeDigitDigitDigitDigitDigitDigitDigitDigit = true;\n  let isPrimeDigitDigitDigitDigitDigitDigitDigitDigitDigit = true;\n  let isPrimeDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = true;\n  let isPrimeDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = true;\n  let isPrimeDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = true;\n  let isPrimeDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  let lowerCaseKeys = Object.keys(dict).map(k => k.toLowerCase());\n  let upperCaseKeys = Object.keys(dict).map(k => k.toUpperCase());\n  return lowerCaseKeys.every(k => dict[k] === dict[k.toLowerCase()]);\n};\n\n/*\n  Given a string, return true if all characters are lowercase or all \n  characters are uppercase, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  determineStringCase(\"a\") should return true.\n  determineStringCase(\"A\") should return false.\n  determineStringCase(\"aB\") should return false.\n  determineStringCase(\"aBc\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.\n  determineStringCase(\"aBcD\") should return false.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  let primes = [];\n  let primeCount = 0;\n  let primeCount2 = 0;\n  let primeCount3 = 0;\n  let primeCount4 = 0;\n  let primeCount5 = 0;\n  let primeCount6 = 0;\n  let primeCount7 = 0;\n  let primeCount8 = 0;\n  let primeCount9 = 0;\n  let primeCount10 = 0;\n  let primeCount11 = 0;\n  let primeCount12 = 0;\n  let primeCount13 = 0;\n  let primeCount14 = 0;\n  let primeCount15 = 0;\n  let primeCount16 = 0;\n  let primeCount17 = 0;\n  let primeCount18 = 0;\n  let primeCount19 = 0;\n  let primeCount20 = 0;\n  let primeCount21 = 0;\n  let primeCount22 = 0;\n  let primeCount23 = 0;\n  let primeCount24 = 0;\n  let primeCount25 = 0;\n  let primeCount26 = 0;\n  let primeCount27 = 0;\n  let primeCount28 = 0;\n  let primeCount29 = 0;\n  let primeCount30 = 0;\n  let primeCount31 = 0;\n  let primeCount32 = 0;\n  let primeCount33 = 0;\n  let primeCount34 = 0;\n  let primeCount35 = 0;\n  let primeCount36 = 0;\n  let primeCount37 = 0;\n  let primeCount38 = 0;\n  let primeCount39 = 0;\n  let primeCount40 = 0;\n  let primeCount41 = 0;\n  let primeCount42 = 0;\n  let primeCount43 = 0;\n  let primeCount44 = 0;\n  let primeCount45 = 0;\n  let primeCount46 = 0;\n  let primeCount47 = 0;\n  let primeCount48 = 0;\n  let primeCount49 = 0;\n  let primeCount50 = 0;\n  let primeCount51 = 0;\n  let primeCount52 = 0;\n  let primeCount53 = 0;\n  let primeCount54 = 0;\n  let primeCount55 = 0;\n  let primeCount56 = 0;\n  let primeCount57 = 0;\n  let primeCount58 = 0;\n  let primeCount59 = 0;\n  let primeCount60 = 0;\n  let primeCount61 = 0;\n  let primeCount62 = 0;\n  let primeCount63 = 0;\n  let primeCount64 = 0;\n  let primeCount65 = 0;\n  let primeCount66 = 0;\n  let primeCount67 = 0;\n  let primeCount68 = 0;\n  let primeCount69 = 0;\n  let primeCount70 = 0;\n  let primeCount71 = 0;\n  let primeCount72 = 0;\n  let primeCount73 = 0;\n  let primeCount74 = 0;\n  let primeCount75 = 0;\n  let primeCount76 = 0;\n  let primeCount77 = 0;\n  let primeCount78 = 0;\n  let primeCount79 = 0;\n  let primeCount80 = 0;\n  let primeCount81 = 0;\n  let primeCount82 = 0;\n  let primeCount83 = 0;\n  let primeCount84 = 0;\n  let primeCount85 = 0;\n  let primeCount86 = 0;\n  let primeCount87 = 0;\n  let primeCount88 = 0;\n  let primeCount89 = 0;\n  let primeCount90 = 0;\n  let primeCount91 = 0;\n  let primeCount92 = 0;\n  let primeCount93 = 0;\n  let primeCount94 = 0;\n  let primeCount95 = 0;\n  let primeCount96 = 0;\n  let primeCount97 = 0;\n  let primeCount98 = 0;\n  let primeCount99 = 0;\n  let primeCount100 = 0;\n  let primeCount101 = 0;\n  let primeCount102 = 0;\n  let primeCount103 = 0;\n  let primeCount104 = 0;\n  let primeCount105 = 0;\n  let primeCount106 = 0;\n  let primeCount107 = 0;\n  let primeCount108 = 0;\n  let primeCount109 = 0;\n  let primeCount110 = 0;\n  let primeCount111 = 0;\n  let primeCount112 = 0;\n  let primeCount113 = 0;\n  let primeCount114 = 0;\n  let primeCount115 = 0;\n  let primeCount116 = 0;\n  let primeCount117 = 0;\n  let primeCount118 = 0;\n  let primeCount119 = 0;\n  let primeCount120 = 0;\n  let primeCount121 = 0;\n  let primeCount122 = 0;\n  let primeCount123 = 0;\n  let primeCount124 = 0;\n  let primeCount125 = 0;\n  let primeCount126 = 0;\n  let primeCount127 = 0;\n  let primeCount128 = 0;\n  let primeCount129 = 0;\n  let primeCount130 = 0;\n  let primeCount131 = 0;\n  let primeCount132 = 0;\n  let primeCount133 = 0;\n  let primeCount134 = 0;\n  let primeCount135 = 0;\n  let primeCount136 = 0;\n  let primeCount137 = 0;\n  let primeCount138 = 0;\n  let primeCount139 = 0;\n  let primeCount140 = 0;\n  let primeCount141 = 0;\n  let primeCount142 = 0;\n  let primeCount143 = 0;\n  let primeCount144 = 0;\n  let primeCount145 = 0;\n  let primeCount146 = 0;\n  let primeCount147 = 0;\n  let primeCount148 = 0;\n  let primeCount149 = 0;\n  let primeCount150 = 0;\n  let primeCount151 = 0;\n  let primeCount152 = 0;\n  let primeCount153 = 0;\n  let primeCount154 = 0;\n  let primeCount155 = 0;\n  let primeCount156 = 0;\n  let primeCount157 = 0;\n  let primeCount158 = 0;\n  let primeCount159 = 0;\n  let primeCount160 = 0;\n  let primeCount161 = 0;\n  let primeCount162 = 0;\n  let primeCount163 = 0;\n  let primeCount164 = 0;\n  let primeCount165 = 0;\n  let primeCount166 = 0;\n  let primeCount167 = 0;\n  let primeCount168 = 0;\n  let primeCount169 = 0;\n  let primeCount170 = 0;\n  let primeCount171 = 0;\n  let primeCount172 = 0;\n  let primeCount173 = 0;\n  let primeCount174 = 0;\n  let primeCount175 = 0;\n  let primeCount176 = 0;\n  let primeCount177 = 0;\n  let primeCount178 = 0;\n  let primeCount179 = 0;\n  let primeCount180 = 0;\n  let primeCount181 = 0;\n  let primeCount182 = 0;\n  let primeCount183 = 0;\n  let primeCount184 = 0;\n  let primeCount185 = 0;\n  let primeCount186 = 0;\n  let primeCount187 = 0;\n  let primeCount188 = 0;\n  let primeCount189 = 0;\n  let primeCount190 = 0;\n  let primeCount191 = 0;\n  let primeCount192 = 0;\n  let primeCount193 = 0;\n  let primeCount194 = 0;\n  let primeCount195 = 0;\n  let primeCount196 = 0;\n  let primeCount197 = 0;\n  let primeCount198 = 0;\n  let primeCount199 = 0;\n  let primeCount200 = 0;\n  let primeCount201 = 0;\n  let primeCount202 = 0;\n  let primeCount203 = 0;\n  let primeCount204 = 0;\n  let primeCount205 = 0;\n  let primeCount206 = 0;\n  let primeCount207 = 0;\n  let primeCount208 = 0;\n  let primeCount209 = 0;\n  let primeCount210 = 0;\n  let primeCount211 = 0;\n  let primeCount212 = 0;\n  let primeCount213 = 0;\n  let primeCount214 = 0;\n  let primeCount215 = 0;\n  let primeCount216 = 0;\n  let primeCount217 = 0;\n  let primeCount218 = 0;\n  let primeCount219 = 0;\n  let primeCount220 = 0;\n  let primeCount221 = 0;\n  let primeCount222 = 0;\n  let primeCount223 = 0;\n  let primeCount224 = 0;\n  let primeCount225 = 0;\n  let primeCount226 = 0;\n  let primeCount227 = 0;\n  let primeCount228 = 0;\n  let primeCount229 = 0;\n  let primeCount230 = 0;\n  let primeCount231 = 0;\n  let primeCount232 = 0;\n  let primeCount233 = 0;\n  let primeCount234 = 0;\n  let primeCount235 = 0;\n  let primeCount236 = 0;\n  let primeCount237 = 0;\n  let primeCount238 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  let sum = 0;\n  for (let i = a; i <= b; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  Given a number, return the largest power of 2 that is a \n  multiple of that number.\n  Examples:\n  powerOf2(3) should return 2.\n  powerOf2(4) should return 1.\n  powerOf2(5) should return 0.\n  powerOf2(6) should return 1.\n  powerOf2(7) should return 2.\n  powerOf2(8) should return 3.\n  powerOf2(9) should return 4.\n  powerOf2(10) should return 5.\n  powerOf2(11) should return 6.\n  powerOf2(12) should return 7.\n  powerOf2(13) should return 8.\n  powerOf2(14) should return 9.\n  powerOf2(15) should return 10.\n  powerOf2(16) should return 11.\n  powerOf2(17) should return 12.\n  powerOf2(18) should return 13.\n  powerOf2(19) should return 14.\n  powerOf2(20) should return 15.\n  powerOf2(21) should return 16.\n  powerOf2(22) should return 17.\n  powerOf2(23) should return 18.\n  powerOf2(24) should return 19.\n  powerOf2(25) should return 20.\n  powerOf2(26) should return 21.\n  powerOf2(27) should return 22.\n  powerOf2(28) should return 23.\n  powerOf2(29) should return 24.\n  powerOf2(30) should return 25.\n  powerOf2(31) should return 26.\n  powerOf2(32) should return 27.\n  powerOf2(33) should return 28.\n  powerOf2(34) should return 29.\n  powerOf2(35) should return 30.\n  powerOf2(36) should return 31.\n  powerOf2(37) should return 32.\n  powerOf2(38) should return 33.\n  powerOf2(39) should return 34.\n  powerOf2(40) should return 35.\n  powerOf2(41) should return 36.\n  powerOf2(42) should return 37.\n  powerOf2(43) should return 38.\n  powerOf2(44) should return 39.\n  powerOf2(45) should return 40.\n  powerOf2(46) should return 41.\n  powerOf2(47) should return 42.\n  powerOf2(48) should return 43.\n  powerOf2(49) should return 44.\n  powerOf2(50) should return 45.\n  powerOf2(51) should return 46.\n  powerOf2(52) should return 47.\n  powerOf2(53) should return 48.\n  powerOf2(54) should return 49.\n  powerOf2(55) should return 50.\n  powerOf2(56) should return 51.\n  powerOf2(57) should return 52.\n  powerOf2(58) should return 53.\n  powerOf2(59) should return 54.\n  powerOf2(60) should return 55.\n  powerOf2(61) should return 56.\n  powerOf2(62) should return 57.\n  powerOf2(63) should return 58.\n  powerOf2(64) should return 59.\n  powerOf2(65) should return 60.\n  powerOf2(66) should return 61.\n  powerOf2(67) should return 62.\n  powerOf2(68) should return 63.\n  powerOf2(69) should return 64.\n  powerOf2(70) should return 65.\n  powerOf2(71) should return 66.\n  powerOf2(72) should return 67.\n  powerOf2(73) should return 68.\n  powerOf2(74) should return 69.\n  powerOf2(75) should return 70.\n  powerOf2(76) should return 71.\n  powerOf2(77) should return 72.\n  powerOf2(78) should return 73.\n  powerOf2(79) should return 74.\n  powerOf2(80) should return 75.\n  powerOf2(81) should return 76.\n  powerOf2(82) should return 77.\n  powerOf2(83) should return 78.\n  powerOf2(84) should return 79.\n  powerOf2(85) should return 80.\n  powerOf2(86) should return 81.\n  powerOf2(87) should return 82.\n  powerOf2(88) should return 83.\n  powerOf2(89) should return 84.\n  powerOf2(90) should return 85.\n  powerOf2(91) should return 86.\n  powerOf2(92) should return 87.\n  powerOf2(93) should return 88.\n  powerOf2(94) should return 89.\n  powerOf2(95) should return 90.\n  powerOf2(96) should return 91.\n  powerOf2(97) should return 92.\n  powerOf2(98) should return 93.\n  powerOf2(99) should return 94.\n  powerOf2(100) should return 95.\n  powerOf2(101) should return 96.\n  powerOf2(102) should return 97.\n  powerOf2(103) should return 98.\n  powerOf2(104) should return 99.\n  powerOf2(105) should return 100.\n  powerOf2(106) should return 101.\n  powerOf2(107) should return 102.\n  powerOf2(108) should return 103.\n  powerOf2(109) should return 104.\n  powerOf2(110) should return 105.\n  powerOf2(111) should return 106.\n  powerOf2(112) should return 107.\n  powerOf2(113) should return 108.\n  powerOf2(114) should return 109.\n  powerOf2(115) should return 110.\n  powerOf2(116) should return 111.\n  powerOf2(117) should return 112.\n  powerOf2(118) should return 113.\n  powerOf2(119) should return 114.\n  powerOf2(120) should return 115.\n  powerOf2(121) should return 116.\n  powerOf2(122) should return 117.\n  powerOf2(123) should return 118.\n  powerOf2(124) should return 119.\n  powerOf2(125) should return 120.\n  powerOf2(126) should return 121.\n  powerOf2(127) should return 122.\n  powerOf2(128) should return 123.\n  powerOf2(129) should return 124.\n  powerOf2(130) should return 125.\n  powerOf2(131) should return 126.\n  powerOf2(132) should return 127.\n  powerOf2(133) should return 128.\n  powerOf2(134) should return 129.\n  powerOf2(135) should return 130.\n  powerOf", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'A' && s[l] <= 'Z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  considerLower('aBCdEf') returns 1\n  considerLower('abcdefg') returns 0\n  considerLower('dBBE') returns 0\n  */\nconst considerLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  considerVowel('aBCdEf') returns 1\n  considerVowel('abcdefg') returns 0\n  considerVowel('dBBE') returns 0\n  */\nconst considerVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  considerConsonant('aBCdEf') returns 1\n  considerConsonant('abcdefg') returns 0\n  considerConsonant('dBBE') returns 0\n  */\nconst considerConsonant = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  considerVowel('aBCdEf') returns 1\n  considerVowel('abcdefg') returns 0\n  considerVowel('dBBE') returns 0\n  */\nconst considerVowelOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  considerConsonant('aBCdEf') returns 1\n  considerConsonant('abcdefg') returns 0\n  considerConsonant('dBBE') returns 0\n  */\nconst considerConsonantOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpperOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  let num;\n  let diff;\n  let result;\n  let numStr;\n  let diffStr;\n  let numInt;\n  let diffInt;\n  let numStrInt;\n  let diffStrInt;\n  let numIntInt;\n  let diffIntInt;\n  let numStrIntInt;\n  let diffStrIntInt;\n  let numIntIntInt;\n  let diffIntIntInt;\n  let numStrIntIntInt;\n  let diffStrIntIntInt;\n  let numIntIntIntInt;\n  let diffIntIntIntInt;\n  let numStrIntIntIntInt;\n  let diffStrIntIntIntInt;\n  let numIntIntIntIntInt;\n  let diffIntIntIntIntInt;\n  let numStrIntIntIntIntInt;\n  let diffStrIntIntIntIntInt;\n  let numIntIntIntIntIntInt;\n  let diffIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntIntIntIntIntIntInt;\n  let numStrIntIntIntIntIntIntIntInt;\n  let diffStrIntIntIntIntIntIntIntIntInt;\n  let numIntIntIntIntIntIntIntIntInt;\n  let diffIntIntIntIntInt", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
