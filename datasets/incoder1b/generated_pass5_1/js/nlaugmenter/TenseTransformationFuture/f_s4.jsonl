{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];\n  let closest = numbers[0];", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsIgnoreSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsIgnoreSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsIgnoreSpacesAndParensIgnoreSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsIgnoreSpacesAndParensIgnoreSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsIgnoreSpacesAndParensIgnoreSpacesAndParensIgnoreSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsIgnoreSpacesAndParensIgnoreSpacesAndParensIgnoreSpacesAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsIgnoreSpa", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromeLengthPalindrome = '';\n  let longestPalindromeLengthPalindromeLength = 0;\n  let longestPalindromeLengthPalindromeLengthPalindrome = '';\n  let longestPalindromeLengthPalindromeLengthPalindromeLength = 0;\n  let longestPalindromeLengthPalindromeLengthPalindromeLengthPalindrome = '';\n  let longestPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLength = 0;\n  let longestPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindrome = '';\n  let longestPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLength = 0;\n  let longestPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindrome = '';\n  let longestPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLength = 0;\n  let longestPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLength = 0;\n  let longestPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindromeLengthPalindrome", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [[]]\n  for (let i = 1; i <= n; i++) {\n    levels.push([])\n  }\n  return levels\n}\n\n/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersString = (s) => {\n  const numbers = s.split(/,|\\s/);\n  return numbers.map((n) => parseInt(n, 10));\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersArray = (s) => {\n  const numbers = s.split(/,|\\s/);\n  return numbers.map((n) => parseInt(n, 10));\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersArrayString = (s) => {\n  const numbers = s.split(/,|\\s/);\n  return numbers.map((n) => parseInt(n, 10));\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersArrayStringArray = (s) => {\n  const numbers = s.split(/,|\\s/);\n  return numbers.map((n) => parseInt(n, 10));\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersArrayStringArrayString = (s) => {\n  const numbers = s.split(/,|\\s/);\n  return numbers.map((n) => parseInt(n, 10));\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersArrayStringArrayStringArrayString = (s) => {\n  const numbers = s.split(/,|\\s/);\n  return numbers.map((n) => parseInt(n, 10));\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersArrayStringArrayStringArrayStringArrayString = (s) => {\n  const numbers = s.split(/,|\\s/);\n  return numbers.map((n) => parseInt(n, 10));\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersArrayStringArrayStringArrayStringArrayStringArrayString = (s) => {\n  const numbers = s.split(/,|\\s/);\n  return numbers.map((n) => parseInt(n, 10));\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersArrayStringArrayStringArrayStringArrayStringArrayStringArrayString = (s) => {\n  const numbers = s.split(/,|\\s/);\n  return numbers.map((n) => parseInt(n, 10));\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayString = (s) => {\n  const numbers = s.split(/,|\\s/);\n  return numbers.map((n) => parseInt(n, 10));\n};\n\n/*\n  You will be given a string of numbers and return an array of the numbers. \n  \n  For example:\n  numbersString(\"123, 456, 789\") == [123], [456], [789]\n  numbersString(\"123 456 789\") == [123], [456], [789]\n  numbersString(\"123 456 789, 123 456 789\") == [123], [456], [789], [123], [456], [789]\n  */\nconst numbersArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayString = (s) => {\n  const numbers = s.split(/,|\\s/", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2 === 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest odd integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x % 2 === 0 && y % 2!== 0) {\n    num = x;\n  } else {\n    num = y;\n  }\n  return num;\n};\n\n/*This function will take two positive numbers x and y and will return the \n   biggest integer number that will be ", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let rounded = 0;\n  let remainder = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst evenDigits = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a odd digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst oddDigits = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a multiple of 10. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422, 1]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst multipleOfTens = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 10 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a multiple of 100. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422, 1]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst multipleOf100s = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 100 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a multiple of 1000. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422, 1]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst multipleOf1000s = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 1000 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a multiple of 10000. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422, 1]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst multipleOf10000s = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 10000 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a multiple of 100000. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422, 1]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst multipleOf100000s = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 100000 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a multiple of 1000000. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422, 1]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst multipleOf1000000s = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 1000000 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a multiple of 10000000. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422, 1]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst multipleOf10000000s = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 10000000 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a multiple of 100000000. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422, 1]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst multipleOf100000000s = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 100000000 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a will sort list of all \n   elements that will have a multiple of 1000000000. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422, 1]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst multipleOf1000000000s = (x) => {\n  let result = [];\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 1000000000 === 0) {\n      result.push(x[i]);\n    }\n  }\n  \n  return result;", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length;\n  let reversed = arr.slice().reverse();\n  let reversedLen = reversed.length;\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (reversedLen > i) {\n      result.push(reversed[i]);\n      reversed.splice(i, 1);\n      i--;\n    }\n    i++;\n  }\n  while (j < reversedLen) {\n    result.push(reversed[j]);\n    j++;\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byName = (arr) => {\n  let len = arr.length;\n  let reversed = arr.slice().reverse();\n  let reversedLen = reversed.length;\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (reversedLen > i) {\n      result.push(reversed[i]);\n      reversed.splice(i, 1);\n      i--;\n    }\n    i++;\n  }\n  while (j < reversedLen) {\n    result.push(reversed[j]);\n    j++;\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversed = (arr) => {\n  let len = arr.length;\n  let reversed = arr.slice().reverse();\n  let reversedLen = reversed.length;\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (reversedLen > i) {\n      result.push(reversed[i]);\n      reversed.splice(i, 1);\n      i--;\n    }\n    i++;\n  }\n  while (j < reversedLen) {\n    result.push(reversed[j]);\n    j++;\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversedReversed = (arr) => {\n  let len = arr.length;\n  let reversed = arr.slice().reverse();\n  let reversedLen = reversed.length;\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (reversedLen > i) {\n      result.push(reversed[i]);\n      reversed.splice(i, 1);\n      i--;\n    }\n    i++;\n  }\n  while (j < reversedLen) {\n    result.push(reversed[j]);\n    j++;\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversedReversedReversed = (arr) => {\n  let len = arr.length;\n  let reversed = arr.slice().reverse();\n  let reversedLen = reversed.length;\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (reversedLen > i) {\n      result.push(reversed[i]);\n      reversed.splice(i, 1);\n      i--;\n    }\n    i++;\n  }\n  while (j < reversedLen) {\n    result.push(reversed[j]);\n    j++;\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting ", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/* Implement the function g that will take two parameters: \n   a number and a string, and will return true if that number is even, \n   and false otherwise. \n   the string will be a number that is a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a multiple of 2. \n   the number will be a ", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(n, n+1), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = n; i <= n + 1; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(n, n+1), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeWithFactor = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = n; i <= n + 1; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(n, n+1), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeWithFactorAndFactor = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = n; i <= n + 1; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(n, n+1), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeWithFactorAndFactorAndFactor = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = n; i <= n + 1; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(n, n+1), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them ", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countZeros which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\nconst countZeros = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countEvens which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 1\n  >>> countEvens([1, 1, 2]) == 3\n  */\nconst countEvens = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countOdds which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 1\n  >>> countOdds([1, 1, 2]) == 3\n  */\nconst countOdds = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countDivisibles which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countDivisibles([]) == 0\n  >>> countDivisibles([-1, 11, -11]) == 1\n  >>> countDivisibles([1, 1, 2]) == 3\n  */\nconst countDivisibles = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countMultiples which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countMultiples([]) == 0\n  >>> countMultiples([-1, 11, -11]) == 1\n  >>> countMultiples([1, 1, 2]) == 3\n  */\nconst countMultiples = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countMultiples2 which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countMultiples2([]) == 0\n  >>> countMultiples2([-1, 11, -11]) == 1\n  >>> countMultiples2([1, 1, 2]) == 3\n  */\nconst countMultiples2 = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countMultiples3 which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countMultiples3([]) == 0\n  >>> countMultiples3([-1, 11, -11]) == 1\n  >>> countMultiples3([1, 1, 2]) == 3\n  */\nconst countMultiples3 = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countMultiples4 which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countMultiples4([]) == 0\n  >>> countMultiples4([-1, 11, -11]) == 1\n  >>> countMultiples4([1, 1, 2]) == 3\n  */\nconst countMultiples4 = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countMultiples5 which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countMultiples5([]) == 0\n  >>> countMultiples5([-1, 11, -11]) == 1\n  >>> countMultiples5([1, 1, 2]) == 3\n  */\nconst countMultiples5 = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countMultiples6 which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countMultiples6([]) == 0\n  >>> countMultiples6([-1, 11, -11]) == 1\n  >>> countMultiples6([1, 1, 2]) == 3\n  */\nconst countMultiples6 = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countMultiples7 which will take an array of integers and returns \n   the number of elements which will have a sum of digits== 0. If a number will be \n   negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countMultiples7([]) == 0\n  >>> countMultiples7([-1, 11, -11]) == 1\n  >>> countMultiples7([1, 1, 2]) == 3\n  */\nconst countMultiples7 = (arr) => {\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      num++;\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countMultiples8 which will take an array of integers and returns \n   the number of elements which will ", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrLength = arr.length;\n  let arrCopy = arr.slice();\n  let arrCopyLength = arrCopy.length;\n  let arrCopyCopy = arrCopy.slice();\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopy = arrCopyCopy.slice();\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopy = arrCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopy = arrCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyLength = arrCopy", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let isExchanged;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': ", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let reversed = '';\n  let reversedChar = '';\n  let reversedChars = [];\n  let reversedCharsLength = 0;\n  let reversedCharsIndex = 0;\n  let reversedCharsLengthIndex = 0;\n  let reversedCharsIndexLength = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;\n  let reversedCharsIndexLengthIndex = 0;", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n    }\n    result.push(oddCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of even elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.push(evenCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.push(oddCount);\n    result.push(evenCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of even elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of even digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.push(oddCount);\n    result.push(evenCount);\n    result.push(oddCount);\n    result.push(evenCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.push(oddCount);\n    result.push(evenCount);\n    result.push(oddCount);\n    result.push(evenCount);\n    result.push(oddCount);\n    result.push(evenCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of even elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.push(oddCount);\n    result.push(evenCount);\n    result.push(oddCount);\n    result.push(evenCount);\n    result.push(oddCount);\n    result.push(evenCount);\n    result.push(oddCount);\n    result.push(evenCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of even elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8n", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return minSum;\n    }\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return maxSum;\n    }\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return maxSum;\n    }\n    sum += nums[i];\n    if (sum < maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return minSum;\n    }\n    sum += nums[i];\n    if (sum > minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return maxSum;\n    }\n    sum += nums[i];\n    if (sum < maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return maxSum;\n    }\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return minSum;\n    }\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return maxSum;\n    }\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return maxSum;\n    }\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return maxSum;\n    }\n    sum += nums[i];\n    if (sum < maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return maxSum;\n    }\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return maxSum;\n    }\n    sum += nums[i];\n    if (sum < maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, will find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) ", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += Math.pow(capacity, 2);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You will be given an m x n grid of water buckets. Each bucket will have a capacity of \n   capacity. Your task is to fill the buckets so that each bucket will contain water \n   from all wells. Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          capacity : 5\n      Output: 0\n\n  Constraints:\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFillBucket = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += Math.pow(capacity, 2);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You will be given an m x n grid of water buckets. Each bucket will have a capacity of \n   capacity. Your task is to fill the buckets so that each bucket will contain water \n   from all wells. Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          capacity : 5\n      Output: 0\n\n  Constraints:\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFillBucketBucket = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += Math.pow(capacity, 2);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You will be given an m x n grid of water buckets. Each bucket will have a capacity of \n   capacity. Your task is to fill the buckets so that each bucket will contain water \n   from all wells. Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          capacity : 5\n      Output: 0\n\n  Constraints:\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFillBucketBucketBucket = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += Math.pow(capacity, 2);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You will be given an m x n grid of water buckets. Each bucket will have a capacity of \n   capacity. Your task is to fill the buckets so that each bucket will contain water \n   from all wells. Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          capacity : 5\n      Output: 0\n\n  Constraints:\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFillBucketBucketBucket = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += Math.pow(capacity, 2);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You will be given an m x n grid of water buckets. Each bucket will have a capacity of \n   capacity. Your task is to fill the buckets so that each bucket will contain water \n   from all wells. Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          capacity : 5\n      Output: 0\n\n  Constraints:\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFillBucketBucketBucketBucket = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const arrLen = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let ", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let wordCount = 0;\n  let wordIndex = 0;\n  let wordLength = 0;\n  let wordCount2 = 0;\n  let wordIndex2 = 0;\n  let wordLength2 = 0;\n  let wordCount3 = 0;\n  let wordIndex3 = 0;\n  let wordLength3 = 0;\n  let wordCount4 = 0;\n  let wordIndex4 = 0;\n  let wordLength4 = 0;\n  let wordCount5 = 0;\n  let wordIndex5 = 0;\n  let wordLength5 = 0;\n  let wordCount6 = 0;\n  let wordIndex6 = 0;\n  let wordLength6 = 0;\n  let wordCount7 = 0;\n  let wordIndex7 = 0;\n  let wordLength7 = 0;\n  let wordCount8 = 0;\n  let wordIndex8 = 0;\n  let wordLength8 = 0;\n  let wordCount9 = 0;\n  let wordIndex9 = 0;\n  let wordLength9 = 0;\n  let wordCount10 = 0;\n  let wordIndex10 = 0;\n  let wordLength10 = 0;\n  let wordCount11 = 0;\n  let wordIndex11 = 0;\n  let wordLength11 = 0;\n  let wordCount12 = 0;\n  let wordIndex12 = 0;\n  let wordLength12 = 0;\n  let wordCount13 = 0;\n  let wordIndex13 = 0;\n  let wordLength13 = 0;\n  let wordCount14 = 0;\n  let wordIndex14 = 0;\n  let wordLength14 = 0;\n  let wordCount15 = 0;\n  let wordIndex15 = 0;\n  let wordLength15 = 0;\n  let wordCount16 = 0;\n  let wordIndex16 = 0;\n  let wordLength16 = 0;\n  let wordCount17 = 0;\n  let wordIndex17 = 0;\n  let wordLength17 = 0;\n  let wordCount18 = 0;\n  let wordIndex18 = 0;\n  let wordLength18 = 0;\n  let wordCount19 = 0;\n  let wordIndex19 = 0;\n  let wordLength19 = 0;\n  let wordCount20 = 0;\n  let wordIndex20 = 0;\n  let wordLength20 = 0;\n  let wordCount21 = 0;\n  let wordIndex21 = 0;\n  let wordLength21 = 0;\n  let wordCount22 = 0;\n  let wordIndex22 = 0;\n  let wordLength22 = 0;\n  let wordCount23 = 0;\n  let wordIndex23 = 0;\n  let wordLength23 = 0;\n  let wordCount24 = 0;\n  let wordIndex24 = 0;\n  let wordLength24 = 0;\n  let wordCount25 = 0;\n  let wordIndex25 = 0;\n  let wordLength25 = 0;\n  let wordCount26 = 0;\n  let wordIndex26 = 0;\n  let wordLength26 = 0;\n  let wordCount27 = 0;\n  let wordIndex27 = 0;\n  let wordLength27 = 0;\n  let wordCount28 = 0;\n  let wordIndex28 = 0;\n  let wordLength28 = 0;\n  let wordCount29 = 0;\n  let wordIndex29 = 0;\n  let wordLength29 = 0;\n  let wordCount30 = 0;\n  let wordIndex30 = 0;\n  let wordLength30 = 0;\n  let wordCount31 = 0;\n  let wordIndex31 = 0;\n  let wordLength31 = 0;\n  let wordCount32 = 0;\n  let wordIndex32 = 0;\n  let wordLength32 = 0;\n  let wordCount33 = 0;\n  let wordIndex33 = 0;\n  let wordLength33 = 0;\n  let wordCount34 = 0;\n  let wordIndex34 = 0;\n  let wordLength34 = 0;\n  let wordCount35 = 0;\n  let wordIndex35 = 0;\n  let wordLength35 = 0;\n  let wordCount36 = 0;\n  let wordIndex36 = 0;\n  let wordLength36 = 0;\n  let wordCount37 = 0;\n  let wordIndex37 = 0;\n  let wordLength37 = 0;\n  let wordCount38 = 0;\n  let wordIndex38 = 0;\n  let wordLength38 = 0;\n  let wordCount39 = 0;\n  let wordIndex39 = 0;\n  let wordLength39 = 0;\n  let wordCount40 = 0;\n  let wordIndex40 = 0;\n  let wordLength40 = 0;\n  let wordCount41 = 0;\n  let wordIndex41 = 0;\n  let wordLength41 = 0;\n  let wordCount42 = 0;\n  let wordIndex42 = 0;\n  let wordLength42 = 0;\n  let wordCount43 = 0;\n  let wordIndex43 = 0;\n  let wordLength43 = 0;\n  let wordCount44 = 0;\n  let wordIndex44 = 0;\n  let wordLength44 = 0;\n  let wordCount45 = 0;\n  let wordIndex45 = 0;\n  let wordLength45 = 0;\n  let wordCount46 = 0;\n  let wordIndex46 = 0;\n  let wordLength46 = 0;\n  let wordCount47 = 0;\n  let wordIndex47 = 0;\n  let wordLength47 = 0;\n  let wordCount48 = 0;\n  let wordIndex48 = 0;\n  let wordLength48 = 0;\n  let wordCount49 = 0;\n  let wordIndex49 = 0;\n  let wordLength49 = 0;\n  let wordCount50 = 0;\n  let wordIndex50 = 0;\n  let wordLength50 = 0;\n  let wordCount51 = 0;\n  let wordIndex51 = 0;\n  let wordLength51 = 0;\n  let wordCount52 = 0;\n  let wordIndex52 = 0;\n  let wordLength52 = 0;\n  let wordCount53 = 0;\n  let wordIndex53 = 0;\n  let wordLength53 = 0;\n  let wordCount54 = 0;\n  let wordIndex54 = 0;\n  let wordLength54 = 0;\n  let wordCount55 = 0;\n  let wordIndex55 = 0;\n  let wordLength55 = 0;\n  let wordCount56 = 0;\n  let wordIndex56 = 0;\n  let wordLength56 = 0;\n  let wordCount57 = 0;\n  let wordIndex57 = 0;\n  let wordLength57 = 0;\n  let wordCount58 = 0;\n  let wordIndex58 = 0;\n  let wordLength58 = 0;\n  let wordCount59 = 0;\n  let wordIndex59 = 0;\n  let wordLength59 = 0;\n  let wordCount60 = 0;\n  let wordIndex60 = 0;\n  let wordLength60 = 0;\n  let wordCount61 = 0;\n  let wordIndex61 = 0;\n  let wordLength61 = 0;\n  let wordCount62 = 0;\n  let wordIndex62 = 0;\n  let wordLength62 = 0;\n  let wordCount63 = 0;\n  let wordIndex63 = 0;\n  let wordLength63 = 0;\n  let wordCount64 = 0;\n  let wordIndex64 = 0;\n  let wordLength64 = 0;\n  let wordCount65 = 0;\n  let wordIndex65 = 0;\n  let wordLength65 = 0;\n  let wordCount66 = 0;\n  let wordIndex66 = 0;\n  let wordLength66 = 0;\n  let wordCount67 = 0;\n  let wordIndex67 = 0;\n  let wordLength67 = 0;\n  let wordCount68 = 0;\n  let wordIndex68 = 0;\n  let wordLength68 = 0;\n  let wordCount69 = 0;\n  let wordIndex69 = 0;\n  let wordLength69 = 0;\n  let wordCount70 = 0;\n  let wordIndex70 = 0;\n  let wordLength70 = 0;\n  let wordCount71 = 0;\n  let wordIndex71 = 0;\n  let wordLength71 = 0;\n  let wordCount72 = 0;\n  let wordIndex72 = 0;\n  let wordLength72 = 0;\n  let wordCount73 = 0;\n  let wordIndex73 = 0;\n  let wordLength73 = 0;\n  let wordCount74 = 0;\n  let wordIndex74 = 0;\n  let wordLength74 = 0;\n  let wordCount75 = 0;\n  let wordIndex75 = 0;\n  let wordLength75 = 0;\n  let wordCount76 = 0;\n  let wordIndex76", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex2 = 0;\n  let vowelsArrayLength2 = vowelsArray.length;\n  let vowelsArrayIndex3 = 0;\n  let vowelsArrayLength3 = vowelsArray.length;\n  let vowelsArrayIndex4 = 0;\n  let vowelsArrayLength4 = vowelsArray.length;\n  let vowelsArrayIndex5 = 0;\n  let vowelsArrayLength5 = vowelsArray.length;\n  let vowelsArrayIndex6 = 0;\n  let vowelsArrayLength6 = vowelsArray.length;\n  let vowelsArrayIndex7 = 0;\n  let vowelsArrayLength7 = vowelsArray.length;\n  let vowelsArrayIndex8 = 0;\n  let vowelsArrayLength8 = vowelsArray.length;\n  let vowelsArrayIndex9 = 0;\n  let vowelsArrayLength9 = vowelsArray.length;\n  let vowelsArrayIndex10 = 0;\n  let vowelsArrayLength10 = vowelsArray.length;\n  let vowelsArrayIndex11 = 0;\n  let vowelsArrayLength11 = vowelsArray.length;\n  let vowelsArrayIndex12 = 0;\n  let vowelsArrayLength12 = vowelsArray.length;\n  let vowelsArrayIndex13 = 0;\n  let vowelsArrayLength13 = vowelsArray.length;\n  let vowelsArrayIndex14 = 0;\n  let vowelsArrayLength14 = vowelsArray.length;\n  let vowelsArrayIndex15 = 0;\n  let vowelsArrayLength15 = vowelsArray.length;\n  let vowelsArrayIndex16 = 0;\n  let vowelsArrayLength16 = vowelsArray.length;\n  let vowelsArrayIndex17 = 0;\n  let vowelsArrayLength17 = vowelsArray.length;\n  let vowelsArrayIndex18 = 0;\n  let vowelsArrayLength18 = vowelsArray.length;\n  let vowelsArrayIndex19 = 0;\n  let vowelsArrayLength19 = vowelsArray.length;\n  let vowelsArrayIndex20 = 0;\n  let vowelsArrayLength20 = vowelsArray.length;\n  let vowelsArrayIndex21 = 0;\n  let vowelsArrayLength21 = vowelsArray.length;\n  let vowelsArrayIndex22 = 0;\n  let vowelsArrayLength22 = vowelsArray.length;\n  let vowelsArrayIndex23 = 0;\n  let vowelsArrayLength23 = vowelsArray.length;\n  let vowelsArrayIndex24 = 0;\n  let vowelsArrayLength24 = vowelsArray.length;\n  let vowelsArrayIndex25 = 0;\n  let vowelsArrayLength25 = vowelsArray.length;\n  let vowelsArrayIndex26 = 0;\n  let vowelsArrayLength26 = vowelsArray.length;\n  let vowelsArrayIndex27 = 0;\n  let vowelsArrayLength27 = vowelsArray.length;\n  let vowelsArrayIndex28 = 0;\n  let vowelsArrayLength28 = vowelsArray.length;\n  let vowelsArrayIndex29 = 0;\n  let vowelsArrayLength29 = vowelsArray.length;\n  let vowelsArrayIndex30 = 0;\n  let vowelsArrayLength30 = vowelsArray.length;\n  let vowelsArrayIndex31 = 0;\n  let vowelsArrayLength31 = vowelsArray.length;\n  let vowelsArrayIndex32 = 0;\n  let vowelsArrayLength32 = vowelsArray.length;\n  let vowelsArrayIndex33 = 0;\n  let vowelsArrayLength33 = vowelsArray.length;\n  let vowelsArrayIndex34 = 0;\n  let vowelsArrayLength34 = vowelsArray.length;\n  let vowelsArrayIndex35 = 0;\n  let vowelsArrayLength35 = vowelsArray.length;\n  let vowelsArrayIndex36 = 0;\n  let vowelsArrayLength36 = vowelsArray.length;\n  let vowelsArrayIndex37 = 0;\n  let vowelsArrayLength37 = vowelsArray.length;\n  let vowelsArrayIndex38 = 0;\n  let vowelsArrayLength38 = vowelsArray.length;\n  let vowelsArrayIndex39 = 0;\n  let vowelsArrayLength39 = vowelsArray.length;\n  let vowelsArrayIndex40 = 0;\n  let vowelsArrayLength40 = vowelsArray.length;\n  let vowelsArrayIndex41 = 0;\n  let vowelsArrayLength41 = vowelsArray.length;\n  let vowelsArrayIndex42 = 0;\n  let vowelsArrayLength42 = vowelsArray.length;\n  let vowelsArrayIndex43 = 0;\n  let vowelsArrayLength43 = vowelsArray.length;\n  let vowelsArrayIndex44 = 0;\n  let vowelsArrayLength44 = vowelsArray.length;\n  let vowelsArrayIndex45 = 0;\n  let vowelsArrayLength45 = vowelsArray.length;\n  let vowelsArrayIndex46 = 0;\n  let vowelsArrayLength46 = vowelsArray.length;\n  let vowelsArrayIndex47 = 0;\n  let vowelsArrayLength47 = vowelsArray.length;\n  let vowelsArrayIndex48 = 0;\n  let vowelsArrayLength48 = vowelsArray.length;\n  let vowelsArrayIndex49 = 0;\n  let vowelsArrayLength49 = vowelsArray.length;\n  let vowelsArrayIndex50 = 0;\n  let vowelsArrayLength50 = vowelsArray.length;\n  let vowelsArrayIndex51 = 0;\n  let vowelsArrayLength51 = vowelsArray.length;\n  let vowelsArrayIndex52 = 0;\n  let vowelsArrayLength52 = vowelsArray.length;\n  let vowelsArrayIndex53 = 0;\n  let vowelsArrayLength53 = vowelsArray.length;\n  let vowelsArrayIndex54 = 0;\n  let vowelsArrayLength54 = vowelsArray.length;\n  let vowelsArrayIndex55 = 0;\n  let vowelsArrayLength55 = vowelsArray.length;\n  let vowelsArrayIndex56 = 0;\n  let vowelsArrayLength56 = vowelsArray.length;\n  let vowelsArrayIndex57 = 0;\n  let vowelsArrayLength57 = vowelsArray.length;\n  let vowelsArrayIndex58 = 0;\n  let vowelsArrayLength58 = vowelsArray.length;\n  let vowelsArrayIndex59 = 0;\n  let vowelsArrayLength59 = vowelsArray.length;\n  let vowelsArrayIndex60 = 0;\n  let vowelsArrayLength60 = vowelsArray.length;\n  let vowelsArrayIndex61 = 0;\n  let vowelsArrayLength61 = vowelsArray.length;\n  let vowelsArrayIndex62 = 0;\n  let vowelsArrayLength62 = vowelsArray.length;\n  let vowelsArrayIndex63 = 0;\n  let vowelsArrayLength63 = vowelsArray.length;\n  let vowelsArrayIndex64 = 0;\n  let vowelsArrayLength64 = vowelsArray.length;\n  let vowelsArrayIndex65 = 0;\n  let vowelsArrayLength65 = vowelsArray.length;\n  let vowelsArrayIndex66 = 0;\n  let vowelsArrayLength66 = vowelsArray.length;\n  let vowelsArrayIndex67 = 0;\n  let vowelsArrayLength67 = vowelsArray.length;\n  let vowelsArrayIndex68 = 0;\n  let vowelsArrayLength68", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = 'No';\n  let openParens = 0;\n  let closeParens = 0;\n  let openParensCount = 0;\n  let closeParensCount = 0;\n  let openParensCount2 = 0;\n  let closeParensCount2 = 0;\n  let openParensCount3 = 0;\n  let closeParensCount3 = 0;\n  let openParensCount4 = 0;\n  let closeParensCount4 = 0;\n  let openParensCount5 = 0;\n  let closeParensCount5 = 0;\n  let openParensCount6 = 0;\n  let closeParensCount6 = 0;\n  let openParensCount7 = 0;\n  let closeParensCount7 = 0;\n  let openParensCount8 = 0;\n  let closeParensCount8 = 0;\n  let openParensCount9 = 0;\n  let closeParensCount9 = 0;\n  let openParensCount10 = 0;\n  let closeParensCount10 = 0;\n  let openParensCount11 = 0;\n  let closeParensCount11 = 0;\n  let openParensCount12 = 0;\n  let closeParensCount12 = 0;\n  let openParensCount13 = 0;\n  let closeParensCount13 = 0;\n  let openParensCount14 = 0;\n  let closeParensCount14 = 0;\n  let openParensCount15 = 0;\n  let closeParensCount15 = 0;\n  let openParensCount16 = 0;\n  let closeParensCount16 = 0;\n  let openParensCount17 = 0;\n  let closeParensCount17 = 0;\n  let openParensCount18 = 0;\n  let closeParensCount18 = 0;\n  let openParensCount19 = 0;\n  let closeParensCount19 = 0;\n  let openParensCount20 = 0;\n  let closeParensCount20 = 0;\n  let openParensCount21 = 0;\n  let closeParensCount21 = 0;\n  let openParensCount22 = 0;\n  let closeParensCount22 = 0;\n  let openParensCount23 = 0;\n  let closeParensCount23 = 0;\n  let openParensCount24 = 0;\n  let closeParensCount24 = 0;\n  let openParensCount25 = 0;\n  let closeParensCount25 = 0;\n  let openParensCount26 = 0;\n  let closeParensCount26 = 0;\n  let openParensCount27 = 0;\n  let closeParensCount27 = 0;\n  let openParensCount28 = 0;\n  let closeParensCount28 = 0;\n  let openParensCount29 = 0;\n  let closeParensCount29 = 0;\n  let openParensCount30 = 0;\n  let closeParensCount30 = 0;\n  let openParensCount31 = 0;\n  let closeParensCount31 = 0;\n  let openParensCount32 = 0;\n  let closeParensCount32 = 0;\n  let openParensCount33 = 0;\n  let closeParensCount33 = 0;\n  let openParensCount34 = 0;\n  let closeParensCount34 = 0;\n  let openParensCount35 = 0;\n  let closeParensCount35 = 0;\n  let openParensCount36 = 0;\n  let closeParensCount36 = 0;\n  let openParensCount37 = 0;\n  let closeParensCount37 = 0;\n  let openParensCount38 = 0;\n  let closeParensCount38 = 0;\n  let openParensCount39 = 0;\n  let closeParensCount39 = 0;\n  let openParensCount40 = 0;\n  let closeParensCount40 = 0;\n  let openParensCount41 = 0;\n  let closeParensCount41 = 0;\n  let openParensCount42 = 0;\n  let closeParensCount42 = 0;\n  let openParensCount43 = 0;\n  let closeParensCount43 = 0;\n  let openParensCount44 = 0;\n  let closeParensCount44 = 0;\n  let openParensCount45 = 0;\n  let closeParensCount45 = 0;\n  let openParensCount46 = 0;\n  let closeParensCount46 = 0;\n  let openParensCount47 = 0;\n  let closeParensCount47 = 0;\n  let openParensCount48 = 0;\n  let closeParensCount48 = 0;\n  let openParensCount49 = 0;\n  let closeParensCount49 = 0;\n  let openParensCount50 = 0;\n  let closeParensCount50 = 0;\n  let openParensCount51 = 0;\n  let closeParensCount51 = 0;\n  let openParensCount52 = 0;\n  let closeParensCount52 = 0;\n  let openParensCount53 = 0;\n  let closeParensCount53 = 0;\n  let openParensCount54 = 0;\n  let closeParensCount54 = 0;\n  let openParensCount55 = 0;\n  let closeParensCount55 = 0;\n  let openParensCount56 = 0;\n  let closeParensCount56 = 0;\n  let openParensCount57 = 0;\n  let closeParensCount57 = 0;\n  let openParensCount58 = 0;\n  let closeParensCount58 = 0;\n  let openParensCount59 = 0;\n  let closeParensCount59 = 0;\n  let openParensCount60 = 0;\n  let closeParensCount60 = 0;\n  let openParensCount61 = 0;\n  let closeParensCount61 = 0;\n  let openParensCount62 = 0;\n  let closeParensCount62 = 0;\n  let openParensCount63 = 0;\n  let closeParensCount63 = 0;\n  let openParensCount64 = 0;\n  let closeParensCount64 = 0;\n  let openParensCount65 = 0;\n  let closeParensCount65 = 0;\n  let openParensCount66 = 0;\n  let closeParensCount66 = 0;\n  let openParensCount67 = 0;\n  let closeParensCount67 = 0;\n  let openParensCount68 = 0;\n  let closeParensCount68 = 0;\n  let openParensCount69 = 0;\n  let closeParensCount69 = 0;\n  let openParensCount70 = 0;\n  let closeParensCount70 = 0;\n  let openParensCount71 = 0;\n  let closeParensCount71 = 0;\n  let openParensCount72 = 0;\n  let closeParensCount72 = 0;\n  let openParensCount73 = 0;\n  let closeParensCount73 = 0;\n  let openParensCount74 = 0;\n  let closeParensCount74 = 0;\n  let openParensCount75 = 0;\n  let closeParensCount75 = 0;\n  let openParensCount76 = 0;\n  let closeParensCount76 = 0;\n  let openParensCount77 = 0;\n  let closeParensCount77 = 0;\n  let openParensCount78 = 0;\n  let closeParensCount78 = 0;\n  let openParensCount79 = 0;\n  let closeParensCount79 = 0;\n  let openParensCount80 = 0;\n  let closeParensCount80 = 0;\n  let openParensCount81 = 0;\n  let closeParensCount81 = 0;\n  let openParensCount82 = 0;\n  let closeParensCount82 = 0;\n  let openParensCount83 = 0;\n  let closeParensCount83 = 0;\n  let openParensCount84 = 0;\n  let closeParensCount84 = 0;\n  let openParensCount85 = 0;\n  let closeParensCount85 = 0;\n  let openParensCount86 = 0;\n  let closeParensCount86 = 0;\n  let openParensCount87 = 0;", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longestString = ''\n  let longestLength = 0\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longestString = strings[i]\n      longestLength = strings[i].length\n    }\n  }\n  return longestString\n}\n\nmodule.exports = longest\n\n},{}],6:[function(require,module,exports){\nconst { createHash } = require('crypto')\nconst { randomBytes } = require('crypto')\n\nconst randomString = (length) => {\n  const buffer = randomBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHex = (length) => {\n  const buffer = randomBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomBytes = (length) => {\n  const buffer = Buffer.alloc(length)\n  randomBytes(buffer, 0, length)\n  return buffer\n}\n\nconst randomHexBytes = (length) => {\n  const buffer = Buffer.alloc(length)\n  randomHexBytes(buffer, 0, length)\n  return buffer\n}\n\nconst randomHexString = (length) => {\n  const buffer = randomHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringBytes = (length) => {\n  const buffer = randomHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHex = (length) => {\n  const buffer = randomHexString(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexBytes = (length) => {\n  const buffer = randomHexStringBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHex = (length) => {\n  const buffer = randomHexStringHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexBytes = (length) => {\n  const buffer = randomHexStringHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexString = (length) => {\n  const buffer = randomHexStringHexHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringBytes = (length) => {\n  const buffer = randomHexStringHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHex = (length) => {\n  const buffer = randomHexStringHexHexString(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringBytes = (length) => {\n  const buffer = randomHexStringHexHexStringBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHex = (length) => {\n  const buffer = randomHexStringHexHexStringHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHex = (length) => {\n  const buffer = randomHexStringHexHexStringHexHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHex = (length) => {\n  const buffer = randomHexStringHexHexStringHexHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHex = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexHex = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexHex = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHexHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexHex = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHexHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexHexBytes = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHexBytes(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHexHex = (length) => {\n  const buffer = randomHexStringHexHexStringHexHexHex(length)\n  return buffer.toString('hex')\n}\n\nconst randomHexStringHexHexStringHexHexHex", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > maxValue) {\n      max = arr[i];\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return [maxValue, maxIndex];\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/10185/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-pair", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome. \n\n  Examples\n  is_palindrome(12) ==> true\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(121) ==> false\n  is_palindrome(12", "passed": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most three digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 36 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most four digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 60 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most five digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 72 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most six digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 90 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most seven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 108 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most eight digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 144 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most nine digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 180 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most ten digits from the first k elements of arr.\n\n  ", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    collatz.push(num);\n    num = num * 3 + 1;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a will sort list that will have the even numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, 16, 8, 4, 2. \n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    collatz.push(num);\n    num = num * 3 + 1;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a will sort list that will have the prime numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13] \n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    collatz.push(num);\n    num = num * 3 + 1;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a will sort list that will have the prime numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13] \n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    collatz.push(num);\n    num = num * 3 + 1;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a will sort list that will have the prime numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13] \n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    collatz.push(num);\n    num = num * 3 + 1;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a will sort list that will have the prime numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13] \n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    collatz.push(num);\n    num = num * 3 + 1;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a will sort list that will have the prime numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous ", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let isValid = true;\n  let dateString = date.toString();\n  let dateArray = dateString.split('-');\n  let dateArrayLength = dateArray.length;\n  let monthArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  let monthArrayLength = monthArray.length;\n  let dayArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  let dayArrayLength = dayArray.length;\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let yearArrayLength = yearArray.length;\n  let monthArrayLength = monthArray.length;\n  let dayArrayLength = dayArray.length;\n  let yearArrayLength = yearArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArray.length;", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = []\n  let word = ''\n  let wordCount = 0\n  let wordOrder = 0\n  let wordOrderCount = 0\n  let wordOrderLetters = []\n  let wordOrderLettersCount = 0\n  let wordOrderLettersLetters = []\n  let wordOrderLettersLettersCount = 0\n  let wordOrderLettersLettersLettersCount = 0\n  let wordOrderLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLettersLetter", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let isSorted = false;\n  let arr = [];\n  lst.forEach((item, index) => {\n    if (arr.includes(item)) {\n      isSorted = true;\n    }\n    arr.push(item);\n  });\n  return isSorted;\n};\n\n/* Given a list of numbers, return whether or not they will be sorted \n   in descending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDescending = (lst) => {\n  let isSorted = false;\n  let arr = [];\n  lst.forEach((item, index) => {\n    if (arr.includes(item)) {\n      isSorted = true;\n    }\n    arr.push(item);\n  });\n  return isSorted;\n};\n\n/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isAscending = (lst) => {\n  let isSorted = false;\n  let arr = [];\n  lst.forEach((item, index) => {\n    if (arr.includes(item)) {\n      isSorted = true;\n    }\n    arr.push(item);\n  });\n  return isSorted;\n};\n\n/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDescendingAscending = (lst) => {\n  let isSorted = false;\n  let arr = [];\n  lst.forEach((item, index) => {\n    if (arr.includes(item)) {\n      isSorted = true;\n    }\n    arr.push(item);\n  });\n  return isSorted;\n};\n\n/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isAscendingDescending = (lst) => {\n  let isSorted = false;\n  let arr = [];\n  lst.forEach((item, index) => {\n    if (arr.includes(item)) {\n      isSorted = true;\n    }\n    arr.push(item);\n  });\n  return isSorted;\n};\n\n/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDescendingAscendingDescending = (lst) => {\n  let isSorted = false;\n  let arr = [];\n  lst.forEach((item, index) => {\n    if (arr.includes(item)) {\n      isSorted = true;\n    }\n    arr.push(item);\n  });\n  return isSorted;\n};\n\n/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isAscendingDescendingDescending = (lst) => {\n  let isSorted = false;\n  let arr = [];\n  lst.forEach((item, index) => {\n    if (arr.includes(item)) {\n      isSorted = true;\n    }\n    arr.push(item);\n  });\n  return isSorted;\n};\n\n/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) �", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let start2 = interval2[0];\n  let end1 = interval1[1];\n  let end2 = interval2[1];\n  let result = [];\n  if (start1 < end1 && start2 < end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start1 > end2) {\n    if (start1 < start2) {\n      result.push(start1);\n    }\n    if (end1 < end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 > end1 && start2 > end2) {\n    if (start1 > start2) {\n      result.push(start1);\n    }\n    if (end1 > end2) {\n      result.push(end1);\n    }\n  }\n  if (start1 < end1 && start", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  arr.forEach((num) => {\n    if (num < 0) {\n      sum *= -1;\n    }\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversed = (arr) => {\n  let sum = 0;\n  arr.forEach((num) => {\n    if (num < 0) {\n      sum *= -1;\n    }\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversed = (arr) => {\n  let sum = 0;\n  arr.forEach((num) => {\n    if (num < 0) {\n      sum *= -1;\n    }\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversed = (arr) => {\n  let sum = 0;\n  arr.forEach((num) => {\n    if (num < 0) {\n      sum *= -1;\n    }\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversedReversed = (arr) => {\n  let sum = 0;\n  arr.forEach((num) => {\n    if (num < 0) {\n      sum *= -1;\n    }\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversedReversedReversed = (arr) => {\n  let sum = 0;\n  arr.forEach((num) => {\n    if (num < 0) {\n      sum *= -1;\n    }\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversedReversedReversedReversedReversed = (arr) => {\n  let sum = 0;\n  arr.forEach((num) => {\n    if (num < 0) {\n      sum *= -1;\n    }\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let lst_A = new Array(k).fill(0);\n  let lst_B = new Array(k).fill(0);\n  let ans = lst_A.sort((a, b) => a - b);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ans.map(v => v + 1);\n  ans = ans.filter(v => v > 0);\n  ans = ", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Check if a number is even\n * \n * @param {number} n\n */\nconst isEven = function (n) {\n  return n % 2 === 0\n}\n\n/**\n * Check if a number is odd\n * \n * @param {number} n\n */\nconst isOdd = function (n) {\n  return n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByN = function (n) {\n  return n % 1 === 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByTwo = function (n) {\n  return n % 1 === 1 && n % 2!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByThree = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByFour = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByFive = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleBySix = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleBySeven = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByEight = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByNine = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7!== 0 && n % 8!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByTen = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByEleven = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByTwelve = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10!== 0 && n % 11!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByThirteen = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10!== 0 && n % 11!== 0 && n % 12!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByFourteen = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10!== 0 && n % 11!== 0 && n % 12!== 0 && n % 13!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByFifteen = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10!== 0 && n % 11!== 0 && n % 12!== 0 && n % 13!== 0 && n % 14!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleBySixteen = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10!== 0 && n % 11!== 0 && n % 12!== 0 && n % 13!== 0 && n % 14!== 0 && n % 15!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleBySeventeen = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10!== 0 && n % 11!== 0 && n % 12!== 0 && n % 13!== 0 && n % 14!== 0 && n % 15!== 0 && n % 16!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByEighteen = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10!== 0 && n % 11!== 0 && n % 12!== 0 && n % 13!== 0 && n % 14!== 0 && n % 15!== 0 && n % 16!== 0 && n % 17!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByNineteen = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10!== 0 && n % 11!== 0 && n % 12!== 0 && n % 13!== 0 && n % 14!== 0 && n % 15!== 0 && n % 16!== 0 && n % 17!== 0 && n % 18!== 0\n}\n\n/**\n * Check if a number is divisible by n\n * \n * @param {number} n\n */\nconst isDivisibleByTwenty = function (n) {\n  return n % 1 === 1 && n % 2 === 0 && n % 3 === 0 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10!== 0 && n % 11!== ", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n];\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(131) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n            2049, 4097, 6149, 8191, 12289, 16385, 24577, 0, 4097, 6149, 8191, 12289, 16385, 24577,\n            26293, 524287, 1048573, 2097143, 4194303, 8388593, 16777213, 33554393, 67108859, 134217689, 268435311,\n            536870911, 1073741823, 2147483647, 0 ]\n  fib(Number.MAX_VALUE) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n            2049, 4097, 6149, 8191, 12289, 16385, 24577, 0, 4097, 6149, 8191, 12289, 16385, 24577,\n            26293, 524287, 1048573, 2097143, 4194303, 8388593, 16777213, 33554393, 67108859, 134217689, 268435311,\n            536870911, 1073741823, 2147483647, Number.MAX_VALUE ]\n*/\nconst fib = (n) => {\n  if (n <= 1) return [n];\n  return [fib(n - 1) + fib(n - 2) + fib(n - 3)];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n            2049, 4097, 6149, 8191, 12289, 16385, 24577, 0, 4097, 6149, 8191, 12289, 16385, 24577,\n            26293, 524287, 1048573, 2097143, 4194303, 8388593, 16777213, 33554393, 67108859, 134217689, 268435311,\n            536870911, 1073741823, 2147483647, 0 ]\n  fib(Number.MAX_VALUE) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n            2049, 4097, 6149, 8191, 12289, 16385, 24577, 0, 4097, 6149, 8191, 12289, 16385, 24577,\n            26293, 524287, 1048573, 2097143, 4194303, 8388593, 16777213, 33554393, 67108859, 134217689, 268435311,\n            536870911, 1073741823, 2147483647, Number.MAX_VALUE ]\n*/\nconst fibSum = (n) => {\n  if (n <= 1) return [n];\n  return [fibSum(n - 1) + fibSum(n - 2) + fibSum(n - 3)];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n            2049, 4097, 6149, 8191, 12289, 16385, 24577, 0, 4097, 6149, 8191, 12289, 16385, 24577,\n            26293, 524287, 1048573, 2097143, 4194303, 8388593, 16777213, 33554393, 67108859, 134217689, 268435311,\n            536870911, 1073741823, 2147483647, 0 ]\n  fib(Number.MAX_VALUE) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n            2049, 4097, 6149, 8191, 12289, 16385, 24577, 0, 4097, 6149, 8191, 12289, 16385, 24577,\n            26293, 524287, 1048573, 2097143, 4194303, 8388593, 16777213, 33554393, 67108859, 134217689, 268435311,\n            536870911, 1073741823, 2147483647, Number.MAX_VALUE ]\n*/\nconst fibSum2 = (sum) => {\n  if (sum <= 1) return [sum];\n  return [fibSum2(sum - 1) + fibSum2(sum - 2) + fibSum2(sum - 3)];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n            2049, 4097, 6149, 8191, 12289, 16385, 24577, 0, 4097, 6149, 8191, 12", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  for (let i = 2; i <= n; i++) {\n    digit *= i;\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n   Return 0 if all digits will be odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst evenDigits = (n) => {\n  let digit = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      digit *= i;\n    }\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum2 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum3 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum4 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum5 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum6 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum7 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum8 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum9 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum10 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum11 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum12 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum13 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum14 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum15 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum16 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits in base 2.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum17 = (n) => {\n", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   let brackets=[];\n   let nestedBrackets=[];\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount=0;\n   let ", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sumSquares([1,2,3]) should return 14\n  sumSquares([1,4,9]) should return 98\n  sumSquares([1,3,5,7]) should return 84\n  sumSquares([1.4,4.2,0]) should return 29\n  sumSquares([-2.4,1,1]) should return 6\n*/\nconst sumSquaresArray = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sumSquaresArray([1,2,3]) should return 14\n  sumSquaresArray([1,4,9]) should return 98\n  sumSquaresArray([1,3,5,7]) should return 84\n  sumSquaresArray([1.4,4.2,0]) should return 29\n  sumSquaresArray([-2.4,1,1]) should return 6\n*/\nconst sumSquaresArray2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sumSquaresArray2([1,2,3]) should return 14\n  sumSquaresArray2([1,4,9]) should return 98\n  sumSquaresArray2([1,3,5,7]) should return 84\n  sumSquaresArray2([1.4,4.2,0]) should return 29\n  sumSquaresArray2([-2.4,1,1]) should return 6\n*/\nconst sumSquaresArray3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sumSquaresArray3([1,2,3]) should return 14\n  sumSquaresArray3([1,4,9]) should return 98\n  sumSquaresArray3([1,3,5,7]) should return 84\n  sumSquaresArray3([1.4,4.2,0]) should return 29\n  sumSquaresArray3([-2.4,1,1]) should return 6\n*/\nconst sumSquaresArray4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sumSquaresArray4([1,2,3]) should return 14\n  sumSquaresArray4([1,4,9]) should return 98\n  sumSquaresArray4([1,3,5,7]) should return 84\n  sumSquaresArray4([1.4,4.2,0]) should return 29\n  sumSquaresArray4([-2.4,1,1]) should return 6\n*/\nconst sumSquaresArray5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sumSquaresArray5([1,2,3]) should return 14\n  sumSquaresArray5([1,4,9]) should return 98\n  sumSquaresArray5([1,3,5,7]) should return 84\n  sumSquaresArray5([1.4,4.2,0]) should return 29\n  sumSquaresArray5([-2.4,1,1]) should return 6\n*/\nconst sumSquaresArray6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sumSquaresArray6([1,2,3]) should return 14\n  sumSquaresArray6([1,4,9]) should return 98\n  sumSquaresArray6([1,3,5,7]) should return 84\n  sumSquaresArray6([1.4,4.2,0]) should return 29\n  sumSquaresArray6([-2.4,1,1]) should return 6\n*/\nconst sumSquaresArray7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sumSquaresArray7([1,2,3]) should return 14\n  sumSquaresArray7([1,4,9]) should return 98\n  sumSquaresArray7([1,3,5,7]) should return 84\n  sumSquaresArray7([1.4,4.2,0]) should return 29\n  sumSquaresArray7([-2.4,1,1]) should return 6\n*/\nconst sumSquaresArray8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sumSquaresArray8([1,2,3]) should return 14\n  sumSquaresArray8([1,4,9]) should return 98\n  sumSquaresArray8([1,3,5,7]) should return 84\n  sumSquaresArray8([1.4,4.2,0]) should return 29\n  sumSquaresArray8([-2.4,1,1]) should return 6\n*/\nconst sumSquaresArray9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sumSquaresArray9([1,2,3]) should return 14\n  sumSquaresArray9([1,4,9]) should return 98\n  sumSquaresArray9([1,3,5,7]) should return 84\n  sumSquaresArray9([1.4,4.2,0]) should return 29\n  sumSquaresArray9([-2.4,1,1]) should return 6\n*/\nconst sumSquaresArray10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of squared numbers in the array.\n  Examples:\n  sum", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = false\n  \n  if(lastChar === \" \") {\n    isALetter = true\n  }\n  \n  return isALetter\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be a number and not a part of a word, and \n   false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = false\n  \n  if(lastChar === \".\") {\n    isALetter = true\n  }\n  \n  return isALetter\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be a number and not a part of a word, and \n   false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = false\n  \n  if(lastChar === \"-\") {\n    isALetter = true\n  }\n  \n  return isALetter\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be a number and not a part of a word, and \n   false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = false\n  \n  if(lastChar === \"/\") {\n    isALetter = true\n  }\n  \n  return isALetter\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be a number and not a part of a word, and \n   false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = false\n  \n  if(lastChar === \"*\") {\n    isALetter = true\n  }\n  \n  return isALetter\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be a number and not a part of a word, and \n   false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = false\n  \n  if(lastChar === \"+\") {\n    isALetter = true\n  }\n  \n  return isALetter\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be a number and not a part of a word, and \n   false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = false\n  \n  if(lastChar === \"=\") {\n    isALetter = true\n  }\n  \n  return isALetter\n}\n\n/* Create a function that will return true if the last character \n   of a will give string will be a number and not a part of a word, and \n   false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = false\n  \n  if(lastChar === \"%\") {\n    isALetter = true\n  }\n  \n  return isALetter\n}\n\n/* Create a function that will return true if the last character \n   ", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the smallest index of an element which \n   will be not less than or equal to the element immediately following it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[min]) {\n      min = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the smallest index of an element which \n   will be not less than or equal to the element immediately following it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[min]) {\n      min = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the smallest index of an element which \n   will be not less than or equal to the element immediately following it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[min]) {\n      min = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the smallest index of an element which \n   will be not less than or equal to the element immediately following it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[min]) {\n      min = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the smallest index of an element which \n   will be not less than or equal to the element immediately following it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[min]) {\n      min = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the smallest index of an element which \n   will be not less than or equal to the element immediately following it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[min]) {\n      min = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n}\n\n/*\n  Create a function which will return the smallest index of an element which \n   will be not ", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = Number.MAX_VALUE;\n  let minNum = Number.MIN_VALUE;\n  let maxNumIsNull = true;\n  let minNumIsNull = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n      maxNumIsNull = false;\n    }\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n      minNumIsNull = false;\n    }\n  }\n  if (maxNumIsNull) {\n    return null;\n  }\n  if (minNumIsNull) {\n    return null;\n  }\n  return [maxNum, minNum];\n};\n\n/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = Number.MAX_VALUE;\n  let minNum = Number.MIN_VALUE;\n  let maxNumIsNull = true;\n  let minNumIsNull = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n      maxNumIsNull = false;\n    }\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n      minNumIsNull = false;\n    }\n  }\n  if (maxNumIsNull) {\n    return null;\n  }\n  if (minNumIsNull) {\n    return null;\n  }\n  return [maxNum, minNum];\n};\n\n/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = Number.MAX_VALUE;\n  let minNum = Number.MIN_VALUE;\n  let maxNumIsNull = true;\n  let minNumIsNull = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n      maxNumIsNull = false;\n    }\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n      minNumIsNull = false;\n    }\n  }\n  if (maxNumIsNull) {\n    return null;\n  }\n  if (minNumIsNull) {\n    return null;\n  }\n  return [maxNum, minNum];\n};\n\n/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = Number.MAX_VALUE;\n  let minNum = Number.MIN_VALUE;\n  let maxNumIsNull = true;\n  let minNumIsNull = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n      maxNumIsNull = false;\n    }\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n      minNumIsNull = false;\n    }\n  }\n  if (maxNumIsNull) {\n    return null;\n  }\n  if (minNumIsNull) {\n    return null;\n  }\n  return [maxNum, minNum];\n};\n\n/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = Number.MAX_VALUE;\n  let minNum = Number.MIN_VALUE;\n  let maxNumIsNull = true;\n  let minNumIsNull = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n      maxNumIsNull = false;\n    }\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n      minNumIsNull = false;\n    }\n  }\n  if (maxNumIsNull) {\n    return null;\n  }\n  if (minNumIsNull) {\n    return null;\n  }\n  return [maxNum, minNum];\n};\n\n/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = Number.MAX_VALUE;\n  let minNum = Number.MIN_VALUE;\n  let maxNumIsNull = true;\n  let minNumIsNull = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n      maxNumIsNull = false;\n    }\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n      minNumIsNull = false;\n    }\n  }\n  if (maxNumIsNull) {\n    return null;\n  }\n  if (minNumIsNull) {\n    return null;\n  }\n  return [maxNum, minNum];\n};\n\n/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = Number.MAX_VALUE;\n  let minNum = Number.MIN_VALUE;\n  let max", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(typeof a === \"number\"){\n    return a > b? 1 : a < b? -1 : 0;\n  }\n  if(typeof a === \"string\"){\n    return a > b? 1 : a < b? -1 : 0;\n  }\n  if(typeof b === \"number\"){\n    return b > a? 1 : b < a? -1 : 0;\n  }\n  if(typeof b === \"string\"){\n    return b > a? 1 : b < a? -1 : 0;\n  }\n  return null;\n}\n\n/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the smaller variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 1 \n   compareOne(1,\" 2,3\") ➞ \" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞ \" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(typeof a === \"number\"){\n    return a < b? -1 : a > b? 1 : 0;\n  }\n  if(typeof a === \"string\"){\n    return a < b? -1 : a > b? 1 : 0;\n  }\n  if(typeof b === \"number\"){\n    return b < a? -1 : b > a? 1 : 0;\n  }\n  if(typeof b === \"string\"){\n    return b < a? -1 : b > a? 1 : 0;\n  }\n  return null;\n}\n\n/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 1 \n   compareOne(1,\" 2,3\") ➞ \" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞ \" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(typeof a === \"number\"){\n    return a > b? -1 : a < b? 1 : 0;\n  }\n  if(typeof a === \"string\"){\n    return a > b? -1 : a < b? 1 : 0;\n  }\n  if(typeof b === \"number\"){\n    return b > a? -1 : b < a? 1 : 0;\n  }\n  if(typeof b === \"string\"){\n    return b > a? -1 : b < a? 1 : 0;\n  }\n  return null;\n}\n\n/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 1 \n   compareOne(1,\" 2,3\") ➞ \" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞ \" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(typeof a === \"number\"){\n    return a < b? 1 : a > b? -1 : 0;\n  }\n  if(typeof a === \"string\"){\n    return a < b? 1 : a > b? -1 : 0;\n  }\n  if(typeof b === \"number\"){\n    return b < a? 1 : b > a? -1 : 0;\n  }\n  if(typeof b === \"string\"){\n    return b < a? 1 : b > a? -1 : 0;\n  }\n  return null;\n}\n\n/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 1 \n   compareOne(1,\" 2,3\") ➞ \" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞ \" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(typeof a === \"number\"){\n    return a > b? -1 : a < b? 1 : 0;\n  }\n  if(typeof a === \"string\"){\n    return a > b? -1 : a < b? 1 : 0;\n  }\n  if(typeof b === \"number\"){\n    return b > a? -1 : b < a? 1 : 0;\n  }\n  if(typeof b === \"string\"){\n    return b > a? -1 : b < a? 1 : 0;\n  }\n  return null;\n}\n\n/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 1 \n   compareOne(1,\" 2,3\") ➞ \" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞ \" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(typeof a === \"number\"){\n    return a < b? -1 : a > b? 1 : 0;\n  }\n  if(typeof a === \"string\"){\n    return a < b? -1 : a > b? 1 : 0;\n  }\n  if(typeof b === \"number\"){\n    return b < a? -1 : b > a? 1 : 0;\n  }\n  if(typeof b === \"string\"){\n    return b < a? -1 : b > a? 1 : 0;\n  }\n  return null;\n}\n\n/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 1 \n   compareOne(1,\" 2,3\") ➞ \" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞ \" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(typeof a === \"number\"){\n    return a < b? -1 : a > b? 1 : 0;\n  }\n  if(typeof a === \"string\"){\n    return a < b? -1 : a > b? 1 : 0;\n  }\n  if(typeof b === \"number\"){\n", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegative(-4) == false\n  isEqualToSumEvenNegative(-6) == false\n  isEqualToSumEvenNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegative(4) == false\n  isEqualToSumEvenNegative(6) == false\n  isEqualToSumEvenNegative(8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  if (n <= 0) return false;\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  Evaluate whether the will give number n can will be write as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n. \n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(0, currentSuffix.length - 1);\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> commonPrefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst commonPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (prefixes.indexOf(currentPrefix) === -1) {\n      prefixes.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> commonSuffixes('abc')\n  ['c', 'ba', 'abc']\n  */\nconst commonSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    if (suffixes.indexOf(currentSuffix) === -1) {\n      suffixes.push(currentSuffix);\n    }\n    currentSuffix = currentSuffix.slice(0, currentSuffix.length - 1);\n  }\n  return suffixes;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings2 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings2('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings3 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings3('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings4 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings4('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings5 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings5('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings6 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings6('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings7 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings7('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings8 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings8('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings9 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings9('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings10 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings10('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings11 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all common substrings from shortest to longest of the input string\n  >>> commonSubstrings11('abc')\n  ['a', 'b', 'c']\n  */\nconst commonSubstrings12 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, will replace all underscores in it with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example 1\") == \"Example_1\"\n  fixUnderscores(\" Example 2\") == \"Example_2\"\n  fixUnderscores(\" Example   3\") == \"Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_2\"\n  fixSpaces(text) == \"Example_3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, will replace all underscores in it with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixUnderscores(text) == \"Example\"\n  fixUnderscores(text) == \"Example_1\"\n  fixUnderscores(text) == \"Example_2\"\n  fixUnderscores(text) == \"Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_2\"\n  fixSpaces(text) == \"Example_3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, will replace all underscores in it with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixUnderscores(text) == \"Example\"\n  fixUnderscores(text) == \"Example_1\"\n  fixUnderscores(text) == \"Example_2\"\n  fixUnderscores(text) == \"Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_2\"\n  fixSpaces(text) == \"Example_3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, will replace all underscores in it with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixUnderscores(text) == \"Example\"\n  fixUnderscores(text) == \"Example_1\"\n  fixUnderscores(text) == \"Example_2\"\n  fixUnderscores(text) == \"Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_2\"\n  fixSpaces(text) == \"Example_3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, will replace all underscores in it with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixUnderscores(text) == \"Example\"\n  fixUnderscores(text) == \"Example_1\"\n  fixUnderscores(text) == \"Example_2\"\n  fixUnderscores(text) == \"Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_2\"\n  fixSpaces(text) == \"Example_3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, will replace all underscores in it with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixUnderscores(text) == \"Example\"\n  fixUnderscores(text) == \"Example_1\"\n  fixUnderscores(text) == \"Example_2\"\n  fixUnderscores(text) == \"Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_2\"\n  fixSpaces(text) == \"Example_3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, will replace all underscores in it with spaces, \n   and if a string will have more than 2 consecutive underscores, \n   then will replace all consecutive underscores with-\n  \n   fixUnderscores(text) == \"Example\"\n  fixUnderscores(text) == \"Example_1\"\n  fixUnderscores(text) == \"Example_2\"\n  fixUnderscores(text) == \"Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_2\"\n  fixSpaces(text) == \"Example_3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string ", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_without_extension = file_name.split(\".\")[0];\n  const file_name_without_extension_length = file_name_without_extension.length;\n  const file_name_without_extension_letter = file_name_without_extension.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_length = file_name_without_extension_letter.length;\n  const file_name_without_extension_letter_letter = file_name_without_extension_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_length = file_name_without_extension_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter = file_name_without_extension_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_length = file_name_without_extension_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall remove all occurrences of its index from the list. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,2,3,4,5,6,7,8,9,10]\n  For lst = [1,2,3,4,5,", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const isPrime = prime(word);\n        if (isPrime) {\n            newWords.push(word);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You will be given a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpace = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const isPrime = prime(word);\n        if (isPrime) {\n            newWords.push(word);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You will be given a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLine = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const isPrime = prime(word);\n        if (isPrime) {\n            newWords.push(word);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You will be given a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLineAndSpace = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const isPrime = prime(word);\n        if (isPrime) {\n            newWords.push(word);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You will be given a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLineAndSpaceAndNewLine = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const isPrime = prime(word);\n        if (isPrime) {\n            newWords.push(word);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You will be given a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const isPrime = prime(word);\n        if (isPrime) {\n            newWords.push(word);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You will be given a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const isPrime = prime(word);\n        if (isPrime) {\n            newWords.push(word);\n        }\n    }\n    return newWords.join(\" \");\n};\n\n/*\n  You will be given a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (sentence) => {\n    const words = sentence.split(\" \");\n    const newWords = [];\n", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   let numerator= x.split('/')[0]\n   let denominator= x.split('/')[1]\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator=='') return false\n   if(numerator==''||denominator=='') return true\n   if(numerator==''||denominator==", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  const sortedNums = nums.sort((a, b) => a - b);\n  for (let i = 0; i < sortedNums.length; i++) {\n    sum += sortedNums[i];\n    if (sum % 10 === 0) {\n      index++;\n    }\n  }\n  return sortedNums.slice(index);\n};\n\n/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversed = (nums) => {\n  let sum = 0;\n  let index = 0;\n  const sortedNums = nums.sort((a, b) => b - a);\n  for (let i = 0; i < sortedNums.length; i++) {\n    sum += sortedNums[i];\n    if (sum % 10 === 0) {\n      index++;\n    }\n  }\n  return sortedNums.slice(index);\n};\n\n/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversed = (nums) => {\n  let sum = 0;\n  let index = 0;\n  const sortedNums = nums.sort((a, b) => b - a);\n  for (let i = 0; i < sortedNums.length; i++) {\n    sum += sortedNums[i];\n    if (sum % 10 === 0) {\n      index++;\n    }\n  }\n  return sortedNums.slice(index);\n};\n\n/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let index = 0;\n  const sortedNums = nums.sort((a, b) => b - a);\n  for (let i = 0; i < sortedNums.length; i++) {\n    sum += sortedNums[i];\n    if (sum % 10 === 0) {\n      index++;\n    }\n  }\n  return sortedNums.slice(index);\n};\n\n/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let index = 0;\n  const sortedNums = nums.sort((a, b) => b - a);\n  for (let i = 0; i < sortedNums.length; i++) {\n    sum += sortedNums[i];\n    if (sum % 10 === 0) {\n      index++;\n    }\n  }\n  return sortedNums.slice(index);\n};\n\n/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let index = 0;\n  const sortedNums = nums.sort((a, b) => b - a);\n  for (let i = 0; i < sortedNums.length; i++) {\n    sum += sortedNums[i];\n    if (sum % 10 === 0) {\n      index++;\n    }\n  }\n  return sortedNums.slice(index);\n};\n\n/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let index = 0;\n  const sortedNums = nums.sort((a, b) => b - a);\n  for (let i = 0; i < sortedNums.length; i++) {\n    sum += sortedNums[i];\n    if (sum % 10 === 0) {\n      index++;\n    }\n  }\n  return sortedNums.slice(index);\n};\n\n/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let index = 0;\n  const sortedNums = nums.sort((a, b) => b - a);\n  for (let i = 0; i < sortedNums.length; i++) {\n    sum += sortedNums[i];\n    if (sum % 10 === 0) {\n      index++;\n    }\n  }\n  return sortedNums.slice(index);\n};\n\n/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  let sum = 0;\n  let index = 0;\n  const sortedNums = nums.sort((a, b) => b - a);\n  for (let i = 0; i < sortedNums.length; i++) {\n    sum += sortedNums[i];\n    if (sum % 10 === 0) {\n      index++;\n    }\n  }\n  return sortedNums.slice(index);\n};\n\n/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  let odd = 0;\n  let even = 0;\n  let firstNum = nums[0];\n  let lastNum = nums[nums.length - 1];\n  \n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  \n  if (nums.length % 2 === 0) {\n    firstDigit = nums[0] % 10;\n    lastDigit = nums[nums.length - 1] % 10;\n  } else {\n    firstDigit = nums[nums.length - 1] % 10;\n    lastDigit = nums[0] % 10;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2 === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd > 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd > 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2 === 0 && lastNum % 2!== 0 && even > 0 && odd === 0) {\n    count++;\n  }\n  \n  if (firstNum % 2!== 0 && lastNum % 2 === 0 && ", "passed": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You will be given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You will be given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You will be given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You will be given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You will be given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You will be given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples7 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You will be given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] ", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planetsOrbits = [];\n  let sunOrbit = planet1;\n  let planetsOrbit1 = planet1;\n  let planetsOrbit2 = planet2;\n  let planetsOrbit3 = planet2;\n  let planetsOrbit4 = planet2;\n  let planetsOrbit5 = planet2;\n  let planetsOrbit6 = planet2;\n  let planetsOrbit7 = planet2;\n  let planetsOrbit8 = planet2;\n  let planetsOrbit9 = planet2;\n  let planetsOrbit10 = planet2;\n  let planetsOrbit11 = planet2;\n  let planetsOrbit12 = planet2;\n  let planetsOrbit13 = planet2;\n  let planetsOrbit14 = planet2;\n  let planetsOrbit15 = planet2;\n  let planetsOrbit16 = planet2;\n  let planetsOrbit17 = planet2;\n  let planetsOrbit18 = planet2;\n  let planetsOrbit19 = planet2;\n  let planetsOrbit20 = planet2;\n  let planetsOrbit21 = planet2;\n  let planetsOrbit22 = planet2;\n  let planetsOrbit23 = planet2;\n  let planetsOrbit24 = planet2;\n  let planetsOrbit25 = planet2;\n  let planetsOrbit26 = planet2;\n  let planetsOrbit27 = planet2;\n  let planetsOrbit28 = planet2;\n  let planetsOrbit29 = planet2;\n  let planetsOrbit30 = planet2;\n  let planetsOrbit31 = planet2;\n  let planetsOrbit32 = planet2;\n  let planetsOrbit33 = planet2;\n  let planetsOrbit34 = planet2;\n  let planetsOrbit35 = planet2;\n  let planetsOrbit36 = planet2;\n  let planetsOrbit37 = planet2;\n  let planetsOrbit38 = planet2;\n  let planetsOrbit39 = planet2;\n  let planetsOrbit40 = planet2;\n  let planetsOrbit41 = planet2;\n  let planetsOrbit42 = planet2;\n  let planetsOrbit43 = planet2;\n  let planetsOrbit44 = planet2;\n  let planetsOrbit45 = planet2;\n  let planetsOrbit46 = planet2;\n  let planetsOrbit47 = planet2;\n  let planetsOrbit48 = planet2;\n  let planetsOrbit49 = planet2;\n  let planetsOrbit50 = planet2;\n  let planetsOrbit51 = planet2;\n  let planetsOrbit52 = planet2;\n  let planetsOrbit53 = planet2;\n  let planetsOrbit54 = planet2;\n  let planetsOrbit55 = planet2;\n  let planetsOrbit56 = planet2;\n  let planetsOrbit57 = planet2;\n  let planetsOrbit58 = planet2;\n  let planetsOrbit59 = planet2;\n  let planetsOrbit60 = planet2;\n  let planetsOrbit61 = planet2;\n  let planetsOrbit62 = planet2;\n  let planetsOrbit63 = planet2;\n  let planetsOrbit64 = planet2;\n  let planetsOrbit65 = planet2;\n  let planetsOrbit66 = planet2;\n  let planetsOrbit67 = planet2;\n  let planetsOrbit68 = planet2;\n  let planetsOrbit69 = planet2;\n  let planetsOrbit70 = planet2;\n  let planetsOrbit71 = planet2;\n  let planetsOrbit72 = planet2;\n  let planetsOrbit73 = planet2;\n  let planetsOrbit74 = planet2;\n  let planetsOrbit75 = planet2;\n  let planetsOrbit76 = planet2;\n  let planetsOrbit77 = planet2;\n  let planetsOrbit78 = planet2;\n  let planetsOrbit79 = planet2;\n  let planetsOrbit80 = planet2;\n  let planetsOrbit81 = planet2;\n  let planetsOrbit82 = planet2;\n  let planetsOrbit83 = planet2;\n  let planetsOrbit84 = planet2;\n  let planetsOrbit85 = planet2;\n  let planetsOrbit86 = planet2;\n  let planetsOrbit87 = planet2;\n  let planetsOrbit88 = planet2;\n  let planetsOrbit89 = planet2;\n  let planetsOrbit90 = planet2;\n  let planetsOrbit91 = planet2;\n  let planetsOrbit92 = planet2;\n  let planetsOrbit93 = planet2;\n  let planetsOrbit94 = planet2;\n  let planetsOrbit95 = planet2;\n  let planetsOrbit96 = planet2;\n  let planetsOrbit97 = planet2;\n  let planetsOrbit98 = planet2;\n  let planetsOrbit99 = planet2;\n  let planetsOrbit100 = planet2;\n  let planetsOrbit101 = planet2;\n  let planetsOrbit102 = planet2;\n  let planetsOrbit103 = planet2;\n  let planetsOrbit104 = planet2;\n  let planetsOrbit105 = planet2;\n  let planetsOrbit106 = planet2;\n  let planetsOrbit107 = planet2;\n  let planetsOrbit108 = planet2;\n  let planetsOrbit109 = planet2;\n  let ", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListAverage = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum / count;\n};\n\n/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListMedian = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return Math.ceil(sum / count);\n};\n\n/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListMode = (lst) => {\n  let mode = 0;\n  let modeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      modeCount++;\n      mode = (mode + 1) % 2;\n    }\n  }\n  return modeCount;\n};\n\n/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListModeAverage = (lst) => {\n  let mode = 0;\n  let modeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      modeCount++;\n      mode = (mode + 1) % 2;\n    }\n  }\n  return Math.ceil(modeCount / lst.length);\n};\n\n/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListModeMedian = (lst) => {\n  let mode = 0;\n  let modeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      modeCount++;\n      mode = (mode + 1) % 2;\n    }\n  }\n  return Math.ceil(modeCount / lst.length);\n};\n\n/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListModeMode = (lst) => {\n  let mode = 0;\n  let modeCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      modeCount++;\n      mode = (mode + 1) % 2;\n    }\n  }\n  return modeCount;\n};\n\n/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicate", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Return a string containing space-will delimitate numbers starting from n inclusive.\n  >>> stringSequenceUpTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrY(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrZ(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrW(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrX(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrY(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrZ(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrW(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrX(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrY(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrZ(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrW(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrX(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrY(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrZ(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrW(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrX(n/2, y, x);\n}\n\n/*\n  A simple program which should return the value of x if n will be a prime \n  number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, ", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]>0){\n       sum+=Math.pow(lst[i],2);\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]>0){\n       sum+=Math.pow(lst[i],2);\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]>0){\n       sum+=Math.pow(lst[i],2);\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]>0){\n       sum+=Math.pow(lst[i],2);\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]>0){\n       sum+=Math.pow(lst[i],2);\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]>0){\n       sum+=Math.pow(lst[i],2);\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]>0){\n       sum+=Math.pow(lst[i],2);\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]>0){\n       sum+=Math.pow(lst[i],2);\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]>0){\n       sum+=Math.pow(lst[i],2);\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be even. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (", "passed": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length;\n  const guessLength = guess.length;\n  const gameScores = game.map((value, index) => value);\n  const guessScores = guess.map((value, index) => value);\n  const gameScoreDifferences = gameScores.map((value, index) => Math.abs(value - guessScores[index]));\n  const gameScoreDifferenceDifferences = gameScoreDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongestExtension = '';\n  let extension_strength = 0;\n  let extension_strength_sum = 0;\n  \n  extensions.forEach(extension => {\n    let extension_strength_sum = 0;\n    extension.forEach(letter => {\n      extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    });\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(0);\n    extension_strength_sum += letter.toLowerCase().charCodeAt(0);\n    extension_strength_sum += extension_strength;\n    extension_strength_sum += letter.toUpperCase().charCodeAt(", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray=a.split(\"\");\n   let bArray=b.split(\"\");\n   let result=false;\n   for(let i=0;i<aArray.length;i++){\n     for(let j=0;j<bArray.length;j++){\n       if(aArray[i]==bArray[j]){\n         result=true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You will be given two words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray=a.split(\"\");\n   let bArray=b.split(\"\");\n   let result=false;\n   for(let i=0;i<aArray.length;i++){\n     for(let j=0;j<bArray.length;j++){\n       if(aArray[i]==bArray[j]){\n         result=true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You will be given two words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray=a.split(\"\");\n   let bArray=b.split(\"\");\n   let result=false;\n   for(let i=0;i<aArray.length;i++){\n     for(let j=0;j<bArray.length;j++){\n       if(aArray[i]==bArray[j]){\n         result=true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You will be given two words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray=a.split(\"\");\n   let bArray=b.split(\"\");\n   let result=false;\n   for(let i=0;i<aArray.length;i++){\n     for(let j=0;j<bArray.length;j++){\n       if(aArray[i]==bArray[j]){\n         result=true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You will be given two words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray=a.split(\"\");\n   let bArray=b.split(\"\");\n   let result=false;\n   for(let i=0;i<aArray.length;i++){\n     for(let j=0;j<bArray.length;j++){\n       if(aArray[i]==bArray[j]){\n         result=true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You will be given two words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray=a.split(\"\");\n   let bArray=b.split(\"\");\n   let result=false;\n   for(let i=0;i<aArray.length;i++){\n     for(let j=0;j<bArray.length;j++){\n       if(aArray[i]==bArray[j]){\n         result=true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You will be given two words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray=a.split(\"\");\n   let bArray=b.split(\"\");\n   let result=false;\n   for(let i=0;i<aArray.length;i++){\n     for(let j=0;j<bArray.length;j++){\n       if(aArray[i]==bArray[j]){\n         result=true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You will be given two words. You will need to return true if the second word ", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  let digit = num % 10;\n  if (digit === 0) {\n    evenCount++;\n  } else {\n    oddCount++;\n  }\n  if (evenCount % 2 === 0) {\n    count++;\n  }\n  return [evenCount, oddCount, count];\n};\n\n/*Given a string, return an array that has the number of characters in each word.\n\n   Example:\n      wordCount(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordCount = (str) => {\n  let words = [];\n  let word = '';\n  let wordCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    word += str[i];\n    if (word.length > 0) {\n      wordCount++;\n    }\n  }\n  words.push(word);\n  return words;\n};\n\n/*Given a string, return an array that has the number of characters in each sentence.\n\n   Example:\n      sentenceCount(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst sentenceCount = (str) => {\n  let sentences = [];\n  let sentence = '';\n  let sentenceCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    sentence += str[i];\n    if (sentence.length > 0) {\n      sentenceCount++;\n    }\n  }\n  sentences.push(sentence);\n  return sentences;\n};\n\n/*Given a string, return an array that has the number of characters in each word.\n\n   Example:\n      wordCountInSentence(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordCountInSentence = (str) => {\n  let words = [];\n  let word = '';\n  let wordCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    word += str[i];\n    if (word.length > 0) {\n      wordCount++;\n    }\n  }\n  words.push(word);\n  return words;\n};\n\n/*Given a string, return an array that has the number of characters in each sentence.\n\n   Example:\n      sentenceCountInSentence(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst sentenceCountInSentence = (str) => {\n  let sentences = [];\n  let sentence = '';\n  let sentenceCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    sentence += str[i];\n    if (sentence.length > 0) {\n      sentenceCount++;\n    }\n  }\n  sentences.push(sentence);\n  return sentences;\n};\n\n/*Given a string, return an array that has the number of characters in each word.\n\n   Example:\n      wordCountInWord(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordCountInWord = (str) => {\n  let words = [];\n  let word = '';\n  let wordCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    word += str[i];\n    if (word.length > 0) {\n      wordCount++;\n    }\n  }\n  words.push(word);\n  return words;\n};\n\n/*Given a string, return an array that has the number of characters in each sentence.\n\n   Example:\n      sentenceCountInWord(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst sentenceCountInWord = (str) => {\n  let sentences = [];\n  let sentence = '';\n  let sentenceCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    sentence += str[i];\n    if (sentence.length > 0) {\n      sentenceCount++;\n    }\n  }\n  sentences.push(sentence);\n  return sentences;\n};\n\n/*Given a string, return an array that has the number of characters in each word.\n\n   Example:\n      wordCountInWordInSentence(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordCountInWordInSentence = (str) => {\n  let words = [];\n  let word = '';\n  let wordCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    word += str[i];\n    if (word.length > 0) {\n      wordCount++;\n    }\n  }\n  words.push(word);\n  return words;\n};\n\n/*Given a string, return an array that has the number of characters in each sentence.\n\n   Example:\n      sentenceCountInWordInSentence(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst sentenceCountInWordInSentence = (str) => {\n  let sentences = [];\n  let sentence = '';\n  let sentenceCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    sentence += str[i];\n    if (sentence.length > 0) {\n      sentenceCount++;\n    }\n  }\n  sentences.push(sentence);\n  return sentences;\n};\n\n/*Given a string, return an array that has the number of characters in each word.\n\n   Example:\n      wordCountInWordInWord(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordCountInWordInWord = (str) => {\n  let words = [];\n  let word = '';\n  let wordCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    word += str[i];\n    if (word.length > 0) {\n      wordCount++;\n    }\n  }\n  words.push(word);\n  return words;\n};\n\n/*Given a string, return an array that has the number of characters in each sentence.\n\n   Example:\n      sentenceCountInWordInWord(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst sentenceCountInWordInWord = (str) => {\n  let sentences = [];\n  let sentence = '';\n  let sentenceCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    sentence += str[i];\n    if (sentence.length > 0) {\n      sentenceCount++;\n    }\n  }\n  sentences.push(sentence);\n  return sentences;\n};\n\n/*Given a string, return an array that has the number of characters in each word.\n\n   Example:\n      wordCountInWordInWordInSentence(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordCountInWordInWordInSentence = (str) => {\n  let words = [];\n  let word = '';\n  let wordCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    word += str[i];\n    if (word.length > 0) {\n      wordCount++;\n    }\n  }\n  words.push(word);\n  return words;\n};\n\n/*Given a string, return an array that has the number of characters in each sentence.\n\n   Example:\n      sentenceCountInWordInWordInWord(\"The quick brown fox jumps over the lazy dog\") ==> ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst sentenceCountInWordInWordInWord = (str) => {\n  let sentences = [];\n  let sentence = '';\n  let sentenceCount = 0;\n  for (let i = 0; i < str.length; i++) {", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let str = number.toString();\n  let numStr = str.replace(/\\D/g, '');\n  let numArr = numStr.split('');\n  let numStrArr = numArr.map(item => item.charAt(0).toUpperCase() + item.slice(1));\n  let numStrArr = numStrArr.join('');\n  return numStrArr;\n}\n\n/*\n  Given a positive integer, will obtain its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimal = (number) => {\n  let str = number.toString();\n  let numStr = str.replace(/\\D/g, '');\n  let numArr = numStr.split('');\n  let numStrArr = numArr.map(item => item.charAt(0).toString() + item.slice(1));\n  let numStrArr = numStrArr.join('');\n  return numStrArr;\n}\n\n/*\n  Given a positive integer, will obtain its hexadecimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToHex(19) == '0x19'\n  >>> intToHex(152) == '0x152'\n  >>> intToHex(426) == '0x426'\n  */\nconst intToHex = (number) => {\n  let str = number.toString();\n  let numStr = str.replace(/\\D/g, '');\n  let numArr = numStr.split('');\n  let numStrArr = numArr.map(item => item.charAt(0).toString() + item.slice(1));\n  let numStrArr = numStrArr.join('');\n  return numStrArr;\n}\n\n/*\n  Given a positive integer, will obtain its octal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToOctal(19) == '0o19'\n  >>> intToOctal(152) == '0o152'\n  >>> intToOctal(426) == '0o426'\n  */\nconst intToOctal = (number) => {\n  let str = number.toString();\n  let numStr = str.replace(/\\D/g, '');\n  let numArr = numStr.split('');\n  let numStrArr = numArr.map(item => item.charAt(0).toString() + item.slice(1));\n  let numStrArr = numStrArr.join('');\n  return numStrArr;\n}\n\n/*\n  Given a positive integer, will obtain its binary equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToBinary(19) == '0b19'\n  >>> intToBinary(152) == '0b152'\n  >>> intToBinary(426) == '0b426'\n  */\nconst intToBinary = (number) => {\n  let str = number.toString();\n  let numStr = str.replace(/\\D/g, '');\n  let numArr = numStr.split('');\n  let numStrArr = numArr.map(item => item.charAt(0).toString() + item.slice(1));\n  let numStrArr = numStrArr.join('');\n  return numStrArr;\n}\n\n/*\n  Given a positive integer, will obtain its hexadecimal equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToHexUpper(19) == '0x19'\n  >>> intToHexUpper(152) == '0x152'\n  >>> intToHexUpper(426) == '0x426'\n  */\nconst intToHexUpper = (number) => {\n  let str = number.toString();\n  let numStr = str.replace(/\\D/g, '');\n  let numArr = numStr.split('');\n  let numStrArr = numArr.map(item => item.charAt(0).toUpperCase() + item.slice(1));\n  let numStrArr = numStrArr.join('');\n  return numStrArr;\n}\n\n/*\n  Given a positive integer, will obtain its octal equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToOctUpper(19) == '0o19'\n  >>> intToOctUpper(152) == '0o152'\n  >>> intToOctUpper(426) == '0o426'\n  */\nconst intToOctUpper = (number) => {\n  let str = number.toString();\n  let numStr = str.replace(/\\D/g, '');\n  let numArr = numStr.split('');\n  let numStrArr = numArr.map(item => item.charAt(0).toUpperCase() + item.slice(1));\n  let numStrArr = numStrArr.join('');\n  return numStrArr;\n}\n\n/*\n  Given a positive integer, will obtain its binary equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToBinaryUpper(19) == '0b19'\n  >>> intToBinaryUpper(152) == '0b152'\n  >>> intToBinaryUpper(426) == '0b426'\n  */\nconst intToBinaryUpper = (number) => {\n  let str = number.toString();\n  let numStr = str.replace(/\\D/g, '');\n  let numArr = numStr.split('');\n  let numStrArr = numArr.map(item => item.charAt(0).toUpperCase() + item.slice(1));\n  let numStrArr = numStrArr.join('');\n  return numStrArr;\n}\n\n/*\n  Given a positive integer, will obtain its hexadecimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToHexLower(19) == '0x19'\n  >>> intToHexLower(152) == '0x152'\n  >>> intToHexLower(426) == '0x426'\n  */\nconst intToHexLower = (number) => {\n  let str = number.toString();\n  let numStr = str.replace(/\\D/g, '');\n  let numArr = numStr.split('');\n  let numStrArr = numArr.map(item => item.charAt(0).toString() + item.slice(1));\n  let numStrArr = numStrArr.join('');\n  return numStrArr;\n}\n\n/*\n  Given a positive integer, will obtain its octal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToOctLower(19) == '0o19'\n  >>> intToOctLower(152) == '0o152'\n  >>> intToOctLower(426) == '0o426'\n  */\nconst intToOctLower = (number) => {\n  let str = number.toString();\n  let numStr = str.replace(/\\D/g, '');\n  let numArr = numStr.split('');\n  let numStrArr = numArr.map(item => item.charAt(0).toUpperCase() + item.slice(1));\n  let numStrArr = numStrArr.join('');\n  return numStrArr;\n}\n\n/*\n  Given a positive integer, will obtain its binary equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToBinaryLower(19) == '0b19'\n  >>> intToBinaryLower(152) == '0b", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  const determinant = a1 * b2 - a2 * b3;\n  const angle = Math.acos((Math.min(a1, a2, a3) * Math.min(b1, b2, b3) * Math.min(c1, c2, c3)) / determinant);\n  return angle >= 90 && angle <= 270;\n};\n\n// Given the lengths of the three sides of a triangle. will Return true if the three \n// sides will form a left-will angle triangle, false otherwise. \n// A left-will angle triangle will be a triangle in which one angle will be left angle or \n// 180 degree.\nconst leftAngleTriangle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  const determinant = a1 * b2 - a2 * b3;\n  const angle = Math.acos((Math.max(a1, a2, a3) * Math.max(b1, b2, b3) * Math.max(c1, c2, c3)) / determinant);\n  return angle >= 180 && angle <= 90;\n};\n\n// Given the lengths of the three sides of a triangle. will Return true if the three \n// sides will form a right-up angle triangle, false otherwise. \n// A right-up angle triangle will be a triangle in which one angle will be right angle or \n// 180 degree.\nconst rightUpAngleTriangle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  const determinant = a1 * b2 - a2 * b3;\n  const angle = Math.acos((Math.min(a1, a2, a3) * Math.min(b1, b2, b3) * Math.min(c1, c2, c3)) / determinant);\n  return angle >= 180 && angle <= 90;\n};\n\n// Given the lengths of the three sides of a triangle. will Return true if the three \n// sides will form a left-up angle triangle, false otherwise. \n// A left-up angle triangle will be a triangle in which one angle will be left angle or \n// 180 degree.\nconst leftUpAngleTriangle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  const determinant = a1 * b2 - a2 * b3;\n  const angle = Math.acos((Math.max(a1, a2, a3) * Math.max(b1, b2, b3) * Math.max(c1, c2, c3)) / determinant);\n  return angle >= 180 && angle <= 90;\n};\n\n// Given the lengths of the three sides of a triangle. will Return true if the three \n// sides will form a right-down angle triangle, false otherwise. \n// A right-down angle triangle will be a triangle in which one angle will be right angle or \n// 180 degree.\nconst rightDownAngleTriangle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  const determinant = a1 * b2 - a2 * b3;\n  const angle = Math.acos((Math.min(a1, a2, a3) * Math.min(b1, b2, b3) * Math.min(c1, c2, c3)) / determinant);\n  return angle >= 180 && angle <= 90;\n};\n\n// Given the lengths of the three sides of a triangle. will Return true if the three \n// sides will form a left-down angle triangle, false otherwise. \n// A left-down angle triangle will be a triangle in which one angle will be left angle or \n// 180 degree.\nconst leftDownAngleTriangle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const b2 = Math.sqrt(b * b + a * a);\n  const b3 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  const c2 = Math.sqrt(c * c + b * b);\n  const c3 = Math.sqrt(c * c + b * b);\n  const determinant = a1 * b2 - a2 * b3;\n  const angle = Math.acos((Math.max(a1, a2, a3) * Math.max(b1, b2, b3) * Math.max(c1, c2, c3)) / determinant);\n  return angle >= 180 && angle <= 90;\n};\n\n// Given the lengths of the three sides of a triangle. will Return true if the three \n// sides will form a right-left angle triangle, false otherwise. \n// A right-left angle triangle will be a triangle in which one angle will be right angle or \n// 180 degree.\nconst rightLeftAngleTriangle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const a2 = Math.sqrt(a * a + c * c);\n  const a3 = Math.sqrt(a * a + b * ", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxWord= \"\";\n   let maxChar= 0;\n   let uniqueChar= 0;\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n     if(word.length==maxChar){\n       uniqueChar++;\n     }\n   });\n   if(uniqueChar>1){\n     return maxWord;\n   }\n   else{\n     return maxWord;\n   }\n }\n \n /*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxWord= \"\";\n   let maxChar= 0;\n   let uniqueChar= 0;\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n     if(word.length==maxChar){\n       uniqueChar++;\n     }\n   });\n   if(uniqueChar>1){\n     return maxWord;\n   }\n   else{\n     return words[words.length-1];\n   }\n }\n \n /*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxWord= \"\";\n   let maxChar= 0;\n   let uniqueChar= 0;\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n     if(word.length==maxChar){\n       uniqueChar++;\n     }\n   });\n   if(uniqueChar>1){\n     return maxWord;\n   }\n   else{\n     return words[words.length-1];\n   }\n }\n \n /*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxWord= \"\";\n   let maxChar= 0;\n   let uniqueChar= 0;\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n     if(word.length==maxChar){\n       uniqueChar++;\n     }\n   });\n   if(uniqueChar>1){\n     return maxWord;\n   }\n   else{\n     return words[words.length-1];\n   }\n }\n \n /*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxWord= \"\";\n   let maxChar= 0;\n   let uniqueChar= 0;\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n     if(word.length==maxChar){\n       uniqueChar++;\n     }\n   });\n   if(uniqueChar>1){\n     return maxWord;\n   }\n   else{\n     return words[words.length-1];\n   }\n }\n \n /*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxWord= \"\";\n   let maxChar= 0;\n   let uniqueChar= 0;\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n     if(word.length==maxChar){\n       uniqueChar++;\n     }\n   });\n   if(uniqueChar>1){\n     return maxWord;\n   }\n   else{\n     return words[words.length-1];\n   }\n }\n \n /*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxWord= \"\";\n   let maxChar= 0;\n   let uniqueChar= 0;\n   ", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.min(remaining, need);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining);\n  const remaining = Math.min(remaining, remaining", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('Jerry')\n * 4\n */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, will find out how many unique characters (regardless of case) will do it will consist of\n * >>> countUniqueCharacters('xyzXYZ')\n * 3\n * >>> countUniqueCharacters('", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  \n  for(let i = 0; i < operator.length; i++) {\n    result = result + operator[i](operand[i]);\n  }\n  \n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  \n  for(let i = 0; i < operator.length; i++) {\n    result = result + operator[i](operand[i]);\n  }\n  \n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  \n  for(let i = 0; i < operator.length; i++) {\n    result = result + operator[i](operand[i]);\n  }\n  \n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  \n  for(let i = 0; i < operator.length; i++) {\n    result = result + operator[i](operand[i]);\n  }\n  \n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  \n  for(let i = 0; i < operator.length; i++) {\n    result = result + operator[i](operand[i]);\n  }\n  \n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  \n  for(let i = 0; i < operator.length; i++) {\n    result = result + operator[i](operand[i]);\n  }\n  \n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  \n  for(let i = 0; i < operator.length; i++) {\n    result = result + operator[i](operand[i]);\n  }\n  \n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   ", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let reversed = '';\n  let upperCase = '';\n  let lowerCase = '';\n  let digit = '';\n  let symbol = '';\n  let symbol2 = '';\n  let symbol3 = '';\n  let symbol4 = '';\n  let symbol5 = '';\n  let symbol6 = '';\n  let symbol7 = '';\n  let symbol8 = '';\n  let symbol9 = '';\n  let symbol10 = '';\n  let symbol11 = '';\n  let symbol12 = '';\n  let symbol13 = '';\n  let symbol14 = '';\n  let symbol15 = '';\n  let symbol16 = '';\n  let symbol17 = '';\n  let symbol18 = '';\n  let symbol19 = '';\n  let symbol20 = '';\n  let symbol21 = '';\n  let symbol22 = '';\n  let symbol23 = '';\n  let symbol24 = '';\n  let symbol25 = '';\n  let symbol26 = '';\n  let symbol27 = '';\n  let symbol28 = '';\n  let symbol29 = '';\n  let symbol30 = '';\n  let symbol31 = '';\n  let symbol32 = '';\n  let symbol33 = '';\n  let symbol34 = '';\n  let symbol35 = '';\n  let symbol36 = '';\n  let symbol37 = '';\n  let symbol38 = '';\n  let symbol39 = '';\n  let symbol40 = '';\n  let symbol41 = '';\n  let symbol42 = '';\n  let symbol43 = '';\n  let symbol44 = '';\n  let symbol45 = '';\n  let symbol46 = '';\n  let symbol47 = '';\n  let symbol48 = '';\n  let symbol49 = '';\n  let symbol50 = '';\n  let symbol51 = '';\n  let symbol52 = '';\n  let symbol53 = '';\n  let symbol54 = '';\n  let symbol55 = '';\n  let symbol56 = '';\n  let symbol57 = '';\n  let symbol58 = '';\n  let symbol59 = '';\n  let symbol60 = '';\n  let symbol61 = '';\n  let symbol62 = '';\n  let symbol63 = '';\n  let symbol64 = '';\n  let symbol65 = '';\n  let symbol66 = '';\n  let symbol67 = '';\n  let symbol68 = '';\n  let symbol69 = '';\n  let symbol70 = '';\n  let symbol71 = '';\n  let symbol72 = '';\n  let symbol73 = '';\n  let symbol74 = '';\n  let symbol75 = '';\n  let symbol76 = '';\n  let symbol77 = '';\n  let symbol78 = '';\n  let symbol79 = '';\n  let symbol80 = '';\n  let symbol81 = '';\n  let symbol82 = '';\n  let symbol83 = '';\n  let symbol84 = '';\n  let symbol85 = '';\n  let symbol86 = '';\n  let symbol87 = '';\n  let symbol88 = '';\n  let symbol89 = '';\n  let symbol90 = '';\n  let symbol91 = '';\n  let symbol92 = '';\n  let symbol93 = '';\n  let symbol94 = '';\n  let symbol95 = '';\n  let symbol96 = '';\n  let symbol97 = '';\n  let symbol98 = '';\n  let symbol99 = '';\n  let symbol100 = '';\n  let symbol101 = '';\n  let symbol102 = '';\n  let symbol103 = '';\n  let symbol104 = '';\n  let symbol105 = '';\n  let symbol106 = '';\n  let symbol107 = '';\n  let symbol108 = '';\n  let symbol109 = '';\n  let symbol110 = '';\n  let symbol111 = '';\n  let symbol112 = '';\n  let symbol113 = '';\n  let symbol114 = '';\n  let symbol115 = '';\n  let symbol116 = '';\n  let symbol117 = '';\n  let symbol118 = '';\n  let symbol119 = '';\n  let symbol120 = '';\n  let symbol121 = '';\n  let symbol122 = '';\n  let symbol123 = '';\n  let symbol124 = '';\n  let symbol125 = '';\n  let symbol126 = '';\n  let symbol127 = '';\n  let symbol128 = '';\n  let symbol129 = '';\n  let symbol130 = '';\n  let symbol131 = '';\n  let symbol132 = '';\n  let symbol133 = '';\n  let symbol134 = '';\n  let symbol135 = '';\n  let symbol136 = '';\n  let symbol137 = '';\n  let symbol138 = '';\n  let symbol139 = '';\n  let symbol140 = '';\n  let symbol141 = '';\n  let symbol142 = '';\n  let symbol143 = '';\n  let symbol144 = '';\n  let symbol145 = '';\n  let symbol146 = '';\n  let symbol147 = '';\n  let symbol148 = '';\n  let symbol149 = '';\n  let symbol150 = '';\n  let symbol151 = '';\n  let symbol152 = '';\n  let symbol153 = '';\n  let symbol154 = '';\n  let symbol155 = '';\n  let symbol156 = '';\n  let symbol157 = '';\n  let symbol158 = '';\n  let symbol159 = '';\n  let symbol160 = '';\n  let symbol161 = '';\n  let symbol162 = '';\n  let symbol163 = '';\n  let symbol164 = '';\n  let symbol165 = '';\n  let symbol166 = '';\n  let symbol167 = '';\n  let symbol168 = '';\n  let symbol169 = '';\n  let symbol170 = '';\n  let symbol171 = '';\n  let symbol172 = '';\n  let symbol173 = '';\n  let symbol174 = '';\n  let symbol175 = '';\n  let symbol176 = '';\n  let symbol177 = '';\n  let symbol178 = '';\n  let symbol179 = '';\n  let symbol180 = '';\n  let symbol181 = '';\n  let symbol182 = '';\n  let symbol183 = '';\n  let symbol184 = '';\n  let symbol185 = '';\n  let symbol186 = '';\n  let symbol187 = '';\n  let symbol188 = '';\n  let symbol189 = '';\n  let symbol190 = '';\n  let symbol191 = '';\n  let symbol192 = '';\n  let symbol193 = '';\n  let symbol194 = '';\n  let symbol195 = '';\n  let symbol196 = '';\n  let symbol197 = '';\n  let symbol198 = '';\n  let symbol199 = '';\n  let symbol200 = '';\n  let symbol201 = '';\n  let symbol202 = '';\n  let symbol203 = '';\n  let symbol204 = '';\n  let symbol205 = '';\n  let symbol206 = '';\n  let symbol207 = '';\n  let symbol208 = '';\n  let symbol209 = '';\n  let symbol210 = '';\n  let symbol211 = '';\n  let symbol212 = '';\n  let symbol213 = '';\n  let symbol214 = '';\n  let symbol215 = '';\n  let symbol216 = '';\n  let symbol217 = '';\n  let symbol218 = '';\n  let symbol219 = '';\n  let symbol220 = '';\n  let symbol221 = '';\n  let symbol222 = '';\n  let symbol223 = '';\n  let symbol224 = '';\n  let symbol225 = '';\n  let symbol226 = '';\n  let symbol227 = '';\n  let symbol228 = '';\n  let symbol229 = '';\n  let symbol230 = '';\n  let symbol231 = '';\n  let symbol232 = '';\n  let symbol233 = '';\n  let symbol234 = '';\n  let symbol235 = '';\n  let symbol236 = '';\n  let symbol237 = '';\n  let symbol238 = '';\n  let symbol239 = '';\n  let symbol240 = '';\n  let symbol241 = '';\n  let symbol242 = '';\n  let symbol243 = '';\n  let symbol244 = '';\n  let symbol245 = '';\n  let symbol246 = '';\n  let symbol247 = '';\n  let symbol248 = '';\n  let symbol249 = '';\n  let symbol250 = '';\n  let symbol251 = '';\n  let symbol252 = '';\n  let symbol253 = '';\n  let symbol254 = '';\n  let symbol255 = '';\n  let symbol256 = '';\n  let symbol257 = '';\n  let symbol258 = '';\n  let symbol259 = '';\n  let symbol260 = '';\n  let symbol261 = '';\n  let symbol262 = '';\n  let symbol263 = '';\n  let symbol264 = '';\n  let symbol265 = '';\n  let symbol266 = '';\n  let symbol267 = '';\n  let symbol268 = '';\n  let symbol269 = '';\n  let symbol270 = '';\n  let symbol271 = '';\n  let symbol272 = '';\n  let symbol273 = '';\n  let symbol274 = '';\n  let symbol275 = '';", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a44e1f9cdd9fce7a59b70b5e9f18d2e9'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'bfe0f22e33dab9d57eedd49b12a50fadb14a0bd34fce0dff9d2bdcae'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9f8e7d29e3efb20dcae3ce7a67e1d9f86e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9f65e3cebda0dfa9", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = 0;\n  while (i < b) {\n    if (i % 2 === 0) {\n      result.push(j);\n    }\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divide = (n, k) => {\n  if (n % k!== 0) {\n    return 1;\n  }\n  return Math.ceil(n / k);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideEven = (n) => {\n  return divide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideOdd = (n) => {\n  return divide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivide = (n, k) => {\n  if (n % k!== 0) {\n    return 1;\n  }\n  return Math.ceil(n / k);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideEven = (n) => {\n  return divideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideOdd = (n) => {\n  return divideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivide = (n, k) => {\n  if (n % k!== 0) {\n    return 1;\n  }\n  return Math.ceil(n / k);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideEven = (n) => {\n  return divideDivideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideOdd = (n) => {\n  return divideDivideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideDivide = (n, k) => {\n  if (n % k!== 0) {\n    return 1;\n  }\n  return Math.ceil(n / k);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideEvenDivide = (n) => {\n  return divideDivideDivideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideOddDivide = (n) => {\n  return divideDivideDivideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideDivideDivide = (n, k) => {\n  if (n % k!== 0) {\n    return 1;\n  }\n  return Math.ceil(n / k);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideEvenDivideDivide = (n) => {\n  return divideDivideDivideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideOddDivide = (n) => {\n  return divideDivideDivideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideDivideDivide = (n, k) => {\n  if (n % k!== 0) {\n    return 1;\n  }\n  return Math.ceil(n / k);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideEvenDivideDivide = (n) => {\n  return divideDivideDivideDivideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideOddDivideDivide = (n) => {\n  return divideDivideDivideDivideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideDivideDivideDivide = (n, k) => {\n  if (n % k!== 0) {\n    return 1;\n  }\n  return Math.ceil(n / k);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideEvenDivideDivideDivide = (n) => {\n  return divideDivideDivideDivideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideOddDivideDivide = (n) => {\n  return divideDivideDivideDivideDivide(n, 2);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by k, then return k. Otherwise, return 1.\n */\nconst divideDivideDivideDivideDivide = (n, k) => {\n  if (n % k!== 0) {\n    return 1;\n  }\n  return Math.ceil(n / k);\n};\n\n/**\n * Given a positive integer n, return the number of ways to divide n into k parts.\n * If n is divisible by ", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_beats = [];\n  let beats_length = 0;\n  let beats_index = 0;\n  let beats_last = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let beats_last_index = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  let overlap = 0;\n  while (start < end) {\n    overlap = string.indexOf(substring, start);\n    if (overlap === -1) break;\n    start = overlap + 1;\n    end = string.indexOf(substring, start + 1);\n    if (end === -1) break;\n    count += end - start + 1;\n  }\n  return count;\n};\n\n/**\n * Find all occurrences of substring in string.\n * Return an array of occurrences.\n * If no substring was found, return an empty array.\n * If substring is not found, return an empty array.\n * If substring was found multiple times, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrences.\n * If substring was found multiple times and there are multiple occurrences, return an array with multiple occurrence", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numberString = '';\n  let numberArray = numbers.split(' ');\n  let numberArrayLength = numberArray.length;\n  let numberArraySort = [];\n  let numberArraySortIndex = 0;\n  let numberArraySortValue = 0;\n  let numberArraySortValueIndex = 0;\n  let numberArraySortValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValueValueValue = 0;\n  let numberArraySortValueValueIndex = 0;\n  let numberArraySortValue", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number % 1;\n  const decimalPart = Math.floor(number);\n  const integerPart = number - decimalPart;\n  return { decimalPart, integerPart, decimal };\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumber = (number) => {\n  const decimal = number % 1;\n  const decimalPart = Math.floor(number);\n  const integerPart = number - decimalPart;\n  return { decimalPart, integerPart, decimal };\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumberToWhole = (number) => {\n  const decimal = number % 1;\n  const decimalPart = Math.floor(number);\n  const integerPart = number - decimalPart;\n  return { decimalPart, integerPart, decimal };\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumberToWholeToZero = (number) => {\n  const decimal = number % 1;\n  const decimalPart = Math.floor(number);\n  const integerPart = number - decimalPart;\n  return { decimalPart, integerPart, decimal };\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumberToWholeToZeroToZero = (number) => {\n  const decimal = number % 1;\n  const decimalPart = Math.floor(number);\n  const integerPart = number - decimalPart;\n  return { decimalPart, integerPart, decimal };\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumberToWholeToZeroToZeroToZero = (number) => {\n  const decimal = number % 1;\n  const decimalPart = Math.floor(number);\n  const integerPart = number - decimalPart;\n  return { decimalPart, integerPart, decimal };\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumberToWholeToZeroToZeroToZeroToZero = (number) => {\n  const decimal = number % 1;\n  const decimalPart = Math.floor(number);\n  const integerPart = number - decimalPart;\n  return { decimalPart, integerPart, decimal };\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumberToWholeToZeroToZeroToZeroToZeroToZero = (number) => {\n  const decimal = number % 1;\n  const decimalPart = Math.floor(number);\n  const integerPart = number - decimalPart;\n  return { decimalPart, integerPart, decimal };\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumberToWholeToZeroToZeroToZeroToZeroToZeroToZeroToZero = (number) => {\n  const decimal = number % 1;\n  const decimalPart = Math.floor(number);\n  const integerPart = number - decimalPart;\n  return { decimalPart, integerPart, decimal };\n};\n\n/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the integer part of the number rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumberToWholeToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZero", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = -1;\n  let closestElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - closestElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n    }\n  }\n  return [closestElement, minDistanceIndex];\n};\n\n/**\n * Given a number array and a number n, return an array containing all possible combinations of n numbers from that array.\n * \n * For example,\n * \n * [1,2,3]\n * \n * would return [\n * [1,2,3],\n * [2,1,3],\n * [3,1,2],\n * [3,2,1],\n * [3,2,3],\n * [3,1,3],\n * [2,3,1],\n * [2,3,3],\n * [1,2,3],\n * [2,1,3],\n * [3,1,2],\n * [3,2,1],\n * [3,2,3],\n * [3,1,3],\n * [2,3,1],\n * [2,3,3]\n * ]\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * ", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)];\n  }, [Infinity, Infinity]);\n  return numbers.map((n) => n * max / min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithOffset = (numbers, offset) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)];\n  }, [Infinity, Infinity]);\n  return numbers.map((n) => n * max / min + offset);\n};\n\n/**\n * Given a list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnitWithOffset([1.0, 2.0, 3.0, 4.0, 5.0], 0.5)\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithOffsetWithOffset = (numbers, offset, offsetOffset) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)];\n  }, [Infinity, Infinity]);\n  return numbers.map((n) => n * max / min + offsetOffset + offset);\n};\n\n/**\n * Given a list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnitWithOffsetWithOffset([1.0, 2.0, 3.0, 4.0, 5.0], -0.5, 0.5)\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithOffsetWithOffsetWithOffset = (numbers, offsetOffset, offsetOffsetOffset) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)];\n  }, [Infinity, Infinity]);\n  return numbers.map((n) => n * max / min + offsetOffsetOffset + offsetOffset);\n};\n\n/**\n * Given a list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnitWithOffsetWithOffsetWithOffset([1.0, 2.0, 3.0, 4.0, 5.0], -0.5, -0.5, 0.5)\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithOffsetWithOffsetWithOffsetWithOffset = (numbers, offsetOffset, offsetOffsetOffset, offsetOffsetOffsetOffset) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)];\n  }, [Infinity, Infinity]);\n  return numbers.map((n) => n * max / min + offsetOffsetOffsetOffset + offsetOffsetOffsetOffset);\n};\n\n/**\n * Given a list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnitWithOffsetWithOffsetWithOffsetWithOffset([1.0, 2.0, 3.0, 4.0, 5.0], -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, ", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter will give list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter will give list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter will give list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter will give list of any python values only for None\n  >>> filterNone([])\n  []\n  >>> filterNone([None])\n  [None]\n  >>> filterNone([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterNone = (values) => {\n  return values.filter(value => value === undefined);\n};\n\n/**\n * Filter will give list of any python values only for empty list\n  >>> filterEmpty([])\n  []\n  >>> filterEmpty([None])\n  [None]\n  >>> filterEmpty([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmpty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter will give list of any python values only for empty dict\n  >>> filterEmptyDict({})\n  {}\n  >>> filterEmptyDict([None])\n  [None]\n  >>> filterEmptyDict([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyDict = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter will give list of any python values only for empty string\n  >>> filterEmptyString(\"\")\n  \"\"\n  >>> filterEmptyString([None])\n  [None]\n  >>> filterEmptyString([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter will give list of any python values only for empty array\n  >>> filterEmptyArray([])\n  []\n  >>> filterEmptyArray([None])\n  [None]\n  >>> filterEmptyArray([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter will give list of any python values only for empty function\n  >>> filterEmptyFunction({})\n  {}\n  >>> filterEmptyFunction([None])\n  [None]\n  >>> filterEmptyFunction([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter will give list of any python values only for empty object\n  >>> filterEmptyObject({})\n  {}\n  >>> filterEmptyObject([None])\n  [None]\n  >>> filterEmptyObject([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyObject = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter will give list of any python values only for empty number\n  >>> filterEmptyNumber(0)\n  0\n  >>> filterEmptyNumber([None])\n  [None]\n  >>> filterEmptyNumber([1, 2])\n  [1, 2]\n  */\nconst filterEmptyNumber = (values) => {\n  return values.filter(value => value === 0);\n};\n\n/**\n * Filter will give list of any python values only for empty string\n  >>> filterEmptyString(\"\")\n  \"\"\n  >>> filterEmptyString([None])\n  [None]\n  >>> filterEmptyString([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter will give list of any python values only for empty array\n  >>> filterEmptyArray([])\n  []\n  >>> filterEmptyArray([None])\n  [None]\n  >>> filterEmptyArray([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter will give list of any python values only for empty function\n  >>> filterEmptyFunction({})\n  {}\n  >>> filterEmptyFunction([None])\n  [None]\n  >>> filterEmptyFunction([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter will give list of any python values only for empty object\n  >>> filterEmptyObject({})\n  {}\n  >>> filterEmptyObject([None])\n  [None]\n  >>> filterEmptyObject([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyObject = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter will give list of any python values only for empty number\n  >>> filterEmptyNumber(0)\n  0\n  >>> filterEmptyNumber([None])\n  [None]\n  >>> filterEmptyNumber([1, 2])\n  [1, 2]\n  */\nconst filterEmptyNumber = (values) => {\n  return values.filter(value => value === 0);\n};\n\n/**\n * Filter will give list of any python values only for empty string\n  >>> filterEmptyString(\"\")\n  \"\"\n  >>> filterEmptyString([None])\n  [None]\n  >>> filterEmptyString([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter will give list of any python values only for empty array\n  >>> filterEmptyArray([])\n  []\n  >>> filterEmptyArray([None])\n  [None]\n  >>> filterEmptyArray([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter will give list of any python values only for empty function\n  >>> filterEmptyFunction({})\n  {}\n  >>> filterEmptyFunction([None])\n  [None]\n  >>> filterEmptyFunction([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter will give list of any python values only for empty object\n  >>> filterEmptyObject({})\n  {}\n  >>> filterEmptyObject([None])\n  [None]\n  >>> filterEmptyObject([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterEmptyObject = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter will give list of any python values only for empty number\n  >>> filterEmptyNumber(0)\n  0\n  >>> filterEmptyNumber([None])\n  [None]\n  >>> filterEmptyNumber([1, 2])\n  [1, 2]\n  */\nconst filterEmptyNumber = (values) => {\n  return ", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string.charCodeAt(i).length;\n  }\n  return length;\n};\n\n/**\n * Return true if string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.startsWith(prefix);\n};\n\n/**\n * Return true if string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.endsWith(suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWith('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWith('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWith = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWith(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWith('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWith('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};\n\n/**\n * Return true if string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'b', 'a')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.startsWith(prefix) && endsWithIgnoreCase(string, suffix);\n};", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number, return its prime factors.\n * If the number is divisible by 2, return [2, 3, 5, 7].\n * If the number is divisible by 3, return [3, 5, 7].\n * If the number is divisible by 5, return [5, 7].\n * If the number is divisible by 6, return [5, 7, 11].\n * If the number is divisible by 11, return [5, 7, 11, 13].\n * If the number is divisible by 13, return [5, 7, 11, 13, 17].\n * If the number is divisible by 17, return [5, 7, 11, 13, 17, 19].\n * If the number is divisible by 19, return [5, 7, 11, 13, 17, 19, 23].\n * If the number is divisible by 23, return [5, 7, 11, 13, 17, 19, 23, 29].\n * If the number is divisible by 29, return [5, 7, 11, 13, 17, 19, 23, 29, 31].\n * If the number is divisible by 31, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37].\n * If the number is divisible by 37, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].\n * If the number is divisible by 41, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47].\n * If the number is divisible by 47, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53].\n * If the number is divisible by 53, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59].\n * If the number is divisible by 59, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65].\n * If the number is divisible by 65, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71].\n * If the number is divisible by 71, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77].\n * If the number is divisible by 77, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83].\n * If the number is divisible by 83, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89].\n * If the number is divisible by 89, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97].\n * If the number is divisible by 97, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101].\n * If the number is divisible by 101, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107].\n * If the number is divisible by 107, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113].\n * If the number is divisible by 113, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127].\n * If the number is divisible by 127, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131].\n * If the number is divisible by 131, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137].\n * If the number is divisible by 137, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145].\n * If the number is divisible by 145, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151].\n * If the number is divisible by 151, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151, 159].\n * If the number is divisible by 159, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151, 159, 173].\n * If the number is divisible by 173, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151, 159, 173, 179].\n * If the number is divisible by 179, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151, 159, 173, 179, 191].\n * If the number is divisible by 191, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151, 159, 173, 179, 191, 197].\n * If the number is divisible by 197, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151, 159, 173, 179, 191, 197, 215].\n * If the number is divisible by 215, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151, 159, 173, 179, 191, 197, 215, 231].\n * If the number is divisible by 231, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151, 159, 173, 179, 191, 197, 215, 231, 251].\n * If the number is divisible by 251, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151, 159, 173, 179, 191, 197, 215, 231, 251, 269].\n * If the number is divisible by 269, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, 83, 89, 97, 101, 107, 113, 127, 131, 137, 145, 151, 159, 173, 179, 191, 197, 215, 231, 251, 269, 291].\n * If the number is divisible by 291, return [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 65, 71, 77, ", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  \n  while (n % factor!== 0) {\n    factorCount++;\n    factor *= n;\n  }\n  \n  while (factor > 1) {\n    factors.push(factor);\n    factor *= n;\n  }\n  \n  return factors;\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  \n  while (n % factor!== 0) {\n    factorCount++;\n    factor *= n;\n  }\n  \n  while (factor > 1) {\n    factors.push(factor);\n    factor *= n;\n  }\n  \n  return factors;\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  \n  while (n % factor!== 0) {\n    factorCount++;\n    factor *= n;\n  }\n  \n  while (factor > 1) {\n    factors.push(factor);\n    factor *= n;\n  }\n  \n  return factors;\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  \n  while (n % factor!== 0) {\n    factorCount++;\n    factor *= n;\n  }\n  \n  while (factor > 1) {\n    factors.push(factor);\n    factor *= n;\n  }\n  \n  return factors;\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  \n  while (n % factor!== 0) {\n    factorCount++;\n    factor *= n;\n  }\n  \n  while (factor > 1) {\n    factors.push(factor);\n    factor *= n;\n  }\n  \n  return factors;\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  \n  while (n % factor!== 0) {\n    factorCount++;\n    factor *= n;\n  }\n  \n  while (factor > 1) {\n    factors.push(factor);\n    factor *= n;\n  }\n  \n  return factors;\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  \n  while (n % factor!== 0) {\n    factorCount++;\n    factor *= n;\n  }\n  \n  while (factor > 1) {\n    factors.push(factor);\n    factor *= n;\n  }\n  \n  return factors;\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  \n  while (n % factor!== 0) {\n    factorCount++;\n    factor *= n;\n  }\n  \n  while (factor > 1) {\n    factors.push(factor);\n    factor *= n;\n  }\n  \n  return factors;\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  \n  while (n % factor!== 0) {\n    factorCount++;\n    factor *= n;\n  }\n  \n  while (factor > 1) {\n    factors.push(factor);\n    factor *= n;\n  }\n  \n  return factors;\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  \n  while (n % factor!== 0) {\n    factorCount++;\n    factor *= n;\n  }\n  \n  while (factor > 1) {\n    factors.push(factor);\n    factor *= n;\n  }\n  \n  return factors;\n}\n\n/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factor", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    if (set.has(number)) {\n      set.delete(number);\n    } else {\n      set.add(number);\n    }\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesArray = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetArray = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSet = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetArraySet = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArray = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArraySet = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArraySetSet = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArraySetSetArray = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArraySetSetArraySet = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArraySetSetArraySetArray = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArraySetSetArraySetArraySetArraySet = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArraySetArraySetArraySetArraySetArraySetArraySet = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySet = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySet = (numbers) => {\n  const set = new Set();\n  numbers.forEach(number => {\n    set.add(number);\n  });\n  return Array.from(set);\n};\n\n/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetSetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySetArraySet", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all characters to uppercase.\n  >>> removeNonAlpha('Hello')\n  'hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.toLowerCase().split('')\n}\n\n/**\n  Given a string, will remove all non-alphabetic characters and will lowercase all character", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => {\n    return `${acc}${string}`;\n  }, '');\n};\n\n/* Convert string to number\n  >>> convert(1,'string')\n  1\n  >>> convert(1, 'number')\n  '1'\n  >>> convert('1','string')\n  1\n  >>> convert('1', 'number')\n  '1'\n  >>> convert('1','string')\n  1\n  >>> convert('1', 'number')\n  '1'\n  */\nconst convert = (value, type) => {\n  if (type ==='string') return value;\n  if (type === 'number') return value;\n  if (type === 'boolean') return value === 'true';\n  if (type === 'null') return null;\n  if (type === 'undefined') return undefined;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'function') return typeof value === 'function';\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (type ==='symbol') return typeof value ==='symbol';\n  if (type === 'undefined') return undefined;\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'object') return value!== null;\n  if (type === 'array') return Array.isArray(value);\n  if (type === 'date') return value instanceof Date;\n  if (type ==='regexp') return value instanceof RegExp;\n  if (", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n  Filter an input list of strings only for ones that will end with a will give suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegex = (strings, regex) => {\n  return strings.filter(string => regex.test(string))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression but will also match a prefix.\n  >>> filterByRegexPrefix([], 'a')\n  []\n  >>> filterByRegexPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexPrefix = (strings, regex) => {\n  return strings.filter(string => regex.test(string) && string.startsWith(regex))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression but will also match a suffix.\n  >>> filterByRegexSuffix([], 'a')\n  []\n  >>> filterByRegexSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexSuffix = (strings, regex) => {\n  return strings.filter(string => regex.test(string) && string.endsWith(regex))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression but will also match a prefix.\n  >>> filterByRegexPrefixAndSuffix([], 'a')\n  []\n  >>> filterByRegexPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexPrefixAndSuffix = (strings, regex) => {\n  return strings.filter(string => regex.test(string) && string.startsWith(regex) && string.endsWith(regex))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression but will also match a prefix.\n  >>> filterByRegexPrefixAndSuffixAndPrefix([], 'a')\n  []\n  >>> filterByRegexPrefixAndSuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexPrefixAndSuffixAndPrefix = (strings, regex) => {\n  return strings.filter(string => regex.test(string) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression but will also match a suffix.\n  >>> filterByRegexPrefixAndSuffixAndPrefix([], 'a')\n  []\n  >>> filterByRegexPrefixAndSuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexPrefixAndSuffixAndPrefixAndSuffix = (strings, regex) => {\n  return strings.filter(string => regex.test(string) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression but will also match a prefix.\n  >>> filterByRegexPrefixAndSuffixAndPrefixAndPrefix([], 'a')\n  []\n  >>> filterByRegexPrefixAndSuffixAndPrefixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexPrefixAndSuffixAndPrefixAndSuffix = (strings, regex) => {\n  return strings.filter(string => regex.test(string) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression but will also match a prefix.\n  >>> filterByRegexPrefixAndSuffixAndPrefixAndPrefix([], 'a')\n  []\n  >>> filterByRegexPrefixAndSuffixAndPrefixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexPrefixAndSuffixAndPrefixAndPrefix = (strings, regex) => {\n  return strings.filter(string => regex.test(string) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression but will also match a prefix.\n  >>> filterByRegexPrefixAndSuffixAndPrefixAndPrefix([], 'a')\n  []\n  >>> filterByRegexPrefixAndSuffixAndPrefixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexPrefixAndSuffixAndPrefixAndPrefix = (strings, regex) => {\n  return strings.filter(string => regex.test(string) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression but will also match a prefix.\n  >>> filterByRegexPrefixAndSuffixAndPrefixAndPrefix([], 'a')\n  []\n  >>> filterByRegexPrefixAndSuffixAndPrefixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexPrefixAndSuffixAndPrefixAndPrefix = (strings, regex) => {\n  return strings.filter(string => regex.test(string) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex))\n}\n\n/**\n  Filter an input list of strings only for ones that will match a regular expression but will also match a prefix.\n  >>> filterByRegexPrefixAndSuffixAndPrefixAndPrefix([], 'a')\n  []\n  >>> filterByRegexPrefixAndSuffixAndPrefixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexPrefixAndSuffixAndPrefixAndPrefix = (strings, regex) => {\n  return strings.filter(string => regex.test(string) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.startsWith(regex) && string.endsWith(regex) && string.start", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account falls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZeropassed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x >= 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible = (l) => {\n  return l.filter(x => x % 3 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible5 = (l) => {\n  return l.filter(x => x % 5 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible7 = (l) => {\n  return l.filter(x => x % 7 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 9.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible9 = (l) => {\n  return l.filter(x => x % 9 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible11 = (l) => {\n  return l.filter(x => x % 11 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible13 = (l) => {\n  return l.filter(x => x % 13 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 15.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible15 = (l) => {\n  return l.filter(x => x % 15 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible17 = (l) => {\n  return l.filter(x => x % 17 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible19 = (l) => {\n  return l.filter(x => x % 19 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible21 = (l) => {\n  return l.filter(x => x % 21 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible23 = (l) => {\n  return l.filter(x => x % 23 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible25 = (l) => {\n  return l.filter(x => x % 25 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 27.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible27 = (l) => {\n  return l.filter(x => x % 27 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible29 = (l) => {\n  return l.filter(x => x % 29 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible31 = (l) => {\n  return l.filter(x => x % 31 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 33.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible33 = (l) => {\n  return l.filter(x => x % 33 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number, return true if it is a prime number, and false otherwise.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = findZeroZero(xs);\n  if (zero) {\n    return zero;\n  }\n  \n  let zeros = findZeroZero(xs.slice(0, -1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  let zeros = findZeroZero(xs.slice(1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  return null;\n}\n\n/* \n  findZeroZero will find x such that poly(x)= 0. \n  findZeroZero returns only zero point, even if there will be many. \n  Moreover, findZeroZero only will take list xs having even number of coefficients \n  and largest non zero coefficient as it will guarantee \n  a solution.\n  >>> round(findZeroZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroZero = (xs) => {\n  let zero = findZeroZeroZero(xs);\n  if (zero) {\n    return zero;\n  }\n  \n  let zeros = findZeroZeroZero(xs.slice(0, -1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  let zeros = findZeroZeroZero(xs.slice(1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  return null;\n}\n\n/* \n  findZeroZero will find x such that poly(x)= 0. \n  findZeroZero returns only zero point, even if there will be many. \n  Moreover, findZeroZero only will take list xs having even number of coefficients \n  and largest non zero coefficient as it will guarantee \n  a solution.\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroZeroZero = (xs) => {\n  let zero = findZeroZeroZero(xs);\n  if (zero) {\n    return zero;\n  }\n  \n  let zeros = findZeroZeroZero(xs.slice(0, -1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  let zeros = findZeroZeroZero(xs.slice(1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  return null;\n}\n\n/* \n  findZeroZero will find x such that poly(x)= 0. \n  findZeroZero returns only zero point, even if there will be many. \n  Moreover, findZeroZero only will take list xs having even number of coefficients \n  and largest non zero coefficient as it will guarantee \n  a solution.\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroZeroZero = (xs) => {\n  let zero = findZeroZeroZero(xs);\n  if (zero) {\n    return zero;\n  }\n  \n  let zeros = findZeroZeroZero(xs.slice(0, -1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  let zeros = findZeroZeroZero(xs.slice(1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  return null;\n}\n\n/* \n  findZeroZero will find x such that poly(x)= 0. \n  findZeroZero returns only zero point, even if there will be many. \n  Moreover, findZeroZero only will take list xs having even number of coefficients \n  and largest non zero coefficient as it will guarantee \n  a solution.\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroZeroZero = (xs) => {\n  let zero = findZeroZeroZero(xs);\n  if (zero) {\n    return zero;\n  }\n  \n  let zeros = findZeroZeroZero(xs.slice(0, -1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  let zeros = findZeroZeroZero(xs.slice(1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  return null;\n}\n\n/* \n  findZeroZero will find x such that poly(x)= 0. \n  findZeroZero returns only zero point, even if there will be many. \n  Moreover, findZeroZero only will take list xs having even number of coefficients \n  and largest non zero coefficient as it will guarantee \n  a solution.\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroZeroZero = (xs) => {\n  let zero = findZeroZeroZero(xs);\n  if (zero) {\n    return zero;\n  }\n  \n  let zeros = findZeroZeroZero(xs.slice(0, -1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  let zeros = findZeroZeroZero(xs.slice(1));\n  if (zeros) {\n    return zeros;\n  }\n  \n  return null;\n}\n\n/* \n  findZeroZero will find x such that poly(x)= 0. \n  findZeroZero returns only zero point, even if there will be many. \n  Moreover, findZeroZero only will take list xs having even number of coefficients \n  and largest non zero coefficient as it will guarantee \n  a solution.\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + ", "passed": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = new Set();\n  return l.filter(x => seen.has(x));\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortBy = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted;\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDesc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.reverse();\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByAsc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => a - b);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAsc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => b - a);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAscAsc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => b - a);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAscDesc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => b - a);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAscDescAsc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => b - a);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAscDescDescAsc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => b - a);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAscDescDescDescAsc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => b - a);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAscDescDescDescDescAsc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => b - a);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAscDescDescDescDescDescAsc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => b - a);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAscDescDescDescDescDescDescDescAsc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => b - a);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAscDescDescDescDescDescDescDescDescDescAsc = (l, fn) => {\n  let sorted = [];\n  l.forEach((x, i) => {\n    if (i === 0) {\n      sorted.push(x);\n    } else {\n      sorted.push(fn(x));\n    }\n  });\n  return sorted.sort((a, b) => b - a);\n};\n\n/*\n  Return will sort a list by ascending or descending order\n  >>> sortBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (a, b) => a - b)\n  [2, 3, 5, 9, 123, 5, 3, 3]\n  */\nconst sortByDescAscDescDescDescDescDescDesc", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of elements in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  15\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return average of elements in the list.\n  >>> averageElement([1, 2, 3])\n  1.5\n  >>> averageElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.3333333333333335\n  */\nconst averageElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return standard deviation of elements in the list.\n  >>> standardDeviationElement([1, 2, 3])\n  1.4142135623730951\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst standardDeviationElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      mode = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      mode = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      mode = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      mode = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      mode = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      mode = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      mode = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      mode = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      mode = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      mode = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mode = i;\n    }\n  }\n  return mode;\n};\n\n", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 7\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 8 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 8\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 9 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 9\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 0 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 0\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 1 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 1\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 2 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 2\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 3 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 3\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 4 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 4\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 5 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 5\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 6 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 6\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 7\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 8 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 8\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 9 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 9\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 0 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 0\n  while (digit <= n) {\n    if (n % digit === 0) {\n      count++\n    }\n    digit = digit % 11\n  }\n  return count\n}\n\n/*Return the number of times the digit 1 will appear in integers less than n which will be divisible by 11 or 13.\n  ", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  return even.sort((a, b) => a - b);\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the even indicies, while its values at the odd indicies will be equal \n   to the values of the odd indicies of l, but will sort.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOdd = (l) => {\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.sort((a, b) => b - a);\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the odd indicies of l, but will sort.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\nconst sortEvenOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a);\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a);\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a);\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddEvenOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a);\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a);\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddEvenOddOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a);\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEvenOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a);\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortOddEvenOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddOddOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a);\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEvenOddOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOddOddEven([5, 6, 3, 4])\n  [4, ", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(Math.min((3* i+ 3), s.length), 3* i));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(Math.min((3* i+ 3), s.length), 3* i));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(Math.min((3* i+ 3), s.length), 3* i));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(Math.min((3* i+ 3), s.length), 3* i));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(Math.min((3* i+ 3), s.length), 3* i));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (will let ", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  generatePrimes returns an array of prime numbers from 1 to n.\n  >>> generatePrimes(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n  >>> generatePrimes(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(1000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(10000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(1000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(100000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 10", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mean));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Mean Squared Deviation \n   around the mean of this dataset. \n   Mean Squared Deviation will be the average squared difference between each \n   element and a centerpoint (mean in this case): \n   MSD= average| x-x_mean|^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Root Mean Squared Deviation \n   around the mean of this dataset. \n   Root Mean Squared Deviation will be the square root of the mean squared \n   difference between each element and a centerpoint (mean in this case): \n   RMSE= average| x-x_mean|^2\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquaredDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation will be the square root of the mean squared \n   difference between each element and a centerpoint (mean in this case): \n   SD= average| x-x_mean|^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Variance \n   around the mean of this dataset. \n   Variance will be the square root of the mean squared \n   difference between each element and a centerpoint (mean in this case): \n   V = average| x-x_mean|^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mean, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation will be the square root of the mean squared \n   difference between each element and a centerpoint (mean in this case): \n   SD = median| x-x_median|^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const median = Math.median(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - median, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Variance \n   around the median of this dataset. \n   Variance will be the square root of the mean squared \n   difference between each element and a centerpoint (mean in this case): \n   V = median| x-x_median|^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const median = Math.median(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - median, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Standard Deviation \n   around the mode of this dataset. \n   Standard Deviation will be the square root of the mean squared \n   difference between each element and a centerpoint (mean in this case): \n   SD = mode| x-x_mode|^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const mode = Math.mode(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mode, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Variance \n   around the mode of this dataset. \n   Variance will be the square root of the mean squared \n   difference between each element and a centerpoint (mean in this case): \n   V = mode| x-x_mode|^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const mode = Math.mode(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mode, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation will be the square root of the mean squared \n   difference between each element and a centerpoint (mean in this case): \n   SD = median| x-x_median|^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const median = Math.median(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - median, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Variance \n   around the median of this dataset. \n   Variance will be the square root of the mean squared \n   difference between each element and a centerpoint (mean in this case): \n   V = median| x-x_median|^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const median = Math.median(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - median, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Standard Deviation \n   around the mode of this dataset. \n   Standard Deviation will be the square root of the mean squared \n   difference between each element and a centerpoint (mean in this case): \n   SD = mode| x-x_mode|^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const mode = Math.mode(numbers);\n  const deviations = numbers.map((number) => Math.pow(number - mode, 2));\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a will give list of input numbers, calculate Variance \n   around the mode of this dataset. \n   Variance ", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToOne will take a list of integers as an input. \n   it will return true if there will be one distinct element in the list that \n   sum to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour will take a list of integers as an input. \n   it will return true if there will be four distinct elements in the list that \n   sum to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive will take a list of integers as an input. \n   it will return true if there will be five distinct elements in the list that \n   sum to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix will take a list of integers as an input. \n   it will return true if there will be six distinct elements in the list that \n   sum to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven will take a list of integers as an input. \n   it will return true if there will be seven distinct elements in the list that \n   sum to seven, and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight will take a list of integers as an input. \n   it will return true if there will be eight distinct elements in the list that \n   sum to eight, and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToNine will take a list of integers as an input. \n   it will return true if there will be nine distinct elements in the list that \n   sum to nine, and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisions=0;\n   let collisionsCount=0;\n   let collisionsCount2=0;\n   let collisionsCount3=0;\n   let collisionsCount4=0;\n   let collisionsCount5=0;\n   let collisionsCount6=0;\n   let collisionsCount7=0;\n   let collisionsCount8=0;\n   let collisionsCount9=0;\n   let collisionsCount10=0;\n   let collisionsCount11=0;\n   let collisionsCount12=0;\n   let collisionsCount13=0;\n   let collisionsCount14=0;\n   let collisionsCount15=0;\n   let collisionsCount16=0;\n   let collisionsCount17=0;\n   let collisionsCount18=0;\n   let collisionsCount19=0;\n   let collisionsCount20=0;\n   let collisionsCount21=0;\n   let collisionsCount22=0;\n   let collisionsCount23=0;\n   let collisionsCount24=0;\n   let collisionsCount25=0;\n   let collisionsCount26=0;\n   let collisionsCount27=0;\n   let collisionsCount28=0;\n   let collisionsCount29=0;\n   let collisionsCount30=0;\n   let collisionsCount31=0;\n   let collisionsCount32=0;\n   let collisionsCount33=0;\n   let collisionsCount34=0;\n   let collisionsCount35=0;\n   let collisionsCount36=0;\n   let collisionsCount37=0;\n   let collisionsCount38=0;\n   let collisionsCount39=0;\n   let collisionsCount40=0;\n   let collisionsCount41=0;\n   let collisionsCount42=0;\n   let collisionsCount43=0;\n   let collisionsCount44=0;\n   let collisionsCount45=0;\n   let collisionsCount46=0;\n   let collisionsCount47=0;\n   let collisionsCount48=0;\n   let collisionsCount49=0;\n   let collisionsCount50=0;\n   let collisionsCount51=0;\n   let collisionsCount52=0;\n   let collisionsCount53=0;\n   let collisionsCount54=0;\n   let collisionsCount55=0;\n   let collisionsCount56=0;\n   let collisionsCount57=0;\n   let collisionsCount58=0;\n   let collisionsCount59=0;\n   let collisionsCount60=0;\n   let collisionsCount61=0;\n   let collisionsCount62=0;\n   let collisionsCount63=0;\n   let collisionsCount64=0;\n   let collisionsCount65=0;\n   let collisionsCount66=0;\n   let collisionsCount67=0;\n   let collisionsCount68=0;\n   let collisionsCount69=0;\n   let collisionsCount70=0;\n   let collisionsCount71=0;\n   let collisionsCount72=0;\n   let collisionsCount73=0;\n   let collisionsCount74=0;\n   let collisionsCount75=0;\n   let collisionsCount76=0;\n   let collisionsCount77=0;\n   let collisionsCount78=0;\n   let collisionsCount79=0;\n   let collisionsCount80=0;\n   let collisionsCount81=0;\n   let collisionsCount82=0;\n   let collisionsCount83=0;\n   let collisionsCount84=0;\n   let collisionsCount85=0;\n   let collisionsCount86=0;\n   let collisionsCount87=0;\n   let collisionsCount88=0;\n   let collisionsCount89=0;\n   let collisionsCount90=0;\n   let collisionsCount91=0;\n   let collisionsCount92=0;\n   let collisionsCount93=0;\n   let collisionsCount94=0;\n   let collisionsCount95=0;\n   let collisionsCount96=0;\n   let collisionsCount97=0;\n   let collisionsCount98=0;\n   let collisionsCount99=0;\n   let collisionsCount100=0;\n   let collisionsCount101=0;\n   let collisionsCount102=0;\n   let collisionsCount103=0;\n   let collisionsCount104=0;\n   let collisionsCount105=0;\n   let collisionsCount106=0;\n   let collisionsCount107=0;\n   let collisionsCount108=0;\n   let collisionsCount109=0;\n   let collisionsCount110=0;\n   let collisionsCount111=0;\n   let collisionsCount112=0;\n   let collisionsCount113=0;\n   let collisionsCount114=0;\n   let collisionsCount115=0;\n   let collisionsCount116=0;\n   let collisionsCount117=0;\n   let collisionsCount118=0;\n   let collisionsCount119=0;\n   let collisionsCount120=0;\n   let collisionsCount121=0;\n   let collisionsCount122=0;\n   let collisionsCount123=0;\n   let collisionsCount124=0;\n   let collisionsCount125=0;\n   let collisionsCount126=0;\n   let collisionsCount127=0;\n   let collisionsCount128=0;\n   let collisionsCount129=0;\n   let collisionsCount130=0;\n   let collisionsCount131=0;\n   let collisionsCount132=0;\n   let collisionsCount133=0;\n   let collisionsCount134=0;\n   let collisionsCount135=0;\n   let collisionsCount136=0;\n   let collisionsCount137=0;\n   let collisionsCount138=0;\n   let collisionsCount139=0;\n   let collisionsCount140=0;\n   let collisionsCount141=0;\n   let collisionsCount142=0;\n   let collisionsCount143=0;\n   let collisionsCount144=0;\n   let collisionsCount145=0;\n   let collisionsCount146=0;\n   let collisionsCount147=0;\n   let collisionsCount148=0;\n   let collisionsCount149=0;\n   let collisionsCount150=0;\n   let collisionsCount151=0;\n   let collisionsCount152=0;\n   let collisionsCount153=0;\n   let collisionsCount154=0;\n   let collisionsCount155=0;\n   let collisionsCount156=0;\n   let collisionsCount157=0;\n   let collisionsCount158=0;\n   let collisionsCount159=0;\n   let collisionsCount160=0;\n   let collisionsCount161=0;\n   let collisionsCount162=0;\n   let collisionsCount163=0;\n   let collisionsCount164=0;\n   let collisionsCount165=0;\n   let collisionsCount166=0;\n   let collisionsCount167=0;\n   let collisionsCount168=0;\n   let collisionsCount169=0;\n   let collisionsCount170=0;\n   ", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[++i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[++i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[++i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[++i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[++i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[++i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[++i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[++i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements will decrement by 1.\n  >>> decrList", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  removeDuplicates\n  Given an array of integers, remove all duplicates.\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicates([1, 3, 5, 7])\n  [3, 5, ", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 10) return x.toString();\n  const res = x.toString(base);\n  return res.substr(res.length - 2, 2);\n};\n\n/*\n  Convert a string to hexadecimal representation. \n  >>> hexToBinary('0101')\n  '1010'\n  >>> hexToBinary('0101')\n  '1001'\n  >>> hexToBinary('0101')\n  '101'\n  */\nconst hexToBinary = str => {\n  const hex = str.replace(/[a-f]/g, c => c.charCodeAt(0).toString(16));\n  return hex.length === 1? '0' + hex : hex;\n};\n\n/*\n  Convert a string to decimal representation. \n  >>> decimalToHex('1010')\n  '0101'\n  >>> decimalToHex('1010')\n  '1001'\n  >>> decimalToHex('1010')\n  '101'\n  */\nconst decimalToHex = str => {\n  const decimal = parseInt(str, 10);\n  return decimal.toString(16);\n};\n\n/*\n  Convert a string to octal representation. \n  >>> octalToBinary('0101')\n  '1010'\n  >>> octalToBinary('0101')\n  '1001'\n  >>> octalToBinary('0101')\n  '101'\n  */\nconst octalToBinary = str => {\n  const octal = str.replace(/[0-7]/g, c => c.charCodeAt(0).toString(8));\n  return octal.length === 1? '0' + octal : octal;\n};\n\n/*\n  Convert a string to binary representation. \n  >>> binaryToOctal('1010')\n  '0101'\n  >>> binaryToOctal('1010')\n  '1001'\n  >>> binaryToOctal('1010')\n  '101'\n  */\nconst binaryToOctal = str => {\n  const binary = str.replace(/[01]/g, c => c.charCodeAt(0).toString(2));\n  return binary.length === 1? '0' + binary : binary;\n};\n\n/*\n  Convert a string to decimal representation. \n  >>> decimalToBinary('1010')\n  '1010'\n  >>> decimalToBinary('1010')\n  '1001'\n  >>> decimalToBinary('1010')\n  '101'\n  */\nconst decimalToBinary = str => {\n  const decimal = parseInt(str, 10);\n  return decimal.toString(2);\n};\n\n/*\n  Convert a string to hexadecimal representation. \n  >>> hexToOctal('0101')\n  '1010'\n  >>> hexToOctal('0101')\n  '1001'\n  >>> hexToOctal('0101')\n  '101'\n  */\nconst hexToOctal = str => {\n  const hex = str.replace(/[a-f]/g, c => c.charCodeAt(0).toString(8));\n  return hex.length === 1? '0' + hex : hex;\n};\n\n/*\n  Convert a string to decimal representation. \n  >>> decimalToOctal('1010')\n  '1010'\n  >>> decimalToOctal('1010')\n  '1001'\n  >>> decimalToOctal('1010')\n  '101'\n  */\nconst decimalToOctal = str => {\n  const decimal = parseInt(str, 10);\n  return decimal.toString(8);\n};\n\n/*\n  Convert a string to binary representation. \n  >>> binaryToDecimal('1010')\n  '1010'\n  >>> binaryToDecimal('1010')\n  '1001'\n  >>> binaryToDecimal('1010')\n  '101'\n  */\nconst binaryToDecimal = str => {\n  const binary = str.replace(/[01]/g, c => c.charCodeAt(0).toString(2));\n  return binary.length === 1? '0' + binary : binary;\n};\n\n/*\n  Convert a string to hexadecimal representation. \n  >>> hexToBinary('1010')\n  '1010'\n  >>> hexToBinary('1010')\n  '1001'\n  >>> hexToBinary('1010')\n  '101'\n  */\nconst hexToBinary = str => {\n  const hex = str.replace(/[a-f]/g, c => c.charCodeAt(0).toString(16));\n  return hex.length === 1? '0' + hex : hex;\n};\n\n/*\n  Convert a string to decimal representation. \n  >>> decimalToHex('1010')\n  '1010'\n  >>> decimalToHex('1010')\n  '1001'\n  >>> decimalToHex('1010')\n  '101'\n  */\nconst decimalToHex = str => {\n  const decimal = parseInt(str, 10);\n  return decimal.toString(16);\n};\n\n/*\n  Convert a string to octal representation. \n  >>> octalToBinary('1010')\n  '1010'\n  >>> octalToBinary('1010')\n  '1001'\n  >>> octalToBinary('1010')\n  '101'\n  */\nconst octalToBinary = str => {\n  const octal = str.replace(/[0-7]/g, c => c.charCodeAt(0).toString(8));\n  return octal.length === 1? '0' + octal : octal;\n};\n\n/*\n  Convert a string to binary representation. \n  >>> binaryToOctal('1010')\n  '1010'\n  >>> binaryToOctal('1010')\n  '1001'\n  >>> binaryToOctal('1010')\n  '101'\n  */\nconst binaryToOctal = str => {\n  const binary = str.replace(/[01]/g, c => c.charCodeAt(0).toString(2));\n  return binary.length === 1? '0' + binary : binary;\n};\n\n/*\n  Convert a string to decimal representation. \n  >>> decimalToBinary('1010')\n  '1010'\n  >>> decimalToBinary('1010')\n  '1001'\n  >>> decimalToBinary('1010')\n  '101'\n  */\nconst decimalToBinary = str => {\n  const decimal = parseInt(str, 10);\n  return decimal.toString(2);\n};\n\n/*\n  Convert a string to hexadecimal representation. \n  >>> hexToOctal('1010')\n  '1010'\n  >>> hexToOctal('1010')\n  '1001'\n  >>> hexToOctal('1010')\n  '101'\n  */\nconst hexToOctal = str => {\n  const hex = str.replace(/[a-f]/g, c => c.charCodeAt(0).toString(8));\n  return hex.length === 1? '0' + hex : hex;\n};\n\n/*\n  Convert a string to decimal representation. \n  >>> decimalToHex('1010')\n  '1010'\n  >>> decimalToHex('1010')\n  '1001'\n  >>> decimalToHex('1010')\n  '101'\n  */\nconst decimalToHex = str => {\n  const decimal = parseInt(str, 10);\n  return decimal.toString(8);\n};\n\n/*\n  Convert a string to octal representation. \n  >>> octalToBinary('1010')\n  '1010'\n  >>> octalToBinary('1010')\n  '1001'\n  >>> octalToBinary('1010')\n  '101'\n  */\nconst octalToBinary = str => {\n  const octal = str.replace(/[0-7]/g, c => c.charCodeAt(0).toString(8));\n  return octal.length === 1? '0' + octal : octal;\n};\n\n/*\n  Convert a string to binary representation. \n  >>> binaryToOctal('1010')\n  '1010'\n  ", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (h * (h - 1) * (a - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (w * w * (l - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 1)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (w * w * (l - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 1)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 1)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 1)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 1)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 1)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 1)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (l, w) => {\n  const area = (l * l * (w - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 1)\n  15\n  */\nconst triangleArea = (l, ", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib5(0)-> 0 \n   fib5(1)-> 0 \n   fib5(2)-> 1 \n   fib5(3)-> 0 \n   fib5(n)-> fib5(n-1)+ fib5(n-2)+ fib5(n-3)+ fib5(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib5 number sequence.   will Do not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  13\n  */\nconst fib5 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n};\n\n/*The Fib6 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib6(0)-> 0 \n   fib6(1)-> 0 \n   fib6(2)-> 1 \n   fib6(3)-> 0 \n   fib6(n)-> fib6(n-1)+ fib6(n-2)+ fib6(n-3)+ fib6(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib6 number sequence.   will Do not use recursion.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  12\n  */\nconst fib6 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4);\n};\n\n/*The Fib7 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib7(0)-> 0 \n   fib7(1)-> 0 \n   fib7(2)-> 1 \n   fib7(3)-> 0 \n   fib7(n)-> fib7(n-1)+ fib7(n-2)+ fib7(n-3)+ fib7(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib7 number sequence.   will Do not use recursion.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  13\n  */\nconst fib7 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4);\n};\n\n/*The Fib8 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib8(0)-> 0 \n   fib8(1)-> 0 \n   fib8(2)-> 1 \n   fib8(3)-> 0 \n   fib8(n)-> fib8(n-1)+ fib8(n-2)+ fib8(n-3)+ fib8(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib8 number sequence.   will Do not use recursion.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  13\n  */\nconst fib8 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4);\n};\n\n/*The Fib9 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib9(0)-> 0 \n   fib9(1)-> 0 \n   fib9(2)-> 1 \n   fib9(3)-> 0 \n   fib9(n)-> fib9(n-1)+ fib9(n-2)+ fib9(n-3)+ fib9(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib9 number sequence.   will Do not use recursion.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  15\n  */\nconst fib9 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4);\n};\n\n/*The Fib10 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib10(0)-> 0 \n   fib10(1)-> 0 \n   fib10(2)-> 1 \n   fib10(3)-> 0 \n   fib10(n)-> fib10(n-1)+ fib10(n-2)+ fib10(n-3)+ fib10(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib10 number sequence.   will Do not use recursion.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  15\n  */\nconst fib10 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4);\n};\n\n/*The Fib11 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib11(0)-> 0 \n   fib11(1)-> 0 \n   fib11(2)-> 1 \n   fib11(3)-> 0 \n   fib11(n)-> fib11(n-1)+ fib11(n-2)+ fib11(n-3)+ fib11(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib11 number sequence.   will Do not use recursion.\n  >>> fib11(11)\n  11\n  >>> fib11(12)\n  13\n  */\nconst fib11 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4);\n};\n\n/*The Fib12 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib12(0)-> 0 \n   fib12(1)-> 0 \n   fib12(2)-> 1 \n   fib12(3)-> 0 \n   fib12(n)-> fib12(n-1)+ fib12(n-2)+ fib12(n-3)+ fib12(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib12 number sequence.   will Do not use recursion.\n  >>> fib12(12)\n  12\n  >>> fib12(13)\n  15\n  */\nconst fib12 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib12(n - 1) + fib12(n - 2) + fib12(n - 3) + fib12(n - 4);\n};\n\n/*The Fib13 number ", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = median(l.slice(0, mid))\n  let right = median(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfList(l.slice(0, mid))\n  let right = medianOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfListOf(l.slice(0, mid))\n  let right = medianOfListOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfListOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOfListOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfListOfListOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfListOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfListOfListOfListOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfListOfListOfListOfListOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n + 1) * ((n / 2) - 1))\n  let left = medianOfListOfListOfListOfListOfListOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfListOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOf", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome2('aba')\n  true\n  >>> isPalindrome2('aaaaa')\n  true\n  >>> isPalindrome2('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome3('aba')\n  true\n  >>> isPalindrome3('aaaaa')\n  true\n  >>> isPalindrome3('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome4('aba')\n  true\n  >>> isPalindrome4('aaaaa')\n  true\n  >>> isPalindrome4('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome5('aba')\n  true\n  >>> isPalindrome5('aaaaa')\n  true\n  >>> isPalindrome5('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome6('aba')\n  true\n  >>> isPalindrome6('aaaaa')\n  true\n  >>> isPalindrome6('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome7('aba')\n  true\n  >>> isPalindrome7('aaaaa')\n  true\n  >>> isPalindrome7('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome8('aba')\n  true\n  >>> isPalindrome8('aaaaa')\n  true\n  >>> isPalindrome8('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome9('aba')\n  true\n  >>> isPalindrome9('aaaaa')\n  true\n  >>> isPalindrome9('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome10('aba')\n  true\n  >>> isPalindrome10('aaaaa')\n  true\n  >>> isPalindrome10('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome11('aba')\n  true\n  >>> isPalindrome11('aaaaa')\n  true\n  >>> isPalindrome11('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome12('aba')\n  true\n  >>> isPalindrome12('aaaaa')\n  true\n  >>> isPalindrome12('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome13('aba')\n  true\n  >>> isPalindrome13('aaaaa')\n  true\n  >>> isPalindrome13('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome14('aba')\n  true\n  >>> isPalindrome14('aaaaa')\n  true\n  >>> isPalindrome14('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n  let reverse", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n = toNumber(n);\n  p = toNumber(p);\n  if (isNaN(n) || isNaN(p)) return NaN;\n  if (p === 0) return n;\n  if (p === 1) return 1;\n  if (p === Infinity) return Infinity;\n  if (p === -Infinity) return -Infinity;\n  if (p < 1) return -Infinity;\n  if (p > n) return Infinity;\n  if (n <= 0) return 0;\n  if (n >= p) return 1;\n  if (n >= 1 && p <= 0) return 1;\n  if (n >= 1 && p >= -1) return -1;\n  if (n < 0) return -1;\n  return n * Math.trunc(n * Math.log2(p));\n};\n\n/*\n  Return an integer between 0 and 2^32-1 that is the bitwise XOR of the\n  two given numbers.\n*/\nconst xor = (n1, n2) => {\n  n1 = toNumber(n1);\n  n2 = toNumber(n2);\n  if (isNaN(n1) || isNaN(n2)) return NaN;\n  if (n1 === 0) return n2;\n  if (n2 === 0) return n1;\n  if (n1 === 1) return n2;\n  if (n2 === 1) return n1;\n  if (n1 === Infinity) return n2;\n  if (n2 === Infinity) return n1;\n  if (n1 < n2) return -1;\n  if (n1 > n2) return 1;\n  if (n1 < 0) return -1;\n  return n1 * n2;\n};\n\n/*\n  Return an integer between 0 and 2^32-1 that is the bitwise OR of the\n  two given numbers.\n*/\nconst or = (n1, n2) => {\n  n1 = toNumber(n1);\n  n2 = toNumber(n2);\n  if (isNaN(n1) || isNaN(n2)) return NaN;\n  if (n1 === 0) return n2;\n  if (n2 === 0) return n1;\n  if (n1 === 1) return n2;\n  if (n2 === 1) return n1;\n  if (n1 === Infinity) return n2;\n  if (n2 === Infinity) return n1;\n  if (n1 < n2) return -1;\n  if (n1 > n2) return 1;\n  if (n1 < 0) return -1;\n  return n1 | n2;\n};\n\n/*\n  Return an integer between 0 and 2^32-1 that is the bitwise AND of two\n  given numbers.\n*/\nconst and = (n1, n2) => {\n  n1 = toNumber(n1);\n  n2 = toNumber(n2);\n  if (isNaN(n1) || isNaN(n2)) return NaN;\n  if (n1 === 0) return n2;\n  if (n2 === 0) return n1;\n  if (n1 === 1) return n2;\n  if (n2 === 1) return n1;\n  if (n1 === Infinity) return n2;\n  if (n2 === Infinity) return n1;\n  if (n1 < n2) return -1;\n  if (n1 > n2) return 1;\n  if (n1 < 0) return -1;\n  return n1 & n2;\n};\n\n/*\n  Return an integer between 0 and 2^32-1 that is the bitwise XOR of two\n  given numbers.\n*/\nconst xorInt = (n1, n2) => {\n  n1 = toNumber(n1);\n  n2 = toNumber(n2);\n  if (isNaN(n1) || isNaN(n2)) return NaN;\n  if (n1 === 0) return n2;\n  if (n2 === 0) return n1;\n  if (n1 === 1) return n2;\n  if (n2 === 1) return n1;\n  if (n1 === Infinity) return n2;\n  if (n2 === Infinity) return n1;\n  if (n1 < n2) return -1;\n  if (n1 > n2) return 1;\n  if (n1 < 0) return -1;\n  return n1 | n2;\n};\n\n/*\n  Return an integer between 0 and 2^32-1 that is the bitwise OR of two\n  given numbers.\n*/\nconst orInt = (n1, n2) => {\n  n1 = toNumber(n1);\n  n2 = toNumber(n2);\n  if (isNaN(n1) || isNaN(n2)) return NaN;\n  if (n1 === 0) return n2;\n  if (n2 === 0) return n1;\n  if (n1 === 1) return n2;\n  if (n2 === 1) return n1;\n  if (n1 === Infinity) return n2;\n  if (n2 === Infinity) return n1;\n  if (n1 < n2) return -1;\n  if (n1 > n2) return 1;\n  if (n1 < 0) return -1;\n  return n1 | n2;\n};\n\n/*\n  Return an integer between 0 and 2^32-1 that is the bitwise XOR of two\n  given numbers.\n*/\nconst xorIntInt = (n1, n2) => {\n  n1 = toNumber(n1);\n  n2 = toNumber(n2);\n  if (isNaN(n1) || isNaN(n2)) return NaN;\n  if (n1 === 0) return n2;\n  if (n2 === 0) return n1;\n  if (n1 === 1) return n2;\n  if (n2 === 1) return n1;\n  if (n1 === Infinity) return n2;\n  if (n2 === Infinity) return n1;\n  if (n1 < n2) return -1;\n  if (n1 > n2) return 1;\n  if (n1 < 0) return -1;\n  return n1 | n2;\n};\n\n/*\n  Return an integer between 0 and 2^32-1 that is the bitwise XOR of two\n  given numbers.\n*/\nconst xorIntIntInt = (n1, n2) => {\n  n1 = toNumber(n1);\n  n2 = toNumber(n2);\n  if (isNaN(n1) || isNaN(n2)) return NaN;\n  if (n1 === 0) return n2;\n  if (n2 === 0) return n1;\n  if (n1 === 1) return n2;\n  if (n2 === 1) return n1;\n  if (n1 === Infinity) return n2;\n  if (n2 === Infinity) return n1;\n  if (n1 < n2) return -1;\n  if (n1 > n2) return 1;\n  if (n1 < 0) return -1;\n  return n1 | n2;\n};\n\n/*\n  Return an integer between 0 and 2^32-1 that is the bitwise XOR of two\n  given numbers.\n*/\nconst xorIntIntIntInt = (n1, n2) => {\n  n1 = toNumber(n1);\n  n2 = toNumber(n2);\n  if (isNaN(n1) || isNaN(n2)) return NaN;\n  if (n1 === 0) return n2;\n  if (n2 === 0) return n1;\n  if (n1 === 1) return n2;\n  if (n2 === 1) return n1;\n  if (n1 === Infinity) return n2;\n  if (n2 === Infinity) return n1;\n  if (n1 < n2) return -1;\n  if (n1 > n2) return 1;\n  if (n1 < 0) return -1;\n  return n1 | n2;\n};\n\n/*\n  Return an integer between 0 and 2^32-1 that is the bitwise XOR of two\n  given numbers.\n*/\nconst xorIntIntIntIntInt = (n1, n2) => {\n  n1 = toNumber(n1);\n  n2 = toNumber(n2);\n  if (isNaN(n1) || isNaN(n2)) return NaN;\n  if (n1 === 0) return n2;\n  if (n2 === 0) return n1;\n  if (n1 === 1) return n2;\n  if (n2 === 1) return n1;\n  if (n1 === Infinity) return n2;\n  if (n2 === Infinity) return n1;\n  if (n1 < n2) return -1;\n  if (n1 > n2) return 1;\n  if (n1 < 0) return -1;\n  return n1 | n2;\n};\n\n/*", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      j++\n      if (j === numbers.length) {\n        result.push(delimeter)\n        j = 0\n      }\n    }\n  }\n  return result\n}\n\n/**\n * Return the number of occurrences of an item in an array\n * \n * >>> occurrences([1, 2, 3, 4, 5], 2)\n * 3\n * >>> occurrences([1, 2, 3, 4, 5], 3)\n * 2\n * >>> occurrences([1, 2, 3, 4, 5], 4)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 5)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 6)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 7)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 8)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 9)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 10)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 11)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 12)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 13)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 14)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 15)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 16)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 17)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 18)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 19)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 20)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 21)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 22)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 23)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 24)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 25)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 26)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 27)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 28)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 29)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 30)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 31)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 32)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 33)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 34)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 35)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 36)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 37)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 38)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 39)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 40)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 41)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 42)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 43)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 44)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 45)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 46)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 47)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 48)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 49)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 50)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 51)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 52)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 53)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 54)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 55)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 56)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 57)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 58)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 59)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 60)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 61)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 62)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 63)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 64)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 65)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 66)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 67)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 68)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 69)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 70)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 71)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 72)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 73)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 74)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 75)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 76)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 77)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 78)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 79)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 80)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 81)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 82)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 83)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 84)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 85)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 86)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 87)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 88)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 89)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 90)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 91)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 92)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 93)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 94)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 95)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 96)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 97)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 98)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 99)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 100)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 101)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 102)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 103)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 104)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 105)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 106)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 107)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 108)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 109)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 110)\n * 0\n * >>> occurrences([1, 2, 3, 4, 5], 111)", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encode= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encode= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encode= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encode= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encode= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decode= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  ", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      newText += vowel\n    }\n  })\n  return newText\n}\n\n/*\n  removeVowels2 will be a function that will take string and returns string without vowels.\n  >>> removeVowels2('')\n  ''\n  >>> removeVowels2(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels2('abcdef')\n  'bcdf'\n  >>> removeVowels2('aaaaa')\n  ''\n  >>> removeVowels2('aaBAA')\n  'B'\n  >>> removeVowels2('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      newText += vowel\n    }\n  })\n  return newText\n}\n\n/*\n  removeVowels3 will be a function that will take string and returns string without vowels.\n  >>> removeVowels3('')\n  ''\n  >>> removeVowels3(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels3('abcdef')\n  'bcdf'\n  >>> removeVowels3('aaaaa')\n  ''\n  >>> removeVowels3('aaBAA')\n  'B'\n  >>> removeVowels3('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      newText += vowel\n    }\n  })\n  return newText\n}\n\n/*\n  removeVowels4 will be a function that will take string and returns string without vowels.\n  >>> removeVowels4('')\n  ''\n  >>> removeVowels4(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels4('abcdef')\n  'bcdf'\n  >>> removeVowels4('aaaaa')\n  ''\n  >>> removeVowels4('aaBAA')\n  'B'\n  >>> removeVowels4('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      newText += vowel\n    }\n  })\n  return newText\n}\n\n/*\n  removeVowels5 will be a function that will take string and returns string without vowels.\n  >>> removeVowels5('')\n  ''\n  >>> removeVowels5(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels5('abcdef')\n  'bcdf'\n  >>> removeVowels5('aaaaa')\n  ''\n  >>> removeVowels5('aaBAA')\n  'B'\n  >>> removeVowels5('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      newText += vowel\n    }\n  })\n  return newText\n}\n\n/*\n  removeVowels6 will be a function that will take string and returns string without vowels.\n  >>> removeVowels6('')\n  ''\n  >>> removeVowels6(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels6('abcdef')\n  'bcdf'\n  >>> removeVowels6('aaaaa')\n  ''\n  >>> removeVowels6('aaBAA')\n  'B'\n  >>> removeVowels6('zbcd')\n  'zbcd'\n  */\nconst removeVowels6 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      newText += vowel\n    }\n  })\n  return newText\n}\n\n/*\n  removeVowels7 will be a function that will take string and returns string without vowels.\n  >>> removeVowels7('')\n  ''\n  >>> removeVowels7(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels7('abcdef')\n  'bcdf'\n  >>> removeVowels7('aaaaa')\n  ''\n  >>> removeVowels7('aaBAA')\n  'B'\n  >>> removeVowels7('zbcd')\n  'zbcd'\n  */\nconst removeVowels7 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      newText += vowel\n    }\n  })\n  return newText\n}\n\n/*\n  removeVowels8 will be a function that will take string and returns string without vowels.\n  >>> removeVowels8('')\n  ''\n  >>> removeVowels8(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels8('abcdef')\n  'bcdf'\n  >>> removeVowels8('aaaaa')\n  ''\n  >>> removeVowels8('aaBAA')\n  'B'\n  >>> removeVowels8('zbcd')\n  'zbcd'\n  */\nconst removeVowels8 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      newText += vowel\n    }\n  })\n  return newText\n}\n\n/*\n  removeVowels9 will be a function that will take string and returns string without vowels.\n  >>> removeVowels9('')\n  ''\n  >>> removeVowels9(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels9", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*Return true if all numbers in the list l will be above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*Return true if all numbers in the list l will be equal to t.\n  >>> equalTo([1, 2, 4, 10], 100)\n  true\n  >>> equalTo([1, 20, 4, 10], 5)\n  false\n  */\nconst equalTo = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/*Return true if all numbers in the list l will be equal to or greater than t.\n  >>> equalOrGreaterThan([1, 2, 4, 10], 100)\n  true\n  >>> equalOrGreaterThan([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrGreaterThan = (l, t) => {\n  return l.every(n => n === t || n > t);\n};\n\n/*Return true if all numbers in the list l will be equal to or less than t.\n  >>> equalOrLessThan([1, 2, 4, 10], 100)\n  true\n  >>> equalOrLessThan([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrLessThan = (l, t) => {\n  return l.every(n => n === t || n < t);\n};\n\n/*Return true if all numbers in the list l will be greater than or equal to t.\n  >>> greaterOrEqualThan([1, 2, 4, 10], 100)\n  true\n  >>> greaterOrEqualThan([1, 20, 4, 10], 5)\n  false\n  */\nconst greaterOrEqualThan = (l, t) => {\n  return l.every(n => n > t || n < t);\n};\n\n/*Return true if all numbers in the list l will be less than or equal to t.\n  >>> lessOrEqualThan([1, 2, 4, 10], 100)\n  true\n  >>> lessOrEqualThan([1, 20, 4, 10], 5)\n  false\n  */\nconst lessOrEqualThan = (l, t) => {\n  return l.every(n => n < t || n > t);\n};\n\n/*Return true if all numbers in the list l will be greater than or equal to t.\n  >>> greaterOrEqualOrLessThan([1, 2, 4, 10], 100)\n  true\n  >>> greaterOrEqualOrLessThan([1, 20, 4, 10], 5)\n  false\n  */\nconst greaterOrEqualOrLessThan = (l, t) => {\n  return l.every(n => n > t || n < t);\n};\n\n/*Return true if all numbers in the list l will be less than t.\n  >>> lessThan([1, 2, 4, 10], 100)\n  true\n  >>> lessThan([1, 20, 4, 10], 5)\n  false\n  */\nconst lessThan = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*Return true if all numbers in the list l will be greater than t.\n  >>> greaterThan([1, 2, 4, 10], 100)\n  true\n  >>> greaterThan([1, 20, 4, 10], 5)\n  false\n  */\nconst greaterThan = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*Return true if all numbers in the list l will be equal to t.\n  >>> equalTo([1, 2, 4, 10], 100)\n  true\n  >>> equalTo([1, 20, 4, 10], 5)\n  false\n  */\nconst equalTo = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/*Return true if all numbers in the list l will be equal to or greater than t.\n  >>> equalOrGreaterThan([1, 2, 4, 10], 100)\n  true\n  >>> equalOrGreaterThan([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrGreaterThan = (l, t) => {\n  return l.every(n => n === t || n > t);\n};\n\n/*Return true if all numbers in the list l will be equal to or less than t.\n  >>> equalOrLessThan([1, 2, 4, 10], 100)\n  true\n  >>> equalOrLessThan([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrLessThan = (l, t) => {\n  return l.every(n => n === t || n < t);\n};\n\n/*Return true if all numbers in the list l will be greater than or equal to t.\n  >>> greaterOrEqualOrLessThan([1, 2, 4, 10], 100)\n  true\n  >>> greaterOrEqualOrLessThan([1, 20, 4, 10], 5)\n  false\n  */\nconst greaterOrEqualOrLessThan = (l, t) => {\n  return l.every(n => n > t || n < t);\n};\n\n/*Return true if all numbers in the list l will be less than t.\n  >>> lessOrEqualThan([1, 2, 4, 10], 100)\n  true\n  >>> lessOrEqualThan([1, 20, 4, 10], 5)\n  false\n  */\nconst lessOrEqualThan = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*Return true if all numbers in the list l will be greater than t.\n  >>> greaterOrEqualOrLessThan([1, 2, 4, 10], 100)\n  true\n  >>> greaterOrEqualOrLessThan([1, 20, 4, 10], 5)\n  false\n  */\nconst greaterOrEqualOrLessThan = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*Return true if all numbers in the list l will be equal to t.\n  >>> equalTo([1, 2, 4, 10], 100)\n  true\n  >>> equalTo([1, 20, 4, 10], 5)\n  false\n  */\nconst equalTo = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/*Return true if all numbers in the list l will be equal to or greater than t.\n  >>> equalOrGreaterThan([1, 2, 4, 10], 100)\n  true\n  >>> equalOrGreaterThan([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrGreaterThan = (l, t) => {\n  return l.every(n => n === t || n > t);\n};\n\n/*Return true if all numbers in the list l will be equal to or less than t.\n  >>> equalOrLessThan([1, 2, 4, 10], 100)\n  true\n  >>> equalOrLessThan([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrLessThan = (l, t) => {\n  return l.every(n => n === t || n < t);\n};\n\n/*Return true if all numbers in the list l will be greater than t.\n  >>> greaterOrEqualOrLessThan([1, 2, 4, 10], 100)\n  true\n  >>> greaterOrEqualOrLessThan([1, 20, 4, 10], 5)\n  false\n  */\nconst greaterOrEqualOrLessThan = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*Return true if all numbers in the list l will be less than t.\n  >>> lessOrEqualThan([1, 2, 4, 10], 100)\n  true\n  >>> lessOrEqualThan([1, 20, 4, 10], 5)\n  false\n  */\nconst lessOrEqualThan = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*Return true if all numbers in the list l will be greater than or equal to t.\n  >>> greaterOrEqualOrLessThan([1, 2, 4, 10], 100)\n  true\n  >>> greaterOrEqualOrLessThan([1, 20, 4, 10], 5)\n  false\n  */\nconst greaterOrEqualOrLessThan = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*Return true if all ", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  7\n  */\nconst addRound = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRound(2, 3)\n  5\n  >>> addRound(5, 7)\n  7\n  */\nconst addRoundWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRounding(2, 3)\n  5\n  >>> addRoundWithRounding(5, 7)\n  7\n  */\nconst addRoundWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRounding(2, 3)\n  5\n  >>> addRoundWithRoundingWithRounding(5, 7)\n  7\n  */\nconst addRoundWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRounding(2, 3)\n  5\n  >>> addRoundWithRoundingWithRoundingWithRounding(5, 7)\n  7\n  */\nconst addRoundWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRounding(2, 3)\n  5\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRounding(5, 7)\n  7\n  */\nconst addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(2, 3)\n  5\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(5, 7)\n  7\n  */\nconst addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(2, 3)\n  5\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(5, 7)\n  7\n  */\nconst addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(2, 3)\n  5\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(5, 7)\n  7\n  */\nconst addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(2, 3)\n  5\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(5, 7)\n  7\n  */\nconst addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(2, 3)\n  5\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> addRoundWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (x, y) => {\n  return x + Math.round(y);\n};\n\n/*\n  Add two numbers x and y with round", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words will have the same characters.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words will have the same characters.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words will have the same characters.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words will have the same characters.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words will have the same characters.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words will have the same characters.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words will have the same characters.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words will have the same characters.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  55\n  >>> fib(5)\n  21\n  >>> fib(4)\n  13\n  >>> fib(3)\n  21\n  >>> fib(2)\n  55\n  >>> fib(1)\n  1\n  >>> fib(0)\n  1\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  55\n  >>> fibonacci(5)\n  21\n  >>> fibonacci(4)\n  13\n  >>> fibonacci(3)\n  21\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  1\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  55\n  >>> fibonacci(5)\n  21\n  >>> fibonacci(4)\n  13\n  >>> fibonacci(3)\n  21\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  1\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  55\n  >>> fibonacci(5)\n  21\n  >>> fibonacci(4)\n  13\n  >>> fibonacci(3)\n  21\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  1\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  55\n  >>> fibonacci(5)\n  21\n  >>> fibonacci(4)\n  13\n  >>> fibonacci(3)\n  21\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  1\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  55\n  >>> fibonacci(5)\n  21\n  >>> fibonacci(4)\n  13\n  >>> fibonacci(3)\n  21\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  1\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  55\n  >>> fibonacci(5)\n  21\n  >>> fibonacci(4)\n  13\n  >>> fibonacci(3)\n  21\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  1\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  55\n  >>> fibonacci(5)\n  21\n  >>> fibonacci(4)\n  13\n  >>> fibonacci(3)\n  21\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  1\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  55\n  >>> fibonacci(5)\n  21\n  >>> fibonacci(4)\n  13\n  >>> fibonacci(3)\n  21\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  1\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  55\n  >>> fibonacci(5)\n  21\n  >>> fibonacci(4)\n  13\n  >>> fibonacci(3)\n  21\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  1\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(/\\<\\>\\>/g);\n  const closingBrackets = brackets.split(/\\<\\>\\>/g);\n  const openingBracketsLength = openingBrackets.length;\n  const closingBracketsLength = closingBrackets.length;\n  if (openingBracketsLength === closingBracketsLength) {\n    return openingBracketsLength === 1;\n  }\n  return false;\n};\n\n/**\n * Given a string of \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"<\" and/or \"", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.slice();\n  while (l!== l && l!== j && l!== i) {\n    if (l[k] < l[j]) {\n      k = j;\n      j = l;\n      l = l.slice();\n    }\n    if (l[k] > l[i]) {\n      i = k;\n      k = l;\n      l = l.slice();\n    }\n  }\n  return l === l;\n};\n\n/**\n * Return true will be list elements will be monotonically increasing or decreasing.\n * If list elements are equal, return false.\n * If list elements are unequal, return true.\n * If list elements are unequal and equal, return false.\n */\nconst isMonotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.slice();\n  while (l!== l && l!== j && l!== i) {\n    if (l[k] === l[j]) {\n      k = j;\n      j = l;\n      l = l.slice();\n    }\n    if (l[k]!== l[i]) {\n      return false;\n    }\n    i = k;\n    k = l;\n    l = l.slice();\n  }\n  return l === l;\n};\n\n/**\n * Return true will be list elements will be monotonically increasing or decreasing.\n * If list elements are equal, return false.\n * If list elements are unequal, return true.\n * If list elements are unequal and equal, return false.\n */\nconst isMonotonicReversed = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.slice();\n  while (l!== l && l!== j && l!== i) {\n    if (l[k] === l[j]) {\n      k = j;\n      j = l;\n      l = l.slice();\n    }\n    if (l[k]!== l[i]) {\n      return false;\n    }\n    i = k;\n    k = l;\n    l = l.slice();\n  }\n  return l === l;\n};\n\n/**\n * Return true will be list elements will be monotonically increasing or decreasing.\n * If list elements are equal, return false.\n * If list elements are unequal, return true.\n * If list elements are unequal and equal, return false.\n */\nconst isMonotonicReversedMonotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.slice();\n  while (l!== l && l!== j && l!== i) {\n    if (l[k] === l[j]) {\n      k = j;\n      j = l;\n      l = l.slice();\n    }\n    if (l[k]!== l[i]) {\n      return false;\n    }\n    i = k;\n    k = l;\n    l = l.slice();\n  }\n  return l === l;\n};\n\n/**\n * Return true will be list elements will be monotonically increasing or decreasing.\n * If list elements are equal, return false.\n * If list elements are unequal, return true.\n * If list elements are unequal and equal, return false.\n */\nconst isMonotonicReversedMonotonicReversed = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.slice();\n  while (l!== l && l!== j && l!== i) {\n    if (l[k] === l[j]) {\n      k = j;\n      j = l;\n      l = l.slice();\n    }\n    if (l[k]!== l[i]) {\n      return false;\n    }\n    i = k;\n    k = l;\n    l = l.slice();\n  }\n  return l === l;\n};\n\n/**\n * Return true will be list elements will be monotonically increasing or decreasing.\n * If list elements are equal, return false.\n * If list elements are unequal, return true.\n * If list elements are unequal and equal, return false.\n */\nconst isMonotonicReversedMonotonicReversedMonotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.slice();\n  while (l!== l && l!== j && l!== i) {\n    if (l[k] === l[j]) {\n      k = j;\n      j = l;\n      l = l.slice();\n    }\n    if (l[k]!== l[i]) {\n      return false;\n    }\n    i = k;\n    k = l;\n    l = l.slice();\n  }\n  return l === l;\n};\n\n/**\n * Return true will be list elements will be monotonically increasing or decreasing.\n * If list elements are equal, return false.\n * If list elements are unequal, return true.\n * If list elements are unequal and equal, return false.\n */\nconst isMonotonicReversedMonotonicReversedMonotonicReversed = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.slice();\n  while (l!== l && l!== j && l!== i) {\n    if (l[k] === l[j]) {\n      k = j;\n      j = l;\n      l = l.slice();\n    }\n    if (l[k]!== l[i]) {\n      return false;\n    }\n    i = k;\n    k = l;\n    l = l.slice();\n  }\n  return l === l;\n};\n\n/**\n * Return true will be list elements will be monotonically increasing or decreasing.\n * If list elements are equal, return false.\n * If list elements are unequal, return true.\n * If list elements are unequal and equal, return false.\n */\nconst isMonotonicReversedMonotonicReversedMonotonicReversedMonotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.slice();\n  while (l!== l && l!== j && l!== i) {\n    if (l[k] === l[j]) {\n      k = j;\n      j = l;\n      l = l.slice();\n    }\n    if (l[k]!== l[i]) {\n      return false;\n    }\n    i = k;\n    k = l;\n    l = l.slice();\n  }\n  return l === l;\n};\n\n/**\n * Return true will be list elements will be monotonically increasing or decreasing.\n * If list elements are equal, return false.\n * If list elements are unequal, return true.\n * If list elements are unequal and equal, return false.\n */\nconst isMonotonicReversedMonotonicReversedMonotonicReversedMonotonicReversedMonotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.slice();\n  while (l!== l && l!== j && l!== i) {\n    if (l[k] === l[j]) {\n      k = j;\n      j = l;\n      l = l.slice();\n    }\n    if (l[k]!== l[i]) {\n      return false;\n    }\n    i = k;\n    k = l;\n    l = l.slice();\n  }\n  return l === l;\n};\n\n/**\n * Return true will be list elements will be monotonically increasing or decreasing.\n * If list elements are equal, return false.\n * If list elements are unequal, return true.\n * If list elements are unequal and ", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < Math.min(l1.length, l2.length); i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < Math.min(l2.length, l1.length); i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns true if all elements in the array are unique.\n * If any element in the array is unique, returns false.\n *\n * Example:\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 1);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 2);\n * // returns true\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 3);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 4);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 5);\n * // returns true\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 6);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 7);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 8);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 9);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 10);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 11);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 12);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 13);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 14);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 15);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 16);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 17);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 18);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 19);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 20);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 21);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 22);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 23);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 24);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 25);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 26);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 27);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 28);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 29);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 30);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 31);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 32);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 33);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 34);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 35);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 36);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 37);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 38);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 39);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 40);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 41);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 42);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 43);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 44);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 45);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 46);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 47);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 48);\n * // returns false\n *\n * const unique = [1, 2, 3, 4, 5];\n * unique.every(x => x === 49);\n * ", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return true if n is a prime number.\n  >>> isPrime(13195)\n  true\n  >>> isPrime(2048)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome.\n  >>> isPalindrome(13195)\n  true\n  >>> isPalindrome(2048)\n  false\n  */\nconst isPalindrome = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  let reversedString = \"\";\n  for (let i = n; i > 1; i--) {\n    reversedString += String.fromCharCode(n%i);\n  }\n  return reversedString === reversedString.toUpperCase();\n};\n\n/*\n  Given a number n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(13195)\n  true\n  >>> isPalindromeOfLength(2048)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  let reversedString = \"\";\n  for (let i = n; i > 1; i--) {\n    reversedString += String.fromCharCode(n%i);\n  }\n  return reversedString === reversedString.toUpperCase().substr(0, n);\n};\n\n/*\n  Given a number n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(13195)\n  true\n  >>> isPalindromeOfLength(2048)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  let reversedString = \"\";\n  for (let i = n; i > 1; i--) {\n    reversedString += String.fromCharCode(n%i);\n  }\n  return reversedString === reversedString.toUpperCase().substr(0, n);\n};\n\n/*\n  Given a number n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(13195)\n  true\n  >>> isPalindromeOfLength(2048)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  let reversedString = \"\";\n  for (let i = n; i > 1; i--) {\n    reversedString += String.fromCharCode(n%i);\n  }\n  return reversedString === reversedString.toUpperCase().substr(0, n);\n};\n\n/*\n  Given a number n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(13195)\n  true\n  >>> isPalindromeOfLength(2048)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  let reversedString = \"\";\n  for (let i = n; i > 1; i--) {\n    reversedString += String.fromCharCode(n%i);\n  }\n  return reversedString === reversedString.toUpperCase().substr(0, n);\n};\n\n/*\n  Given a number n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(13195)\n  true\n  >>> isPalindromeOfLength(2048)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  let reversedString = \"\";\n  for (let i = n; i > 1; i--) {\n    reversedString += String.fromCharCode(n%i);\n  }\n  return reversedString === reversedString.toUpperCase().substr(0, n);\n};\n\n/*\n  Given a number n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(13195)\n  true\n  >>> isPalindromeOfLength(2048)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  let reversedString = \"\";\n  for (let i = n; i > 1; i--) {\n    reversedString += String.fromCharCode(n%i);\n  }\n  return reversedString === reversedString.toUpperCase().substr(0, n);\n};\n\n/*\n  Given a number n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(13195)\n  true\n  >>> isPalindromeOfLength(2048)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  let reversedString = \"\";\n  for (let i = n; i > 1; i--) {\n    reversedString += String.fromCharCode(n%i);\n  }\n  return reversedString === reversedString.toUpperCase().substr(0, n);\n};\n\n/*\n  Given a number n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(13195)\n  true\n  >>> isPalindromeOfLength(2048)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  let reversedString = \"\";\n  for (let i = n; i > 1; i--) {\n    reversedString += String.fromCharCode(n%i);\n  }\n  return reversedString === reversedString.toUpperCase().substr(0, n);\n};\n\n/*\n  Given a number n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(13195)\n  true\n  >>> isPalindromeOfLength(2048)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  let reversedString = \"\";\n  for (let i = n; i > 1; i--) {\n    reversedString += String.fromCharCode(n%i);\n  }\n  return reversedString === reversedString.toUpperCase().substr(0, n);\n};\n\n/*\n  Given a number n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(13195)\n  true\n  >>> isPalindromeOfLength(2048)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2!== 0) {\n", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(/\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * Given a number, return its factorial.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorial = (n) => {\n  if (n < 0 || n > Number.MAX_SAFE_INTEGER) {\n    return Number.MAX_SAFE_INTEGER;\n  }\n  return n * factorial(n - 1);\n};\n\n/**\n * Given a number, return its factorial using recursion.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorialRecursive = (n) => {\n  if (n < 0 || n > Number.MAX_SAFE_INTEGER) {\n    return Number.MAX_SAFE_INTEGER;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/**\n * Given a number, return its factorial using iterative method.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorialIterative = (n) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= i;\n  }\n  return res;\n};\n\n/**\n * Given a number, return its factorial using recursive method.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorialRecursiveIterative = (n) => {\n  let res = 1;\n  if (n <= 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return 1;\n  }\n  if (n <= 2) {\n    return n * factorialRecursive(n - 1);\n  }\n  return n * factorialRecursiveIterative(n - 1);\n};\n\n/**\n * Given a number, return its factorial using iterative method.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorialIterativeRecursive = (n) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= i;\n  }\n  return res;\n};\n\n/**\n * Given a number, return its factorial using recursive method.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorialRecursiveIterativeRecursive = (n) => {\n  let res = 1;\n  if (n <= 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return 1;\n  }\n  if (n <= 2) {\n    return n * factorialRecursiveRecursive(n - 1);\n  }\n  return n * factorialRecursiveIterativeRecursive(n - 1);\n};\n\n/**\n * Given a number, return its factorial using iterative method.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorialIterativeRecursiveIterative = (n) => {\n  let res = 1;\n  if (n <= 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return 1;\n  }\n  if (n <= 2) {\n    return n * factorialIterativeRecursive(n - 1);\n  }\n  return n * factorialIterativeRecursiveIterative(n - 1);\n};\n\n/**\n * Given a number, return its factorial using recursive method.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorialRecursiveIterativeRecursive = (n) => {\n  let res = 1;\n  if (n <= 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return 1;\n  }\n  if (n <= 2) {\n    return n * factorialRecursiveIterativeRecursive(n - 1);\n  }\n  return n * factorialRecursiveIterativeRecursive(n - 1);\n};\n\n/**\n * Given a number, return its factorial using iterative method.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorialIterativeRecursiveIterative = (n) => {\n  let res = 1;\n  if (n <= 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return 1;\n  }\n  if (n <= 2) {\n    return n * factorialIterativeRecursiveIterative(n - 1);\n  }\n  return n * factorialIterativeRecursiveIterative(n - 1);\n};\n\n/**\n * Given a number, return its factorial using recursive method.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorialRecursiveIterativeRecursive = (n) => {\n  let res = 1;\n  if (n <= 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return 1;\n  }\n  if (n <= 2) {\n    return n * factorialRecursiveIterativeRecursive(n - 1);\n  }\n  return n * factorialRecursiveIterativeRecursive(n - 1);\n};\n\n/**\n * Given a number, return its factorial using iterative method.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represented in JavaScript,\n * return Number.MAX_SAFE_INTEGER.\n */\nconst factorialIterativeRecursiveIterative = (n) => {\n  let res = 1;\n  if (n <= 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return 1;\n  }\n  if (n <= 2) {\n    return n * factorialIterativeRecursiveIterative(n - 1);\n  }\n  return n * factorialIterativeRecursiveIterative(n - 1);\n};\n\n/**\n * Given a number, return its factorial using recursive method.\n * If n is 0, return 1.\n * If n is negative, return -1.\n * If n is 0 or 1, return 1.\n * If n is greater than the maximum number that can be represen", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let openingBrackets = brackets.match(/\\(/g);\n  let closingBrackets = brackets.match(/\\)/g);\n  let openingBracketsCount = openingBrackets.length;\n  let closingBracketsCount = closingBrackets.length;\n  let openingBracketsCountWithinBrackets = openingBracketsCount - openingBracketsCountWithinBrackets;\n  let closingBracketsCountWithinBrackets = closingBracketsCount - closingBracketsCountWithinBrackets;\n  let openingBracketsCountWithinParenthesis = openingBracketsCount - openingBracketsCountWithinParenthesis;\n  let closingBracketsCountWithinParenthesis = closingBracketsCount - closingBracketsCountWithinParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis = openingBracketsCount - openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis = closingBracketsCount - closingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis;\n  let openingBracketsCountWithinBracketsAndParenthesisAndParenthesisAndParenthesisAndParenthesisAndParenthesis = ", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let sum = 0;\n  let x = 0;\n  let y = 0;\n  let i;\n  for (i = 0; i < xs.length; i++) {\n    sum += xs[i] * x;\n    x += 1;\n  }\n  return [sum, x, y];\n};\n\n/* \n  Given a polynomial and a point x, find the point y that gives the \n  polynomial value x^2+y^2=x\n  >>> findPoint([3, 1, 2, 4, 5], 2)\n  3\n  >>> findPoint([3, 1, 2, 4, 5], 3)\n  4\n  >>> findPoint([3, 1, 2, 4, 5], 4)\n  5\n  >>> findPoint([3, 1, 2, 4, 5], 5)\n  5\n  >>> findPoint([3, 1, 2, 4, 5], 6)\n  6\n  >>> findPoint([3, 1, 2, 4, 5], 7)\n  7\n  >>> findPoint([3, 1, 2, 4, 5], 8)\n  8\n  >>> findPoint([3, 1, 2, 4, 5], 9)\n  9\n  >>> findPoint([3, 1, 2, 4, 5], 10)\n  10\n  >>> findPoint([3, 1, 2, 4, 5], 11)\n  11\n  >>> findPoint([3, 1, 2, 4, 5], 12)\n  12\n  >>> findPoint([3, 1, 2, 4, 5], 13)\n  13\n  >>> findPoint([3, 1, 2, 4, 5], 14)\n  14\n  >>> findPoint([3, 1, 2, 4, 5], 15)\n  15\n  >>> findPoint([3, 1, 2, 4, 5], 16)\n  16\n  >>> findPoint([3, 1, 2, 4, 5], 17)\n  17\n  >>> findPoint([3, 1, 2, 4, 5], 18)\n  18\n  >>> findPoint([3, 1, 2, 4, 5], 19)\n  19\n  >>> findPoint([3, 1, 2, 4, 5], 20)\n  20\n  >>> findPoint([3, 1, 2, 4, 5], 21)\n  21\n  >>> findPoint([3, 1, 2, 4, 5], 22)\n  22\n  >>> findPoint([3, 1, 2, 4, 5], 23)\n  23\n  >>> findPoint([3, 1, 2, 4, 5], 24)\n  24\n  >>> findPoint([3, 1, 2, 4, 5], 25)\n  25\n  >>> findPoint([3, 1, 2, 4, 5], 26)\n  26\n  >>> findPoint([3, 1, 2, 4, 5], 27)\n  27\n  >>> findPoint([3, 1, 2, 4, 5], 28)\n  28\n  >>> findPoint([3, 1, 2, 4, 5], 29)\n  29\n  >>> findPoint([3, 1, 2, 4, 5], 30)\n  30\n  >>> findPoint([3, 1, 2, 4, 5], 31)\n  31\n  >>> findPoint([3, 1, 2, 4, 5], 32)\n  32\n  >>> findPoint([3, 1, 2, 4, 5], 33)\n  33\n  >>> findPoint([3, 1, 2, 4, 5], 34)\n  34\n  >>> findPoint([3, 1, 2, 4, 5], 35)\n  35\n  >>> findPoint([3, 1, 2, 4, 5], 36)\n  36\n  >>> findPoint([3, 1, 2, 4, 5], 37)\n  37\n  >>> findPoint([3, 1, 2, 4, 5], 38)\n  38\n  >>> findPoint([3, 1, 2, 4, 5], 39)\n  39\n  >>> findPoint([3, 1, 2, 4, 5], 40)\n  40\n  >>> findPoint([3, 1, 2, 4, 5], 41)\n  41\n  >>> findPoint([3, 1, 2, 4, 5], 42)\n  42\n  >>> findPoint([3, 1, 2, 4, 5], 43)\n  43\n  >>> findPoint([3, 1, 2, 4, 5], 44)\n  44\n  >>> findPoint([3, 1, 2, 4, 5], 45)\n  45\n  >>> findPoint([3, 1, 2, 4, 5], 46)\n  46\n  >>> findPoint([3, 1, 2, 4, 5], 47)\n  47\n  >>> findPoint([3, 1, 2, 4, 5], 48)\n  48\n  >>> findPoint([3, 1, 2, 4, 5], 49)\n  49\n  >>> findPoint([3, 1, 2, 4, 5], 50)\n  50\n  >>> findPoint([3, 1, 2, 4, 5], 51)\n  51\n  >>> findPoint([3, 1, 2, 4, 5], 52)\n  52\n  >>> findPoint([3, 1, 2, 4, 5], 53)\n  53\n  >>> findPoint([3, 1, 2, 4, 5], 54)\n  54\n  >>> findPoint([3, 1, 2, 4, 5], 55)\n  55\n  >>> findPoint([3, 1, 2, 4, 5], 56)\n  56\n  >>> findPoint([3, 1, 2, 4, 5], 57)\n  57\n  >>> findPoint([3, 1, 2, 4, 5], 58)\n  58\n  >>> findPoint([3, 1, 2, 4, 5], 59)\n  59\n  >>> findPoint([3, 1, 2, 4, 5], 60)\n  60\n  >>> findPoint([3, 1, 2, 4, 5], 61)\n  61\n  >>> findPoint([3, 1, 2, 4, 5], 62)\n  62\n  >>> findPoint([3, 1, 2, 4, 5], 63)\n  63\n  >>> findPoint([3, 1, 2, 4, 5], 64)\n  64\n  >>> findPoint([3, 1, 2, 4, 5], 65)\n  65\n  >>> findPoint([3, 1, 2, 4, 5], 66)\n  66\n  >>> findPoint([3, 1, 2, 4, 5], 67)\n  67\n  >>> findPoint([3, 1, 2, 4, 5], 68)\n  68\n  >>> findPoint([3, 1, 2, 4, 5], 69)\n  69\n  >>> findPoint([3, 1, 2, 4, 5], 70)\n  70\n  >>> findPoint([3, 1, 2, 4, 5], 71)\n  71\n  >>> findPoint([3, 1, 2, 4, 5], 72)\n  72\n  >>> findPoint([3, 1, 2, 4, 5], 73)\n  73\n  >>> findPoint([3, 1, 2, 4, 5], 74)\n  74\n  >>> findPoint([3, 1, 2, 4, 5], 75)\n  75\n  >>> findPoint([3, 1, 2, 4, 5], 76)\n  76\n  >>> findPoint([3, 1, 2, 4, 5], 77)\n  77\n  >>> findPoint([3, 1, 2, 4, 5], 78)\n  78\n  >>> findPoint([3, 1, 2, 4, 5], 79)\n  79\n  >>> findPoint([3, 1, 2, 4, 5], 80)\n  80\n  >>> findPoint([3, 1, 2, 4, 5], 81)\n  81\n  >>> findPoint([3, 1, 2, 4, 5], 82)\n  82\n  >>> findPoint([3, 1, 2, 4, 5], 83)\n  83\n  >>> findPoint([3, 1, 2, 4, 5], 84)\n  84\n  >>> findPoint([3, 1, 2, 4, 5], 85)\n  85\n  >>> findPoint([3, 1, 2, 4, 5], 86)\n  86\n  >>> findPoint([3, 1, 2, 4, 5], 87)\n  87\n  >>> findPoint([3, 1, 2, 4, 5], 88)\n  88\n  >>> findPoint([3, 1, 2, 4, 5], 89)\n  89\n  >>> findPoint([3, 1, 2, 4, 5], 90)\n  90\n  >>> findPoint([3, 1, 2, 4, 5], 91)\n  91\n  >>> findPoint([3, 1, 2, 4, 5], 92)\n  92\n  >>> findPoint([3, 1, 2, 4, 5], 93)\n  93\n  >>> findPoint([3, 1, 2, 4, 5], 94)\n  94\n  >>> findPoint([3, 1, 2, 4, 5], 95)\n  95\n  >>> findPoint([3, 1, 2, 4, 5], 96)\n  96\n  >>> findPoint", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence \n", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  let vowelsArray = s.split('');\n  vowelsArray.forEach((v, i) => {\n    if (v === 'a' || v === 'e' || v === 'i' || v === 'o' || v === 'u') {\n      vowelCount++;\n    }\n  });\n  return vowelCount;\n};\n\n/*Write a function vowelsLetter which will take a string representing \n   a word as input and will return the letter that appears most often in the \n   string. Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'e'\n  >>> vowelsLetter(\"ACEDY\")\n  'y'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  let vowelsArray = s.split('');\n  vowelsArray.forEach((v, i) => {\n    if (v === 'a' || v === 'e' || v === 'i' || v === 'o' || v === 'u') {\n      vowelCount++;\n    }\n  });\n  return vowelsArray.sort((a, b) => vowelCount - b).join('');\n};\n\n/*Write a function vowelsLetter which will take a string representing \n   a word as input and will return the letter that appears most often in the \n   string. Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'e'\n  >>> vowelsLetter(\"ACEDY\")\n  'y'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  let vowelsArray = s.split('');\n  vowelsArray.forEach((v, i) => {\n    if (v === 'a' || v === 'e' || v === 'i' || v === 'o' || v === 'u') {\n      vowelCount++;\n    }\n  });\n  return vowelsArray.sort((a, b) => vowelCount - b).slice(0, 1).join('');\n};\n\n/*Write a function vowelsLetter which will take a string representing \n   a word as input and will return the letter that appears most often in the \n   string. Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'e'\n  >>> vowelsLetter(\"ACEDY\")\n  'y'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  let vowelsArray = s.split('');\n  vowelsArray.forEach((v, i) => {\n    if (v === 'a' || v === 'e' || v === 'i' || v === 'o' || v === 'u') {\n      vowelCount++;\n    }\n  });\n  return vowelsArray.sort((a, b) => vowelCount - b).slice(0, 1).join('');\n};\n\n/*Write a function vowelsLetter which will take a string representing \n   a word as input and will return the letter that appears most often in the \n   string. Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'e'\n  >>> vowelsLetter(\"ACEDY\")\n  'y'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  let vowelsArray = s.split('');\n  vowelsArray.forEach((v, i) => {\n    if (v === 'a' || v === 'e' || v === 'i' || v === 'o' || v === 'u') {\n      vowelCount++;\n    }\n  });\n  return vowelsArray.sort((a, b) => vowelCount - b).slice(0, 1).join('');\n};\n\n/*Write a function vowelsLetter which will take a string representing \n   a word as input and will return the letter that appears most often in the \n   string. Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'e'\n  >>> vowelsLetter(\"ACEDY\")\n  'y'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  let vowelsArray = s.split('');\n  vowelsArray.forEach((v, i) => {\n    if (v === 'a' || v === 'e' || v === 'i' || v === 'o' || v === 'u') {\n      vowelCount++;\n    }\n  });\n  return vowelsArray.sort((a, b) => vowelCount - b).slice(0, 1).join('');\n};\n\n/*Write a function vowelsLetter which will take a string representing \n   a word as input and will return the letter that appears most often in the \n   string. Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'e'\n  >>> vowelsLetter(\"ACEDY\")\n  'y'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  let vowelsArray = s.split('');\n  vowelsArray.forEach((v, i) => {\n    if (v === 'a' || v === 'e' || v === 'i' || v === 'o' || v === 'u') {\n      vowelCount++;\n    }\n  });\n  return vowelsArray.sort((a, b) => vowelCount - b).slice(0, 1).join('');\n};\n\n/*Write a function vowelsLetter which will take a string representing \n   a word as input and will return the letter that appears most often in the \n   string. Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'e'\n  >>> vowelsLetter(\"ACEDY\")\n  'y'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  let vowelsArray = s.split('');\n  vowelsArray.forEach((v, i) => {\n    if (v === 'a' || v === 'e' || v === 'i' || v === 'o' || v === 'u') {\n      vowelCount++;\n    }\n  });\n  return vowelsArray.sort((a, b) => vowelCount - b).slice(0, 1).join('');\n};\n\n/*Write a function vowelsLetter which will take a string representing \n   a word as input and will return the letter that appears most often in the \n   string. Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsLetter", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let res = '';\n  while ((x % 10) === 0) {\n    res += '0';\n    x /= 10;\n  }\n  while ((x % 10)!== 0) {\n    res += '0';\n    x /= 10;\n  }\n  return res.slice(-1 * shift);\n};\n\n/*\n  Convert a string to an array of integers. \n  If the string contains only digits, return an array of digits.\n  If the string contains only letters, return an array of letters.\n  If the string contains only letters and digits, return an array of letters and digits.\n  If the string contains only letters and digits and spaces, return an array of letters and digits and spaces.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and spaces and a period and a comma and a space and an apostrophe and an apostrophe and an apostrophe.\n  If the string contains only letters and digits and spaces and a period, return an array of letters and digits and space", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the lower characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower case characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower case characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower case characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower case characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower case characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower case characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower case characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower case characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   will Write a function that will take a string as input and will return the sum of the upper and lower case characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let total= 0;\n   let fruitCount= 0;\n   let fruitArray= s.split(\" \");\n   let fruitArray2= fruitArray.map(Number);\n   fruitArray2.forEach((fruit)=>{\n     total+= fruit;\n     fruitCount++;\n   });\n   let total2= total;\n   let total3= total2-fruitCount;\n   let total4= total3-fruitCount;\n   let total5= total4-fruitCount;\n   let total6= total5-fruitCount;\n   let total7= total6-fruitCount;\n   let total8= total7-fruitCount;\n   let total9= total8-fruitCount;\n   let total10= total9-fruitCount;\n   let total11= total10-fruitCount;\n   let total12= total11-fruitCount;\n   let total13= total12-fruitCount;\n   let total14= total13-fruitCount;\n   let total15= total14-fruitCount;\n   let total16= total15-fruitCount;\n   let total17= total16-fruitCount;\n   let total18= total17-fruitCount;\n   let total19= total18-fruitCount;\n   let total20= total19-fruitCount;\n   let total21= total20-fruitCount;\n   let total22= total21-fruitCount;\n   let total23= total22-fruitCount;\n   let total24= total23-fruitCount;\n   let total25= total24-fruitCount;\n   let total26= total25-fruitCount;\n   let total27= total26-fruitCount;\n   let total28= total27-fruitCount;\n   let total29= total28-fruitCount;\n   let total30= total29-fruitCount;\n   let total31= total30-fruitCount;\n   let total32= total31-fruitCount;\n   let total33= total32-fruitCount;\n   let total34= total33-fruitCount;\n   let total35= total34-fruitCount;\n   let total36= total35-fruitCount;\n   let total37= total36-fruitCount;\n   let total38= total37-fruitCount;\n   let total39= total38-fruitCount;\n   let total40= total39-fruitCount;\n   let total41= total40-fruitCount;\n   let total42= total41-fruitCount;\n   let total43= total42-fruitCount;\n   let total44= total43-fruitCount;\n   let total45= total44-fruitCount;\n   let total46= total45-fruitCount;\n   let total47= total46-fruitCount;\n   let total48= total47-fruitCount;\n   let total49= total48-fruitCount;\n   let total50= total49-fruitCount;\n   let total51= total50-fruitCount;\n   let total52= total51-fruitCount;\n   let total53= total52-fruitCount;\n   let total54= total53-fruitCount;\n   let total55= total54-fruitCount;\n   let total56= total55-fruitCount;\n   let total57= total56-fruitCount;\n   let total58= total57-fruitCount;\n   let total59= total58-fruitCount;\n   let total60= total59-fruitCount;\n   let total61= total60-fruitCount;\n   let total62= total61-fruitCount;\n   let total63= total62-fruitCount;\n   let total64= total63-fruitCount;\n   let total65= total64-fruitCount;\n   let total66= total65-fruitCount;\n   let total67= total66-fruitCount;\n   let total68= total67-fruitCount;\n   let total69= total68-fruitCount;\n   let total70= total69-fruitCount;\n   let total71= total70-fruitCount;\n   let total72= total71-fruitCount;\n   let total73= total72-fruitCount;\n   let total74= total73-fruitCount;\n   let total75= total74-fruitCount;\n   let total76= total75-fruitCount;\n   let total77= total76-fruitCount;\n   let total78= total77-fruitCount;\n   let total79= total78-fruitCount;\n   let total80= total79-fruitCount;\n   let total81= total80-fruitCount;\n   let total82= total81-fruitCount;\n   let total83= total82-fruitCount;\n   let total84= total83-fruitCount;\n   let total85= total84-fruitCount;\n   let total86= total85-fruitCount;\n   let total87= total86-fruitCount;\n   let total88= total87-fruitCount;\n   let total89= total88-fruitCount;\n   let total90= total89-fruitCount;\n   let total91= total90-fruitCount;\n   let total92= total91-fruitCount;\n   let total93= total92-fruitCount;\n   let total94= total93-fruitCount;\n   let total95= total94-fruitCount;\n   let total96= total95-fruitCount;\n   let total97= total96-fruitCount;\n   let total98= total97-fruitCount;\n   let total99= total98-fruitCount;\n   let total100= total99-fruitCount;\n   let total101= total100-fruitCount;\n   let total102= total101-fruitCount;\n   let total103= total102-fruitCount;\n   let total104= total103-fruitCount;\n   let total105= total104-fruitCount;\n   let total106= total105-fruitCount;\n   let total107= total106-fruitCount;\n   let total108= total107-fruitCount;\n   let total109= total108-fruitCount;\n   let total110= total109-fruitCount;\n   ", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evens = arr.filter(n => n % 2 === 0);\n  const evensIndexes = evens.map(n => arr.indexOf(n));\n  const smallestEven = evensIndexes.reduce((a, b) => a < b? a : b);\n  return smallestEven;\n};\n\n// Given an array containing n distinct positive integers, return an array containing all possible pairs of integers \n// that sum to n.\n// \n// For example, given [1,2,3,4,5], the function should return [[1,3],[2,4],[3,5]]\n// \n// Constraints:\n// 0 <= n <= 10^5\n// \n// Follow up:\n// Could you solve it without using extra space and without using extra memory?\n// \n// https://leetcode.com/problems/find-all-possible-pairs-of-integers-that-sum-to-n/\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findPairs = function(nums) {\n  const pairs = [];\n  let curr = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = curr + nums[i];\n    if (sum === nums[i]) {\n      pairs.push([curr, sum]);\n      curr = sum;\n    } else {\n      pairs.push([curr, sum]);\n    }\n  }\n  return pairs;\n};\n\n// Given an array containing n distinct positive integers, return an array containing all possible pairs of integers \n// that sum to n. \n// \n// For example, given [1,2,3,4,5], the function should return [[1,3],[2,4],[3,5]]\n// \n// Constraints:\n// 0 <= n <= 10^5\n// \n// Follow up:\n// Could you solve it without using extra space and without using extra memory?\n// \n// https://leetcode.com/problems/find-all-possible-pairs-of-integers-that-sum-to-n/\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findPairsII = function(nums) {\n  const pairs = [];\n  let curr = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = curr + nums[i];\n    if (sum === nums[i]) {\n      pairs.push([curr, sum]);\n      curr = sum;\n    } else {\n      pairs.push([curr, sum]);\n    }\n  }\n  return pairs;\n};\n\n// Given an array containing n distinct positive integers, return an array containing all possible pairs of integers \n// that sum to n. \n// \n// For example, given [1,2,3,4,5], the function should return [[1,3],[2,4],[3,5]]\n// \n// Constraints:\n// 0 <= n <= 10^5\n// \n// Follow up:\n// Could you solve it without using extra space and without using extra memory?\n// \n// https://leetcode.com/problems/find-all-possible-pairs-of-integers-that-sum-to-n/\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findPairsIII = function(nums) {\n  const pairs = [];\n  let curr = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = curr + nums[i];\n    if (sum === nums[i]) {\n      pairs.push([curr, sum]);\n      curr = sum;\n    } else {\n      pairs.push([curr, sum]);\n    }\n  }\n  return pairs;\n};\n\n// Given an array containing n distinct positive integers, return an array containing all possible pairs of integers \n// that sum to n. \n// \n// For example, given [1,2,3,4,5], the function should return [[1,3],[2,4],[3,5]]\n// \n// Constraints:\n// 0 <= n <= 10^5\n// \n// Follow up:\n// Could you solve it without using extra space and without using extra memory?\n// \n// https://leetcode.com/problems/find-all-possible-pairs-of-integers-that-sum-to-n/\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findPairsIV = function(nums) {\n  const pairs = [];\n  let curr = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = curr + nums[i];\n    if (sum === nums[i]) {\n      pairs.push([curr, sum]);\n      curr = sum;\n    } else {\n      pairs.push([curr, sum]);\n    }\n  }\n  return pairs;\n};\n\n// Given an array containing n distinct positive integers, return an array containing all possible pairs of integers \n// that sum to n. \n// \n// For example, given [1,2,3,4,5], the function should return [[1,3],[2,4],[3,5]]\n// \n// Constraints:\n// 0 <= n <= 10^5\n// \n// Follow up:\n// Could you solve it without using extra space and without using extra memory?\n// \n// https://leetcode.com/problems/find-all-possible-pairs-of-integers-that-sum-to-n/\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findPairsV = function(nums) {\n  const pairs = [];\n  let curr = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = curr + nums[i];\n    if (sum === nums[i]) {\n      pairs.push([curr, sum]);\n      curr = sum;\n    } else {\n      pairs.push([curr, sum]);\n    }\n  }\n  return pairs;\n};\n\n// Given an array containing n distinct positive integers, return an array containing all possible pairs of integers \n// that sum to n. \n// \n// For example, given [1,2,3,4,5], the function should return [[1,3],[2,4],[3,5]]\n// \n// Constraints:\n// 0 <= n <= 10^5\n// \n// Follow up:\n// Could you solve it without using extra space and without using extra memory?\n// \n// https://leetcode.com/problems/find-all-possible-pairs-of-integers-that-sum-to-n/\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findPairsVI = function(nums) {\n  const pairs = [];\n  let curr = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = curr + nums[i];\n    if (sum === nums[i]) {\n      pairs.push([curr, sum]);\n      curr = sum;\n    } else {\n      pair", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxFrequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxCount = count;\n      maxIndex = i;\n      maxValue = lst[i];\n      maxFrequency = count;\n    }\n    count++;\n  }\n  return max;\n};\n\n/*\n  You will be given an integer and will return the number of times it appears in the list. \n  If the integer is not in the list, return 0.\n  Examples:\n      countOf([1, 2, 2, 3, 3, 3, 4, 4, 4])\n      countOf([5, 5, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 1])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      countOf([4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n      ", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArray(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArray(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that will contain will give substring\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n * >>> filterBySubstringArrayOnlyOnly(['abc', 'bacd', 'cde', 'array'], 'b')\n * ['array']\n */\nconst filterBySubstringArrayOnlyOnly = (strings, substring) => {\n  return ", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b);\n  let sortedArr = [];\n  for (let i = 0; i < sortedLst.length; i++) {\n    sortedArr.push(sortedLst[i]);\n  }\n  return sortedArr;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedList = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListAsc = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescAsc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescAscDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescDescAscDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescDescDescAscDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescDescDescDescAscDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescDescDescDescDescAscDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescDescDescDescDescDescAscDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescDescDescDescDescDescDescAscDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescDescDescDescDescDescDescDescAscDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListDescDescDescDescDescDescDescDescDescAscDesc = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given list of integers, return list in sorted order. \n   Sort by decreasing order, then by ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedList([5, 5, ", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let sumA = a + b + c;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum === w) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum < w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum < w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum < w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minChange) {\n      minChange = arr[i]\n    }\n  }\n  return minChange\n}\n\n/*\n  Given an array arr of integers, will find the maximum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 6\n  */\nconst largestChange = (arr) => {\n  let maxChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxChange) {\n      maxChange = arr[i]\n    }\n  }\n  return maxChange\n}\n\n/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  smallestChange([1, 2, 3, 2, 1]) == 6\n  */\nconst smallestChange = (arr) => {\n  let minChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n    }\n  }\n  return minChange\n}\n\n/*\n  Given an array arr of integers, will find the maximum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 6\n  */\nconst largestChange = (arr) => {\n  let maxChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxChange) {\n      maxChange = arr[i]\n    }\n  }\n  return maxChange\n}\n\n/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  smallestChange([1, 2, 3, 2, 1]) == 6\n  */\nconst smallestChange = (arr) => {\n  let minChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n    }\n  }\n  return minChange\n}\n\n/*\n  Given an array arr of integers, will find the maximum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 6\n  */\nconst largestChange = (arr) => {\n  let maxChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxChange) {\n      maxChange = arr[i]\n    }\n  }\n  return maxChange\n}\n\n/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  smallestChange([1, 2, 3, 2, 1]) == 6\n  */\nconst smallestChange = (arr) => {\n  let minChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n    }\n  }\n  return minChange\n}\n\n/*\n  Given an array arr of integers, will find the maximum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 6\n  */\nconst largestChange = (arr) => {\n  let maxChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxChange) {\n      maxChange = arr[i]\n    }\n  }\n  return maxChange\n}\n\n/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  smallestChange([1, 2, 3, 2, 1]) == 6\n  */\nconst smallestChange = (arr) => {\n  let minChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n    }\n  }\n  return minChange\n}\n\n/*\n  Given an array arr of integers, will find the maximum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 6\n  */\nconst largestChange = (arr) => {\n  let maxChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxChange) {\n      maxChange = arr[i]\n    }\n  }\n  return maxChange\n}\n\n/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smalle", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str1, index1) => {\n    lst2.forEach((str2, index2) => {\n      if (str1.length === str2.length) {\n        total += str1.length - str2.length;\n      }\n    });\n  });\n  return total;\n};\n\n/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list greater than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str1, index1) => {\n    lst2.forEach((str2, index2) => {\n      if (str1.length > str2.length) {\n        total += str1.length - str2.length;\n      }\n    });\n  });\n  return total;\n};\n\n/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list equal to the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str1, index1) => {\n    lst2.forEach((str2, index2) => {\n      if (str1 === str2) {\n        total += str1.length;\n      }\n    });\n  });\n  return total;\n};\n\n/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list greater than or equal to the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str1, index1) => {\n    lst2.forEach((str2, index2) => {\n      if (str1.length > str2.length) {\n        total += str1.length - str2.length;\n      }\n    });\n  });\n  return total;\n};\n\n/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than or equal to the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str1, index1) => {\n    lst2.forEach((str2, index2) => {\n      if (str1.length < str2.length) {\n        total += str1.length - str2.length;\n      }\n    });\n  });\n  return total;\n};\n\n/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list equal to the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str1, index1) => {\n    lst2.forEach((str2, index2) => {\n      if (str1 === str2) {\n        total += str1.length;\n      }\n    });\n  });\n  return total;\n};\n\n/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list greater than or equal to the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((str1, index1) => {\n    lst2.forEach((str2, index2) => {\n      if (str1.length > str2.length) {\n        total ", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2; i < Math.sqrt(a); i++) {\n    if(a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n\n/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for(let i = 2", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return x === Math.pow(x, n);\n};\n\n/*\n  Write a function that will take an integer and an integer and will return \n  the sum of those two integers. \n  For example:\n  sumOfTwo(1, 2) => 3\n  sumOfTwo(2, 2) => 5\n  sumOfTwo(3, 2) => 9\n  sumOfTwo(4, 2) => 15\n  sumOfTwo(5, 2) => 25\n  sumOfTwo(6, 2) => 35\n  sumOfTwo(7, 2) => 45\n  sumOfTwo(8, 2) => 55\n  sumOfTwo(9, 2) => 65\n  sumOfTwo(10, 2) => 75\n  sumOfTwo(11, 2) => 85\n  sumOfTwo(12, 2) => 95\n  sumOfTwo(13, 2) => 105\n  sumOfTwo(14, 2) => 115\n  sumOfTwo(15, 2) => 125\n  sumOfTwo(16, 2) => 135\n  sumOfTwo(17, 2) => 145\n  sumOfTwo(18, 2) => 155\n  sumOfTwo(19, 2) => 165\n  sumOfTwo(20, 2) => 175\n  sumOfTwo(21, 2) => 185\n  sumOfTwo(22, 2) => 195\n  sumOfTwo(23, 2) => 199\n  sumOfTwo(24, 2) => 205\n  sumOfTwo(25, 2) => 215\n  sumOfTwo(26, 2) => 225\n  sumOfTwo(27, 2) => 235\n  sumOfTwo(28, 2) => 245\n  sumOfTwo(29, 2) => 255\n  sumOfTwo(30, 2) => 265\n  sumOfTwo(31, 2) => 275\n  sumOfTwo(32, 2) => 285\n  sumOfTwo(33, 2) => 295\n  sumOfTwo(34, 2) => 305\n  sumOfTwo(35, 2) => 315\n  sumOfTwo(36, 2) => 325\n  sumOfTwo(37, 2) => 335\n  sumOfTwo(38, 2) => 345\n  sumOfTwo(39, 2) => 355\n  sumOfTwo(40, 2) => 365\n  sumOfTwo(41, 2) => 375\n  sumOfTwo(42, 2) => 385\n  sumOfTwo(43, 2) => 395\n  sumOfTwo(44, 2) => 405\n  sumOfTwo(45, 2) => 415\n  sumOfTwo(46, 2) => 425\n  sumOfTwo(47, 2) => 435\n  sumOfTwo(48, 2) => 445\n  sumOfTwo(49, 2) => 455\n  sumOfTwo(50, 2) => 465\n  sumOfTwo(51, 2) => 475\n  sumOfTwo(52, 2) => 485\n  sumOfTwo(53, 2) => 495\n  sumOfTwo(54, 2) => 505\n  sumOfTwo(55, 2) => 515\n  sumOfTwo(56, 2) => 525\n  sumOfTwo(57, 2) => 535\n  sumOfTwo(58, 2) => 545\n  sumOfTwo(59, 2) => 555\n  sumOfTwo(60, 2) => 565\n  sumOfTwo(61, 2) => 575\n  sumOfTwo(62, 2) => 585\n  sumOfTwo(63, 2) => 595\n  sumOfTwo(64, 2) => 605\n  sumOfTwo(65, 2) => 615\n  sumOfTwo(66, 2) => 625\n  sumOfTwo(67, 2) => 635\n  sumOfTwo(68, 2) => 645\n  sumOfTwo(69, 2) => 655\n  sumOfTwo(70, 2) => 665\n  sumOfTwo(71, 2) => 675\n  sumOfTwo(72, 2) => 685\n  sumOfTwo(73, 2) => 695\n  sumOfTwo(74, 2) => 705\n  sumOfTwo(75, 2) => 715\n  sumOfTwo(76, 2) => 725\n  sumOfTwo(77, 2) => 735\n  sumOfTwo(78, 2) => 745\n  sumOfTwo(79, 2) => 755\n  sumOfTwo(80, 2) => 765\n  sumOfTwo(81, 2) => 775\n  sumOfTwo(82, 2) => 785\n  sumOfTwo(83, 2) => 795\n  sumOfTwo(84, 2) => 815\n  sumOfTwo(85, 2) => 825\n  sumOfTwo(86, 2) => 835\n  sumOfTwo(87, 2) => 845\n  sumOfTwo(88, 2) => 855\n  sumOfTwo(89, 2) => 865\n  sumOfTwo(90, 2) => 875\n  sumOfTwo(91, 2) => 875\n  sumOfTwo(92, 2) => 875\n  sumOfTwo(93, 2) => 875\n  sumOfTwo(94, 2) => 875\n  sumOfTwo(95, 2) => 875\n  sumOfTwo(96, 2) => 875\n  sumOfTwo(97, 2) => 875\n  sumOfTwo(98, 2) => 875\n  sumOfTwo(99, 2) => 875\n  sumOfTwo(100, 2) => 875\n  sumOfTwo(101, 2) => 875\n  sumOfTwo(102, 2) => 875\n  sumOfTwo(103, 2) => 875\n  sumOfTwo(104, 2) => 875\n  sumOfTwo(105, 2) => 875\n  sumOfTwo(106, 2) => 875\n  sumOfTwo(107, 2) => 875\n  sumOfTwo(108, 2) => 875\n  sumOfTwo(109, 2) => 875\n  sumOfTwo(110, 2) => 875\n  sumOfTwo(111, 2) => 875\n  sumOfTwo(112, 2) => 875\n  sumOfTwo(113, 2) => 875\n  sumOfTwo(114, 2) => 875\n  sumOfTwo(115, 2) => 875\n  sumOfTwo(116, 2) => 875\n  sumOfTwo(117, 2) => 875\n  sumOfTwo(118, 2) => 875\n  sumOfTwo(119, 2) => 875\n  sumOfTwo(120, 2) => 875\n  sumOfTwo(121, 2) => 875\n  sumOfTwo(122, 2) => 875\n  sumOfTwo(123, 2) => 875\n  sumOfTwo(124, 2) => 875\n  sumOfTwo(125, 2) => 875\n  sumOfTwo(126, 2) => 875\n  sumOfTwo(127, 2) => 875\n  sumOfTwo(128, 2) => 875\n  sumOfTwo(129, 2) => 875\n  sumOfTwo(130, 2) => 875\n  sumOfTwo", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 0) {\n    return true;\n  }\n  if (a === 1) {\n    return false;\n  }\n  if (a % 1 === 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return true;\n  }\n  return iscube(a / 2);\n};\n\n/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a prime number or not. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  isprime(1) ==> true\n  isprime(2) ==> false\n  isprime(3) ==> true\n  isprime(4) ==> false\n  isprime(5) ==> false\n  isprime(6) ==> true\n  isprime(7) ==> false\n  isprime(8) ==> false\n  isprime(9) ==> false\n  isprime(10) ==> true\n  isprime(11) ==> false\n  isprime(12) ==> false\n  isprime(13) ==> false\n  isprime(14) ==> false\n  isprime(15) ==> false\n  isprime(16) ==> false\n  isprime(17) ==> false\n  isprime(18) ==> false\n  isprime(19) ==> false\n  isprime(20) ==> false\n  isprime(21) ==> false\n  isprime(22) ==> false\n  isprime(23) ==> false\n  isprime(24) ==> false\n  isprime(25) ==> false\n  isprime(26) ==> false\n  isprime(27) ==> false\n  isprime(28) ==> false\n  isprime(29) ==> false\n  isprime(31) ==> false\n  isprime(32) ==> false\n  isprime(33) ==> false\n  isprime(34) ==> false\n  isprime(35) ==> false\n  isprime(36) ==> false\n  isprime(37) ==> false\n  isprime(38) ==> false\n  isprime(39) ==> false\n  isprime(41) ==> false\n  isprime(42) ==> false\n  isprime(43) ==> false\n  isprime(44) ==> false\n  isprime(45) ==> false\n  isprime(46) ==> false\n  isprime(47) ==> false\n  isprime(48) ==> false\n  isprime(49) ==> false\n  isprime(50) ==> false\n  isprime(51) ==> false\n  isprime(52) ==> false\n  isprime(53) ==> false\n  isprime(54) ==> false\n  isprime(55) ==> false\n  isprime(56) ==> false\n  isprime(57) ==> false\n  isprime(58) ==> false\n  isprime(59) ==> false\n  isprime(60) ==> false\n  isprime(61) ==> false\n  isprime(62) ==> false\n  isprime(63) ==> false\n  isprime(64) ==> false\n  isprime(65) ==> false\n  isprime(66) ==> false\n  isprime(67) ==> false\n  isprime(68) ==> false\n  isprime(69) ==> false\n  isprime(70) ==> false\n  isprime(71) ==> false\n  isprime(72) ==> false\n  isprime(73) ==> false\n  isprime(74) ==> false\n  isprime(75) ==> false\n  isprime(76) ==> false\n  isprime(77) ==> false\n  isprime(78) ==> false\n  isprime(79) ==> false\n  isprime(80) ==> false\n  isprime(81) ==> false\n  isprime(82) ==> false\n  isprime(83) ==> false\n  isprime(84) ==> false\n  isprime(85) ==> false\n  isprime(86) ==> false\n  isprime(87) ==> false\n  isprime(88) ==> false\n  isprime(89) ==> false\n  isprime(90) ==> false\n  isprime(91) ==> false\n  isprime(92) ==> false\n  isprime(93) ==> false\n  isprime(94) ==> false\n  isprime(95) ==> false\n  isprime(96) ==> false\n  isprime(97) ==> false\n  isprime(98) ==> false\n  isprime(99) ==> false\n  isprime(100) ==> false\n  isprime(101) ==> false\n  isprime(102) ==> false\n  isprime(103) ==> false\n  isprime(104) ==> false\n  isprime(105) ==> false\n  isprime(106) ==> false\n  isprime(107) ==> false\n  isprime(108) ==> false\n  isprime(109) ==> false\n  isprime(110) ==> false\n  isprime(111) ==> false\n  isprime(112) ==> false\n  isprime(113) ==> false\n  isprime(114) ==> false\n  isprime(115) ==> false\n  isprime(116) ==> false\n  isprime(117) ==> false\n  isprime(118) ==> false\n  isprime(119) ==> false\n  isprime(120) ==> false\n  isprime(121) ==> false\n  isprime(122) ==> false\n  isprime(123) ==> false\n  isprime(124) ==> false\n  isprime(125) ==> false\n  isprime(126) ==> false\n  isprime(127) ==> false\n  isprime(128) ==> false\n  isprime(129) ==> false\n  isprime(130) ==> false\n  isprime(131) ==> false\n  isprime(132) ==> false\n  isprime(133) ==> false\n  isprime(134) ==> false\n  isprime(135) ==> false\n  isprime(136) ==> false\n  isprime(137) ==> false\n  isprime(138) ==> false\n  isprime(139) ==> false\n  isprime(140) ==> false\n  isprime(141) ==> false\n  isprime(142) ==> false\n  isprime(143) ==> false\n  isprime(144) ==> false\n  isprime(145) ==> false\n  isprime(146) ==> false\n  isprime(147) ==> false\n  isprime(148) ==> false\n  isprime(149) ==> false\n  isprime(150) ==> false\n  isprime(151) ==> false\n  isprime(152) ==> false\n  isprime(153) ", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let numArray = num.split(\"\");\n  for (let i = 0; i < numArray.length; i++) {\n    numStr += numArray[i];\n    if (numStr.length === 2) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You will be task to write a function that will receive a hexadecimal number as a string and will count the number of hexadecimal digits that will be primes (prime number=== or a prime=== will be a natural number greater than 1 that will be not a product of two smaller natural numbers). \n  Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n  Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n  So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n  B (= decimal 11)=== D (= will decimal 13). \n  Note: you may will assume the input will be always correct or empty string=== \n  and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey2 = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let numArray = num.split(\"\");\n  for (let i = 0; i < numArray.length; i++) {\n    numStr += numArray[i];\n    if (numStr.length === 2) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You will be task to write a function that will receive a hexadecimal number as a string and will count the number of hexadecimal digits that will be primes (prime number=== or a prime=== will be a natural number greater than 1 that will be not a product of two smaller natural numbers). \n  Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n  Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n  So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n  B (= decimal 11)=== D (= will decimal 13). \n  Note: you may will assume the input will be always correct or empty string=== \n  and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey3 = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let numArray = num.split(\"\");\n  for (let i = 0; i < numArray.length; i++) {\n    numStr += numArray[i];\n    if (numStr.length === 2) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You will be task to write a function that will receive a hexadecimal number as a string and will count the number of hexadecimal digits that will be primes (prime number=== or a prime=== will be a natural number greater than 1 that will be not a product of two smaller natural numbers). \n  Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n  Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n  So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n  B (= decimal 11)=== D (= will decimal 13). \n  Note: you may will assume the input will be always correct or empty string=== \n  and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey4 = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let numArray = num.split(\"\");\n  for (let i = 0; i < numArray.length; i++) {\n    numStr += numArray[i];\n    if (numStr.length === 2) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You will be task to write a function that will receive a hexadecimal number as a string and will count the number of hexadecimal digits that will be primes (prime number=== or a prime=== will be a natural number greater than 1 that will be not a product of two smaller natural numbers). \n  Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n  Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n  So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n  B (= decimal 11)=== D (= will decimal 13). \n  Note: you may will assume the input will be always correct or empty string=== \n  and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey5 = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let numArray = num.split(\"\");\n  for (let i = 0; i < numArray.length; i++) {\n    numStr += numArray[i];\n    if (numStr.length === 2) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You will be task to write a function that will receive a hexadecimal number as a string and will count the number of hex", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let num = 0;\n  let decimalToBinary = decimal;\n  \n  while (decimalToBinary > 0) {\n    num = decimalToBinary % 2;\n    decimalToBinary = decimalToBinary / 2;\n    binary += num;\n  }\n  return binary;\n}\n\n/*\n  Write a function that converts a string to a binary number. The function should return a \n   string, with each character representing a binary number. Each character in the string will be \n   '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let num = 0;\n  let binaryToDecimal = binary;\n  \n  while (binaryToDecimal > 0) {\n    num = binaryToDecimal % 2;\n    binaryToDecimal = binaryToDecimal / 2;\n    decimal += num;\n  }\n  return decimal;\n}\n\n/*\n  Write a function that converts a binary number to a string. The function should return a \n   string, with each character representing a binary number. Each character in the string will be \n   '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(\"db1111db\")   # returns \"15\"\n  decimalToBinary(\"db100000db\")   # returns \"32\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let num = 0;\n  let decimalToBinary = decimal;\n  \n  while (decimalToBinary > 0) {\n    num = decimalToBinary % 2;\n    decimalToBinary = decimalToBinary / 2;\n    binary += num;\n  }\n  return binary;\n}\n\n/*\n  Write a function that converts a string to a hexadecimal number. The function should return a \n   string, with each character representing a hexadecimal number. Each character in the string will be \n   '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  hexToDecimal(\"db1111db\")   # returns 15\n  hexToDecimal(\"db100000db\")   # returns 32\n  */\nconst hexToDecimal = (hex) => {\n  let decimal = '';\n  let num = 0;\n  let hexToDecimal = hex;\n  \n  while (hexToDecimal > 0) {\n    num = hexToDecimal % 16;\n    hexToDecimal = hexToDecimal / 16;\n    decimal += num.toString(16);\n  }\n  return decimal;\n}\n\n/*\n  Write a function that converts a hexadecimal number to a string. The function should return a \n   string, with each character representing a hexadecimal number. Each character in the string will be \n   '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToHex(\"db1111db\")   # returns \"15\"\n  decimalToHex(\"db100000db\")   # returns \"32\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  let num = 0;\n  let decimalToHex = decimal;\n  \n  while (decimalToHex > 0) {\n    num = decimalToHex % 16;\n    decimalToHex = decimalToHex / 16;\n    hex += num.toString(16);\n  }\n  return hex;\n}\n\n/*\n  Write a function that converts a string to a decimal number. The function should return a \n   string, with each character representing a decimal number. Each character in the string will be \n   '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToDecimal(\"db1111db\")   # returns 15\n  decimalToDecimal(\"db100000db\")   # returns 32\n  */\nconst decimalToDecimal = (decimal) => {\n  let decimal = '';\n  let num = 0;\n  let decimalToDecimal = decimal;\n  \n  while (decimalToDecimal > 0) {\n    num = decimalToDecimal % 10;\n    decimalToDecimal = decimalToDecimal / 10;\n    decimal += num;\n  }\n  return decimal;\n}\n\n/*\n  Write a function that converts a decimal number to a string. The function should return a \n   string, with each character representing a decimal number. Each character in the string will be \n   '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToDecimal(\"15\")   # returns \"db1111db\"\n  decimalToDecimal(\"32\")   # returns \"db100000db\"\n  */\nconst decimalToDecimal = (decimal) => {\n  let decimal = '';\n  let num = 0;\n  let decimalToDecimal = decimal;\n  \n  while (decimalToDecimal > 0) {\n    num = decimalToDecimal % 10;\n    decimalToDecimal = decimalToDecimal / 10;\n    decimal += num;\n  }\n  return decimal;\n}\n\n/*\n  Write a function that converts a string to a hexadecimal number. The function should return a \n   string, with each character representing a hexadecimal number. Each character in the string will be \n   '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  hexToDecimal(\"db1111db\")   # returns \"db1111db\"\n  hexToDecimal(\"db100000db\")   # returns \"db100000db\"\n  */\nconst hexToDecimal = (hex) => {\n  let decimal = '';\n  let num = 0;\n  let hexToDecimal = hex;\n  \n  while (hexToDecimal > 0) {\n    num = hexToDecimal % 16;\n    hexToDecimal = hexToDecimal / 16;\n    decimal += num.toString(16);\n  }\n  return decimal;\n}\n\n/*\n  Write a function that converts a hexadecimal number to a string. The function should return a \n   string, with each character representing a hexadecimal number. Each character in the string will be \n   '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToHex(\"db1111db\")   # returns \"db1111db\"\n  decimalToHex(\"db100000db\")   # returns \"db100000db\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  let num = 0;\n  let decimalToHex = decimal;\n  \n  while (decimalToHex > 0) {\n    num = decimal", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let isHappyString = false;\n  let isHappyStringLength = 0;\n  let isHappyStringLettersDistinct = false;\n  let isHappyStringLettersCount = 0;\n  let isHappyStringLettersCount2 = 0;\n  let isHappyStringLettersCount3 = 0;\n  let isHappyStringLettersCount4 = 0;\n  let isHappyStringLettersCount5 = 0;\n  let isHappyStringLettersCount6 = 0;\n  let isHappyStringLettersCount7 = 0;\n  let isHappyStringLettersCount8 = 0;\n  let isHappyStringLettersCount9 = 0;\n  let isHappyStringLettersCount10 = 0;\n  let isHappyStringLettersCount11 = 0;\n  let isHappyStringLettersCount12 = 0;\n  let isHappyStringLettersCount13 = 0;\n  let isHappyStringLettersCount14 = 0;\n  let isHappyStringLettersCount15 = 0;\n  let isHappyStringLettersCount16 = 0;\n  let isHappyStringLettersCount17 = 0;\n  let isHappyStringLettersCount18 = 0;\n  let isHappyStringLettersCount19 = 0;\n  let isHappyStringLettersCount20 = 0;\n  let isHappyStringLettersCount21 = 0;\n  let isHappyStringLettersCount22 = 0;\n  let isHappyStringLettersCount23 = 0;\n  let isHappyStringLettersCount24 = 0;\n  let isHappyStringLettersCount25 = 0;\n  let isHappyStringLettersCount26 = 0;\n  let isHappyStringLettersCount27 = 0;\n  let isHappyStringLettersCount28 = 0;\n  let isHappyStringLettersCount29 = 0;\n  let isHappyStringLettersCount30 = 0;\n  let isHappyStringLettersCount31 = 0;\n  let isHappyStringLettersCount32 = 0;\n  let isHappyStringLettersCount33 = 0;\n  let isHappyStringLettersCount34 = 0;\n  let isHappyStringLettersCount35 = 0;\n  let isHappyStringLettersCount36 = 0;\n  let isHappyStringLettersCount37 = 0;\n  let isHappyStringLettersCount38 = 0;\n  let isHappyStringLettersCount39 = 0;\n  let isHappyStringLettersCount40 = 0;\n  let isHappyStringLettersCount41 = 0;\n  let isHappyStringLettersCount42 = 0;\n  let isHappyStringLettersCount43 = 0;\n  let isHappyStringLettersCount44 = 0;\n  let isHappyStringLettersCount45 = 0;\n  let isHappyStringLettersCount46 = 0;\n  let isHappyStringLettersCount47 = 0;\n  let isHappyStringLettersCount48 = 0;\n  let isHappyStringLettersCount49 = 0;\n  let isHappyStringLettersCount50 = 0;\n  let isHappyStringLettersCount51 = 0;\n  let isHappyStringLettersCount52 = 0;\n  let isHappyStringLettersCount53 = 0;\n  let isHappyStringLettersCount54 = 0;\n  let isHappyStringLettersCount55 = 0;\n  let isHappyStringLettersCount56 = 0;\n  let isHappyStringLettersCount57 = 0;\n  let isHappyStringLettersCount58 = 0;\n  let isHappyStringLettersCount59 = 0;\n  let isHappyStringLettersCount60 = 0;\n  let isHappyStringLettersCount61 = 0;\n  let isHappyStringLettersCount62 = 0;\n  let isHappyStringLettersCount63 = 0;\n  let isHappyStringLettersCount64 = 0;\n  let isHappyStringLettersCount65 = 0;\n  let isHappyStringLettersCount66 = 0;\n  let isHappyStringLettersCount67 = 0;\n  let isHappyStringLettersCount68 = 0;\n  let isHappyStringLettersCount69 = 0;\n  let isHappyStringLettersCount70 = 0;\n  let isHappyStringLettersCount71 = 0;\n  let isHappyStringLettersCount72 = 0;\n  let isHappyStringLettersCount73 = 0;\n  let isHappyStringLettersCount74 = 0;\n  let isHappyStringLettersCount75 = 0;\n  let isHappyStringLettersCount76 = 0;\n  let isHappyStringLettersCount77 = 0;\n  let isHappyStringLettersCount78 = 0;\n  let isHappyStringLettersCount79 = 0;\n  let isHappyStringLettersCount80 = 0;\n  let isHappyStringLettersCount81 = 0;\n  let isHappyStringLettersCount82 = 0;\n  let isHappyStringLettersCount83 = 0;\n  let isHappyStringLettersCount84 = 0;\n  let isHappyStringLettersCount85 = 0;\n  let isHappyStringLettersCount86 = 0;\n  let isHappyStringLettersCount87 = 0;\n  let isHappyStringLettersCount88 = 0;\n  let isHappyStringLettersCount89 = 0;\n  let isHappyStringLettersCount90 = 0;\n  let isHappyStringLettersCount91 = 0;\n  let isHappyStringLettersCount92 = 0;\n  let isHappyStringLettersCount93 = 0;\n  let isHappyStringLettersCount94 = 0;\n  let isHappyStringLettersCount95 = 0;\n  let isHappyStringLettersCount96 = 0;\n  let isHappyStringLettersCount97 = 0;\n  let isHappyStringLettersCount98 = 0;\n  let isHappyStringLettersCount99 = 0;\n  let isHappyStringLettersCount100 = 0;\n  let isHappyStringLettersCount101 = 0;\n  let isHappyStringLettersCount102 = 0;\n  let isHappyStringLettersCount103 = 0;\n  let isHappyStringLettersCount104 = 0;\n  let isHappyStringLettersCount105 = 0;\n  let isHappyStringLettersCount106 = 0;\n  let isHappyStringLettersCount107 = 0;\n  let isHappyStringLettersCount108 = 0;\n  let isHappyStringLettersCount109 = 0;\n  let isHappyStringLettersCount110 = 0;\n  let isHappyStringLettersCount111 = 0;\n  let isHappyStringLettersCount112 = 0;\n  let isHappyStringLettersCount113 = 0;\n  let isHappyStringLettersCount114 = 0;\n  let isHappyStringLettersCount115 = 0;\n  let isHappyStringLettersCount116 = 0;\n  let is", "passed": 0}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gradesArray = grades.map((grade) => {\n    return grade > 0? grade : '-';\n  });\n  gradesArray.forEach((grade) => {\n    letterGrades.push(grade);\n  });\n  return letterGrades;\n};\n\n/*\n  Write a function called isPrime(number) that takes an integer number as \n  an argument and checks if it is a prime number. \n  If the number is a prime number, then return true. \n  If the number is not a prime number, then return false.\n  \n  Example:\n  isPrime(5) ==> true\n  isPrime(2) ==> false\n  isPrime(3) ==> false\n  isPrime(4) ==> false\n  isPrime(6) ==> false\n  isPrime(7) ==> false\n  isPrime(8) ==> false\n  isPrime(10) ==> false\n  isPrime(11) ==> false\n  isPrime(12) ==> false\n  isPrime(13) ==> false\n  isPrime(14) ==> false\n  isPrime(15) ==> false\n  isPrime(16) ==> false\n  isPrime(17) ==> false\n  isPrime(18) ==> false\n  isPrime(19) ==> false\n  isPrime(20) ==> false\n  isPrime(21) ==> false\n  isPrime(22) ==> false\n  isPrime(23) ==> false\n  isPrime(24) ==> false\n  isPrime(25) ==> false\n  isPrime(26) ==> false\n  isPrime(27) ==> false\n  isPrime(28) ==> false\n  isPrime(29) ==> false\n  isPrime(30) ==> false\n  isPrime(31) ==> false\n  isPrime(32) ==> false\n  isPrime(33) ==> false\n  isPrime(34) ==> false\n  isPrime(35) ==> false\n  isPrime(36) ==> false\n  isPrime(37) ==> false\n  isPrime(38) ==> false\n  isPrime(39) ==> false\n  isPrime(40) ==> false\n  isPrime(41) ==> false\n  isPrime(42) ==> false\n  isPrime(43) ==> false\n  isPrime(44) ==> false\n  isPrime(45) ==> false\n  isPrime(46) ==> false\n  isPrime(47) ==> false\n  isPrime(48) ==> false\n  isPrime(49) ==> false\n  isPrime(50) ==> false\n  isPrime(51) ==> false\n  isPrime(52) ==> false\n  isPrime(53) ==> false\n  isPrime(54) ==> false\n  isPrime(55) ==> false\n  isPrime(56) ==> false\n  isPrime(57) ==> false\n  isPrime(58) ==> false\n  isPrime(59) ==> false\n  isPrime(60) ==> false\n  isPrime(61) ==> false\n  isPrime(62) ==> false\n  isPrime(63) ==> false\n  isPrime(64) ==> false\n  isPrime(65) ==> false\n  isPrime(66) ==> false\n  isPrime(67) ==> false\n  isPrime(68) ==> false\n  isPrime(69) ==> false\n  isPrime(70) ==> false\n  isPrime(71) ==> false\n  isPrime(72) ==> false\n  isPrime(73) ==> false\n  isPrime(74) ==> false\n  isPrime(75) ==> false\n  isPrime(76) ==> false\n  isPrime(77) ==> false\n  isPrime(78) ==> false\n  isPrime(79) ==> false\n  isPrime(80) ==> false\n  isPrime(81) ==> false\n  isPrime(82) ==> false\n  isPrime(83) ==> false\n  isPrime(84) ==> false\n  isPrime(85) ==> false\n  isPrime(86) ==> false\n  isPrime(87) ==> false\n  isPrime(88) ==> false\n  isPrime(89) ==> false\n  isPrime(90) ==> false\n  isPrime(91) ==> false\n  isPrime(92) ==> false\n  isPrime(93) ==> false\n  isPrime(94) ==> false\n  isPrime(95) ==> false\n  isPrime(96) ==> false\n  isPrime(97) ==> false\n  isPrime(98) ==> false\n  isPrime(99) ==> false\n  isPrime(100) ==> false\n  isPrime(101) ==> false\n  isPrime(102) ==> false\n  isPrime(103) ==> false\n  isPrime(104) ==> false\n  isPrime(105) ==> false\n  isPrime(106) ==> false\n  isPrime(107) ==> false\n  isPrime(108) ==> false\n  isPrime(109) ==> false\n  isPrime(110) ==> false\n  isPrime(111) ==> false\n  isPrime(112) ==> false\n  isPrime(113) ==> false\n  isPrime(114) ==> false\n  isPrime(115) ==> false\n  isPrime(116) ==> false\n  isPrime(117) ==> false\n  isPrime(118) ==> false\n  isPrime(119) ==> false\n  isPrime(120) ==> false\n  isPrime(121) ==> false\n  isPrime(122) ==> false\n  isPrime(123", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrime = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers2 = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers3 = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers4 = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers5 = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers6 = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers7 = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers8 = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers9 = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers10 = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   length will be ", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const endsOneStarts= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const endsOneStarts= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const endsOneStarts= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const endsOneStarts= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const endsOneStarts= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const endsOneStarts= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const endsOneStarts= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const endsOneStarts= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const endsOneStarts= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){\n     if(n%i==0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count= 0;\n   for(let i=1;i<=n;i++){", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    decimal = decimal + decimal(i).toString(10);\n    sum = sum + parseInt(decimal.charAt(0), 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i).toString(16);\n    sum = sum + parseInt(hexadecimal.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  for (let i = 1; i <= N; i++) {\n    octal = octal + octal(i).toString(8);\n    sum = sum + parseInt(octal.charAt(0), 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i).toString(16);\n    sum = sum + parseInt(hexadecimal.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  for (let i = 1; i <= N; i++) {\n    octal = octal + octal(i).toString(8);\n    sum = sum + parseInt(octal.charAt(0), 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i).toString(16);\n    sum = sum + parseInt(hexadecimal.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    decimal = decimal + decimal(i).toString(10);\n    sum = sum + parseInt(decimal.charAt(0), 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    hexadecimal = hexadecimal + hexadecimal(i).toString(16);\n    sum = sum + parseInt(hexadecimal.charAt(0), 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be ", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that will be at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      odd.push(lst[i])\n    } else {\n      even.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. return the minimum element in the list that is even.\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 4\n  */\nconst min = (lst) => {\n  let min = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      min = Math.min(min, lst[i])\n    }\n  }\n  return min\n}\n\n/*Given a non-empty list of integers lst. return the maximum element in the list that is even.\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n  */\nconst max = (lst) => {\n  let max = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      max = Math.max(max, lst[i])\n    }\n  }\n  return max\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\nconst sum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are odd.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are odd.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumEven = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOddEven = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are odd.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are odd.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOddEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumEvenOddEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are odd.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOddEvenEvenEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOddEvenEvenEvenEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOddEvenEvenEvenEvenEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOddEvenEvenEvenEvenEvenEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOddEvenEvenEvenEvenEvenEvenEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 4\n  */\nconst sumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i]\n    }", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let newStrArray = [];\n  let newStrArray2 = [];\n  let newStrArray3 = [];\n  let newStrArray4 = [];\n  let newStrArray5 = [];\n  let newStrArray6 = [];\n  let newStrArray7 = [];\n  let newStrArray8 = [];\n  let newStrArray9 = [];\n  let newStrArray10 = [];\n  let newStrArray11 = [];\n  let newStrArray12 = [];\n  let newStrArray13 = [];\n  let newStrArray14 = [];\n  let newStrArray15 = [];\n  let newStrArray16 = [];\n  let newStrArray17 = [];\n  let newStrArray18 = [];\n  let newStrArray19 = [];\n  let newStrArray20 = [];\n  let newStrArray21 = [];\n  let newStrArray22 = [];\n  let newStrArray23 = [];\n  let newStrArray24 = [];\n  let newStrArray25 = [];\n  let newStrArray26 = [];\n  let newStrArray27 = [];\n  let newStrArray28 = [];\n  let newStrArray29 = [];\n  let newStrArray30 = [];\n  let newStrArray31 = [];\n  let newStrArray32 = [];\n  let newStrArray33 = [];\n  let newStrArray34 = [];\n  let newStrArray35 = [];\n  let newStrArray36 = [];\n  let newStrArray37 = [];\n  let newStrArray38 = [];\n  let newStrArray39 = [];\n  let newStrArray40 = [];\n  let newStrArray41 = [];\n  let newStrArray42 = [];\n  let newStrArray43 = [];\n  let newStrArray44 = [];\n  let newStrArray45 = [];\n  let newStrArray46 = [];\n  let newStrArray47 = [];\n  let newStrArray48 = [];\n  let newStrArray49 = [];\n  let newStrArray50 = [];\n  let newStrArray51 = [];\n  let newStrArray52 = [];\n  let newStrArray53 = [];\n  let newStrArray54 = [];\n  let newStrArray55 = [];\n  let newStrArray56 = [];\n  let newStrArray57 = [];\n  let newStrArray58 = [];\n  let newStrArray59 = [];\n  let newStrArray60 = [];\n  let newStrArray61 = [];\n  let newStrArray62 = [];\n  let newStrArray63 = [];\n  let newStrArray64 = [];\n  let newStrArray65 = [];\n  let newStrArray66 = [];\n  let newStrArray67 = [];\n  let newStrArray68 = [];\n  let newStrArray69 = [];\n  let newStrArray70 = [];\n  let newStrArray71 = [];\n  let newStrArray72 = [];\n  let newStrArray73 = [];\n  let newStrArray74 = [];\n  let newStrArray75 = [];\n  let newStrArray76 = [];\n  let newStrArray77 = [];\n  let newStrArray78 = [];\n  let newStrArray79 = [];\n  let newStrArray80 = [];\n  let newStrArray81 = [];\n  let newStrArray82 = [];\n  let newStrArray83 = [];\n  let newStrArray84 = [];\n  let newStrArray85 = [];\n  let newStrArray86 = [];\n  let newStrArray87 = [];\n  let newStrArray88 = [];\n  let newStrArray89 = [];\n  let newStrArray90 = [];\n  let newStrArray91 = [];\n  let newStrArray92 = [];\n  let newStrArray93 = [];\n  let newStrArray94 = [];\n  let newStrArray95 = [];\n  let newStrArray96 = [];\n  let newStrArray97 = [];\n  let newStrArray98 = [];\n  let newStrArray99 = [];\n  let newStrArray100 = [];\n  let newStrArray101 = [];\n  let newStrArray102 = [];\n  let newStrArray103 = [];\n  let newStrArray104 = [];\n  let newStrArray105 = [];\n  let newStrArray106 = [];\n  let newStrArray107 = [];\n  let newStrArray108 = [];\n  let newStrArray109 = [];\n  let newStrArray110 = [];\n  let newStrArray111 = [];\n  let newStrArray112 = [];\n  let newStrArray113 = [];\n  let newStrArray114 = [];\n  let newStrArray115 = [];\n  let newStrArray116 = [];\n  let newStrArray117 = [];\n  let newStrArray118 = [];\n  let newStrArray119 = [];\n  let newStrArray120 = [];\n  let newStrArray121 = [];\n  let newStrArray122 = [];\n  let newStrArray123 = [];\n  let newStrArray124 = [];\n  let newStrArray125 = [];\n  let newStrArray126 = [];\n  let newStrArray127 = [];\n  let newStrArray128 = [];\n  let newStrArray129 = [];\n  let newStrArray130 = [];\n  let newStrArray131 = [];\n  let newStrArray132 = [];\n  let newStrArray133 = [];\n  let newStrArray134 = [];\n  let newStrArray135 = [];\n  let newStrArray136 = [];\n  let newStrArray137 = [];\n  let newStrArray138 = [];\n  let newStrArray139 = [];\n  let newStrArray140 = [];\n  let newStrArray141 = [];\n  let newStrArray142 = [];\n  let newStrArray143 = [];\n  let newStrArray144 = [];\n  let newStrArray145 = [];\n  let newStrArray146 = [];\n  let newStrArray147 = [];\n  let newStrArray148 = [];\n  let newStrArray149 = [];\n  let newStrArray150 = [];\n  let newStrArray151 = [];\n  let newStrArray152 = [];\n  let newStrArray153 = [];\n  let newStrArray154 = [];\n  let newStrArray155 = [];\n  let newStrArray156 = [];\n  let newStrArray157 = [];\n  let newStrArray158 = [];\n  let newStrArray159 = [];\n  let newStrArray160 = [];\n  let newStrArray161 = [];\n  let newStrArray162 = [];\n  let newStrArray163 = [];\n  let newStrArray164 = [];\n  let newStrArray165 = [];\n  let newStrArray166 = [];\n  let newStrArray167 = [];\n  let newStrArray168 = [];\n  let newStrArray169 = [];\n  let newStrArray170 = [];\n  let newStrArray171 = [];\n  let newStrArray172 = [];\n  let newStrArray173 = [];\n  let newStrArray174 = [];\n  let newStrArray175 = [];\n  let newStrArray176 = [];\n  let newStrArray177 = [];\n  let newStrArray178 = [];\n  let newStrArray179 = [];\n  let newStrArray180 = [];\n  let newStrArray181 = [];\n  let newStrArray182 = [];\n  let newStrArray183 = [];\n  let newStrArray184 = [];\n  let newStrArray185 = [];\n  let newStrArray186 = [];\n  let newStrArray187 = [];\n  let newStrArray188 = [];\n  let newStrArray189 = [];\n  let newStrArray190 = [];\n  let newStrArray191 = [];\n  let newStrArray192 = [];\n  let newStrArray193 = [];\n  let ", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rowIndex = 0\n  let colIndex = 0\n  let cols = []\n  \n  while (rowIndex < lst.length) {\n    if (lst[rowIndex][x] === undefined) {\n      row.push(lst[rowIndex])\n      rowIndex++\n    } else {\n      cols.push(lst[rowIndex])\n      rowIndex++\n    }\n  }\n  \n  cols.sort((a, b) => a - b)\n  \n  for (let i = 0; i < cols.length; i++) {\n    row.push(cols[i])\n  }\n  \n  return row\n}\n\n/*\n  You will be given a list of lists, each of which contains \n  coordinates. \n  \n  Example:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(1, 3)]\n  */\nconst getCol = (lst, x) => {\n  let col = []\n  let colIndex = 0\n  let rowIndex = 0\n  let rows = []\n  \n  while (colIndex < lst.length) {\n    if (lst[colIndex][x] === undefined) {\n      col.push(lst[colIndex])\n      colIndex++\n    } else {\n      rows.push(lst[colIndex])\n      colIndex++\n    }\n  }\n  \n  rows.sort((a, b) => a - b)\n  \n  for (let i = 0; i < rows.length; i++) {\n    col.push(rows[i])\n  }\n  \n  return col\n}\n\n/*\n  You will be given a list of lists, each of which contains \n  coordinates. \n  \n  Example:\n  getRowCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowCol([], 1) == []\n  getRowCol([[], [1], [1, 2, 3]], 3) == [(0, 1), (1, 3)]\n  */\nconst getRowCol = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rows = []\n  \n  while (rowIndex < lst.length) {\n    if (lst[rowIndex][x] === undefined) {\n      row.push(lst[rowIndex])\n      rowIndex++\n    } else {\n      col.push(lst[rowIndex])\n      rowIndex++\n    }\n  }\n  \n  col.sort((a, b) => a - b)\n  \n  for (let i = 0; i < col.length; i++) {\n    row.push(col[i])\n  }\n  \n  return row\n}\n\n/*\n  You will be given a list of lists, each of which contains \n  coordinates. \n  \n  Example:\n  getRowCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowCol([], 1) == []\n  getRowCol([[], [1], [1, 2, 3]], 3) == [(0, 1), (1, 3)]\n  */\nconst getRowCol = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rows = []\n  \n  while (rowIndex < lst.length) {\n    if (lst[rowIndex][x] === undefined) {\n      row.push(lst[rowIndex])\n      rowIndex++\n    } else {\n      col.push(lst[rowIndex])\n      rowIndex++\n    }\n  }\n  \n  col.sort((a, b) => a - b)\n  \n  for (let i = 0; i < col.length; i++) {\n    row.push(col[i])\n  }\n  \n  return row\n}\n\n/*\n  You will be given a list of lists, each of which contains \n  coordinates. \n  \n  Example:\n  getRowCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowCol([], 1) == []\n  getRowCol([[], [1], [1, 2, 3]], 3) == [(0, 1), (1, 3)]\n  */\nconst getRowCol = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rows = []\n  \n  while (rowIndex < lst.length) {\n    if (lst[rowIndex][x] === undefined) {\n      row.push(lst[rowIndex])\n      rowIndex++\n    } else {\n      col.push(lst[rowIndex])\n      rowIndex++\n    }\n  }\n  \n  col.sort((a, b) => a - b)\n  \n  for (let i = 0; i < col.length; i++) {\n    row.push(col[i])\n  }\n  \n  return row\n}\n\n/*\n  You will be given a list of lists, each of which contains \n  coordinates. \n  \n  Example:\n  getRowCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowCol([], 1) == []\n  getRowCol([[], [1], [1, 2, 3]], 3) == [(0, 1), (1, 3)]\n  */\nconst getRowCol = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rows = []\n  \n  while (rowIndex < lst.length) {\n    if (lst[rowIndex][x] === undefined) {\n      row.push(lst[rowIndex])\n      rowIndex++\n    } else {\n      col.push(lst[rowIndex])\n      rowIndex++\n    }\n  }\n  \n  col.sort((a, b) => a - b)\n  \n  for (let i = 0; i < col.length; i++) {\n    row.push(col[i])\n  }\n  \n  return row\n}\n\n/*\n  You will be given a list of lists, each of which contains \n  coordinates. \n  \n  Example:\n  getRowCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowCol([], 1) == []\n  getRowCol([[], [1], [1, 2, 3]], 3) == [(0, 1), (1, 3)]\n  */\nconst getRowCol = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rows = []\n  \n  while (rowIndex < lst.length) {\n    if (lst[rowIndex][x] === undefined) {\n      row.push(lst[rowIndex])\n      rowIndex++\n    } else {\n      col.push(lst[rowIndex])\n      rowIndex++\n    }\n  }\n  \n  col.sort((a, b) => a - b)\n  \n  for (let i = 0; i < col.length; i++) {\n    row.push(col[i])\n  }\n  \n  return row\n}\n\n/*\n  You will be given a list of lists, each of which contains \n  coordinates. \n  \n  Example:\n  getRowCol([\n    [1,2,3,4,", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return the maximum value from the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * maxArray([]) => 0\n  * maxArray([5]) => 5\n  * maxArray([2, 4, 3, 0, 1, 5]) => 6\n  * maxArray([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst maxArray = (array) => {\n  let maxValue = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > maxValue) {\n      maxValue = array[i];\n    }\n  }\n  return maxValue;\n};\n\n/*\n  Given an array of non-negative integers, return the minimum value from the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * minArray([]) => 0\n  * minArray([5]) => 5\n  * minArray([2, 4, 3, 0, 1, 5]) => 0\n  * minArray([2, 4, 3, 0, 1, 5, 6]) => 0\n  */\nconst minArray = (array) => {\n  let minValue = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < minValue) {\n      minValue = array[i];\n    }\n  }\n  return minValue;\n};\n\n/*\n  Given an array of non-negative integers, return the average value from the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * avgArray([]) => 0\n  * avgArray([5]) => 5\n  * avgArray([2, 4, 3, 0, 1, 5]) => 2.5\n  * avgArray([2, 4, 3, 0, 1, 5, 6]) => 2.5\n  */\nconst avgArray = (array) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of non-negative integers, return the median value from the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * medianArray([]) => 0\n  * medianArray([5]) => 5\n  * medianArray([2, 4, 3, 0, 1, 5]) => 1\n  * medianArray([2, 4, 3, 0, 1, 5, 6]) => 1\n  */\nconst medianArray = (array) => {\n  let sortedArray = sortArray(array);\n  let sortedArrayLength = sortedArray.length;\n  let middleIndex = sortedArrayLength / 2;\n  let middleSum = sortedArray[middleIndex];\n  let middleIndex = sortedArrayLength - middleIndex;\n  let middleSum = sortedArray[middleIndex];\n  let medianValue = sortedArray[middleIndex];\n  if (middleSum > medianValue) {\n    medianValue = middleSum;\n  }\n  return medianValue;\n};\n\n/*\n  Given an array of non-negative integers, return the mode value from the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * modeArray([]) => 0\n  * modeArray([5]) => 5\n  * modeArray([2, 4, 3, 0, 1, 5]) => 2\n  * modeArray([2, 4, 3, 0, 1, 5, 6]) => 2\n  */\nconst modeArray = (array) => {\n  let sortedArray = sortArray(array);\n  let sortedArrayLength = sortedArray.length;\n  let middleIndex = sortedArrayLength / 2;\n  let middleSum = sortedArray[middleIndex];\n  let middleIndex = sortedArrayLength - middleIndex;\n  let middleSum = sortedArray[middleIndex];\n  let modeValue = sortedArray[middleIndex];\n  if (middleSum > modeValue) {\n    modeValue = middleSum;\n  }\n  return modeValue;\n};\n\n/*\n  Given an array of non-negative integers, return the mode value from the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * modeArray([]) => 0\n  * modeArray([5]) => 5\n  * modeArray([2, 4, 3, 0, 1, 5]) => 2\n  * modeArray([2, 4, 3, 0, 1, 5, 6]) => 2\n  */\nconst modeArray = (array) => {\n  let sortedArray = sortArray(array);\n  let sortedArrayLength = sortedArray.length;\n  let middleIndex = sortedArrayLength / 2;\n  let middleSum = sortedArray[middleIndex];\n  let middleIndex = sortedArrayLength - middleIndex;\n  let middleSum = sortedArray[middleIndex];\n  let modeValue = sortedArray[middleIndex];\n  if (middleSum > modeValue) {\n    modeValue = middleSum;\n  }\n  return modeValue;\n};\n\n/*\n  Given an array of non-negative integers, return the mode value from the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * modeArray([]) => 0\n  * modeArray([5]) => 5\n  * modeArray([2, 4, 3, 0, 1, 5]) => 2\n  * modeArray([2, 4, 3, 0, 1, 5, 6]) => 2\n  */\nconst modeArray = (array) => {\n  let sortedArray = sortArray(array);\n  let sortedArrayLength = sortedArray.length;\n  let middleIndex = sortedArrayLength / 2;\n  let middleSum = sortedArray[middleIndex];\n  let middleIndex = sortedArrayLength - middleIndex;\n  let middleSum = sortedArray[middleIndex];\n  let modeValue = sortedArray[middleIndex];\n  if (middleSum > modeValue) {\n    modeValue = middleSum;\n  }\n  return modeValue;\n};\n\n/*\n  Given an array of non-negative ", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    let newLetter = alphabet.indexOf(letter);\n    newString += newLetter;\n  }\n  return newString;\n}\n\n/*Create a function decrypt that will take a string as an argument and \n   will return a string will decrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('lm') returns 'hi'\n  encrypt('ewhjklnop') returns 'asdfghjkl'\n  encrypt('kj') returns 'gf'\n  encrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    let newLetter = alphabet.indexOf(letter);\n    newString += newLetter;\n  }\n  return newString;\n}\n\n/*Create a function rotate that will take a string as an argument and \n   will return a string will rotate with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  rotate('hi') returns 'asdfghjkl'\n  rotate('asdfghjkl') returns 'ewhjklnop'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    let newLetter = alphabet.indexOf(letter);\n    newString += newLetter;\n  }\n  return newString;\n}\n\n/*Create a function reverse that will take a string as an argument and \n   will return a string will reverse the string in place. \n  For example:\n  reverse('asdfghjkl') returns 'ewhjklnop'\n  reverse('ewhjklnop') returns 'asdfghjkl'\n  reverse('gf') returns 'kj'\n  reverse('kj') returns 'gf'\n  reverse('ix') returns 'et'\n  */\nconst reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    let newLetter = alphabet.indexOf(letter);\n    newString += newLetter;\n  }\n  return newString;\n}\n\n/*Create a function shuffle that will take a string as an argument and \n   will return a string will shuffle the string in place. \n  For example:\n  shuffle('asdfghjkl') returns 'ewhjklnop'\n  shuffle('ewhjklnop') returns 'asdfghjkl'\n  shuffle('gf') returns 'kj'\n  shuffle('kj') returns 'gf'\n  shuffle('ix') returns 'et'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    let newLetter = alphabet.indexOf(letter);\n    newString += newLetter;\n  }\n  return newString;\n}\n\n/*Create a function shuffle that will take a string as an argument and \n   will return a string will shuffle the string in place. \n  For example:\n  shuffle('asdfghjkl') returns 'ewhjklnop'\n  shuffle('ewhjklnop') returns 'asdfghjkl'\n  shuffle('gf') returns 'kj'\n  shuffle('kj') returns 'gf'\n  shuffle('ix') returns 'et'\n  */\nconst shuffleArray = (arr) => {\n  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    let newIndex = Math.floor(Math.random() * arr.length);\n    newArray.push(arr[newIndex]);\n  }\n  return newArray;\n}\n\n/*Create a function shuffle that will take a string as an argument and \n   will return a string will shuffle the string in place. \n  For example:\n  shuffle('asdfghjkl') returns 'ewhjklnop'\n  shuffle('ewhjklnop') returns 'asdfghjkl'\n  shuffle('gf') returns 'kj'\n  shuffle('kj') returns 'gf'\n  shuffle('ix') returns 'et'\n  */\nconst shuffleArrayInPlace = (arr) => {\n  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    let newIndex = Math.floor(Math.random() * arr.length);\n    newArray[i] = arr[newIndex];\n  }\n  return newArray;\n}\n\n/*Create a function shuffle that will take a string as an argument and \n   will return a string will shuffle the string in place. \n  For example:\n  shuffle('asdfghjkl') returns 'ewhjklnop'\n  shuffle('ewhjklnop') returns 'asdfghjkl'\n  shuffle('gf') returns 'kj'\n  shuffle('kj') returns 'gf'\n  shuffle('ix') returns 'et'\n  */\nconst shuffleArrayInPlaceWithReplacement = (arr) => {\n  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    let newIndex = Math.floor(Math.random() * arr.length);\n    newArray[i] = arr[newIndex];\n  }\n  return newArray;\n}\n\n/*Create a function shuffle that will take a string as an argument and \n   will return a string will shuffle the string in place. \n  For example:\n  shuffle('asdfghjkl') returns 'ewhjklnop'\n  shuffle('ewhjklnop') returns 'asdfghjkl'\n  shuffle('gf') returns 'kj'\n  shuffle('kj') returns 'gf'\n  shuffle('ix') returns 'et'\n  */\nconst shuffleArrayInPlaceWithReplacementAndReplacement = (arr) => {\n  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    let newIndex = Math.floor(Math.random() * arr.length);\n    newArray[i] = arr[newIndex];\n  }\n  return newArray;\n}\n\n/*Create a function shuffle that will take a string as an argument and \n   will return a string will shuffle the string in place. \n  For example:\n  shuffle('asdfghjkl') returns 'ewhjklnop'\n  shuffle('ewhjklnop') returns 'asdfghjkl'\n  shuffle('gf') returns 'kj'\n  shuffle('kj') returns 'gf'\n  shuffle('ix') returns 'et'\n  */\nconst shuffleArrayInPlaceWithReplacementAndReplacementAndReplacement = (arr) => {\n  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let rollingMax = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      rollingMax = i;\n    }\n  }\n  return [rollingMax, max];\n};\n\n/**\n * Given a number, return its factorial.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorial = (number) => {\n  if (number === 0) {\n    return 1;\n  }\n  if (number === 1) {\n    return 1;\n  }\n  if (number > Number.MAX_SAFE_INTEGER) {\n    return Number.MAX_SAFE_INTEGER;\n  }\n  return number * factorial(number - 1);\n};\n\n/**\n * Given a number, return its factorial recursively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialRecursive = (number) => {\n  if (number === 0) {\n    return 1;\n  }\n  if (number === 1) {\n    return 1;\n  }\n  if (number > Number.MAX_SAFE_INTEGER) {\n    return Number.MAX_SAFE_INTEGER;\n  }\n  return number * factorialRecursive(number - 1);\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterative = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterativeRecursive = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterativeRecursive2 = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterativeRecursive3 = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterativeRecursive4 = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterativeRecursive5 = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterativeRecursive6 = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterativeRecursive7 = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterativeRecursive8 = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterativeRecursive9 = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.\n * If number is not an integer, return 0\n * If number is negative, return 1\n * If number is 0 or 1, return 1\n * If number is greater than the maximum number that can be represented in JavaScript, return Number.MAX_SAFE_INTEGER\n */\nconst factorialIterativeRecursive10 = (number) => {\n  let result = 1;\n  let i = 1;\n  while (number > 0) {\n    result = result * number;\n    number = number - 1;\n    i++;\n  }\n  return result;\n};\n\n/**\n * Given a number, return its factorial iteratively.", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let min= lst[0]\n   let minIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]<min){\n       min= lst[i]\n       minIndex= i\n     }\n   }\n   return minIndex\n }\n \n /*\n  You will be given a list of integers. \n   will Write a function nextLargest() that will return the 1st largest element of the list.\n   Return null if there will be no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 5 \n   nextLargest([5, 1, 4, 3, 2])== 5 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \n const nextLargest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let max= lst[0]\n   let maxIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]>max){\n       max= lst[i]\n       maxIndex= i\n     }\n   }\n   return maxIndex\n }\n \n /*\n  You will be given a list of integers. \n   will Write a function nextHighest() that will return the highest element of the list.\n   Return null if there will be no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 5 \n   nextHighest([5, 1, 4, 3, 2])== 5 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let max= lst[0]\n   let maxIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]>max){\n       max= lst[i]\n       maxIndex= i\n     }\n   }\n   return maxIndex\n }\n \n /*\n  You will be given a list of integers. \n   will Write a function nextHighest() that will return the lowest element of the list.\n   Return null if there will be no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 1 \n   nextHighest([5, 1, 4, 3, 2])== 1 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let min= lst[0]\n   let minIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]<min){\n       min= lst[i]\n       minIndex= i\n     }\n   }\n   return minIndex\n }\n \n /*\n  You will be given a list of integers. \n   will Write a function nextHighest() that will return the next element of the list.\n   Return null if there will be no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 3 \n   nextHighest([5, 1, 4, 3, 2])== 3 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let max= lst[0]\n   let maxIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]>max){\n       max= lst[i]\n       maxIndex= i\n     }\n   }\n   return maxIndex\n }\n \n /*\n  You will be given a list of integers. \n   will Write a function nextHighest() that will return the next element of the list.\n   Return null if there will be no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 2 \n   nextHighest([5, 1, 4, 3, 2])== 2 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let min= lst[0]\n   let minIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]<min){\n       min= lst[i]\n       minIndex= i\n     }\n   }\n   return minIndex\n }\n \n /*\n  You will be given a list of integers. \n   will Write a function nextHighest() that will return the next element of the list.\n   Return null if there will be no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 1 \n   nextHighest([5, 1, 4, 3, 2])== 1 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let max= lst[0]\n   let maxIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]>max){\n       max= lst[i]\n       maxIndex= i\n     }\n   }\n   return maxIndex\n }\n \n /*\n  You will be given a list of integers. \n   will Write a function nextHighest() that will return the next element of the list.\n   Return null if there will be no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 3 \n   nextHighest([5, 1, 4, 3, 2])== 3 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let min= lst[0]\n   let minIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]<min){\n       min= lst[i]\n       minIndex= i\n     }\n   }\n   return minIndex\n }\n \n /*\n  You will be given a list of integers. \n   will Write a function nextHighest() that will return the next element of the list.\n   Return null if there will be no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 2 \n   nextHighest([5, 1, 4, 3, 2])== 2 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let max= lst[0]\n   let maxIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]>max){\n       max= lst[i]\n       max", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (word.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of deaths. A death will be a sentence that starts with the word \"I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (word.startsWith('I')) {\n      deaths++;\n    }\n  });\n  return deaths;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of religions. A religion will be a sentence that starts with the word \"I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isReligion(\"Hello world\")\n  0\n  >>> isReligion(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligion = (S) => {\n  let religions = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (word.startsWith('I')) {\n      religions++;\n    }\n  });\n  return religions;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of sexes. A sexe will be a sentence that starts with the word \"I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isSex(\"Hello world\")\n  0\n  >>> isSex(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isSex = (S) => {\n  let sexes = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (word.startsWith('I')) {\n      sexes++;\n    }\n  });\n  return sexes;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of children. Children will be a sentence that starts with the word \"I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isChildren(\"Hello world\")\n  0\n  >>> isChildren(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isChildren = (S) => {\n  let children = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (word.startsWith('I')) {\n      children++;\n    }\n  });\n  return children;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of adults. Adults will be a sentence that starts with the word \"I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isAdults(\"Hello world\")\n  0\n  >>> isAdults(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isAdults = (S) => {\n  let adults = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (word.startsWith('I')) {\n      adults++;\n    }\n  });\n  return adults;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of children and adults. Children and adults will be a sentence that starts with the word \"I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isChildrenAndAdults(\"Hello world\")\n  0\n  >>> isChildrenAndAdults(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isChildrenAndAdults = (S) => {\n  let childrenAndAdults = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (word.startsWith('I')) {\n      childrenAndAdults++;\n    }\n  });\n  return childrenAndAdults;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of children and adults. Children and adults will be a sentence that starts with the word \"I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isChildrenAndAdultsAndBored(\"Hello world\")\n  0\n  >>> isChildrenAndAdultsAndBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isChildrenAndAdultsAndBored = (S) => {\n  let childrenAndAdultsAndBored = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (word.startsWith('I')) {\n      childrenAndAdultsAndBored++;\n    }\n  });\n  return childrenAndAdultsAndBored;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of children and adults. Children and adults will be a sentence that starts with the word \"I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isChildrenAndAdultsAndBored(\"Hello world\")\n  0\n  >>> isChildrenAndAdultsAndBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isChildrenAndAdultsAndBoredAndDeaths = (S) => {\n  let childrenAndAdultsAndBoredAndDeaths = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (word.startsWith('I')) {\n      childrenAndAdultsAndBoredAndDeaths++;\n    }\n  });\n  return childrenAndAdultsAndBoredAndDeaths;\n};\n\n/*\n  You 'll be given a string of words, and your task will be to count the number \n   of children and adults. Children and adults will be a sentence that starts with the word \"I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isChildrenAndAdultsAndBoredAndDeaths(\"Hello world\")\n  0\n  >>> isChildrenAndAdultsAndBoredAndDeaths(\"The sky is blue. The sun is shining. I love this weather\")", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false;\n  }\n  return x + y + z === sum(x, y, z);\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if any of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyIntOrZero = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return true;\n  }\n  return x + y + z === sum(x, y, z);\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if any of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyIntOrZero(5, 2, 7) ➞ true\n  anyIntOrZero(3, -2, 1) ➞ false\n  anyIntOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZero = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return true;\n  }\n  return x + y + z === sum(x, y, z);\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if any of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return true;\n  }\n  return x + y + z === sum(x, y, z);\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if any of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return true;\n  }\n  return x + y + z === sum(x, y, z);\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if any of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return true;\n  }\n  return x + y + z === sum(x, y, z);\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if any of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return true;\n  }\n  return x + y + z === sum(x, y, z);\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if any of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return true;\n  }\n  return x + y + z === sum(x, y, z);\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if any of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return true;\n  }\n  return x + y + z === sum(x, y, z);\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if any of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return true;\n  }\n  return x + y + z === sum(x, y, z);\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if any of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOr", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  \n  for(let i = 0; i < messageLength; i++) {\n    let letter = message.charAt(i);\n    \n    if(vowels.indexOf(letter)!== -1) {\n      encoded += letter.toUpperCase();\n    } else {\n      encoded += letter.toLowerCase();\n    }\n  }\n  \n  return encoded;\n};\n\n/*\n  Write a function that will take a message, and decodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  \n  for(let i = 0; i < messageLength; i++) {\n    let letter = message.charAt(i);\n    \n    if(vowels.indexOf(letter)!== -1) {\n      decoded += letter.toLowerCase();\n    } else {\n      decoded += letter.toUpperCase();\n    }\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that will take a message, and decodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAll = (message) => {\n  let decoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  \n  for(let i = 0; i < messageLength; i++) {\n    let letter = message.charAt(i);\n    \n    if(vowels.indexOf(letter)!== -1) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that will take a message, and decodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decodeAll('TGST')\n  'test'\n  >>> decodeAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAll = (message) => {\n  let decoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  \n  for(let i = 0; i < messageLength; i++) {\n    let letter = message.charAt(i);\n    \n    if(vowels.indexOf(letter)!== -1) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that will take a message, and decodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decodeAllAll('TGST')\n  'test'\n  >>> decodeAllAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAll = (message) => {\n  let decoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  \n  for(let i = 0; i < messageLength; i++) {\n    let letter = message.charAt(i);\n    \n    if(vowels.indexOf(letter)!== -1) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that will take a message, and decodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decodeAllAllAll('TGST')\n  'test'\n  >>> decodeAllAllAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAllAll = (message) => {\n  let decoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  \n  for(let i = 0; i < messageLength; i++) {\n    let letter = message.charAt(i);\n    \n    if(vowels.indexOf(letter)!== -1) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that will take a message, and decodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decodeAllAllAllAll('TGST')\n  'test'\n  >>> decodeAllAllAllAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAllAllAll = (message) => {\n  let decoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  \n  for(let i = 0; i < messageLength; i++) {\n    let letter = message.charAt(i);\n    \n    if(vowels.indexOf(letter)!== -1) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a function that will take a message, and decodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decodeAllAllAllAllAll('TGST')\n  'test'\n  >>> decodeAllAllAllAllAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAllAllAllAll = (message) => {\n  let decoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  \n  for(let i = 0; i < messageLength; i++) {\n    let letter = message.charAt(i);\n    \n    if(vowels.indexOf(letter)!== -1) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let max2 = 0;\n  let max3 = 0;\n  let max4 = 0;\n  let max5 = 0;\n  let max6 = 0;\n  let max7 = 0;\n  let max8 = 0;\n  let max9 = 0;\n  let max10 = 0;\n  let max11 = 0;\n  let max12 = 0;\n  let max13 = 0;\n  let max14 = 0;\n  let max15 = 0;\n  let max16 = 0;\n  let max17 = 0;\n  let max18 = 0;\n  let max19 = 0;\n  let max20 = 0;\n  let max21 = 0;\n  let max22 = 0;\n  let max23 = 0;\n  let max24 = 0;\n  let max25 = 0;\n  let max26 = 0;\n  let max27 = 0;\n  let max28 = 0;\n  let max29 = 0;\n  let max30 = 0;\n  let max31 = 0;\n  let max32 = 0;\n  let max33 = 0;\n  let max34 = 0;\n  let max35 = 0;\n  let max36 = 0;\n  let max37 = 0;\n  let max38 = 0;\n  let max39 = 0;\n  let max40 = 0;\n  let max41 = 0;\n  let max42 = 0;\n  let max43 = 0;\n  let max44 = 0;\n  let max45 = 0;\n  let max46 = 0;\n  let max47 = 0;\n  let max48 = 0;\n  let max49 = 0;\n  let max50 = 0;\n  let max51 = 0;\n  let max52 = 0;\n  let max53 = 0;\n  let max54 = 0;\n  let max55 = 0;\n  let max56 = 0;\n  let max57 = 0;\n  let max58 = 0;\n  let max59 = 0;\n  let max60 = 0;\n  let max61 = 0;\n  let max62 = 0;\n  let max63 = 0;\n  let max64 = 0;\n  let max65 = 0;\n  let max66 = 0;\n  let max67 = 0;\n  let max68 = 0;\n  let max69 = 0;\n  let max70 = 0;\n  let max71 = 0;\n  let max72 = 0;\n  let max73 = 0;\n  let max74 = 0;\n  let max75 = 0;\n  let max76 = 0;\n  let max77 = 0;\n  let max78 = 0;\n  let max79 = 0;\n  let max80 = 0;\n  let max81 = 0;\n  let max82 = 0;\n  let max83 = 0;\n  let max84 = 0;\n  let max85 = 0;\n  let max86 = 0;\n  let max87 = 0;\n  let max88 = 0;\n  let max89 = 0;\n  let max90 = 0;\n  let max91 = 0;\n  let max92 = 0;\n  let max93 = 0;\n  let max94 = 0;\n  let max95 = 0;\n  let max96 = 0;\n  let max97 = 0;\n  let max98 = 0;\n  let max99 = 0;\n  let max100 = 0;\n  let max101 = 0;\n  let max102 = 0;\n  let max103 = 0;\n  let max104 = 0;\n  let max105 = 0;\n  let max106 = 0;\n  let max107 = 0;\n  let max108 = 0;\n  let max109 = 0;\n  let max110 = 0;\n  let max111 = 0;\n  let max112 = 0;\n  let max113 = 0;\n  let max114 = 0;\n  let max115 = 0;\n  let max116 = 0;\n  let max117 = 0;\n  let max118 = 0;\n  let max119 = 0;\n  let max120 = 0;\n  let max121 = 0;\n  let max122 = 0;\n  let max123 = 0;\n  let max124 = 0;\n  let max125 = 0;\n  let max126 = 0;\n  let max127 = 0;\n  let max128 = 0;\n  let max129 = 0;\n  let max130 = 0;\n  let max131 = 0;\n  let max132 = 0;\n  let max133 = 0;\n  let max134 = 0;\n  let max135 = 0;\n  let max136 = 0;\n  let max137 = 0;\n  let max138 = 0;\n  let max139 = 0;\n  let max140 = 0;\n  let max141 = 0;\n  let max142 = 0;\n  let max143 = 0;\n  let max144 = 0;\n  let max145 = 0;\n  let max146 = 0;\n  let max147 = 0;\n  let max148 = 0;\n  let max149 = 0;\n  let max150 = 0;\n  let max151 = 0;\n  let max152 = 0;\n  let max153 = 0;\n  let max154 = 0;\n  let max155 = 0;\n  let max156 = 0;\n  let max157 = 0;\n  let max158 = 0;\n  let max159 = 0;\n  let max160 = 0;\n  let max161 = 0;\n  let max162 = 0;\n  let max163 = 0;\n  let max164 = 0;\n  let max165 = 0;\n  let max166 = 0;\n  let max167 = 0;\n  let max168 = 0;\n  let max169 = 0;\n  let max170 = 0;\n  let max171 = 0;\n  let max172 = 0;\n  let max173 = 0;\n  let max174 = 0;\n  let max175 = 0;\n  let max176 = 0;\n  let max177 = 0;\n  let max178 = 0;\n  let max179 = 0;\n  let max180 = 0;\n  let max181 = 0;\n  let max182 = 0;\n  let max183 = 0;\n  let max184 = 0;\n  let max185 = 0;\n  let max186 = 0;\n  let max187 = 0;\n  let max188 = 0;\n  let max189 = 0;\n  let max190 = 0;\n  let max191 = 0;\n  let max192 = 0;\n  let max193 = 0;\n  let max194 = 0;\n  let max195 = 0;\n  let max196 = 0;\n  let max197 = 0;\n  let max198 = 0;\n  let max199 = 0;\n  let max200 = 0;\n  let max201 = 0;\n  let max202 = 0;\n  let max203 = 0;\n  let max204 = 0;\n  let max205 = 0;\n  let max206 = 0;\n  let max207 = 0;\n  let max208 = 0;\n  let max209 = 0;\n  let max210 = 0;\n  let max211 = 0;\n  let max212 = 0;\n  let max213 = 0;\n  let max214 = 0;\n  let max215 = 0;\n  let max216 = 0;\n  let max217 = 0;\n  let max218 = 0;\n  let max219 = 0;\n  let max220 = 0;\n  let max221 = 0;\n  let max222 = 0;\n  let max223 = 0;\n  let max224 = 0;\n  let max225 = 0;\n  let max226 = 0;\n  let max227 = 0;\n  let max228 = 0;\n  let max229 = 0;\n  let max230 = 0;\n  let max231 = 0;\n  let max232 = 0;\n  let max233 = 0;\n  let max234 = 0;\n  let max235 = 0;\n  let max236 = 0;\n  let max237 = 0;\n  let max238 = 0;\n  let max239 = 0;\n  let max240 = 0;\n  let max241 = 0;\n  let max242 = 0;\n  let max243 = 0;\n  let max244 = 0;\n  let max245 = 0;\n  let max246 = 0;\n  let max247 = 0;\n  let max248 = 0;\n  let max249 = 0;\n  let max250 = 0;\n  let max251 = 0;\n  let max252 = 0;\n  let max253 = 0;\n  let max254 = 0;\n  let max255 = 0;\n  let max256 = 0;\n  let max257 = 0;\n  let max258 = 0;\n  let max259 = 0;\n  let max260 = 0;\n  let max261 = 0;\n  let max262 = 0;\n  let max263 = 0;\n  let max264 = 0;\n  let max265 = 0;\n  let max266 = 0;\n  let max267 = 0;\n  let max268 = 0;\n  let max269 = 0;\n  let max270 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  keys.sort();\n  let isAllKeysStringsInLowerCase = keys.every(key => dict[key].toLowerCase() === key);\n  let isAllKeysStringsInUpperCase = keys.every(key => dict[key].toUpperCase() === key);\n  return isAllKeysStringsInLowerCase || isAllKeysStringsInUpperCase;\n}\n\n/*\n  Given a string, return true if all characters will be in lower case or all characters will be in upper case, else return false. \n  The function should return false will be the will give string will be empty.\n  Examples:\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"A\") should return false.\n  checkStringCase(\"aB\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should ", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 2;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      arr.push(i);\n      prime = false;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that will take an non-negative integer and will return an array of the first\n   n integers that will be prime numbers and greater than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let i = 2;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      arr.push(i);\n      prime = false;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that will take an non-negative integer and will return an array of the first\n   n integers that will be prime numbers and greater than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToOrEqual = (n) => {\n  let arr = [];\n  let i = 2;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      arr.push(i);\n      prime = false;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that will take an non-negative integer and will return an array of the first\n   n integers that will be prime numbers and less than or equal to n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownToOrEqual = (n) => {\n  let arr = [];\n  let i = 2;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      arr.push(i);\n      prime = false;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that will take an non-negative integer and will return an array of the first\n   n integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToLessThan = (n) => {\n  let arr = [];\n  let i = 2;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      arr.push(i);\n      prime = false;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that will take an non-negative integer and will return an array of the first\n   n integers that will be prime numbers and greater than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownToLessThan = (n) => {\n  let arr = [];\n  let i = 2;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      arr.push(i);\n      prime = false;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that will take an non-negative integer and will return an array of the first\n   n integers that will be prime numbers and greater than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToOrEqualLessThan = (n) => {\n  let arr = [];\n  let i = 2;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      arr.push(i);\n      prime = false;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that will take an non-negative integer and will return an array of the first\n   n integers that will be prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownToOrEqualLessThan = (n) => {\n  let arr = [];\n  let i = 2;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      arr.push(i);\n      prime = false;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that will take an non-negative integer and will return an array of the first\n   n integers that will be prime numbers and less than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToLessThanOrEqual = (n) => {\n  let arr = [];\n  let i = 2;\n  let prime = true;\n  while (prime) {\n    if (n % i === 0) {\n      arr.push(i);\n      prime = false;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that will take an non-negative integer and will return an array of the first\n   n integers that will be prime numbers and greater than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownToLessThanOrEqual = (n", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  \n  while (b) {\n    product = product * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return product;\n}\n\n/*Complete the function that will take two integers and returns \n   the sum of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 28.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 0.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  \n  while (b) {\n    sum = sum + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return sum;\n}\n\n/*Complete the function that will take two integers and returns \n   the difference between their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return 28.\n  difference(2020, 1851) should return 1851.\n  difference(14,-15) should return 0.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  \n  while (b) {\n    difference = difference + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return difference;\n}\n\n/*Complete the function that will take two integers and returns \n   the absolute value of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 1851.\n  absolute(14,-15) should return 0.\n  */\nconst absolute = (a, b) => {\n  let absolute = 0;\n  \n  while (b) {\n    absolute = absolute + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return absolute;\n}\n\n/*Complete the function that will take two integers and returns \n   the square root of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  sqrt(148, 412) should return 1.414213562.\n  sqrt(19, 28) should return 1.414213562.\n  sqrt(2020, 1851) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = (a, b) => {\n  let sqrt = 0;\n  \n  while (b) {\n    sqrt = sqrt + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return sqrt;\n}\n\n/*Complete the function that will take two integers and returns \n   the inverse of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 0.\n  */\nconst inverse = (a, b) => {\n  let inverse = 0;\n  \n  while (b) {\n    inverse = inverse + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return inverse;\n}\n\n/*Complete the function that will take two integers and returns \n   the modulo of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  modulo(148, 412) should return 148.\n  modulo(19, 28) should return 28.\n  modulo(2020, 1851) should return 1851.\n  modulo(14,-15) should return 0.\n  */\nconst modulo = (a, b) => {\n  let modulo = 0;\n  \n  while (b) {\n    modulo = modulo + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return modulo;\n}\n\n/*Complete the function that will take two integers and returns \n   the remainder of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  remainder(148, 412) should return 148.\n  remainder(19, 28) should return 28.\n  remainder(2020, 1851) should return 1851.\n  remainder(14,-15) should return 0.\n  */\nconst remainder = (a, b) => {\n  let remainder = 0;\n  \n  while (b) {\n    remainder = remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return remainder;\n}\n\n/*Complete the function that will take two integers and returns \n   the absolute value of the remainder of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  absolute(remainder(148, 412)) should return 148.\n  absolute(remainder(19, 28)) should return 28.\n  absolute(remainder(2020, 1851)) should return 1851.\n  absolute(remainder(14,-15)) should return 0.\n  */\nconst absolute_remainder = (a, b) => {\n  let absolute_remainder = 0;\n  \n  while (b) {\n    absolute_remainder = absolute_remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return absolute_remainder;\n}\n\n/*Complete the function that will take two integers and returns \n   the square root of the absolute value of the remainder of their \n   unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  sqrt(absolute_remainder(148, 412)) should return 1.414213562.\n  sqrt(absolute_remainder(19, 28)) should return 1.414213562.\n  sqrt(absolute_remainder(2020, 1851)) should return 1.414213562.\n  sqrt(absolute_remainder(14,-15)) should return 1.414213562.\n  */\nconst sqrt_absolute_remainder = (a, b) => {\n  let sqrt_absolute_remainder = 0;\n  \n  while (b) {\n    sqrt_absolute_remainder = sqrt_absolute_remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return sqrt_absolute_remainder;\n}\n\n/*Complete the function that will take two integers and returns \n   the square root of the absolute value of the remainder of their \n   unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  sqrt(absolute_remainder(148, 412)) should return 1.414213562.\n  sqrt(absolute_remainder(19, 28)) should return 1.414213562.\n  sqrt(absolute_remainder(2020, 1851)) should return 1.414213562.\n  sqrt(absolute_remainder(14,-15)) should return 1.414213562.\n  */\nconst sqrt_absolute_remainder_sqrt = (a, b) => {\n  let sqrt_absolute_remainder_sqrt = 0;\n  \n  while (b) {\n    sqrt_absolute_remainder_sqrt = sqrt_absolute_remainder_sqrt + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  \n  return sqrt_absolute_remainder_sqrt;\n}\n\n/*", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of lowercase vowels in even will indice.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in even will indice.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('aBCdEf') returns 0\n  countVowel('abcdefg') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in even will indice.\n  \n  For example:\n  countVowelOdd('aBCdEf') returns 1\n  countVowelOdd('abcdefg') returns 0\n  countVowelOdd('dBBE') returns 0\n  */\nconst countVowelEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowelOdd('aBCdEf') returns 1\n  countVowelOdd('abcdefg') returns 0\n  countVowelOdd('dBBE') returns 0\n  */\nconst countVowelOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in even will indice.\n  \n  For example:\n  countVowelOddEven('aBCdEf') returns 1\n  countVowelOddEven('abcdefg') returns 0\n  countVowelOddEven('dBBE') returns 0\n  */\nconst countVowelOddEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in even will indice.\n  \n  For example:\n  countVowelOddEvenOdd('aBCdEf') returns 1\n  countVowelOddEvenOdd('abcdefg') returns 0\n  countVowelOddEvenOdd('dBBE') returns 0\n  */\nconst countVowelOddEvenOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowelOddEvenOdd('aBCdEf') returns 1\n  countVowelOddEvenOdd('abcdefg') returns 0\n  countVowelOddEvenOdd('dBBE') returns 0\n  */\nconst countVowelOddEvenOddOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowelOddEvenOddOdd('aBCdEf') returns 1\n  countVowelOddEvenOddOdd('abcdefg') returns 0\n  countVowelOddEvenOddOdd('dBBE') returns 0\n  */\nconst countVowelOddEvenOddEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowelOddEvenOddOdd('aBCdEf') returns 1\n  countVowelOddEvenOddOdd('abcdefg') returns 0\n  countVowelOddEvenOddOdd('dBBE') returns 0\n  */\nconst countVowelOddEvenOddOddEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowelOddEvenOddOddOdd('aBCdEf') returns 1\n  countVowelOddEvenOddOdd('abcdefg') returns 0\n  countVowelOddEvenOddOdd('dBBE') returns 0\n  */\nconst countVowelOddEvenOddOddEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowelOddEvenOddOddOdd('aBCdEf') returns 1\n  countVowelOddEvenOddOdd('abcdefg') returns 0\n  countVowelOddEvenOddOdd('dBBE') returns 0\n  */\nconst countVowelOddEvenOddOddEvenOddEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, will count the number of vowels in odd will indice.\n  \n  For example:\n  countVowelOddEvenOddOdd", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split('.');\n  return Math.floor(fraction * Math.pow(10, integer.length - 1));\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest floating point number to it. If the number \n   will be equidistant from two floating point numbers, will round it \n   away from zero. \n   Examples\n  >>> closestFloatingPoint(\"10\")\n  10\n  >>> closestFloatingPoint(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floating point numbers, the one you should return is the one \n  that is the  farthest from zero. For example closestFloatingPoint(\"14.5\") \n  should return 15 and closestFloatingPoint(\"-14.5\") should return -15.\n  */\nconst closestFloatingPoint = (value) => {\n  const [integer, fraction] = value.split('.');\n  return Math.floor(fraction * Math.pow(10, integer.length - 1));\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to a given floating point number. \n   If the number will be equidistant from two floating point numbers, \n   will round it away from zero. \n   Examples\n  >>> closestFloatingPointToInteger(\"10\")\n  10\n  >>> closestFloatingPointToInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floating point numbers, the one you should return is the one \n  that is the  farthest from zero. For example closestFloatingPointToInteger(\"14.5\") \n  should return 15 and closestFloatingPointToInteger(\"-14.5\") should return -15.\n  */\nconst closestFloatingPointToInteger = (value) => {\n  const [integer, fraction] = value.split('.');\n  return Math.floor(fraction * Math.pow(10, integer.length - 1));\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest floating point number to a given integer \n   number. \n   If the number will be equidistant from two floating point numbers, \n   will round it away from zero. \n   Examples\n  >>> closestFloatingPointToIntegerToFloatingPoint(\"10\")\n  10\n  >>> closestFloatingPointToIntegerToFloatingPoint(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floating point numbers, the one you should return is the one \n  that is the  farthest from zero. For example closestFloatingPointToIntegerToFloatingPoint(\"14.5\") \n  should return 15 and closestFloatingPointToIntegerToFloatingPoint(\"-14.5\") should return -15.\n  */\nconst closestFloatingPointToIntegerToFloatingPoint = (value) => {\n  const [integer, fraction] = value.split('.');\n  return Math.floor(fraction * Math.pow(10, integer.length - 1));\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to a given floating point number. \n   If the number will be equidistant from two floating point numbers, \n   will round it away from zero. \n   Examples\n  >>> closestFloatingPointToIntegerToFloatingPoint(\"10\")\n  10\n  >>> closestFloatingPointToIntegerToFloatingPoint(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floating point numbers, the one you should return is the one \n  that is the  farthest from zero. For example closestFloatingPointToIntegerToFloatingPoint(\"14.5\") \n  should return 15 and closestFloatingPointToIntegerToFloatingPoint(\"-14.5\") should return -15.\n  */\nconst closestFloatingPointToIntegerToIntegerToFloatingPoint = (value) => {\n  const [integer, fraction] = value.split('.');\n  return Math.floor(fraction * Math.pow(10, integer.length - 1));\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to a given floating point number. \n   If the number will be equidistant from two floating point numbers, \n   will round it away from zero. \n   Examples\n  >>> closestFloatingPointToIntegerToIntegerToFloatingPoint(\"10\")\n  10\n  >>> closestFloatingPointToIntegerToIntegerToFloatingPoint(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floating point numbers, the one you should return is the one \n  that is the  farthest from zero. For example closestFloatingPointToIntegerToIntegerToFloatingPoint(\"14.5\") \n  should return 15 and closestFloatingPointToIntegerToIntegerToFloatingPoint(\"-14.5\") should return -15.\n  */\nconst closestFloatingPointToIntegerToIntegerToIntegerToFloatingPoint = (value) => {\n  const [integer, fraction] = value.split('.');\n  return Math.floor(fraction * Math.pow(10, integer.length - 1));\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to a given floating point number. \n   If the number will be equidistant from two floating point numbers, \n   will round it away from zero. \n   Examples\n  >>> closestFloatingPointToIntegerToIntegerToIntegerToFloatingPoint(\"10\")\n  10\n  >>> closestFloatingPointToIntegerToIntegerToIntegerToFloatingPoint(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floating point numbers, the one you should return is the one \n  that is the  farthest from zero. For example closestFloatingPointToIntegerToIntegerToIntegerToFloatingPoint(\"14.5\") \n  should return 15 and closestFloatingPointToIntegerToIntegerToIntegerToFloatingPoint(\"-14.5\") should return -15.\n  */\nconst closestFloatingPointToIntegerToIntegerToIntegerToIntegerToFloatingPoint = (value) => {\n  const [integer, fraction] = value.split('.');\n  return Math.floor(fraction * Math.pow(10, integer.length - 1));\n};\n\n/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to a given floating point number. \n   If the number will be equidistant from two floating point numbers, \n   will round it away from zero. \n   Examples\n  >>> closestFloatingPointToIntegerToIntegerToIntegerToIntegerToFloatingPoint(\"10\")\n  10\n  >>> closestFloatingPointToIntegerToIntegerToIntegerToIntegerToFloatingPoint(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floating point numbers, the one you should return is the one \n  that is the  farthest from zero. For example closest", "passed": 0}
