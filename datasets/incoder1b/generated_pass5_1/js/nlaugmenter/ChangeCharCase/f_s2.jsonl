{"task_id": "JavaScript/0", "prompt": "/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closest = numbers.reduce((acc, curr) => {\n    if (Math.abs(curr - curr) < threshold) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n  return closest.length === numbers.length;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomElement([1,2,3,4,5])\n * 4\n */\nconst getRandomElement = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomElement([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * \"e\"\n */\nconst getRandomElementFromArray = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomElement([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * \"e\"\n */\nconst getRandomElementFromArrayWithReplacement = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomElement([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * \"e\"\n */\nconst getRandomElementFromArrayWithReplacementAndReplacement = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomElement([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * \"e\"\n */\nconst getRandomElementFromArrayWithReplacementAndReplacementAndReplacement = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomElement([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * \"e\"\n */\nconst getRandomElementFromArrayWithReplacementAndReplacementAndReplacementAndReplacement = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomElement([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * \"e\"\n */\nconst getRandomElementFromArrayWithReplacementAndReplacementAndReplacementAndReplacementAndReplacement = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomElement([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * \"e\"\n */\nconst getRandomElementFromArrayWithReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacement = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomElement([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * \"e\"\n */\nconst getRandomElementFromArrayWithReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacement = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomElement([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * \"e\"\n */\nconst getRandomElementFromArrayWithReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplacementAndReplace", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* InPUt to This Function IS A sTring CONTainIng multiplE groups of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InPUt to This Function IS A sTring CONTainIng multiplE groups of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  return paren_groups.map((group) => {\n    const paren_group = new ParenGroup(group);\n    return paren_group;\n  });\n};\n\nconst isParenGroup = (paren_group) => {\n  return paren_group.paren_group;\n};\n\nconst isParenGroupWithParen = (paren_group) => {\n  return paren_group.paren_group.paren_group;\n};\n\nconst isParenGroupWithParenAndParen = (paren_group) => {\n  return paren_group.paren_group.paren_group.paren_group;\n};\n\nconst isParenGroupWithParenAndParenAndParen = (paren_group) => {\n  return paren_group.paren_group.paren_group.paren_group.paren_group;\n};\n\nconst isParenGroupWithParenAndParenAndParenAndParen = (paren_group) => {\n  return paren_group.paren_group.paren_group.paren_group.paren_group.paren_group;\n};\n\nconst isParenGroupWithParenAndParenAndParenAndParenAndParen = (paren_group) => {\n  return paren_group.paren_group.paren_group.paren_group.paren_group.paren_group.paren_group;\n};\n\nconst isParenGroupWithParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAndParenAnd", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* TeST if gNiveN strig is A PAlIndroME */\nCOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* TeST if gNiveN strig is A PAlIndroME */\nCOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let pReFix = '';\n  let pFix = '';\n  let pAlIndrome = '';\n  let pAlIndromePalindrome = '';\n  let pAlIndromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let pAlIndromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalin", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(makeAPile(i + 1));\n  }\n  return a;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(makeAPile(i + 1));\n  }\n  return a;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(makeAPile(i + 1));\n  }\n  return a;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(makeAPile(i + 1));\n  }\n  return a;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(makeAPile(i + 1));\n  }\n  return a;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(makeAPile(i + 1));\n  }\n  return a;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(makeAP", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsArrayString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArrayString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayArray = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsArrayArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArrayArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayArrayString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsArrayArrayString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArrayArrayString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayArrayArray = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsArrayArrayArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArrayArrayArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayArrayArrayString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsArrayArrayArrayString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArrayArrayArrayString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayArrayArrayArray = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsArrayArrayArrayArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArrayArrayArrayArrayString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArrayArrayArrayArrayString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsArrayArrayArrayArrayArrayString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArrayArrayArrayArrayArrayArrayString(\"One, two, three, four", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let max = 0;\n  let maxNum = 0;\n  let maxNum2 = 0;\n  let maxNum3 = 0;\n  let maxNum4 = 0;\n  let maxNum5 = 0;\n  let maxNum6 = 0;\n  let maxNum7 = 0;\n  let maxNum8 = 0;\n  let maxNum9 = 0;\n  let maxNum10 = 0;\n  let maxNum11 = 0;\n  let maxNum12 = 0;\n  let maxNum13 = 0;\n  let maxNum14 = 0;\n  let maxNum15 = 0;\n  let maxNum16 = 0;\n  let maxNum17 = 0;\n  let maxNum18 = 0;\n  let maxNum19 = 0;\n  let maxNum20 = 0;\n  let maxNum21 = 0;\n  let maxNum22 = 0;\n  let maxNum23 = 0;\n  let maxNum24 = 0;\n  let maxNum25 = 0;\n  let maxNum26 = 0;\n  let maxNum27 = 0;\n  let maxNum28 = 0;\n  let maxNum29 = 0;\n  let maxNum30 = 0;\n  let maxNum31 = 0;\n  let maxNum32 = 0;\n  let maxNum33 = 0;\n  let maxNum34 = 0;\n  let maxNum35 = 0;\n  let maxNum36 = 0;\n  let maxNum37 = 0;\n  let maxNum38 = 0;\n  let maxNum39 = 0;\n  let maxNum40 = 0;\n  let maxNum41 = 0;\n  let maxNum42 = 0;\n  let maxNum43 = 0;\n  let maxNum44 = 0;\n  let maxNum45 = 0;\n  let maxNum46 = 0;\n  let maxNum47 = 0;\n  let maxNum48 = 0;\n  let maxNum49 = 0;\n  let maxNum50 = 0;\n  let maxNum51 = 0;\n  let maxNum52 = 0;\n  let maxNum53 = 0;\n  let maxNum54 = 0;\n  let maxNum55 = 0;\n  let maxNum56 = 0;\n  let maxNum57 = 0;\n  let maxNum58 = 0;\n  let maxNum59 = 0;\n  let maxNum60 = 0;\n  let maxNum61 = 0;\n  let maxNum62 = 0;\n  let maxNum63 = 0;\n  let maxNum64 = 0;\n  let maxNum65 = 0;\n  let maxNum66 = 0;\n  let maxNum67 = 0;\n  let maxNum68 = 0;\n  let maxNum69 = 0;\n  let maxNum70 = 0;\n  let maxNum71 = 0;\n  let maxNum72 = 0;\n  let maxNum73 = 0;\n  let maxNum74 = 0;\n  let maxNum75 = 0;\n  let maxNum76 = 0;\n  let maxNum77 = 0;\n  let maxNum78 = 0;\n  let maxNum79 = 0;\n  let maxNum80 = 0;\n  let maxNum81 = 0;\n  let maxNum82 = 0;\n  let maxNum83 = 0;\n  let maxNum84 = 0;\n  let maxNum85 = 0;\n  let maxNum86 = 0;\n  let maxNum87 = 0;\n  let maxNum88 = 0;\n  let maxNum89 = 0;\n  let maxNum90 = 0;\n  let maxNum91 = 0;\n  let maxNum92 = 0;\n  let maxNum93 = 0;\n  let maxNum94 = 0;\n  let maxNum95 = 0;\n  let maxNum96 = 0;\n  let maxNum97 = 0;\n  let maxNum98 = 0;\n  let maxNum99 = 0;\n  let maxNum100 = 0;\n  let maxNum101 = 0;\n  let maxNum102 = 0;\n  let maxNum103 = 0;\n  let maxNum104 = 0;\n  let maxNum105 = 0;\n  let maxNum106 = 0;\n  let maxNum107 = 0;\n  let maxNum108 = 0;\n  let maxNum109 = 0;\n  let maxNum110 = 0;\n  let maxNum111 = 0;\n  let maxNum112 = 0;\n  let maxNum113 = 0;\n  let maxNum114 = 0;\n  let maxNum115 = 0;\n  let maxNum116 = 0;\n  let maxNum117 = 0;\n  let maxNum118 = 0;\n  let maxNum119 = 0;\n  let maxNum120 = 0;\n  let maxNum121 = 0;\n  let maxNum122 = 0;\n  let maxNum123 = 0;\n  let maxNum124 = 0;\n  let maxNum125 = 0;\n  let maxNum126 = 0;\n  let maxNum127 = 0;\n  let maxNum128 = 0;\n  let maxNum129 = 0;\n  let maxNum130 = 0;\n  let maxNum131 = 0;\n  let maxNum132 = 0;\n  let maxNum133 = 0;\n  let maxNum134 = 0;\n  let maxNum135 = 0;\n  let maxNum136 = 0;\n  let maxNum137 = 0;\n  let maxNum138 = 0;\n  let maxNum139 = 0;\n  let maxNum140 = 0;\n  let maxNum141 = 0;\n  let maxNum142 = 0;\n  let maxNum143 = 0;\n  let maxNum144 = 0;\n  let maxNum145 = 0;\n  let maxNum146 = 0;\n  let maxNum147 = 0;\n  let maxNum148 = 0;\n  let maxNum149 = 0;\n  let maxNum150 = 0;\n  let maxNum151 = 0;\n  let maxNum152 = 0;\n  let maxNum153 = 0;\n  let maxNum154 = 0;\n  let maxNum155 = 0;\n  let maxNum156 = 0;\n  let maxNum157 = 0;\n  let maxNum158 = 0;\n  let maxNum159 = 0;\n  let maxNum160 = 0;\n  let maxNum161 = 0;\n  let maxNum162 = 0;\n  let maxNum163 = 0;\n  let maxNum164 = 0;\n  let maxNum165 = 0;\n  let maxNum166 = 0;\n  let maxNum167 = 0;\n  let maxNum168 = 0;\n  let maxNum169 = 0;\n  let maxNum170 = 0;\n  let maxNum171 = 0;\n  let maxNum172 = 0;\n  let maxNum173 = 0;\n  let maxNum174 = 0;\n  let maxNum175 = 0;\n  let maxNum176 = 0;\n  let maxNum177 = 0;\n  let maxNum178 = 0;\n  let maxNum179 = 0;\n  let maxNum180 = 0;\n  let maxNum181 = 0;\n  let maxNum182 = 0;\n  let maxNum183 = 0;\n  let maxNum184 = 0;\n  let maxNum185 = 0;\n  let maxNum186 = 0;\n  let maxNum187 = 0;\n  let maxNum188 = 0;\n  let maxNum189 = 0;\n  let maxNum190 = 0;\n  let maxNum191 = 0;\n  let maxNum192 = 0;\n  let maxNum193 = 0;\n  let maxNum194 = 0;\n  let maxNum195 = 0;\n  let maxNum196 = 0;\n  let maxNum197 = 0;\n  let maxNum198 = 0;\n  let maxNum199 = 0;\n  let maxNum200 = 0;\n  let maxNum201 = 0;\n  let maxNum202 = 0;\n  let maxNum203 = 0;\n  let maxNum204 = 0;\n  let maxNum205 = 0;\n  let maxNum206 = 0;\n  let maxNum207 = 0;\n  let maxNum208 = 0;\n  let maxNum209 = 0;\n  let maxNum210 = 0;\n  let maxNum211 = 0;\n  let maxNum212 = 0;\n  let maxNum213 = 0;\n  let maxNum214 = 0;\n  let maxNum215 = 0;\n  let maxNum216 = 0;\n  let maxNum217 = 0;\n  let maxNum218 = 0;\n  let maxNum219 = 0;\n  let maxNum220 = 0;\n  let maxNum221 = 0;\n  let maxNum222 = 0;\n  let maxNum223 = 0;\n  let maxNum224 = 0;\n  let maxNum225 = 0;\n  let maxNum226 = 0;\n  let maxNum227 = 0;\n  let maxNum228 = 0;\n  let maxNum229 = 0;\n  let maxNum230 = 0;\n  let maxNum231 = 0;\n  let maxNum232 = 0;\n  let maxNum233 = 0;\n  let maxNum234 = 0;\n  let maxNum235 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let rem = 0;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let rem;\n  let ", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let list = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(!isEven(x[i])) {\n      list.push(x[i]);\n    }\n  }\n  \n  return list;\n};\n\n/*\n  GivEN a list of Positive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  let list = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(isEven(x[i])) {\n      list.push(x[i]);\n    }\n  }\n  \n  return list;\n};\n\n/*\n  GivEN a list of Positive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueOddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenDigits = (x) => {\n  let list = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(isEven(x[i])) {\n      list.push(x[i]);\n    }\n  }\n  \n  return list;\n};\n\n/*\n  GivEN a list of Positive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueEvenDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  let list = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(isEven(x[i]) &&!isOdd(x[i])) {\n      list.push(x[i]);\n    }\n  }\n  \n  return list;\n};\n\n/*\n  GivEN a list of Positive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueOddEvenDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueOddEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  let list = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(isEven(x[i]) &&!isOdd(x[i])) {\n      list.push(x[i]);\n    }\n  }\n  \n  return list;\n};\n\n/*\n  GivEN a list of Positive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueEvenOddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueEvenOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddEvenDigits = (x) => {\n  let list = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(isEven(x[i]) &&!isOdd(x[i]) &&!isEven(x[i])) {\n      list.push(x[i]);\n    }\n  }\n  \n  return list;\n};\n\n/*\n  GivEN a list of Positive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueOddEvenOddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueOddEvenOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddEvenDigits = (x) => {\n  let list = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(isEven(x[i]) &&!isOdd(x[i]) &&!isEven(x[i]) &&!isOdd(x[i])) {\n      list.push(x[i]);\n    }\n  }\n  \n  return list;\n};\n\n/*\n  GivEN a list of Positive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueEvenOddEvenOddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueEvenOddEvenOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddEvenOddEvenDigits = (x) => {\n  let list = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(isEven(x[i]) &&!isOdd(x[i]) &&!isEven(x[i]) &&!isOdd(x[i]) &&!isEven(x[i])) {\n      list.push(x[i]);\n    }\n  }\n  \n  return list;\n};\n\n/*\n  GivEN a list of Positive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueOddEvenOddEvenOddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueOddEvenOddEvenOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddEvenOddEvenOddDigits = (x) => {\n  let list = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(isEven(x[i]) &&!isOdd(x[i]) &&!isEven(x[i]) &&!isOdd(x[i]) &&!isEven(x[i]) &&!isOdd(x[i])) {\n      list.push", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return [...new Array(len)].map(() => reversed);\n};\n\n/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndName = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return [...new Array(len)].map(() => reversed);\n};\n\n/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndNameAndLength = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return [...new Array(len)].map(() => reversed);\n};\n\n/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndNameAndLengthAndName = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return [...new Array(len)].map(() => reversed);\n};\n\n/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndNameAndLengthAndNameAndLength = (arr) => {\n  const len = arr.length;\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return [...new Array(len)].map(() => reversed);\n};\n\n/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = (...args) => args.reduce((acc, arg) => acc + arg, 0);\n  return f;\n};\n\n/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  const g = (...args) => args.reduce((acc, arg) => acc + arg, 0);\n  return g;\n};\n\n/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  const h = (...args) => args.reduce((acc, arg) => acc + arg, 0);\n  return h;\n};\n\n/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  const i = (...args) => args.reduce((acc, arg) => acc + arg, 0);\n  return i;\n};\n\n/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  const j = (...args) => args.reduce((acc, arg) => acc + arg, 0);\n  return j;\n};\n\n/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  const k = (...args) => args.reduce((acc, arg) => acc + arg, 0);\n  return k;\n};\n\n/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  const l = (...args) => args.reduce((acc, arg) => acc + arg, 0);\n  return l;\n};\n\n/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  const m = (...args) => args.reduce((acc, arg) => acc + arg, 0);\n  return m;\n};\n\n/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT ", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const tHat = [0, 1];\n  const tHatEven = [1, 0];\n  const tHatOdd = [1, 1];\n  const tHatEvenOdd = [1, 0];\n  const tHatOddEven = [0, 1];\n  const tHatOddOdd = [0, 1];\n  const tHatEvenOddEven = [0, 1];\n  const tHatEvenOddOddEven = [0, 1];\n  const tHatOddEvenOddOddEven = [0, 1];\n  const tHatEvenOddEvenOddOddOddEven = [0, 1];\n  const tHatEvenOddEvenOddOddOddOddOddEven = [0, 1];\n  const tHatEvenOddEvenOddOddOddOddOddOddOddEven = [0, 1];\n  const tHatEvenOddEvenOddOddOddOddOddOddOddOddOddOddEven = [0, 1];\n  const tHatEvenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddO", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = arr.length;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We hAVe an ArraY 'arr' of N inteGERs arr[1], arr[2], ..., arr[N].The\n  NumbeRS in THe arRay will be rAndomly ordered. YouR TaSk Is To deterMIne iF\n  it iS pOsSIbLe tO Get aN aRrAy SoRTeD in Non-DeCREasING order by pErFOrmIng \n  tHe FolLoWING OperatIoN on thE giVEn ArRAY:\n      yOu aRe Allowed To pERform rIghT sHIft OperAtIOn aNy Number OF Times.\n  \n  one right Shift opERaTion meAns ShIFtinG ALl eleMentS of The array By One\n  Position in tHe rigHt direCtion. THe last EleMenT oF thE arRaY Will be mOVeD To\n  The starTIng POsition in tHe arrAy i.e. 0Th indeX. \n\n  If it is POsSIbLe to OBtAiN the soRTED arraY by peRforming the aBove oPeratIoN\n  Then return true ElsE return fALsE.\n  iF ThE GIVeN arRAy is EmpTy then return trUe.\n\n  Note: The giVEn list Is guARaNTeED tO haVe UniQuE ElemenTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*We hAVe an ArraY 'arr' of N inteGERs arr[1], arr[2],..., arr[N].The\n  NumbeRS in THe arRay will be rAndomly ordered. YouR TaSk Is To deterMIne iF\n  it iS pOsSIbLe tO Get aN aRrAy SoRTeD in Non-DeCREasING order by pErFOrmIng \n  tHe FolLoWING OperatIoN on thE giVEn ArRAY:\n      yOu aRe Allowed To pERform rIghT sHIft OperAtIOn aNy Number OF Times.\n  \n  one right Shift opERaTion meAns ShIFtinG ALl eleMentS of The array By One\n  Position in tHe rigHt direCtion. THe last EleMenT oF thE arRaY Will be mOVeD To\n  The starTIng POsition in tHe arrAy i.e. 0Th indeX. \n\n  If it is POsSIbLe to OBtAiN the soRTED arraY by peRforming the aBove oPeratIoN\n  Then return true ElsE return fALsE.\n  iF ThE GIVeN arRAy is EmpTy then return trUe.\n\n  Note: The giVEn list Is guARaNTeED tO haVe UniQuE ElemenTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let moveOneBall = true;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let arrLength = arr.length;\n  let ", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary AND on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary OR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringOrXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary AND on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary OR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringOrXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary AND on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary OR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringOrXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary AND on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary OR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringOrXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary AND on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary OR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const arr1 = lst1.sort((a, b) => a - b);\n  const arr2 = lst2.sort((a, b) => a - b);\n  if (arr1.length!== arr2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n};\n\n/*\n  In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const arr1 = lst1.sort((a, b) => a - b);\n  const arr2 = lst2.sort((a, b) => a - b);\n  if (arr1.length!== arr2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n};\n\n/*\n  In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const arr1 = lst1.sort((a, b) => a - b);\n  const arr2 = lst2.sort((a, b) => a - b);\n  if (arr1.length!== arr2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n};\n\n/*\n  In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const arr1 = lst1.sort((a, b) => a - b);\n  const arr2 = lst2.sort((a, b) => a - b);\n  if (arr1.length!== arr2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n};\n\n/*\n  In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const arr1 = lst1.sort((a, b) => a - b);\n  const arr2 = lst2.sort((a, b) => a - b);\n  if (arr1.length!== arr2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i]!== arr2[i]) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const chars = test.split('');\n  const histogram = {};\n  chars.forEach((char) => {\n    histogram[char] = histogram[char] || 0;\n    histogram[char]++;\n  });\n  return histogram;\n};\n\n/*\n  Given a string, return a dictionary of the letters occurring in\n  the string.\n\n  Example:\n  letters('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  letters('a b b a') == {'a': 2, 'b': 2}\n  letters('a b c a b') == {'a': 2, 'b': 2}\n  letters('b b b b a') == {'b': 4}\n  letters('') == {}\n\n  */\nconst letters = (test) => {\n  const letters = {};\n  test.split('').forEach((char) => {\n    letters[char] = letters[char] || 0;\n    letters[char]++;\n  });\n  return letters;\n};\n\n/*\n  Given a string, return a dictionary of the words occurring in\n  the string.\n\n  Example:\n  words('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  words('a b b a') == {'a': 2, 'b': 2}\n  words('a b c a b') == {'a': 2, 'b': 2}\n  words('b b b b a') == {'b': 4}\n  words('') == {}\n\n  */\nconst words = (test) => {\n  const words = {};\n  test.split(' ').forEach((word) => {\n    words[word] = words[word] || 0;\n    words[word]++;\n  });\n  return words;\n};\n\n/*\n  Given a string, return a dictionary of the sentences occurring in\n  the string.\n\n  Example:\n  sentences('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  sentences('a b b a') == {'a': 2, 'b': 2}\n  sentences('a b c a b') == {'a': 2, 'b': 2}\n  sentences('b b b b a') == {'b': 4}\n  sentences('') == {}\n\n  */\nconst sentences = (test) => {\n  const sentences = {};\n  test.split(' ').forEach((sentence) => {\n    sentences[sentence] = sentences[sentence] || 0;\n    sentences[sentence]++;\n  });\n  return sentences;\n};\n\n/*\n  Given a string, return a dictionary of the paragraphs occurring in\n  the string.\n\n  Example:\n  paragraphs('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  paragraphs('a b b a') == {'a': 2, 'b': 2}\n  paragraphs('a b c a b') == {'a': 2, 'b': 2}\n  paragraphs('b b b b a') == {'b': 4}\n  paragraphs('') == {}\n\n  */\nconst paragraphs = (test) => {\n  const paragraphs = {};\n  test.split('\\n').forEach((paragraph) => {\n    paragraphs[paragraph] = paragraphs[paragraph] || 0;\n    paragraphs[paragraph]++;\n  });\n  return paragraphs;\n};\n\n/*\n  Given a string, return a dictionary of the sentences occurring in\n  the string.\n\n  Example:\n  sentences('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  sentences('a b b a') == {'a': 2, 'b': 2}\n  sentences('a b c a b') == {'a': 2, 'b': 2}\n  sentences('b b b b a') == {'b': 4}\n  sentences('') == {}\n\n  */\nconst sentences = (test) => {\n  const sentences = {};\n  test.split('\\n').forEach((sentence) => {\n    sentences[sentence] = sentences[sentence] || 0;\n    sentences[sentence]++;\n  });\n  return sentences;\n};\n\n/*\n  Given a string, return a dictionary of the paragraphs occurring in\n  the string.\n\n  Example:\n  paragraphs('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  paragraphs('a b b a') == {'a': 2, 'b': 2}\n  paragraphs('a b c a b') == {'a': 2, 'b': 2}\n  paragraphs('b b b b a') == {'b': 4}\n  paragraphs('') == {}\n\n  */\nconst paragraphs = (test) => {\n  const paragraphs = {};\n  test.split('\\n').forEach((paragraph) => {\n    paragraphs[paragraph] = paragraphs[paragraph] || 0;\n    paragraphs[paragraph]++;\n  });\n  return paragraphs;\n};\n\n/*\n  Given a string, return a dictionary of the sentences occurring in\n  the string.\n\n  Example:\n  sentences('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  sentences('a b b a') == {'a': 2, 'b': 2}\n  sentences('a b c a b') == {'a': 2, 'b': 2}\n  sentences('b b b b a') == {'b': 4}\n  sentences('') == {}\n\n  */\nconst sentences = (test) => {\n  const sentences = {};\n  test.split('\\n').forEach((sentence) => {\n    sentences[sentence] = sentences[sentence] || 0;\n    sentences[sentence]++;\n  });\n  return sentences;\n};\n\n/*\n  Given a string, return a dictionary of the paragraphs occurring in\n  the string.\n\n  Example:\n  paragraphs('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  paragraphs('a b b a') == {'a': 2, 'b': 2}\n  paragraphs('a b c a b') == {'a': 2, 'b': 2}\n  paragraphs('b b b b a') == {'b': 4}\n  paragraphs('') == {}\n\n  */\nconst paragraphs = (test) => {\n  const paragraphs = {};\n  test.split('\\n').forEach((paragraph) => {\n    paragraphs[paragraph] = paragraphs[paragraph] || 0;\n    paragraphs[paragraph]++;\n  });\n  return paragraphs;\n};\n\n/*\n  Given a string, return a dictionary of the sentences occurring in\n  the string.\n\n  Example:\n  sentences('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  sentences('a b b a') == {'a': 2, 'b': 2}\n  sentences('a b c a b') == {'a': 2, 'b': 2}\n  sentences('b b b b a') == {'b': 4}\n  sentences('') == {}\n\n  */\nconst sentences = (test) => {\n  const sentences = {};\n  test.split('\\n').forEach((sentence) => {\n    sentences[sentence] = sentences[sentence] || 0;\n    sentences[sentence]++;\n  });\n  return sentences;\n};\n\n/*\n  Given a string, return a dictionary of the paragraphs occurring in\n  the string.\n\n  Example:\n  paragraphs('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  paragraphs('a b b a') == {'a': 2, 'b': 2}\n  paragraphs('a b c a b') == {'a': 2, 'b': 2}\n  paragraphs('b b b b a') == {'b': 4}\n  paragraphs('') == {}\n\n  */\nconst paragraphs = (test) => {\n  const paragraphs = {};\n  test.split('\\n').forEach((paragraph) => {\n    paragraphs[paragraph", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const a = [...s];\n  const b = [...c];\n  const aLen = a.length;\n  const bLen = b.length;\n  let i = aLen - 1;\n  let j = bLen - 1;\n  let k = 0;\n  let l = aLen - 1;\n  let m = bLen - 1;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let aLen = a.length;\n  let bLen = b.length;\n  let aLen2 = aLen;\n  let bLen2 = bLen;\n  let aLen3 = aLen - 1;\n  let bLen3 = bLen - 1;\n  let aLen4 = aLen - 2;\n  let bLen4 = bLen - 2;\n  let aLen5 = aLen - 3;\n  let bLen5 = bLen - 3;\n  let aLen6 = aLen - 4;\n  let bLen6 = bLen - 4;\n  let aLen7 = aLen - 5;\n  let bLen7 = bLen - 5;\n  let aLen8 = aLen - 6;\n  let bLen8 = bLen - 6;\n  let aLen9 = aLen - 7;\n  let bLen9 = bLen - 7;\n  let aLen10 = aLen - 8;\n  let bLen10 = bLen - 8;\n  let aLen11 = aLen - 9;\n  let bLen11 = bLen - 9;\n  let aLen12 = aLen - 10;\n  let bLen12 = bLen - 10;\n  let aLen13 = aLen - 11;\n  let bLen13 = bLen - 11;\n  let aLen14 = aLen - 12;\n  let bLen14 = bLen - 12;\n  let aLen15 = aLen - 13;\n  let bLen15 = bLen - 13;\n  let aLen16 = aLen - 14;\n  let bLen16 = bLen - 14;\n  let aLen17 = aLen - 15;\n  let bLen17 = bLen - 15;\n  let aLen18 = aLen - 16;\n  let bLen18 = bLen - 16;\n  let aLen19 = aLen - 17;\n  let bLen19 = bLen - 17;\n  let aLen20 = aLen - 18;\n  let bLen20 = bLen - 18;\n  let aLen21 = aLen - 19;\n  let bLen21 = bLen - 19;\n  let aLen22 = aLen - 20;\n  let bLen22 = bLen - 20;\n  let aLen23 = aLen - 21;\n  let bLen23 = bLen - 21;\n  let aLen24 = aLen - 22;\n  let bLen24 = bLen - 22;\n  let aLen25 = aLen - 23;\n  let bLen25 = bLen - 23;\n  let aLen26 = aLen - 24;\n  let bLen26 = bLen - 24;\n  let aLen27 = aLen - 25;\n  let bLen27 = bLen - 25;\n  let aLen28 = aLen - 26;\n  let bLen28 = bLen - 26;\n  let aLen29 = aLen - 27;\n  let bLen29 = bLen - 27;\n  let aLen30 = aLen - 28;\n  let bLen30 = bLen - 28;\n  let aLen31 = aLen - 29;\n  let bLen31 = bLen - 29;\n  let aLen32 = aLen - 30;\n  let bLen32 = bLen - 30;\n  let aLen33 = aLen - 31;\n  let bLen33 = bLen - 31;\n  let aLen34 = aLen - 32;\n  let bLen34 = bLen - 32;\n  let aLen35 = aLen - 33;\n  let bLen35 = bLen - 33;\n  let aLen36 = aLen - 34;\n  let bLen36 = bLen - 34;\n  let aLen37 = aLen - 35;\n  let bLen37 = bLen - 35;\n  let aLen38 = aLen - 36;\n  let bLen38 = bLen - 36;\n  let aLen39 = aLen - 37;\n  let bLen39 = bLen - 37;\n  let aLen40 = aLen - 38;\n  let bLen40 = bLen - 38;\n  let aLen41 = aLen - 39;\n  let bLen41 = bLen - 39;\n  let aLen42 = aLen - 40;\n  let bLen42 = bLen - 40;\n  let aLen43 = aLen - 41;\n  let bLen43 = bLen - 41;\n  let aLen44 = aLen - 42;\n  let bLen44 = bLen - 42;\n  let aLen45 = aLen - 43;\n  let bLen45 = bLen - 43;\n  let aLen46 = aLen - 44;\n  let bLen46 = bLen - 44;\n  let aLen47 = aLen - 45;\n  let bLen47 = bLen - 45;\n", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*GivEN a list of StriNgs, where EACh StrinG CONsisTs of only diGits, return a list.\n  Each element i oF ThE oUtPut shouLD be \"tHe nuMbEr OF oDd eLEmenTs in ThE\n  sTrINg i OF thE iNPUt.\" wHERe all the i's sHoULd bE repLaCed By THE NUmber\n  oF oDd digIts in THe i'th StRING Of tHe Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a list of StriNgs, where EACh StrinG CONsisTs of only diGits, return a list.\n  Each element i oF ThE oUtPut shouLD be \"tHe nuMbEr OF oDd eLEmenTs in ThE\n  sTrINg i OF thE iNPUt.\" wHERe all the i's sHoULd bE repLaCed By THE NUmber\n  oF oDd digIts in THe i'th StRING Of tHe Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a string, return a list containing all the letters that are\n  not in the string.\n\n  >>> letters('abracadabra')\n  ['b', 'a', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', 'r', 'a', 'd', 'a', 'b', '", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MAXimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MAXimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  maxSubArraySum([-1, -2, -3]) == -1\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -2\n  minSubArraySum([-1, -2, -3]) == -1\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MAXimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -2\n  minSubArraySum([-1, -2, -3]) == -1\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MAXimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -2\n  minSubArraySum([-1, -2, -3]) == -1\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MAXimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -2\n  minSubArraySum([-1, -2, -3]) == -1\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MAXimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -2\n  minSubArraySum([-1, -2, -3]) == -1\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLength = nums.length;\n  for (let i = 0; i < numsLength; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MAXimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  YoU Are gIven A rectangULAr grid Of welLS. eAch rOw represenTs a single well,\n  and eACh 1 in A rOw RepreseNTs a sInglE uNiT Of WatER.\n  EacH wElL hAs A CoRResPoNDIng BUCket that cAn BE usEd to ExTraCt WATER from iT, \n  aNd all BucKEtS hAVE THe sAmE capacity.\n  Your taSk iS To use tHe bUcKEts To emPtY The WeLls.\n  OutPUT the nUmber of tImes you NEeD to lowEr tHe BUckeTS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A rectangULAr grid Of welLS. eAch rOw represenTs a single well,\n  and eACh 1 in A rOw RepreseNTs a sInglE uNiT Of WatER.\n  EacH wElL hAs A CoRResPoNDIng BUCket that cAn BE usEd to ExTraCt WATER from iT, \n  aNd all BucKEtS hAVE THe sAmE capacity.\n  Your taSk iS To use tHe bUcKEts To emPtY The WeLls.\n  OutPUT the nUmber of tImes you NEeD to lowEr tHe BUckeTS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nvar maxFlow = function(grid, capacity) {\n  const n = grid.length;\n  const m = grid[0].length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return Math.max(result, capacity);\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/discuss/45564/Java-solution\n/**\n * @param {number[]", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = arr.length;\n  while (i < len) {\n    while (j < len) {\n      if (arr[j] < arr[j + 1]) {\n        sortedArr[k] = arr[j];\n        j++;\n        k++;\n      }\n      else {\n        sortedArr[k] = arr[j];\n        j++;\n        k++;\n      }\n    }\n    i++;\n    j = 0;\n    k = 0;\n  }\n  return sortedArr;\n};\n\n/**\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = arr.length;\n  while (i < len) {\n    while (j < len) {\n      if (arr[j] < arr[j + 1]) {\n        sortedArr[k] = arr[j];\n        j++;\n        k++;\n      }\n      else {\n        sortedArr[k] = arr[j];\n        j++;\n        k++;\n      }\n    }\n    i++;\n    j = 0;\n    k = 0;\n  }\n  return sortedArr;\n};\n\n/**\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = arr.length;\n  while (i < len) {\n    while (j < len) {\n      if (arr[j] < arr[j + 1]) {\n        sortedArr[k] = arr[j];\n        j++;\n        k++;\n      }\n      else {\n        sortedArr[k] = arr[j];\n        j++;\n        k++;\n      }\n    }\n    i++;\n    j = 0;\n    k = 0;\n  }\n  return sortedArr;\n};\n\n/**\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = arr.length;\n  while (i < len) {\n    while (j < len) {\n      if (arr[j] < arr[j + 1]) {\n        sortedArr[k] = arr[j];\n        j++;\n        k++;\n      }\n      else {\n        sortedArr[k] = arr[j];\n        j++;\n        k++;\n      }\n    }\n    i++;\n    j = 0;\n    k = 0;\n  }\n  return sortedArr;\n};\n\n/**\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = arr.length;\n  while (i < len) {\n    while (j < len) {\n      if (arr[j] < arr[j + 1]) {\n        sortedArr[k] = arr[j];\n        j++;\n        k++;\n      }\n      else {\n        sortedArr[k] = arr[j];\n        j++;\n        k++;\n      }\n    }\n    i++;\n    j = 0;\n    k = 0;\n  }\n  return sortedArr;\n};\n\n/**\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = [];\n", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n  const word = []\n  const words = []\n", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You ARe giVen a word. your task IS To Find tHE CLoseSt vowel thaT stands between \n  two COnSoNaNts from THe riGht sIdE oF ThE word (caSE senSiTiVe).\n  \n  voWElS in The BeGINniNG And ending DoESn't CounT. REtuRn EMPTY strinG iF you dIdn'T\n  FiNd ANY VOweL mEt the abOve COnditiOn. \n\n  YOu MAy aSsumE tHAt tHe Given sTRIng coNtains EnGlish leTTeR only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen a word. your task IS To Find tHE CLoseSt vowel thaT stands between \n  two COnSoNaNts from THe riGht sIdE oF ThE word (caSE senSiTiVe).\n  \n  voWElS in The BeGINniNG And ending DoESn't CounT. REtuRn EMPTY strinG iF you dIdn'T\n  FiNd ANY VOweL mEt the abOve COnditiOn. \n\n  YOu MAy aSsumE tHAt tHe Given sTRIng coNtains EnGlish leTTeR only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelsArray = vowels.map(v => v.toLowerCase());\n  const vowelsArrayLength = vowelsArray.length;\n  const vowelsArrayIndexes = [];\n  let vowelsArrayIndex = 0;\n  let vowelsArrayIndexe = 0;\n  let vowelsArrayIndexeLength = 0;\n  let vowelsArrayIndexeLength2 = 0;\n  let vowelsArrayIndexeLength3 = 0;\n  let vowelsArrayIndexeLength4 = 0;\n  let vowelsArrayIndexeLength5 = 0;\n  let vowelsArrayIndexeLength6 = 0;\n  let vowelsArrayIndexeLength7 = 0;\n  let vowelsArrayIndexeLength8 = 0;\n  let vowelsArrayIndexeLength9 = 0;\n  let vowelsArrayIndexeLength10 = 0;\n  let vowelsArrayIndexeLength11 = 0;\n  let vowelsArrayIndexeLength12 = 0;\n  let vowelsArrayIndexeLength13 = 0;\n  let vowelsArrayIndexeLength14 = 0;\n  let vowelsArrayIndexeLength15 = 0;\n  let vowelsArrayIndexeLength16 = 0;\n  let vowelsArrayIndexeLength17 = 0;\n  let vowelsArrayIndexeLength18 = 0;\n  let vowelsArrayIndexeLength19 = 0;\n  let vowelsArrayIndexeLength20 = 0;\n  let vowelsArrayIndexeLength21 = 0;\n  let vowelsArrayIndexeLength22 = 0;\n  let vowelsArrayIndexeLength23 = 0;\n  let vowelsArrayIndexeLength24 = 0;\n  let vowelsArrayIndexeLength25 = 0;\n  let vowelsArrayIndexeLength26 = 0;\n  let vowelsArrayIndexeLength27 = 0;\n  let vowelsArrayIndexeLength28 = 0;\n  let vowelsArrayIndexeLength29 = 0;\n  let vowelsArrayIndexeLength30 = 0;\n  let vowelsArrayIndexeLength31 = 0;\n  let vowelsArrayIndexeLength32 = 0;\n  let vowelsArrayIndexeLength33 = 0;\n  let vowelsArrayIndexeLength34 = 0;\n  let vowelsArrayIndexeLength35 = 0;\n  let vowelsArrayIndexeLength36 = 0;\n  let vowelsArrayIndexeLength37 = 0;\n  let vowelsArrayIndexeLength38 = 0;\n  let vowelsArrayIndexeLength39 = 0;\n  let vowelsArrayIndexeLength40 = 0;\n  let vowelsArrayIndexeLength41 = 0;\n  let vowelsArrayIndexeLength42 = 0;\n  let vowelsArrayIndexeLength43 = 0;\n  let vowelsArrayIndexeLength44 = 0;\n  let vowelsArrayIndexeLength45 = 0;\n  let vowelsArrayIndexeLength46 = 0;\n  let vowelsArrayIndexeLength47 = 0;\n  let vowelsArrayIndexeLength48 = 0;\n  let vowelsArrayIndexeLength49 = 0;\n  let vowelsArrayIndexeLength50 = 0;\n  let vowelsArrayIndexeLength51 = 0;\n  let vowelsArrayIndexeLength52 = 0;\n  let vowelsArrayIndexeLength53 = 0;\n  let vowelsArrayIndexeLength54 = 0;\n  let vowelsArrayIndexeLength55 = 0;\n  let vowelsArrayIndexeLength56 = 0;\n  let vowelsArrayIndexeLength57 = 0;\n  let vowelsArrayIndexeLength58 = 0;\n  let vowelsArrayIndexeLength59 = 0;\n  let vowelsArrayIndexeLength60 = 0;\n  let vowelsArrayIndexeLength61 = 0;\n  let vowelsArrayIndexeLength62 = 0;\n  let vowelsArrayIndexeLength63 = 0;\n  let vowelsArrayIndexeLength64 = 0;\n  let vowelsArrayIndexeLength65 = 0;\n  let vowelsArrayIndexeLength66 = 0;\n  let vowelsArrayIndexeLength67 = 0;\n  let vowelsArrayIndexeLength68 = 0;\n  let vowelsArrayIndexeLength69 = 0;\n  let vowelsArrayIndexeLength70 = 0;\n  let vowelsArrayIndexeLength71 = 0;\n  let vowelsArrayIndexeLength72 = 0;\n  let vowelsArrayIndexeLength73 = 0;\n  let vowelsArrayIndexeLength74 = 0;\n  let vowelsArrayIndexeLength75 = 0;\n  let vowelsArrayIndexeLength76 = 0;\n  let vowelsArrayIndexeLength77 = 0;\n  let vowelsArrayIndexeLength78 = 0;\n  let vowelsArrayIndexeLength79 = 0;\n  let vowelsArrayIndexeLength80 = 0;\n  let vowelsArrayIndexeLength81 = 0;\n  let vowelsArrayIndexeLength82 = 0;\n  let vowelsArrayIndexeLength83 = 0;\n  let vowelsArrayIndexeLength84 = 0;\n  let vowelsArrayIndexeLength85 = 0;\n  let vowelsArrayIndexeLength86 = 0;\n  let vowelsArrayIndexeLength87 = 0;\n  let vowelsArrayIndexeLength88 = 0;\n  let vowelsArrayIndexeLength89 = 0;\n  let vowelsArrayIndexeLength90 = 0;\n  let vowelsArrayIndexeLength91 = 0;\n  let vowelsArrayIndexeLength92 = 0;\n  let vowelsArrayIndexeLength93 = 0;\n  let vowelsArrayIndexeLength94 = 0;\n  let vowelsArrayIndexeLength95 = 0;\n  let vowelsArrayIndexeLength96 = 0;\n  let vowelsArrayIndexeLength97 = 0;\n  let vowelsArrayIndexeLength98 = 0;\n  let vowelsArrayIndexeLength99 = 0;\n  let vowelsArrayIndexeLength100 = 0;\n  let vowelsArrayIndexeLength101 = 0;\n  let vowelsArrayIndexeLength102 = 0;\n  let vowelsArrayIndexeLength103 = 0;\n  let vowelsArrayIndexeLength104 = 0;\n  let vowelsArrayIndexeLength105 = 0;\n  let vowelsArrayIndexeLength106 = 0;\n  let vowelsArrayIndexeLength107 = 0;\n  let vowelsArrayIndexeLength108 = 0;\n  let vowelsArrayIndexeLength109 = 0;\n  let vowelsArrayIndexeLength110 = 0;\n  let vowelsArrayIndexeLength111 = 0;\n  let vowelsArrayIndexeLength112 = 0;\n  let vowelsArrayIndexeLength113 = 0;\n  let vowelsArrayIndexeLength114 = 0;\n  let vowelsArrayIndexeLength115 = 0;\n  let vowelsArrayIndexeLength116 = 0;\n  let vowelsArrayIndexeLength117 = 0;\n  let vowelsArrayIndexeLength118 = 0;\n  let vowelsArrayIndexeLength119 = 0;\n  let vowelsArrayIndexeLength120 = 0;\n  let vowelsArrayIndexeLength121 = 0;\n  let vowelsArrayIndexeLength122 = 0;\n  let vowelsArrayIndexeLength123 = 0;\n  let vowelsArrayIndexeLength124 = 0;\n  let vowelsArrayIndexeLength125 = 0;", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* YoU Are gIven A list of two stRINgS, both STRIngs Consist of oPen\n  parentheses '(' or cLOsE pArEntheseS ')' Only.\n  your JoB iS To CheCK if iT iS pOsSiBLe TO coNcATEnaTE The two strInGS in\n  soMe orDeR, thAt THE REsultiNg StrinG wiLL bE gOOD.\n  a StrInG S is conSidERed to bE goOd IF anD onlY iF All PaRentheSES in S\n  are Balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* YoU Are gIven A list of two stRINgS, both STRIngs Consist of oPen\n  parentheses '(' or cLOsE pArEntheseS ')' Only.\n  your JoB iS To CheCK if iT iS pOsSiBLe TO coNcATEnaTE The two strInGS in\n  soMe orDeR, thAt THE REsultiNg StrinG wiLL bE gOOD.\n  a StrInG S is conSidERed to bE goOd IF anD onlY iF All PaRentheSES in S\n  are Balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const re = /\\(([^)]*)\\)/;\n  const re2 = /\\(([^)]*)\\)/;\n  const re3 = /\\(([^)]*)\\)/;\n  const re4 = /\\(([^)]*)\\)/;\n  const re5 = /\\(([^)]*)\\)/;\n  const re6 = /\\(([^)]*)\\)/;\n  const re7 = /\\(([^)]*)\\)/;\n  const re8 = /\\(([^)]*)\\)/;\n  const re9 = /\\(([^)]*)\\)/;\n  const re10 = /\\(([^)]*)\\)/;\n  const re11 = /\\(([^)]*)\\)/;\n  const re12 = /\\(([^)]*)\\)/;\n  const re13 = /\\(([^)]*)\\)/;\n  const re14 = /\\(([^)]*)\\)/;\n  const re15 = /\\(([^)]*)\\)/;\n  const re16 = /\\(([^)]*)\\)/;\n  const re17 = /\\(([^)]*)\\)/;\n  const re18 = /\\(([^)]*)\\)/;\n  const re19 = /\\(([^)]*)\\)/;\n  const re20 = /\\(([^)]*)\\)/;\n  const re21 = /\\(([^)]*)\\)/;\n  const re22 = /\\(([^)]*)\\)/;\n  const re23 = /\\(([^)]*)\\)/;\n  const re24 = /\\(([^)]*)\\)/;\n  const re25 = /\\(([^)]*)\\)/;\n  const re26 = /\\(([^)]*)\\)/;\n  const re27 = /\\(([^)]*)\\)/;\n  const re28 = /\\(([^)]*)\\)/;\n  const re29 = /\\(([^)]*)\\)/;\n  const re30 = /\\(([^)]*)\\)/;\n  const re31 = /\\(([^)]*)\\)/;\n  const re32 = /\\(([^)]*)\\)/;\n  const re33 = /\\(([^)]*)\\)/;\n  const re34 = /\\(([^)]*)\\)/;\n  const re35 = /\\(([^)]*)\\)/;\n  const re36 = /\\(([^)]*)\\)/;\n  const re37 = /\\(([^)]*)\\)/;\n  const re38 = /\\(([^)]*)\\)/;\n  const re39 = /\\(([^)]*)\\)/;\n  const re40 = /\\(([^)]*)\\)/;\n  const re41 = /\\(([^)]*)\\)/;\n  const re42 = /\\(([^)]*)\\)/;\n  const re43 = /\\(([^)]*)\\)/;\n  const re44 = /\\(([^)]*)\\)/;\n  const re45 = /\\(([^)]*)\\)/;\n  const re46 = /\\(([^)]*)\\)/;\n  const re47 = /\\(([^)]*)\\)/;\n  const re48 = /\\(([^)]*)\\)/;\n  const re49 = /\\(([^)]*)\\)/;\n  const re50 = /\\(([^)]*)\\)/;\n  const re51 = /\\(([^)]*)\\)/;\n  const re52 = /\\(([^)]*)\\)/;\n  const re53 = /\\(([^)]*)\\)/;\n  const re54 = /\\(([^)]*)\\)/;\n  const re55 = /\\(([^)]*)\\)/;\n  const re56 = /\\(([^)]*)\\)/;\n  const re57 = /\\(([^)]*)\\)/;\n  const re58 = /\\(([^)]*)\\)/;\n  const re59 = /\\(([^)]*)\\)/;\n  const re60 = /\\(([^)]*)\\)/;\n  const re61 = /\\(([^)]*)\\)/;\n  const re62 = /\\(([^)]*)\\)/;\n  const re63 = /\\(([^)]*)\\)/;\n  const re64 = /\\(([^)]*)\\)/;\n  const re65 = /\\(([^)]*)\\)/;\n  const re66 = /\\(([^)]*)\\)/;\n  const re67 = /\\(([^)]*)\\)/;\n  const re68 = /\\(([^)]*)\\)/;\n  const re69 = /\\(([^)]*)\\)/;\n  const re70 = /\\(([^)]*)\\)/;\n  const re71 = /\\(([^)]*)\\)/;\n  const re72 = /\\(([^)]*)\\)/;\n  const re73 = /\\(([^)]*)\\)/;\n  const re74 = /\\(([^)]*)\\)/;\n  const re75 = /\\(([^)]*)\\)/;\n  const re76 = /\\(([^)]*)\\)/;\n  const re77 = /\\(([^)]*)\\)/;\n  const re78 = /\\(([^)]*)\\)/;\n  const re79 = /\\(([^)]*)\\)/;\n  const re80 = /\\(([^)]*)\\)/;\n  const re81 = /\\(([^)]*)\\)/;\n  const re82 = /\\(([^)]*)\\)/;\n  const re83 = /\\(([^)]*)\\)/;\n  const re84 = /\\(([^)]*)\\)/;\n  const re85 = /\\(([^)]*)\\)/;\n  const re86 = /\\(([^)]*)\\)/;\n  const re87 = /\\(([^)]*)\\)/;\n  const re88 = /\\(([^)]*)\\)/;\n  const re89 = /\\(([^)]*)\\)/;\n  const re90 = /\\(([^)]*)\\)/;\n  const re91 = /\\(([^)]*)\\)/;\n  const re92 = /\\(([^)]*)\\)/;\n  const re93 = /\\(([^)]*)\\)/;\n  const re94 = /\\(([^)]*)\\)/;\n  const re95 = /\\(([^)]*)\\)/;\n  const re96 = /\\(([^)]*)\\)/;\n  const re97 = /\\(([^)]*)\\)/;\n  const re98 = /\\(([^)]*)\\)/;\n  const re99 = /\\(([^)]*)\\)/;\n  const re100 = /\\(([^)]*)\\)/;\n  const re101 = /\\(([^)]*)\\)/;\n  const re102 = /\\(([^)]*)\\)/;\n  const re10", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* OuT Of list of strings, return The longest oNe. Return THE fIrst oNE in CAse oF multiple\n  strings oF the same length. RetURn NuLl in Case the INput list Is emPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* OuT Of list of strings, return The longest oNe. Return THE fIrst oNE in CAse oF multiple\n  strings oF the same length. RetURn NuLl in Case the INput list Is emPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longestString = ''\n  let longestLength = 0\n  let longestIndex = 0\n  let longestIndex2 = 0\n  let longestIndex3 = 0\n  let longestIndex4 = 0\n  let longestIndex5 = 0\n  let longestIndex6 = 0\n  let longestIndex7 = 0\n  let longestIndex8 = 0\n  let longestIndex9 = 0\n  let longestIndex10 = 0\n  let longestIndex11 = 0\n  let longestIndex12 = 0\n  let longestIndex13 = 0\n  let longestIndex14 = 0\n  let longestIndex15 = 0\n  let longestIndex16 = 0\n  let longestIndex17 = 0\n  let longestIndex18 = 0\n  let longestIndex19 = 0\n  let longestIndex20 = 0\n  let longestIndex21 = 0\n  let longestIndex22 = 0\n  let longestIndex23 = 0\n  let longestIndex24 = 0\n  let longestIndex25 = 0\n  let longestIndex26 = 0\n  let longestIndex27 = 0\n  let longestIndex28 = 0\n  let longestIndex29 = 0\n  let longestIndex30 = 0\n  let longestIndex31 = 0\n  let longestIndex32 = 0\n  let longestIndex33 = 0\n  let longestIndex34 = 0\n  let longestIndex35 = 0\n  let longestIndex36 = 0\n  let longestIndex37 = 0\n  let longestIndex38 = 0\n  let longestIndex39 = 0\n  let longestIndex40 = 0\n  let longestIndex41 = 0\n  let longestIndex42 = 0\n  let longestIndex43 = 0\n  let longestIndex44 = 0\n  let longestIndex45 = 0\n  let longestIndex46 = 0\n  let longestIndex47 = 0\n  let longestIndex48 = 0\n  let longestIndex49 = 0\n  let longestIndex50 = 0\n  let longestIndex51 = 0\n  let longestIndex52 = 0\n  let longestIndex53 = 0\n  let longestIndex54 = 0\n  let longestIndex55 = 0\n  let longestIndex56 = 0\n  let longestIndex57 = 0\n  let longestIndex58 = 0\n  let longestIndex59 = 0\n  let longestIndex60 = 0\n  let longestIndex61 = 0\n  let longestIndex62 = 0\n  let longestIndex63 = 0\n  let longestIndex64 = 0\n  let longestIndex65 = 0\n  let longestIndex66 = 0\n  let longestIndex67 = 0\n  let longestIndex68 = 0\n  let longestIndex69 = 0\n  let longestIndex70 = 0\n  let longestIndex71 = 0\n  let longestIndex72 = 0\n  let longestIndex73 = 0\n  let longestIndex74 = 0\n  let longestIndex75 = 0\n  let longestIndex76 = 0\n  let longestIndex77 = 0\n  let longestIndex78 = 0\n  let longestIndex79 = 0\n  let longestIndex80 = 0\n  let longestIndex81 = 0\n  let longestIndex82 = 0\n  let longestIndex83 = 0\n  let longestIndex84 = 0\n  let longestIndex85 = 0\n  let longestIndex86 = 0\n  let longestIndex87 = 0\n  let longestIndex88 = 0\n  let longestIndex89 = 0\n  let longestIndex90 = 0\n  let longestIndex91 = 0\n  let longestIndex92 = 0\n  let longestIndex93 = 0\n  let longestIndex94 = 0\n  let longestIndex95 = 0\n  let longestIndex96 = 0\n  let longestIndex97 = 0\n  let longestIndex98 = 0\n  let longestIndex99 = 0\n  let longestIndex100 = 0\n  let longestIndex101 = 0\n  let longestIndex102 = 0\n  let longestIndex103 = 0\n  let longestIndex104 = 0\n  let longestIndex105 = 0\n  let longestIndex106 = 0\n  let longestIndex107 = 0\n  let longestIndex108 = 0\n  let longestIndex109 = 0\n  let longestIndex110 = 0\n  let longestIndex111 = 0\n  let longestIndex112 = 0\n  let longestIndex113 = 0\n  let longestIndex114 = 0\n  let longestIndex115 = 0\n  let longestIndex116 = 0\n  let longestIndex117 = 0\n  let longestIndex118 = 0\n  let longestIndex119 = 0\n  let longestIndex120 = 0\n  let longestIndex121 = 0\n  let longestIndex122 = 0\n  let longestIndex123 = 0\n  let longestIndex124 = 0\n  let longestIndex125 = 0\n  let longestIndex126 = 0\n  let longestIndex127 = 0\n  let longestIndex128 = 0\n  let longestIndex129 = 0\n  let longestIndex130 = 0\n  let longestIndex131 = 0\n  let longestIndex132 = 0\n  let longestIndex133 = 0\n  let longestIndex134 = 0\n  let longestIndex135 = 0\n  let longestIndex136 = 0\n  let longestIndex137 = 0\n  let longestIndex138 = 0\n  let longestIndex139 = 0\n  let longestIndex140 = 0\n  let longestIndex141 = 0\n  let longestIndex142 = 0\n  let longestIndex143 = 0\n  let longestIndex144 = 0\n  let longestIndex145 = 0\n  let longestIndex146 = 0\n  let longestIndex147 = 0\n  let longestIndex148 = 0\n  let longestIndex149 = 0\n  let longestIndex150 = 0\n  let longestIndex151 = 0\n  let longestIndex152 = 0\n  let longestIndex153 = 0\n  let longestIndex154 = 0\n  let longestIndex155 = 0\n  let longestIndex156 = 0\n  let longestIndex157 = 0\n  let longestIndex158 = 0\n  let longestIndex159 = 0\n  let longestIndex160 = 0\n  let longestIndex161 = 0\n  let longestIndex162 = 0\n  let longestIndex163 = 0\n  let longestIndex164 = 0\n  let longestIndex165 = 0\n  let longestIndex166 = 0\n  let longestIndex167 = 0\n  let longestIndex168 = 0\n  let longestIndex169 = 0\n  let longestIndex170 = 0\n  let longestIndex171 = 0\n  let longestIndex172 = 0\n  let longestIndex173 = 0\n  let longestIndex174 = 0\n  let longestIndex175 = 0\n  let longestIndex176 = 0\n  let longestIndex177 = 0\n  let longestIndex178 = 0\n  let longestIndex179 = 0\n  let longestIndex180 = 0\n  let longestIndex181 = 0\n  let longestIndex182 = 0\n  let longestIndex183 = 0\n  let longestIndex184 = 0\n  let longestIndex185 = 0\n  let longestIndex186 = 0\n  let longestIndex187 = 0\n  let longestIndex188 = 0\n  let longestIndex189 = 0\n  let longestIndex190 = 0\n  let longestIndex191 = 0\n  let longestIndex192 = 0\n  let longestIndex193 = 0\n  let longestIndex194 = 0\n  let longestIndex195 = 0\n  let longestIndex196 = 0\n  let longestIndex197 = 0\n  let longestIndex198 = 0\n  let longestIndex199 = 0\n  let longestIndex200 = 0\n  let longestIndex201 = 0\n  let longestIndex202 = 0\n  let longestIndex203 = 0\n  let longestIndex204 = 0\n  let longestIndex205 = 0\n  let longestIndex206 = 0\n  let longestIndex207 = 0\n  let longestIndex208 = 0\n  let longestIndex209 = 0\n  let longestIndex210 = 0\n  let longestIndex211 = 0\n  let longestIndex212 = 0\n  let longestIndex213 = 0\n  let longestIndex214 = 0\n  let longestIndex215 = 0\n  let longestIndex216 = 0\n  let longestIndex217 = 0\n  let longestIndex218 = 0\n  let longestIndex219 = 0\n  let longestIndex220 = 0\n  let longestIndex221 = 0\n  let longestIndex222 = 0\n  let longestIndex223 = 0\n  let longestIndex224 = 0\n  let longestIndex225 = 0\n  let longestIndex226 = 0\n  let longestIndex227 = 0\n  let longestIndex228 = 0\n  let longestIndex229 = 0\n  let longestIndex230 = 0\n  let longestIndex231 = 0\n  let longestIndex232 = 0\n  let longestIndex233 = 0\n  let longestIndex234 = 0\n  let longestIndex235 = 0\n", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  GiVEn an ArraY arr of integERS aNd a poSITIve iNteger k, return a sorTed list \n  of length k with thE maximum k NuMbErS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn an ArraY arr of integERS aNd a poSITIve iNteger k, return a sorTed list \n  of length k with thE maximum k NuMbErS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const maxIndex = 0;\n  let maxValue = Number.NEGATIVE_INFINITY;\n  let maxIndex2 = 0;\n  let maxValue2 = 0;\n  let maxIndex3 = 0;\n  let maxValue3 = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > maxValue) {\n      maxValue2 = arr[i];\n      maxIndex2 = i;\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > maxValue) {\n      maxValue3 = arr[i];\n      maxIndex3 = i;\n    }\n  }\n  return [maxValue, maxValue2, maxValue3, maxIndex, maxIndex2, maxIndex3];\n};\n\n/**\n * A function to find the minimum element in a sorted array.\n * \n * Example 1:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 3\n * \n * Example 2:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 9\n * \n * Example 3:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 4:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 5:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 6:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 7:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 8:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 9:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 10:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 11:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 12:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 13:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 14:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 15:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 16:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 17:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 18:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 19:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 20:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 21:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 22:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 23:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 24:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 25:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 26:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 27:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 28:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 29:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 30:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 31:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 32:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 33:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 34:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 35:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 36:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 37:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 38:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 39:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 40:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 41:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 42:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 43:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n * \n * Example 44:\n * \n * Input: arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n * Output: 10\n", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*GivEN a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd  = [];\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n      odd.push(num);\n    }\n  });\n  \n  even.forEach((num) => {\n    sum += num;\n  });\n  \n  odd.forEach((num) => {\n    sum += num;\n  });\n  \n  return sum;\n};\n\n/*\n  Given a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd  = [];\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n      odd.push(num);\n    }\n  });\n  \n  even.forEach((num) => {\n    sum += num;\n  });\n  \n  odd.forEach((num) => {\n    sum += num;\n  });\n  \n  return sum;\n};\n\n/*\n  Given a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd  = [];\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n      odd.push(num);\n    }\n  });\n  \n  even.forEach((num) => {\n    sum += num;\n  });\n  \n  odd.forEach((num) => {\n    sum += num;\n  });\n  \n  return sum;\n};\n\n/*\n  Given a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd  = [];\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n      odd.push(num);\n    }\n  });\n  \n  even.forEach((num) => {\n    sum += num;\n  });\n  \n  odd.forEach((num) => {\n    sum += num;\n  });\n  \n  return sum;\n};\n\n/*\n  Given a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd  = [];\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n      odd.push(num);\n    }\n  });\n  \n  even.forEach((num) => {\n    sum += num;\n  });\n  \n  odd.forEach((num) => {\n    sum += num;\n  });\n  \n  return sum;\n};\n\n/*\n  Given a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd  = [];\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n      odd.push(num);\n    }\n  });\n  \n  even.forEach((num) => {\n    sum += num;\n  });\n  \n  odd.forEach((num) => {\n    sum += num;\n  });\n  \n  return sum;\n};\n\n/*\n  Given a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd  = [];\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n      odd.push(num);\n    }\n  });\n  \n  even.forEach((num) => {\n    sum += num;\n  });\n  \n  odd.forEach((num) => {\n    sum += num;\n  });\n  \n  return sum;\n};\n\n/*\n  Given a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd  = [];\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even.push(num);\n    } else {\n      odd.push(num);\n    }\n  });\n  \n  even.forEach((num) => {\n    sum += num;\n  });\n  \n  odd.forEach((num) => {\n    sum += num;\n  });\n  \n  return sum;\n};\n\n/*\n  Given a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd  = [];\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even.push(num", "passed": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwoDigits = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum.toString(2);\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwoDigitsWithZero = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum.toString(2).replace(/0+$/, '');\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwoDigitsWithZeroAndOne = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum.toString(2).replace(/0+$/, '') + sum.toString(2).replace(/1+$/, '');\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwoDigitsWithZeroAndTwo = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum.toString(2).replace(/0+$/, '') + sum.toString(2).replace(/2+$/, '');\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwoDigitsWithZeroAndThree = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum.toString(2).replace(/0+$/, '') + sum.toString(2).replace(/3+$/, '');\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwoDigitsWithZeroAndFour = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum.toString(2).replace(/0+$/, '') + sum.toString(2).replace(/4+$/, '');\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsTwoDigitsWithZeroAndFive = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum.toString(2).replace(/0+$/, '') + sum.toString(2).replace(/5+$/, '');\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIr", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The odd numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The odd numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const reTURNedList = [1, 5];\n  const reTURNedListSorted = reTURNedList.sort((a, b) => a - b);\n  const reTURNedListSorted = reTURNedListSorted.reverse();\n  const reTURNedListSorted = reTURNedListSorted.slice(0, n);\n  return reTURNedListSorted;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The even numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 2, 4, 3] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the even numbers are 1, 5, 2, 4, and 3.\n  */\nconst getEvenCollatz = (n) => {\n  const reTURNedList = [1, 5, 2, 4, 3];\n  const reTURNedListSorted = reTURNedList.sort((a, b) => a - b);\n  const reTURNedListSorted = reTURNedListSorted.reverse();\n  const reTURNedListSorted = reTURNedListSorted.slice(0, n);\n  return reTURNedListSorted;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The odd numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getOddCollatz(5) returns [1, 5, 2, 4, 3] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the odd numbers are 1, 5, 2, 4, and 3.\n  */\nconst getOddCollatz = (n) => {\n  const reTURNedList = [1, 5, 2, 4, 3];\n  const reTURNedListSorted = reTURNedList.sort((a, b) => a - b);\n  const reTURNedListSorted = reTURNedListSorted.reverse();\n  const reTURNedListSorted = reTURNedListSorted.slice(0, n);\n  return reTURNedListSorted;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The even numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 2, 4, 3] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the even numbers are 1, 5, 2, 4, and 3.\n", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LeSS THAn 1 oR hIgher thAn 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAn 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAn 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAn 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LeSS THAn 1 oR hIgher thAn 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAn 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAn 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAn 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateObj = new Date(date);\n  const year = dateObj.getFullYear();\n  const month = dateObj.getMonth() + 1;\n  const day = dateObj.getDate();\n  const dateString = `${year}-${month}-${day}`;\n  const isValid = dateObj.getDate() >= 1 && dateObj.getDate() <= 31;\n  return isValid;\n};\n\n/*\n  You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LeSS THAN 1 oR hIgher thAN 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAN 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAN 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAN 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateObj = new Date(date);\n  const year = dateObj.getFullYear();\n  const month = dateObj.getMonth() + 1;\n  const day = dateObj.getDate();\n  const dateString = `${year}-${month}-${day}`;\n  const isValid = dateObj.getDate() >= 1 && dateObj.getDate() <= 31;\n  return isValid;\n};\n\n/*\n  You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LESS THAN 1 oR hIgher thAN 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAN 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAN 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAN 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateObj = new Date(date);\n  const year = dateObj.getFullYear();\n  const month = dateObj.getMonth() + 1;\n  const day = dateObj.getDate();\n  const dateString = `${year}-${month}-${day}`;\n  const isValid = dateObj.getDate() >= 1 && dateObj.getDate() <= 31;\n  return isValid;\n};\n\n/*\n  You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LESS THAN 1 oR hIgher thAN 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAN 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAN 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAN 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateObj = new Date(date);\n  const year = dateObj.getFullYear();\n  const month = dateObj.getMonth() + 1;\n  const day = dateObj.getDate();\n  const dateString = `${year}-${month", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* GiVEn a sTrinG of words, return A list OF wOrds sPLIT on wHitespace, iF no whitespaces exiSTs in ThE tExt you\n  sHOuld SpliT oN cOMmAs ',' iF No coMmAs ExIsTS yOU shOuLD return The NUMber of lowEr-CAse LettErS wiTh ODD ORder in thE\n  aLphabEt, oRD('a') = 0, OrD('B') = 1, ... ORD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn a sTrinG of words, return A list OF wOrds sPLIT on wHitespace, iF no whitespaces exiSTs in ThE tExt you\n  sHOuld SpliT oN cOMmAs ',' iF No coMmAs ExIsTS yOU shOuLD return The NUMber of lowEr-CAse LettErS wiTh ODD ORder in thE\n  aLphabEt, oRD('a') = 0, OrD('B') = 1,... ORD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(/\\s+/);\n  let ret = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = words.length;\n  let w;\n  let ws;\n  let w;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;\n  let ws;", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.every((el, index) => index < sorted.length - 1);\n};\n\n/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAN 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.every((el, index) => index >= 0);\n};\n\n/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAN 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.every((el, index) => index >= 0 && index < sorted.length);\n};\n\n/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAN 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.every((el, index) => index >= 0 && index < sorted.length - 1 && el >= 0);\n};\n\n/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAN 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.every((el, index) => index >= 0 && index < sorted.length - 1 && el >= 0 && el < sorted.length);\n};\n\n/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAN 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.every((el, index) => index >= 0 && index < sorted.length - 1 && el >= 0 && el < sorted.length - 1 && el >= 0 && el < sorted.length);\n};\n\n/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAN 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  is", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You ARe giVen tWo intervALS,\n  wHere eACH InteRval is a paiR of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen tWo intervALS,\n  wHere eACH InteRval is a paiR of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let start2 = interval2[0];\n  let end1 = interval1[1];\n  let end2 = interval2[1];\n  let intersection = [];\n  let length1 = end1 - start1;\n  let length2 = end2 - start2;\n  let isPrime = true;\n  for (let i = start1; i <= end1; i++) {\n    for (let j = start2; j >= end2; j--) {\n      if (i!== j) {\n        if (i === start1 && j === start2) {\n          continue;\n        }\n        if (i === start1 && j === end2) {\n          continue;\n        }\n        if (i === end1 && j === start2) {\n          continue;\n        }\n        if (i === end1 && j === end2) {\n          continue;\n        }\n        if (i === start2 && j === start1) {\n          continue;\n        }\n        if (i === start2 && j === end1) {\n          continue;\n        }\n        if (i === end2 && j === start1) {\n          continue;\n        }\n        if (i === end2 && j === end1) {\n          continue;\n        }\n        if (i === start1 && j === end2) {\n          continue;\n        }\n        if (i === start1 && j === start2) {\n          continue;\n        }\n        if (i === end1 && j === end2) {\n          continue;\n        }\n        if (i === end1 && j === start2) {\n          continue;\n        }\n        if (i === start2 && j === end1) {\n          continue;\n        }\n        if (i === start2 && j === start1) {\n          continue;\n        }\n        if (i === end2 && j === end1) {\n          continue;\n        }\n        if (i === start1 && j === end2) {\n          continue;\n        }\n        if (i === start1 && j === start2) {\n          continue;\n        }\n        if (i === end1 && j === end2) {\n          continue;\n        }\n        if (i === end1 && j === start2) {\n          continue;\n        }\n        if (i === start2 && j === end1) {\n          continue;\n        }\n        if (i === start2 && j === start1) {\n          continue;\n        }\n        if (i === end2 && j === end1) {\n          continue;\n        }\n        if (i === end2 && j === start1) {\n          continue;\n        }\n        if (i === start1 && j === end2) {\n          continue;\n        }\n        if (i === start1 && j === start2) {\n          continue;\n        }\n        if (i === end1 && j === end2) {\n          continue;\n        }\n        if (i === end1 && j === start2) {\n          continue;\n        }\n        if (i === start2 && j === end1) {\n          continue;\n        }\n        if (i === start2 && j === start1) {\n          continue;\n        }\n        if (i === end2 && j === end1) {\n          continue;\n        }\n        if (i === end2 && j === start1) {\n          continue;\n        }\n        if (i === start1 && j === end2) {\n          continue;\n        }\n        if (i === start1 && j === start2) {\n          continue;\n        }\n        if (i === end1 && j === end2) {\n          continue;\n        }\n        if (i === end1 && j === start2) {\n          continue;\n        }\n        if (i === start2 && j === end1) {\n          continue;\n        }\n        if (i === start2 && j === start1) {\n          continue;\n        }\n        if (i === end2 && j === end1) {\n          continue;\n        }\n        if (i === end2 && j === start1) {\n          continue;\n        }\n      }\n      intersection.push(i);\n    }\n  }\n  if (intersection.length === 1) {\n    return \"YES\";\n  }\n  if (intersection.length === 2) {\n    return \"NO\";\n  }\n  if (intersection.length === 3) {\n    return \"NO\";\n  }\n  if (intersection.length === 4) {\n    return \"NO\";\n  }\n  if (intersection.length === 5) {\n    return \"NO\";\n  }\n  if (intersection.length === 6) {\n    return \"NO\";\n  }\n  if (intersection.length === 7) {\n    return \"NO\";\n  }\n  if (intersection.length === 8) {\n    return \"NO\";\n  }\n  if (intersection.length === 9) {\n    return \"NO\";\n  }\n  if (intersection.length === 10) {\n    return \"NO\";\n  }\n  if (intersection.length === 11) {\n    return \"NO\";\n  }\n  if (intersection.length === 12) {\n    return \"NO\";\n  }\n  if (intersection.length === 13) {\n    return \"NO\";\n  }\n  if (intersection.length === 14) {\n    return \"NO\";\n  }\n  if (intersection.length === 15) {\n    return \"NO\";\n  }\n  if (intersection.length === 16) {\n    return \"NO\";\n  }\n  if (intersection.length === 17) {\n    return \"NO\";\n  }\n  if (intersection.length === 18) {\n    return \"NO\";\n  }\n  if (intersection.length === 19) {\n    return \"NO\";\n  }\n  if (intersection.length === 20) {\n    return \"NO\";\n  }\n  if (intersection.length === 21) {\n    return \"NO\";\n  }\n  if (intersection.length === 22) {\n    return \"NO\";\n  }\n  if (intersection.length === 23) {\n    return \"NO\";\n  }\n  if (intersection.length === 24) {\n    return \"NO\";\n  }\n  if (intersection.length === 25) {\n    return \"NO\";\n  }\n  if (intersection.length === 26) {\n    return \"NO\";\n  }\n  if (intersection.length === 27) {\n    return \"NO\";\n  }\n  if (intersection.length === 28) {\n    return \"NO\";\n  }\n  if (intersection.length === 29) {\n    return \"NO\";\n  }\n  if (intersection.length === 30) {\n    return \"NO\";\n  }\n  if (intersection.length === 31) {\n    return \"NO\";\n  }\n  if (intersection.length === 32) {\n    return \"NO\";\n  }\n  if (intersection.length === 33) {\n    return \"NO\";\n  }\n  if (intersection.length === 34) {\n    return \"NO\";\n  }\n  if (intersection.length === 35) {\n    return \"NO\";\n  }\n  if (intersection.length === 36) {\n    return \"NO\";\n  }\n  if (intersection.length === 37) {\n    return \"NO\";\n  }\n  if (intersection.length === 38) {\n    return \"NO\";\n  }\n  if (intersection.length === 39) {\n    return \"NO\";\n  }\n  if (intersection.length === 40) {\n    return \"NO\";\n  }\n  if (intersection.length === 41) {\n    return \"NO\";\n  }\n  if (intersection.length === 42) {\n    return \"NO\";\n  }\n  if (intersection.length === 43) {\n    return \"NO\";\n  }\n  if (intersection.length === 44) {\n    return \"NO\";\n  }\n  if (intersection.length === 45) {\n    return \"NO\";\n  }\n  if (intersection.length === 46) {\n    return \"NO\";\n  }\n  if (intersection.length === 47) {\n    return \"NO\";\n  }\n  if (intersection.length === 48) {\n    return \"NO\";\n  }\n  if (intersection.length === 49) {\n    return \"NO\";\n  }\n  if (intersection.length === 50) {\n    return \"NO\";\n  }\n  if (intersection.length === 51) {\n    return \"NO\";\n  }\n  if (intersection.length === 52) {\n    return \"NO\";\n  }\n  if (intersection.length === 53) {\n    return \"NO\";\n  }\n  if (intersection.length === 54) {\n    return \"NO\";\n  }", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let arrLen = arr.length;\n  let arrLen2 = arrLen * arrLen;\n  let arrLen3 = arrLen2 * arrLen;\n  let arrLen4 = arrLen3 * arrLen;\n  let arrLen5 = arrLen4 * arrLen;\n  let arrLen6 = arrLen5 * arrLen;\n  let arrLen7 = arrLen6 * arrLen;\n  let arrLen8 = arrLen7 * arrLen;\n  let arrLen9 = arrLen8 * arrLen;\n  let arrLen10 = arrLen9 * arrLen;\n  let arrLen11 = arrLen10 * arrLen;\n  let arrLen12 = arrLen11 * arrLen;\n  let arrLen13 = arrLen12 * arrLen;\n  let arrLen14 = arrLen13 * arrLen;\n  let arrLen15 = arrLen14 * arrLen;\n  let arrLen16 = arrLen15 * arrLen;\n  let arrLen17 = arrLen16 * arrLen;\n  let arrLen18 = arrLen17 * arrLen;\n  let arrLen19 = arrLen18 * arrLen;\n  let arrLen20 = arrLen19 * arrLen;\n  let arrLen21 = arrLen20 * arrLen;\n  let arrLen22 = arrLen21 * arrLen;\n  let arrLen23 = arrLen22 * arrLen;\n  let arrLen24 = arrLen23 * arrLen;\n  let arrLen25 = arrLen24 * arrLen;\n  let arrLen26 = arrLen25 * arrLen;\n  let arrLen27 = arrLen26 * arrLen;\n  let arrLen28 = arrLen27 * arrLen;\n  let arrLen29 = arrLen28 * arrLen;\n  let arrLen30 = arrLen29 * arrLen;\n  let arrLen31 = arrLen30 * arrLen;\n  let arrLen32 = arrLen31 * arrLen;\n  let arrLen33 = arrLen32 * arrLen;\n  let arrLen34 = arrLen33 * arrLen;\n  let arrLen35 = arrLen34 * arrLen;\n  let arrLen36 = arrLen35 * arrLen;\n  let arrLen37 = arrLen36 * arrLen;\n  let arrLen38 = arrLen37 * arrLen;\n  let arrLen39 = arrLen38 * arrLen;\n  let arrLen40 = arrLen39 * arrLen;\n  let arrLen41 = arrLen40 * arrLen;\n  let arrLen42 = arrLen41 * arrLen;\n  let arrLen43 = arrLen42 * arrLen;\n  let arrLen44 = arrLen43 * arrLen;\n  let arrLen45 = arrLen44 * arrLen;\n  let arrLen46 = arrLen45 * arrLen;\n  let arrLen47 = arrLen46 * arrLen;\n  let arrLen48 = arrLen47 * arrLen;\n  let arrLen49 = arrLen48 * arrLen;\n  let arrLen50 = arrLen49 * arrLen;\n  let arrLen51 = arrLen50 * arrLen;\n  let arrLen52 = arrLen51 * arrLen;\n  let arrLen53 = arrLen52 * arrLen;\n  let arrLen54 = arrLen53 * arrLen;\n  let arrLen55 = arrLen54 * arrLen;\n  let arrLen56 = arrLen55 * arrLen;\n  let arrLen57 = arrLen56 * arrLen;\n  let arrLen58 = arrLen57 * arrLen;\n  let arrLen59 = arrLen58 * arrLen;\n  let arrLen60 = arrLen59 * arrLen;\n  let arrLen61 = arrLen60 * arrLen;\n  let arrLen62 = arrLen61 * arrLen;\n  let arrLen63 = arrLen62 * arrLen;\n  let arrLen64 = arrLen63 * arrLen;\n  let arrLen65 = arrLen64 * arrLen;\n  let arrLen66 = arrLen65 * arrLen;\n  let arrLen67 = arrLen66 * arrLen;\n  let arrLen68 = arrLen67 * arrLen;\n  let arrLen69 = arrLen68 * arrLen;\n  let arrLen70 = arrLen69 * arrLen;\n  let arrLen71 = arrLen70 * arrLen;\n  let arrLen72 = arrLen71 * arrLen;\n  let arrLen73 = arrLen72 * arrLen;\n  let arrLen74 = arrLen73 * arrLen;\n  let arrLen75 = arrLen74 * arrLen;\n  let arrLen76 = arrLen75 * arrLen;\n  let arrLen77 = arrLen76 * arrLen;\n  let arrLen78 = arrLen77 * arrLen;\n  let arrLen79 = arrLen78 * arrLen;\n  let arrLen80 = arrLen79 * arrLen;\n  let arrLen81 = arrLen80 * arrLen;\n  let arrLen82 = arrLen81 * arrLen;\n  let arrLen83 = arrLen82 * arrLen;\n  let arrLen84 = arrLen83 * arrLen;\n  let arrLen85 = arrLen84 * arrLen;\n  let arrLen86 = arrLen85 * arrLen;\n  let arrLen87 = arrLen86 * arrLen;\n  let arrLen88 = arrLen87 * arrLen;\n  let arrLen89 = arrLen88 * arrLen;\n  let arrLen90 = arrLen89 * arrLen;\n  let arrLen91 = arrLen90 * arrLen;\n  let arrLen92 = arrLen91 * arrLen;\n  let arrLen93 = arrLen92 * arrLen;\n  let arrLen94 = arrLen93 * arrLen;\n  let arrLen95 = arrLen94 * arrLen;\n  let arrLen96 = arrLen95 * arrLen;\n  let arrLen97 = arrLen96 * arrLen;\n  let arrLen98 = arrLen97 * arrLen;\n  let arrLen99 = arrLen98 * arrLen;\n  let arrLen100 = arrLen99 * arrLen;\n  let arrLen101 = arrLen100 * arrLen;\n  let arrLen102 = arrLen101 * arrLen;\n  let arrLen103 = arrLen102 * arrLen;\n  let arrLen104 = arrLen103 * arrLen;\n  let arrLen105 = arrLen104 * arrLen;\n  let arrLen106 = arrLen105 * arrLen;\n  let arrLen107 = arrLen106 * arrLen;\n  let ", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  GiVEn a grid wIth N Rows and N COLuMns (N >= 2) aND A PosiTive integeR k, \n  each cell of the grid conTAiNs A vAlue. EveRY intEger in ThE rANgE [1, N * N]\n  INcluSiVe ApPeARs EXacTlY ONce ON The cells oF tHE grid.\n\n  YoU havE tO fiNd THE MInimum PaTh of lEngTH k in tHe grid. yOU CAn sTaRt\n  from aNy cELl, and in eAch StEP yoU can MoVE to AnY of the NEIghboR cells,\n  in otHer wordS, YoU can go To cElLS whiCH Share An edGe wIth you cuRrEnt\n  Cell.\n  PleasE note That a pAth of lEngth k mEanS viSiTinG exAcTLy k cells (NOt\n  NEcEssarilY DisTInct).\n  You CaNNOT Go Off the grid.\n  a path A (oF LeNGtH k) is cONsIdEred leSS THan a pAth B (oF length k) if\n  aftEr makIng thE oRDered lisTs oF tHE vALUEs ON THe CelLS thaT A aNd B go\n  thrOugh (let's calL ThEm lsT_a aND lST_B), Lst_a iS leXiCOgraphIcALLY LEss\n  than lST_B, in oThEr words, tHerE exiSt AN integeR indeX i (1 <= i <= k)\n  SUch That lST_A[i] < Lst_B[i] and FoR aNY j (1 <= j < i) we haVe\n  lst_A[J] = lST_B[J].\n  It IS guArantEEd THaT THE aNsweR iS UniQue.\n  RetuRN an OrdereD list OF tHe values ON thE ceLls tHat the mINiMUM path Go ThrOUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a grid wIth N Rows and N COLuMns (N >= 2) aND A PosiTive integeR k, \n  each cell of the grid conTAiNs A vAlue. EveRY intEger in ThE rANgE [1, N * N]\n  INcluSiVe ApPeARs EXacTlY ONce ON The cells oF tHE grid.\n\n  YoU havE tO fiNd THE MInimum PaTh of lEngTH k in tHe grid. yOU CAn sTaRt\n  from aNy cELl, and in eAch StEP yoU can MoVE to AnY of the NEIghboR cells,\n  in otHer wordS, YoU can go To cElLS whiCH Share An edGe wIth you cuRrEnt\n  Cell.\n  PleasE note That a pAth of lEngth k mEanS viSiTinG exAcTLy k cells (NOt\n  NEcEssarilY DisTInct).\n  You CaNNOT Go Off the grid.\n  a path A (oF LeNGtH k) is cONsIdEred leSS THan a pAth B (oF length k) if\n  aftEr makIng thE oRDered lisTs oF tHE vALUEs ON THe CelLS thaT A aNd B go\n  thrOugh (let's calL ThEm lsT_a aND lST_B), Lst_a iS leXiCOgraphIcALLY LEss\n  than lST_B, in oThEr words, tHerE exiSt AN integeR indeX i (1 <= i <= k)\n  SUch That lST_A[i] < Lst_B[i] and FoR aNY j (1 <= j < i) we haVe\n  lst_A[J] = lST_B[J].\n  It IS guArantEEd THaT THE aNsweR iS UniQue.\n  RetuRN an OrdereD list OF tHe values ON thE ceLls tHat the mINiMUM path Go ThrOUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const { length, rows } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(a, b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the greatest common divisor of 2 numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return ", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a positive integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Even digits.\n  Return 0 iF all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Even digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Even digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Even digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Even digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Even digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Even digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += n % 2;\n    n /= 2;\n  }\n  return result;\n};\n\n/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Even digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  ", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const re = /\\[([[]|[]\\])\\]/g;\n  const match = re.exec(string);\n  return match!== null;\n};\n\n/*\n  CrEAte a FuncTion that TAKES a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const re = /\\[([[]|[]\\])\\]/g;\n  const match = re.exec(string);\n  return match!== null;\n};\n\n/*\n  CrEAte a FuncTion that TAKES a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const re = /\\[([[]|[]\\])\\]/g;\n  const match = re.exec(string);\n  return match!== null;\n};\n\n/*\n  CrEAte a FuncTion that TAKES a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const re = /\\[([[]|[]\\])\\]/g;\n  const match = re.exec(string);\n  return match!== null;\n};\n\n/*\n  CrEAte a FuncTion that TAKES a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const re = /\\[([[]|[]\\])\\]/g;\n  const match = re.exec(string);\n  return match!== null;\n};\n\n/*\n  CrEAte a FuncTion that TAKES a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const re = /\\[([[]|[]\\])\\]/g;\n  const match = re.exec(string);\n  return match!== null;\n};\n\n/*\n  CrEAte a FuncTion that TAKES a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') �", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given ", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '&' && lastChar!== '(' && lastChar!== ')' && lastChar!== '[' && lastChar!== ']' && lastChar!== '{' && lastChar!== '}';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '&' && lastChar!== '(' && lastChar!== ')' && lastChar!== '[' && lastChar!== ']' && lastChar!== '{' && lastChar!== '}';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '&' && lastChar!== '(' && lastChar!== ')' && lastChar!== '[' && lastChar!== ']' && lastChar!== '{' && lastChar!== '}';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '&' && lastChar!== '(' && lastChar!== ')' && lastChar!== '[' && lastChar!== ']' && lastChar!== '{' && lastChar!== '}';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '&' && lastChar!== '(' && lastChar!== ')' && lastChar!== '[' && lastChar!== ']' && lastChar!== '{' && lastChar!== '}';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple ", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let retVal = -1\n  let i\n  let len\n  let arrLen\n  let arrLen2\n  let arrLen3\n  let arrLen4\n  let arrLen5\n  let arrLen6\n  let arrLen7\n  let arrLen8\n  let arrLen9\n  let arrLen10\n  let arrLen11\n  let arrLen12\n  let arrLen13\n  let arrLen14\n  let arrLen15\n  let arrLen16\n  let arrLen17\n  let arrLen18\n  let arrLen19\n  let arrLen20\n  let arrLen21\n  let arrLen22\n  let arrLen23\n  let arrLen24\n  let arrLen25\n  let arrLen26\n  let arrLen27\n  let arrLen28\n  let arrLen29\n  let arrLen30\n  let arrLen31\n  let arrLen32\n  let arrLen33\n  let arrLen34\n  let arrLen35\n  let arrLen36\n  let arrLen37\n  let arrLen38\n  let arrLen39\n  let arrLen40\n  let arrLen41\n  let arrLen42\n  let arrLen43\n  let arrLen44\n  let arrLen45\n  let arrLen46\n  let arrLen47\n  let arrLen48\n  let arrLen49\n  let arrLen50\n  let arrLen51\n  let arrLen52\n  let arrLen53\n  let arrLen54\n  let arrLen55\n  let arrLen56\n  let arrLen57\n  let arrLen58\n  let arrLen59\n  let arrLen60\n  let arrLen61\n  let arrLen62\n  let arrLen63\n  let arrLen64\n  let arrLen65\n  let arrLen66\n  let arrLen67\n  let arrLen68\n  let arrLen69\n  let arrLen70\n  let arrLen71\n  let arrLen72\n  let arrLen73\n  let arrLen74\n  let arrLen75\n  let arrLen76\n  let arrLen77\n  let arrLen78\n  let arrLen79\n  let arrLen80\n  let arrLen81\n  let arrLen82\n  let arrLen83\n  let arrLen84\n  let arrLen85\n  let arrLen86\n  let arrLen87\n  let arrLen88\n  let arrLen89\n  let arrLen90\n  let arrLen91\n  let arrLen92\n  let arrLen93\n  let arrLen94\n  let arrLen95\n  let arrLen96\n  let arrLen97\n  let arrLen98\n  let arrLen99\n  let arrLen100\n  let arrLen101\n  let arrLen102\n  let arrLen103\n  let arrLen104\n  let arrLen105\n  let arrLen106\n  let arrLen107\n  let arrLen108\n  let arrLen109\n  let arrLen110\n  let arrLen111\n  let arrLen112\n  let arrLen113\n  let arrLen114\n  let arrLen115\n  let arrLen116\n  let arrLen117\n  let arrLen118\n  let arrLen119\n  let arrLen120\n  let arrLen121\n  let arrLen122\n  let arrLen123\n  let arrLen124\n  let arrLen125\n  let arrLen126\n  let arrLen127\n  let arrLen128\n  let arrLen129\n  let arrLen130\n  let arrLen131\n  let arrLen132\n  let arrLen133\n  let arrLen134\n  let arrLen135\n  let arrLen136\n  let arrLen137\n  let arrLen138\n  let arrLen139\n  let arrLen140\n  let arrLen141\n  let arrLen142\n  let arrLen143\n  let arrLen144\n  let arrLen145\n  let arrLen146\n  let arrLen147\n  let arrLen148\n  let arrLen149\n  let arrLen150\n  let arrLen151\n  let arrLen152\n  let arrLen153\n  let arrLen154\n  let arrLen155\n  let arrLen156\n  let arrLen157\n  let arrLen158\n  let arrLen159\n  let arrLen160\n  let arrLen161\n  let arrLen162\n  let arrLen163\n  let arrLen164\n  let arrLen165\n  let arrLen166\n  let arrLen167\n  let arrLen168\n  let arrLen169\n  let arrLen170\n  let arrLen171\n  let arrLen172\n  let arrLen173\n  let arrLen174\n  let arrLen175\n  let arrLen176\n  let arrLen177\n  let arrLen178\n  let arrLen179\n  let arrLen180\n  let arrLen181\n  let arrLen182\n  let arrLen183\n  let arrLen184\n  let arrLen185\n  let arrLen186\n  let arrLen187\n  let arrLen188\n  let arrLen189\n  let arrLen190\n  let arrLen191\n  let arrLen192\n  let arrLen193\n  let arrLen194\n  let arrLen195\n  let arrLen196\n  let arrLen197\n  let arrLen198\n  let arrLen199\n  let arrLen200\n  let arrLen201\n  let arrLen202\n  let arrLen203\n  let arrLen204\n  let arrLen205\n  let arrLen206\n  let arrLen207\n  let arrLen208\n  let arrLen209\n  let arrLen210\n  let arrLen211\n  let arrLen212\n  let arrLen213\n  let arrLen214\n  let arrLen215\n  let arrLen216\n  let arrLen217\n  let arrLen218\n  let arrLen219\n  let arrLen220\n  let arrLen221\n  let arrLen222\n  let arrLen223\n  let arrLen224\n  let arrLen225\n  let arrLen226\n  let arrLen227\n  let arrLen228\n  let arrLen229\n  let arrLen230\n  let arrLen231\n  let arrLen232\n  let arrLen233\n  let arrLen234\n  let arrLen235\n  let arrLen236\n  let arrLen237\n  let arrLen238\n  let arrLen239\n  let arrLen240\n  let arrLen241\n  let arrLen242\n  let arrLen243\n  let arrLen244\n  let arrLen245\n  let arrLen246\n  let arrLen247\n  let arrLen248\n  let arrLen249\n  let arrLen250\n  let arrLen251\n  let arrLen252\n  let arrLen253\n  let arrLen254\n  let arrLen255\n  let arrLen256\n  let arrLen257\n  let arrLen258\n  let arrLen259\n  let arrLen260\n  let arrLen261\n  let arrLen262\n  let arrLen263\n  let arrLen264\n  let arrLen265\n  let arrLen266\n  let arrLen267\n  let arrLen268\n  let arrLen269\n  let arr", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const nEgative = lst.length\n  const posItivE = 0\n  const iNtEGeRs = lst.length\n  const anD = null\n  const thEm = null\n  const nuLl = null\n  const fUnctIon = (nEgative, posItivE, iNtEGeRs, anD, thEm, nuLl) => {\n    if (nEgative <= posItivE) {\n      nuLl = null\n      return\n    }\n    const iNtEGeRsI = iNtEGeRs - posItivE\n    const anDI = anD + posItivE\n    const thEmI = thEm + posItivE\n    if (iNtEGeRsI > 0) {\n      nuLl = largestSmallestIntegers(\n        lst.slice(posItivE, iNtEGeRsI).concat(\n          lst.slice(iNtEGeRsI, anDI).concat(\n            lst.slice(anDI, anD + iNtEGeRsI).concat(\n              lst.slice(anD + iNtEGeRsI, anDI + iNtEGeRsI).concat(\n                lst.slice(anD + anDI + iNtEGeRsI, anD + anDI + iNtEGeRsI).concat(\n                  lst.slice(anD + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + iNtEGeRsI).concat(\n                    lst.slice(anD + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + iNtEGeRsI).concat(\n                      lst.slice(anD + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                        lst.slice(anD + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                          lst.slice(anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                            lst.slice(anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                              lst.slice(anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                                lst.slice(anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                                  lst.slice(anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                                    lst.slice(anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                                      lst.slice(anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                                        lst.slice(anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                                          lst.slice(anD + anDI + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                                            lst.slice(anD + anDI + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                                              lst.slice(anD + anDI + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                                                lst.slice(anD + anDI + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI, anD + anDI + anDI + anDI + anDI + anDI + iNtEGeRsI).concat(\n                                                  lst.slice(anD + anDI + anDI + anDI + ", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE . oR ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ NulL\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ NulL\n  */\nconSt compareOne = (a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return NaN\n  }\n  return aNum - bNum\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareTwo(1, 2.5) ➞ 2\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ NulL\n  */\nconSt compareTwo = (a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return NaN\n  }\n  return aNum - bNum\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareThree(1, 2.5) ➞ 3\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ NulL\n  */\nconSt compareThree = (a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return NaN\n  }\n  return aNum - bNum\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareFour(1, 2.5) ➞ 4\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ NulL\n  */\nconSt compareFour = (a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return NaN\n  }\n  return aNum - bNum\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareFive(1, 2.5) ➞ 5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ NulL\n  */\nconSt compareFive = (a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return NaN\n  }\n  return aNum - bNum\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareSix(1, 2.5) ➞ 6\n  compareSix(1, \"2,3\") ➞ \"2,3\"\n  compareSix(\"5,1\", \"6\") ➞ \"6\"\n  compareSix(\"1\", 1) ➞ NulL\n  */\nconSt compareSix = (a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return NaN\n  }\n  return aNum - bNum\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  ", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 negIVe EvEn Numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 negIVe EvEn Numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 positIVe EvEn Numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 negIVe EvEn Numbers\n  Example\n  isEqualToSumOddOdd(-4) == false\n  isEqualToSumOddOdd(-6) == false\n  isEqualToSumOddOdd(-8) == true\n  */\nconst isEqualToSumEvenEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 negIVe EvEn Numbers\n  Example\n  isEqualToSumEvenEvenOdd(-4) == false\n  isEqualToSumEvenEvenOdd(-6) == false\n  isEqualToSumEvenEvenOdd(-8) == true\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 negIVe EvEn Numbers\n  Example\n  isEqualToSumOddEvenEvenOdd(-4) == false\n  isEqualToSumOddEvenEvenOdd(-6) == false\n  isEqualToSumOddEvenEvenOdd(-8) == true\n  */\nconst isEqualToSumEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 negIVe EvEn Numbers\n  Example\n  isEqualToSumEvenEvenEvenOdd(-4) == false\n  isEqualToSumEvenEvenEvenOdd(-6) == false\n  isEqualToSumEvenEvenEvenOdd(-8) == true\n  */\nconst isEqualToSumOddOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 negIVe EvEn Numbers\n  Example\n  isEqualToSumOddOddEvenOdd(-4) == false\n  isEqualToSumOddOddEvenEvenOdd(-6) == false\n  isEqualToSumOddOddEvenEvenOdd(-8) == true\n  */\nconst isEqualToSumEvenOddOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 negIVe EvEn Numbers\n  Example\n  isEqualToSumEvenOddOddEvenOdd(-4) == false\n  isEqualToSumEvenOddOddEvenOdd(-6) == false\n  isEqualToSumEvenOddOddEvenOdd(-8) == true\n  */\nconst isEqualToSumOddOddOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 negIVe EvEn Numbers\n  Example\n  isEqualToSumEvenOddOddEvenOdd(-4) == false\n  isEqualToSumEvenOddOddEvenEvenOdd(-6) == false\n  isEqualToSumEvenOddOddEvenEvenOdd(-8) == true\n  */\nconst isEqualToSumEvenOddOddOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 negIVe EvEn Numbers\n  Example\n  isEqualToSumEvenOddOddOddEvenOdd(-4) == false\n  isEqualToSumEvenOddOddOddEvenOdd(-6) == false\n  isEqualToSumEvenOddOddEvenEvenOdd(-8) == true\n  */\nconst isEqualToSumOddOddOddOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  let m = 1;\n  let n = n;\n  while (l > 0) {\n    result *= l;\n    l -= 1;\n  }\n  while (m > 0) {\n    result *= m;\n    m -= 1;\n  }\n  while (n > 0) {\n    result *= n;\n    n -= 1;\n  }\n  while (i > 0) {\n    result *= i;\n    i -= 1;\n  }\n  while (j > 0) {\n    result *= j;\n    j -= 1;\n  }\n  while (k > 0) {\n    result *= k;\n    k -= 1;\n  }\n  return result;\n};\n\n/*\n  A function which returns the factorial of a number in base 10\n  \n  >>> factorial(10)\n  3628800\n  >>> factorial(100)\n  720\n  >>> factorial(1000)\n  5040\n  >>> factorial(10000)\n  5040\n  >>> factorial(100000)\n  5040\n  >>> factorial(1000000)\n  5040\n  >>> factorial(10000000)\n  5040\n  >>> factorial(100000000)\n  5040\n  >>> factorial(1000000000)\n  5040\n  >>> factorial(10000000000)\n  5040\n  >>> factorial(100000000000)\n  5040\n  >>> factorial(1000000000000)\n  5040\n  >>> factorial(10000000000000)\n  5040\n  >>> factorial(100000000000000)\n  5040\n  >>> factorial(1000000000000000)\n  5040\n  >>> factorial(10000000000000000)\n  5040\n  >>> factorial(100000000000000000)\n  5040\n  >>> factorial(1000000000000000000)\n  5040\n  >>> factorial(100000000000000000000)\n  5040\n  >>> factorial(100000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(10000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000)\n  5040\n  >>> factorial(100000000000000000000000000000000000000000000000000", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes8 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes9 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes10 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes11 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes12 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes13 = (string, prefixes) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string[index];\n    if (char ==='') {\n      prefixes.push(string.slice(index, index + 1));\n      index += 1;\n    } else {\n      prefixes.push(char);\n    }\n  }", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = /[ \\t]+/g;\n  let newTextSpaces = newText.replace(spaces, \" \");\n  return newTextSpaces;\n}\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = /[ \\t]+/g;\n  let newTextSpaces = newText.replace(spaces, \" \");\n  return newTextSpaces;\n}\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = /[ \\t]+/g;\n  let newTextSpaces = newText.replace(spaces, \" \");\n  return newTextSpaces;\n}\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = /[ \\t]+/g;\n  let newTextSpaces = newText.replace(spaces, \" \");\n  return newTextSpaces;\n}\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = /[ \\t]+/g;\n  let newTextSpaces = newText.replace(spaces, \" \");\n  return newTextSpaces;\n}\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = /[ \\t]+/g;\n  let newTextSpaces = newText.replace(spaces, \" \");\n  return newTextSpaces;\n}\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = /[ \\t]+/g;\n  let newTextSpaces = newText.replace(spaces, \" \");\n  return newTextSpaces;\n}\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = /[ \\t]+/g;\n  let newTextSpaces = newText.replace(spaces, \" \");\n  return newTextSpaces;\n}\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*CreATe a fuNctiOn which tAKEs a StrinG REPresEnting a file'S name, and returns\n  'YeS' If ThE tHe file's NAme iS valId, AnD ReTurNS 'No' oThErWiSe.\n  a FiLE's nAmE IS coNSIdered to bE vALid If anD oNly If ALL THe follOwIng coNdiTIoNs \n  ARE MEt:\n  - THeRe shoulD noT Be more ThaN tHRee DigiTs ('0'-'9') in THe fIlE's name.\n  - tHE file'S name conTains exACtLy one dOt '.'\n  - THe SUbstRINg befOre tHe dOt should NoT be Empty, and iT starTs with a Letter From \n  thE laTin AlPhaPet ('a'-'z' AnD 'a'-'Z').\n  - The suBStRInG after tHE doT Should be One of ThEse: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CreATe a fuNctiOn which tAKEs a StrinG REPresEnting a file'S name, and returns\n  'YeS' If ThE tHe file's NAme iS valId, AnD ReTurNS 'No' oThErWiSe.\n  a FiLE's nAmE IS coNSIdered to bE vALid If anD oNly If ALL THe follOwIng coNdiTIoNs \n  ARE MEt:\n  - THeRe shoulD noT Be more ThaN tHRee DigiTs ('0'-'9') in THe fIlE's name.\n  - tHE file'S name conTains exACtLy one dOt '.'\n  - THe SUbstRINg befOre tHe dOt should NoT be Empty, and iT starTs with a Letter From \n  thE laTin AlPhaPet ('a'-'z' AnD 'a'-'Z').\n  - The suBStRInG after tHE doT Should be One of ThEse: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.trim();\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/[^a-zA-Z0-9_\\.]/g, '');\n  const file_name = file_name.replace(/", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\"\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfPowers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfPowersOf2 = (lst, power) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], power);\n  }\n  return sum;\n};\n\n/*\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfPowersOf3 = (lst, power) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], power);\n  }\n  return sum;\n};\n\n/*\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfPowersOf4 = (lst, power) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], power);\n  }\n", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length >= 1 && word.length <= 100) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInWords = (sentence) => {\n  const words = sentence.split(\" \");\n  const sentenceInWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length >= 1 && word.length <= 100) {\n      sentenceInWords.push(word);\n    }\n  }\n  return sentenceInWords;\n};\n\n/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const sentenceInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length >= 1 && word.length <= 100) {\n      sentenceInSentence.push(word);\n    }\n  }\n  return sentenceInSentence;\n};\n\n/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInWordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const sentenceInWordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length >= 1 && word.length <= 100) {\n      sentenceInWordsInSentence.push(word);\n    }\n  }\n  return sentenceInWordsInSentence;\n};\n\n/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInWordsInSentenceInWords = (sentence) => {\n  const words = sentence.split(\" \");\n  const sentenceInWordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length >= 1 && word.length <= 100) {\n      sentenceInWordsInSentence.push(word);\n    }\n  }\n  return sentenceInWordsInSentence;\n};\n\n/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInWordsInSentenceInWordsInWords = (sentence) => {\n  const words = sentence.split(\" \");\n  const sentenceInWordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length >= 1 && word", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*YouR Task Is to ImplemenT a FUnCtion THAT wilL simplify the expresSion\n  x * n. The function reTUrNs TrUe if x * n evaLUateS to a wHoLe NUmBer ANd faLsE\n  oThErWIsE. botH x aND n, Are STRing repreSeNTatIon oF a fRacTiON, AND have tHe FolloWinG FoRmAT,\n  <NUMerAtOr>/<denomInaTOr> wherE boTh NUmeRatoR aND deNoMinatoR ARe posItive whoLe numbeRS.\n\n  YOu can aSsuMe THat x, aND n Are vaLid fRacTions, and Do Not Have zero aS denoMinatoR.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fAlse\n  simplify(\"7/10\", \"10/2\") = faLse\n  */\nConSt simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YouR Task Is to ImplemenT a FUnCtion THAT wilL simplify the expresSion\n  x * n. The function reTUrNs TrUe if x * n evaLUateS to a wHoLe NUmBer ANd faLsE\n  oThErWIsE. botH x aND n, Are STRing repreSeNTatIon oF a fRacTiON, AND have tHe FolloWinG FoRmAT,\n  <NUMerAtOr>/<denomInaTOr> wherE boTh NUmeRatoR aND deNoMinatoR ARe posItive whoLe numbeRS.\n\n  YOu can aSsuMe THat x, aND n Are vaLid fRacTions, and Do Not Have zero aS denoMinatoR.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fAlse\n  simplify(\"7/10\", \"10/2\") = faLse\n  */\nConSt simplify = (x, n) => {\n  const re = /(\\d+)(\\D+)/;\n  const [, n, d] = re.exec(x);\n  const [, m, s] = n.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, d] = d.split(\"/\");\n  const [, m, s] = s.split(\"/\");\n  const [, m, ", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b);\n  return numsArr.map((num) => {\n    const [, num] = num.split(\"\");\n    return parseInt(num);\n  });\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsArr = nums.sort((a, b) => b - a);\n  return numsArr.map((num) => {\n    const [, num] = num.split(\"\");\n    return parseInt(num);\n  });\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDesc = (nums) => {\n  const numsArr = nums.sort((a, b) => b - a);\n  return numsArr.map((num) => {\n    const [, num] = num.split(\"\");\n    return parseInt(num);\n  });\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDesc = (nums) => {\n  const numsArr = nums.sort((a, b) => b - a);\n  return numsArr.map((num) => {\n    const [, num] = num.split(\"\");\n    return parseInt(num);\n  });\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDesc = (nums) => {\n  const numsArr = nums.sort((a, b) => b - a);\n  return numsArr.map((num) => {\n    const [, num] = num.split(\"\");\n    return parseInt(num);\n  });\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDescDesc = (nums) => {\n  const numsArr = nums.sort((a, b) => b - a);\n  return numsArr.map((num) => {\n    const [, num] = num.split(\"\");\n    return parseInt(num);\n  });\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDescDesc = (nums) => {\n  const numsArr = nums.sort((a, b) => b - a);\n  return numsArr.map((num) => {\n    const [, num] = num.split(\"\");\n    return parseInt(num);\n  });\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMpl", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*WriTE a fuNctiOn that taKES aN arraY OF NumbErs as input And returns \n  the numbER oF eLeMents in thE ArraY thaT aRe GReAteR Than 10 AnD bOtH \n  fIRsT And LaST DigITS of a numbeR aRE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a fuNctiOn that taKES aN arraY OF NumbErs as input And returns \n  the numbER oF eLeMents in thE ArraY thaT aRe GReAteR Than 10 AnD bOtH \n  fIRsT And LaST DigITS of a numbeR aRE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let numsArr = []\n  let numsArrLen = nums.length\n  let numsArrLen2 = numsArrLen\n  let numsArrLen3 = numsArrLen\n  let numsArrLen4 = numsArrLen\n  let numsArrLen5 = numsArrLen\n  let numsArrLen6 = numsArrLen\n  let numsArrLen7 = numsArrLen\n  let numsArrLen8 = numsArrLen\n  let numsArrLen9 = numsArrLen\n  let numsArrLen10 = numsArrLen\n  let numsArrLen11 = numsArrLen\n  let numsArrLen12 = numsArrLen\n  let numsArrLen13 = numsArrLen\n  let numsArrLen14 = numsArrLen\n  let numsArrLen15 = numsArrLen\n  let numsArrLen16 = numsArrLen\n  let numsArrLen17 = numsArrLen\n  let numsArrLen18 = numsArrLen\n  let numsArrLen19 = numsArrLen\n  let numsArrLen20 = numsArrLen\n  let numsArrLen21 = numsArrLen\n  let numsArrLen22 = numsArrLen\n  let numsArrLen23 = numsArrLen\n  let numsArrLen24 = numsArrLen\n  let numsArrLen25 = numsArrLen\n  let numsArrLen26 = numsArrLen\n  let numsArrLen27 = numsArrLen\n  let numsArrLen28 = numsArrLen\n  let numsArrLen29 = numsArrLen\n  let numsArrLen30 = numsArrLen\n  let numsArrLen31 = numsArrLen\n  let numsArrLen32 = numsArrLen\n  let numsArrLen33 = numsArrLen\n  let numsArrLen34 = numsArrLen\n  let numsArrLen35 = numsArrLen\n  let numsArrLen36 = numsArrLen\n  let numsArrLen37 = numsArrLen\n  let numsArrLen38 = numsArrLen\n  let numsArrLen39 = numsArrLen\n  let numsArrLen40 = numsArrLen\n  let numsArrLen41 = numsArrLen\n  let numsArrLen42 = numsArrLen\n  let numsArrLen43 = numsArrLen\n  let numsArrLen44 = numsArrLen\n  let numsArrLen45 = numsArrLen\n  let numsArrLen46 = numsArrLen\n  let numsArrLen47 = numsArrLen\n  let numsArrLen48 = numsArrLen\n  let numsArrLen49 = numsArrLen\n  let numsArrLen50 = numsArrLen\n  let numsArrLen51 = numsArrLen\n  let numsArrLen52 = numsArrLen\n  let numsArrLen53 = numsArrLen\n  let numsArrLen54 = numsArrLen\n  let numsArrLen55 = numsArrLen\n  let numsArrLen56 = numsArrLen\n  let numsArrLen57 = numsArrLen\n  let numsArrLen58 = numsArrLen\n  let numsArrLen59 = numsArrLen\n  let numsArrLen60 = numsArrLen\n  let numsArrLen61 = numsArrLen\n  let numsArrLen62 = numsArrLen\n  let numsArrLen63 = numsArrLen\n  let numsArrLen64 = numsArrLen\n  let numsArrLen65 = numsArrLen\n  let numsArrLen66 = numsArrLen\n  let numsArrLen67 = numsArrLen\n  let numsArrLen68 = numsArrLen\n  let numsArrLen69 = numsArrLen\n  let numsArrLen70 = numsArrLen\n  let numsArrLen71 = numsArrLen\n  let numsArrLen72 = numsArrLen\n  let numsArrLen73 = numsArrLen\n  let numsArrLen74 = numsArrLen\n  let numsArrLen75 = numsArrLen\n  let numsArrLen76 = numsArrLen\n  let numsArrLen77 = numsArrLen\n  let numsArrLen78 = numsArrLen\n  let numsArrLen79 = numsArrLen\n  let numsArrLen80 = numsArrLen\n  let numsArrLen81 = numsArrLen\n  let numsArrLen82 = numsArrLen\n  let numsArrLen83 = numsArrLen\n  let numsArrLen84 = numsArrLen\n  let numsArrLen85 = numsArrLen\n  let numsArrLen86 = numsArrLen\n  let numsArrLen87 = numsArrLen\n  let numsArrLen88 = numsArrLen\n  let numsArrLen89 = numsArrLen\n  let numsArrLen90 = numsArrLen\n  let numsArrLen91 = numsArrLen\n  let numsArrLen92 = numsArrLen\n  let numsArrLen93 = numsArrLen\n  let numsArrLen94 = numsArrLen\n  let numsArrLen95 = numsArrLen\n  let numsArrLen96 = numsArrLen\n  let numsArrLen97 = numsArrLen\n  let numsArrLen98 = numsArrLen\n  let numsArrLen99 = numsArrLen\n  let numsArrLen100 = numsArrLen\n  let numsArrLen101 = numsArrLen\n  let numsArrLen102 = numsArrLen\n  let numsArrLen103 = numsArrLen\n  let numsArrLen104 = numsArrLen\n  let numsArrLen105 = numsArrLen\n  let numsArrLen106 = numsArrLen\n  let numsArrLen107 = numsArrLen\n  let numsArrLen108 = numsArrLen\n  let numsArrLen109 = numsArrLen\n  let numsArrLen110 = numsArrLen\n  let numsArrLen111 = numsArrLen\n  let numsArrLen112 = numsArrLen\n  let numsArrLen113 = numsArrLen\n  let numsArrLen114 = numsArrLen\n  let numsArrLen115 = numsArrLen\n  let numsArrLen116 = numsArrLen\n  let numsArrLen117 = numsArrLen\n  let numsArrLen118 = numsArrLen\n", "passed": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  YoU Are gIven A positivE INtEger n. YOU HAve tO create an iNteger array a of lenGTh n.\n      foR eAch i (1 ≤ i ≤ n), the vALue oF a[i] = i * i - i + 1.\n      REtUrN ThE nuMBer oF tRiPlEs (A[I], a[J], A[k]) oF a WHEre i < j < k, \n  AND a[i] + a[j] + a[k] is A mULtiPle oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A positivE INtEger n. YOU HAve tO create an iNteger array a of lenGTh n.\n      foR eAch i (1 ≤ i ≤ n), the vALue oF a[i] = i * i - i + 1.\n      REtUrN ThE nuMBer oF tRiPlEs (A[I], a[J], A[k]) oF a WHEre i < j < k, \n  AND a[i] + a[j] + a[k] is A mULtiPle oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => 0);\n  for (let i = 0; i < n - 1; i++) {\n    a[i + 1] = a[i] + a[i + 1];\n  }\n  return a;\n};\n\n/**\n * Given a triple of integers [a, b], find the maximum sum of the triples.\n * \n * Example :\n * Input: a = [1, 3, 7, 13], b = [1, 7, 13]\n * Output: 13\n * Explanation: \n * a = [1, 3, 7, 13], b = [1, 7, 13] \n * 1 + 3 + 7 = 13\n * 1 + 7 + 13 = 13\n * 1 + 13 + 7 = 13\n * 1 + 13 + 13 = 13\n * 1 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 13 + 7 = 13\n * 1 + ", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* ThERe arE eigHt planetS in OUr Solar SYSTem: tHe closerst To the Sun\n  is Mercury, THe NeXt One is VeNUs, thEn EaRtH, MARs, jupITer, SAtUrN,\n  URaNUs, nEptUnE.\n  wRitE A Function tHaT TakEs twO pLanEt NAMES as strInGs planet1 and planet2.\n  the FUnCtION SHouLd return A tuple contaiNinG All plaNetS wHOse OrbiTs ARe\n  lOcAted beTWEen thE orbit of planet1 And the oRBiT of planet2, sorTed By\n  THe prOXImity To thE suN.\n  The funcTiOn sHould return an emPty tuple if planet1 Or planet2\n  are nOt corrEct plaNet NamEs.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ThERe arE eigHt planetS in OUr Solar SYSTem: tHe closerst To the Sun\n  is Mercury, THe NeXt One is VeNUs, thEn EaRtH, MARs, jupITer, SAtUrN,\n  URaNUs, nEptUnE.\n  wRitE A Function tHaT TakEs twO pLanEt NAMES as strInGs planet1 and planet2.\n  the FUnCtION SHouLd return A tuple contaiNinG All plaNetS wHOse OrbiTs ARe\n  lOcAted beTWEen thE orbit of planet1 And the oRBiT of planet2, sorTed By\n  THe prOXImity To thE suN.\n  The funcTiOn sHould return an emPty tuple if planet1 Or planet2\n  are nOt corrEct plaNet NamEs.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Name = planet1.toLowerCase();\n  const planet2Name = planet2.toLowerCase();\n  const planet1Names = planet1Name.split(\"-\");\n  const planet2Names = planet2Name.split(\"-\");\n  const planet1NamesLength = planet1Names.length;\n  const planet2NamesLength = planet2Names.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs aS a parameteR,\n  deletes the stringS ThAt HaVe odd leNGths From It,\n  AnD ReTurNS the ReSuLtEd list WItH A soRtED OrdER,\n  the list is alwaYs A list Of sTrinGs And NeVER AN array Of NumbeRs,\n  aND iT mAY CONtaIn DuplicaTes.\n  tHe ordeR of ThE list ShoUld bE aSCenDiNg by leNGTh of eAch word, aNd you\n  shOUlD return the list soRteD bY That RULe.\n  If tWo woRds Have the sAmE leNgth, sort tHe list alpHabetiCally.\n  THe funcTioN shOuLd return a list Of sTrINgs in sortED oRDeR.\n  You may ASsuME that all Words WiLl have The same LEnGTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs aS a parameteR,\n  deletes the stringS ThAt HaVe odd leNGths From It,\n  AnD ReTurNS the ReSuLtEd list WItH A soRtED OrdER,\n  the list is alwaYs A list Of sTrinGs And NeVER AN array Of NumbeRs,\n  aND iT mAY CONtaIn DuplicaTes.\n  tHe ordeR of ThE list ShoUld bE aSCenDiNg by leNGTh of eAch word, aNd you\n  shOUlD return the list soRteD bY That RULe.\n  If tWo woRds Have the sAmE leNgth, sort tHe list alpHabetiCally.\n  THe funcTioN shOuLd return a list Of sTrINgs in sortED oRDeR.\n  You may ASsuME that all Words WiLl have The same LEnGTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sums = lst.map((item) => item.length);\n  const sortedSums = sums.sort((a, b) => a - b);\n  return sortedSums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/**\n  Given a list and a number n, return the list with n elements sorted in ascending order.\n  If the list is already sorted, return it.\n  If the list is not sorted, return it.\n  If the number is negative, return it.\n  If the number is zero, return an empty list.\n  If the number is greater than the length of the list, return an empty list.\n  If the number is less than 0, return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not in the range [0, n), return an empty list.\n  If the number is not ", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < n) {\n    s +='';\n    if (j === 0) {\n      s += '0';\n      j = 1;\n    }\n    s += numberSequence(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberSequence(0)\n  '0'\n  >>> numberSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst numberSequence = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigit(0)\n  '0'\n  >>> numberDigit(1)\n  '1'\n  >>> numberDigit(2)\n  '2'\n  >>> numberDigit(3)\n  '3'\n  >>> numberDigit(4)\n  '4'\n  >>> numberDigit(5)\n  '5'\n  */\nconst numberDigit = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigitDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigitDigit(0)\n  '0'\n  >>> numberDigitDigit(1)\n  '1'\n  >>> numberDigitDigit(2)\n  '2'\n  >>> numberDigitDigit(3)\n  '3'\n  >>> numberDigitDigit(4)\n  '4'\n  >>> numberDigitDigit(5)\n  '5'\n  */\nconst numberDigitDigit = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigitDigitDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigitDigitDigit(0)\n  '0'\n  >>> numberDigitDigitDigit(1)\n  '1'\n  >>> numberDigitDigitDigit(2)\n  '2'\n  >>> numberDigitDigitDigit(3)\n  '3'\n  >>> numberDigitDigitDigit(4)\n  '4'\n  >>> numberDigitDigitDigit(5)\n  '5'\n  */\nconst numberDigitDigitDigit = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigitDigitDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigitDigitDigitDigit(0)\n  '0'\n  >>> numberDigitDigitDigitDigit(1)\n  '1'\n  >>> numberDigitDigitDigitDigit(2)\n  '2'\n  >>> numberDigitDigitDigitDigit(3)\n  '3'\n  >>> numberDigitDigitDigitDigit(4)\n  '4'\n  >>> numberDigitDigitDigitDigit(5)\n  '5'\n  */\nconst numberDigitDigitDigitDigit = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigitDigitDigitDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigitDigitDigitDigit(0)\n  '0'\n  >>> numberDigitDigitDigitDigit(1)\n  '1'\n  >>> numberDigitDigitDigitDigit(2)\n  '2'\n  >>> numberDigitDigitDigitDigit(3)\n  '3'\n  >>> numberDigitDigitDigitDigit(4)\n  '4'\n  >>> numberDigitDigitDigitDigitDigit(5)\n  '5'\n  */\nconst numberDigitDigitDigitDigit = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigitDigitDigitDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigitDigitDigitDigit(0)\n  '0'\n  >>> numberDigitDigitDigitDigit(1)\n  '1'\n  >>> numberDigitDigitDigitDigit(2)\n  '2'\n  >>> numberDigitDigitDigitDigit(3)\n  '3'\n  >>> numberDigitDigitDigitDigit(4)\n  '4'\n  >>> numberDigitDigitDigitDigitDigit(5)\n  '5'\n  */\nconst numberDigitDigitDigitDigit = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigitDigitDigitDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigitDigitDigitDigit(0)\n  '0'\n  >>> numberDigitDigitDigitDigit(1)\n  '1'\n  >>> numberDigitDigitDigitDigit(2)\n  '2'\n  >>> numberDigitDigitDigitDigit(3)\n  '3'\n  >>> numberDigitDigitDigitDigitDigit(4)\n  '4'\n  >>> numberDigitDigitDigitDigitDigit(5)\n  '5'\n  */\nconst numberDigitDigitDigitDigitDigit = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigitDigitDigitDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigitDigitDigitDigit(0)\n  '0'\n  >>> numberDigitDigitDigitDigit(1)\n  '1'\n  >>> numberDigitDigitDigitDigit(2)\n  '2'\n  >>> numberDigitDigitDigitDigit(3)\n  '3'\n  >>> numberDigitDigitDigitDigitDigit(4)\n  '4'\n  >>> numberDigitDigitDigitDigitDigit(5)\n  '5'\n  */\nconst numberDigitDigitDigitDigitDigit = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigitDigitDigitDigitDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigitDigitDigitDigit(0)\n  '0'\n  >>> numberDigitDigitDigitDigit(1)\n  '1'\n  >>> numberDigitDigitDigitDigit(2)\n  '2'\n  >>> numberDigitDigitDigitDigitDigit(3)\n  '3'\n  >>> numberDigitDigitDigitDigitDigit(4)\n  '4'\n  >>> numberDigitDigitDigitDigitDigit(5)\n  '5'\n  */\nconst numberDigitDigitDigitDigitDigit = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigitDigitDigitDigitDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigitDigitDigitDigit(0)\n  '0'\n  >>> numberDigitDigitDigitDigit(1)\n  '1'\n  >>> numberDigitDigitDigitDigit(2)\n  '2'\n  >>> numberDigitDigitDigitDigit(3)\n  '3'\n  >>> numberDigitDigitDigitDigitDigit(4)\n  '4'\n  >>> numberDigitDigitDigitDigitDigit(5)\n  '5'\n  */\nconst numberDigitDigitDigitDigitDigit = (n) => {\n  let s = '';\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    s += numberDigitDigitDigitDigitDigit(j);\n    i += 1;\n    j += 1;\n  }\n  return s;\n};\n\n/**\n  >>> numberDigitDigitDigitDigit(0)\n  '0'\n  >>> numberDigitDigitDigitDigit(1)\n  '1'\n  >>> numberDigitDigitDigitDigit(2)\n  '2'\n  >>> numberDigitDigitDigitDigit(3)\n  '3'\n  >>> numberDigitDigitDigitDigitDigit(4)\n  '4'\n  >>> numberDigit", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let vALUE = x;\n  let nUmber = n;\n  let vALUE_Other = y;\n  \n  while (nUmber > 1) {\n    if (nUmber % 2 === 0) {\n      vALUE_Other = vALUE;\n      vALUE = vALUE % 2;\n      nUmber = nUmber / 2;\n    } else {\n      vALUE_Other = vALUE;\n      vALUE = vALUE / 2;\n      nUmber = nUmber / 2;\n    }\n  }\n  return vALUE_Other;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let vALUE = x;\n  let nUmber = n;\n  let vALUE_Other = y;\n  \n  while (nUmber > 1) {\n    if (nUmber % 2 === 0) {\n      vALUE_Other = vALUE;\n      vALUE = vALUE % 2;\n      nUmber = nUmber / 2;\n    } else {\n      vALUE_Other = vALUE;\n      vALUE = vALUE / 2;\n      nUmber = nUmber / 2;\n    }\n  }\n  return vALUE_Other;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let vALUE = x;\n  let nUmber = n;\n  let vALUE_Other = y;\n  \n  while (nUmber > 1) {\n    if (nUmber % 2 === 0) {\n      vALUE_Other = vALUE;\n      vALUE = vALUE % 2;\n      nUmber = nUmber / 2;\n    } else {\n      vALUE_Other = vALUE;\n      vALUE = vALUE / 2;\n      nUmber = nUmber / 2;\n    }\n  }\n  return vALUE_Other;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let vALUE = x;\n  let nUmber = n;\n  let vALUE_Other = y;\n  \n  while (nUmber > 1) {\n    if (nUmber % 2 === 0) {\n      vALUE_Other = vALUE;\n      vALUE = vALUE % 2;\n      nUmber = nUmber / 2;\n    } else {\n      vALUE_Other = vALUE;\n      vALUE = vALUE / 2;\n      nUmber = nUmber / 2;\n    }\n  }\n  return vALUE_Other;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let vALUE = x;\n  let nUmber = n;\n  let vALUE_Other = y;\n  \n  while (nUmber > 1) {\n    if (nUmber % 2 === 0) {\n      vALUE_Other = vALUE;\n      vALUE = vALUE % 2;\n      nUmber = nUmber / 2;\n    } else {\n      vALUE_Other = vALUE;\n      vALUE = vALUE / 2;\n      nUmber = nUmber / 2;\n    }\n  }\n  return vALUE_Other;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let vALUE = x;\n  let nUmber = n;\n  let vALUE_Other = y;\n  \n  while (nUmber > 1) {\n    if (nUmber % 2 === 0) {\n      vALUE_Other = vALUE;\n      vALUE = vALUE % 2;\n      nUmber = nUmber / 2;\n    } else {\n      vALUE_Other = vALUE;\n      vALUE = vALUE / 2;\n      nUmber = nUmber / 2;\n    }\n  }\n  return vALUE_Other;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let vALUE = x;\n  let nUmber = n;\n  let vALUE_Other = y;\n  \n  while (nUmber > 1) {\n    if (nUmber % 2 === 0) {\n      vALUE_Other = vALUE;\n      vALUE = vALUE % 2;\n      nUmber = nUmber / 2;\n    } else {\n      vALUE_Other = vALUE;\n      vALUE = vALUE / 2;\n      nUmber = nUmber / 2;\n    }\n  }\n  return vALUE_Other;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* GiVEn a list oF numBers, return the sUM Of SquarES OF the Numbers\n  in the list That are odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn a list oF numBers, return the sUM Of SquarES OF the Numbers\n  in the list That are odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheDifference = (lst) => {\n  let nUMbers = lst.length;\n  let nEGatiVe = lst.filter(x => x % 2 === 0);\n  let nNoTieGerS = lst.filter(x => x % 2!== 0);\n  let nEGatiVeSquarES = lst.filter(x => x % 2 === 1 && x % 2!== 1);\n  let nNoTieGerSquarES = lst.filter(x => x % 2 === 1 && x % 2 === 1);\n  let nEGatiVeSquarES2 = lst.filter(x => x % 2 === 1 && x % 2 === 2);\n  let nNoTieGerSquarES2 = lst.filter(x => x % 2 === 1 && x % 2 === 2);\n  let nEGatiVeSquarES3 = lst.filter(x => x % 2 === 1 && x % 2 === 3);\n  let nNoTieGerSquarES3 = lst.filter(x => x % 2 === 1 && x % 2 === 3);\n  let nEGatiVeSquarES4 = lst.filter(x => x % 2 === 1 && x % 2 === 4);\n  let nNoTieGerSquarES4 = lst.filter(x => x % 2 === 1 && x % 2 === 4);\n  let nEGatiVeSquarES5 = lst.filter(x => x % 2 === 1 && x % 2 === 5);\n  let nNoTieGerSquarES5 = lst.filter(x => x % 2 === 1 && x % 2 === 5);\n  let nEGatiVeSquarES6 = lst.filter(x => x % 2 === 1 && x % 2 === 6);\n  let nNoTieGerSquarES6 = lst.filter(x => x % 2 === 1 && x % 2 === 6);\n  let nEGatiVeSquarES7 = lst.filter(x => x % 2 === 1 && x % 2 === 7);\n  let nNoTieGerSquarES7 = lst.filter(x => x % 2 === 1 && x % 2 === 7);\n  let nEGatiVeSquarES8 = lst.filter(x => x % 2 === 1 && x % 2 === 8);\n  let nNoTieGerSquarES8 = lst.filter(x => x % 2 === 1 && x % 2 === 8);\n  let nEGatiVeSquarES9 = lst.filter(x => x % 2 === 1 && x % 2 === 9);\n  let nNoTieGerSquarES9 = lst.filter(x => x % 2 === 1 && x % 2 === 9);\n  let nEGatiVeSquarES10 = lst.filter(x => x % 2 === 1 && x % 2 === 10);\n  let nNoTieGerSquarES10 = lst.filter(x => x % 2 === 1 && x % 2 === 10);\n  let nEGatiVeSquarES11 = lst.filter(x => x % 2 === 1 && x % 2 === 11);\n  let nNoTieGerSquarES11 = lst.filter(x => x % 2 === 1 && x % 2 === 11);\n  let nEGatiVeSquarES12 = lst.filter(x => x % 2 === 1 && x % 2 === 12);\n  let nNoTieGerSquarES12 = lst.filter(x => x % 2 === 1 && x % 2 === 12);\n  let nEGatiVeSquarES13 = lst.filter(x => x % 2 === 1 && x % 2 === 13);\n  let nNoTieGerSquarES13 = lst.filter(x => x % 2 === 1 && x % 2 === 13);\n  let nEGatiVeSquarES14 = lst.filter(x => x % 2 === 1 && x % 2 === 14);\n  let nNoTieGerSquarES14 = lst.filter(x => x % 2 === 1 && x % 2 === 14);\n  let nEGatiVeSquarES15 = lst.filter(x => x % 2 === 1 && x % 2 === 15);\n  let nNoTieGerSquarES15 = lst.filter(x => x % 2 === 1 && x % 2 === 15);\n  let nEGatiVeSquarES16 = lst.filter(x => x % 2 === 1 && x % 2 === 16);\n  let nNoTieGerSquarES16 = lst.filter(x => x % 2 === 1 && x % 2 === 16);\n  let nEGatiVeSquarES17 = lst.filter(x => x % 2 === 1 && x % 2 === 17);\n  let nNoTieGerSquarES17 = lst.filter(x => x % 2 === 1 && x % 2 === 17);\n  let nEGatiVeSquarES18 = lst.filter(x => x % 2 === 1 && x % 2 === 18);\n  let nNoTieGerSquarES18 = lst.filter(x => x % 2 === 1 && x % 2 === 18);\n  let nEGatiVeSquarES19 = lst.filter(x => x % 2 === 1 && x % 2 === 19);\n  let nNoTieGerSquarES19 = lst.filter(x => x % 2 === 1 && x % 2 === 19);\n  let nEGatiVeSquarES20 = lst.filter(x => x % 2 === 1 && x % 2 === 20);\n  let nNoTieGerSquarES20 = lst.filter(x => x % 2 === 1 && x % 2 === 20);\n  let nEGatiVeSquarES21 = lst.filter(x => x % 2 === 1 && x % 2 === 21);\n  let nNoTieGerSquarES21 = lst.filter(x => x % 2 === 1 && x % 2 === 21);\n  let nEGatiVeSquarES22 = lst.filter(x => x % 2 === 1 && x % 2 === 22);\n  let nNoTieGerSquarES22 = lst.filter(x => x % 2 === 1 && x % 2 === 22);\n  let nEGatiVeSquarES23 = lst.filter(x => x % 2 === 1 && x % 2 === 23);\n  let nNoTieGerSquarES23 = lst.filter(x => x % 2 === 1 && x % 2 === 23);\n  let nEGatiVeSquarES24 = lst.filter(x => x % 2 === 1 && x % 2 === 24);\n  let nNoTieGerSquarES24 = lst.filter(x => x % 2 === 1 && x % 2 === 24);\n  let nEGatiVeSquarES25 = lst.filter(x => x % 2 === 1 && x % 2 === 25);\n  let nNoTieGerSquarES25 = lst.filter(x => x % 2 === 1 && x % 2 === 25);\n  let nEGatiVeSquarES26 = lst.filter(x => x % 2 === 1 && x % 2 === 26);\n  let nNoTieGerSquarES26 = lst.filter(x => x % 2 === 1 && ", "passed": 1}
{"task_id": "JavaScript/152", "prompt": "/*I thINk we All rEmember tHAT fEelinG WHEn thE result of sOme long-awaited\n  eveNT iS fInAlly knoWN. The FeelInGs ANd ThoUGhts YoU hAvE aT ThAT moMeNT Are\n  DEFinitely wOrTH noTing DoWn aNd COMPAring.\n  YOuR task Is tO DeTeRMINE if A pErson coRreCTly gueSseD tHE reSultS oF A nuMbEr of maTCHes.\n  YoU are giveN two arrAYs Of scorEs aNd GUessES Of equAl leNgtH, where eaCh IndEx shows a mAtch. \n  REturn aN array Of the sAme LenGtH deNotInG How far oFF eACh guess Was. If thEY haVE guessed CorreCtLy,\n  the vAlue is 0, aND iF NoT, the VAlUe Is the aBSOLute dIfferEnce between tHe guess and The scOrE.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*I thINk we All rEmember tHAT fEelinG WHEn thE result of sOme long-awaited\n  eveNT iS fInAlly knoWN. The FeelInGs ANd ThoUGhts YoU hAvE aT ThAT moMeNT Are\n  DEFinitely wOrTH noTing DoWn aNd COMPAring.\n  YOuR task Is tO DeTeRMINE if A pErson coRreCTly gueSseD tHE reSultS oF A nuMbEr of maTCHes.\n  YoU are giveN two arrAYs Of scorEs aNd GUessES Of equAl leNgtH, where eaCh IndEx shows a mAtch. \n  REturn aN array Of the sAme LenGtH deNotInG How far oFF eACh guess Was. If thEY haVE guessed CorreCtLy,\n  the vAlue is 0, aND iF NoT, the VAlUe Is the aBSOLute dIfferEnce between tHe guess and The scOrE.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length;\n  const guessLength = guess.length;\n  const gameGuess = game.slice(0, guessLength);\n  const gameGuesses = gameGuess.map((gameGuess) => {\n    const guessGuess = guess.slice(0, gameGuessLength);\n    const gameGuessedGuess = gameGuess.map((gameGuessGuess, gameGuessIndex) => {\n      const gameGuessedGuess = gameGuessGuess.map((gameGuessGuess, gameGuessIndex) => {\n        if (gameGuessGuess === gameGuess) {\n          return 1;\n        }\n        return 0;\n      });\n      return gameGuessedGuess;\n    });\n    return gameGuessedGuess;\n  });\n  const gameGuessesLength = gameGuesses.length;\n  const gameGuessesGuess = gameGuesses.map((gameGuessesGuess) => {\n    const gameGuessesGuess = gameGuessesGuess.map((gameGuessesGuess) => {\n      if (gameGuessesGuess === 1) {\n        return 1;\n      }\n      return 0;\n    });\n    return gameGuessesGuess;\n  });\n  const gameGuessesGuessesLength = gameGuessesGuess.length;\n  const gameGuessesGuessesGuess = gameGuessesGuessesGuess.map((gameGuessesGuessesGuess) => {\n    if (gameGuessesGuessesGuess === 1) {\n      return 1;\n    }\n    return 0;\n  });\n  const gameGuessesGuessesGuessesLength = gameGuessesGuessesGuess.length;\n  const gameGuessesGuessesGuessesGuess = gameGuessesGuessesGuessesGuess.map((gameGuessesGuessesGuess) => {\n    if (gameGuessesGuessesGuess === 1) {\n      return 1;\n    }\n    return 0;\n  });\n  const gameGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuess.length;\n  const gameGuessesGuessesGuessesGuessesGuess = gameGuessesGuessesGuessesGuessesGuess.map((gameGuessesGuessesGuess) => {\n    if (gameGuessesGuessesGuess === 1) {\n      return 1;\n    }\n    return 0;\n  });\n  const gameGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuess.length;\n  const gameGuessesGuessesGuessesGuessesGuess = gameGuessesGuessesGuessesGuessesGuess.map((gameGuessesGuessesGuess) => {\n    if (gameGuessesGuessesGuess === 1) {\n      return 1;\n    }\n    return 0;\n  });\n  const gameGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuess.length;\n  const gameGuessesGuessesGuessesGuessesGuess = gameGuessesGuessesGuessesGuessesGuess.map((gameGuessesGuessesGuess) => {\n    if (gameGuessesGuessesGuess === 1) {\n      return 1;\n    }\n    return 0;\n  });\n  const gameGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuess.length;\n  const gameGuessesGuessesGuessesGuessesGuess = gameGuessesGuessesGuessesGuessesGuess.map((gameGuessesGuessesGuess) => {\n    if (gameGuessesGuessesGuess === 1) {\n      return 1;\n    }\n    return 0;\n  });\n  const gameGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuess.length;\n  const gameGuessesGuessesGuessesGuessesGuess = gameGuessesGuessesGuessesGuessesGuess.map((gameGuessesGuessesGuess) => {\n    if (gameGuessesGuessesGuess === 1) {\n      return 1;\n    }\n    return 0;\n  });\n  const gameGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuess.length;\n  const gameGuessesGuessesGuessesGuessesGuess = gameGuessesGuessesGuessesGuessesGuess.map((gameGuessesGuessesGuess) => {\n    if (gameGuessesGuessesGuess === 1) {\n      return 1;\n    }\n    return 0;\n  });\n  const gameGuessesGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuessesGuess.length;\n  const gameGuessesGuessesGuessesGuessesGuessesGuess = gameGuessesGuessesGuessesGuessesGuessesGuess.map((gameGuessesGuessesGuess) => {\n    if (gameGuessesGuessesGuess === 1) {\n      return 1;\n    }\n    return 0;\n  });\n  const gameGuessesGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuessesGuessesGuess.length;\n  const gameGuessesGuessesGuessesGuessesGuessesGuess = gameGuessesGuessesGuessesGuessesGuessesGuessesGuess.map((gameGuessesGuessesGuess) => {\n    if (gameGuessesGuessesGuess === 1) {\n      return 1;\n    }\n    return 0;\n  });\n  const gameGuessesGuessesGuessesGuessesG", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM be thE nuMBer of lOweRcASe lEtteRs\n  in THe eXtEnsion'S NAme, thE strengtH is giveN By The fraCtiOn caP - SM.\n  yOU shouLd fiNd tHe strongEsT exTension anD return a strIng in thiS\n  formaT: ClassnamE.StRoNgeStEXtENsionNaME.\n  IF ThEre are tWO or MOre extensions with tHe samE sTrengtH, you shoULd\n  CHoOse tHE oNe That coMES First in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM be thE nuMBer of lOweRcASe lEtteRs\n  in THe eXtEnsion'S NAme, thE strengtH is giveN By The fraCtiOn caP - SM.\n  yOU shouLd fiNd tHe strongEsT exTension anD return a strIng in thiS\n  formaT: ClassnamE.StRoNgeStEXtENsionNaME.\n  IF ThEre are tWO or MOre extensions with tHe samE sTrengtH, you shoULd\n  CHoOse tHE oNe That coMES First in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_strengths = extensions.map(extension => extension.strength);\n  const extension_strength_sum = extension_strengths.reduce((a, b) => a + b);\n  const extension_strength_max = Math.max(...extension_strengths);\n  const extension_strength_min = Math.min(...extension_strengths);\n  const extension_strength_avg = extension_strength_sum / extension_strengths.length;\n  const extension_strength_avg = extension_strength_avg.toFixed(2);\n  const extension_strength_avg = extension_strength_avg.replace(/\\.0+$/, '');\n  const extension_strength_avg = extension_strength_avg.toLowerCase();\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/[^a-zA-Z0-9]/g, '');\n  const extension_strength_avg = extension_strength_avg.replace(/\\s+/g, '');\n  const extension_strength_avg = extension_strength_av", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n  let pattern = a.split('').map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  let result = pattern.split(b).map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  return result === pattern;\n};\n\n/*\n  You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n  let pattern = a.split('').map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  let result = pattern.split(b).map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  return result === pattern;\n};\n\n/*\n  You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n  let pattern = a.split('').map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  let result = pattern.split(b).map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  return result === pattern;\n};\n\n/*\n  You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n  let pattern = a.split('').map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  let result = pattern.split(b).map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  return result === pattern;\n};\n\n/*\n  You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n  let pattern = a.split('').map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  let result = pattern.split(b).map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  return result === pattern;\n};\n\n/*\n  You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n  let pattern = a.split('').map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  let result = pattern.split(b).map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  return result === pattern;\n};\n\n/*\n  You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n  let pattern = a.split('').map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  let result = pattern.split(b).map((c, i) => i % 2? c : c.toUpperCase()).join('');\n  return result === pattern;", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numToCheck = num;\n  while (numToCheck) {\n    if (numToCheck % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    numToCheck = numToCheck / 2;\n  }\n  return [evenCount, oddCount];\n};\n\n/*\n   Given a number n, return the number of digits in the number n.\n   Example:\n      digitCount(12) ==> 3\n      digitCount(123) ==> 4\n      digitCount(1234) ==> 5\n      digitCount(12345) ==> 6\n      digitCount(123456) ==> 7\n      digitCount(1234567) ==> 8\n      digitCount(12345678) ==> 9\n      digitCount(123456789) ==> 10\n      digitCount(1234567890) ==> 11\n      digitCount(12345678901) ==> 12\n      digitCount(123456789012) ==> 13\n      digitCount(1234567890123) ==> 14\n      digitCount(12345678901234) ==> 15\n      digitCount(123456789012345) ==> 16\n      digitCount(1234567890123456) ==> 17\n      digitCount(12345678901234567) ==> 18\n      digitCount(123456789012345678) ==> 19\n      digitCount(123456789012345679) ==> 20\n      digitCount(1234567890123456789) ==> 21\n      digitCount(12345678901234567891) ==> 22\n      digitCount(123456789012345678912) ==> 23\n      digitCount(123456789012345678913) ==> 24\n      digitCount(123456789012345678914) ==> 25\n      digitCount(123456789012345678915) ==> 26\n      digitCount(123456789012345678916) ==> 27\n      digitCount(123456789012345678917) ==> 28\n      digitCount(123456789012345678918) ==> 29\n      digitCount(123456789012345678919) ==> 30\n      digitCount(123456789012345678920) ==> 31\n      digitCount(123456789012345678921) ==> 32\n      digitCount(123456789012345678922) ==> 33\n      digitCount(123456789012345678923) ==> 34\n      digitCount(123456789012345678924) ==> 35\n      digitCount(123456789012345678925) ==> 36\n      digitCount(123456789012345678926) ==> 37\n      digitCount(123456789012345678927) ==> 38\n      digitCount(123456789012345678928) ==> 39\n      digitCount(123456789012345678929) ==> 40\n      digitCount(123456789012345678930) ==> 41\n      digitCount(123456789012345678931) ==> 42\n      digitCount(123456789012345678932) ==> 43\n      digitCount(123456789012345678933) ==> 44\n      digitCount(123456789012345678934) ==> 45\n      digitCount(123456789012345678935) ==> 46\n      digitCount(123456789012345678936) ==> 47\n      digitCount(123456789012345678937) ==> 48\n      digitCount(123456789012345678938) ==> 49\n      digitCount(123456789012345678939) ==> 50\n      digitCount(123456789012345678940) ==> 51\n      digitCount(123456789012345678941) ==> 52\n      digitCount(123456789012345678942) ==> 53\n      digitCount(123456789012345678943) ==> 54\n      digitCount(123456789012345678944) ==> 55\n      digitCount(123456789012345678945) ==> 56\n      digitCount(123456789012345678946) ==> 57\n      digitCount(123456789012345678947) ==> 58\n      digitCount(123456789012345678948) ==> 59\n      digitCount(123456789012345678949) ==> 60\n      digitCount(123456789012345678950) ==> 61\n      digitCount(123456789012345678951) ==> 62\n      digitCount(123456789012345678952) ==> 63\n      digitCount(123456789012345678953) ==> 64\n      digitCount(123456789012345678954) ==> 65\n      digitCount(123456789012345678955) ==> 66\n      digitCount(123456789012345678956) ==> 67\n      digitCount(123456789012345678957) ==> 68\n      digitCount(123456789012345678958) ==> 69\n      digitCount(123456789012345678959) ==> 70\n      digitCount(123456789012345678960) ==> 71\n      digitCount(123456789012345678961) ==> 72\n      digitCount(123456789012345678962) ==> 73\n      digitCount(123456789012345678963) ==> 74\n      digitCount(123456789012345678964) ==> 75\n      digitCount(123456789012345678965) ==> 76\n      digitCount(123456789012345678966) ==> 77\n      digitCount(123456789012345678967) ==> 78\n      digitCount(123456789012345678968) ==> 79\n      digitCount(123456789012345678969) ==> 80\n      digitCount(123456789012345678970) ==> 81\n      digitCount(123456789012345678971) ==> 82\n      digitCount(123456789012345678972) ==> 83\n      digitCount(123456789012345678973) ==> 84\n      digitCount(123456789012345678974) ==> 85\n      digitCount(123456789012345678975) ==> 86\n      digitCount(123456789012345678976) ==> 87\n      digitCount(123456789012345678977) ==> 88\n      digitCount(123456789012345678978) ==> 89\n      digitCount(123456789012345678979) ==> 90\n      digitCount(123456789012345678980) ==> 91\n      digitCount(123456789012345678981) ==> 92\n      digitCount(123456789012345678982) ==> 93\n      digitCount(123456789012345678983) ==> 94\n      digitCount(123456789012345678984) ==> 95\n      digitCount(123456789012345678985) ==> 96\n      digitCount(123456789012345678986) ==> 97\n      digitCount(123456789012345678987) ==> 98\n      digitCount(123456789012345678988) ==> 99\n      digitCount(123456789012345678989) ==> 100\n      digitCount(123456789012345678990) ==> 101\n      digitCount(123456789012345678991) ==> 102\n      digitCount(123456789012345678992) ==> 103\n      digitCount(123456789012345678993) ==> 104\n      digitCount(123456789012345678994) ==> 105\n      digitCount(123456789012345678995) ==> 106\n      digitCount(123456789012345678996) ==> 107\n      digitCount(123456789012345678997) ==> 108\n      digitCount(123456789012345678998) ==> 109\n      digitCount(123456789012345678999) ==> 110\n      digitCount(1234567890123456789100) ==> 111\n      digitCount(1234567890123456789101) ==> 112\n      digitCount(1234567890123456789102) ==> 113\n      digitCount(1234567890123456789103) ==> 114\n      digitCount(1234567890123456789104) ==> 115\n      digitCount(1234567890123456789105) ==> 116\n      digitCount(1234567890123456789106) ==> 117\n      digitCount(1234567890123456789107) ==> 118\n      digitCount(1234567890123456789108) ==> 119\n      digitCount(1234567890123456789109) ==> 120\n      digitCount(1234567890123456789110) ==> 121\n      digitCount(1234567890123456789111) ==> 122\n      digitCount(1234567890123456789112) ==> 123\n      digitCount(1234567890123456789113) ==> 124\n      digitCount(1234567890123456789114) ==> 125\n      digitCount(1234567890123456789115) ==> 126\n      digitCount(1234567890123456789116) ==> 127\n      digitCount(1234567890123456789117) ==> 128\n      digitCount(1234567890123456789118) ==> 129\n      ", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const intToMiniRomanMap = {\n    1: 0,\n    2: 1,\n    3: 2,\n    4: 3,\n    5: 4,\n    6: 5,\n    7: 6,\n    8: 7,\n    9: 8,\n    10: 9,\n    11: 10,\n    12: 11,\n    13: 12,\n    14: 13,\n    15: 14,\n    16: 15,\n    17: 16,\n    18: 17,\n    19: 18,\n    20: 19,\n    21: 20,\n    22: 21,\n    23: 22,\n    24: 23,\n    25: 24,\n    26: 25,\n    27: 26,\n    28: 27,\n    29: 28,\n    30: 29,\n    31: 30,\n    32: 31,\n    33: 32,\n    34: 33,\n    35: 34,\n    36: 35,\n    37: 36,\n    38: 37,\n    39: 38,\n    40: 39,\n    41: 40,\n    42: 41,\n    43: 42,\n    44: 43,\n    45: 44,\n    46: 45,\n    47: 46,\n    48: 47,\n    49: 48,\n    50: 49,\n    51: 50,\n    52: 51,\n    53: 52,\n    54: 53,\n    55: 54,\n    56: 55,\n    57: 56,\n    58: 57,\n    59: 58,\n    60: 59,\n    61: 60,\n    62: 61,\n    63: 62,\n    64: 63,\n    65: 64,\n    66: 65,\n    67: 66,\n    68: 67,\n    69: 68,\n    70: 69,\n    71: 70,\n    72: 71,\n    73: 72,\n    74: 73,\n    75: 74,\n    76: 75,\n    77: 76,\n    78: 77,\n    79: 78,\n    80: 79,\n    81: 80,\n    82: 81,\n    83: 82,\n    84: 83,\n    85: 84,\n    86: 85,\n    87: 86,\n    88: 87,\n    89: 88,\n    90: 89,\n    91: 90,\n    92: 91,\n    93: 92,\n    94: 93,\n    95: 94,\n    96: 95,\n    97: 96,\n    98: 97,\n    99: 98,\n    100: 99,\n    101: 100,\n    102: 101,\n    103: 102,\n    104: 103,\n    105: 104,\n    106: 105,\n    107: 106,\n    108: 107,\n    109: 108,\n    110: 109,\n    111: 110,\n    112: 111,\n    113: 112,\n    114: 113,\n    115: 114,\n    116: 115,\n    117: 116,\n    118: 117,\n    119: 118,\n    120: 119,\n    121: 120,\n    122: 121,\n    123: 122,\n    124: 123,\n    125: 124,\n    126: 125,\n    127: 126,\n    128: 127,\n    129: 128,\n    130: 129,\n    131: 130,\n    132: 131,\n    133: 132,\n    134: 133,\n    135: 134,\n    136: 135,\n    137: 136,\n    138: 137,\n    139: 138,\n    140: 139,\n    141: 140,\n    142: 141,\n    143: 142,\n    144: 143,\n    145: 144,\n    146: 145,\n    147: 146,\n    148: 147,\n    149: 148,\n    150: 149,\n    151: 150,\n    152: 151,\n    153: 152,\n    154: 153,\n    155: 154,\n    156: 155,\n    157: 156,\n    158: 157,\n    159: 158,\n    160: 159,\n    161: 160,\n    162: 161,\n    163: 162,\n    164: 163,\n    165: 164,\n    166: 165,\n    167: 166,\n    168: 167,\n    169: 168,\n    170: 169,\n    171: 170,\n    172: 171,\n    173: 172,\n    174: 173,\n    175: 174,\n    176: 175,\n    177: 176,\n    178: 177,\n    179: 178,\n    180: 179,\n    181: 180,\n    182: 181,\n    183: 182,\n    184: 183,\n    185: 184,\n    186: 185,\n    187: 186,\n    188: 187,\n    189: 188,\n    190: 189,\n    191: 190,\n    192: 191,\n    193: 192,\n    194: 193,\n    195: 194,\n    196: 195,\n    197: 196,\n    198: 197,\n    199: 198,\n    200: 199,\n    201: 200,\n    202: 201,\n    203: 202,\n    204: 203,\n    205: 204,\n    206: 205,\n    207: 206,\n    208: 207,\n    209: 208,\n    210: 210,\n    211: 211,\n    212: 212,\n    213: 213,\n    214: 214,\n    215: 215,\n    216: 216,\n    217: 217,\n    218: 218,\n    219: 219,\n    220: 220,\n    221: 221,\n    222: 222,\n    223: 223,\n    224: 224,\n    225: 225,\n    226: 226,\n    227: 227,\n    228: 228,\n    229: 229,\n    230: 230,\n    231: 231,\n    232: 232,\n    233: 233,\n    234: 234,\n    235: 235,\n    236: 236,\n    237: 237,\n    238: 238,\n    239: 239,\n    240: 240,\n    241: 241,\n    242: 242,\n    243: 243,\n    244: 244,\n    245: 24", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN true if the three\n  siDEs FoRm a Right-anGLed tRianGlE, fALsE otHErwiSe.\n  a rIgHt-ANgLEd tRiANGle IS a Triangle in wHiCH onE angLe Is rIgHT ANGle or\n  90 dEgRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN true if the three\n  siDEs FoRm a Right-anGLed tRianGlE, fALsE otHErwiSe.\n  a rIgHt-ANgLEd tRiANGle IS a Triangle in wHiCH onE angLe Is rIgHT ANGle or\n  90 dEgRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const a3 = Math.cos(b * Math.PI / 180);\n  const a4 = Math.sin(b * Math.PI / 180);\n  const a5 = Math.cos(c * Math.PI / 180);\n  const a6 = Math.sin(c * Math.PI / 180);\n  const a1 = a1 * a1;\n  const a2 = a2 * a2;\n  const a3 = a3 * a3;\n  const a4 = a4 * a4;\n  const a5 = a5 * a5;\n  const a6 = a6 * a6;\n  const b1 = Math.cos(a * Math.PI / 180);\n  const b2 = Math.sin(a * Math.PI / 180);\n  const b3 = Math.cos(b * Math.PI / 180);\n  const b4 = Math.sin(b * Math.PI / 180);\n  const b5 = Math.cos(c * Math.PI / 180);\n  const b6 = Math.sin(c * Math.PI / 180);\n  const b1 = b1 * b1;\n  const b2 = b2 * b2;\n  const b3 = b3 * b3;\n  const b4 = b4 * b4;\n  const b5 = b5 * b5;\n  const b6 = b6 * b6;\n  const c1 = Math.cos(a * Math.PI / 180);\n  const c2 = Math.sin(a * Math.PI / 180);\n  const c3 = Math.cos(b * Math.PI / 180);\n  const c4 = Math.sin(b * Math.PI / 180);\n  const c5 = Math.cos(c * Math.PI / 180);\n  const c6 = Math.sin(c * Math.PI / 180);\n  const c1 = c1 * c1;\n  const c2 = c2 * c2;\n  const c3 = c3 * c3;\n  const c4 = c4 * c4;\n  const c5 = c5 * c5;\n  const c6 = c6 * c6;\n  const d1 = a1 * b2 - a2 * b3;\n  const d2 = a3 * b1 - a4 * b2;\n  const d3 = a4 * b1 - a5 * b2;\n  const d4 = a5 * b1 - a6 * b2;\n  const d5 = a6 * b1 - a1 * b3;\n  const d6 = a1 * b3 - a3 * b1;\n  const d1 = d1 * d1;\n  const d2 = d2 * d2;\n  const d3 = d3 * d3;\n  const d4 = d4 * d4;\n  const d5 = d5 * d5;\n  const d6 = d6 * d6;\n  const e1 = c1 * b2 - c2 * b3;\n  const e2 = c3 * b1 - c4 * b2;\n  const e3 = c4 * b1 - c5 * b2;\n  const e4 = c5 * b1 - c6 * b2;\n  const e5 = c6 * b1 - c1 * b3;\n  const e6 = c1 * b3 - c3 * b1;\n  const d1 = e1 * e2;\n  const d2 = e2 * e3;\n  const d3 = e3 * e4;\n  const d4 = e4 * e5;\n  const d5 = e5 * e6;\n  const d6 = e6 * e1;\n  const f1 = c1 * e2 - c2 * e3;\n  const f2 = c3 * e1 - c4 * e2;\n  const f3 = c4 * e1 - c5 * e2;\n  const f4 = c5 * e1 - c6 * e2;\n  const f5 = c6 * e1 - c1 * e3;\n  const f6 = c1 * e3 - c3 * e1;\n  const f1 = f1 * f1;\n  const f2 = f2 * f2;\n  const f3 = f3 * f3;\n  const f4 = f4 * f4;\n  const f5 = f5 * f5;\n  const f6 = f6 * f6;\n  const g1 = c1 * b2 * c3 - a2 * b3 * c1;\n  const g2 = c3 * b1 * c2 - a1 * b2 * c3;\n  const g3 = c1 * b3 * c2 - a3 * b1 * c1;\n  const g4 = c3 * a1 * c2 - a1 * b3 * c3;\n  const g5 = c1 * b2 * c4 - a2 * b3 * c4;\n  const g6 = c4 * b1 * c2 - a1 * b2 * c4;\n  const g7 = c1 * b3 * c4 - a3 * b1 * c4;\n  const g8 = c3 * a1 * c4 - a1 * b3 * c4;\n  const g9 = c1 * b2 * c5 - a2 * b3 * c5;\n  const g10 = c4 * b1 * c5 - a1 * b2 * c5;\n  const g11 = c1 * b3 * c5 - a3 * b1 * c5;\n  const g12 = c3 * a1 * c5 - a1 * b3 * c5;\n  const g13 = c1 * b2 * c6 - a2 * b3 * c6;\n  const g14 = c4 * b1 * c6 - a1 * b2 * c6;\n  const g15 = c1 * b3 * c6 - a3 * b1 * c6;\n  const g16 = c3 * a1 * c6 - a1 * b3 * c6;\n  const g17 = c1 * b2 * c7 - a2 * b3 * c7;\n  const g18 = c4 * b1 * c7 - a1 * b2 * c7;\n  const g19 = c1 * b3 * c7 - a3 * b1 * c7;\n  const g20 = c3 * a1 * c7 - a1 * b3 * c7;\n  const g21 = c1 * b2 * c8 - a2 * b3 * c8;\n  const g22 = c4 * b1 * c8 - a1 * b2 * c8;\n  const g23 = c1 * b3 * c8 - a3 * b1 * c8;\n  const g24 = c3 * a1 * c8 - a1 * b3 * c8;\n  const g25 = c1 * b2 * c9 - a2 * b3 * c9;\n  const g26 = c4 * b1 * c9 - a1 * b2 * c9;\n  const g27 = c1 * b3 * c9 - a3 * b1 * c9;\n  const g28 = c3 * a1 * c9 - a1 * b3 * c9;\n  const g29 = c1 * b2 * c10 - a2 * b3 * c10;\n  const g30 = c4 * b1 * c10 - a1 * b2 * c10;\n  const g31 = c1 * b3 * c10 - a3 * b1 * c10;\n  const g32 = c3 * a1 * c10 - a1 * b3 * c10;\n  const g33 = c1 * b2 * c11 - a2 * b3 * c11;\n  const g34 = c4 * b1 * c11 - a1 * b2 * c11;\n  const g35 = c1 * b3 * c11 - a3 * b1 * c11;\n  const g36 = c3 * a1 * c11 - a1 * b3 * c11;\n  const g37 = c1 * b2 * c12 - a2 * b3 * c12;\n  const g38 = c4 * b1 * c12 - a1 * b2 * c12;\n  const g39 = c1 * b3 * c12 - a3 * b1 * c12;\n  const g40 = c3 * a1 * c12 - a1 * b3 * c12;\n  const g41 = c1 * b2 * c13 - a2 * b3 * c13;\n  const g42 = c4 * b1 * c13 - a1 * b2 * c13;\n  const g43 = c1 * b3 * c13", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  let max = 0;\n  let maxWord = words[0];\n  let maxWordLength = words[0].length;\n  let maxWordIndex = 0;\n  let maxWordLengthIndex = 0;\n  let maxWordIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let i = 0;\n  while (i < number) {\n    if (remaining <= need) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n      remaining--;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let i = 0;\n  while (i < number) {\n    if (remaining <= need) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n      remaining--;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let i = 0;\n  while (i < number) {\n    if (remaining <= need) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n      remaining--;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let i = 0;\n  while (i < number) {\n    if (remaining <= need) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n      remaining--;\n    }\n    i++", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) > -1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length > 1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length > 1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countWords('xyzXYZ')\n  3\n  >>> countWords('Jerry')\n  4\n  */\nconst countWordsWithSpaces = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length > 1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countWordsWithSpaces('xyzXYZ')\n  3\n  >>> countWordsWithSpaces('Jerry')\n  4\n  */\nconst countWordsWithSpaceAndCapitals = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length > 1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countWordsWithSpaceAndCapitals('xyzXYZ')\n  3\n  >>> countWordsWithSpaceAndCapitals('Jerry')\n  4\n  */\nconst countWordsWithSpaceAndCapitalsAndUnderscores = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length > 1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countWordsWithSpaceAndCapitalsAndUnderscores('xyzXYZ')\n  3\n  >>> countWordsWithSpaceAndCapitalsAndUnderscores('Jerry')\n  4\n  */\nconst countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbers = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length > 1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbers('xyzXYZ')\n  3\n  >>> countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbers('Jerry')\n  4\n  */\nconst countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscores = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length > 1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscores('xyzXYZ')\n  3\n  >>> countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscores('Jerry')\n  4\n  */\nconst countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscoresAndNumbers = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length > 1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscoresAndNumbers('xyzXYZ')\n  3\n  >>> countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscoresAndNumbers('Jerry')\n  4\n  */\nconst countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscoresAndNumbersAndUnderscores = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length > 1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscoresAndNumbersAndUnderscoresAndNumbers('xyzXYZ')\n  3\n  >>> countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscoresAndNumbersAndUnderscoresAndNumbers('Jerry')\n  4\n  */\nconst countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscoresAndNumbersAndUnderscoresAndNumbersAndUnderscores = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length > 1? 1 : 0;\n  }\n  return count;\n};\n\n/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscoresAndNumbersAndUnderscoresAndNumbersAndUnderscoresAndNumbers('xyzXYZ')\n  3\n  >>> countWordsWithSpaceAndCapitalsAndUnderscoresAndNumbersAndUnderscoresAndNumbersAndUnderscoresAndNumbersAndUnderscoresAndNumbers('Jerry')\n  4\n  */\nconst countWordsWithSpaceAnd", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('');\n  const operandList = operand.split('');\n  const length = operatorList.length;\n  const length = operandList.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result.push(doAlgebra(operator, operand));\n    } else {\n      result.push(Number(operand));\n    }\n  }\n  return result;\n};\n\nconst doAlgebras = (operators, operands) => {\n  const length = operators.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    const operator = operators[i];\n    const operand = operands[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result.push(doAlgebra(operator, operand));\n    } else {\n      result.push(Number(operand));\n    }\n  }\n  return result;\n};\n\nconst doAlgebrasSOP = (operators, operands) => {\n  const length = operators.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    const operator = operators[i];\n    const operand = operands[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result.push(doAlgebra(operator, operand));\n    } else {\n      result.push(Number(operand));\n    }\n  }\n  return result;\n};\n\nconst doAlgebrasSOPSOP = (operators, operands) => {\n  const length = operators.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    const operator = operators[i];\n    const operand = operands[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result.push(doAlgebra(operator, operand));\n    } else {\n      result.push(Number(operand));\n    }\n  }\n  return result;\n};\n\nconst doAlgebrasSOPSOPS = (operators, operands) => {\n  const length = operators.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    const operator = operators[i];\n    const operand = operands[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result.push(doAlgebra(operator, operand));\n    } else {\n      result.push(Number(operand));\n    }\n  }\n  return result;\n};\n\nconst doAlgebrasSOPSOPSOP = (operators, operands) => {\n  const length = operators.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    const operator = operators[i];\n    const operand = operands[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result.push(doAlgebra(operator, operand));\n    } else {\n      result.push(Number(operand));\n    }\n  }\n  return result;\n};\n\nconst doAlgebrasSOPSOPSOPSOP = (operators, operands) => {\n  const length = operators.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    const operator = operators[i];\n    const operand = operands[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result.push(doAlgebra(operator, operand));\n    } else {\n      result.push(Number(operand));\n    }\n  }\n  return result;\n};\n\nconst doAlgebraspassed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let res = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let ", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD5()\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const md5 = new MD", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a; i++) {\n    result.push(i);\n  }\n  for (let i = 0; i < b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/**\n  Generate all possible permutations of an array.\n\n  For example:\n  generatePermutations([1, 2, 3]) => [[1, 2], [1, 3], [2, 3], [2, 1], [3, 1], [3, 2]]\n  generatePermutations([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [3, 2, 4, 1], [4, 1, 2, 3]]\n  */\nconst generatePermutations = array => {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < array.length; j++) {\n      permutation.push(array[j]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/**\n  Generate all possible combinations of an array.\n\n  For example:\n  generateCombinations([1, 2, 3]) => [[1, 2], [1, 3], [2, 3], [2, 1], [3, 1], [3, 2]]\n  generateCombinations([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [3, 2, 4, 1], [4, 1, 2, 3]]\n  */\nconst generateCombinations = array => {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    const combination = [];\n    for (let j = 0; j < array.length; j++) {\n      combination.push(array[j]);\n    }\n    result.push(combination);\n  }\n  return result;\n};\n\n/**\n  Generate all possible combinations of an array.\n\n  For example:\n  generateCombinationsWith([1, 2, 3]) => [[1, 2], [1, 3], [2, 3], [2, 1], [3, 1], [3, 2]]\n  generateCombinationsWith([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [3, 2, 4, 1], [4, 1, 2, 3]]\n  */\nconst generateCombinationsWith = array => {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    const combination = [];\n    for (let j = 0; j < array.length; j++) {\n      combination.push(array[j]);\n    }\n    result.push(combination);\n  }\n  return result;\n};\n\n/**\n  Generate all possible combinations of an array.\n\n  For example:\n  generateCombinationsWith([1, 2, 3]) => [[1, 2], [1, 3], [2, 3], [2, 1], [3, 1], [3, 2]]\n  generateCombinationsWith([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [3, 2, 4, 1], [4, 1, 2, 3]]\n  */\nconst generateCombinationsWithWith = array => {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    const combination = [];\n    for (let j = 0; j < array.length; j++) {\n      combination.push(array[j]);\n    }\n    result.push(combination);\n  }\n  return result;\n};\n\n/**\n  Generate all possible combinations of an array.\n\n  For example:\n  generateCombinationsWithWith([1, 2, 3]) => [[1, 2], [1, 3], [2, 3], [2, 1], [3, 1], [3, 2]]\n  generateCombinationsWithWith([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [3, 2, 4, 1], [4, 1, 2, 3]]\n  */\nconst generateCombinationsWithWithWith = array => {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    const combination = [];\n    for (let j = 0; j < array.length; j++) {\n      combination.push(array[j]);\n    }\n    result.push(combination);\n  }\n  return result;\n};\n\n/**\n  Generate all possible combinations of an array.\n\n  For example:\n  generateCombinationsWithWithWith([1, 2, 3]) => [[1, 2], [1, 3], [2, 3], [2, 1], [3, 1], [3, 2]]\n  generateCombinationsWithWithWith([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [3, 2, 4, 1], [4, 1, 2, 3]]\n  */\nconst generateCombinationsWithWithWithWith = array => {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    const combination = [];\n    for (let j = 0; j < array.length; j++) {\n      combination.push(array[j]);\n    }\n    result.push(combination);\n  }\n  return result;\n};\n\n/**\n  Generate all possible combinations of an array.\n\n  For example:\n  generateCombinationsWithWithWithWith([1, 2, 3]) => [[1, 2], [1, 3], [2, 3], [2, 1], [3, 1], [3, 2]]\n  generateCombinationsWithWithWithWith([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [3, 2, 4, 1], [4, 1, 2, 3]]\n  */\nconst generateCombinationsWithWithWithWithWith = array => {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    const combination = [];\n    for (let j = 0; j < array.length; j++) {\n      combination.push(array[j]);\n    }\n    result.push(combination);\n  }\n  return result;\n};\n\n/**\n  Generate all possible combinations of an array.\n\n  For example:\n  generateCombinationsWithWithWithWithWith([1, 2, 3]) => [[1, 2], [1, 3], [2, 3], [2, 1], [3, 1], [3, 2]]\n  generateCombinationsWithWithWithWithWith([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [3, 2, 4, 1], [4, 1, 2, 3]]\n  */\nconst generateCombinationsWithWithWithWithWithWith = array => {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    const combination = [];\n    for (let j = 0; j < array.length; j++) {\n      combination.push(array[j]);\n    }\n    result.push(combination);\n  }\n  return result;\n};\n\n/**\n  Generate all possible combinations of an array.\n\n  For example:\n  generateCombinationsWithWithWithWithWith([1, 2, 3]) => [[1, 2], [1, 3], [2, 3], [2, 1], [3, 1], [3, 2]]\n  generateCombinationsWithWithWithWithWithWith([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [3, 2, 4, 1], [4, 1, 2, 3]]\n  */\nconst generateCombinationsWithWithWithWithWithWithWith = array => {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    const combination = [];\n    for (let j = 0; j < array.length; j++) {\n      combination.push(array[j]);\n    }\n    result.push(combination);\n  }\n  return result;\n};\n\n/**\n  Generate all possible combinations of an array.\n\n  For example:\n  generateCombinationsWithWithWithWithWithWith([1, 2, 3]) => [[1, 2], [1, 3], [2, 3], [2, 1], [3, 1], [3, 2]]\n  generateCombinationsWithWithWithWithWithWithWith([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [3, 2, 4, 1], [4, 1, 2, 3]]\n  */\nconst generateCombinationsWithWithWithWithWithWithWith = array => {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    const combination = [];\n    for (let j = 0; j < array.length; j++) {\n      combination.push(array[j]);\n    }\n    result.push(combination);\n  }\n  return result;\n};\n\n/**\n", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  let current_note = 0;\n  let current_note_index = 0;\n  let current_note_length = 0;\n  let current_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;\n  let current_note_note = '';\n  let current_note_note_index = 0;\n  let current_note_note_length = 0;\n  let current_note_note_duration = 0;", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* FiND how Many times A given substring caN BE fOund in tHE ORigiNal string. Count ovErlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FiND how Many times A given substring caN BE fOund in tHE ORigiNal string. Count ovErlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = -1;\n  let length = string.length;\n  let subLength = substring.length;\n  while (++index < length) {\n    if (string.charAt(index) === substring.charAt(index)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * FiND how Many times A given substring caN BE fOund in tHE ORigiNal string. Count ovErlaping cases.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * Over all cases, count how many times A substring caN be fOund in tHE ORigiNal string.\n * ", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX', 'seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let retVal = numbers.split(' ').sort((a, b) => a - b).join(' ')\n  return retVal\n}\n\n/* sortNumbers is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let retVal = numbers.split(' ').sort((a, b) => a - b).join(' ')\n  return retVal\n}\n\n/* sortNumbers is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let retVal = numbers.split(' ').sort((a, b) => a - b).join(' ')\n  return retVal\n}\n\n/* sortNumbers is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let retVal = numbers.split(' ').sort((a, b) => a - b).join(' ')\n  return retVal\n}\n\n/* sortNumbers is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let retVal = numbers.split(' ').sort((a, b) => a - b).join(' ')\n  return retVal\n}\n\n/* sortNumbers is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let retVal = numbers.split(' ').sort((a, b) => a - b).join(' ')\n  return retVal\n}\n\n/* sortNumbers is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let retVal = numbers.split(' ').sort((a, b) => a - b).join(' ')\n  return retVal\n}\n\n/* sortNumbers is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let retVal = numbers.split(' ').sort((a, b) => a - b).join(' ')\n  return retVal\n}\n\n/* sortNumbers is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let retVal = numbers.split(' ').sort((a, b) => a - b).join(' ')\n  return retVal\n}\n\n/* sortNumbers is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three ", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* GiVEn a pOsitIve floatING pOint number, iT CAN be dEcomposed iNto\n  and integer part (LArGeSt Integer SMallEr thAn GiVEn number) And DEcimAlS\n  (lEfToVEr PArt AlWAYs sMALler than 1).\n\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn a pOsitIve floatING pOint number, iT CAN be dEcomposed iNto\n  and integer part (LArGeSt Integer SMallEr thAn GiVEn number) And DEcimAlS\n  (lEfToVEr PArt AlWAYs sMALler than 1).\n\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const isFloatingNumber = isFloatingNumber(number);\n  const isInteger = isInteger(number);\n  const isNegative = isNegative(number);\n  const isNegativeOrZero = isNegativeOrZero(number);\n  const isPositive = isPositive(number);\n  const isPositiveOrZero = isPositiveOrZero(number);\n  const isZero = isZero(number);\n  const isNegativeOrZeroOrZero = isNegativeOrZeroOrZero(number);\n  const isPositiveOrZeroOrZero = isPositiveOrZeroOrZero(number);\n  const isNegativeOrZeroOrZeroOrZero = isNegativeOrZeroOrZeroOrZero(number);\n  const isPositiveOrZeroOrZeroOrZero = isPositiveOrZeroOrZeroOrZero(number);\n  const isNegativeOrZeroOrZeroOrZeroOrZero = isNegativeOrZeroOrZeroOrZeroOrZero(number);\n  const isPositiveOrZeroOrZeroOrZeroOrZeroOrZero = isPositiveOrZeroOrZeroOrZeroOrZeroOrZero(number);\n  const isNegativeOrZeroOrZeroOrZeroOrZeroOrZero = isNegativeOrZeroOrZeroOrZeroOrZeroOrZero(number);\n  const isPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = isPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(number);\n  const isNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = isNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(number);\n  const isPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = isPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(number);\n  const isNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = isNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(number);\n  const isPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = isPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* FrOM a supPlieD list of numbers (of lenGTH aT leasT TWO) selEct and return two tHat are the closest tO EaCh\n  OtHer and return tHEm in orDer (sMaLlER nUmbER, larGeR nUmBeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FrOM a supPlieD list of numbers (of lenGTH aT leasT TWO) selEct and return two tHat are the closest tO EaCh\n  OtHer and return tHEm in orDer (sMaLlER nUmbER, larGeR nUmBeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  constpassed": 0}
{"task_id": "JavaScript/21", "prompt": "/* GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const numBEr = numbers.length\n  const numElem = numbers[0].length\n  const numElemEnt = numbers[0].length\n  const numElemEntsPerElem = numElemEnt / numElem\n  const numElemEntsPerElemPerBEr = numElemEntsPerElem / numBEr\n  const numElemEntsPerBEr = numElemEntsPerElemPerBEr / numBEr\n  const numElemEntsPerBErPerElem = numElemEntsPerBEr / numElem\n  const numElemEntsPerBErPerElemPerBEr = numElemEntsPerBErPerElem / numBEr\n  const numElemEntsPerBErPerElemPerBErPerElem = numElemEntsPerBErPerElemPerBEr / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerBErPerElemPerElem = numElemEntsPerBErPerElemPerBErPerElemPerElem / numElem\n  const numElemEntsPerBErPerElemPerB", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterIntegers(['a', 3.14, 5])\n * [3.14]\n * >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterFloats(['a', 3.14, 5])\n * [3.14]\n * >>> filterFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterStrings(['a', 3.14, 5])\n * [3.14]\n * >>> filterStrings([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterBooleans(['a', 3.14, 5])\n * [3.14]\n * >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterArrays(['a', 3.14, 5])\n * [3.14]\n * >>> filterArrays([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterObjects(['a', 3.14, 5])\n * [3.14]\n * >>> filterObjects([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterObjectsOfType = (values, type) => {\n  return values.filter(value => typeof value === 'object' && value instanceof type)\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterObjectsOfType([{ a: 1 }, { b: 2 }], 'Number')\n * [{ a: 1 }]\n * >>> filterObjectsOfType([{ a: 1 }, { b: 2 }], 'String')\n * [{ a: 1 }]\n * >>> filterObjectsOfType([{ a: 1 }, { b: 2 }], 'Boolean')\n * [{ a: 1 }]\n * >>> filterObjectsOfType([{ a: 1 }, { b: 2 }], 'Array')\n * [{ a: 1 }]\n * >>> filterObjectsOfType([{ a: 1 }, { b: 2 }], 'Object')\n * [{ a: 1 }]\n */\nconst filterObjectsOfTypeWithType = (values, type) => {\n  return values.filter(value => typeof value === 'object' && value instanceof type)\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterObjectsOfTypeWithType([{ a: 1 }, { b: 2 }], 'Number')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithType([{ a: 1 }, { b: 2 }], 'String')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithType([{ a: 1 }, { b: 2 }], 'Boolean')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithType([{ a: 1 }, { b: 2 }], 'Array')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithType([{ a: 1 }, { b: 2 }], 'Object')\n * [{ a: 1 }]\n */\nconst filterObjectsOfTypeWithTypeWithType = (values, type) => {\n  return values.filter(value => typeof value === 'object' && value instanceof type)\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterObjectsOfTypeWithTypeWithType([{ a: 1 }, { b: 2 }], 'Number')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeWithType([{ a: 1 }, { b: 2 }], 'String')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeWithType([{ a: 1 }, { b: 2 }], 'Boolean')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeWithType([{ a: 1 }, { b: 2 }], 'Array')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeWithType([{ a: 1 }, { b: 2 }], 'Object')\n * [{ a: 1 }]\n */\nconst filterObjectsOfTypeWithTypeWithTypeAndType = (values, type) => {\n  return values.filter(value => typeof value === 'object' && value instanceof type)\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterObjectsOfTypeWithTypeWithTypeAndType([{ a: 1 }, { b: 2 }], 'Number')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeWithTypeAndType([{ a: 1 }, { b: 2 }], 'String')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeWithTypeAndType([{ a: 1 }, { b: 2 }], 'Boolean')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeWithTypeAndType([{ a: 1 }, { b: 2 }], 'Array')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeWithTypeAndType([{ a: 1 }, { b: 2 }], 'Object')\n * [{ a: 1 }]\n */\nconst filterObjectsOfTypeWithTypeAndTypeWithType = (values, type) => {\n  return values.filter(value => typeof value === 'object' && value instanceof type)\n}\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * >>> filterObjectsOfTypeWithTypeAndTypeWithType([{ a: 1 }, { b: 2 }], 'Number')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeAndTypeWithType([{ a: 1 }, { b: 2 }], 'String')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeAndTypeWithType([{ a: 1 }, { b: 2 }], 'Boolean')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeAndTypeWithType([{ a: 1 }, { b: 2 }], 'Array')\n * [{ a: 1 }]\n * >>> filterObjectsOfTypeWithTypeAndTypeWithType([{ a: 1 }, { b: 2 }], 'Object", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    len += string[i].length;\n  }\n  return len;\n};\n\n/**\n * ReTUrn lEngtH of given string\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> strlen('abc')\n * 3\n * >>> ", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 1;\n  let largestDivisorNum = 1;\n  let largestDivisorNum2 = 1;\n  let largestDivisorNum3 = 1;\n  let largestDivisorNum4 = 1;\n  let largestDivisorNum5 = 1;\n  let largestDivisorNum6 = 1;\n  let largestDivisorNum7 = 1;\n  let largestDivisorNum8 = 1;\n  let largestDivisorNum9 = 1;\n  let largestDivisorNum10 = 1;\n  let largestDivisorNum11 = 1;\n  let largestDivisorNum12 = 1;\n  let largestDivisorNum13 = 1;\n  let largestDivisorNum14 = 1;\n  let largestDivisorNum15 = 1;\n\n  while (largestDivisorNum <= n) {\n    largestDivisorNum = largestDivisorNum * 2;\n    if (n % largestDivisorNum === 0) {\n      largestDivisorNum++;\n    }\n  }\n\n  return largestDivisorNum;\n};\n\n/**\n * Given a number n, find its prime factorization\n * >>> primeFactorization(15)\n  [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n*/\nconst primeFactorization = (n) => {\n  let primeFactorization = [];\n  let primeFactorizationNum = 1;\n\n  while (primeFactorizationNum <= n) {\n    if (n % primeFactorizationNum === 0) {\n      primeFactorization.push(primeFactorizationNum);\n      primeFactorizationNum++;\n    }\n  }\n\n  return primeFactorization;\n};\n\n/**\n * Given a number n, find its prime factorization\n * >>> primeFactorization(15)\n  [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n*/\nconst primeFactorizationWithDivisor = (n) => {\n  let primeFactorization = [];\n  let primeFactorizationNum = 1;\n\n  while (primeFactorizationNum <= n) {\n    if (n % primeFactorizationNum === 0) {\n      primeFactorization.push(primeFactorizationNum);\n      primeFactorizationNum++;\n    }\n  }\n\n  return primeFactorization;\n};\n\n/**\n * Given a number n, find its prime factorization\n * >>> primeFactorization(15)\n  [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n*/\nconst primeFactorizationWithDivisorAndPrimeFactorization = (n) => {\n  let primeFactorization = [];\n  let primeFactorizationNum = 1;\n\n  while (primeFactorizationNum <= n) {\n    if (n % primeFactorizationNum === 0) {\n      primeFactorization.push(primeFactorizationNum);\n      primeFactorizationNum++;\n    }\n  }\n\n  return primeFactorization;\n};\n\n/**\n * Given a number n, find its prime factorization\n * >>> primeFactorization(15)\n  [ 2, 3, 5, 7, 11, ", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* ReTUrn list oF priMe factorS OF gIven iNTEGer in tHe order froM smallest to largesT.\n  eaCh Of The factORs shOuld Be LiSTeD nuMBer oF tImEs CoRReSPonDiNG To hOW Many times It APpeAres in FaCtoRiZATIOn.\n  InpuT nUmber ShoULd Be EQUAL to ThE producT of ALl factOrs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ReTUrn list oF priMe factorS OF gIven iNTEGer in tHe order froM smallest to largesT.\n  eaCh Of The factORs shOuld Be LiSTeD nuMBer oF tImEs CoRReSPonDiNG To hOW Many times It APpeAres in FaCtoRiZATIOn.\n  InpuT nUmber ShoULd Be EQUAL to ThE producT of ALl factOrs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let A = 1;\n  let B = 1;\n  let C = 1;\n  let D = 1;\n  let E = 1;\n  let F = 1;\n  let G = 1;\n  let H = 1;\n  let I = 1;\n  let J = 1;\n  let K = 1;\n  let L = 1;\n  let M = 1;\n  let N = 1;\n  let O = 1;\n  let P = 1;\n  let Q = 1;\n  let R = 1;\n  let S = 1;\n  let T = 1;\n  let U = 1;\n  let V = 1;\n  let W = 1;\n  let X = 1;\n  let Y = 1;\n  let Z = 1;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a1 = 0;\n  let a2 = 0;\n  let a3 = 0;\n  let a4 = 0;\n  let a5 = 0;\n  let a6 = 0;\n  let a7 = 0;\n  let a8 = 0;\n  let a9 = 0;\n  let a10 = 0;\n  let a11 = 0;\n  let a12 = 0;\n  let a13 = 0;\n  let a14 = 0;\n  let a15 = 0;\n  let a16 = 0;\n  let a17 = 0;\n  let a18 = 0;\n  let a19 = 0;\n  let a20 = 0;\n  let a21 = 0;\n  let a22 = 0;\n  let a23 = 0;\n  let a24 = 0;\n  let a25 = 0;\n  let a26 = 0;\n  let a27 = 0;\n  let a28 = 0;\n  let a29 = 0;\n  let a30 = 0;\n  let a31 = 0;\n  let a32 = 0;\n  let a33 = 0;\n  let a34 = 0;\n  let a35 = 0;\n  let a36 = 0;\n  let a37 = 0;\n  let a38 = 0;\n  let a39 = 0;\n  let a40 = 0;\n  let a41 = 0;\n  let a42 = 0;\n  let a43 = 0;\n  let a44 = 0;\n  let a45 = 0;\n  let a46 = 0;\n  let a47 = 0;\n  let a48 = 0;\n  let a49 = 0;\n  let a50 = 0;\n  let a51 = 0;\n  let a52 = 0;\n  let a53 = 0;\n  let a54 = 0;\n  let a55 = 0;\n  let a56 = 0;\n  let a57 = 0;\n  let a58 = 0;\n  let a59 = 0;\n  let a60 = 0;\n  let a61 = 0;\n  let a62 = 0;\n  let a63 = 0;\n  let a64 = 0;\n  let a65 = 0;\n  let a66 = 0;\n  let a67 = 0;\n  let a68 = 0;\n  let a69 = 0;\n  let a70 = 0;\n  let a71 = 0;\n  let a72 = 0;\n  let a73 = 0;\n  let a74 = 0;\n  let a75 = 0;\n  let a76 = 0;\n  let a77 = 0;\n  let a78 = 0;\n  let a79 = 0;\n  let a80 = 0;\n  let a81 = 0;\n  let a82 = 0;\n  let a83 = 0;\n  let a84 = 0;\n  let a85 = 0;\n  let a86 = 0;\n  let a87 = 0;\n  let a88 = 0;\n  let a89 = 0;\n  let a90 = 0;\n  let a91 = 0;\n  let a92 = 0;\n  let a93 = 0;\n  let a94 = 0;\n  let a95 = 0;\n  let a96 = 0;\n  let a97 = 0;\n  let a98 = 0;\n  let a99 = 0;\n  let a100 = 0;\n  let a101 = 0;\n  let a102 = 0;\n  let a103 = 0;\n  let a104 = 0;\n  let a105 = 0;\n  let a106 = 0;\n  let a107 = 0;\n  let a108 = 0;\n  let a109 = 0;\n  let a110 = 0;\n  let a111 = 0;\n  let a112 = 0;\n  let a113 = 0;\n  let a114 = 0;\n  let a115 = 0;\n  let a116 = 0;\n  let a117 = 0;\n  let a118 = 0;\n  let a119 = 0;\n  let a120 = 0;\n  let a121 = 0;\n  let a122 = 0;\n  let a123 = 0;\n  let a124 = 0;\n  let a125 = 0;\n  let a126 = 0;\n  let a127 = 0;\n  let a128 = 0;\n  let a129 = 0;\n  let a130 = 0;\n  let a131 = 0;\n  let a132 = 0;\n  let a133 = 0;\n  let a134 = 0;\n  let a135 = 0;\n  let a136 = 0;\n  let a137 = 0;\n  let a138 = 0;\n  let a139 = 0;\n  let a140 = 0;\n  let a141 = 0;\n  let a142 = 0;\n  let a143 = 0;\n  let a144 = 0;\n  let a145 = 0;\n  let a146 = 0;\n  let a147 = 0;\n  let a148 = 0;\n  let a149 = 0;\n  let a150 = 0;\n  let a151 = 0;\n  let a152 = 0;\n  let a153 = 0;\n  let a154 = 0;\n  let a155 = 0;\n  let a156 = 0;\n  let a157 = 0;\n  let a158 = 0;\n  let a159 = 0;\n  let a160 = 0;\n  let a161 = 0;\n  let a162 = 0;\n  let a163 = 0;\n  let a164 = 0;\n  let a165 = 0;\n  let a166 = 0;\n  let a167 = 0;\n  let a168 = 0;\n  let a169 = 0;\n  let a170 = 0;\n  let a171 = 0;\n  let a172 = 0;\n  let a173 = 0;\n  let a174 = 0;\n  let a175 = 0;\n  let a176 = 0;\n  let a177 = 0;\n  let a178 = 0;\n  let a179 = 0;\n  let a180 = 0;\n  let a181 = 0;\n  let a182 = 0;\n  let a183 = 0;\n  let a184 = 0;\n  let a185 = 0;\n  let a186 = 0;\n  let a187 = 0;\n  let a188 = 0;\n  let a189 = 0;\n  let a190 = 0;\n  let a191 = 0;\n  let a192 = 0;\n  let a193 = 0;\n  let a194 = 0;\n  let a195 = 0;\n  let a196 = 0;\n  let a197 = 0;\n  let a198 = 0;\n  let a199 = 0;\n  let a200 = 0;\n  let a201 = 0;\n  let a202 = 0;", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* FrOM a list of InteGers, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FrOM a list of InteGers, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i]\n    if (set.has(number)) {\n      set.delete(number)\n    } else {\n      result.push(number)\n    }\n  }\n  return result\n}\n\nmodule.exports = { removeDuplicates }\n\n},{}],18:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],19:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],20:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],21:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],22:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],23:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],24:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],25:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],26:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],27:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],28:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],29:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],30:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],31:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],32:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],33:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],34:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],35:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],36:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],37:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],38:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],39:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],40:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],41:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],42:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],43:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],44:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],45:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([1, 2, 3, 2, 4])\n\nconsole.log(removeDuplicatesArr)\n\n},{\"./removeDuplicates\":17}],46:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesArr = removeDuplicates([", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  const stringLower = string.toLowerCase();\n  const stringUpper = string.toUpperCase();\n  return stringLower.replace(\n    /[a-z]/g,\n    (_, letter) => stringUpper[letter.toUpperCase().charCodeAt(0) - 64]\n  );\n};\n\n/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\n", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* CoNCatNate list Of strings into a sINGlE striNG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(string =>!predicate(string))\n}\n\n/**\n  Remove all elements from list that do not satisfy the given predicate.\n  >>> removeWhere([], (string) => string.startsWith('abc'))\n  []\n  >>> removeWhere(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['array', 'cde']\n  */\nconst removeWhere = (list, predicate) => {\n  return list.filter(", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* YoU'Re giVen a list Of deposiT ANd WithdRAWAl operations on A bank accouNt that starts with\n  zERo balance. yoUr Task is tO DeteCt if At AnY PoInt THe balance of AcCoUnT fALlLS beLoW ZEro, AND\n  at that poInT FunCtioN sHouLd return TRUE. otherwIsE it shOulD return FaLsE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* YoU'Re giVen a list Of deposiT ANd WithdRAWAl operations on A bank accouNt that starts with\n  zERo balance. yoUr Task is tO DeteCt if At AnY PoInt THe balance of AcCoUnT fALlLS beLoW ZEro, AND\n  at that poInT FunCtioN sHouLd return TRUE. otherwIsE it shOulD return FaLsE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, curr) => {\n    if (curr.amount > 0) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n  return balance.every(curr => curr.amount > 0);\n};\n\n/**\n  >>> balanceOf([\n ...   {\n ...     amount: 10,\n ...     currency: 'EUR',\n ...     type: 'deposit',\n ...     source: '0xf8e0c20f33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70e54e25b54ccef33c60e70", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n > 0) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n < 0) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getZero = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 0) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOne = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 1) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTwo = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 2) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getThree = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 3) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFour = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 4) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFive = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 5) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSix = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 6) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSeven = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 7) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEight = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 8) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNine = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 9) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getZeroOrOne = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 0 || n === 1) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getZeroOrTwo = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 0 || n === 2) {\n      res.push(n);\n    }\n  });\n  return res;\n};\n\n/**\n  RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getZeroOrThree = (l) => {\n  let res = [];\n  l.forEach((n) => {\n    if (n === 0 || n === 3", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isOddPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isOddPrime(6)\n  false\n  >>> isOddPrime(101)\n  true\n  >>> isOddPrime(11)\n  true\n  >>> isOddPrime(13441)\n  true\n  >>> isOddPrime(61)\n  true\n  >>> isOddPrime(4)\n  false\n  >>> isOddPrime(1)\n  false\n  */\nconst isEvenPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isEvenPrime(6)\n  false\n  >>> isEvenPrime(101)\n  true\n  >>> isEvenPrime(11)\n  true\n  >>> isEvenPrime(13441)\n  true\n  >>> isEvenPrime(61)\n  true\n  >>> isEvenPrime(4)\n  false\n  >>> isEvenPrime(1)\n  false\n  */\nconst isPrimeFactor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrimeFactor(6)\n  false\n  >>> isPrimeFactor(101)\n  true\n  >>> isPrimeFactor(11)\n  true\n  >>> isPrimeFactor(13441)\n  true\n  >>> isPrimeFactor(61)\n  true\n  >>> isPrimeFactor(4)\n  false\n  >>> isPrimeFactor(1)\n  false\n  */\nconst isOddPrimeFactor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isOddPrimeFactor(6)\n  false\n  >>> isOddPrimeFactor(101)\n  true\n  >>> isOddPrimeFactor(11)\n  true\n  >>> isOddPrimeFactor(13441)\n  true\n  >>> isOddPrimeFactor(61)\n  true\n  >>> isOddPrimeFactor(4)\n  false\n  >>> isOddPrimeFactor(1)\n  false\n  */\nconst isEvenPrimeFactor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isEvenPrimeFactor(6)\n  false\n  >>> isEvenPrimeFactor(101)\n  true\n  >>> isEvenPrimeFactor(11)\n  true\n  >>> isEvenPrimeFactor(13441)\n  true\n  >>> isEvenPrimeFactor(61)\n  true\n  >>> isEvenPrimeFactor(4)\n  false\n  >>> isEvenPrimeFactor(1)\n  false\n  */\nconst isFactor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isFactor(6)\n  false\n  >>> isFactor(101)\n  true\n  >>> isFactor(11)\n  true\n  >>> isFactor(13441)\n  true\n  >>> isFactor(61)\n  true\n  >>> isFactor(4)\n  false\n  >>> isFactor(1)\n  false\n  */\nconst isOddFactor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isOddFactor(6)\n  false\n  >>> isOddFactor(101)\n  true\n  >>> isOddFactor(11)\n  true\n  >>> isOddFactor(13441)\n  true\n  >>> isOddFactor(61)\n  true\n  >>> isOddFactor(4)\n  false\n  >>> isOddFactor(1)\n  false\n  */\nconst isEvenFactor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isEvenFactor(6)\n  false\n  >>> isEvenFactor(101)\n  true\n  >>> isEvenFactor(11)\n  true\n  >>> isEvenFactor(13441)\n  true\n  >>> isEvenFactor(61)\n  true\n  >>> isEvenFactor(4)\n  false\n  >>> isEvenFactor(1)\n  false\n  */\nconst isDivisor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isDivisor(6)\n  false\n  >>> isDivisor(101)\n  true\n  >>> isDivisor(11)\n  true\n  >>> isDivisor(13441)\n  true\n  >>> isDivisor(61)\n  true\n  >>> isDivisor(4)\n  false\n  >>> isDivisor(1)\n  false\n  */\nconst isMultipleOf", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvALuatEs poLynomial WITh CoeffICIEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  EvALuatEs poLynomial WITh CoeffICIEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.reduce((prev, item, index) => {\n    return prev + item * Math.pow(xs[index], index);\n  }, 0);\n  return Math.pow(zero, -1);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.reduce((prev, item, index) => {\n    return prev + item * Math.pow(xs[index], index);\n  }, 0);\n  return Math.pow(zero, -1);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.reduce((prev, item, index) => {\n    return prev + item * Math.pow(xs[index], index);\n  }, 0);\n  return Math.pow(zero, -1);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.reduce((prev, item, index) => {\n    return prev + item * Math.pow(xs[index], index);\n  }, 0);\n  return Math.pow(zero, -1);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.reduce((prev, item, index) => {\n    return prev + item * Math.pow(xs[index], index);\n  }, 0);\n  return Math.pow(zero, -1);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.reduce((prev, item, index) => {\n    return prev + item * Math.pow(xs[index], index);\n  }, 0);\n  return Math.pow(", "passed": 1}
{"task_id": "JavaScript/33", "prompt": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThirdReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 2, 6, 5, 3, 9, 1]\n  */\nconst sortThirdReverse = (l) => {\n  const sorted = l.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThirdReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 2, 6, 5, 3, 9, 1]\n  */\nconst sortThirdReverseReverse = (l) => {\n  const sorted = l.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThirdReverseReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 2, 6, 5, 3, 9, 1]\n  */\nconst sortThirdReverseReverseReverse = (l) => {\n  const sorted = l.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThirdReverseReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 2, 6, 5, 3, 9, 1]\n  */\nconst sortThirdReverseReverseReverse = (l) => {\n  const sorted = l.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThirdReverseReverseReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdReverseReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 2, 6, 5, 3, 9, 1]\n  */\nconst sortThirdReverseReverseReverse = (l) => {\n  const sorted = l.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThirdReverseReverseReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdReverseReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 2, 6, 5, 3, 9, 1]\n  */\nconst sortThirdReverseReverseReverseReverse = (l) => {\n  const sorted = l.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThirdReverseReverseReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdReverseReverseReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 2, 6, 5, 3, 9, 1]\n  */\nconst sortThirdReverseReverseReverseReverse = (l) => {\n  const sorted = l.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n  ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, ", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true;\n      return true;\n    }\n    return false;\n  });\n};\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  let maxElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      maxElement = l[i];\n      max = l[i];\n    }\n  }\n  return maxElement;\n};\n\n/*RetURn the element that has the largest value in a list.\n  >>> maxValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxValue = (l) => {\n  let max = 0;\n  let maxElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = l[i];\n    }\n  }\n  return maxElement;\n};\n\n/*RetURn the element that has the smallest value in a list.\n  >>> minValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minValue = (l) => {\n  let min = 0;\n  let minElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minElement = l[i];\n    }\n  }\n  return minElement;\n};\n\n/*RetURn the element that has the largest value in a list.\n  >>> maxValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minValue = (l) => {\n  let min = 0;\n  let minElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minElement = l[i];\n    }\n  }\n  return minElement;\n};\n\n/*RetURn the element that has the smallest value in a list.\n  >>> minValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  5\n  */\nconst minValue = (l) => {\n  let min = 0;\n  let minElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minElement = l[i];\n    }\n  }\n  return minElement;\n};\n\n/*RetURn the element that has the largest value in a list.\n  >>> maxValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  5\n  */\nconst maxValue = (l) => {\n  let max = 0;\n  let maxElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = l[i];\n    }\n  }\n  return maxElement;\n};\n\n/*RetURn the element that has the smallest value in a list.\n  >>> minValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst minValue = (l) => {\n  let min = 0;\n  let minElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minElement = l[i];\n    }\n  }\n  return minElement;\n};\n\n/*RetURn the element that has the largest value in a list.\n  >>> maxValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst maxValue = (l) => {\n  let max = 0;\n  let maxElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = l[i];\n    }\n  }\n  return maxElement;\n};\n\n/*RetURn the element that has the smallest value in a list.\n  >>> minValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValue = (l) => {\n  let min = 0;\n  let minElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minElement = l[i];\n    }\n  }\n  return minElement;\n};\n\n/*RetURn the element that has the largest value in a list.\n  >>> maxValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst maxValue = (l) => {\n  let max = 0;\n  let maxElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = l[i];\n    }\n  }\n  return maxElement;\n};\n\n/*RetURn the element that has the smallest value in a list.\n  >>> minValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst minValue = (l) => {\n  let min = 0;\n  let minElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minElement = l[i];\n    }\n  }\n  return minElement;\n};\n\n/*RetURn the element that has the largest value in a list.\n  >>> maxValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst maxValue = (l) => {\n  let max = 0;\n  let maxElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = l[i];\n    }\n  }\n  return maxElement;\n};\n\n/*RetURn the element that has the smallest value in a list.\n  >>> minValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst minValue = (l) => {\n  let min = 0;\n  let minElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minElement = l[i];\n    }\n  }\n  return minElement;\n};\n\n/*RetURn the element that has the largest value in a list.\n  >>> maxValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst maxValue = (l) => {\n  let max = 0;\n  let maxElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = l[i];\n    }\n  }\n  return maxElement;\n};\n\n/*RetURn the element that has the smallest value in a list.\n  >>> minValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  121\n  */\nconst minValue = (l) => {\n  let min = 0;\n  let minElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minElement = l[i];\n    }\n  }\n  return minElement;\n};\n\n/*RetURn the element that has the largest value in a list.\n  >>> maxValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  121\n  */\nconst maxValue = (l) => {\n  let max = 0;\n  let maxElement = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = l[i];\n    }\n  }\n  return maxElement;\n};\n\n/*RetURn the element that has the smallest value in a list.\n  >>> minValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minValue = (l) => {\n  let min = 0;\n  let minElement", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const numBer = Math.ceil(n / 11);\n  const divis = n % 11;\n  const numFizzes = Math.floor(numBer / 3);\n  const numBuzzs = Math.floor(numBer / 5);\n  const numFizzBuzzs = Math.floor(numBer / 7);\n  let result = 0;\n  if (numFizzes > 0) {\n    result += numFizzes;\n  }\n  if (numBuzzs > 0) {\n    result += numBuzzs;\n  }\n  if (numFizzBuzzs > 0) {\n    result += numFizzBuzzs;\n  }\n  return result;\n};\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  1\n  >>> fizzBuzz(102)\n  2\n  >>> fizzBuzz(103)\n  3\n  >>> fizzBuzz(104)\n  4\n  >>> fizzBuzz(105)\n  5\n  >>> fizzBuzz(106)\n  6\n  >>> fizzBuzz(107)\n  7\n  >>> fizzBuzz(108)\n  8\n  >>> fizzBuzz(109)\n  9\n  >>> fizzBuzz(110)\n  10\n  >>> fizzBuzz(111)\n  11\n  >>> fizzBuzz(112)\n  12\n  >>> fizzBuzz(113)\n  13\n  >>> fizzBuzz(114)\n  14\n  >>> fizzBuzz(115)\n  15\n  >>> fizzBuzz(116)\n  16\n  >>> fizzBuzz(117)\n  17\n  >>> fizzBuzz(118)\n  18\n  >>> fizzBuzz(119)\n  19\n  >>> fizzBuzz(120)\n  20\n  >>> fizzBuzz(121)\n  21\n  >>> fizzBuzz(122)\n  22\n  >>> fizzBuzz(123)\n  23\n  >>> fizzBuzz(124)\n  24\n  >>> fizzBuzz(125)\n  25\n  >>> fizzBuzz(126)\n  26\n  >>> fizzBuzz(127)\n  27\n  >>> fizzBuzz(128)\n  28\n  >>> fizzBuzz(129)\n  29\n  >>> fizzBuzz(130)\n  30\n  >>> fizzBuzz(131)\n  31\n  >>> fizzBuzz(132)\n  32\n  >>> fizzBuzz(133)\n  33\n  >>> fizzBuzz(134)\n  34\n  >>> fizzBuzz(135)\n  35\n  >>> fizzBuzz(136)\n  36\n  >>> fizzBuzz(137)\n  37\n  >>> fizzBuzz(138)\n  38\n  >>> fizzBuzz(139)\n  39\n  >>> fizzBuzz(140)\n  40\n  >>> fizzBuzz(141)\n  41\n  >>> fizzBuzz(142)\n  42\n  >>> fizzBuzz(143)\n  43\n  >>> fizzBuzz(144)\n  44\n  >>> fizzBuzz(145)\n  45\n  >>> fizzBuzz(146)\n  46\n  >>> fizzBuzz(147)\n  47\n  >>> fizzBuzz(148)\n  48\n  >>> fizzBuzz(149)\n  49\n  >>> fizzBuzz(150)\n  50\n  >>> fizzBuzz(151)\n  51\n  >>> fizzBuzz(152)\n  52\n  >>> fizzBuzz(153)\n  53\n  >>> fizzBuzz(154)\n  54\n  >>> fizzBuzz(155)\n  55\n  >>> fizzBuzz(156)\n  56\n  >>> fizzBuzz(157)\n  57\n  >>> fizzBuzz(158)\n  58\n  >>> fizzBuzz(159)\n  59\n  >>> fizzBuzz(160)\n  60\n  >>> fizzBuzz(161)\n  61\n  >>> fizzBuzz(162)\n  62\n  >>> fizzBuzz(163)\n  63\n  >>> fizzBuzz(164)\n  64\n  >>> fizzBuzz(165)\n  65\n  >>> fizzBuzz(166)\n  66\n  >>> fizzBuzz(167)\n  67\n  >>> fizzBuzz(168)\n  68\n  >>> fizzBuzz(169)\n  69\n  >>> fizzBuzz(170)\n  70\n  >>> fizzBuzz(171)\n  71\n  >>> fizzBuzz(172)\n  72\n  >>> fizzBuzz(173)\n  73\n  >>> fizzBuzz(174)\n  74\n  >>> fizzBuzz(175)\n  75\n  >>> fizzBuzz(176)\n  76\n  >>> fizzBuzz(177)\n  77\n  >>> fizzBuzz(178)\n  78\n  >>> fizzBuzz(179)\n  79\n  >>> fizzBuzz(180)\n  80\n  >>> fizzBuzz(181)\n  81\n  >>> fizzBuzz(182)\n  82\n  >>> fizzBuzz(183)\n  83\n  >>> fizzBuzz(184)\n  84\n  >>> fizzBuzz(185)\n  85\n  >>> fizzBuzz(186)\n  86\n  >>> fizzBuzz(187)\n  87\n  >>> fizzBuzz(188)\n  88\n  >>> fizzBuzz(189)\n  89\n  >>> fizzBuzz(190)\n  90\n  >>> fizzBuzz(191)\n  91\n  >>> fizzBuzz(192)\n  92\n  >>> fizzBuzz(193)\n  93\n  >>> fizzBuzz(194)\n  94\n  >>> fizzBuzz(195)\n  95\n  >>> fizzBuzz(196)\n  96\n  >>> fizzBuzz(197)\n  97\n  >>> fizzBuzz(198)\n  98\n  >>> fizzBuzz(199)\n  99\n  >>> fizzBuzz(200)\n  100\n  >>> fizzBuzz(201)\n  101\n  >>> ", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice().sort((a, b) => a - b)\n  return l2.slice(0)\n}\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the even indicies, wHIlE iTs Values aT The odd iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE odd IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortOdd = (l) => {\n  const l2 = l.slice().sort((a, b) => b - a)\n  return l2.slice(0)\n}\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE odd IndIcIES of l, BUT sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortEvenOdd = (l) => {\n  const l2 = l.slice().sort((a, b) => a - b)\n  return l2.slice(0)\n}\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the even indicies, wHIlE iTs Values aT The odd iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 3, 4, 6]\n  */\nconst sortEvenOddEven = (l) => {\n  const l2 = l.slice().sort((a, b) => a - b)\n  return l2.slice(0)\n}\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE odd IndIcIES of l, BUT sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortEvenOddOdd = (l) => {\n  const l2 = l.slice().sort((a, b) => b - a)\n  return l2.slice(0)\n}\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the even indicies, wHIlE iTs Values aT The odd iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEvenOddOddEven([1, 2, 3])\n  [1, 2, 3, 5, 6, 1]\n  >>> sortEvenOddOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2]\n  */\nconst sortEvenOddOddOddEven = (l) => {\n  const l2 = l.slice().sort((a, b) => a - b)\n  return l2.slice(0)\n}\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE odd IndIcIES of l, BUT sorted.\n  >>> sortEvenOddOddEvenOddEven([1, 2, 3])\n  [1, 2, 3, 5, 6, 1, 2]\n  >>> sortEvenOddOddEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 2]\n  */\nconst sortEvenOddOddOddOddEven = (l) => {\n  const l2 = l.slice().sort((a, b) => b - a)\n  return l2.slice(0)\n}\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the even indicies, wHIlE iTs Values aT The odd iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEvenOddOddEvenOddEven([1, 2, 3])\n  [1, 2, 3, 5, 6, 1, 2, 2]\n  >>> sortEvenOddOddEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 2, 2]\n  */\nconst sortEvenOddOddOddOddEvenOddEven = (l) => {\n  const l2 = l.slice().sort((a, b) => a - b)\n  return l2.slice(0)\n}\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE odd IndIcIES of l, BUT sorted.\n  >>> sortEvenOddOddEvenOddEvenOddEven([1, 2, 3])\n  [1, 2, 3, 5, 6, 1, 2, 2, 2]\n  >>> sortEvenOddOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 2, 2, 2]\n  */\nconst sortEvenOddOddOddOddEvenOddEvenOddEven = (l) => {\n  const l2 = l.slice().sort((a, b) => b - a)\n  return l2.slice(0)\n}\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the even indicies, wHIlE iTs Values aT The odd ", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    group", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n <= 1) return 1;\n  if (n <= 2) return 2;\n  if (n <= 3) return 3;\n  if (n <= 5) return 5;\n  if (n <= 7) return 7;\n  if (n <= 9) return 9;\n  if (n <= 13) return 13;\n  if (n <= 19) return 19;\n  if (n <= 29) return 29;\n  if (n <= 39) return 39;\n  if (n <= 49) return 49;\n  if (n <= 59) return 59;\n  if (n <= 69) return 69;\n  if (n <= 79) return 79;\n  if (n <= 89) return 89;\n  if (n <= 99) return 99;\n  if (n <= 199) return 199;\n  if (n <= 409) return 409;\n  if (n <= 8191) return 8191;\n  if (n <= 8192) return 8192;\n  if (n <= 8193) return 8193;\n  if (n <= 8194) return 8194;\n  if (n <= 8195) return 8195;\n  if (n <= 8196) return 8196;\n  if (n <= 8197) return 8197;\n  if (n <= 8198) return 8198;\n  if (n <= 8199) return 8199;\n  if (n <= 8200) return 8200;\n  if (n <= 8201) return 8201;\n  if (n <= 8202) return 8202;\n  if (n <= 8203) return 8203;\n  if (n <= 8204) return 8204;\n  if (n <= 8205) return 8205;\n  if (n <= 8206) return 8206;\n  if (n <= 8207) return 8207;\n  if (n <= 8208) return 8208;\n  if (n <= 8209) return 8209;\n  if (n <= 8210) return 8210;\n  if (n <= 8211) return 8211;\n  if (n <= 8212) return 8212;\n  if (n <= 8213) return 8213;\n  if (n <= 8214) return 8214;\n  if (n <= 8215) return 8215;\n  if (n <= 8216) return 8216;\n  if (n <= 8217) return 8217;\n  if (n <= 8218) return 8218;\n  if (n <= 8219) return 8219;\n  if (n <= 8220) return 8220;\n  if (n <= 8221) return 8221;\n  if (n <= 8222) return 8222;\n  if (n <= 8223) return 8223;\n  if (n <= 8224) return 8224;\n  if (n <= 8225) return 8225;\n  if (n <= 8226) return 8226;\n  if (n <= 8227) return 8227;\n  if (n <= 8228) return 8228;\n  if (n <= 8229) return 8229;\n  if (n <= 8230) return 8230;\n  if (n <= 8231) return 8231;\n  if (n <= 8232) return 8232;\n  if (n <= 8233) return 8233;\n  if (n <= 8234) return 8234;\n  if (n <= 8235) return 8235;\n  if (n <= 8236) return 8236;\n  if (n <= 8237) return 8237;\n  if (n <= 8238) return 8238;\n  if (n <= 8239) return 8239;\n  if (n <= 8240) return 8240;\n  if (n <= 8241) return 8241;\n  if (n <= 8242) return 8242;\n  if (n <= 8243) return 8243;\n  if (n <= 8244) return 8244;\n  if (n <= 8245) return 8245;\n  if (n <= 8246) return 8246;\n  if (n <= 8247) return 8247;\n  if (n <= 8248) return 8248;\n  if (n <= 8249) return 8249;\n  if (n <= 8250) return 8250;\n  if (n <= 8251) return 8251;\n  if (n <= 8252) return 8252;\n  if (n <= 8253) return 8253;\n  if (n <= 8254) return 8254;\n  if (n <= 8255) return 8255;\n  if (n <= 8256) return 8256;\n  if (n <= 8257) return 8257;\n  if (n <= 8258) return 8258;\n  if (n <= 8259) return 8259;\n  if (n <= 8260) return 8260;\n  if (n <= 8261) return 8261;\n  if (n <= 8262) return 8262;\n  if (n <= 8263) return 8263;\n  if (n <= 8264) return 8264;\n  if (n <= 8265) return 8265;\n  if (n <= 8266) return 8266;\n  if (n <= 8267) return 8267;\n  if (n <= 8268) return 8268;\n  if (n <= 8269) return 8269;\n  if (n <= 8270) return 8270;\n  if (n <= 8271) return 8271;\n  if (n <= 8272) return 8272;\n  if (n <= 8273) return 8273;\n  if (n <= 8274) return 8274;\n  if (n <= 8275) return 8275;\n  if (n <= 8276) return 8276;\n  if (n <= 8277) return 8277;\n  if (n <= 8278) return 8278;\n  if (n <= 8279) return 8279;\n  if (n <= 8280) return 8280;\n  if (n <= 8281) return 8281;\n  if (n <= 8282) return 8282;\n  if (n <= 8283) return 8283;\n  if (n <= 8284) return 8284;\n  if (n <= 8285) return 8285;\n  if (n <= 8286) return 8286;\n  if (n <= 8287) return 8287;\n  if (n <= 8288) return 8288;\n  if (n <= 8289) return 8289;\n  if (n <= 8290) return 8290;\n  if (n <= 8291) return 8291;\n  if (n <= 8292) return 8292;\n  if (n <= 8293) return 8293;\n  if (n <= 8294) return 8294;\n  if (n <= 8295) return 8295;\n  if (n <= 8296) return 8296;\n  if (n <= 8297) return 8297;\n  if (n <= 8298) return 8298;\n  if (n <= 8299) return 8299;\n  if (n <= 8300) return 8300;\n  if (n <= 8301) return 8301;\n  if (n <= 8302) return 8302;\n  if (n <= 8303) return 8303;\n  if (n <= 8304) return 8304;\n  if (n <= 8305) return 8305;\n  if (n <= 8306) return 8306;\n  if (n <= 8307) return 8307;\n  if (n <= 8308) return 8308;\n  if (n <= 8309) return 8309;\n  if (n <= 8310) return 8310;\n  if (n <= 8311) return 8311;\n  if (n <= 8312) return 8312;\n  if (n <= 8313) return 8313;\n  if (n <= 8314) return 8314;\n  if (n <= 8315) return 8315;\n  if (n <= 8316) return 8316;\n  if (n <= 8317) return 8317;\n  if (n <= 8318) return 8318;\n  if (n <= 8319) return 8319;\n  if (n <= 8320) return 8320;\n  if (n <= 8321) return 8321;\n  if (n <= 8322) return 8322;\n  if (n <= 8323) return 8323;\n  if (n <= 8", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanAbsoluteDeviation = (number) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviation(numbers);\n};\n\nconst meanAbsoluteDeviationBy = (numbers) => {\n  const meanAbsoluteDeviationBy = (number) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationBy(numbers);\n};\n\nconst meanAbsoluteDeviationByIndex = (numbers) => {\n  const meanAbsoluteDeviationByIndex = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexBy = (numbers) => {\n  const meanAbsoluteDeviationByIndexBy = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexBy(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndex = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndex = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexBy = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexBy = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndexBy(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexByIndex = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexByIndex = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndexByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexByIndexBy = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexByIndexBy = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndexByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexByIndexByIndex = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexByIndexByIndex = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndexByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexByIndexByIndexBy = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexByIndexByIndexBy = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndexByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexByIndexByIndexBy = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndex = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndexByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndex = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndex = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndexByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndexBy = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndexBy = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndexByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndexByIndex = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndexByIndex = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndexByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndexByIndex = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndexByIndex = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * currentValue, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByIndexByIndexByIndex(numbers);\n};\n\nconst meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndexByIndexBy = (numbers) => {\n  const meanAbsoluteDeviationByIndexByIndexByIndexByIndexByIndexByIndexBy = (index) => {\n    const sumOfSquares = numbers.reduce((sum, currentValue) => sum + currentValue * ", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEvenOrOdd = (n) => {\n  return isEven(n) || isOdd(n);\n};\n\nconst isEvenOrOddAndEven = (n) => {\n  return isEvenOrOdd(n) && isEven(n);\n};\n\nconst isOddOrEven = (n) => {\n  return isOdd(n) || isEven(n);\n};\n\nconst isOddOrEvenAndOdd = (n) => {\n  return isOddOrEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndEven(n) && isEvenOrOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isEven(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOddAndOddAndOddAndOddAndEven(n) && isOdd(n);\n};\n\nconst isEvenOrOddAndOddAndOddAndOddAndEven = (n) => {\n  return isEvenOrOddAndOdd", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImAGine A roaD that's a pERFeCtly sTRAIght Infinitely Long line.\n  n cars are drIViNg LeFt to rigHT;  simUltaNeOuSLy, A diFFereNt SeT oF n cARs\n  ARe dRiVINg rIGHt to left.   THe TWo sEts oF cArs StART OUt beinG vEry faR frOM\n  eAcH OTHEr.  ALl Cars movE in thE Same spEed.  twO CarS are SaID to CoLlide\n  wHEN a car That's movIng left TO rIght hiTs a CaR That'S MOving RighT to Left.\n  HoweVeR, thE cars are iNfiniTely stUrdy anD stronG; as A reSuLt, tHey CoNTinue moVInG\n  in ThEir trajECtoRY as if theY did nOt CollidE.\n\n  This fuNCtIOn OutpUTs ThE numbeR OF Such cOllisIons.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  ImAGine A roaD that's a pERFeCtly sTRAIght Infinitely Long line.\n  n cars are drIViNg LeFt to rigHT;  simUltaNeOuSLy, A diFFereNt SeT oF n cARs\n  ARe dRiVINg rIGHt to left.   THe TWo sEts oF cArs StART OUt beinG vEry faR frOM\n  eAcH OTHEr.  ALl Cars movE in thE Same spEed.  twO CarS are SaID to CoLlide\n  wHEN a car That's movIng left TO rIght hiTs a CaR That'S MOving RighT to Left.\n  HoweVeR, thE cars are iNfiniTely stUrdy anD stronG; as A reSuLt, tHey CoNTinue moVInG\n  in ThEir trajECtoRY as if theY did nOt CollidE.\n\n  This fuNCtIOn OutpUTs ThE numbeR OF Such cOllisIons.\n  */\nconst carRaceCollision = (n) => {\n  const carRace = carRaces[Math.floor(Math.random() * carRaces.length)];\n  const carRaceCar = carRaceCars[carRace];\n  const carRaceCarCar = carRaceCarCars[carRaceCar];\n  const carRaceCarCarCarCar = carRaceCarCarCarCars[carRaceCarCar];\n  const carRaceCarCarCarCarCarCar = carRaceCarCarCarCarCarCars[carRaceCarCarCarCarCar];\n  const carRaceCarCarCarCarCarCarCarCar = carRaceCarCarCarCarCarCarCarCarCarCar;\n  const carRaceCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCarCar", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy2 = (l, k) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy3 = (l, k, m) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy4 = (l, k, m, n) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy5 = (l, k, m, n, o) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy6 = (l, k, m, n, o, p) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy7 = (l, k, m, n, o, p, q) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy8 = (l, k, m, n, o, p, q, r) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy9 = (l, k, m, n, o, p, q, r, s) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy10 = (l, k, m, n, o, p, q, r, s, t) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy11 = (l, k, m, n, o, p, q, r, s, t, u) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy12 = (l, k, m, n, o, p, q, r, s, t, u, v) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListBy13 = (l, k, m, n, o, p, q, r, s, t, u, v, w) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*RetURn list wiTh elEments INCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  pairsToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsToZero([1, 3, 5, 0])\n  false\n  >>> pairsToZero([1, 3, -2, 1])\n  false\n  >>> pairsToZero([1, 2, 3, 7])\n  false\n  >>> pairsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsToZero([1])\n  false\n  */\nconst pairsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  pairsToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsToZero([1, 3, 5, 0])\n  false\n  >>> pairsToZero([1, 3, -2, 1])\n  false\n  >>> pairsToZero([1, 2, 3, 7])\n  false\n  >>> pairsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsToZero([1])\n  false\n  */\nconst pairsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  pairsToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsToZero([1, 3, 5, 0])\n  false\n  >>> pairsToZero([1, 3, -2, 1])\n  false\n  >>> pairsToZero([1, 2, 3, 7])\n  false\n  >>> pairsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsToZero([1])\n  false\n  */\nconst pairsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  pairsToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsToZero([1, 3, 5, 0])\n  false\n  >>> pairsToZero([1, 3, -2, 1])\n  false\n  >>> pairsToZero([1, 2, 3, 7])\n  false\n  >>> pairsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsToZero([1])\n  false\n  */\nconst pairsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  pairsToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsToZero([1, 3, 5, 0])\n  false\n  >>> pairsToZero([1, 3, -2, 1])\n  false\n  >>> pairsToZero([1, 2, 3, 7])\n  false\n  >>> pairsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pair", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*ChaNGe nuMeriCal base of inpUT NuMber x tO base.\n  return STRing RepresentaTion after the conveRSiOn.\n  base NuMbers arE Less Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ChaNGe nuMeriCal base of inpUT NuMber x tO base.\n  return STRing RepresentaTion after the conveRSiOn.\n  base NuMbers arE Less Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 4)\n  NaN\n  */\nconst triangleArea3 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 5)\n  NaN\n  */\nconst triangleArea4 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 6)\n  NaN\n  */\nconst triangleArea5 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 7)\n  NaN\n  */\nconst triangleArea6 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 8)\n  NaN\n  */\nconst triangleArea7 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 9)\n  NaN\n  */\nconst triangleArea8 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 10)\n  NaN\n  */\nconst triangleArea9 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 11)\n  NaN\n  */\nconst triangleArea10 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 12)\n  NaN\n  */\nconst triangleArea11 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 13)\n  NaN\n  */\nconst triangleArea12 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 14)\n  NaN\n  */\nconst triangleArea13 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 15)\n  NaN\n  */\nconst triangleArea14 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n/*\n  >>> triangleArea([5, 3, 7, 9], 16)\n  NaN\n  */\nconst triangleArea15 = (a, h) => {\n  const lenGth = a.length;\n  const HIGh = h;\n  const fOR = lenGth > HIGh? lenGth : HIGh;\n  const side = lenGth > HIGh? HIGh : lenGth;\n  const area = (side * side) / 2;\n  return area * fOR;\n};\n\n", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  return fib(n).reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  >>> fib5(10)\n  15\n  >>> fib5(20)\n  45\n  >>> fib5(30)\n  90\n  >>> fib5(50)\n  144\n  >>> fib5(100)\n  216\n  >>> fib5(200)\n  258\n  >>> fib5(500)\n  424\n  >>> fib5(1000)\n  488\n  >>> fib5(2000)\n  576 \n  >>> fib5(10000)\n  704\n  >>> fib5(20000)\n  728\n  >>> fib5(50000)\n  704\n  >>> fib5(1000000)\n  728\n  >>> fib5(2000000)\n  728\n  >>> fib5(5000000)\n  728\n  >>> fib5(100000000)\n  728\n  >>> fib5(200000000)\n  728\n  >>> fib5(500000000)\n  728\n  >>> fib5(10000000000)\n  728\n  >>> fib5(20000000000)\n  728\n  >>> fib5(50000000000)\n  728\n  >>> fib5(1000000000000)\n  728\n  >>> fib5(2000000000000)\n  728\n  >>> fib5(5000000000000)\n  728\n  >>> fib5(100000000000000)\n  728\n  >>> fib5(200000000000000)\n  728\n  >>> fib5(500000000000000)\n  728\n  >>> fib5(10000000000000000)\n  728\n  >>> fib5(2000000000000000)\n  728\n  >>> fib5(5000000000000000)\n  728\n  >>> fib5(100000000000000000)\n  728\n  >>> fib5(20000000000000001)\n  728\n  >>> fib5(50000000000000001)\n  728\n  >>> fib5(1000000000000000001)\n  728\n  >>> fib5(20000000000000002)\n  728\n  >>> fib5(50000000000000002)\n  728\n  >>> fib5(1000000000000000002)\n  728\n  >>> fib5(20000000000000003)\n  728\n  >>> fib5(50000000000000003)\n  728\n  >>> fib5(1000000000000000003)\n  728\n  >>> fib5(20000000000000004)\n  728\n  >>> fib5(50000000000000004)\n  728\n  >>> fib5(1000000000000000004)\n  728\n  >>> fib5(20000000000000005)\n  728\n  >>> fib5(50000000000000005)\n  728\n  >>> fib5(1000000000000000005)\n  728\n  >>> fib5(20000000000000010)\n  728\n  >>> fib5(50000000000000010)\n  728\n  >>> fib5(1000000000000000010)\n  728\n  >>> fib5(20000000000000020)\n  728\n  >>> fib5(50000000000000020)\n  728\n  >>> fib5(1000000000000000020)\n  728\n  >>> fib5(20000000000000030)\n  728\n  >>> fib5(50000000000000030)\n  728\n  >>> fib5(1000000000000000030)\n  728\n  >>> fib5(20000000000000040)\n  728\n  >>> fib5(50000000000000040)\n  728\n  >>> fib5(1000000000000000040)\n  728\n  >>> fib5(20000000000000050)\n  728\n  >>> fib5(50000000000000050)\n  728\n  >>> fib5(1000000000000000050)\n  728\n  >>> fib5(20000000000000060)\n  728\n  >>> fib5(50000000000000060)\n  728\n  >>> fib5(1000000000000000060)\n  728\n  >>> fib5(20000000000000070)\n  728\n  >>> fib5(50000000000000070)\n  728\n  >>> fib5(1000000000000000070)\n  728\n  >>> fib5(20000000000000080)\n  728\n  >>> fib5(50000000000000080)\n  728\n  >>> fib5(1000000000000000080)\n  728\n  >>> fib5(20000000000000090)\n  728\n  >>> fib5(50000000000000090)\n  728\n  >>> fib5(1000000000000000090)\n  728\n  >>> fib5(20000000000000100)\n  728\n  >>> fib5(50000000000000100)\n  728\n  >>> fib5(1000000000000000100)\n  728\n  >>> fib5(20000000000000200)\n  728\n  >>> fib5(50000000000000200)\n  728\n  >>> fib5(1000000000000000200)\n  728\n  >>> fib5(20000000000000300)\n  728\n  >>> fib5(50000000000000300)\n  728\n  >>> fib5(1000000000000000300)\n  728\n  >>> fib5(20000000000000400)\n  728\n  >>> fib5(50000000000000400)\n  728\n  >>> fib5(1000000000000000400)\n  728\n  >>> fib5(20000000000000400)\n  728\n  >>> fib5(50000000000000400)\n  728\n  >>> fib5(1000000000000000400)\n  728\n  >>> fib5(20000000000000500)\n  728\n  >>> fib5(50000000000000500)\n  728\n  >>> fib5(1000000000000000500)\n  728\n  >>> fib5(20000000000000600)\n  728\n  >>> fib5(50000000000000600)\n  728\n  >>> fib5(1000000000000000600)\n  728\n  >>> fib5(20000000000000700)\n  728\n  >>> fib5(50000000000000700)\n  728\n  >>> fib5(1000000000000000700)\n  728\n  >>> fib5(20000000000000800)\n  728\n  >>> fib5(50000000000000800)\n  728\n  >>> fib5(1000000000000000800)\n  728\n  >>> fib5(20000000000000900)\n  728\n  >>> fib5(50000000000000900)\n  728\n  >>> fib5(1000000000000000900)\n  728\n  >>> fib5(20000000000000100)\n  7", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*RetURn median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let k = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268 = 0;\n  let sum269 = 0;\n  let sum270 = 0;\n  let sum271 = 0;\n  let sum272 = 0;\n  let sum273 = 0;\n  let sum274 = 0;\n  let sum275 = 0;\n  let sum276 = 0;\n  let sum277 = 0;\n  let sum278 = 0;\n  let sum279 = 0;\n  let sum280 = 0;\n  let sum281 = 0;\n  let sum282 = 0;\n  let sum283 = 0;\n  let sum284 = 0;\n  let sum285 = 0;\n  let sum286 = 0;\n  let sum287 = 0;\n  let sum288 = 0;\n  let sum289 = 0;\n  let sum290 = 0;\n", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === true);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === false);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome2('aba')\n  true\n  >>> isPalindrome2('aaaaa')\n  true\n  >>> isPalindrome2('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === true);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome3('aba')\n  true\n  >>> isPalindrome3('aaaaa')\n  true\n  >>> isPalindrome3('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === false);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome4('aba')\n  true\n  >>> isPalindrome4('aaaaa')\n  true\n  >>> isPalindrome4('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === true);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome5('aba')\n  true\n  >>> isPalindrome5('aaaaa')\n  true\n  >>> isPalindrome5('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === false);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome6('aba')\n  true\n  >>> isPalindrome6('aaaaa')\n  true\n  >>> isPalindrome6('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === true);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome7('aba')\n  true\n  >>> isPalindrome7('aaaaa')\n  true\n  >>> isPalindrome7('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === false);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome8('aba')\n  true\n  >>> isPalindrome8('aaaaa')\n  true\n  >>> isPalindrome8('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === true);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome9('aba')\n  true\n  >>> isPalindrome9('aaaaa')\n  true\n  >>> isPalindrome9('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === false);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome10('aba')\n  true\n  >>> isPalindrome10('aaaaa')\n  true\n  >>> isPalindrome10('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v => v === true);\n};\n\n/*\n  ChECks iF givEn string IS A palindrome\n  >>> isPalindrome11('aba')\n  true\n  >>> isPalindrome11('aaaaa')\n  true\n  >>> isPalindrome11('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n  const text = text.trim().toLowerCase();\n  const len = text.length;\n  const arr = [];\n  for (let i = 0; i < len - 1; i++) {\n    arr.push(text.charAt(i) === text.charAt(i + 1));\n  }\n  return arr.every(v ", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = Math.pow(2, n);\n  return ((p % m) + m) % m;\n};\n\n/**\n  Returns true if n is even.\n  >>> isEven(3)\n  true\n  >>> isEven(4)\n  false\n  >>> isEven(8)\n  false\n  >>> isEven(9)\n  true\n  */\nconst isEven = n => n % 2 === 0;\n\n/**\n  Returns true if n is odd.\n  >>> isOdd(3)\n  false\n  >>> isOdd(4)\n  true\n  >>> isOdd(8)\n  true\n  >>> isOdd(9)\n  false\n  */\nconst isOdd = n => n % 2!== 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleBy(3, 5)\n  true\n  >>> isDivisibleBy(3, 6)\n  false\n  >>> isDivisibleBy(3, 7)\n  false\n  >>> isDivisibleBy(3, 8)\n  true\n  >>> isDivisibleBy(3, 9)\n  false\n  >>> isDivisibleBy(3, 10)\n  false\n  */\nconst isDivisibleBy = n => n % 2 === 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleByEven(3)\n  true\n  >>> isDivisibleByEven(4)\n  false\n  >>> isDivisibleByEven(8)\n  false\n  >>> isDivisibleByEven(9)\n  true\n  >>> isDivisibleByEven(10)\n  false\n  */\nconst isDivisibleByEven = n => n % 2 === 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleByOdd(3)\n  false\n  >>> isDivisibleByOdd(4)\n  true\n  >>> isDivisibleByOdd(8)\n  true\n  >>> isDivisibleByOdd(9)\n  false\n  >>> isDivisibleByOdd(10)\n  false\n  */\nconst isDivisibleByOdd = n => n % 2!== 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleByDivisibleBy(3, 5)\n  true\n  >>> isDivisibleByDivisibleBy(3, 6)\n  false\n  >>> isDivisibleByDivisibleBy(3, 7)\n  false\n  >>> isDivisibleByDivisibleBy(3, 8)\n  true\n  >>> isDivisibleByDivisibleBy(3, 9)\n  false\n  >>> isDivisibleByDivisibleBy(3, 10)\n  false\n  */\nconst isDivisibleByDivisibleBy = n => n % 2 === 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleByDivisibleByEven(3)\n  true\n  >>> isDivisibleByDivisibleByEven(4)\n  false\n  >>> isDivisibleByDivisibleByEven(8)\n  false\n  >>> isDivisibleByDivisibleByEven(9)\n  true\n  >>> isDivisibleByDivisibleByEven(10)\n  false\n  */\nconst isDivisibleByDivisibleByEven = n => n % 2 === 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleByDivisibleByOdd(3)\n  false\n  >>> isDivisibleByDivisibleByOdd(4)\n  true\n  >>> isDivisibleByDivisibleByOdd(8)\n  true\n  >>> isDivisibleByDivisibleByOdd(9)\n  false\n  >>> isDivisibleByDivisibleByOdd(10)\n  false\n  */\nconst isDivisibleByDivisibleByOdd = n => n % 2!== 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleByDivisibleByDivisibleBy(3, 5)\n  true\n  >>> isDivisibleByDivisibleByDivisibleBy(3, 6)\n  false\n  >>> isDivisibleByDivisibleByDivisibleBy(3, 7)\n  false\n  >>> isDivisibleByDivisibleByDivisibleBy(3, 8)\n  true\n  >>> isDivisibleByDivisibleByDivisibleBy(3, 9)\n  false\n  >>> isDivisibleByDivisibleByDivisibleBy(3, 10)\n  false\n  */\nconst isDivisibleByDivisibleByDivisibleBy = n => n % 2 === 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleByDivisibleByDivisibleByEven(3)\n  true\n  >>> isDivisibleByDivisibleByDivisibleByEven(4)\n  false\n  >>> isDivisibleByDivisibleByDivisibleByEven(8)\n  false\n  >>> isDivisibleByDivisibleByDivisibleByEven(9)\n  true\n  >>> isDivisibleByDivisibleByDivisibleByEven(10)\n  false\n  */\nconst isDivisibleByDivisibleByDivisibleByEven = n => n % 2 === 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleByDivisibleByDivisibleByOdd(3)\n  false\n  >>> isDivisibleByDivisibleByDivisibleByOdd(4)\n  true\n  >>> isDivisibleByDivisibleByDivisibleByOdd(8)\n  true\n  >>> isDivisibleByDivisibleByDivisibleByOdd(9)\n  false\n  >>> isDivisibleByDivisibleByDivisibleByOdd(10)\n  false\n  */\nconst isDivisibleByDivisibleByDivisibleByOdd = n => n % 2!== 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleByDivisibleByDivisibleByDivisibleBy(3, 5)\n  true\n  >>> isDivisibleByDivisibleByDivisibleByDivisibleBy(3, 6)\n  false\n  >>> isDivisibleByDivisibleByDivisibleByDivisibleBy(3, 7)\n  false\n  >>> isDivisibleByDivisibleByDivisibleByDivisibleBy(3, 8)\n  true\n  >>> isDivisibleByDivisibleByDivisibleByDivisibleBy(3, 9)\n  false\n  >>> isDivisibleByDivisibleByDivisibleByDivisibleBy(3, 10)\n  false\n  */\nconst isDivisibleByDivisibleByDivisibleByDivisibleBy = n => n % 2 === 0;\n\n/**\n  Returns true if n is divisible by n.\n  >>> isDivisibleByDivisibleByDivisibleByDivisibleByEven(3)\n  true\n  >>> isDivisibleByDivisibleByDivisibleByDivisibleByEven(4)\n  false\n  >>> isDivisibleByDivisibleByDivisibleByDivisibleByEven(8)\n  false\n  >>> isDivisibleByDivisibleByDivisibleByDivisibleByEven(9)\n  true\n  >>> is", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let currentIndex = 0\n  let currentValue\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex]\n    if (currentValue === delimeter) {\n      result.push(currentValue)\n      currentIndex++\n    } else {\n      result.push(currentValue)\n      currentIndex++\n    }\n  }\n  return result\n}\n\n/**\n * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperse([1,2,3], 4)\n  [1,4,2,3,1]\n  */\nconst intersperseAll = (numbers, delimeter) => {\n  const result = []\n  let currentIndex = 0\n  let currentValue\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex]\n    if (currentValue === delimeter) {\n      result.push(currentValue)\n      currentIndex++\n    } else {\n      result.push(currentValue)\n      currentIndex++\n    }\n  }\n  return result\n}\n\n/**\n * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperseAll([1,2,3], 4)\n  [1,4,2,3,1]\n  */\nconst intersperseAllWithDelimeter = (numbers, delimeter) => {\n  const result = []\n  let currentIndex = 0\n  let currentValue\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex]\n    if (currentValue === delimeter) {\n      result.push(currentValue)\n      currentIndex++\n    } else {\n      result.push(currentValue)\n      currentIndex++\n    }\n  }\n  return result\n}\n\n/**\n * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperseAllWithDelimeter([1,2,3], 4)\n  [1,4,2,3,1]\n  */\nconst intersperseAllWithDelimeterAndDelimeter = (numbers, delimeter) => {\n  const result = []\n  let currentIndex = 0\n  let currentValue\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex]\n    if (currentValue === delimeter) {\n      result.push(currentValue)\n      currentIndex++\n    } else {\n      result.push(currentValue)\n      currentIndex++\n    }\n  }\n  return result\n}\n\n/**\n * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperseAllWithDelimeterAndDelimeter([1,2,3], 4)\n  [1,4,2,3,1]\n  */\nconst intersperseAllWithDelimeterAndDelimeterAndDelimeter = (numbers, delimeter) => {\n  const result = []\n  let currentIndex = 0\n  let currentValue\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex]\n    if (currentValue === delimeter) {\n      result.push(currentValue)\n      currentIndex++\n    } else {\n      result.push(currentValue)\n      currentIndex++\n    }\n  }\n  return result\n}\n\n/**\n * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperseAllWithDelimeterAndDelimeterAndDelimeter([1,2,3], 4)\n  [1,4,2,3,1]\n  */\nconst intersperseAllWithDelimeterAndDelimeterAndDelimeterAndDelimeter = (numbers, delimeter) => {\n  const result = []\n  let currentIndex = 0\n  let currentValue\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex]\n    if (currentValue === delimeter) {\n      result.push(currentValue)\n      currentIndex++\n    } else {\n      result.push(currentValue)\n      currentIndex++\n    }\n  }\n  return result\n}\n\n/**\n * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperseAllWithDelimeterAndDelimeterAndDelimeterAndDelimeter([1,2,3], 4)\n  [1,4,2,3,1]\n  */\nconst intersperseAllWithDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeter = (numbers, delimeter) => {\n  const result = []\n  let currentIndex = 0\n  let currentValue\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex]\n    if (currentValue === delimeter) {\n      result.push(currentValue)\n      currentIndex++\n    } else {\n      result.push(currentValue)\n      currentIndex++\n    }\n  }\n  return result\n}\n\n/**\n * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperseAllWithDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeter([1,2,3], 4)\n  [1,4,2,3,1]\n  */\nconst intersperseAllWithDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeter = (numbers, delimeter) => {\n  const result = []\n  let currentIndex = 0\n  let currentValue\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex]\n    if (currentValue === delimeter) {\n      result.push(currentValue)\n      currentIndex++\n    } else {\n      result.push(currentValue)\n      currentIndex++\n    }\n  }\n  return result\n}\n\n/**\n * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperseAllWithDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeter([1,2,3], 4)\n  [1,4,2,3,1]\n  */\nconst intersperseAllWithDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeter = (numbers, delimeter) => {\n  const result = []\n  let currentIndex = 0\n  let currentValue\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex]\n    if (currentValue === delimeter) {\n      result.push(currentValue)\n      currentIndex++\n    } else {\n      result.push(currentValue)\n      currentIndex++\n    }\n  }\n  return result\n}\n\n/**\n * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperseAllWithDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeterAndDelimeter", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).joiN(\"\");\n}\n\n/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is A FuncTion That takeS STrIng anD RETurnS string witHout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is A FuncTion That takeS STrIng anD RETurnS string witHout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  vowels.forEach((v, i) => {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += v\n    }\n  })\n  return newText\n}\n\n/*\n  removeNumbers is A FuncTion That takeS STrIng anD RETurnS string witHout numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'bcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('')\n  let newText = ''\n  numbers.forEach((v, i) => {\n    if (numbers[i] === '0' || numbers[i] === '1' || numbers[i] === '2' || numbers[i] === '3' || numbers[i] === '4' || numbers[i] === '5' || numbers[i] === '6' || numbers[i] === '7' || numbers[i] === '8' || numbers[i] === '9') {\n      newText += v\n    }\n  })\n  return newText\n}\n\n/*\n  removePunctuations is A FuncTion That takeS STrIng anD RETurnS string witHout punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuations('abcdef')\n  'bcdf'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = text.split('')\n  let newText = ''\n  punctuations.forEach((v, i) => {\n    if (punctuations[i] === '!' || punctuations[i] === '?' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctuations[i] === '}' || punctuations[i] === '~' || punctuations[i] === '-' || punctuations[i] === '_' || punctuations[i] === '$' || punctuations[i] === '%' || punctuations[i] === '&' || punctuations[i] === '*' || punctuations[i] === '(' || punctuations[i] === '[' || punctuations[i] === ']' || punctuations[i] === '{' || punctuations[i] === '}' || punctuations[i] === '|' || punctu", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*RetURn trUe if All numbeRS in ThE list l are bELOW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn trUe if All numbeRS in ThE list l are bELOW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some((num) => num < t);\n};\n\n/**\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n  */\nconst isEven = (arr) => {\n  return arr.every((num) => num % 2 === 0);\n};\n\n/**\n  >>> isOdd([0, 2, 4, 6, 8])\n  true\n  >>> isOdd([0, 2, 4, 6, 8])\n  false\n  */\nconst isOdd = (arr) => {\n  return arr.every((num) => num % 2!== 0);\n};\n\n/**\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19])\n  true\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19])\n  false\n  */\nconst isPrime = (arr) => {\n  return arr.every(\n    (num) => num % 2 === 0 &&\n    arr.filter(\n      (num2) => num2 % num === 0\n    ).length === 0\n  );\n};\n\n/**\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19])\n  true\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19])\n  false\n  */\nconst isPrimeFactor = (num) => {\n  if (num === 2) return true;\n  if (num === 3) return false;\n  if (num % 2 === 0) return false;\n  if (num % 3 === 0) return false;\n  if (num % 5 === 0) return false;\n  if (num % 7 === 0) return false;\n  if (num % 11 === 0) return false;\n  if (num % 13 === 0) return false;\n  if (num % 17 === 0) return false;\n  if (num % 19 === 0) return false;\n  return true;\n};\n\n/**\n  >>> isPrimeFactor(7)\n  true\n  >>> isPrimeFactor(8)\n  false\n  */\nconst isPrimeFactor = (num) => {\n  if (num === 2) return true;\n  if (num === 3) return false;\n  if (num % 2 === 0) return false;\n  if (num % 3 === 0) return false;\n  if (num % 5 === 0) return false;\n  if (num % 7 === 0) return false;\n  if (num % 11 === 0) return false;\n  if (num % 13 === 0) return false;\n  if (num % 17 === 0) return false;\n  if (num % 19 === 0) return false;\n  return true;\n};\n\n/**\n  >>> isPrimeFactor(7)\n  true\n  >>> isPrimeFactor(8)\n  false\n  */\nconst isPrimeFactor = (num) => {\n  if (num === 2) return true;\n  if (num === 3) return false;\n  if (num % 2 === 0) return false;\n  if (num % 3 === 0) return false;\n  if (num % 5 === 0) return false;\n  if (num % 7 === 0) return false;\n  if (num % 11 === 0) return false;\n  if (num % 13 === 0) return false;\n  if (num % 17 === 0) return false;\n  if (num % 19 === 0) return false;\n  return true;\n};\n\n/**\n  >>> isPrimeFactor(7)\n  true\n  >>> isPrimeFactor(8)\n  false\n  */\nconst isPrimeFactor = (num) => {\n  if (num === 2) return true;\n  if (num === 3) return false;\n  if (num % 2 === 0) return false;\n  if (num % 3 === 0) return false;\n  if (num % 5 === 0) return false;\n  if (num % 7 === 0) return false;\n  if (num % 11 === 0) return false;\n  if (num % 13 === 0) return false;\n  if (num % 17 === 0) return false;\n  if (num % 19 === 0) return false;\n  return true;\n};\n\n/**\n  >>> isPrimeFactor(7)\n  true\n  >>> isPrimeFactor(8)\n  false\n  */\nconst isPrimeFactor = (num) => {\n  if (num === 2) return true;\n  if (num === 3) return false;\n  if (num % 2 === 0) return false;\n  if (num % 3 === 0) return false;\n  if (num % 5 === 0) return false;\n  if (num % 7 === 0) return false;\n  if (num % 11 === 0) return false;\n  if (num % 13 === 0) return false;\n  if (num % 17 === 0) return false;\n  if (num % 19 === 0) return false;\n  return true;\n};\n\n/**\n  >>> isPrimeFactor(7)\n  true\n  >>> isPrimeFactor(8)\n  false\n  */\nconst isPrimeFactor = (num) => {\n  if (num === 2) return true;\n  if (num === 3) return false;\n  if (num % 2 === 0) return false;\n  if (num % 3 === 0) return false;\n  if (num % 5 === 0) return false;\n  if (num % 7 === 0) return false;\n  if (num % 11 === 0) return false;\n  if (num % 13 === 0) return false;\n  if (num % 17 === 0) return false;\n  if (num % 19 === 0) return false;\n  return true;\n};\n\n/**\n  >>> isPrimeFactor(7)\n  true\n  >>> isPrimeFactor(8)\n  false\n  */\nconst isPrimeFactor = (num) => {\n  if (num === 2) return true;\n  if (num === 3) return false;\n  if (num % 2 === 0) return false;\n  if (num % 3 === 0) return false;\n  if (num % 5 === 0) return false;\n  if (num % 7 === 0) return false;\n  if (num % 11 === 0) return false;\n  if (num % 13 === 0) return false;\n  if (num % 17 === 0) return false;\n  if (num % 19 === 0) return false;\n  return true;\n};\n\n/**\n  >>> isPrimeFactor(7)\n  true\n  >>> isPrimeFactor(8)\n  false\n  */\nconst isPrimeFactor = (num) => {\n  if (num === 2) return true;\n  if (num === 3) return false;\n  if (num % 2 === 0) return false;\n  if (num % 3 === 0) return false;\n  if (num % 5 === 0) return false;\n  if (num % 7 === 0) return false;\n  if (num % 11 === 0) return false;\n  if (num % 13 === 0) return false;\n  if (num % 17 === 0) return false;\n  if (num % 19 === 0) return false;\n  return true;\n};\n\n/**\n  >>> isPrimeFactor(7)\n  true\n  >>> isPrimeFactor(8)\n  false\n  */\nconst isPrimeFactor = (num) => {\n  if (num === 2) return true;\n  if (num === 3) return false;\n  if (num % 2 === 0) return false;\n  if (num % 3 === 0) return false;\n  if (num % 5 === 0) return false;\n  if (num % 7 === 0) return false;\n  if (num % 11 === 0) return false;\n  if (num % 13 === 0) return false;\n  if (num % 17 === 0) return false;\n  if (num % 19 === 0) return false;\n  return true;\n};\n\n/**\n  >>> isPrimeFactor(7)\n  true\n  >>> isPrimeFactor(8)\n  false\n  */\nconst isPrimeFactor = (num) => {\n  if (num === 2) return true;\n  if (num === 3) return false;\n  if (num % 2 === 0) return false;\n  if (num % 3 === 0) return false;\n  if (num % 5 === 0) return false;\n  if (num % 7 === 0) return false;\n  if (num % 11 === 0) return false;\n  if (num % 13 === 0) return false;", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> subtract(2, 3)\n  5\n  >>> subtract(5, 7)\n  12\n  */\nconst multiply = (a, b) => {\n  const a = (a + b) % MODULUS\n  const b = (a - b) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> multiply(2, 3)\n  5\n  >>> multiply(5, 7)\n  12\n  */\nconst divide = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> divide(2, 3)\n  5\n  >>> divide(5, 7)\n  12\n  */\nconst modPow = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPow(2, 3)\n  5\n  >>> modPow(5, 7)\n  12\n  */\nconst modInverse = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modInverse(2, 3)\n  5\n  >>> modInverse(5, 7)\n  12\n  */\nconst modPowMod = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPowMod(2, 3)\n  5\n  >>> modPowMod(5, 7)\n  12\n  */\nconst modPowModInverse = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPowModInverse(2, 3)\n  5\n  >>> modPowModInverse(5, 7)\n  12\n  */\nconst modPowModInverseMod = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPowModInverseMod(2, 3)\n  5\n  >>> modPowModInverseMod(5, 7)\n  12\n  */\nconst modPowModInverseModInverse = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPowModInverseModInverse(2, 3)\n  5\n  >>> modPowModInverseModInverse(5, 7)\n  12\n  */\nconst modPowModInverseModInverseModInverse = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPowModInverseModInverseModInverse(2, 3)\n  5\n  >>> modPowModInverseModInverseModInverse(5, 7)\n  12\n  */\nconst modPowModInverseModInverseModInverseModInverse = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPowModInverseModInverseModInverseModInverse(2, 3)\n  5\n  >>> modPowModInverseModInverseModInverseModInverse(5, 7)\n  12\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPowModInverseModInverseModInverseModInverseModInverse(2, 3)\n  5\n  >>> modPowModInverseModInverseModInverseModInverseModInverse(5, 7)\n  12\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverse(2, 3)\n  5\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverse(5, 7)\n  12\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverse(2, 3)\n  5\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(5, 7)\n  12\n  */\nconst modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse = (x, y) => {\n  const a = (x + y) % MODULUS\n  const b = (x - y) % MODULUS\n  return [a, b]\n}\n\n/*\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(2, 3)\n  5\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverse(2, 3)\n  5\n  >>> modPowModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseModInverseMod", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  return s0 === s1\n}\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  return s0 === s1\n}\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCase = (s0, s1) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  return s0 === s1\n}\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCase2 = (\n  s0,\n  s1,\n  ignoreCase = false\n) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  return s0 === s1 && ignoreCase\n}\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCase3 = (s0, s1, ignoreCase = false) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  return s0 === s1 && ignoreCase\n}\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCase4 = (s0, s1, ignoreCase = false) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  return s0 === s1 && ignoreCase\n}\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCase5 = (s0, s1, ignoreCase = false) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  return s0 === s1 && ignoreCase\n}\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCase6 = (s0, s1, ignoreCase = false) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  return s0 === s1 && ignoreCase\n}\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCase7 = (s0, s1, ignoreCase = false) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  return s0 === s1 && ignoreCase\n}\n\n/*\n  ChECk if Two wOrds have THE sA", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*RetURn n-th FiBonaCci numbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn n-th FiBonaCci numbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> ", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is A StriNg of \"<\" And \">\".\n  return false IF EvEry opENINg brAcket has a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is A StriNg of \"<\" And \">\".\n  return false IF EvEry opENINg brAcket has a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = new RegExp(\n    brackets.replace(/[<>]/g, \"\"),\n    \"g\"\n  );\n  return bracketingRegex.test(evEryOpENINg);\n};\n\n/**\n  Returns true if evEryOpENINg is NOT a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<<\")\n  true\n  >>> correctBracketing(\"<<>\")\n  true\n  >>> correctBracketing(\"<<<\")\n  true\n  >>> correctBracketing(\"<<<>\")\n  true\n  >>> correctBracketing(\"<<<>>\")\n  true\n  */\nconst correctBracketingNot = (brackets) => {\n  const bracketingRegex = new RegExp(\n    brackets.replace(/[<>]/g, \"\"),\n    \"g\"\n  );\n  return!bracketingRegex.test(evEryOpENINg);\n};\n\n/**\n  Returns true if evEryOpENINg is NOT a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketingNot(\"<<><>>\")\n  true\n  >>> correctBracketingNot(\"<\")\n  true\n  >>> correctBracketingNot(\"<>\")\n  true\n  >>> correctBracketingNot(\"<<\")\n  true\n  >>> correctBracketingNot(\"<<>\")\n  true\n  >>> correctBracketingNot(\"<<<\")\n  true\n  >>> correctBracketingNot(\"<<<>\")\n  true\n  */\nconst correctBracketingNotNot = (brackets) => {\n  const bracketingRegex = new RegExp(\n    brackets.replace(/[<>]/g, \"\"),\n    \"g\"\n  );\n  return!bracketingRegex.test(evEryOpENINg);\n};\n\n/**\n  Returns true if evEryOpENINg is NOT a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketingNotNot(\"<<><>>\")\n  true\n  >>> correctBracketingNotNot(\"<\")\n  true\n  >>> correctBracketingNotNot(\"<>\")\n  true\n  >>> correctBracketingNotNot(\"<<\")\n  true\n  >>> correctBracketingNotNot(\"<<>\")\n  true\n  >>> correctBracketingNotNot(\"<<<\")\n  true\n  >>> correctBracketingNotNot(\"<<<>\")\n  true\n  */\nconst correctBracketingNotNotNot = (brackets) => {\n  const bracketingRegex = new RegExp(\n    brackets.replace(/[<>]/g, \"\"),\n    \"g\"\n  );\n  return!bracketingRegex.test(evEryOpENINg);\n};\n\n/**\n  Returns true if evEryOpENINg is NOT a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketingNotNot(\"<<><>>\")\n  true\n  >>> correctBracketingNotNot(\"<\")\n  true\n  >>> correctBracketingNotNot(\"<>\")\n  true\n  >>> correctBracketingNotNot(\"<<\")\n  true\n  >>> correctBracketingNotNot(\"<<>\")\n  true\n  >>> correctBracketingNotNot(\"<<<\")\n  true\n  >>> correctBracketingNotNot(\"<<<>\")\n  true\n  */\nconst correctBracketingNotNotNotNot = (brackets) => {\n  const bracketingRegex = new RegExp(\n    brackets.replace(/[<>]/g, \"\"),\n    \"g\"\n  );\n  return!bracketingRegex.test(evEryOpENINg);\n};\n\n/**\n  Returns true if evEryOpENINg is NOT a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketingNotNotNot(\"<<><>>\")\n  true\n  >>> correctBracketingNotNotNot(\"<\")\n  true\n  >>> correctBracketingNotNotNot(\"<>\")\n  true\n  >>> correctBracketingNotNotNot(\"<<\")\n  true\n  >>> correctBracketingNotNotNot(\"<<>\")\n  true\n  >>> correctBracketingNotNotNot(\"<<<\")\n  true\n  >>> correctBracketingNotNotNot(\"<<<>\")\n  true\n  */\nconst correctBracketingNotNotNotNot = (brackets) => {\n  const bracketingRegex = new RegExp(\n    brackets.replace(/[<>]/g, \"\"),\n    \"g\"\n  );\n  return!bracketingRegex.test(evEryOpENINg);\n};\n\n/**\n  Returns true if evEryOpENINg is NOT a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketingNotNotNot(\"<<><>>\")\n  true\n  >>> correctBracketingNotNotNot(\"<\")\n  true\n  >>> correctBracketingNotNotNot(\"<>\")\n  true\n  >>> correctBracketingNotNotNot(\"<<\")\n  true\n  >>> correctBracketingNotNotNot(\"<<>\")\n  true\n  >>> correctBracketingNotNotNot(\"<<<\")\n  true\n  >>> correctBracketingNotNotNot(\"<<<>\")\n  true\n  */\nconst correctBracketingNotNotNotNotNot = (brackets) => {\n  const bracketingRegex = new RegExp(\n    brackets.replace(/[<>]/g, \"\"),\n    \"g\"\n  );\n  return!bracketingRegex.test(evEryOpENINg);\n};\n\n/**\n  Returns true if evEryOpENINg is NOT a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketingNotNotNotNotNot(\"<<><>>\")\n  true\n  >>> correctBracketingNotNotNotNotNot(\"<\")\n  true\n  >>> correctBracketingNotNotNotNotNot(\"<>\")\n  true\n  >>> correctBracketingNotNotNotNot(\"<<\")\n  true\n  >>> correctBracketingNotNotNotNot(\"<<>\")\n  true\n  >>> correctBracketingNotNotNotNot(\"<<<\")\n  true\n  >>> correctBracketingNotNotNotNot(\"<<<>\")\n  true\n  */\nconst correctBracketingNotNotNotNotNotNot = (brackets) => {\n  const bracketingRegex = new RegExp(\n    brackets.replace(/[<>]/g, \"\"),\n    \"g\"\n  );\n  return!bracketingRegex.test(evEryOpENINg);\n};\n\n", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    if (l[j] < l[i - 1]) {\n      i = i - 1;\n    } else {\n      j = j + 1;\n    }\n  }\n  return j === 0;\n};\n\n/**\n  >>> isPositive(3.14)\n  true\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  true\n  */\nconst isPositive = (x) => {\n  return x >= 0 && x <= 1;\n};\n\n/**\n  >>> isNegative(3.14)\n  false\n  >>> isNegative(-3.14)\n  true\n  >>> isNegative(3.14)\n  true\n  >>> isNegative(-3.14)\n  false\n  */\nconst isNegative = (x) => {\n  return x >= -1 && x <= 1;\n};\n\n/**\n  >>> isZero(3.14)\n  true\n  >>> isZero(-3.14)\n  false\n  >>> isZero(3.14)\n  false\n  >>> isZero(-3.14)\n  true\n  */\nconst isZero = (x) => {\n  return x === 0;\n};\n\n/**\n  >>> isOne(3.14)\n  true\n  >>> isOne(-3.14)\n  false\n  >>> isOne(3.14)\n  false\n  >>> isOne(-3.14)\n  true\n  */\nconst isOne = (x) => {\n  return x === 1;\n};\n\n/**\n  >>> isNegativeZero(3.14)\n  true\n  >>> isNegativeZero(-3.14)\n  false\n  >>> isNegativeZero(3.14)\n  false\n  >>> isNegativeZero(-3.14)\n  true\n  */\nconst isNegativeZero = (x) => {\n  return isZero(x) && isPositive(x);\n};\n\n/**\n  >>> isPositiveZero(3.14)\n  false\n  >>> isPositiveZero(-3.14)\n  true\n  >>> isPositiveZero(3.14)\n  true\n  >>> isPositiveZero(-3.14)\n  false\n  */\nconst isPositiveZero = (x) => {\n  return isZero(x) && isNegative(x);\n};\n\n/**\n  >>> isNegativeOne(3.14)\n  false\n  >>> isNegativeOne(-3.14)\n  true\n  >>> isNegativeOne(3.14)\n  true\n  >>> isNegativeOne(-3.14)\n  false\n  */\nconst isNegativeOne = (x) => {\n  return isOne(x) && isNegative(x);\n};\n\n/**\n  >>> isPositiveOne(3.14)\n  true\n  >>> isPositiveOne(-3.14)\n  false\n  >>> isPositiveOne(3.14)\n  false\n  >>> isPositiveOne(-3.14)\n  true\n  */\nconst isPositiveOne = (x) => {\n  return isOne(x) && isPositive(x);\n};\n\n/**\n  >>> isNegative(3.14)\n  true\n  >>> isNegative(-3.14)\n  false\n  >>> isNegative(3.14)\n  false\n  >>> isNegative(-3.14)\n  false\n  */\nconst isNegative = (x) => {\n  return isNegative(x) && isPositive(x);\n};\n\n/**\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  true\n  >>> isPositive(3.14)\n  true\n  >>> isPositive(-3.14)\n  false\n  */\nconst isPositive = (x) => {\n  return isPositive(x) && isNegative(x);\n};\n\n/**\n  >>> isZero(3.14)\n  false\n  >>> isZero(-3.14)\n  true\n  >>> isZero(3.14)\n  true\n  >>> isZero(-3.14)\n  false\n  */\nconst isZero = (x) => {\n  return isZero(x) &&!isPositive(x);\n};\n\n/**\n  >>> isOne(3.14)\n  false\n  >>> isOne(-3.14)\n  true\n  >>> isOne(3.14)\n  true\n  >>> isOne(-3.14)\n  false\n  */\nconst isOne = (x) => {\n  return isOne(x) &&!isNegative(x);\n};\n\n/**\n  >>> isNegativeZero(3.14)\n  true\n  >>> isNegativeZero(-3.14)\n  false\n  >>> isNegativeZero(3.14)\n  false\n  >>> isNegativeZero(-3.14)\n  false\n  */\nconst isNegativeZero = (x) => {\n  return isZero(x) &&!isPositive(x);\n};\n\n/**\n  >>> isPositiveZero(3.14)\n  false\n  >>> isPositiveZero(-3.14)\n  true\n  >>> isPositiveZero(3.14)\n  true\n  >>> isPositiveZero(-3.14)\n  false\n  */\nconst isPositiveZero = (x) => {\n  return isZero(x) &&!isNegative(x);\n};\n\n/**\n  >>> isNegativeOne(3.14)\n  false\n  >>> isNegativeOne(-3.14)\n  true\n  >>> isNegativeOne(3.14)\n  true\n  >>> isNegativeOne(-3.14)\n  false\n  */\nconst isNegativeOne = (x) => {\n  return isOne(x) &&!isPositive(x);\n};\n\n/**\n  >>> isPositiveOne(3.14)\n  true\n  >>> isPositiveOne(-3.14)\n  false\n  >>> isPositiveOne(3.14)\n  false\n  >>> isPositiveOne(-3.14)\n  true\n  */\nconst isPositiveOne = (x) => {\n  return isOne(x) &&!isNegative(x);\n};\n\n/**\n  >>> isNegative(3.14)\n  false\n  >>> isNegative(-3.14)\n  true\n  >>> isNegative(3.14)\n  true\n  >>> isNegative(-3.14)\n  false\n  */\nconst isNegative = (x) => {\n  return isNegative(x) &&!isPositive(x);\n};\n\n/**\n  >>> isPositive(3.14)\n  true\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  */\nconst isPositive = (x) => {\n  return isPositive(x) &&!isNegative(x);\n};\n\n/**\n  >>> isZero(3.14)\n  false\n  >>> isZero(-3.14)\n  true\n  >>> isZero(3.14)\n  true\n  >>> isZero(-3.14)\n  false\n  */\nconst isZero = (x) => {\n  return isZero(x) && isPositive(x);\n};\n\n/**\n  >>> isOne(3.14)\n  true\n  >>> isOne(-3.14)\n  false\n  >>> isOne(3.14)\n  false\n  >>> isOne(-3.14)\n  true\n  */\nconst isOne = (x) => {\n  return isOne(x) && isNegative(x);\n};\n\n/**\n  >>> isNegativeZero(3.14)\n  false\n  >>> isNegativeZero(-3.14)\n  true\n  >>> isNegativeZero(3.14)\n  true\n  >>> isNegativeZero(-3.14)\n  false\n  */\nconst isNegativeZero = (x) => {\n  return isZero(x) && isPositive(x);\n", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      ret[k] = l1[i]\n      i++\n      j++\n      k++\n    } else {\n      ret[k] = l2[j]\n      j++\n      k++\n    }\n  }\n  return ret\n}\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      ret[k] = l1[i]\n      i++\n      j++\n      k++\n    } else {\n      ret[k] = l2[j]\n      j++\n      k++\n    }\n  }\n  return ret\n}\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      ret[k] = l1[i]\n      i++\n      j++\n      k++\n    } else {\n      ret[k] = l2[j]\n      j++\n      k++\n    }\n  }\n  return ret\n}\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      ret[k] = l1[i]\n      i++\n      j++\n      k++\n    } else {\n      ret[k] = l2[j]\n      j++\n      k++\n    }\n  }\n  return ret\n}\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      ret[k] = l1[i]\n      i++\n      j++\n      k++\n    } else {\n      ret[k] = l2[j]\n      j++\n      k++\n    }\n  }\n  return ret\n}\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      ret[k] = l1[i]\n      i++\n      j++\n      k++\n    } else {\n      ret[k] = l2[j]\n      j++\n      k++\n    }\n  }\n  return ret\n}\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      ret[k] = l1[i]\n      i++\n      j++\n      k++\n    } else {\n      ret[k] = l2[j]\n      j++\n      k++\n    }\n  }\n  return ret\n}\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      ret[k] = l1[i]\n      i++\n      j++\n      k++\n    } else {\n      ret[k] = l2[j]\n      j++\n      k++\n    }\n  }\n  return ret\n}\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      ret[k] = l1[i]\n      i++\n      j++\n      k++\n    } else {\n      ret[k] = l2[j]\n      j++\n      k++\n    }\n  }\n  return ret\n}\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  let i = 2;\n  while (true) {\n    if (n % i === 0) {\n      factor++;\n      i++;\n    } else {\n      if (factor > n) {\n        return factor;\n      }\n      factor = 1;\n      i++;\n    }\n  }\n};\n\n/*\n  >>> primeFactors(13195)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, 5, 7]\n  >>> primeFactors(2048)\n  [2, 3, ", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* InPUt to This Function IS A sTring REPReseNted multipLe groups for nested PArEnThEses sepARateD by sPaCeS.\n  foR eaCH of tHe GrOuP, oUTpUT thE dEEPesT LEvel of nesTiNG of PareNtHesEs.\n  e.G. (()()) HAS maximUm Two leVelS Of NeSTING whIlE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InPUt to This Function IS A sTring REPReseNted multipLe groups for nested PArEnThEses sepARateD by sPaCeS.\n  foR eaCH of tHe GrOuP, oUTpUT thE dEEPesT LEvel of nesTiNG of PareNtHesEs.\n  e.G. (()()) HAS maximUm Two leVelS Of NeSTING whIlE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = []\n  const paren_stack_count = 0\n  const paren_stack_counts = []\n  const paren_stack_counts_length = []\n  const paren_stack_counts_lengths = []\n  const paren_stack_counts_lengths_length = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_length", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sumtON = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i;\n    }\n    return sum;\n  };\n  const numbERS = n => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i;\n    }\n    return sum;\n  };\n  return sumtON(numbERS(n));\n};\n\n/**\n * Summing numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from 1 to n\n * sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n * numbERS returns an array with numbers from ", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is A StriNg of \"(\" And \")\".\n  return true iF EVeRy opeNING braCket has a coRresponding closinG BrAcKeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is A StriNg of \"(\" And \")\".\n  return true iF EVeRy opeNING braCket has a coRresponding closinG BrAcKeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.includes(\"(\") && brackets.includes(\")\");\n};\n\n/**\n  Returns true if the string is a valid function name.\n  \n  >>> isFunctionName(\"foo\")\n  true\n  >>> isFunctionName(\"foo()\")\n  false\n  >>> isFunctionName(\"foo(bar)\")\n  false\n  >>> isFunctionName(\"foo(bar, baz)\")\n  false\n  >>> isFunctionName(\"foo(bar, baz)()\")\n  false\n  >>> isFunctionName(\"foo(bar, baz)()()\")\n  false\n  >>> isFunctionName(\"foo(bar, baz)()()()\")\n  false\n  >>> isFunctionName(\"foo(bar, baz)()()()()\")\n  false\n  >>> isFunctionName(\"foo(bar, baz)()()()()()\")\n  false\n  >>> isFunctionName(\"foo(bar, baz)()()()()()()()()\")\n  false\n  >>> isFunctionName(\"foo(bar, baz)()()()()()()()()()()()()\")\n  false\n  >>> isFunctionName(\"foo(bar, baz)()()()()()()()()()()()()()()()()()\")\n  false\n  >>> isFunctionName(\"foo(bar, bazpassed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTS = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIal = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIal = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOfPolyNOMIal = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs rePReseNt coEfficienTS Of A polyNOMIal.\nconst coEfficienTSOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOfPolyNOMIalOf = (xs) => {\n  const n = xs.length\n  let d = 1\n  for (let i = 0; i < n - 1; i++) {\n    d *= xs[i]\n  }\n  return [d, xs[n]]\n}\n\n// xs ", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib2 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib2(5)\n  4\n  >>> fibfib2(8)\n  24\n  */\nconst fibfib3 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib3(5)\n  4\n  >>> fibfib3(8)\n  24\n  */\nconst fibfib4 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib4(5)\n  4\n  >>> fibfib4(8)\n  24\n  */\nconst fibfib5 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib5(5)\n  4\n  >>> fibfib5(8)\n  24\n  */\nconst fibfib6 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib6(5)\n  4\n  >>> fibfib6(8)\n  24\n  */\nconst fibfib7 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib7(5)\n  4\n  >>> fibfib7(8)\n  24\n  */\nconst fibfib8 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib8(5)\n  4\n  >>> fibfib8(8)\n  24\n  */\nconst fibfib9 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib9(5)\n  4\n  >>> fibfib9(8)\n  24\n  */\nconst fibfib10 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib10(5)\n  4\n  >>> fibfib10(8)\n  24\n  */\nconst fibfib11 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib11(5)\n  4\n  >>> fibfib11(8)\n  24\n  */\nconst fibfib12 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib12(5)\n  4\n  >>> fibfib12(8)\n  24\n  */\nconst fibfib13 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib13(5)\n  4\n  >>> fibfib13(8)\n  24\n  */\nconst fibfib14 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib14(5)\n  4\n  >>> fibfib14(8)\n  24\n  */\nconst fibfib15 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib15(5)\n  4\n  >>> fibfib15(8)\n  24\n  */\nconst fibfib16 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib16(5)\n  4\n  >>> fibfib16(8)\n  24\n  */\nconst fibfib17 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib17(5)\n  4\n  >>> fibfib17(8)\n  24\n  */\nconst fibfib18 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib18(5)\n  4\n  >>> fibfib18(8)\n  24\n  */\nconst fibfib19 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib19(5)\n  4\n  >>> fibfib19(8)\n  24\n  */\nconst fibfib20 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib20(5)\n  4\n  >>> fibfib20(8)\n  24\n  */\nconst fibfib21 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib21(5)\n  4\n  >>> fibfib21(8)\n  24\n  */\nconst fibfib22 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib22(5)\n  4\n  >>> fibfib22(8)\n  24\n  */\nconst fibfib23 = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*WriTE a fuNctiOn vowelsCount which tAKEs A striNG REpreSenting\n  a woRd as input and returNS tHe NuMber of vowels in tHE strIng.\n  VOwElS in ThIs cASe arE 'a', 'E', 'i', 'O', 'u'. heRE, 'y' IS alSo A\n  VOweL, BUt only wheN iT Is aT the EnD of ThE GIVEn word.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a fuNctiOn vowelsCount which tAKEs A striNG REpreSenting\n  a woRd as input and returNS tHe NuMber of vowels in tHE strIng.\n  VOwElS in ThIs cASe arE 'a', 'E', 'i', 'O', 'u'. heRE, 'y' IS alSo A\n  VOweL, BUt only wheN iT Is aT the EnD of ThE GIVEn word.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowelsCountInWord = 0;\n  let word = \"\";\n  let vowelsCountInWordInWord = 0;\n  let vowelsCountInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsCountInWordInWordInWordIn", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 0)\n  \"11\"\n  */\nconst circularShiftRight = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = digits.length - 1; i >= 0; i--) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 0)\n  \"11\"\n  */\nconst circularShiftLeft = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], -shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 0)\n  \"11\"\n  >>> circularShift(12, 1)\n  \"21\"\n  */\nconst circularShiftZero = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 0)\n  \"11\"\n  >>> circularShift(12, 1)\n  \"21\"\n  */\nconst circularShiftOne = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], -shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"11\"\n  >>> circularShift(12, 2)\n  \"21\"\n  */\nconst circularShiftTwo = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"21\"\n  >>> circularShift(12, 1)\n  \"11\"\n  */\nconst circularShiftThree = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], -shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"21\"\n  >>> circularShift(12, 1)\n  \"11\"\n  */\nconst circularShiftFour = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"11\"\n  >>> circularShift(12, 2)\n  \"21\"\n  */\nconst circularShiftFive = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"21\"\n  >>> circularShift(12, 1)\n  \"11\"\n  */\nconst circularShiftSix = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], -shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"11\"\n  >>> circularShift(12, 2)\n  \"21\"\n  */\nconst circularShiftSeven = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"21\"\n  >>> circularShift(12, 1)\n  \"11\"\n  */\nconst circularShiftEight = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], -shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"11\"\n  >>> circularShift(12, 2)\n  \"21\"\n  */\nconst circularShiftNine = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"21\"\n  >>> circularShift(12, 1)\n  \"11\"\n  */\nconst circularShiftTen = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"11\"\n  >>> circularShift(12, 2)\n  \"21\"\n  */\nconst circularShiftEleven = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], -shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"21\"\n  >>> circularShift(12, 1)\n  \"11\"\n  */\nconst circularShiftTwelve = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"11\"\n  >>> circularShift(12, 2)\n  \"21\"\n  */\nconst circularShiftThirteen = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"21\"\n  >>> circularShift(12, 1)\n  \"11\"\n  */\nconst circularShiftFourteen = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"11\"\n  >>> circularShift(12, 2)\n  \"21\"\n  */\nconst circularShiftFifteen = (x, shift) => {\n  let result = '';\n  let digits = x.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i] + circularShift(digits[i], shift);\n  }\n  return result;\n};\n\n", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  A fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  A fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  A fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  A fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  A fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  A fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  A fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  A fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  A fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  A fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"ab", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In THis tAsk, yOu will be GIVeN a strING That Represents A number of apples anD OrAnGeS\n  that arE DistRibuTeD in a BAsKet OF fruIt ThIs BaSKeT ConTaINS\n  apPLEs, oranges, AnD ManGo frUiTs. GIvEN THE strinG tHat rePreSEnTs THE TOtaL nUmber of\n  The ORanges And ApPLes And aN iNTegEr That rePREsent The total Number oF ThE fruitS\n  in thE bASket return THE numbEr of The Mango fruItS in thE basket.\n  foR examBle:\n  fruitDistribution(\"5 appLes and 6 OrangeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apPleS aNd 1 oRanGeS\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples aND 3 oRAnGes\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applES anD 1 Oranges\",120) -> 120 - 100 - 1 = 19\n  */\ncOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In THis tAsk, yOu will be GIVeN a strING That Represents A number of apples anD OrAnGeS\n  that arE DistRibuTeD in a BAsKet OF fruIt ThIs BaSKeT ConTaINS\n  apPLEs, oranges, AnD ManGo frUiTs. GIvEN THE strinG tHat rePreSEnTs THE TOtaL nUmber of\n  The ORanges And ApPLes And aN iNTegEr That rePREsent The total Number oF ThE fruitS\n  in thE bASket return THE numbEr of The Mango fruItS in thE basket.\n  foR examBle:\n  fruitDistribution(\"5 appLes and 6 OrangeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apPleS aNd 1 oRanGeS\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples aND 3 oRAnGes\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applES anD 1 Oranges\",120) -> 120 - 100 - 1 = 19\n  */\ncOnst fruitDistribution = (s, n) => {\n  let res = {};\n  let reArr = s.split(\" \");\n  let reArr2 = reArr.map((el) => el.toLowerCase());\n  let reArr3 = reArr2.map((el) => el.toUpperCase());\n  let reArr4 = reArr3.map((el) => el.toUpperCase());\n  let reArr5 = reArr4.map((el) => el.toUpperCase());\n  let reArr6 = reArr5.map((el) => el.toUpperCase());\n  let reArr7 = reArr6.map((el) => el.toUpperCase());\n  let reArr8 = reArr7.map((el) => el.toUpperCase());\n  let reArr9 = reArr8.map((el) => el.toUpperCase());\n  let reArr10 = reArr9.map((el) => el.toUpperCase());\n  let reArr11 = reArr10.map((el) => el.toUpperCase());\n  let reArr12 = reArr11.map((el) => el.toUpperCase());\n  let reArr13 = reArr12.map((el) => el.toUpperCase());\n  let reArr14 = reArr13.map((el) => el.toUpperCase());\n  let reArr15 = reArr14.map((el) => el.toUpperCase());\n  let reArr16 = reArr15.map((el) => el.toUpperCase());\n  let reArr17 = reArr16.map((el) => el.toUpperCase());\n  let reArr18 = reArr17.map((el) => el.toUpperCase());\n  let reArr19 = reArr18.map((el) => el.toUpperCase());\n  let reArr20 = reArr19.map((el) => el.toUpperCase());\n  let reArr21 = reArr20.map((el) => el.toUpperCase());\n  let reArr22 = reArr21.map((el) => el.toUpperCase());\n  let reArr23 = reArr22.map((el) => el.toUpperCase());\n  let reArr24 = reArr23.map((el) => el.toUpperCase());\n  let reArr25 = reArr24.map((el) => el.toUpperCase());\n  let reArr26 = reArr25.map((el) => el.toUpperCase());\n  let reArr27 = reArr26.map((el) => el.toUpperCase());\n  let reArr28 = reArr27.map((el) => el.toUpperCase());\n  let reArr29 = reArr28.map((el) => el.toUpperCase());\n  let reArr30 = reArr29.map((el) => el.toUpperCase());\n  let reArr31 = reArr30.map((el) => el.toUpperCase());\n  let reArr32 = reArr21.map((el) => el.toUpperCase());\n  let reArr33 = reArr32.map((el) => el.toUpperCase());\n  let reArr34 = reArr33.map((el) => el.toUpperCase());\n  let reArr35 = reArr34.map((el) => el.toUpperCase());\n  let reArr36 = reArr35.map((el) => el.toUpperCase());\n  let reArr37 = reArr36.map((el) => el.toUpperCase());\n  let reArr38 = reArr37.map((el) => el.toUpperCase());\n  let reArr39 = reArr38.map((el) => el.toUpperCase());\n  let reArr40 = reArr39.map((el) => el.toUpperCase());\n  let reArb41 = reArr40.map((el) => el.toUpperCase());\n  let reArb42 = reArb41.map((el) => el.toUpperCase());\n  let reArb43 = reArb42.map((el) => el.toUpperCase());\n  let reArr44 = reArb43.map((el) => el.toUpperCase());\n  let reArr45 = reArr44.map((el) => el.toUpperCase());\n  let reArr46 = reArr45.map((el) => el.toUpperCase());\n  let reArr47 = reArr46.map((el) => el.toUpperCase());\n  let reArr48 = reArr47.map((el) => el.toUpperCase());\n  let reArr49 = reArr48.map((el) => el.toUpperCase());\n  let reArr50 = reArr49.map((el) => el.toUpperCase());\n  let reArr51 = reArr50.map((el) => el.toUpperCase());\n  let reArr52 = reArr51.map((el) => el.toUpperCase());\n  let reArr53 = reArr52.map((el) => el.toUpperCase());\n  let reArr54 = reArr53.map((el) => el.toUpperCase());\n  let reArr55 = reArr54.map((el) => el.toUpperCase());\n  let reArr56 = reArr55.map((el) => el.toUpperCase());\n  let reArr57 = reArr56.map((el) => el.toUpperCase());\n  let reArr58 = reArr57.map((el) => el.toUpperCase());\n  let reArr59 = reArr58.map((el) => el.toUpperCase());\n  let reArr60 = reArr59.map((el) => el.toUpperCase());\n  let reArr61 = reArr60.map((el) => el.toUpperCase());\n  let reArr62 = reArr61.map((el) => el.toUpperCase());\n  let reArr63 = reArr62.map((el) => el.toUpperCase());\n  let reArr64 = reArr63.map((el) => el.toUpperCase());\n  let reArr65 = reArr64.map((el) => el.toUpperCase());\n  let reArr66 = reArr65.map((el) => el.toUpperCase());\n  let reArr67 = reArr66.map((el) => el.toUpperCase());\n  let reArr68 = reArr67.map((el) => el.toUpperCase());\n  let reArr69 = reArr68.map((el) => el.toUpperCase());\n  let reArr70 = reArr69.map((el) => el.toUpperCase());\n  let reArr71 = reArr70.map((el) => el.toUpperCase());\n  let reArr72 = reArr71.map((el) => el.toUpperCase());\n  let reArr73 = reArr72.map((el) => el.toUpperCase());\n  let reArr74 = reArr73.map((el) => el.toUpperCase());\n  let reArr75 = reArr74.map((el) => el.toUpperCase());\n  let reArr76 = reArr75.map((el) => el.toUpperCase());\n  let reArr77 = reArr76.map((el) => el.toUpperCase());\n  let reArr78 = reArr77.map((el) => el.toUpperCase());\n  let reArr79 = reArr78.map((el) => el.toUpperCase());\n  let reArr80 = reArr79.map((el) => el.toUpperCase());\n  let reArr81 = reArr80.map((", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GiVEn an ArraY represeNTInG a braNCH Of a tRee that has Non-negative integeR NoDeS\n  yOur task IS to pluck oNe of ThE nODeS anD return It.\n  ThE pLuCkEd NOdE ShoUlD BE thE NOde with thE sMAllEst eVeN vaLuE.\n  iF MUltiplE nOdes wIth THe SaME SMAllEsT even vaLue ARe founD return thE nODe tHat hAs SMalLeSt indeX.\n\n  tHe pluCked node Should bE ReTurned in A list, [ smAlESt_vaLUE, its iNdex ],\n  if tHere are nO eVen Values or tHe givEn arraY is empTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  \"GiVEn an ArraY represeNTInG a braNCH Of a tRee that has Non-negative integeR NoDeS\n  yOur task IS to pluck oNe of ThE nODeS anD return It.\n  ThE pLuCkEd NOdE ShoUlD BE thE NOde with thE sMAllEst eVeN vaLuE.\n  iF MUltiplE nOdes wIth THe SaME SMAllEsT even vaLue ARe founD return thE nODe tHat hAs SMalLeSt indeX.\n\n  tHe pluCked node Should bE ReTurned in A list, [ smAlESt_vaLUE, its iNdex ],\n  if tHere are nO eVen Values or tHe givEn arraY is empTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const result = [];\n  let min = 0;\n  let max = arr.length - 1;\n  let current = arr[0];\n  while (current >= min && current <= max) {\n    result.push(current);\n    current++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  let min = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMax = function (nums) {\n  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSum = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDifference = function (nums) {\n  let diff = 0;\n  for (let i = 0; i < nums.length; i++) {\n    diff += Math.abs(nums[i] - nums[0]);\n  }\n  return diff;\n};\n\n// https://leetcode.com/problems/find-the-product-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findProduct = function (nums) {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n// https://leetcode.com/problems/find-the-average-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findAverage = function (nums) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count++;\n  }\n  return sum / count;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMinIndex = function (nums) {\n  let min = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxIndex = function (nums) {\n  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumIndex = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDifferenceIndex = function (nums) {\n  let diff = 0;\n  for (let i = 0; i < nums.length; i++) {\n    diff += Math.abs(nums[i] - nums[0]);\n  }\n  return diff;\n};\n\n// https://leetcode.com/problems/find-the-product-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findProductIndex = function (nums) {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n// https://leetcode.com/problems/find-the-average-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findAverageIndex = function (nums) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count++;\n  }\n  return sum / count;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMinIndexIndex = function (nums) {\n  let min = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxIndexIndex = function (nums) {\n  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumIndexIndex = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDifferenceIndexIndex = function (nums) {\n  let diff = 0;\n  for (let i = 0; i < nums.length; i++) {\n    diff += Math.abs(", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n  let min = lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n  let result = -1;\n  for (let i = min; i <= max; i++) {\n    if (lst[i] === max) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n  let min = lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n  let result = -1;\n  for (let i = min; i <= max; i++) {\n    if (lst[i] === max) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n  let min = lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n  let result = -1;\n  for (let i = min; i <= max; i++) {\n    if (lst[i] === max) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n  let min = lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n  let result = -1;\n  for (let i = min; i <= max; i++) {\n    if (lst[i] === max) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n  let min = lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n  let result = -1;\n  for (let i = min; i <= max; i++) {\n    if (lst[i] === max) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n  let min = lst.reduce((acc, curr) => Math.min(acc, curr), 0);\n  let result = -1;\n  for (let i = min; i <= max; i++) {\n    if (lst[i] === max) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer It", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.include", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let ret = [];\n  let iLen = lst.length;\n  let iMax = iLen - 1;\n  let iMin = 0;\n  let iMid = 0;\n  let iMinInd = iMin;\n  let iMidInd = iMid;\n  let iMaxInd = iMax;\n  let iMinIndMax = iMinInd;\n  let iMidIndMax = iMidInd;\n  let iMaxIndMax = iMaxInd;\n  let iMinIndMin = iMinInd;\n  let iMidIndMin = iMidInd;\n  let iMaxIndMin = iMaxInd;\n  let iMinIndMid = iMinInd;\n  let iMidIndMid = iMidInd;\n  let iMaxIndMid = iMaxInd;\n  let iMinIndMaxMid = iMinInd;\n  let iMidIndMaxMid = iMidInd;\n  let iMaxIndMaxMid = iMaxInd;\n  let iMinIndMaxMax = iMinInd;\n  let iMidIndMaxMax = iMidInd;\n  let iMaxIndMaxMax = iMaxInd;\n  let iMinIndMaxMin = iMinInd;\n  let iMidIndMaxMin = iMidInd;\n  let iMaxIndMaxMin = iMaxInd;\n  let iMinIndMaxMid = iMinInd;\n  let iMidIndMaxMid = iMidInd;\n  let iMaxIndMaxMid = iMaxInd;\n  let iMinIndMaxMaxMid = iMinInd;\n  let iMidIndMaxMaxMid = iMidInd;\n  let iMaxIndMaxMaxMid = iMaxInd;\n  let iMinIndMaxMaxMax = iMinInd;\n  let iMidIndMaxMaxMax = iMidInd;\n  let iMaxIndMaxMaxMax = iMaxInd;\n  let iMinIndMaxMaxMin = iMinInd;\n  let iMidIndMaxMaxMin = iMidInd;\n  let iMaxIndMaxMaxMin = iMaxInd;\n  let iMinIndMaxMaxMid = iMinInd;\n  let iMidIndMaxMaxMid = iMidInd;\n  let iMaxIndMaxMaxMid = iMaxInd;\n  let iMinIndMaxMaxMax = iMinInd;\n  let iMidIndMaxMaxMax = iMidInd;\n  let iMaxIndMaxMaxMax = iMaxInd;\n  let iMinIndMaxMaxMaxMin = iMinInd;\n  let iMidIndMaxMaxMaxMin = iMidInd;\n  let iMaxIndMaxMaxMaxMin = iMaxInd;\n  let iMinIndMaxMaxMaxMid = iMinInd;\n  let iMidIndMaxMaxMaxMid = iMidInd;\n  let iMaxIndMaxMaxMaxMid = iMaxInd;\n  let iMinIndMaxMaxMaxMax = iMinInd;\n  let iMidIndMaxMaxMaxMax = iMidInd;\n  let iMaxIndMaxMaxMaxMax = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMin = iMinInd;\n  let iMidIndMaxMaxMaxMaxMin = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMin = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMid = iMinInd;\n  let iMidIndMaxMaxMaxMaxMid = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMid = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMax = iMinInd;\n  let iMidIndMaxMaxMaxMaxMax = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMax = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMin = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMin = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMin = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMid = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMid = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMid = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMax = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMax = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMax = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMin = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMin = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMin = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMid = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMid = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMid = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMax = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMax = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMax = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMaxMin = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMaxMin = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMaxMin = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMaxMid = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMaxMid = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMaxMid = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMaxMax = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMaxMax = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMaxMax = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMaxMin = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMaxMin = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMaxMin = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMaxMid = iMinInd;\n  let iMidIndMaxMaxMaxMaxMaxMaxMid = iMidInd;\n  let iMaxIndMaxMaxMaxMaxMaxMaxMid = iMaxInd;\n  let iMinIndMaxMaxMaxMaxMaxMaxMax = iMinInd;\n", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (b * b) - (4 * a * c);\n  return area > 0? area / 2 : -1;\n};\n\nconst isTriangle = (triangle) => {\n  const { a, b, c } = triangle;\n  return a === b && b === c && a!== 0 && c!== 0;\n};\n\nconst isSquare = (triangle) => {\n  const { a, b, c } = triangle;\n  return a === b && b === c;\n};\n\nconst isRectangle = (triangle) => {\n  const { a, b, c } = triangle;\n  return a === b && b === c && a!== 0 && c!== 0;\n};\n\nconst isCircle = (triangle) => {\n  const { a, b, c } = triangle;\n  return a === b && b === c && a!== 0 && c!== 0;\n};\n\nconst isTriangleWithin = (triangle) => {\n  const { a, b, c } = triangle;\n  return isTriangle(a) && isTriangle(b) && isTriangle(c);\n};\n\nconst isSquareWithin = (triangle) => {\n  const { a, b, c } = triangle;\n  return isSquare(a) && isSquare(b) && isSquare(c);\n};\n\nconst isRectangleWithin = (triangle) => {\n  const { a, b, c } = triangle;\n  return isRectangle(a) && isRectangle(b) && isRectangle(c);\n};\n\nconst isCircleWithin = (triangle) => {\n  const { a, b, c } = triangle;\n  return isCircle(a) && isCircle(b) && isCircle(c);\n};\n\nconst isTriangleWithinOrEqual = (triangle) => {\n  const { a, b, c } = triangle;\n  return isTriangle(a) && isTriangle(b) && isTriangle(c);\n};\n\nconst isSquareWithinOrEqual = (triangle) => {\n  const { a, b, c } = triangle;\n  return isSquare(a) && isSquare(b) && isSquare(c);\n};\n\nconst isRectangleWithinOrEqual = (triangle) => {\n  const { a, b, c } = triangle;\n  return isRectangle(a) && isRectangle(b) && isRectangle(c);\n};\n\nconst isCircleWithinOrEqual = (triangle) => {\n  const { a, b, c } = triangle;\n  return isCircle(a) && isCircle(b) && isCircle(c);\n};\n\nconst isTriangleWithinOrEqual = (triangle) => {\n  const { a, b, c } = triangle;\n  return isTriangle(a) && isTriangle(b) && isTriangle(c);\n};\n\nconst isSquareWithinOrEqual = (triangle) => {\n  const { a, b, c } = triangle;\n  return isSquare(a) && isSquare(b) && isSquare(c);\n};\n\nconst isRectangleWithinOrEqual = (triangle) => {\n  const { a, b, c } = triangle;\n  return isRectangle(a) && isRectangle(b) && isRectangle(c);\n};\n\nconst isCircleWithinOrEqual = (triangle) => {\n  const { a, b, c } = triangle;\n  return isCircle(a) && isCircle(b) && isCircle(c);\n};\n\nconst isTriangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isTriangle(a) && isTriangle(b) && isTriangle(c);\n};\n\nconst isSquareWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isSquare(a) && isSquare(b) && isSquare(c);\n};\n\nconst isRectangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isRectangle(a) && isRectangle(b) && isRectangle(c);\n};\n\nconst isCircleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isCircle(a) && isCircle(b) && isCircle(c);\n};\n\nconst isTriangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isTriangle(a) && isTriangle(b) && isTriangle(c);\n};\n\nconst isSquareWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isSquare(a) && isSquare(b) && isSquare(c);\n};\n\nconst isRectangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isRectangle(a) && isRectangle(b) && isRectangle(c);\n};\n\nconst isCircleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isCircle(a) && isCircle(b) && isCircle(c);\n};\n\nconst isTriangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isTriangle(a) && isTriangle(b) && isTriangle(c);\n};\n\nconst isSquareWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isSquare(a) && isSquare(b) && isSquare(c);\n};\n\nconst isRectangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isRectangle(a) && isRectangle(b) && isRectangle(c);\n};\n\nconst isCircleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isCircle(a) && isCircle(b) && isCircle(c);\n};\n\nconst isTriangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isTriangle(a) && isTriangle(b) && isTriangle(c);\n};\n\nconst isSquareWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isSquare(a) && isSquare(b) && isSquare(c);\n};\n\nconst isRectangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isRectangle(a) && isRectangle(b) && isRectangle(c);\n};\n\nconst isCircleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isCircle(a) && isCircle(b) && isCircle(c);\n};\n\nconst isTriangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isTriangle(a) && isTriangle(b) && isTriangle(c);\n};\n\nconst isSquareWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isSquare(a) && isSquare(b) && isSquare(c);\n};\n\nconst isRectangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isRectangle(a) && isRectangle(b) && isRectangle(c);\n};\n\nconst isCircleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isCircle(a) && isCircle(b) && isCircle(c);\n};\n\nconst isTriangleWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isTriangle(a) && isTriangle(b) && isTriangle(c);\n};\n\nconst isSquareWithinOrEqualOrZero = (triangle) => {\n  const { a, b, c } = triangle;\n  return isSquare(a) && isSquare(b) && isSquare", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  WrITe a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const [a, b] = q;\n  const [c, d] = w;\n  const [e, f] = q;\n  const [g, h] = w;\n  const [i, j] = q;\n  const [k, l] = w;\n  const [m, n] = w;\n  const [o, p] = w;\n  const [q, r] = w;\n  const [s, t] = w;\n  const [u, v] = w;\n  const [w, x] = w;\n  const [y, z] = w;\n  const [a, c] = w;\n  const [d, e] = w;\n  const [f, g] = w;\n  const [h, i] = w;\n  const [j, k] = w;\n  const [l, m] = w;\n  const [n, o] = w;\n  const [p, q] = w;\n  const [r, s] = w;\n  const [t, u] = w;\n  const [v, w] = w;\n  const [x, y] = w;\n  const [z, 0] = w;\n  const [y, 1] = w;\n  const [z, 2] = w;\n  const [y, 3] = w;\n  const [z, 4] = w;\n  const [y, 5] = w;\n  const [z, 6] = w;\n  const [y, 7] = w;\n  const [z, 8] = w;\n  const [y, 9] = w;\n  const [z, 10] = w;\n  const [y, 11] = w;\n  const [z, 12] = w;\n  const [y, 13] = w;\n  const [z, 14] = w;\n  const [y, 15] = w;\n  const [z, 16] = w;\n  const [y, 17] = w;\n  const [z, 18] = w;\n  const [y, 19] = w;\n  const [z, 20] = w;\n  const [y, 21] = w;\n  const [z, 22] = w;\n  const [y, 23] = w;\n  const [z, 24] = w;\n  const [y, 25] = w;\n  const [z, 26] = w;\n  const [y, 27] = w;\n  const [z, 28] = w;\n  const [y, 29] = w;\n  const [z, 30] = w;\n  const [y, 31] = w;\n  const [z, 32] = w;\n  const [y, 33] = w;\n  const [z, 34] = w;\n  const [y, 35] = w;\n  const [z, 36] = w;\n  const [y, 37] = w;\n  const [z, 38] = w;\n  const [y, 39] = w;\n  const [z, 40] = w;\n  const [y, 41] = w;\n  const [z, 42] = w;\n  const [y, 43] = w;\n  const [z, 44] = w;\n  const [y, 45] = w;\n  const [z, 46] = w;\n  const [y, 47] = w;\n  const [z, 48] = w;\n  const [y, 49] = w;\n  const [z, 50] = w;\n  const [y, 51] = w;\n  const [z, 52] = w;\n  const [y, 53] = w;\n  const [z, 54] = w;\n  const [y, 55] = w;\n  const [z, 56] = w;\n  const [y, 57] = w;\n  const [z, 58] = w;\n  const [y, 59] = w;\n  const [z, 60] = w;\n  const [y, 61] = w;\n  const [z, 62] = w;\n  const [y, 63] = w;\n  const [z, 64] = w;\n  const [y, 65] = w;\n  const [z, 66] = w;\n  const [y, 67] = w;\n  const [z, 68] = w;\n  const [y, 69] = w;\n  const [z, 70] = w;\n  const [y, 71] = w;\n  const [z, 72] = w;\n  const [y, 73] = w;\n  const [z, 74] = w;\n  const [y, 75] = w;\n  const [z, 76] = w;\n  const [y, 77] = w;\n  const [z, 78] = w;\n  const [y, 79] = w;\n  const [z, 80] = w;\n  const [y, 81] = w;\n  const [z, 82] = w;\n  const [y, 83] = w;\n  const [z, 84] = w;\n  const [y, 85] = w;\n  const [z, 86] = w;\n  const [y, 87] = w;\n  const [z, 88] = w;\n  const [y, 89] = w;\n  const [z, 90] = w;\n  const [y, 91] = w;\n  const [z, 92] = w;\n  const [y, 93] = w;\n  const [z, 94] = w;\n  const [y, 95] = w;\n  const [z, 96] = w;\n  const [y, 97] = w;\n  const [z, 98] = w;\n  const [y, 99] = w;\n  const [z, 100] = w;\n  const [y, 101] = w;\n  const [z, 102] = w;\n  const [y, 103] = w;\n  const [z, 104] = w;\n  const [y, 105] = w;\n  const [z, 106] = w;\n  const [y, 107] = w;\n  const [z, 108] = w;\n  const [y, 109] = w;\n  const [z, 110] = w;\n  const [y, 111] = w;\n  const [z, 112] = w;\n  const [y, 113] = w;\n  const [z, 114] = w;\n  const [y, 115] = w;\n  const [z, 116] = w;\n  const [y, 117] = w;\n  const [z, 118] = w;\n  const [y, 119] = w;\n  const [z, 120] = w;\n  const [y, 121] = w;\n  const [z, 122] = w;\n  const [y, 123] = w;\n  const [z, 124] = w;\n  const [y, 125] = w;\n  const [z, 126] = w;\n  const [y, 127] = w;\n  const [z, 128] = w;\n  const [y, 129] = w;\n  const [z, 130] = w;\n  const [y, 131] = w;\n  const [z, 132] = w;\n  const [y, 133] = w;\n  const [z, 134] = w;\n  const [y, 135] = w;\n  const [z, 136] = w;\n  const [y, 137] = w;\n  const [", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  GiVEn an ArraY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn an ArraY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let change = 0;\n  while (min <= max) {\n    change = arr[min] + arr[max] - arr[min];\n    if (change < min) {\n      min = change + 1;\n    } else if (change > max) {\n      max = change - 1;\n    } else {\n      break;\n    }\n  }\n  return change;\n};\n\n/*\n  GiVEn an ARRAY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInPlace = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let change = 0;\n  while (min <= max) {\n    change = arr[min] + arr[max] - arr[min];\n    if (change < min) {\n      arr[min] = change;\n      min = change + 1;\n    } else if (change > max) {\n      arr[max] = change;\n      max = change - 1;\n    } else {\n      break;\n    }\n  }\n};\n\n/*\n  GiVEn an ARRAY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInPlaceInPlace = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let change = 0;\n  while (min <= max) {\n    change = arr[min] + arr[max] - arr[min];\n    if (change < min) {\n      arr[min] = change;\n      min = change + 1;\n    } else if (change > max) {\n      arr[max] = change;\n      max = change - 1;\n    } else {\n      break;\n    }\n  }\n};\n\n/*\n  GiVEn an ARRAY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInPlaceInPlaceInPlace = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let change = 0;\n  while (min <= max) {\n    change = arr[min] + arr[max] - arr[min];\n    if (change < min) {\n      arr[min] = change;\n      min = change + 1;\n    } else if (change > max) {\n      arr[max] = change;\n      max = change - 1;\n    } else {\n      break;\n    }\n  }\n};\n\n/*\n  GiVEn an ARRAY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInPlaceInPlaceInPlaceInPlace = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let change = 0;\n  while (min <= max) {\n    change = arr[min] + arr[max] - arr[min];\n    if (change < min) {\n      arr[min] = change;\n      min = change + 1;\n    } else if (change > max) {\n      arr[max] = change;\n      max = change - 1;\n    } else {\n      break;\n    }\n  }\n};\n\n/*\n  GiVEn an ARRAY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInPlaceInPlaceInPlaceInPlaceInPlace = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let change = 0;\n  while (min <= max) {\n    change = arr[min] + arr[max] - arr[min];\n    if (change < min) {\n      arr[min] = change;\n      min = change + 1;\n    } else if (change > max) {\n      arr[max] = change;\n      max = change - 1;\n    } else {\n      break;\n    }\n  }\n};\n\n/*\n  GiVEn an ARRA", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const set1 = new Set(lst1);\n  const set2 = new Set(lst2);\n  const set3 = new Set();\n  const set4 = new Set();\n  const set5 = new Set();\n  const set6 = new Set();\n  const set7 = new Set();\n  const set8 = new Set();\n  const set9 = new Set();\n  const set10 = new Set();\n  const set11 = new Set();\n  const set12 = new Set();\n  const set13 = new Set();\n  const set14 = new Set();\n  const set15 = new Set();\n  const set16 = new Set();\n  const set17 = new Set();\n  const set18 = new Set();\n  const set19 = new Set();\n  const set20 = new Set();\n  const set21 = new Set();\n  const set22 = new Set();\n  const set23 = new Set();\n  const set24 = new Set();\n  const set25 = new Set();\n  const set26 = new Set();\n  const set27 = new Set();\n  const set28 = new Set();\n  const set29 = new Set();\n  const set30 = new Set();\n  const set31 = new Set();\n  const set32 = new Set();\n  const set33 = new Set();\n  const set34 = new Set();\n  const set35 = new Set();\n  const set36 = new Set();\n  const set37 = new Set();\n  const set38 = new Set();\n  const set39 = new Set();\n  const set40 = new Set();\n  const set41 = new Set();\n  const set42 = new Set();\n  const set43 = new Set();\n  const set44 = new Set();\n  const set45 = new Set();\n  const set46 = new Set();\n  const set47 = new Set();\n  const set48 = new Set();\n  const set49 = new Set();\n  const set50 = new Set();\n  const set51 = new Set();\n  const set52 = new Set();\n  const set53 = new Set();\n  const set54 = new Set();\n  const set55 = new Set();\n  const set56 = new Set();\n  const set57 = new Set();\n  const set58 = new Set();\n  const set59 = new Set();\n  const set60 = new Set();\n  const set61 = new Set();\n  const set62 = new Set();\n  const set63 = new Set();\n  const set64 = new Set();\n  const set65 = new Set();\n  const set66 = new Set();\n  const set67 = new Set();\n  const set68 = new Set();\n  const set69 = new Set();\n  const set70 = new Set();\n  const set71 = new Set();\n  const set72 = new Set();\n  const set73 = new Set();\n  const set74 = new Set();\n  const set75 = new Set();\n  const set76 = new Set();\n  const set77 = new Set();\n  const set78 = new Set();\n  const set79 = new Set();\n  const set80 = new Set();\n  const set81 = new Set();\n  const set82 = new Set();\n  const set83 = new Set();\n  const set84 = new Set();\n  const set85 = new Set();\n  const set86 = new Set();\n  const set87 = new Set();\n  const set88 = new Set();\n  const set89 = new Set();\n  const set90 = new Set();\n  const set91 = new Set();\n  const set92 = new Set();\n  const set93 = new Set();\n  const set94 = new Set();\n  const set95 = new Set();\n  const set96 = new Set();\n  const set97 = new Set();\n  const set98 = new Set();\n  const set99 = new Set();\n  const set100 = new Set();\n  const set101 = new Set();\n  const set102 = new Set();\n  const set103 = new Set();\n  const set104 = new Set();\n  const set105 = new Set();\n  const set106 = new Set();\n  const set107 = new Set();\n  const set108 = new Set();\n  const set109 = new Set();\n  const set110 = new Set();\n  const set111 = new Set();\n  const set112 = new Set();\n  const set113 = new Set();\n  const set114 = new Set();\n  const set115 = new Set();\n  const set116 = new Set();\n  const set117 = new Set();\n  const set118 = new Set();\n  const set119 = new Set();\n  const set120 = new Set();\n  const set121 = new Set();\n  const set122 = new Set();\n  const set123 = new Set();\n  const set124 = new Set();\n  const set125 = new Set();\n  const set126 = new Set();\n  const set127 = new Set();\n  const set128 = new Set();\n  const set129 = new Set();\n  const set130 = new Set();\n  const set131 = new Set();\n  const set132 = new Set();\n  const set133 = new Set();\n  const set134 = new Set();\n  const set135 = new Set();\n  const set136 = new Set();\n  const set137 = new Set();\n  const set138 = new Set();\n  const set139 = new Set();\n  const set140 = new Set();\n  const set141 = new Set();\n  const set142 = new Set();\n  const set143 = new Set();\n  const set144 = new Set();\n  const set145 = new Set();\n  const set146 = new Set();\n  const set147 = new Set();\n  const set148 = new Set();\n  const set149 = new Set();\n  const set150 = new Set();\n  const set151 = new Set();\n  const set152 = new Set();\n  const set153 = new Set();\n  const set154 = new Set();\n  const set155 = new Set();\n  const set156 = new Set();\n  const set157 = new Set();\n  const set158 = new Set();\n  const set159 = new Set();\n  const set160 = new Set();\n  const set161 = new Set();\n  const set162 = new Set();\n  const set163 = new Set();\n  const set164 = new Set();\n  const set165 = new Set();\n  const set166 = new Set();\n  const set167 = new Set();\n  const set168 = new Set();\n  const set169 = new Set();\n  const set170 = new Set();\n  const set171 = new Set();\n  const set172 = new Set();\n  const set173 = new Set();\n  const set174 = new Set();\n  const set175 = new Set();\n  const set176 = new Set();\n  const set177 = new Set();\n  const set178 = new Set();\n  const set179 = new Set();\n  const ", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  let factor = 2;\n  let factorNum = 2;\n  let factorNum2 = 2;\n  let factorNum3 = 2;\n  let factorNum4 = 2;\n  let factorNum5 = 2;\n  let factorNum6 = 2;\n  let factorNum7 = 2;\n  let factorNum8 = 2;\n  let factorNum9 = 2;\n  let factorNum10 = 2;\n  let factorNum11 = 2;\n  let factorNum12 = 2;\n  let factorNum13 = 2;\n  let factorNum14 = 2;\n  let factorNum15 = 2;\n  let factorNum16 = 2;\n  let factorNum17 = 2;\n  let factorNum18 = 2;\n  let factorNum19 = 2;\n  let factorNum20 = 2;\n  let factorNum21 = 1;\n  let factorNum22 = 1;\n  let factorNum23 = 1;\n  let factorNum24 = 1;\n  let factorNum25 = 1;\n  let factorNum26 = 1;\n  let factorNum27 = 1;\n  let factorNum28 = 1;\n  let factorNum29 = 1;\n  let factorNum30 = 1;\n  let factorNum31 = 1;\n  let factorNum32 = 1;\n  let factorNum33 = 1;\n  let factorNum34 = 1;\n  let factorNum35 = 1;\n  let factorNum36 = 1;\n  let factorNum37 = 1;\n  let factorNum38 = 1;\n  let factorNum39 = 1;\n  let factorNum40 = 1;\n  let factorNum41 = 1;\n  let factorNum42 = 1;\n  let factorNum43 = 1;\n  let factorNum44 = 1;\n  let factorNum45 = 1;\n  let factorNum46 = 1;\n  let factorNum47 = 1;\n  let factorNum48 = 1;\n  let factorNum49 = 1;\n  let factorNum50 = 1;\n  let factorNum51 = 1;\n  let factorNum52 = 1;\n  let factorNum53 = 1;\n  let factorNum54 = 1;\n  let factorNum55 = 1;\n  let factorNum56 = 1;\n  let factorNum57 = 1;\n  let factorNum58 = 1;\n  let factorNum59 = 1;\n  let factorNum60 = 1;\n  let factorNum61 = 1;\n  let factorNum62 = 1;\n  let factorNum63 = 1;\n  let factorNum64 = 1;\n  let factorNum65 = 1;\n  let factorNum66 = 1;\n  let factorNum67 = 1;\n  let factorNum68 = 1;\n  let factorNum69 = 1;\n  let factorNum70 = 1;\n  let factorNum71 = 1;\n  let factorNum72 = 1;\n  let factorNum73 = 1;\n  let factorNum74 = 1;\n  let factorNum75 = 1;\n  let factorNum76 = 1;\n  let factorNum77 = 1;\n  let factorNum78 = 1;\n  let factorNum79 = 1;\n  let factorNum80 = 1;\n  let factorNum81 = 1;\n  let factorNum82 = 1;\n  let factorNum83 = 1;\n  let factorNum84 = 1;\n  let factorNum85 = 1;\n  let factorNum86 = 1;\n  let factorNum87 = 1;\n  let factorNum88 = 1;\n  let factorNum89 = 1;\n  let factorNum90 = 1;\n  let factorNum91 = 1;\n  let factorNum92 = 1;\n  let factorNum93 = 1;\n  let factorNum94 = 1;\n  let factorNum95 = 1;\n  let factorNum96 = 1;\n  let factorNum97 = 1;\n  let factorNum98 = 1;\n  let factorNum99 = 1;\n  let factorNum100 = 1;\n  let factorNum101 = 1;\n  let factorNum102 = 1;\n  let factorNum103 = 1;\n  let factorNum104 = 1;\n  let factorNum105 = 1;\n  let factorNum106 = 1;\n  let factorNum107 = 1;\n  let factorNum108 = 1;\n  let factorNum109 = 1;\n  let factorNum110 = 1;\n  let factorNum111 = 1;\n  let factorNum112 = 1;\n  let factorNum113 = 1;\n  let factorNum114 = 1;\n  let factorNum115 = 1;\n  let factorNum116 = 1;\n  let factorNum117 = 1;\n  let factorNum118 = 1;\n  let factorNum119 = 1;\n  let factorNum120 = 1;\n  let factorNum121 = 1;\n  let factorNum122 = 1;\n  let factorNum123 = 1;\n  let factorNum124 = 1;\n  let factorNum125 = 1;\n  let factorNum126 = 1;\n  let factorNum127 = 1;\n  let factorNum128 = 1;\n  let factorNum129 = 1;\n  let factorNum130 = 1;\n  let factorNum131 = 1;\n  let factorNum132 = 1;\n  let factorNum133 = 1;\n  let factorNum134 = 1;\n  let factorNum135 = 1;\n  let factorNum136 = 1;\n  let factorNum137 = 1;\n  let factorNum138 = 1;\n  let factorNum139 = 1;\n  let factorNum140 = 1;\n  let factorNum141 = 1;\n  let factorNum142 = 1;\n  let factorNum143 = 1;\n  let factorNum144 = 1;\n  let factorNum145 = 1;\n  let factorNum146 = 1;\n  let factorNum147 = 1;\n  let factorNum148 = 1;\n  let factorNum149 = 1;\n  let factorNum150 = 1;\n  let factorNum151 = 1;\n  let factorNum152 = 1;\n  let factorNum153 = 1;\n  let factorNum154 = 1;\n  let factorNum155 = 1;\n  let factorNum156 = 1;\n  let factorNum157 = 1;\n  let factorNum158 = 1;\n  let factorNum159 = 1;\n  let factorNum160 = 1;\n  let factorNum161 = 1;\n  let factorNum162 = 1;\n  let factorNum163 = 1;\n  let factorNum164 = 1;\n  let factorNum165 = 1;\n  let factorNum166 = 1;\n  let factorNum167 = 1;\n  let factorNum168 = 1;\n  let factorNum169 = 1;\n  let factorNum170 = 1;\n  let factorNum171 = 1;\n  let factorNum172 = 1;\n  let factorNum173 = 1;\n  let factorNum174 = 1;\n  let factorNum175 = 1;\n  let factorNum176 = 1;\n  let factorNum177 = 1;\n  let factorNum178 = 1;\n  let factorNum179 = 1;\n  let factorNum180 = 1;\n  let factorNum181 = 1;\n  let factorNum182 = 1;\n  let factorNum183 = 1;\n  let factorNum184 = 1;\n  let factorNum185 = 1;\n  let factorNum186 = 1;\n  let factorNum187 = 1;\n  let factorNum188 = 1;\n  let factorNum189 = 1;\n  let factorNum190 = 1;\n  let factorNum191 = 1;\n  let factorNum192 = 1;\n  let factorNum193 = 1;\n  let factorNum194 = 1;\n  let factorNum195 = 1;\n  let factorNum196 = 1;\n  let factorNum197 = 1;\n  let factorNum198 = 1;\n  let factorNum199 = 1;\n  let factorNum200 = 1;\n  let factorNum201 = 1;\n  let factorNum202 = 1;\n  let factorNum203 = 1;\n  let factorNum204 = 1;\n  let factorNum205 = 1;\n  let factorNum206 = 1;\n  let factorNum207 = 1;\n  let factorNum208 = 1;\n  let factorNum209 = 1;\n  let factorNum210 = 1;\n  let factorNum211 = 1;\n  let factorNum212 = 1;\n  let factorNum213 = 1;\n  let factorNum214 = 1;\n  let factorNum215 = 1;\n  let factorNum216 = 1;\n  let factorNum217 = 1;\n  let factorNum218 = 1;\n  let factorNum219 = 1;\n  let factorNum220 = 1;\n  let factorNum221 = 1;\n  let factorNum222 = 1;\n  let factorNum223 = 1;\n  let factorNum224 = 1;\n  let factorNum225 = 1;\n  let factorNum226 = 1;\n  let factorNum227 = 1;\n  let factorNum228 = 1;\n  let factorNum229 = 1;\n  let factorNum230 = 1;\n  let factorNum231 = 1;\n  let factorNum232 = 1;", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*YouR Task Is to Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YouR Task Is to Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*\n  Task: Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  isSimplePower(5, 2) => false\n  */\nconst isPowerOfTwo = (x) => {\n  if (x <= 0) return false;\n  if (x % 2 === 0) return false;\n  return isPowerOfTwo(Math.floor(x / 2));\n};\n\n/*\n  Task: Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  isSimplePower(5, 2) => false\n  */\nconst isPowerOfTwoOrZero = (x) => {\n  if (x <= 0) return false;\n  if (x % 2 === 0) return false;\n  return isPowerOfTwoOrZero(Math.floor(x / 2));\n};\n\n/*\n  Task: Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  isSimplePower(5, 2) => false\n  */\nconst isPowerOfTwoOrOne = (x) => {\n  if (x <= 0) return false;\n  if (x % 2 === 1) return false;\n  return isPowerOfTwoOrOne(Math.floor(x / 2));\n};\n\n/*\n  Task: Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  isSimplePower(5, 2) => false\n  */\nconst isPowerOfTwoOrBoth = (x) => {\n  if (x <= 0) return false;\n  if (x % 2 === 1) return true;\n  return isPowerOfTwoOrBoth(Math.floor(x / 2));\n};\n\n/*\n  Task: Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  isSimplePower(5, 2) => false\n  */\nconst isPowerOfTwoOrBothOrZero = (x) => {\n  if (x <= 0) return false;\n  if (x % 2 === 1) return false;\n  if (x % 2 === 0) return true;\n  return isPowerOfTwoOrBothOrZero(Math.floor(x / 2));\n};\n\n/*\n  Task: Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  isSimplePower(5, 2) => false\n  */\nconst isPowerOfTwoOrBothOrOne = (x) => {\n  if (x <= 0) return false;\n  if (x % 2 === 1) return false;\n  if (x % 2 === 0) return true;\n  return isPowerOfTwoOrBothOrOne(Math.floor(x / 2));\n};\n\n/*\n  Task: Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  isSimplePower(5, 2) => false\n  */\nconst isPowerOfTwoOrBothOrBoth = (x) => {\n  if (x <= 0) return false;\n  if (x % 2 === 1) return false;\n  if (x % 2 === 0) return true;\n  return isPowerOfTwoOrBothOrBoth(Math.floor(x / 2));\n};\n\n/*\n  Task: Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  isSimplePower(5, 2) => false\n  */\nconst isPowerOfTwoOrBothOrBothZero = (x) => {\n  if (x <= 0) return false;\n  if (x % 2 === 1) return false;\n  if (x ", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a <= Math.pow(2, 31);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  return a >= 0 && a <= Math.pow(2, 31);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  return a >= 0 && a <= Math.pow(2, 31);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  return a >= 0 && a <= Math.pow(2, 31);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  return a >= 0 && a <= Math.pow(2, 31);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  return a >= 0 && a <= Math.pow(2, 31);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  return a >= 0 && a <= Math.pow(2, 31);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  return a >= 0 && a <= Math.pow(2, 31);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  return a >= 0 && a <= Math.pow(2, 31);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube10 = (a) => {\n  return a >= 0 && a <= Math.pow(2, 31);\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You HAve bEen tAsked to wRITe A funcTION thaT receives\n  a Hexadecimal number AS a StRiNg and coUNts tHe nuMbEr OF hExaDEcimAl\n  DiGiTs THaT Are primes (PrIME nuMBEr=== or a primE=== iS A naTuraL nUmbEr\n  GREATer thaN 1 tHat is Not A PrOdUCT OF twO sMaller nAtuRAl numbErs).\n  heXAdeCimaL dIGitS aRe 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  prime Numbers aRe 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you HAvE to detErmInE A numBER of thE folLowIng digitS: 2=== 3=== 5=== 7===\n  B (=DecImal 11)=== D (=deciMal 13).\n  NoTe: you mAy assuMe the iNpuT is AlWayS coRrECt or empTY sTRiNg===\n  and syMBolS a===B===C===D===E===F arE alwaYs UppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You HAve bEen tAsked to wRITe A funcTION thaT receives\n  a Hexadecimal number AS a StRiNg and coUNts tHe nuMbEr OF hExaDEcimAl\n  DiGiTs THaT Are primes (PrIME nuMBEr=== or a primE=== iS A naTuraL nUmbEr\n  GREATer thaN 1 tHat is Not A PrOdUCT OF twO sMaller nAtuRAl numbErs).\n  heXAdeCimaL dIGitS aRe 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  prime Numbers aRe 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you HAvE to detErmInE A numBER of thE folLowIng digitS: 2=== 3=== 5=== 7===\n  B (=DecImal 11)=== D (=deciMal 13).\n  NoTe: you mAy assuMe the iNpuT is AlWayS coRrECt or empTY sTRiNg===\n  and syMBolS a===B===C===D===E===F arE alwaYs UppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumString = '';\n  let hexNumStringLength = 0;\n  let hexNumStringIndex = 0;\n  let hexNumStringIndex2 = 0;\n  let hexNumStringIndex3 = 0;\n  let hexNumStringIndex4 = 0;\n  let hexNumStringIndex5 = 0;\n  let hexNumStringIndex6 = 0;\n  let hexNumStringIndex7 = 0;\n  let hexNumStringIndex8 = 0;\n  let hexNumStringIndex9 = 0;\n  let hexNumStringIndex10 = 0;\n  let hexNumStringIndex11 = 0;\n  let hexNumStringIndex12 = 0;\n  let hexNumStringIndex13 = 0;\n  let hexNumStringIndex14 = 0;\n  let hexNumStringIndex15 = 0;\n  let hexNumStringIndex16 = 0;\n  let hexNumStringIndex17 = 0;\n  let hexNumStringIndex18 = 0;\n  let hexNumStringIndex19 = 0;\n  let hexNumStringIndex20 = 0;\n  let hexNumStringIndex21 = 0;\n  let hexNumStringIndex22 = 0;\n  let hexNumStringIndex23 = 0;\n  let hexNumStringIndex24 = 0;\n  let hexNumStringIndex25 = 0;\n  let hexNumStringIndex26 = 0;\n  let hexNumStringIndex27 = 0;\n  let hexNumStringIndex28 = 0;\n  let hexNumStringIndex29 = 0;\n  let hexNumStringIndex30 = 0;\n  let hexNumStringIndex31 = 0;\n  let hexNumStringIndex32 = 0;\n  let hexNumStringIndex33 = 0;\n  let hexNumStringIndex34 = 0;\n  let hexNumStringIndex35 = 0;\n  let hexNumStringIndex36 = 0;\n  let hexNumStringIndex37 = 0;\n  let hexNumStringIndex38 = 0;\n  let hexNumStringIndex39 = 0;\n  let hexNumStringIndex40 = 0;\n  let hexNumStringIndex41 = 0;\n  let hexNumStringIndex42 = 0;\n  let hexNumStringIndex43 = 0;\n  let hexNumStringIndex44 = 0;\n  let hexNumStringIndex45 = 0;\n  let hexNumStringIndex46 = 0;\n  let hexNumStringIndex47 = 0;\n  let hexNumStringIndex48 = 0;\n  let hexNumStringIndex49 = 0;\n  let hexNumStringIndex50 = 0;\n  let hexNumStringIndex51 = 0;\n  let hexNumStringIndex52 = 0;\n  let hexNumStringIndex53 = 0;\n  let hexNumStringIndex54 = 0;\n  let hexNumStringIndex55 = 0;\n  let hexNumStringIndex56 = 0;\n  let hexNumStringIndex57 = 0;\n  let hexNumStringIndex58 = 0;\n  let hexNumStringIndex59 = 0;\n  let hexNumStringIndex60 = 0;\n  let hexNumStringIndex61 = 0;\n  let hexNumStringIndex62 = 0;\n  let hexNumStringIndex63 = 0;\n  let hexNumStringIndex64 = 0;\n  let hexNumStringIndex65 = 0;\n  let hexNumStringIndex66 = 0;\n  let hexNumStringIndex67 = 0;\n  let hexNumStringIndex68 = 0;\n  let hexNumStringIndex69 = 0;\n  let hexNumStringIndex70 = 0;\n  let hexNumStringIndex71 = 0;\n  let hexNumStringIndex72 = 0;\n  let hexNumStringIndex73 = 0;\n  let hexNumStringIndex74 = 0;\n  let hexNumStringIndex75 = 0;\n  let hexNumStringIndex76 = 0;\n  let hexNumStringIndex77 = 0;\n  let hexNumStringIndex78 = 0;\n  let hexNumStringIndex79 = 0;\n  let hexNumStringIndex80 = 0;\n  let hexNumStringIndex81 = 0;\n  let hexNumStringIndex82 = 0;\n  let hexNumStringIndex83 = 0;\n  let hexNumStringIndex84 = 0;\n  let hexNumStringIndex85 = 0;\n  let hexNumStringIndex86 = 0;\n  let hexNumStringIndex87 = 0;\n  let hexNumStringIndex88 = 0;\n  let hexNumStringIndex89 = 0;\n  let hexNumStringIndex90 = 0;\n  let hexNumStringIndex91 = 0;\n  let hexNumStringIndex92 = 0;\n  let hexNumStringIndex93 = 0;\n  let hexNumStringIndex94 = 0;\n  let hexNumStringIndex95 = 0;\n  let hexNumStringIndex96 = 0;\n  let hexNumStringIndex97 = 0;\n  let hexNumStringIndex98 = 0;\n  let hexNumStringIndex99 = 0;\n  let hexNumStringIndex100 = 0;\n  let hexNumStringIndex101 = 0;\n  let hexNumStringIndex102 = 0;\n  let hexNumStringIndex103 = 0;\n  let hexNumStringIndex104 = 0;\n  let hexNumStringIndex105 = 0;\n  let hexNumStringIndex106 = 0;\n  let hexNumStringIndex107 = 0;\n  let hexNumStringIndex108 = 0;\n  let hexNumStringIndex109 = 0;\n  let hexNumStringIndex110 = 0;\n  let hexNumStringIndex111 = 0;\n  let hexNumStringIndex112 = 0;\n  let hexNumStringIndex113 = 0;\n  let hexNumStringIndex114 = 0;\n  let hexNumStringIndex115 = 0;\n  let hexNumStringIndex116 = 0;\n  let hexNumStringIndex117 = 0;\n  let hexNumStringIndex118 = 0;\n  let hexNumStringIndex119 = 0;\n  let hexNumStringIndex120 = 0;\n  let hexNumStringIndex121 = 0;\n  let hexNumStringIndex122 = 0;\n  let hexNumStringIndex123 = 0;\n  let hexNumStringIndex124 = 0;\n  let hexNumStringIndex125 = 0;\n  let hexNumStringIndex126 = 0;\n  let hexNumStringIndex127 = 0;\n  let hexNumStringIndex128 = 0;\n  let hexNumStringIndex129 = 0;\n  let hexNumStringIndex130 = 0;\n  let hexNumStringIndex131 = 0;\n  let hexNumStringIndex132 = 0;\n  let hexNumStringIndex133 = 0;\n  let hexNumStringIndex134 = 0;\n  let hexNumStringIndex135 = 0;\n  let hexNumStringIndex136 = 0;\n  let hexNumStringIndex137 = 0;\n  let hexNumStringIndex138 = 0;\n  let hexNumStringIndex139 = 0;\n  let hexNumStringIndex140 = 0;\n  let hexNumStringIndex141 = 0;\n  let hex", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let num;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n\n  binary = binary.padStart(8, \"0\");\n\n  num = decimal.toString(2);\n\n  i = num.length;\n\n  while (i--) {\n    binary = binary + num.charAt(i);\n  }\n\n  return binary;\n};\n\n/*\n  decimalToHex(decimal)\n\n  Converts a decimal number to a hexadecimal string.\n\n  Examples:\n  decimalToHex(15)   # returns \"db\"\n  decimalToHex(32)   # returns \"db\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = \"\";\n  let num;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n\n  hex = hex.padStart(8, \"0\");\n\n  num = decimal.toString(16);\n\n  i = num.length;\n\n  while (i--) {\n    hex = hex + num.charAt(i);\n  }\n\n  return hex;\n};\n\n/*\n  decimalToOctal(decimal)\n\n  Converts a decimal number to a octal string.\n\n  Examples:\n  decimalToOctal(15)   # returns \"15\"\n  decimalToOctal(32)   # returns \"32\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = \"\";\n  let num;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n\n  octal = octal.padStart(8, \"0\");\n\n  num = decimal.toString(8);\n\n  i = num.length;\n\n  while (i--) {\n    octal = octal + num.charAt(i);\n  }\n\n  return octal;\n};\n\n/*\n  decimalToBinaryString(decimal)\n\n  Converts a decimal number to a binary string.\n\n  Examples:\n  decimalToBinaryString(15)   # returns \"1110111\"\n  decimalToBinaryString(32)   # returns \"1001001\"\n  */\nconst decimalToBinaryString = (decimal) => {\n  let binary = \"\";\n  let num;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n\n  binary = binary.padStart(8, \"0\");\n\n  num = decimal.toString(2);\n\n  i = num.length;\n\n  while (i--) {\n    binary = binary + num.charAt(i);\n  }\n\n  return binary;\n};\n\n/*\n  decimalToHexString(decimal)\n\n  Converts a decimal number to a hexadecimal string.\n\n  Examples:\n  decimalToHexString(15)   # returns \"db\"\n  decimalToHexString(32)   # returns \"db\"\n  */\nconst decimalToHexString = (decimal) => {\n  let hex = \"\";\n  let num;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n\n  hex = hex.padStart(8, \"0\");\n\n  num = decimal.toString(16);\n\n  i = num.length;\n\n  while (i--) {\n    hex = hex + num.charAt(i);\n  }\n\n  return hex;\n};\n\n/*\n  decimalToOctalString(decimal)\n\n  Converts a decimal number to a octal string.\n\n  Examples:\n  decimalToOctalString(15)   # returns \"15\"\n  decimalToOctalString(32)   # returns \"32\"\n  */\nconst decimalToOctalString = (decimal) => {\n  let octal = \"\";\n  let num;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n\n  octal = octal.padStart(8, \"0\");\n\n  num = decimal.toString(8);\n\n  i = num.length;\n\n  while (i--) {\n    octal = octal + num.charAt(i);\n  }\n\n  return octal;\n};\n\n/*\n  decimalToBinaryString(decimal)\n\n  Converts a decimal number to a binary string.\n\n  Examples:\n  decimalToBinaryString(15)   # returns \"1110111\"\n  decimalToBinaryString(32)   # returns \"1001001\"\n  */\nconst decimalToBinaryString = (decimal) => {\n  let binary = \"\";\n  let num;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n\n  binary = binary.padStart(8, \"0\");\n\n  num = decimal.toString(2);\n\n  i = num.length;\n\n  while (i--) {\n    binary = binary + num.charAt(i);\n  }\n\n  return binary;\n};\n\n/*\n  decimalToHexString(decimal)\n\n  Converts a decimal number to a hexadecimal string.\n\n  Examples:\n  decimalToHexString(15)   # returns \"db\"\n  decimalToHexString(32)   # returns \"db\"\n  */\nconst decimalToHexString = (decimal) => {\n  let hex = \"\";\n  let num;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n\n  hex = hex.padStart(8, \"0\");\n\n  num = decimal.toString(16);\n\n  i = num.length;\n\n  while (i--) {\n    hex = ", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 1)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([], 2)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([], 3)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([], 4)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 4)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([], 5)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 5)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([], 6)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 6)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([], 7)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 7)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([], 8)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 8)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([], 9)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 9)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([], 10)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 10)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return [sum, sum];", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const [,, s] = s.split('');\n  return s.split('').every((char) => char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u');\n};\n\n/*\n  You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const [,, s] = s.split('');\n  return s.split('').every((char) => char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u');\n};\n\n/*\n  You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const [,, s] = s.split('');\n  return s.split('').every((char) => char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u');\n};\n\n/*\n  You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const [,, s] = s.split('');\n  return s.split('').every((char) => char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u');\n};\n\n/*\n  You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const [,, s] = s.split('');\n  return s.split('').every((char) => char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u');\n};\n\n/*\n  You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const [,, s] = s.split('');\n  return s.split('').every((char) => char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u');\n};\n\n/*\n  You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const [,, s] = s.split('');\n  return s.split('').every((char) => char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u');\n};\n\n/*\n  You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const [,, s] = s.split('');\n  return s.split('').every((char) => char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u');\n};\n\n/*", "passed": 0}
{"task_id": "JavaScript/81", "prompt": "/*It iS The lAst wEek of the SEMeSter aND THe teAcher has to Give the grades\n  to students. tHe TeAcHer has bEEn maKing HeR oWN aLgoRIthm FoR gRaDiNG.\n  THE onLy PROblEM Is, she has lOsT The Code ShE usEd FOR GRading.\n  shE has gIveN YoU a list OF gpas fOr Some stuDenTS and yoU haVe TO wrIte\n  a FuNCtiOn That caN OUtput A list of letteR grades using tHE fOllowiNg tAbLE:\n           GPA       |    lETter gRade\n            4.0                a+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*It iS The lAst wEek of the SEMeSter aND THe teAcher has to Give the grades\n  to students. tHe TeAcHer has bEEn maKing HeR oWN aLgoRIthm FoR gRaDiNG.\n  THE onLy PROblEM Is, she has lOsT The Code ShE usEd FOR GRading.\n  shE has gIveN YoU a list OF gpas fOr Some stuDenTS and yoU haVe TO wrIte\n  a FuNCtiOn That caN OUtput A list of letteR grades using tHE fOllowiNg tAbLE:\n           GPA       |    lETter gRade\n            4.0                a+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b, 0);\n  const gradesArrayMean = gradesArraySum / gradesArrayLength;\n  const gradesArrayVariance = gradesArraySum / gradesArrayLength - gradesArrayMean * gradesArrayMean;\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b), 0);\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b), 0);\n  const gradesArrayMeanGrade = gradesArray.reduce((a, b) => a + b) / gradesArrayLength;\n  const gradesArrayStdDevGrade = gradesArrayStdDev / gradesArrayLength;\n  const gradesArrayMaxGrade = gradesArray.reduce((a, b) => Math.max(a, b), 0);\n  const gradesArrayMinGrade = gradesArray.reduce((a, b) => Math.min(a, b), 0);\n  const gradesArrayMeanGradeGrade = gradesArrayMeanGrade + gradesArrayMeanGrade;\n  const gradesArrayStdDevGradeGrade = gradesArrayStdDevGrade + gradesArrayStdDevGrade;\n  const gradesArrayMaxGradeGrade = gradesArrayMaxGrade + gradesArrayMaxGrade;\n  const gradesArrayMinGradeGrade = gradesArrayMinGrade + gradesArrayMinGrade;\n  const gradesArrayMeanGradeGradeGrade = gradesArrayMeanGradeGrade + gradesArrayMeanGradeGrade;\n  const gradesArrayStdDevGradeGradeGrade = gradesArrayStdDevGradeGrade + gradesArrayStdDevGradeGrade;\n  const gradesArrayMaxGradeGradeGrade = gradesArrayMaxGradeGrade + gradesArrayMaxGradeGrade;\n  const gradesArrayMinGradeGradeGrade = gradesArrayMinGradeGrade + gradesArrayMinGradeGrade;\n  const gradesArrayMeanGradeGradeGradeGrade = gradesArrayMeanGradeGradeGrade + gradesArrayMeanGradeGradeGrade;\n  const gradesArrayStdDevGradeGradeGradeGrade = gradesArrayStdDevGradeGradeGrade + gradesArrayStdDevGradeGradeGrade;\n  const gradesArrayMaxGradeGradeGradeGrade = gradesArrayMaxGradeGradeGrade + gradesArrayMaxGradeGradeGrade;\n  const gradesArrayMinGradeGradeGradeGrade = gradesArrayMinGradeGradeGrade + gradesArrayMinGradeGradeGrade;\n  const gradesArrayMeanGradeGradeGradeGrade = gradesArrayMeanGradeGradeGrade + gradesArrayMeanGradeGradeGrade;\n  const gradesArrayStdDevGradeGradeGradeGrade = gradesArrayStdDevGradeGradeGrade + gradesArrayStdDevGradeGradeGrade;\n  const gradesArrayMaxGradeGradeGradeGrade = gradesArrayMaxGradeGradeGrade + gradesArrayMaxGradeGradeGrade;\n  const gradesArrayMinGradeGradeGradeGradeGrade = gradesArrayMinGradeGradeGradeGrade + gradesArrayMinGradeGradeGradeGrade;\n  const gradesArrayMeanGradeGradeGradeGradeGrade = gradesArrayMeanGradeGradeGradeGrade + gradesArrayMeanGradeGradeGradeGrade;\n  const gradesArrayStdDevGradeGradeGradeGradeGrade = gradesArrayStdDevGradeGradeGrade + gradesArrayStdDevGradeGradeGradeGrade;\n  const gradesArrayMaxGradeGradeGradeGradeGradeGrade = gradesArrayMaxGradeGradeGradeGrade + gradesArrayMaxGradeGradeGradeGrade;\n  const gradesArrayMinGradeGradeGradeGradeGradeGrade = gradesArrayMinGradeGradeGradeGradeGrade + gradesArrayMinGradeGradeGradeGradeGrade;\n  const gradesArrayMeanGradeGradeGradeGradeGradeGrade = gradesArrayMeanGradeGradeGradeGradeGrade + gradesArrayMeanGradeGradeGradeGradeGrade;\n  const gradesArrayStdDevGradeGradeGradeGradeGradeGrade = gradesArrayStdDevGradeGradeGradeGrade + gradesArrayStdDevGradeGradeGradeGradeGrade;\n  const gradesArrayMaxGradeGradeGradeGradeGradeGrade = gradesArrayMaxGradeGradeGradeGradeGrade + gradesArrayMaxGradeGradeGradeGradeGrade;\n  const gradesArrayMinGradeGradeGradeGradeGradeGrade = gradesArrayMinGradeGradeGradeGradeGrade + gradesArrayMinGradeGradeGradeGradeGrade;\n  const gradesArrayMeanGradeGradeGradeGradeGradeGrade = gradesArrayMeanGradeGradeGradeGradeGrade + gradesArrayMeanGradeGradeGradeGradeGrade;\n  const gradesArrayStdDevGradeGradeGradeGradeGrade = gradesArrayStdDevGradeGradeGradeGrade + gradesArrayStdDevGrade", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*WriTE a fuNctiOn that taKES a string And reTURNs trUe if the string\n  lenGth is a prime number OR fAlSe OtherwiSE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a fuNctiOn that taKES a string And reTURNs trUe if the string\n  lenGth is a prime number OR fAlSe OtherwiSE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let char;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let nDigits = n.toString().length;\n  let nUmbers = nDigits - 1;\n  let nTheta = nDigits - 2;\n  let nTheta2 = nTheta + 1;\n  let nTheta3 = nTheta + 2;\n  let nTheta4 = nTheta + 3;\n  let nTheta5 = nTheta + 4;\n  let nTheta6 = nTheta + 5;\n  let nTheta7 = nTheta + 6;\n  let nTheta8 = nTheta + 7;\n  let nTheta9 = nTheta + 8;\n  let nTheta10 = nTheta + 9;\n  let nTheta11 = nTheta + 10;\n  let nTheta12 = nTheta + 11;\n  let nTheta13 = nTheta + 12;\n  let nTheta14 = nTheta + 13;\n  let nTheta15 = nTheta + 14;\n  let nTheta16 = nTheta + 15;\n  let nTheta17 = nTheta + 16;\n  let nTheta18 = nTheta + 17;\n  let nTheta19 = nTheta + 18;\n  let nTheta20 = nTheta + 19;\n  let nTheta21 = nTheta + 20;\n  let nTheta22 = nTheta + 21;\n  let nTheta23 = nTheta + 22;\n  let nTheta24 = nTheta + 23;\n  let nTheta25 = nTheta + 24;\n  let nTheta26 = nTheta + 25;\n  let nTheta27 = nTheta + 26;\n  let nTheta28 = nTheta + 27;\n  let nTheta29 = nTheta + 28;\n  let nTheta30 = nTheta + 29;\n  let nTheta31 = nTheta + 30;\n  let nTheta32 = nTheta + 31;\n  let nTheta33 = nTheta + 32;\n  let nTheta34 = nTheta + 33;\n  let nTheta35 = nTheta + 34;\n  let nTheta36 = nTheta + 35;\n  let nTheta37 = nTheta + 36;\n  let nTheta38 = nTheta + 37;\n  let nTheta39 = nTheta + 38;\n  let nTheta40 = nTheta + 39;\n  let nTheta41 = nTheta + 40;\n  let nTheta42 = nTheta + 41;\n  let nTheta43 = nTheta + 42;\n  let nTheta44 = nTheta + 43;\n  let nTheta45 = nTheta + 44;\n  let nTheta46 = nTheta + 45;\n  let nTheta47 = nTheta + 46;\n  let nTheta48 = nTheta + 47;\n  let nTheta49 = nTheta + 48;\n  let nTheta50 = nTheta + 49;\n  let nTheta51 = nTheta + 50;\n  let nTheta52 = nTheta + 51;\n  let nTheta53 = nTheta + 52;\n  let nTheta54 = nTheta + 53;\n  let nTheta55 = nTheta + 54;\n  let nTheta56 = nTheta + 55;\n  let nTheta57 = nTheta + 56;\n  let nTheta58 = nTheta + 57;\n  let nTheta59 = nTheta + 58;\n  let nTheta60 = nTheta + 59;\n  let nTheta61 = nTheta + 60;\n  let nTheta62 = nTheta + 61;\n  let nTheta63 = nTheta + 62;\n  let nTheta64 = nTheta + 63;\n  let nTheta65 = nTheta + 64;\n  let nTheta66 = nTheta + 65;\n  let nTheta67 = nTheta + 66;\n  let nTheta68 = nTheta + 67;\n  let nTheta69 = nTheta + 68;\n  let nTheta70 = nTheta + 69;\n  let nTheta71 = nTheta + 70;\n  let nTheta72 = nTheta + 71;\n  let nTheta73 = nTheta + 72;\n  let nTheta74 = nTheta + 73;\n  let nTheta75 = nTheta + 74;\n  let nTheta76 = nTheta + 75;\n  let nTheta77 = nTheta + 76;\n  let nTheta78 = nTheta + 77;\n  let nTheta79 = nTheta + 78;\n  let nTheta80 = nTheta + 79;\n  let nTheta81 = nTheta + 80;\n  let nTheta82 = nTheta + 81;\n  let nTheta83 = nTheta + 82;\n  let nTheta84 = nTheta + 83;\n  let nTheta85 = nTheta + 84;\n  let nTheta86 = nTheta + 85;\n  let nTheta87 = nTheta + 86;\n  let nTheta88 = nTheta + 87;\n  let nTheta89 = nTheta + 88;\n  let nTheta90 = nTheta + 89;\n  let nTheta91 = nTheta + 90;\n  let nTheta92 = nTheta + 91;\n  let nTheta93 = nTheta + 92;\n  let nTheta94 = nTheta + 93;\n  let nTheta95 = nTheta + 94;\n  let nTheta96 = nTheta + 95;\n  let nTheta97 = nTheta + 96;\n  let nTheta98 = nTheta + 97;\n  let nTheta99 = nTheta + 98;\n  let nTheta100 = nTheta + 99;\n  let nTheta101 = nTheta;\n  let nTheta102 = nTheta;\n  let nTheta103 = nTheta;\n  let nTheta104 = nTheta;\n  let nTheta105 = nTheta;\n  let nTheta106 = nTheta;\n  let nTheta107 = nTheta;\n  let nTheta108 = nTheta;\n  let nTheta109 = nTheta;\n  let nTheta110 = nTheta;\n  let nTheta111 = nTheta;\n  let nTheta112 = nTheta;\n  let nTheta113 = nTheta;\n  let nTheta114 = nTheta;\n  let nTheta115 = nTheta;\n  let nTheta116 = nTheta;\n  let nTheta117 = nTheta;\n  let nTheta118 = nTheta;\n  let nTheta119 = nTheta;\n  let nTheta120 = nTheta;\n  let nTheta121 = nTheta;\n  let nTheta122 = nTheta;\n  let nTheta123 = nTheta;\n  let nTheta124 = n", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*GivEN a poSitiVe integeR N, return THe Total SUM Of itS digits in binAry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a poSitiVe integeR N, return THe Total SUM Of itS digits in binAry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let binary = \"\";\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    binary = binary.concat(binary(i));\n    sum += binary(i);\n  }\n  return sum;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 10.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 10.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 10 + binary(i);\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal2 = (b) => {\n  let decimal = 0;\n  for (let i = 0; i <= b.length; i++) {\n    decimal = decimal * 2 + b[i];\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal3 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 2 + binary(i) + 1;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal4 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 2 + binary(i) + 2;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal5 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 2 + binary(i) + 3;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal6 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 2 + binary(i) + 4;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal7 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 2 + binary(i) + 5;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal8 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 2 + binary(i) + 6;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal9 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 2 + binary(i) + 7;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal10 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 2 + binary(i) + 8;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal11 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 2 + binary(i) + 9;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal12 = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i <= binary.length; i++) {\n    decimal = decimal * 2 + binary(i) + 10;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number, return its decimal equivalent in base 2.\n  \n  Example\n      Given binary = 11001, return its decimal equivalent in base 2.\n  \n  Variables:\n      @binary string \n           Constraints: 0 ≤ binary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal13 = (binary) => {\n  let decimal = 0;\n", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  even.push(even[0]);\n  odd.push(odd[0]);\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAll = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAllEven([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllOdd = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAllOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAllOddEven([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOdd = (lst, even, odd) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAllEvenOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAllEvenOddEven([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAllEvenOddOddEven([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAllEvenOddOddOddEven([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAllEvenOddOddOddOddEven([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAllEvenOddOddOddOddEven([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  even.shift();\n  odd.shift();\n  return even.concat(odd);\n};\n\n/*\n  Given a noN-empTy list of inteGERs lst. remove The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      removeAllEvenOddOddOddOddO", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').toLowerCase().split('');\n  const shuffled = [];\n  for (let i = 0; i < chars.length; i++) {\n    const index = Math.floor(Math.random() * chars.length);\n    shuffled.push(chars[index]);\n  }\n  return shuffled.join('');\n};\n\n/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').toLowerCase().split('');\n  const shuffled = [];\n  for (let i = 0; i < chars.length; i++) {\n    const index = Math.floor(Math.random() * chars.length);\n    shuffled.push(chars[index]);\n  }\n  return shuffled.join('');\n};\n\n/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').toLowerCase().split('');\n  const shuffled = [];\n  for (let i = 0; i < chars.length; i++) {\n    const index = Math.floor(Math.random() * chars.length);\n    shuffled.push(chars[index]);\n  }\n  return shuffled.join('');\n};\n\n/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').toLowerCase().split('');\n  const shuffled = [];\n  for (let i = 0; i < chars.length; i++) {\n    const index = Math.floor(Math.random() * chars.length);\n    shuffled.push(chars[index]);\n  }\n  return shuffled.join('');\n};\n\n/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').toLowerCase().split('');\n  const shuffled = [];\n  for (let i = 0; i < chars.length; i++) {\n    const index = Math.floor(Math.random() * chars.length);\n    shuffled.push(chars[index]);\n  }\n  return shuffled.join('');\n};\n\n/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').toLowerCase().split('');\n  const shuffled = [];\n  for (let i = 0; i < chars.length; i++) {\n    const index = Math.floor(Math.random() * chars.length);\n    shuffled.push(chars[index]);\n  }\n  return shuffled.join('');\n};\n\n/*\n  WrIT", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2) ...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const n = lst.length;\n  const m = lst[0].length;\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      ret.push([lst[i][j], i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const n = lst.length;\n  const m = lst[0].length;\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      ret.push([lst[i][j], i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe the list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowss = (lst, x) => {\n  const n = lst.length;\n  const m = lst[0].length;\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      ret.push([lst[i][j], i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe the list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowss = (lst, x) => {\n  const n = lst.length;\n  const m = lst[0].length;\n  const ret = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      ret.push([lst[i][j], i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe the list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = []\n  let index = 0\n  let length = array.length\n  let isEven = false\n\n  while (index < length) {\n    if (array[index] % 2 === 0) {\n      sortedArray.push(array[index])\n      index++\n    } else {\n      isEven =!isEven\n      sortedArray.push(array[index])\n      index++\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverse = (array) => {\n  let sortedArray = []\n  let index = 0\n  let length = array.length\n  let isEven = false\n\n  while (index < length) {\n    if (array[index] % 2 === 0) {\n      sortedArray.push(array[index])\n      index++\n    } else {\n      isEven =!isEven\n      sortedArray.push(array[index])\n      index++\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverseReverse = (array) => {\n  let sortedArray = []\n  let index = 0\n  let length = array.length\n  let isEven = false\n\n  while (index < length) {\n    if (array[index] % 2 === 0) {\n      sortedArray.push(array[index])\n      index++\n    } else {\n      isEven =!isEven\n      sortedArray.push(array[index])\n      index++\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverseReverseReverse = (array) => {\n  let sortedArray = []\n  let index = 0\n  let length = array.length\n  let isEven = false\n\n  while (index < length) {\n    if (array[index] % 2 === 0) {\n      sortedArray.push(array[index])\n      index++\n    } else {\n      isEven =!isEven\n      sortedArray.push(array[index])\n      index++\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverseReverseReverseReverse = (array) => {\n  let sortedArray = []\n  let index = 0\n  let length = array.length\n  let isEven = false\n\n  while (index < length) {\n    if (array[index] % 2 === 0) {\n      sortedArray.push(array[index])\n      index++\n    } else {\n      isEven =!isEven\n      sortedArray.push(array[index])\n      index++\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let r = '';\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let ", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxValues = numbers.reduce((acc, curr) => Math.max(acc, curr), 0);\n  return numbers.reduce((acc, curr) => Math.min(acc, curr), maxValues);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng minimum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const minValues = numbers.reduce((acc, curr) => Math.min(acc, curr), 0);\n  return numbers.reduce((acc, curr) => Math.max(acc, curr), minValues);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sumValues = numbers.reduce((acc, curr) => acc + curr);\n  return numbers.reduce((acc, curr) => acc + curr - sumValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng minimum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMean = (numbers) => {\n  const meanValues = numbers.reduce((acc, curr) => acc + curr / numbers.length);\n  return numbers.reduce((acc, curr) => acc + curr - meanValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng minimum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVariance = (numbers) => {\n  const varianceValues = numbers.reduce((acc, curr) => acc + Math.pow(curr - meanValues, 2));\n  return numbers.reduce((acc, curr) => acc + curr - varianceValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStdDev = (numbers) => {\n  const stdDevValues = numbers.reduce((acc, curr) => acc + Math.pow(curr - meanValues, 0.5));\n  return numbers.reduce((acc, curr) => acc + curr - stdDevValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSkewness = (numbers) => {\n  const skewnessValues = numbers.reduce((acc, curr) => acc + Math.pow(curr - meanValues, -0.5));\n  return numbers.reduce((acc, curr) => acc + curr - skewnessValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingKurtosis = (numbers) => {\n  const kurtosisValues = numbers.reduce((acc, curr) => acc + Math.pow(curr - meanValues, -2));\n  return numbers.reduce((acc, curr) => acc + curr - kurtosisValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingCorrelation = (numbers) => {\n  const correlationValues = numbers.reduce((acc, curr) => acc + Math.pow(curr - meanValues, 0.5));\n  return numbers.reduce((acc, curr) => acc + curr - correlationValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingPValue = (numbers) => {\n  const pValueValues = numbers.reduce((acc, curr) => acc + Math.pow(curr - meanValues, -0.5));\n  return numbers.reduce((acc, curr) => acc + curr - pValueValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQValue = (numbers) => {\n  const qValueValues = numbers.reduce((acc, curr) => acc + Math.pow(curr - meanValues, -2));\n  return numbers.reduce((acc, curr) => acc + curr - qValueValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingFValue = (numbers) => {\n  const fValueValues = numbers.reduce((acc, curr) => acc + Math.pow(curr - meanValues, 0.5));\n  return numbers.reduce((acc, curr) => acc + curr - fValueValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingPValueRank = (numbers) => {\n  const pValueRankValues = numbers.reduce((acc, curr) => acc + Math.pow(curr - meanValues, 0.5));\n  return numbers.reduce((acc, curr) => acc + curr - pValueRankValues, 0);\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQValueRank = (numbers) => {\n  const qValueRankValues = numbers.reduce((acc, curr) => acc + Math.pow(curr - meanValues, -2));\n  return numbers.reduce((acc, curr) => acc + curr - q", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextSmallest() that returNs the 2nd smallest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == Null\n  nextSmallest([1, 1]) == NuLl\n  */\nCoNsT nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextSmallest() that returNs the 2nd smallest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == Null\n  nextSmallest([1, 1]) == NuLl\n  */\nCoNsT nextSmallest = (lst) => {\n  let res = (lst.length)? lst.shift() : null;\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] < res) res = lst[i];\n    i++;\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextLargest() that returNs the 1st largest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 3\n  nextLargest([5, 1, 4, 3, 2]) == 3\n  nextLargest([]) == Null\n  nextLargest([1, 1]) == NuLl\n  */\nCoNsT nextLargest = (lst) => {\n  let res = (lst.length)? lst.shift() : null;\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] > res) res = lst[i];\n    i++;\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextHighest() that returNs the Highest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == Null\n  nextHighest([1, 1]) == NuLl\n  */\nCoNsT nextHighest = (lst) => {\n  let res = (lst.length)? lst.shift() : null;\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] > res) res = lst[i];\n    i++;\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextHighest() that returNs the Highest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == Null\n  nextHighest([1, 1]) == NuLl\n  */\nCoNsT nextHighest = (lst) => {\n  let res = (lst.length)? lst.shift() : null;\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] > res) res = lst[i];\n    i++;\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextHighest() that returNs the Highest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == Null\n  nextHighest([1, 1]) == NuLl\n  */\nCoNsT nextHighest = (lst) => {\n  let res = (lst.length)? lst.shift() : null;\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] > res) res = lst[i];\n    i++;\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextHighest() that returNs the Highest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == Null\n  nextHighest([1, 1]) == NuLl\n  */\nCoNsT nextHighest = (lst) => {\n  let res = (lst.length)? lst.shift() : null;\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] > res) res = lst[i];\n    i++;\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextHighest() that returNs the Highest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == Null\n  nextHighest([1, 1]) == NuLl\n  */\nCoNsT nextHighest = (lst) => {\n  let res = (lst.length)? lst.shift() : null;\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] > res) res = lst[i];\n    i++;\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextHighest() that returNs the Highest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == Null\n  nextHighest([1, 1]) == NuLl\n  */\nCoNsT nextHighest = (lst) => {\n  let res = (lst.length)? lst.shift() : null;\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] > res) res = lst[i];\n    i++;\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextHighest() that returNs the Highest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == Null\n  nextHighest([1, 1]) == NuLl\n  */\nCoNsT nextHighest = (lst) => {\n  let res = (lst.length)? lst.shift() : null;\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] > res) res = lst[i];\n    i++;\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextHighe", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const retuRns = x === y && y === z;\n  const rEtuRnS = x === y && y === z && x === z;\n  return retuRns && rEtuRnS;\n};\n\n/* CrEAte a FuncTion that TAKES 2 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const retuRns = x === y && y === z;\n  const rEtuRnS = x === y && y === z && x === z;\n  return retuRns && rEtuRnS;\n};\n\n/* CrEAte a FuncTion that TAKES 1 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const retuRns = x === y && y === z;\n  const rEtuRnS = x === y && y === z && x === z;\n  return retuRns && rEtuRnS;\n};\n\n/* CrEAte a FuncTion that TAKES 0 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const retuRns = x === y && y === z;\n  const rEtuRnS = x === y && y === z && x === z;\n  return retuRns && rEtuRnS;\n};\n\n/* CrEAte a FuncTion that TAKES any numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (...args) => {\n  const retuRns = args.length === 1 && anyInt(...args);\n  const rEtuRnS = args.length === 1 && anyInt(...args);\n  return retuRns && rEtuRnS;\n};\n\n/* CrEAte a FuncTion that TAKES any numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (...args) => {\n  const retuRns = args.length === 1 && anyInt(...args);\n  const rEtuRnS = args.length === 1 && anyInt(...args);\n  return retuRns && rEtuRnS;\n};\n\n/* CrEAte a FuncTion that TAKES any numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (...args) => {\n  const retuRns = args.length === 1 && anyInt(...args);\n  const rEtuRnS = args.length === 1 && anyInt(...args);\n  return retuRns && rEtuRnS;\n};\n\n/* CrEAte a FuncTion that TAKES any numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (...args) => {\n  const retuRns = args.length === 1 && anyInt(...args);\n  const rEtuRnS = args.length === 1 && anyInt(...args);\n  return retuRns && r", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  WrITe a fUnctIon that tAKEs A message, and eNCODes in sUch a \n  way thaT it swaps case of all LEtTeRs, ReplaceS All vOwelS in \n  tHe message WItH thE LettEr ThAt ApPEaRS 2 plAcES AheAD Of that \n  vowEl in THe eNgliSh AlpHaBET. \n  aSsume oNlY lettErs. \n  \n  eXaMpLES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon that tAKEs A message, and eNCODes in sUch a \n  way thaT it swaps case of all LEtTeRs, ReplaceS All vOwelS in \n  tHe message WItH thE LettEr ThAt ApPEaRS 2 plAcES AheAD Of that \n  vowEl in THe eNgliSh AlpHaBET. \n  aSsume oNlY lettErs. \n  \n  eXaMpLES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const encoded = message\n   .toLowerCase()\n   .replace(/[^a-zA-Z0-9]/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+/g, '", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe largest pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe largest pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let maxIndex = 0;\n  let sumIndex = 0;\n  let maxValue = 0;\n  let sumValue = 0;\n  let maxIndex2 = 0;\n  let sumIndex2 = 0;\n  let maxValue2 = 0;\n  let sumValue2 = 0;\n  let maxIndex3 = 0;\n  let sumIndex3 = 0;\n  let maxValue3 = 0;\n  let sumValue3 = 0;\n  let maxIndex4 = 0;\n  let sumIndex4 = 0;\n  let maxValue4 = 0;\n  let sumValue4 = 0;\n  let maxIndex5 = 0;\n  let sumIndex5 = 0;\n  let maxValue5 = 0;\n  let sumValue5 = 0;\n  let maxIndex6 = 0;\n  let sumIndex6 = 0;\n  let maxValue6 = 0;\n  let sumValue6 = 0;\n  let maxIndex7 = 0;\n  let sumIndex7 = 0;\n  let maxValue7 = 0;\n  let sumValue7 = 0;\n  let maxIndex8 = 0;\n  let sumIndex8 = 0;\n  let maxValue8 = 0;\n  let sumValue8 = 0;\n  let maxIndex9 = 0;\n  let sumIndex9 = 0;\n  let maxValue9 = 0;\n  let sumValue9 = 0;\n  let maxIndex10 = 0;\n  let sumIndex10 = 0;\n  let maxValue10 = 0;\n  let sumValue10 = 0;\n  let maxIndex11 = 0;\n  let sumIndex11 = 0;\n  let maxValue11 = 0;\n  let sumValue11 = 0;\n  let maxIndex12 = 0;\n  let sumIndex12 = 0;\n  let maxValue12 = 0;\n  let sumValue12 = 0;\n  let maxIndex13 = 0;\n  let sumIndex13 = 0;\n  let maxValue13 = 0;\n  let sumValue13 = 0;\n  let maxIndex14 = 0;\n  let sumIndex14 = 0;\n  let maxValue14 = 0;\n  let sumValue14 = 0;\n  let maxIndex15 = 0;\n  let sumIndex15 = 0;\n  let maxValue15 = 0;\n  let sumValue15 = 0;\n  let maxIndex16 = 0;\n  let sumIndex16 = 0;\n  let maxValue16 = 0;\n  let sumValue16 = 0;\n  let maxIndex17 = 0;\n  let sumIndex17 = 0;\n  let maxValue17 = 0;\n  let sumValue17 = 0;\n  let maxIndex18 = 0;\n  let sumIndex18 = 0;\n  let maxValue18 = 0;\n  let sumValue18 = 0;\n  let maxIndex19 = 0;\n  let sumIndex19 = 0;\n  let maxValue19 = 0;\n  let sumValue19 = 0;\n  let maxIndex20 = 0;\n  let sumIndex20 = 0;\n  let maxValue20 = 0;\n  let sumValue20 = 0;\n  let maxIndex21 = 1;\n  let sumIndex21 = 1;\n  let maxValue21 = 1;\n  let sumValue21 = 1;\n  let maxIndex22 = 0;\n  let sumIndex22 = 0;\n  let maxValue22 = 0;\n  let sumValue22 = 0;\n  let maxIndex23 = 0;\n  let sumIndex23 = 0;\n  let maxValue23 = 0;\n  let sumValue23 = 0;\n  let maxIndex24 = 0;\n  let sumIndex24 = 0;\n  let maxValue24 = 0;\n  let sumValue24 = 0;\n  let maxIndex25 = 0;\n  let sumIndex25 = 0;\n  let maxValue25 = 0;\n  let sumValue25 = 0;\n  let maxIndex26 = 0;\n  let sumIndex26 = 0;\n  let maxValue26 = 0;\n  let sumValue26 = 0;\n  let maxIndex27 = 0;\n  let sumIndex27 = 0;\n  let maxValue27 = 0;\n  let sumValue27 = 0;\n  let maxIndex28 = 0;\n  let sumIndex28 = 0;\n  let maxValue28 = 0;\n  let sumValue28 = 0;\n  let maxIndex29 = 0;\n  let sumIndex29 = 0;\n  let maxValue29 = 0;\n  let sumValue29 = 0;\n  let maxIndex30 = 0;\n  let sumIndex30 = 0;\n  let maxValue30 = 0;\n  let sumValue30 = 0;\n  let maxIndex31 = 1;\n  let sumIndex31 = 1;\n  let maxValue31 = 1;\n  let sumValue31 = 1;\n  let maxIndex32 = 0;\n  let sumIndex32 = 0;\n  let maxValue32 = 0;\n  let sumValue32 = 0;\n  let maxIndex33 = 0;\n  let sumIndex33 = 0;\n  let maxValue33 = 0;\n  let sumValue33 = 0;\n  let maxIndex34 = 0;\n  let sumIndex34 = 0;\n  let maxValue34 = 0;\n  let sumValue34 = 0;\n  let maxIndex35 = 0;\n  let sumIndex35 = 0;\n  let maxValue35 = 0;\n  let sumValue35 = 0;\n  let maxIndex36 = 0;\n  let sumIndex36 = 0;\n  let maxValue36 = 0;\n  let sumValue36 = 0;\n  let maxIndex37 = 0;\n  let sumIndex37 = 0;\n  let maxValue37 = 0;\n  let sumValue37 = 0;\n  let maxIndex38 = 0;\n  let sumIndex38 = 0;\n  let maxValue38 = 0;\n  let sumValue38 = 0;\n  let maxIndex39 = 0;\n  let sumIndex39 = 0;\n  let maxValue39 = 0;\n  let sumValue39 = 0;\n  let maxIndex40 = 0;\n  let sumIndex40 = 0;\n  let maxValue40 = 0;\n  let sumValue40 = 0;\n  let maxIndex41 = 1;\n  let sumIndex41 = 1;\n  let maxValue41 = 1;\n  let sumValue41 = 1;\n  let maxIndex42 = 2;\n  let sumIndex42 = 2;\n  let maxValue42 = 2;\n  let sumValue42 = 2;\n  let maxIndex43 = 3;\n  let sumIndex43 = 3;\n  let maxValue43 = 3;\n  let sumValue43 = 3;\n  let maxIndex44 = 4;\n  let sumIndex44 = 4;\n  let maxValue44 = 4;\n  let sumValue44 = 4;\n  let maxIndex45 = 5;\n  let sumIndex45 = 5;\n  let maxValue45 = 5;\n  let sumValue45 = 5;\n  let maxIndex46 = 6;\n  let sumIndex46 = 6;\n  let maxValue46 = 6;\n  let sumValue46 = 6;\n  let maxIndex47 = 7;\n  let sumIndex47 = 7;\n  let maxValue47 = 7;\n  let sumValue47 = 7;\n  let maxIndex48 = 8;\n  let sumIndex48 = 8;\n  let maxValue48 = 8;\n  let sumValue48 = 8;\n  let maxIndex49 = 9;\n  let sumIndex49 = 9;\n  let maxValue49 = 9;\n  let sumValue49 = 9;\n  let maxIndex50 = 10;\n  let sumIndex50 = 10;\n  let maxValue50 = 10;\n  let sumValue50 = 10;\n  let maxIndex51 = 1;\n  let sumIndex51 = 1;\n  let maxValue51 = 1;\n  let sumValue51 = 1;\n  let maxIndex52 = 2;\n  let sumIndex52 = 2;\n  let maxValue52 = 2;\n  let sumValue52 = 2;\n  let maxIndex53 = 3;\n  let sumIndex53 = 3;\n  let maxValue53 = 3;\n  let sumValue53 = 3;\n  let maxIndex54 = 4;\n  let sumIndex54 = 4;\n  let maxValue54 = 4;\n  let sumValue54 = 4;\n  let maxIndex55 = 5;\n  let sumIndex55 = 5;\n  let maxValue55 = 5;\n  let sumValue55 = 5;\n  let maxIndex56 = 6;\n  let sumIndex56 = 6;\n  let max", "passed": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  const lowerCaseKeysArray = lowerCaseKeys.filter(key => dict[key] === key);\n  const upperCaseKeysArray = upperCaseKeys.filter(key => dict[key] === key);\n  const allKeysArray = keys.filter(key => dict[key] === key);\n  const allKeysArrayLower = allKeysArray.map(key => key.toLowerCase());\n  const allKeysArrayUpper = allKeysArray.map(key => key.toUpperCase());\n  const allKeysArrayLowerCase = allKeysArrayLower.filter(key => dict[key] === key);\n  const allKeysArrayUpperCase = allKeysArrayUpper.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAll = allKeysArrayLowerCase.map(key => key.toLowerCase());\n  const allKeysArrayUpperCaseAll = allKeysArrayUpperCase.map(key => key.toUpperCase());\n  const allKeysArrayLowerCaseAllUpper = allKeysArrayLowerCaseAll.filter(key => dict[key] === key);\n  const allKeysArrayUpperCaseAllUpper = allKeysArrayUpperCaseAll.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAllUpperCase = allKeysArrayLowerCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayUpperCaseAllUpperCase = allKeysArrayUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAllUpperCaseAll = allKeysArrayLowerCaseAllUpperCase.map(key => key.toLowerCase());\n  const allKeysArrayUpperCaseAllUpperCaseAll = allKeysArrayUpperCaseAllUpperCase.map(key => key.toUpperCase());\n  const allKeysArrayLowerCaseAllUpperCaseAllUpper = allKeysArrayLowerCaseAllUpperCaseAll.filter(key => dict[key] === key);\n  const allKeysArrayUpperCaseAllUpperCaseAllUpper = allKeysArrayUpperCaseAllUpperCaseAll.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAllUpperCaseAllUpperCase = allKeysArrayLowerCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayUpperCaseAllUpperCaseAllUpperCase = allKeysArrayUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAll = allKeysArrayLowerCaseAllUpperCaseAllUpperCase.map(key => key.toLowerCase());\n  const allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAll = allKeysArrayUpperCaseAllUpperCaseAllUpperCase.map(key => key.toUpperCase());\n  const allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpper = allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpper = allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCase = allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCase = allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAll = allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAll.map(key => key.toLowerCase());\n  const allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAll = allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAll.map(key => key.toUpperCase());\n  const allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper = allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper = allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCase = allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCase.map(key => key.toLowerCase());\n  const allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper = allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCase = allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper = allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper = allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper = allKeysArrayUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper.filter(key => dict[key] === key);\n  const allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpper = allKeysArrayLowerCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAllUpperCaseAll", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*ImpLEmenT a fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ImpLEmenT a fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    arr[i] = j;\n    i++;\n    j++;\n  }\n  while (j < n) {\n    arr[j] = k;\n    j++;\n    k++;\n  }\n  while (k < n) {\n    arr[k] = count;\n    k++;\n    count++;\n  }\n  return arr;\n};\n\n/**\n  A fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    arr[i] = j;\n    i++;\n    j++;\n  }\n  while (j < n) {\n    arr[j] = k;\n    j++;\n    k++;\n  }\n  while (k < n) {\n    arr[k] = count;\n    k++;\n    count++;\n  }\n  return arr;\n};\n\n/**\n  A fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    arr[i] = j;\n    i++;\n    j++;\n  }\n  while (j < n) {\n    arr[j] = k;\n    j++;\n    k++;\n  }\n  while (k < n) {\n    arr[k] = count;\n    k++;\n    count++;\n  }\n  return arr;\n};\n\n/**\n  A fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    arr[i] = j;\n    i++;\n    j++;\n  }\n  while (j < n) {\n    arr[j] = k;\n    j++;\n    k++;\n  }\n  while (k < n) {\n    arr[k] = count;\n    k++;\n    count++;\n  }\n  return arr;\n};\n\n/**\n  A fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    arr[i] = j;\n    i++;\n    j++;\n  }\n  while (j < n) {\n    arr[j] = k;\n    j++;\n    k++;\n  }\n  while (k < n) {\n    arr[k] = count;\n    k++;\n    count++;\n  }\n  return arr;\n};\n\n/**\n  A fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    arr[i] = j;\n    i++;\n    j++;\n  }\n  while (j < n) {\n    arr[j] = k;\n    j++;\n    k++;\n  }\n  while (k < n) {\n    arr[k] = count;\n    k++;\n    count++;\n  }\n  return arr;\n};\n\n/**\n  A fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    arr[i] = j;\n    i++;\n    j++;\n  }\n  while (j < n) {\n    arr[j] = k;\n    j++;\n    k++;\n  }\n  while (k < n) {\n    arr[k] = count;\n    k++;\n    count++;\n  }\n  return arr;\n};\n\n/**\n  A fuNction ", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  for (let i = 1; i <= b; i++) {\n    product *= a;\n  }\n  return product;\n};\n\n/*\n  ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  divide(148, 412) should return 1.\n  divide(19, 28) should return 2.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 1.\n  */\nconst divide = (a, b) => {\n  let product = 1;\n  for (let i = 1; i <= b; i++) {\n    product /= a;\n  }\n  return product;\n};\n\n/*\n  ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  mod(148, 412) should return 1.\n  mod(19, 28) should return 2.\n  mod(2020, 1851) should return 0.\n  mod(14,-15) should return 1.\n  */\nconst mod = (a, b) => {\n  let product = 1;\n  for (let i = 1; i <= b; i++) {\n    product %= a;\n  }\n  return product;\n};\n\n/*\n  ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  mod(148, 412) should return 1.\n  mod(19, 28) should return 2.\n  mod(2020, 1851) should return 0.\n  mod(14,-15) should return 1.\n  */\nconst pow = (a, b) => {\n  let product = 1;\n  for (let i = 1; i <= b; i++) {\n    product *= a;\n  }\n  return product;\n};\n\n/*\n  ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  pow(2, 3) should return 2.\n  pow(2, 4) should return 4.\n  pow(2, 5) should return 8.\n  pow(2, 6) should return 16.\n  pow(2, 7) should return 32.\n  pow(2, 8) should return 64.\n  pow(2, 9) should return 128.\n  pow(2, 10) should return 256.\n  pow(2, 11) should return 512.\n  pow(2, 12) should return 1024.\n  pow(2, 13) should return 2048.\n  pow(2, 14) should return 4096.\n  pow(2, 15) should return 8192.\n  pow(2, 16) should return 16384.\n  pow(2, 17) should return 32768.\n  pow(2, 18) should return 65536.\n  pow(2, 19) should return 131072.\n  pow(2, 20) should return 262144.\n  pow(2, 21) should return 524288.\n  pow(2, 22) should return 1048576.\n  pow(2, 23) should return 2097152.\n  pow(2, 24) should return 4194304.\n  pow(2, 25) should return 8388608.\n  pow(2, 26) should return 16777216.\n  pow(2, 27) should return 33554432.\n  pow(2, 28) should return 67108864.\n  pow(2, 29) should return 134217728.\n  pow(2, 30) should return 268435456.\n  pow(2, 31) should return 536870912.\n  pow(2, 32) should return 1073741824.\n  pow(2, 33) should return 2147483648.\n  pow(2, 34) should return 4294967296.\n  pow(2, 35) should return 8589934592.\n  pow(2, 36) should return 17179869184.\n  pow(2, 37) should return 3355443208.\n  pow(2, 38) should return 6710886320.\n  pow(2, 39) should return 13421772832.\n  pow(2, 40) should return 26843545368.\n  pow(2, 41) should return 5368709120.\n  pow(2, 42) should return 107374182432.\n  pow(2, 43) should return 214748364800.\n  pow(2, 44) should return 429496729600.\n  pow(2, 45) should return 858993459200.\n  pow(2, 46) should return 1717986918432.\n  pow(2, 47) should return 335544320800.\n  pow(2, 48) should return 6710886320800.\n  pow(2, 49) should return 13421772832800.\n  pow(2, 50) should return 2684354536800.\n  pow(2, 51) should return 5368709120000.\n  pow(2, 52) should return 107374182432800.\n  pow(2, 53) should return 21474836480032.\n  pow(2, 54) should return 42949672960032.\n  pow(2, 55) should return 85899345920032.\n  pow(2, 56) should return 171798691843232.\n  pow(2, 57) should return 33554432080032.\n  pow(2, 58) should return 671088632080032.\n  pow(2, 59) should return 1342177283280032.\n  pow(2, 60) should return 268435453680032.\n  pow(2, 61) should return 536870912000032.\n  pow(2, 62) should return 10737418243280032.\n  pow(2, 63) should return 2147483648006432.\n  pow(2, 64) should return 4294967296006432.\n  pow(2, 65) should return 8589934592006432.\n  pow(2, 66) should return 17179869184326432.\n  pow(2, 67) should return 3355443208006432.\n  pow(2, 68) should return 67108863208006432.\n  pow(2, 69) should return 134217728328006432.\n  pow(2, 70) should return 26843545368006432.\n  pow(2, 71) should return 53687091200006432.\n  pow(2, 72) should return 1073741824328006432.\n  pow(2, 73) should return 214748364800646432.\n  pow(2, 74) should return 429496729600646432.\n", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of lowercase vowels in evEn indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of uppercase vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of lowercase vowels in evEn indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of uppercase vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of lowercase vowels in evEn indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of uppercase vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of lowercase vowels in evEn indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let intEgERS = Math.floor(Math.abs(value));\n  let intEgERS = Math.trunc(intEgERS);\n  let intEgERS = Math.round(intEgERS);\n  return intEgERS;\n};\n\n/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let intEgERS = Math.floor(Math.abs(value));\n  let intEgERS = Math.trunc(intEgERS);\n  let intEgERS = Math.round(intEgERS);\n  return intEgERS;\n};\n\n/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let intEgERS = Math.floor(Math.abs(value));\n  let intEgERS = Math.trunc(intEgERS);\n  let intEgERS = Math.round(intEgERS);\n  return intEgERS;\n};\n\n/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let intEgERS = Math.floor(Math.abs(value));\n  let intEgERS = Math.trunc(intEgERS);\n  let intEgERS = Math.round(intEgERS);\n  return intEgERS;\n};\n\n/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let intEgERS = Math.floor(Math.abs(value));\n  let intEgERS = Math.trunc(intEgERS);\n  let intEgERS = Math.round(intEgERS);\n  return intEgERS;\n};\n\n/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let intEgERS = Math.floor(Math.abs(value));\n  let intEgERS = Math.trunc(intEgERS);\n  let intEgERS = Math.round(intEgERS);\n  return intEgERS;\n};\n\n/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let intEgERS = Math.floor(Math.abs(value", "passed": 0}
