{"task_id": "JavaScript/0", "prompt": "/* cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* cHeCK if in giVeN list OF numbers, Are anY Two numbers clOser To Each Other than\n  GIvEN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const { length } = numbers;\n  let i;\n  let j;\n  let k;\n  let sum = 0;\n  let count = 0;\n  let isClose = true;\n  let isCloseElement = false;\n  let isCloseElements = [];\n  for (i = 0; i < length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  if (count > threshold) {\n    isClose = false;\n  }\n  if (count < threshold) {\n    isClose = true;\n  }\n  for (i = 0; i < length; i++) {\n    j = i;\n    k = i + 1;\n    while (j < length) {\n      if (numbers[j] < numbers[k]) {\n        j = k;\n      }\n      k++;\n    }\n    isCloseElements.push(numbers[i]);\n  }\n  return isClose;\n};\n\n/**\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsArray = (numbers, threshold) => {\n  const { length } = numbers;\n  let i;\n  let j;\n  let k;\n  let sum = 0;\n  let count = 0;\n  let isClose = true;\n  let isCloseElement = false;\n  let isCloseElements = [];\n  for (i = 0; i < length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  if (count > threshold) {\n    isClose = false;\n  }\n  if (count < threshold) {\n    isClose = true;\n  }\n  for (i = 0; i < length; i++) {\n    j = i;\n    k = i + 1;\n    while (j < length) {\n      if (numbers[j] < numbers[k]) {\n        j = k;\n      }\n      k++;\n    }\n    isCloseElements.push(numbers[i]);\n  }\n  return isClose;\n};\n\n/**\n  >>> hasCloseElementsArray([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsArray([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsArrayArray = (numbers, threshold) => {\n  const { length } = numbers;\n  let i;\n  let j;\n  let k;\n  let sum = 0;\n  let count = 0;\n  let isClose = true;\n  let isCloseElement = false;\n  let isCloseElements = [];\n  for (i = 0; i < length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  if (count > threshold) {\n    isClose = false;\n  }\n  if (count < threshold) {\n    isClose = true;\n  }\n  for (i = 0; i < length; i++) {\n    j = i;\n    k = i + 1;\n    while (j < length) {\n      if (numbers[j] < numbers[k]) {\n        j = k;\n      }\n      k++;\n    }\n    isCloseElements.push(numbers[i]);\n  }\n  return isClose;\n};\n\n/**\n  >>> hasCloseElementsArrayArray([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsArrayArray([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsArrayArrayArray = (numbers, threshold) => {\n  const { length } = numbers;\n  let i;\n  let j;\n  let k;\n  let sum = 0;\n  let count = 0;\n  let isClose = true;\n  let isCloseElement = false;\n  let isCloseElements = [];\n  for (i = 0; i < length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  if (count > threshold) {\n    isClose = false;\n  }\n  if (count < threshold) {\n    isClose = true;\n  }\n  for (i = 0; i < length; i++) {\n    j = i;\n    k = i + 1;\n    while (j < length) {\n      if (numbers[j] < numbers[k]) {\n        j = k;\n      }\n      k++;\n    }\n    isCloseElements.push(numbers[i]);\n  }\n  return isClose;\n};\n\n/**\n  >>> hasCloseElementsArrayArrayArray([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsArrayArrayArrayArray([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsArrayArrayArrayArray = (numbers, threshold) => {\n  const { length } = numbers;\n  let i;\n  let j;\n  let k;\n  let sum = 0;\n  let count = 0;\n  let isClose = true;\n  let isCloseElement = false;\n  let isCloseElements = [];\n  for (i = 0; i < length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  if (count > threshold) {\n    isClose = false;\n  }\n  if (count < threshold) {\n    isClose = true;\n  }\n  for (i = 0; i < length; i++) {\n    j = i;\n    k = i + 1;\n    while (j < length) {\n      if (numbers[j] < numbers[k]) {\n        j = k;\n      }\n      k++;\n    }\n    isCloseElements.push(numbers[i]);\n  }\n  return isClose;\n};\n\n/**\n  >>> hasCloseElementsArrayArrayArrayArray([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsArrayArrayArrayArrayArray([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsArrayArrayArrayArrayArray = (numbers, threshold) => {\n  const { length } = numbers;\n  let i;\n  let j;\n  let k;\n  let sum = 0;\n  let count = 0;\n  let isClose = true;\n  let isCloseElement = false;\n  let isCloseElements = [];\n  for (i = 0; i < length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  if (count > threshold) {\n    isClose = false;\n  }\n  if (count < threshold) {\n    isClose = true;\n  }\n  for (i = 0; i < length; i++) {\n    j = i;\n    k = i + 1;\n    while (j < length) {\n      if (numbers[j] < numbers[k]) {\n        j = k;\n      }\n      k++;\n    }\n    isCloseElements.push(numbers[i]);\n  }\n  return isClose;\n};\n\n/**\n  >>> hasCloseElementsArrayArrayArrayArrayArray([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsArrayArrayArrayArrayArrayArray([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsArrayArrayArrayArrayArrayArray = (numbers, threshold) => {\n  const { length } = numbers;\n  let i;\n  let j;\n  let k;\n  let sum = 0;\n  let count = 0;\n  let isClose = true;\n  let isCloseElement = false;\n  let isCloseElements = [];\n  for (i = 0; i < length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  if (count > threshold) {\n    isClose = false;\n  }\n  if (count < threshold) {\n    isClose = true;\n  }\n  for (i = 0; i < length; i++) {\n    j = i;\n    k = i + 1;\n    while (j < length) {\n      if (numbers[j] < numbers[k]) {\n        j = k;\n      }\n      k++;\n    }\n    isCloseElements.push(numbers[i]);\n  }\n  return isClose;\n};\n\n/**\n  >>> hasCloseElementsArrayArrayArrayArrayArrayArray([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsArrayArrayArrayArrayArrayArrayArray([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsArrayArrayArrayArrayArrayArrayArray = (numbers, threshold) => {\n  const { length } = numbers;\n  let i;\n  let j;\n  let k;\n  let sum = 0;\n  let count = 0;\n  let isClose = true;\n  let isCloseElement = false;\n  let isCloseElements = [];\n  for (i = 0; i < length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  if (count > threshold) {\n    isClose = false;\n  }\n  if (count < threshold) {\n    isClose = true;\n  }\n", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/1", "prompt": "/* iNpUT to thIs FUNCtion IS a strIng cOnTainIng multipLE gROuPs oF nEsTeD paRenTHEseS. yOuR goal iS To\n  separATe ThoSE GRouP IntO SEPaRAtE sTrings AnD return tHe list of THOSE.\n  SEParate grouPS are Balanced (EacH opeN bRacE Is proPErLy Closed) AnD not nESted wIthiN eaCh otHEr\n  IGNore any SpACes in tHe INpUt stRIng.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* iNpUT to thIs FUNCtion IS a strIng cOnTainIng multipLE gROuPs oF nEsTeD paRenTHEseS. yOuR goal iS To\n  separATe ThoSE GRouP IntO SEPaRAtE sTrings AnD return tHe list of THOSE.\n  SEParate grouPS are Balanced (EacH opeN bRacE Is proPErLy Closed) AnD not nESted wIthiN eaCh otHEr\n  IGNore any SpACes in tHe INpUt stRIng.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  return paren_groups.map((group) => {\n    const paren_group_name = group;\n    const paren_group_parens = paren_group_name.match(/\\(([^)]+)\\)/gi);\n    const paren_group_parens_length = paren_group_parens.length;\n    const paren_group_parens_index = paren_group_parens.findIndex((paren_group_paren) => {\n      return paren_group_paren.match(/\\(([^)]+)\\)/gi);\n    });\n    const paren_group_parens_index = paren_group_parens_index === -1? paren_group_parens.length : paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_parens_length = paren_group_parens_length;\n    const paren_group_parens_index = paren_group_parens_index;\n    const paren_group_paren", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* tEsT If gniVeN STRig is A PalinDromE */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* tEsT If gniVeN STRig is A PalinDromE */\ncOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shORtESt PalInDrOmE thAt bEGIns WITh A supplIEd string.\n  AlgorIThM idEA IS siMPle:\n  - fIND tHE lOnGest poStFiX of sUPPLIeD string That is a palINdroMe.\n  - Append To tHe enD oF thE string ReverSE oF a string Prefix ThAt comES befoRe thE paLindROmiC Suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let length = string.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push([]);\n    for (let j = 0; j < n; j++) {\n      aPile[i].push(j);\n    }\n  }\n  return aPile;\n};\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe the NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push([]);\n    for (let j = 0; j < n; j++) {\n      aPile[i].push(j);\n    }\n  }\n  return aPile;\n};\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe the NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push([]);\n    for (let j = 0; j < n; j++) {\n      aPile[i].push(j);\n    }\n  }\n  return aPile;\n};\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe the NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push([]);\n    for (let j = 0; j < n; j++) {\n      aPile[i].push(j);\n    }\n  }\n  return aPile;\n};\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe the NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push([]);\n    for (let j = 0; j < n; j++) {\n      aPile[i].push(j);\n    }\n  }\n  return aPile;\n};\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe the NExt even numBEr if n Is even.\n  ReTurN the NuMbeR Of stoNEs in EaCh leveL in a list, Where ELemenT at iNdeX\n  i repREseNTs the nuMbER of sToNEs in The lEVel (i+1).\n\n  ExAMples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 0; i < n; i++) {\n    aPile.push([]);\n    for (let j = 0; j < n; j++) {\n      aPile[i].push(j);\n    }\n  }\n  return aPile;\n};\n\n/*\n  gIvEN a posItIVE IntegER n, you hAve tO mAke a Pile of n levELs OF sTonEs.\n  thE fIrsT leVEL haS n SToNes.\n  The NUmber of SToNes in THE NexT LevEL IS:\n      - tHE nExT odd nuMbEr If n is ODD.\n      - THe the NExt ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  yOu WIll be GiVEN A striNG of woRds sEpAratEd by commaS Or SPaCes. yoUr TaSk iS\n  to SPLit THE sTring iNTo words ANd return An aRRAY of THe wORDS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*THIs FUnctiOn TAKEs two POsitiVe nuMbErs x aNd y and retuRNs THe\n  BigGeSt EvEn iNteGER nuMBEr That is in THe range [x, y] INcLusIVE. if \n  tHEre'S NO SuCH nUmBer, theN tHe FuncTION ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*THIs FUnctiOn TAKEs two POsitiVe nuMbErs x aNd y and retuRNs THe\n  BigGeSt EvEn iNteGER nuMBEr That is in THe range [x, y] INcLusIVE. if \n  tHEre'S NO SuCH nUmBer, theN tHe FuncTION ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.random() * (y - x + 1) + x);\n  return num;\n};\n\n/*\n  Function: chooseNum\n  Purpose: Chooses num from [x, y] INcLusIVE. if tHEre'S NO SuCH num\n  ThEN returns -1.\n\n  For example:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*YOU aRE giveN tWO POsitiVE inteGers n AnD m, and Your task iS To COmPutE tHe\n  AvEraGe oF THe iNTEgErs froM n Through m (INcLudING n And m). \n  rOunD THE aNSwEr To the nEaReSt inTEGER aND convert thAT to bInary.\n  If n iS grEateR tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU aRE giveN tWO POsitiVE inteGers n AnD m, and Your task iS To COmPutE tHe\n  AvEraGe oF THe iNTEgErs froM n Through m (INcLudING n And m). \n  rOunD THE aNSwEr To the nEaReSt inTEGER aND convert thAT to bInary.\n  If n iS grEateR tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n <= 0 || m <= 0) {\n    return -1;\n  }\n  const [a, b] = n.toString(2).split('');\n  const [c, d] = m.toString(2).split('');\n  const [e, f] = a.split('').map(Number);\n  const [g, h] = b.split('').map(Number);\n  const [i, j] = c.split('').map(Number);\n  const [k, l] = d.split('').map(Number);\n  const [m, n] = e.split('').map(Number);\n  const [o, p] = f.split('').map(Number);\n  const [q, r] = g.split('').map(Number);\n  const [s, t] = h.split('').map(Number);\n  const [u] = i.split('').map(Number);\n  const [v] = k.split('').map(Number);\n  const [w] = l.split('').map(Number);\n  const [x] = m.split('').map(Number);\n  const [y] = n.split('').map(Number);\n  const [z] = o.split('').map(Number);\n  const [A] = p.split('').map(Number);\n  const [B] = q.split('').map(Number);\n  const [C] = r.split('').map(Number);\n  const [D] = s.split('').map(Number);\n  const [E] = t.split('').map(Number);\n  const [F] = u.split('').map(Number);\n  const [G] = v.split('').map(Number);\n  const [H] = w.split('').map(Number);\n  const [I] = x.split('').map(Number);\n  const [J] = y.split('').map(Number);\n  const [K] = z.split('').map(Number);\n  const [L] = A.split('').map(Number);\n  const [M] = B.split('').map(Number);\n  const [N] = C.split('').map(Number);\n  const [O] = D.split('').map(Number);\n  const [P] = E.split('').map(Number);\n  const [Q] = F.split('').map(Number);\n  const [R] = G.split('').map(Number);\n  const [S] = H.split('').map(Number);\n  const [T] = I.split('').map(Number);\n  const [U] = J.split('').map(Number);\n  const [V] = K.split('').map(Number);\n  const [W] = L.split('').map(Number);\n  const [X] = M.split('').map(Number);\n  const [Y] = N.split('').map(Number);\n  const [Z] = O.split('').map(Number);\n  const [A1] = p.split('').map(Number);\n  const [A2] = q.split('').map(Number);\n  const [A3] = r.split('').map(Number);\n  const [A4] = s.split('').map(Number);\n  const [A5] = t.split('').map(Number);\n  const [A6] = u.split('').map(Number);\n  const [A7] = v.split('').map(Number);\n  const [A8] = w.split('').map(Number);\n  const [A9] = x.split('').map(Number);\n  const [A10] = y.split('').map(Number);\n  const [A11] = z.split('').map(Number);\n  const [A12] = A.split('').map(Number);\n  const [A13] = B.split('').map(Number);\n  const [A14] = C.split('').map(Number);\n  const [A15] = D.split('').map(Number);\n  const [A16] = E.split('').map(Number);\n  const [A17] = F.split('').map(Number);\n  const [A18] = G.split('').map(Number);\n  const [A19] = H.split('').map(Number);\n  const [A20] = I.split('').map(Number);\n  const [A21] = J.split('').map(Number);\n  const [A22] = K.split('').map(Number);\n  const [A23] = L.split('').map(Number);\n  const [A24] = M.split('').map(Number);\n  const [A25] = N.split('').map(Number);\n  const [A26] = O.split('').map(Number);\n  const [A27] = A1.split('').map(Number);\n  const [A28] = A2.split('').map(Number);\n  const [A29] = A3.split('').map(Number);\n  const [A30] = A4.split('').map(Number);\n  const [A31] = A5.split('').map(Number);\n  const [A32] = A6.split('').map(Number);\n  const [A33] = A7.split('').map(Number);\n  const [A34] = A8.split('').map(Number);\n  const [A35] = A9.split('').map(Number);\n  const [A36] = A10.split('').map(Number);\n  const [A37] = A11.split('').map(Number);\n  const [A38] = A12.split('').map(Number);\n  const [A39] = A13.split('').map(Number);\n  const [A40] = A14.split('').map(Number);\n  const [A41] = A15.split('').map(Number);\n  const [A42] = A16.split('').map(Number);\n  const [A43] = A17.split('').map(Number);\n  const [A44] = A18.split('').map(Number);\n  const [A45] = A19.split('').map(Number);\n  const [A46] = A20.split('').map(Number);\n  const [A47] = A21.split('').map(Number);\n  const [A48] = A22.split('').map(Number);\n  const [A49] = A23.split('').map(Number);\n  const [A50] = A24.split('').map(Number);\n  const [A51] = A25.split('').map(Number);\n  const [A52] = A26.split('').map(Number);\n  const [A53] = A27.split('').map(Number);\n  const [A54] = A28.split('').map(Number);\n  const [A55] = A29.split('').map(Number);\n  const [A56] = A30.split('').map(Number);\n  const [A57] = A31.split('').map(Number);\n  const [A58] = A32.split('').map(Number);\n  const [A59] = A33.split('').map(Number);\n  const [A60] = A34.split('').map(Number);\n  const [A61] = A35.split('').map(Number);\n  const [A62] = A36.split('').map(Number);\n  const [A63] = A37.split('').map(Number);\n  const [A64] = A38.split('').map(Number);\n  const [A65] = A39.split('').map(Number);\n  const [A66] = A40.split('').map(Number);\n  const [A67] = A41.split('').map(Number);\n  const [A68] = A42.split('').map(Number);\n  const [A69] = A43.split('').map(Number);\n  const [A70] = A44.split('').map(Number);\n  const [A71] = A", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*GIVeN A list of poSiTIVE inteGErs x. return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIVeN A list of poSiTIVE inteGErs x. return a sOrteD list oF all \n  Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let rec = x;\n  while (rec!= null) {\n    res.push(rec);\n    rec = rec.next;\n  }\n  return res;\n};\n\n/*GIVeN A list oF all Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let rec = x;\n  while (rec!= null) {\n    res.push(rec);\n    rec = rec.next;\n  }\n  return res;\n};\n\n/*GIVeN A list oF all Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let rec = x;\n  while (rec!= null) {\n    res.push(rec);\n    rec = rec.next;\n  }\n  return res;\n};\n\n/*GIVeN A list oF all Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let rec = x;\n  while (rec!= null) {\n    res.push(rec);\n    rec = rec.next;\n  }\n  return res;\n};\n\n/*GIVeN A list oF all Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let rec = x;\n  while (rec!= null) {\n    res.push(rec);\n    rec = rec.next;\n  }\n  return res;\n};\n\n/*GIVeN A list oF all Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let rec = x;\n  while (rec!= null) {\n    res.push(rec);\n    rec = rec.next;\n  }\n  return res;\n};\n\n/*GIVeN A list oF all Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let rec = x;\n  while (rec!= null) {\n    res.push(rec);\n    rec = rec.next;\n  }\n  return res;\n};\n\n/*GIVeN A list oF all Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let rec = x;\n  while (rec!= null) {\n    res.push(rec);\n    rec = rec.next;\n  }\n  return res;\n};\n\n/*GIVeN A list oF all Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let rec = x;\n  while (rec!= null) {\n    res.push(rec);\n    rec = rec.next;\n  }\n  return res;\n};\n\n/*GIVeN A list oF all Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let rec = x;\n  while (rec!= null) {\n    res.push(rec);\n    rec = rec.next;\n  }\n  return res;\n};\n\n/*GIVeN A list oF all Elements tHAt HAsN't aNy EvEn DigIt.\n\n  NOTE: ReTURnEd list shouLD be sortED in iNcrEASIng ORdeR.\n  \n  fOR eXAmPlE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  gIvEN an arRaY OF IntegERs, sorT the InTegeRs that are BEtWEeN 1 anD 9 iNcLuSivE,\n  reVERse THE rEsultiNG array, aND tHen REPLacE EacH DIGiT By ItS correSpOnDing NAME FrOM\n  \"One\", \"Two\", \"ThrEE\", \"FouR\", \"Five\", \"Six\", \"sevEn\", \"EiGhT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN an arRaY OF IntegERs, sorT the InTegeRs that are BEtWEeN 1 anD 9 iNcLuSivE,\n  reVERse THE rEsultiNG array, aND tHen REPLacE EacH DIGiT By ItS correSpOnDing NAME FrOM\n  \"One\", \"Two\", \"ThrEE\", \"FouR\", \"Five\", \"Six\", \"sevEn\", \"EiGhT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length;\n  let res = [];\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i);\n  }\n  return list;\n};\n\n/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i);\n  }\n  return list;\n};\n\n/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i);\n  }\n  return list;\n};\n\n/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i);\n  }\n  return list;\n};\n\n/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i);\n  }\n  return list;\n};\n\n/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i);\n  }\n  return list;\n};\n\n/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i);\n  }\n  return list;\n};\n\n/* iMpLEment ThE FUNctioN f That tAkes n As A parAmeter,\n  and REtURnS a list oF sIzE n, sUch ThaT THe vALUe Of the eLEment at INdEx i iS THE faCTorIAL Of i IF i iS eVen\n  or tHe SuM of nUMBERs FRom 1 to i otherWIse.\n  i sTarts froM 1.\n  thE facToRiaL Of i is tHE mUlTiplicAtIon of THe numBers FroM 1 to i (1 * 2 *... * i).\n  Example:\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  gIvEN a posItIVE IntegER n, return a tuple thaT has ThE numBer of even ANd ODd\n  IntEgEr PaLinDroMES thAT FaLl withIN the ranGE(1, n), iNclUSIVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a posItIVE IntegER n, return a tuple thaT has ThE numBer of even ANd ODd\n  IntEgEr PaLinDroMES thAT FaLl withIN the ranGE(1, n), iNclUSIVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const palindromes = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  wRiTE a funCtION countNums Which TAkes aN arrAy Of inTegers and REtURnS\n  thE nUmBeR of EleMENts WHIcH has a sUM of digiTS > 0.\n  IF a nUMBEr iS NegATIVe, THeN iTs firsT sIgNed dIGIT WiLL be negativE:\n  E.g. -123 haS signed dIgiTs -1, 2, anD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  wRiTE a funCtION countNums Which TAkes aN arrAy Of inTegers and REtURnS\n  thE nUmBeR of EleMENts WHIcH has a sUM of digiTS > 0.\n  IF a nUMBEr iS NegATIVe, THeN iTs firsT sIgNed dIGIT WiLL be negativE:\n  E.g. -123 haS signed dIgiTs -1, 2, anD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let num = 0;\n  let isNegativ = 0;\n  let isFirsT = 0;\n  let isSigned = 0;\n  let isDigital = 0;\n  let isNum = 0;\n  let isElemente = 0;\n  let isElementeNum = 0;\n  let isElementeElemente = 0;\n  let isElementeElementeNum = 0;\n  let isElementeElementeElemente = 0;\n  let isElementeElementeElementeNum = 0;\n  let isElementeElementeElementeElemente = 0;\n  let isElementeElementeElementeElementeNum = 0;\n  let isElementeElementeElementeElementeElemente = 0;\n  let isElementeElementeElementeElementeElementeElementeNum = 0;\n  let isElementeElementeElementeElementeElementeElementeElementeNum = 0;\n  let isElementeElementeElementeElementeElementeElementeElementeNum = 0;\n  let isElementeElementeElementeElementeElementeElementeElementeElementeNum = 0;\n  let isElementeElementeElementeElementeElementeElementeElementeElementeElementeNum = 0;\n  let isElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeNum = 0;\n  let isElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeNum = 0;\n  let isElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeNum = 0;\n  let isElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeElementeEle", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*WE HaVE an arRaY 'arr' OF n inteGErs arr[1], arr[2], ..., arr[N].The\n  nuMberS in tHe arRay will be RAnDOmLy oRdErEd. youR taSK Is tO DEtErmine IF\n  it is poSSiBle TO GEt aN ArrAY SOrTEd in NoN-decreAsInG ordER BY PeRForming \n  the FOlloWing operAtiOn on ThE giVEn arrAY:\n      YOu Are allOwEd to pERform RighT shIft oPEraTIon any nUmBEr of TiMEs.\n  \n  one rIGht shIFt operatIon mEans sHiftING aLl elemEntS oF THE array By one\n  poSition in The rigHT DirectiOn. tHe last eLEment OF THe arRAY wIll be MoVED TO\n  ThE starting posiTioN in ThE arrAy i.e. 0tH iNdEX. \n\n  If It is Possible to ObtAin tHe SorTed Array by perfOrminG THe abOve oPeraTiOn\n  Then return tRue Else return fAlse.\n  IF The Given ArRaY IS eMpTy THEn return truE.\n\n  notE: thE gIven list Is GuArANTEEd to hAVe uniQue elEMEnts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*WE HaVE an arRaY 'arr' OF n inteGErs arr[1], arr[2],..., arr[N].The\n  nuMberS in tHe arRay will be RAnDOmLy oRdErEd. youR taSK Is tO DEtErmine IF\n  it is poSSiBle TO GEt aN ArrAY SOrTEd in NoN-decreAsInG ordER BY PeRForming \n  the FOlloWing operAtiOn on ThE giVEn arrAY:\n      YOu Are allOwEd to pERform RighT shIft oPEraTIon any nUmBEr of TiMEs.\n  \n  one rIGht shIFt operatIon mEans sHiftING aLl elemEntS oF THE array By one\n  poSition in The rigHT DirectiOn. tHe last eLEment OF THe arRAY wIll be MoVED TO\n  ThE starting posiTioN in ThE arrAy i.e. 0tH iNdEX. \n\n  If It is Possible to ObtAin tHe SorTed Array by perfOrminG THe abOve oPeraTiOn\n  Then return tRue Else return fAlse.\n  IF The Given ArRaY IS eMpTy THEn return truE.\n\n  notE: thE gIven list Is GuArANTEEd to hAVe uniQue elEMEnts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  let moved = 0;\n  let movedArr = [];\n  for (let i = 0; i < len; i++) {\n    movedArr[i] = arr[i + 1];\n    moved++;\n  }\n  for (let i = moved; i > 0; i--) {\n    arr[0] = arr[i];\n    arr[i] = movedArr[i - 1];\n    moved--;\n  }\n  return arr[0];\n};\n\n/*\n  moveOneBallInPlace\n  \n  Moves one element of an array to the first position in another array.\n  \n  moveOneBallInPlace(arr1, arr2)\n  \n  Moves one element of an array to the first position in another array.\n  \n  arr1 is the array to be moved.\n  arr2 is the array to be moved.\n  \n  moveOneBallInPlace(arr1, arr2) is equivalent to\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) => moveOneBall(arr1)\n  \n  moveOneBall(arr1) => moveOneBall(arr2) ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* iNpUT are tWo STRIngs a aND b consIstiNg Only Of 1s and 0s.\n  PeRFoRM bInaRy xOr oN thEse INPutS ANd return Result ALso as a stRInG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aNd = toNumber(a);\n  const bNd = toNumber(b);\n  const aIsZero = a === '0';\n  const bIsZero = b === '0';\n  const aIsOne = a === '1';\n  const bIsOne = b === '1';\n  const aIsTwo = a === '2';\n  const bIsTwo = b === '2';\n  const aIsThree = a === '3';\n  const bIsThree = b === '3';\n  const aIsFour = a === '4';\n  const bIsFour = b === '4';\n  const aIsFive = a === '5';\n  const bIsFive = b === '5';\n  const aIsSix = a === '6';\n  const bIsSix = b === '6';\n  const aIsSeven = a === '7';\n  const bIsSeven = b === '7';\n  const aIsEight = a === '8';\n  const bIsEight = b === '8';\n  const aIsNine = a === '9';\n  const bIsNine = b === '9';\n  const aIsZeroOrOne = aIsZero || aIsOne;\n  const bIsZeroOrOne = bIsZero || bIsOne;\n  const aIsZeroOrTwo = aIsZero || aIsTwo;\n  const bIsZeroOrTwo = bIsZero || bIsTwo;\n  const aIsZeroOrThree = aIsZero || aIsThree;\n  const bIsZeroOrThree = bIsZero || bIsThree;\n  const aIsZeroOrFour = aIsZero || aIsFour;\n  const bIsZeroOrFour = bIsZero || bIsFour;\n  const aIsZeroOrFive = aIsZero || aIsFive;\n  const bIsZeroOrFive = bIsZero || bIsFive;\n  const aIsZeroOrSix = aIsZero || aIsSix;\n  const bIsZeroOrSix = bIsZero || bIsSix;\n  const aIsZeroOrSeven = aIsZero || aIsSeven;\n  const bIsZeroOrSeven = bIsZero || bIsSeven;\n  const aIsZeroOrEight = aIsZero || aIsEight;\n  const bIsZeroOrEight = bIsZero || bIsEight;\n  const aIsZeroOrNine = aIsZero || aIsNine;\n  const bIsZeroOrNine = bIsZero || bIsNine;\n  const aIsOneOrTwo = aIsOne || aIsTwo;\n  const bIsOneOrTwo = bIsOne || bIsTwo;\n  const aIsOneOrThree = aIsOne || aIsThree;\n  const bIsOneOrThree = bIsOne || bIsThree;\n  const aIsOneOrFour = aIsOne || aIsFour;\n  const bIsOneOrFour = bIsOne || bIsFour;\n  const aIsOneOrFive = aIsOne || aIsFive;\n  const bIsOneOrFive = bIsOne || bIsFive;\n  const aIsOneOrSix = aIsOne || aIsSix;\n  const bIsOneOrSix = bIsOne || bIsSix;\n  const aIsOneOrSeven = aIsOne || aIsSeven;\n  const bIsOneOrSeven = bIsOne || bIsSeven;\n  const aIsOneOrEight = aIsOne || aIsEight;\n  const bIsOneOrEight = bIsOne || bIsEight;\n  const aIsOneOrNine = aIsOne || aIsNine;\n  const bIsOneOrNine = bIsOne || bIsNine;\n  const aIsTwoOrThree = aIsTwo || aIsThree;\n  const bIsTwoOrThree = bIsTwo || bIsThree;\n  const aIsTwoOrFour = aIsTwo || aIsFour;\n  const bIsTwoOrFour = bIsTwo || bIsFour;\n  const aIsTwoOrFive = aIsTwo || aIsFive;\n  const bIsTwoOrFive = bIsTwo || bIsFive;\n  const aIsTwoOrSix = aIsTwo || aIsSix;\n  const bIsTwoOrSix = bIsTwo || bIsSix;\n  const aIsTwoOrSeven = aIsTwo || aIsSeven;\n  const bIsTwoOrSeven = bIsTwo || bIsSeven;\n  const aIsTwoOrEight = aIsTwo || aIsEight;\n  const bIsTwoOrEight = bIsTwo || bIsEight;\n  const aIsTwoOrNine = aIsTwo || aIsNine;\n  const bIsTwoOrNine = bIsTwo || bIsNine;\n  const aIsThreeOrFour = aIsThree || aIsFour;\n  const bIsThreeOrFour = bIsThree || bIsFour;\n  const aIsThreeOrFive = aIsThree || aIsFive;\n  const bIsThreeOrFive = bIsThree || bIsFive;\n  const aIsThreeOrSix = aIsThree || aIsSix;\n  const bIsThreeOrSix = bIsThree || bIsSix;\n  const aIsThreeOrSeven = aIsThree || aIsSeven;\n  const bIsThreeOrSeven = bIsThree || bIsSeven;\n  const aIsThreeOrEight = aIsThree || aIsEight;\n  const bIsThreeOrEight = bIsThree || bIsEight;\n  const aIsThreeOrNine = aIsThree || aIsNine;\n  const bIsThreeOrNine = bIsThree || bIsNine;\n  const aIsFourOrFive = aIsFour || aIsFive;\n  const bIsFourOrFive = bIsFour || bIsFive;\n  const aIsFourOrSix = aIsFour || aIsSix;\n  const bIsFourOrSix = bIsFour || bIsSix;\n  const aIsFourOrSeven = aIsFour || aIsSeven;\n  const bIsFourOrSeven = bIsFour || bIsSeven;\n  const aIsFourOrEight = aIsFour || aIsEight;\n  const bIsFourOrEight = bIsFour || bIsEight;\n  const aIsFourOrNine = aIsFour || aIsNine;\n  const bIsFourOrNine = bIsFour || bIsNine;\n  const aIsFiveOrSix = aIsFive || a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*IN ThIS probLeM, YOU will IMplemEnt a FuNctiOn that takES tWO lIstS oF nUmBerS,\n  anD DEteRMInEs whetHEr it is pOSsIblE TO PerFOrm AN exchange OF eLEmEnTs\n  betwEeN tHem tO MAKE lst1 a list OF only even nUMberS.\n  There is No lImit On The NUmber OF eXcHanged ElEmentS BetweEn lst1 anD lst2.\n  If It is POssIBle to exchange elEmENts bEtWEeN the lst1 ANd lst2 to mAKe\n  all the ElemEnts oF lst1 to bE EVeN, return \"YES\".\n  OtHerWiSE, return \"no\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*IN ThIS probLeM, YOU will IMplemEnt a FuNctiOn that takES tWO lIstS oF nUmBerS,\n  anD DEteRMInEs whetHEr it is pOSsIblE TO PerFOrm AN exchange OF eLEmEnTs\n  betwEeN tHem tO MAKE lst1 a list OF only even nUMberS.\n  There is No lImit On The NUmber OF eXcHanged ElEmentS BetweEn lst1 anD lst2.\n  If It is POssIBle to exchange elEmENts bEtWEeN the lst1 ANd lst2 to mAKe\n  all the ElemEnts oF lst1 to bE EVeN, return \"YES\".\n  OtHerWiSE, return \"no\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const [lst1Len, lst2Len] = lst1.length;\n  const [lst1Elems] = lst1;\n  const [lst2Elems] = lst2;\n  const [lst1ElemLen, lst2ElemLen] = lst1Elems.length;\n  const [lst1ElemElems, lst2ElemElems] = lst1ElemElems.map((elem) => elem.length);\n  const [lst2ElemElems, lst1ElemElems, lst2ElemElemLen] = lst2ElemElems.map((elem) => elem.length);\n  const [lst1ElemElemElems, lst2ElemElemElems, lst1ElemElemElemLen, lst2ElemElemElemLen] = lst1ElemElemElems.map((elem) => elem.length);\n  const [lst2ElemElemElems, lst1ElemElemElems, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen] = lst2ElemElems.map((elem) => elem.length);\n  const [lst1ElemElemElems, lst2ElemElemElems, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen] = lst1ElemElemElemElems.map((elem) => elem.length);\n  const [lst2ElemElemElems, lst1ElemElemElems, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen] = lst2ElemElemElemElems.map((elem) => elem.length);\n  const [lst1ElemElemElems, lst2ElemElemElems, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen] = lst1ElemElemElemElems.map((elem) => elem.length);\n  const [lst2ElemElemElems, lst1ElemElemElems, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen] = lst2ElemElemElemElems.map((elem) => elem.length);\n  const [lst1ElemElemElems, lst2ElemElemElems, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen] = lst1ElemElemElemElems.map((elem) => elem.length);\n  const [lst2ElemElemElems, lst1ElemElemElems, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen, lst1ElemElemLen, lst2ElemElemLen, lst1ElemElemLen, lst2ElemElemLen] = lst2ElemElemElemElems.map((elem) => elem.length);\n  const [lst1ElemElemElems, lst2ElemElemElems, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen] = lst1ElemElemElemElems.map((elem) => elem.length);\n  const [lst2ElemElemElems, lst1ElemElemElems, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen, lst1ElemElemLen, lst2ElemElemLen] = lst2ElemElemElemElems.map((elem) => elem.length);\n  const [lst1ElemElemElems, lst2ElemElemElems, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen, lst1ElemElemLen, lst2ElemElemLen, lst1ElemElemLen, lst2ElemElemLen] = lst1ElemElemElemElems.map((elem) => elem.length);\n  const [lst2ElemElemElems, lst1ElemElemElems, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen] = lst2ElemElemElemElems.map((elem) => elem.length);\n  const [lst1ElemElemElems, lst2ElemElemElems, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen, lst1ElemElemLen, lst2ElemElemLen] = lst1ElemElemElemElems.map((elem) => elem.length);\n  const [lst2ElemElemElems, lst1ElemElemElems, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemLen, lst1ElemElemLen, lst2ElemElemLen, lst1ElemElemLen, lst2ElemElemLen] = lst2ElemElemElemElems.map((elem) => elem.length);\n  const [lst1ElemElemElems, lst2ElemElemElems, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen, lst1ElemElemElemLen, lst2ElemElemElemLen] = lst1ElemElemElemElems.map((elem) => elem.length);\n  const [lst2ElemElem", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*GIVeN a StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIVeN a StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const re = /(^|[^a-zA-Z])([a-z])/g;\n  const str = test.toString();\n  let result = {};\n  let match;\n  while ((match = re.exec(str))!== null) {\n    const key = match[1];\n    const value = match[2];\n    result[key] = value? 1 : -1;\n  }\n  return result;\n};\n\n/*\n  A StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const re = /(^|[^a-zA-Z])([a-z])/g;\n  const str = test.toString();\n  let result = {};\n  let match;\n  while ((match = re.exec(str))!== null) {\n    const key = match[1];\n    const value = match[2];\n    result[key] = value? 1 : -1;\n  }\n  return result;\n};\n\n/*\n  A StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const re = /(^|[^a-zA-Z])([a-z])/g;\n  const str = test.toString();\n  let result = {};\n  let match;\n  while ((match = re.exec(str))!== null) {\n    const key = match[1];\n    const value = match[2];\n    result[key] = value? 1 : -1;\n  }\n  return result;\n};\n\n/*\n  A StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const re = /(^|[^a-zA-Z])([a-z])/g;\n  const str = test.toString();\n  let result = {};\n  let match;\n  while ((match = re.exec(str))!== null) {\n    const key = match[1];\n    const value = match[2];\n    result[key] = value? 1 : -1;\n  }\n  return result;\n};\n\n/*\n  A StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const re = /(^|[^a-zA-Z])([a-z])/g;\n  const str = test.toString();\n  let result = {};\n  let match;\n  while ((match = re.exec(str))!== null) {\n    const key = match[1];\n    const value = match[2];\n    result[key] = value? 1 : -1;\n  }\n  return result;\n};\n\n/*\n  A StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe thE same occUrrEnce, return AlL of THem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const re = /(^|[^a-zA-Z])([a-z])/g;\n  const str = test.toString();\n  let result = {};\n  let match;\n  while ((match = re.exec(str))!== null) {\n    const key = match[1];\n    const value = match[2];\n    result[key] = value? 1 : -1;\n  }\n  return result;\n};\n\n/*\n  A StrinG rEPREsentINg a spaCe sePaRateD lowercasE LeTTeRs, return a dIcTiOnAry\n  Of tHE LetTER wIth the MOst repeTItIon AND ConTAinING ThE CoRrEspondInG cOunt.\n  iF SEVeRAl letters hAVe ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split(\"\").reverse().join(\"\");\n  if (c === \"\") {\n    return result;\n  }\n  return reverseDelete(result, c);\n};\n\n/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDeleteAll = (s, c) => {\n  let result = s.split(\"\").reverse().join(\"\");\n  if (c === \"\") {\n    return result;\n  }\n  return reverseDeleteAll(result, c);\n};\n\n/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDeleteAllButLast = (s, c) => {\n  let result = s.split(\"\").reverse().join(\"\");\n  if (c === \"\") {\n    return result;\n  }\n  return reverseDeleteAllButLast(result, c);\n};\n\n/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDeleteAllButFirst = (s, c) => {\n  let result = s.split(\"\").reverse().join(\"\");\n  if (c === \"\") {\n    return result;\n  }\n  return reverseDeleteAllButFirst(result, c);\n};\n\n/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDeleteAllButLastButFirst = (s, c) => {\n  let result = s.split(\"\").reverse().join(\"\");\n  if (c === \"\") {\n    return result;\n  }\n  return reverseDeleteAllButLastButFirst(result, c);\n};\n\n/*TASk\n  wE are gIvEN TWo strINgs s anD c, you HaVe to Deleted alL ThE ChAraCtErS in s tHat Are EQUal TO AnY charaCTer in c\n  then CHeCk iF THE reSUlt STRInG Is PaLindroMe.\n  a sTrinG IS CAlLEd palindroME if iT reads thE saMe baCkWarD As forWArD.\n  YOu shouLd return A tuple contAIning The rEsuLt stRIng ANd true/fAlSE for ThE ChEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDeleteAllButLastButFirstButLast = (s, c) => {\n  let result = s.split(\"\").", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*GIVeN A list of stRiNGS, Where EAch stRing CoNsisTs of only dIGiTS, return a list.\n  eacH eLeMeNt i oF thE OUtpUT ShOuld be \"THe numbeR Of Odd ELEMenTS in thE\n  STRiNG i oF tHe inpuT.\" wHeRe alL THE i's ShOUld be replaCEd by The numbeR\n  of Odd dIgIts in THe i'th strINg Of The inpUt.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIVeN A list of stRiNGS, Where EAch stRing CoNsisTs of only dIGiTS, return a list.\n  eacH eLeMeNt i oF thE OUtpUT ShOuld be \"THe numbeR Of Odd ELEMenTS in thE\n  STRiNG i oF tHe inpuT.\" wHeRe alL THE i's ShOUld be replaCEd by The numbeR\n  of Odd dIgIts in THe i'th strINg Of The inpUt.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res;\n};\n\n/*\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\",\n   \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res.filter(Boolean);\n};\n\n/*\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let re", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = nums.length;\n  while (i < len) {\n    j = i + 1;\n    k = j;\n    while (j < len) {\n      if (nums[i] < nums[j]) {\n        sum = sum + nums[i];\n        i = i + 1;\n        j = j + 1;\n      } else {\n        sum = sum + nums[j];\n        j = j + 1;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = nums.length;\n  while (i < len) {\n    j = i + 1;\n    k = j;\n    while (j < len) {\n      if (nums[i] > nums[j]) {\n        sum = sum + nums[i];\n        i = i + 1;\n        j = j + 1;\n      } else {\n        sum = sum + nums[j];\n        j = j + 1;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == -2\n  maxSubArraySum([-1, -2, -3]) == -6\n  */\nconst sumOfSubArrays = (nums) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = nums.length;\n  while (i < len) {\n    j = i + 1;\n    k = j;\n    while (j < len) {\n      if (nums[i] > nums[j]) {\n        sum = sum + nums[i];\n        i = i + 1;\n        j = j + 1;\n      } else {\n        sum = sum + nums[j];\n        j = j + 1;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  sumOfSubArrays([2, 3, 4, 1, 2, 4]) == 6\n  sumOfSubArrays([-1, -2, -3]) == 6\n  */\nconst sumOfSubArraysSum = (nums) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = nums.length;\n  while (i < len) {\n    j = i + 1;\n    k = j;\n    while (j < len) {\n      if (nums[i] > nums[j]) {\n        sum = sum + nums[i];\n        i = i + 1;\n        j = j + 1;\n      } else {\n        sum = sum + nums[j];\n        j = j + 1;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  sumOfSubArraysSum([2, 3, 4, 1, 2, 4]) == 6\n  sumOfSubArraysSum([-1, -2, -3]) == 6\n  */\nconst sumOfSubArraysSumOfSubArrays = (nums) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = nums.length;\n  while (i < len) {\n    j = i + 1;\n    k = j;\n    while (j < len) {\n      if (nums[i] > nums[j]) {\n        sum = sum + nums[i];\n        i = i + 1;\n        j = j + 1;\n      } else {\n        sum = sum + nums[j];\n        j = j + 1;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  sumOfSubArraysSumOfSubArrays([2, 3, 4, 1, 2, 4]) == 6\n  sumOfSubArraysSumOfSubArrays([-1, -2, -3]) == 6\n  */\nconst sumOfSubArraysSumOfSubArraysSum = (nums) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = nums.length;\n  while (i < len) {\n    j = i + 1;\n    k = j;\n    while (j < len) {\n      if (nums[i] > nums[j]) {\n        sum = sum + nums[i];\n        i = i + 1;\n        j = j + 1;\n      } else {\n        sum = sum + nums[j];\n        j = j + 1;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  sumOfSubArraysSumOfSubArraysSum([2, 3, 4, 1, 2, 4]) == 6\n  sumOfSubArraysSumOfSubArraysSum([-1, -2, -3]) == 6\n  */\nconst sumOfSubArraysSumOfSubArraysSumOfSubArrays = (nums) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = nums.length;\n  while (i < len) {\n    j = i + 1;\n    k = j;\n    while (j < len) {\n      if (nums[i] > nums[j]) {\n        sum = sum + nums[i];\n        i = i + 1;\n        j = j + 1;\n      } else {\n        sum = sum + nums[j];\n        j = j + 1;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRaY\n  of nums.\n  Example\n  sumOfSubArraysSumOfSubArraysSumOfSubArraysSum([2, 3, 4, 1, 2, 4]) == 6\n  sumOfSubArraysSumOfSubArraysSumOfSubArraysSum([-1, -2, -3]) == 6\n  */\nconst sumOfSubArraysSumOfSubArraysSumOfSubArraysSumOfSubArrays = (nums) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = nums.length;\n  while (i < len) {\n    j = i + 1;\n    k = j;\n    while (j < len) {\n      if (nums[i] > nums[j]) {\n        sum = sum + nums[i];\n        i = i + 1;\n        j = j + 1;\n      } else {\n        sum = sum + nums[j];\n        j = j + 1;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  gIvEN an arRaY OF IntegERs nums, finD the MiNimuM sum of any NOn-EMpTy sUb-ArRa", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/115", "prompt": "/*\n  yOu ARe givEn A RECtangULar grid of WellS. EAch rOw represeNTs A SiNglE wElL,\n  aNd eAch 1 in A ROw rEPReSents a SIngle unIT oF waTER.\n  eacH WelL HAS a COrReSpondiNg BuCket THAT CaN Be used to exTRact Water froM it, \n  And aLl BucKEts haVE tHe Same capacity.\n  YoUr Task iS To use The bUckEts tO EmpTY the welLs.\n  oUtpuT tHE nUmbeR Of timES you need To loWer thE bucKETs.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  yOu ARe givEn A RECtangULar grid of WellS. EAch rOw represeNTs A SiNglE wElL,\n  aNd eAch 1 in A ROw rEPReSents a SIngle unIT oF waTER.\n  eacH WelL HAS a COrReSpondiNg BuCket THAT CaN Be used to exTRact Water froM it, \n  And aLl BucKEts haVE tHe Same capacity.\n  YoUr Task iS To use The bUckEts tO EmpTY the welLs.\n  oUtpuT tHE nUmbeR Of timES you need To loWer thE bucKETs.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        res.push(0);\n      } else {\n        res.push(1);\n      }\n    }\n  }\n  return Math.max(...res);\n};\n\n/**\n * Given a grid of wells, return the maximum fill capacity that can accomodate them.\n * \n * Example 1:\n * \n * Input: grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * Output: 6\n * \n * Example 2:\n * \n * Input: grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * Output: 5\n * \n * Example 3:\n * \n * Input: grid = [[0,0,0], [0,0,0]]\n * Output: 0\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxCapacity = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        res.push(0);\n      } else {\n        res.push(1);\n      }\n    }\n  }\n  return Math.max(...res);\n};\n\n/**\n * Given a grid of wells, return the maximum fill capacity that can accomodate them.\n * \n * Example 1:\n * \n * Input: grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * Output: 6\n * \n * Example 2:\n * \n * Input: grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * Output: 5\n * \n * Example 3:\n * \n * Input: grid = [[0,0,0], [0,0,0]]\n * Output: 0\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxCapacity2d = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        res.push(0);\n      } else {\n        res.push(1);\n      }\n    }\n  }\n  return Math.max(...res);\n};\n\n/**\n * Given a grid of wells, return the maximum fill capacity that can accomodate them.\n * \n * Example 1:\n * \n * Input: grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * Output: 6\n * \n * Example 2:\n * \n * Input: grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * Output: 5\n * \n * Example 3:\n * \n * Input: grid = [[0,0,0], [0,0,0]]\n * Output: 0\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxCapacity3d = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        res.push(0);\n      } else {\n        res.push(1);\n      }\n    }\n  }\n  return Math.max(...res);\n};\n\n/**\n * Given a grid of wells, return the maximum fill capacity that can accomodate them.\n * \n * Example 1:\n * \n * Input: grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * Output: 6\n * \n * Example 2:\n * \n * Input: grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * Output: 5\n * \n * Example 3:\n * \n * Input: grid = [[0,0,0], [0,0,0]]\n * Output: 0\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxCapacity4d = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        res.push(0);\n      } else {\n        res.push(1);\n      }\n    }\n  }\n  return Math.max(...res);\n};\n\n/**\n * Given a grid of wells, return the maximum fill capacity that can accomodate them.\n * \n * Example 1:\n * \n * Input: grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * Output: 6\n * \n * Example 2:\n * \n * Input: grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * Output: 5\n * \n * Example 3:\n * \n * Input: grid = [[0,0,0], [0,0,0]]\n * Output: 0\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxCapacity5d = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        res.push(0);\n      } else {\n        res.push(1);\n      }\n    }\n  }\n  return Math.max(...res);\n};\n\n/**\n * Given a grid of wells, return the maximum fill capacity that can accomodate them.\n * \n * Example 1:\n * \n * Input: grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * Output: 6\n * \n * Example 2:\n * \n * Input: grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * Output: ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  iN tHIs KatA, yOU HAve to SOrt an ArraY oF non-Negative iNTeGErS acCoRdInG to\n  NumBER of ONEs in Their bINary repREsEntATIOn in aSCenDING oRDeR.\n  FOr simiLaR nUmbeR OF ONeS, Sort based oN DeciMal value.\n\n  it mUst bE iMplEMenteD LiKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  iN tHIs KatA, yOU HA", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*GIVeN A striNg s AND A natuRAl numBer n, yOu Have Been taskeD To IMpLemEnT \n  a FuNctIon THAt rETUrNs a list of aLL words fROm StrING s ThaT ConTAIN eXAcTlY \n  n consoNaNtS, in ordER THEsE Words appeaR in The sTring s.\n  If tHe sTrinG s iS emPTy theN ThE fUnctioN sHould return AN emptY list.\n  NotE: yoU may ASsuME the inpUt STrinG cONtAins ONly leTTers and sPaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIVeN A striNg s AND A natuRAl numBer n, yOu Have Been taskeD To IMpLemEnT \n  a FuNctIon THAt rETUrNs a list of aLL words fROm StrING s ThaT ConTAIN eXAcTlY \n  n consoNaNtS, in ordER THEsE Words appeaR in The sTring s.\n  If tHe sTrinG s iS emPTy theN ThE fUnctioN sHould return AN emptY list.\n  NotE: yoU may ASsuME the inpUt STrinG cONtAins ONly leTTers and sPaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWordsNoCase\n  selectWords", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*YOU aRE giveN a word. yOUR task IS to fiNd thE cLoseSt vowel thAT sTAnDs bEtWeEn \n  Two ConSONanTS FrOm the rIGht side OF tHe word (cASE SenSItiVE).\n  \n  vOwELs in ThE beginNiNg And eNDING dOEsn't count. RETurn Empty strIng If yoU dIdn'T\n  Find aNY vOwEl met tHe Above COnditIon. \n\n  YOu mAy asSUme THat the gIvEN strInG CoNtaiNS EnglISh letter Only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU aRE giveN a word. yOUR task IS to fiNd thE cLoseSt vowel thAT sTAnDs bEtWeEn \n  Two ConSONanTS FrOm the rIGht side OF tHe word (cASE SenSItiVE).\n  \n  vOwELs in ThE beginNiNg And eNDING dOEsn't count. RETurn Empty strIng If yoU dIdn'T\n  Find aNY vOwEl met tHe Above COnditIon. \n\n  YOu mAy asSUme THat the gIvEN strInG CoNtaiNS EnglISh letter Only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = vowels.split('');\n  let vowelsArray = vowels.map(x => x.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const re = /(\\(|\\))/\n  return lst.some((s) => re.test(s))\n}\n\n/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens2 = (lst) => {\n  const re = /(\\(|\\))/\n  return lst.some((s) => re.test(s))\n}\n\n/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens3 = matchParens\n\n/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens4 = matchParens\n\n/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens5 = matchParens\n\n/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulTinG strInG wiLL be goOD.\n  A StRing S iS cOnsidERed to Be goOd iF and ONly IF all parEnTHeseS in S\n  ARe BalaNCed. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens6 = matchParens\n\n/* yOu ARe givEn A list OF Two stRIngs, bOth sTrIngs Consist of OPeN\n  PaRenThEsEs '(' Or cLosE PAreNTHeSes ')' onlY.\n  your job IS tO chECK If iT Is pOSSIbLE tO cOncateNaTe The tWO STRiNGs in\n  some ordeR, That The resulT", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* oUt OF list of strings, return thE longest oNE. rEturn THe firSt onE in cAse oF multiple\n  strings OF tHE sAme LeNgTh. retUrn NULl in cASE tHe inpuT list Is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* oUt OF list of strings, return thE longest oNE. rEturn THe firSt onE in cAse oF multiple\n  strings OF tHE sAme LeNgTh. retUrn NULl in cASE tHe inpuT list Is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) return ''\n  let longest = ''\n  let maxLen = 0\n  let current = ''\n  let currentLen = 0\n  let currentLenMax = 0\n  let currentLenMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let currentLenMaxMin = 0\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  gIvEN an arRaY arr OF IntegERs and A posItIve iNteger k, return a soRTeD list \n  Of LenGtH k wItH thE maximum k nuMBErs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN an arRaY arr OF IntegERs and A posItIve iNteger k, return a soRTeD list \n  Of LenGtH k wItH thE maximum k nuMBErs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [arr[maxIndex], maxIndex];\n};\n\n// https://leetcode.com/problems/maximum-subarray/discuss/97742/Java-implementation-of-largest-subarray-of-n-elements\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * 最大子数组\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar largestSubArray = function(head, k) {\n  if (!head) {\n    return null;\n  }\n  let stack = [];\n  let max = 0;\n  let maxIndex = 0;\n  let cur = head;\n  while (cur) {\n    if (cur.val < max) {\n      max = cur.val;\n      maxIndex = cur.val;\n    }\n    if (cur.val > max) {\n      stack.push(cur);\n      cur = cur.next;\n    } else {\n      cur = cur.next;\n    }\n  }\n  if (stack.length > k) {\n    return stack[k];\n  }\n  return null;\n};\n\n// https://leetcode.com/problems/maximum-subarray/discuss/97742/Java-implementation-of-largest-subarray-of-n-elements\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * 最大子数组\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar largestSubArray = function(head, k) {\n  if (!head) {\n    return null;\n  }\n  let stack = [];\n  let max = 0;\n  let maxIndex = 0;\n  let cur = head;\n  while (cur) {\n    if (cur.val < max) {\n      max = cur.val;\n      maxIndex = cur.val;\n    }\n    if (cur.val > max) {\n      stack.push(cur);\n      cur = cur.next;\n    } else {\n      cur = cur.next;\n    }\n  }\n  if (stack.length > k) {\n    return stack[k];\n  }\n  return null;\n};\n\n// https://leetcode.com/problems/maximum-subarray/discuss/97742/Java-implementation-of-largest-subarray-of-n-elements\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * 最大子数组\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar largestSubArray = function(head, k) {\n  if (!head) {\n    return null;\n  }\n  let stack = [];\n  let max = 0;\n  let maxIndex = 0;\n  let cur = head;\n  while (cur) {\n    if (cur.val < max) {\n      max = cur.val;\n      maxIndex = cur.val;\n    }\n    if (cur.val > max) {\n      stack.push(cur);\n      cur = cur.next;\n    } else {\n      cur = cur.next;\n    }\n  }\n  if (stack.length > k) {\n    return stack[k];\n  }\n  return null;\n};\n\n// https://leetcode.com/problems/maximum-subarray/discuss/97742/Java-implementation-of-largest-subarray-of-n-elements\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * 最大子数组\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar largestSubArray = function(head, k) {\n  if (!head) {\n    return null;\n  }\n  let stack = [];\n  let max = 0;\n  let maxIndex = 0;\n  let cur = head;\n  while (cur) {\n    if (cur.val < max) {\n      max = cur.val;\n      maxIndex = cur.val;\n    }\n    if (cur.val > max) {\n      stack.push(cur);\n      cur = cur.next;\n    } else {\n      cur = cur.next;\n    }\n  }\n  if (stack.length > k) {\n    return stack[k];\n  }\n  return null;\n};\n\n// https://leetcode.com/problems/maximum-subarray/discuss/97742/Java-implementation-of-largest-subarray-of-n-elements\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * 最大子数组\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar largestSubArray = function(head, k) {\n  if (!head) {\n    return null;\n  }\n  let stack = [];\n  let max = 0;\n  let maxIndex = 0;\n  let cur = head;\n  while (cur) {\n    if (cur.val < max) {\n      max = cur.val;\n      maxIndex = cur.val;\n    }\n    if (cur.val > max) {\n      stack.push(cur);\n      cur = cur.next;\n    } else {\n      cur = cur.next;\n    }\n  }\n  if (stack.length > k) {\n    return stack[k];\n  }\n  return null;\n};\n\n// https://leetcode.com/problems/maximum-subarray/discuss/97742/Java-implementation-of-largest-subarray-of-n-elements\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * 最大子数组\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar largestSubArray = function(head, k) {\n  if (!head) {\n    return null;\n  }\n  let stack = [];\n  let max = 0;\n  let maxIndex = 0;\n  let cur = head;\n  while (cur) {\n    if (cur.val < max) {\n      max = cur.val;\n      maxIndex = cur.val;\n    }\n    if (cur.val > max) {\n      stack.push(cur);\n      cur = cur.next;\n    } else {\n      cur = cur.next;\n    }\n  }\n  if (stack.length > k) {\n    return stack[k];\n  }\n  return null;\n};\n\n// https://leetcode.com/problems/maximum-subarray/discuss/97742/Java-implementation-of-largest-subarray-of-n-elements\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * 最大子数组\n * @param {ListNode} head\n * @param {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*GIVeN A non-eMpTY list OF inteGErs, return thE sum Of All oF the odd elEMeNTs ThaT aRe in EvEn pOsiTIOns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIVeN A non-eMpTY list OF inteGErs, return thE sum Of All oF the odd elEMeNTs ThaT aRe in EvEn pOsiTIOns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = 0;\n  let odd = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  let evenSum2 = 0;\n  let oddSum2 = 0;\n  let evenSum3 = 0;\n  let oddSum3 = 0;\n  let evenSum4 = 0;\n  let oddSum4 = 0;\n  let evenSum5 = 0;\n  let oddSum5 = 0;\n  let evenSum6 = 0;\n  let oddSum6 = 0;\n  let evenSum7 = 0;\n  let oddSum7 = 0;\n  let evenSum8 = 0;\n  let oddSum8 = 0;\n  let evenSum9 = 0;\n  let oddSum9 = 0;\n  let evenSum10 = 0;\n  let oddSum10 = 0;\n  let evenSum11 = 0;\n  let oddSum11 = 0;\n  let evenSum12 = 0;\n  let oddSum12 = 0;\n  let evenSum13 = 0;\n  let oddSum13 = 0;\n  let evenSum14 = 0;\n  let oddSum14 = 0;\n  let evenSum15 = 0;\n  let oddSum15 = 0;\n  let evenSum16 = 0;\n  let oddSum16 = 0;\n  let evenSum17 = 0;\n  let oddSum17 = 0;\n  let evenSum18 = 0;\n  let oddSum18 = 0;\n  let evenSum19 = 0;\n  let oddSum19 = 0;\n  let evenSum20 = 0;\n  let oddSum20 = 0;\n  let evenSum21 = 0;\n  let oddSum21 = 0;\n  let evenSum22 = 0;\n  let oddSum22 = 0;\n  let evenSum23 = 0;\n  let oddSum23 = 0;\n  let evenSum24 = 0;\n  let oddSum24 = 0;\n  let evenSum25 = 0;\n  let oddSum25 = 0;\n  let evenSum26 = 0;\n  let oddSum26 = 0;\n  let evenSum27 = 0;\n  let oddSum27 = 0;\n  let evenSum28 = 0;\n  let oddSum28 = 0;\n  let evenSum29 = 0;\n  let oddSum29 = 0;\n  let evenSum30 = 0;\n  let oddSum30 = 0;\n  let evenSum31 = 0;\n  let oddSum31 = 0;\n  let evenSum32 = 0;\n  let oddSum32 = 0;\n  let evenSum33 = 0;\n  let oddSum33 = 0;\n  let evenSum34 = 0;\n  let oddSum34 = 0;\n  let evenSum35 = 0;\n  let oddSum35 = 0;\n  let evenSum36 = 0;\n  let oddSum36 = 0;\n  let evenSum37 = 0;\n  let oddSum37 = 0;\n  let evenSum38 = 0;\n  let oddSum38 = 0;\n  let evenSum39 = 0;\n  let oddSum39 = 0;\n  let evenSum40 = 0;\n  let oddSum40 = 0;\n  let evenSum41 = 1;\n  let oddSum41 = 1;\n  let evenSum42 = 1;\n  let oddSum42 = 1;\n  let evenSum43 = 1;\n  let oddSum43 = 1;\n  let evenSum44 = 1;\n  let oddSum44 = 1;\n  let evenSum45 = 1;\n  let oddSum45 = 1;\n  let evenSum46 = 1;\n  let oddSum46 = 1;\n  let evenSum47 = 1;\n  let oddSum47 = 1;\n  let evenSum48 = 1;\n  let oddSum48 = 1;\n  let evenSum49 = 1;\n  let oddSum49 = 1;\n  let evenSum50 = 1;\n  let oddSum50 = 1;\n  let evenSum51 = 1;\n  let oddSum51 = 1;\n  let evenSum52 = 1;\n  let oddSum52 = 1;\n  let evenSum53 = 1;\n  let oddSum53 = 1;\n  let evenSum54 = 1;\n  let oddSum54 = 1;\n  let evenSum55 = 1;\n  let oddSum55 = 1;\n  let evenSum56 = 1;\n  let oddSum56 = 1;\n  let evenSum57 = 1;\n  let oddSum57 = 1;\n  let evenSum58 = 1;\n  let oddSum58 = 1;\n  let evenSum59 = 1;\n  let oddSum59 = 1;\n  let evenSum60 = 1;\n  let oddSum60 = 1;\n  let evenSum61 = 1;\n  let oddSum61 = 1;\n  let evenSum62 = 1;\n  let oddSum62 = 1;\n  let evenSum63 = 1;\n  let oddSum63 = 1;\n  let evenSum64 = 1;\n  let oddSum64 = 1;\n  let evenSum65 = 1;\n  let oddSum65 = 1;\n  let evenSum66 = 1;\n  let oddSum66 = 1;\n  let evenSum67 = 1;\n  let oddSum67 = 1;\n  let evenSum68 = 1;\n  let oddSum68 = 1;\n  let evenSum69 = 1;\n  let oddSum69 = 1;\n  let evenSum70 = 1;\n  let oddSum70 = 1;\n  let evenSum71 = 1;\n  let oddSum71 = 1;\n  let evenSum72 = 1;\n  let oddSum72 = 1;\n  let evenSum73 = 1;\n  let oddSum73 = 1;\n  let evenSum74 = 1;\n  let oddSum74 = 1;\n  let evenSum75 = 1;\n  let oddSum75 = 1;\n  let evenSum76 = 1;\n  let oddSum76 = 1;\n  let evenSum77 = 1;\n  let oddSum77 = 1;\n  let evenSum78 = 1;\n  let oddSum78 = 1;\n  let evenSum79 = 1;\n  let oddSum79 = 1;\n  let evenSum80 = 1;\n  let oddSum80 = 1;\n  let evenSum81 = 1;\n  let oddSum81 = 1;\n  let evenSum82 = 1;\n  let oddSum82 = 1;\n  let evenSum83 = 1;\n  let oddSum83 = 1;\n  let evenSum84 = 1;\n  let oddSum84 = 1;\n  let evenSum85 = 1;\n  let oddSum85 = 1;\n  let evenSum86 = 1;\n  let oddSum86 = 1;\n  let evenSum87 = 1;\n  let oddSum87 = 1;\n  let evenSum88 = 1;\n  let oddSum88 = 1;\n  let evenSum89 = 1;\n  let oddSum89 = 1;\n  let evenSum90 = 1;\n  let oddSum90 = 1;\n  let evenSum91 = 1;\n  let oddSum91 = 1;\n  let evenSum92 = 1;\n  let oddSum92 = 1;\n  let evenSum93 = 1;\n  let oddSum93 = 1;\n  let evenSum94 = 1;\n  let oddSum94 = 1;\n  let evenSum95 = 1;\n  let oddSum95 = 1;\n  let evenSum96 = 1;\n  let oddSum96 = 1;\n  let evenSum97 = 1;\n  let oddSum97 = 1;\n  let evenSum98 = 1;\n  let oddSum98 = 1;\n  let evenSum99 = 1;\n  let oddSum99 = 1;\n  let evenSum100 = 1;\n  let oddSum100 = 1;\n  let evenSum101 = 1;\n  let oddSum101 = 1;\n  let evenSum102 = 1;\n  let oddSum102 = 1;\n  let evenSum103 = 1;\n  let oddSum103 = 1;\n  let evenSum104 = 1;\n  let oddSum104 = 1;\n  let evenSum105 = 1;\n  let oddSum105 = 1;\n  let evenSum106 = 1;\n  let oddSum106 = 1;\n  let evenSum107 = 1;\n  let oddSum107 = 1;\n  let evenSum108 = 1;\n  let oddSum108 = 1;\n  let evenSum109 = 1;\n  let oddSum109 = 1;\n  let evenSum110 = 1;\n  let oddSum110 = 1;\n  let evenSum111 = 1;\n  let oddSum111 = 1;\n  let evenSum112 = 1;\n  let oddSum112 = 1;\n  let evenSum113 = 1;\n  let oddSum113 = 1;\n  let evenSum114 = 1;\n  let oddSum114 = 1;\n  let evenSum115 = 1;\n  let oddSum115 = 1;\n  let evenSum116 = 1;\n  let oddSum116 = 1;\n  let evenSum117 = 1;\n  let oddSum117 = 1;\n  let evenSum118 = 1;\n  let odd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOst TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOST TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst subElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOST TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst mulElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * k;\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOST TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst divElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] / k;\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOST TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst modElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] % k;\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOST TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst powElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] ** k;\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOST TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst powElementsMod = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] ** k;\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOST TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst powElementsMod2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] ** k;\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOST TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst powElementsMod3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] ** k;\n  }\n  return sum;\n};\n\n/*\n  gIvEN a non-EmPTY Array OF inteGers arr AnD an iNteger k, return\n  the SUm OF tHe eLeMeNtS wiTh aT MOST TWO dIgits fROm the fiRSt k EleMENTs oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  gIvEN a posItIVE IntegER n, return a sorTed list tHaT has The odd numBErS in CoLlaTz SeQuEncE.\n\n  ThE cOllATZ cOnjectURe is a coNJeCtuRE in MAthEMatICS ThAT cOnCerns a SeQuEnce DEFINeD\n  As follows: sTArt wIth any poSitIve iNtEgeR n. then eACh TeRm is obTaIned fROm the \n  PrevIouS terM As fOLlows: if ThE PrevIoUS tErm iS Even, tHE next terM is oNe halF of \n  tHE PrEvious TerM. IF THE previOus term Is odd, tHe next TERm is 3 timEs THe previOUs\n  terM PLUs 1. ThE COnJectuRe IS THAT nO matter what vaLue OF n, tHe seQueNcE wILl aLwayS reach 1.\n\n  Note: \n      1. colLatz(1) Is [1].\n      2. RetUrnEd list sorted in incReasiNG OrdeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a posItIVE IntegER n, return a sorTed list tHaT has The odd numBErS in CoLlaTz SeQuEncE.\n\n  ThE cOllATZ cOnjectURe is a coNJeCtuRE in MAthEMatICS ThAT cOnCerns a SeQuEnce DEFINeD\n  As follows: sTArt wIth any poSitIve iNtEgeR n. then eACh TeRm is obTaIned fROm the \n  PrevIouS terM As fOLlows: if ThE PrevIoUS tErm iS Even, tHE next terM is oNe halF of \n  tHE PrEvious TerM. IF THE previOus term Is odd, tHe next TERm is 3 timEs THe previOUs\n  terM PLUs 1. ThE COnJectuRe IS THAT nO matter what vaLue OF n, tHe seQueNcE wILl aLwayS reach 1.\n\n  Note: \n      1. colLatz(1) Is [1].\n      2. RetUrnEd list sorted in incReasiNG OrdeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const retUrnEd = [];\n  let i = 0;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l % 2!== 0) {\n    i++;\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    j++;\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    k++;\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    retUrnEd.push(k);\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    retUrnEd.push(j);\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    retUrnEd.push(l);\n    l /= 2;\n  }\n  return retUrnEd;\n};\n\n/*\n  gIvEN a posItIVE IntegER n, return a sorTed list tHaT has The even numBErS in CoLlaTz SeQuEncE.\n\n  ThE cOllATZ cOnjectURe is a coNJeCtuRE in MAthEMatICS ThAT cOnCerns a SeQuEnce DEFINeD\n  As follows: sTArt wIth any poSitIve iNtEgeR n. then eACh TeRm is obTaIned fROm the \n  PrevIouS terM As fOLlows: if ThE PrevIoUS tErm iS Even, tHE next terM is oNe halF of \n  tHE PrEvious TerM. IF THE previOus term Is odd, tHe next TERm is 3 timEs THe previOUs\n  terM PLUs 1. ThE COnJectuRe IS THAT nO matter what vaLue OF n, tHe seQueNcE wILl aLwayS reach 1.\n\n  Note: \n      1. colLatz(1) Is [1].\n      2. RetUrnEd list sorted in incReasiNG OrdeR.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  const retUrnEd = [];\n  let i = 0;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l % 2!== 0) {\n    i++;\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    j++;\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    k++;\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    retUrnEd.push(k);\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    retUrnEd.push(j);\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    retUrnEd.push(l);\n    l /= 2;\n  }\n  return retUrnEd;\n};\n\n/*\n  gIvEN a posItIVE IntegER n, return a sorTed list tHaT has The odd numBErS in CoLlaTz SeQuEncE.\n\n  ThE cOllATZ cOnjectURe is a coNJeCtuRE in MAthEMatICS ThAT cOnCerns a SeQuEnce DEFINeD\n  As follows: sTArt wIth any poSitIve iNtEgeR n. then eACh TeRm is obTaIned fROm the \n  PrevIouS terM As fOLlows: if ThE PrevIoUS tErm iS Even, tHE next terM is oNe halF of \n  tHE PrEvious TerM. IF THE previOus term Is odd, tHe next TERm is 3 timEs THe previOUs\n  terM PLUs 1. ThE COnJectuRe IS THAT nO matter what vaLue OF n, tHe seQueNcE wILl aLwayS reach 1.\n\n  Note: \n      1. colLatz(1) Is [1].\n      2. RetUrnEd list sorted in incReasiNG OrdeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const retUrnEd = [];\n  let i = 0;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l % 2!== 0) {\n    i++;\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    j++;\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    k++;\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    retUrnEd.push(k);\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    retUrnEd.push(j);\n    l /= 2;\n  }\n  while (l % 2!== 0) {\n    retUrnEd.push(l);\n    l /= 2;\n  }\n  return retUrnEd;\n};\n\n/*\n  gIvEN a posItIVE IntegER n, return a sorTed list tHaT has The even numBErS in CoLlaTz SeQuEncE.\n\n  ThE cOllATZ cOnjectURe is a coNJeCtuRE in MAthEMatICS ThAT cOnCerns a SeQuEnce DEFINeD\n  As follows: sTArt wIth any poS", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*YOU hAVe to wRiTE A FunctIOn whiCh vaLiDateS a given date stRInG AnD\n  reTuRnS tRue If tHE date Is vALId OtherwISe false.\n  tHe date Is vALID if ALl oF THE fOLlOwIng rulEs ArE satISFIEd:\n  1. tHe date string is NOt emPty.\n  2. The nuMbeR of dAyS is NOt lesS ThAn 1 Or highEr Than 31 dAYs for MontHs 1,3,5,7,8,10,12. ANd thE NumBEr of dayS iS Not lEsS ThAn 1 or HIgher THan 30 days fOr moNths 4,6,9,11. ANd, thE NUmBer of dAys Is NOT Less thAn 1 or higHer thaN 29 for thE MOnth 2.\n  3. The MoNThs shouLD not bE LESs thAN 1 Or HigheR tHAN 12.\n  4. tHE date sHould be in the forMat: MM-dD-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU hAVe to wRiTE A FunctIOn whiCh vaLiDateS a given date stRInG AnD\n  reTuRnS tRue If tHE date Is vALId OtherwISe false.\n  tHe date Is vALID if ALl oF THE fOLlOwIng rulEs ArE satISFIEd:\n  1. tHe date string is NOt emPty.\n  2. The nuMbeR of dAyS is NOt lesS ThAn 1 Or highEr Than 31 dAYs for MontHs 1,3,5,7,8,10,12. ANd thE NumBEr of dayS iS Not lEsS ThAn 1 or HIgher THan 30 days fOr moNths 4,6,9,11. ANd, thE NUmBer of dAys Is NOT Less thAn 1 or higHer thaN 29 for thE MOnth 2.\n  3. The MoNThs shouLD not bE LESs thAN 1 Or HigheR tHAN 12.\n  4. tHE date sHould be in the forMat: MM-dD-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateString = date.toString();\n  const dateParts = dateString.split('-');\n  const dateYear = dateParts[0];\n  const dateMonth = dateParts[1];\n  const dateDay = dateParts[2];\n  const dateYearString = dateYear.toString();\n  const dateMonthString = dateMonth.toString();\n  const dateDayString = dateDay.toString();\n  const dateYearParts = dateYearString.split('-');\n  const dateMonthParts = dateMonthString.split('-');\n  const dateDayParts = dateDayString.split('-');\n  const dateYearPartString = dateYearParts[0].toString();\n  const dateMonthPartString = dateMonthParts[0].toString();\n  const dateDayPartString = dateDayParts[0].toString();\n  const dateYearPartParts = dateYearPartParts[0].toString();\n  const dateMonthPartParts = dateMonthPartParts[0].toString();\n  const dateDayPartParts = dateDayPartParts[0].toString();\n  const dateYearPartPartString = dateYearPartParts[0].toString();\n  const dateMonthPartPartString = dateMonthPartParts[0].toString();\n  const dateDayPartPartString = dateDayPartParts[0].toString();\n  const dateYearPartPartParts = dateYearPartPartParts[0].toString();\n  const dateMonthPartPartParts = dateMonthPartPartParts[0].toString();\n  const dateDayPartPartParts = dateDayPartPartParts[0].toString();\n  const dateYearPartPartPartString = dateYearPartPartParts[0].toString();\n  const dateMonthPartPartPartString = dateMonthPartPartParts[0].toString();\n  const dateDayPartPartPartString = dateDayPartPartParts[0].toString();\n  const dateYearPartPartPartParts = dateYearPartPartPartParts[0].toString();\n  const dateMonthPartPartPartParts = dateMonthPartPartPartParts[0].toString();\n  const dateDayPartPartPartParts = dateDayPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartString = dateYearPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartString = dateMonthPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartString = dateDayPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartParts = dateYearPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartParts = dateMonthPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartParts = dateDayPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartString = dateYearPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartPartString = dateMonthPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartPartString = dateDayPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartParts = dateYearPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartPartParts = dateMonthPartPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartPartParts = dateDayPartPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartPartString = dateYearPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartPartPartString = dateMonthPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartPartPartString = dateDayPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartPartParts = dateYearPartPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartPartParts = dateMonthPartPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartPartPartParts = dateDayPartPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartPartString = dateYearPartPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartPartPartString = dateMonthPartPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartPartPartString = dateDayPartPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartPartParts = dateYearPartPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartPartPartParts = dateMonthPartPartPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartPartPartParts = dateDayPartPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartPartPartString = dateYearPartPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartPartPartPartString = dateMonthPartPartPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartPartPartPartPartString = dateDayPartPartPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartPartPartParts = dateYearPartPartPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartPartPartPartParts = dateMonthPartPartPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartPartPartPartParts = dateDayPartPartPartPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartPartPartPartString = dateYearPartPartPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartPartPartPartString = dateMonthPartPartPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartPartPartPartPartString = dateDayPartPartPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartPartPartParts = dateYearPartPartPartPartPartPartPartParts[0].toString();\n  const dateMonthPartPartPartPartPartPartPartPartParts = dateMonthPartPartPartPartPartPartParts[0].toString();\n  const dateDayPartPartPartPartPartPartPartPartParts = dateDayPartPartPartPartPartPartPartParts[0].toString();\n  const dateYearPartPartPartPartPartPartPartPartPartString = dateYear", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* gIvEN a strInG OF Words, return A list Of worDs spLiT on wHitespace, IF nO WhIteSpAcEs ExiSts in THE teXT YoU\n  shoulD Split on COmMas ',' IF NO coMMas EXIStS YoU sHould return tHe NuMber OF LOWeR-Case letterS With Odd order in The\n  AlphAbEt, oRD('a') = 0, ord('B') = 1, ... OrD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* gIvEN a strInG OF Words, return A list Of worDs spLiT on wHitespace, IF nO WhIteSpAcEs ExiSts in THE teXT YoU\n  shoulD Split on COmMas ',' IF NO coMMas EXIStS YoU sHould return tHe NuMber OF LOWeR-Case letterS With Odd order in The\n  AlphAbEt, oRD('a') = 0, ord('B') = 1,... OrD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/g);\n  const wordsInt = words.map((word) => parseInt(word));\n  const wordsInt = wordsInt.filter((word) => word > 0);\n  const wordsInt = wordsInt.map((word) => word.toString());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, ''));\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.replace(/[^a-zA-Z0-9]/g, '').toLocaleUpperCase());\n  const wordsInt = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* gIvEN a list of nUmBERS, return whetHEr or nOt thEy Are sOrted\n  in asceNDiNG oRdeR. IF list hAs MorE thAN 1 DupLICaTe of thE Same\n  numBEr, return FalSE. aSsuME no NEGAtIVe NuMbers aNd OnLy inTEGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* gIvEN a list of nUmBERS, return whetHEr or nOt thEy Are sOrted\n  in asceNDiNG oRdeR. IF list hAs MorE thAN 1 DupLICaTe of thE Same\n  numBEr, return FalSE. aSsuME no NEGAtIVe NuMbers aNd OnLy inTEGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let isSorted = true\n  if (lst.length === 0) {\n    isSorted = false\n  } else if (lst.length === 1) {\n    isSorted = false\n  } else if (lst[0] < lst[lst.length - 1]) {\n    isSorted = false\n  } else {\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] < lst[i - 1]) {\n        isSorted = false\n        break\n      }\n    }\n  }\n  return isSorted\n}\n\n/**\n  Return true if the given array is sorted in ascending order.\n  Return false if the given array is sorted in descending order.\n  Examples\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  let isSorted = true\n  if (lst.length === 0) {\n    isSorted = false\n  } else if (lst.length === 1) {\n    isSorted = false\n  } else if (lst[0] > lst[lst.length - 1]) {\n    isSorted = false\n  } else {\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > lst[i - 1]) {\n        isSorted = false\n        break\n      }\n    }\n  }\n  return isSorted\n}\n\n/**\n  Return true if the given array is sorted in ascending order.\n  Return false if the given array is sorted in descending order.\n  Examples\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let isSorted = true\n  if (lst.length === 0) {\n    isSorted = false\n  } else if (lst.length === 1) {\n    isSorted = false\n  } else if (lst[0] < lst[lst.length - 1]) {\n    isSorted = false\n  } else {\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > lst[i - 1]) {\n        isSorted = false\n        break\n      }\n    }\n  }\n  return isSorted\n}\n\n/**\n  Return true if the given array is sorted in ascending order.\n  Return false if the given array is sorted in descending order.\n  Examples\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSortedAscDesc = (lst) => {\n  let isSorted = true\n  if (lst.length === 0) {\n    isSorted = false\n  } else if (lst.length === 1) {\n    isSorted = false\n  } else if (lst[0] > lst[lst.length - 1]) {\n    isSorted = false\n  } else {\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > lst[i - 1]) {\n        isSorted = false\n        break\n      }\n    }\n  }\n  return isSorted\n}\n\n/**\n  Return true if the given array is sorted in ascending order.\n  Return false if the given array is sorted in descending order.\n  Examples\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSortedAscDescDesc = (lst) => {\n  let isSorted = true\n  if (lst.length === 0) {\n    isSorted = false\n  } else if (lst.length === 1) {\n    isSorted = false\n  } else if (lst[0] < lst[lst.length - 1]) {\n    isSorted = false\n  } else {\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > lst[i - 1]) {\n        isSorted = false\n        break\n      }\n    }\n  }\n  return isSorted\n}\n\n/**\n  Return true if the given array is sorted in ascending order.\n  Return false if the given array is sorted in descending order.\n  Examples\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSortedAscDescDesc = (lst) => {\n  let isSorted = true\n  if (lst.length === 0) {\n    isSorted = false\n  } else if (lst.length === 1) {\n    isSorted = false\n  } else if (lst[0] < lst[lst.length - 1]) {\n    isSorted = false\n  } else {\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > lst[i - 1]) {\n        isSorted = false\n        break\n      }\n    }\n  }\n  return isSorted\n}\n\n/**\n  Return true if the given array is sorted in ascending order.\n  Return false if the given array is sorted in descending order.\n  Examples\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSortedAscDescDescDesc = (lst) => {\n  let isSorted = true\n  if (lst.length === 0) {\n    isSorted = false\n  } else if (lst.length === 1) {\n    isSorted = false\n  } else if (lst[0] < lst[lst.length - 1]) {\n    isSorted = false\n  } else {\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > lst[i - 1]) {\n        isSorted = false\n        break\n      }\n    }\n  }\n  return isSorted\n}\n\n/**\n  Return true if the given array is sorted in ascending order.\n  Return false if the given ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*YOU aRE giveN tWO INtervALs,\n  wheRe eaCh InteRval is a paIR oF InTegErS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU aRE giveN tWO INtervALs,\n  wheRe eaCh InteRval is a paIR oF InTegErS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let [start, end] = interval1;\n  let [start, end] = interval2;\n  let [start2, end2] = interval2;\n  let [start3, end3] = interval1;\n  let [start4, end4] = interval2;\n  let [start5, end5] = interval1;\n  let [start6, end6] = interval2;\n  let [start7, end7] = interval1;\n  let [start8, end8] = interval2;\n  let [start9, end9] = interval1;\n  let [start10, end10] = interval2;\n  let [start11, end11] = interval1;\n  let [start12, end12] = interval2;\n  let [start13, end13] = interval1;\n  let [start14, end14] = interval2;\n  let [start15, end15] = interval1;\n  let [start16, end16] = interval2;\n  let [start17, end17] = interval1;\n  let [start18, end18] = interval2;\n  let [start19, end19] = interval1;\n  let [start20, end20] = interval2;\n  let [start21, end21] = interval1;\n  let [start22, end22] = interval2;\n  let [start23, end23] = interval1;\n  let [start24, end24] = interval2;\n  let [start25, end25] = interval1;\n  let [start26, end26] = interval2;\n  let [start27, end27] = interval1;\n  let [start28, end28] = interval2;\n  let [start29, end29] = interval1;\n  let [start30, end30] = interval2;\n  let [start31, end31] = interval1;\n  let [start32, end32] = interval2;\n  let [start33, end33] = interval1;\n  let [start34, end34] = interval2;\n  let [start35, end35] = interval1;\n  let [start36, end36] = interval2;\n  let [start37, end37] = interval1;\n  let [start38, end38] = interval2;\n  let [start39, end39] = interval1;\n  let [start40, end40] = interval2;\n  let [start41, end41] = interval1;\n  let [start42, end42] = interval2;\n  let [start43, end43] = interval1;\n  let [start44, end44] = interval2;\n  let [start45, end45] = interval1;\n  let [start46, end46] = interval2;\n  let [start47, end47] = interval1;\n  let [start48, end48] = interval2;\n  let [start49, end49] = interval1;\n  let [start50, end50] = interval2;\n  let [start51, end51] = interval1;\n  let [start52, end52] = interval2;\n  let [start53, end53] = interval1;\n  let [start54, end54] = interval2;\n  let [start55, end55] = interval1;\n  let [start56, end56] = interval2;\n  let [start57, end57] = interval1;\n  let [start58, end58] = interval2;\n  let [start59, end59] = interval1;\n  let [start60, end60] = interval2;\n  let [start61, end61] = interval1;\n  let [start62, end62] = interval2;\n  let [start63, end63] = interval1;\n  let [start64, end64] = interval2;\n  let [start65, end65] = interval1;\n  let [start66, end66] = interval2;\n  let [start67, end67] = interval1;\n  let [start68, end68] = interval2;\n  let [start69, end69] = interval1;\n  let [start70, end70] = interval2;\n  let [start71, end71] = interval1;\n  let [start72, end72] = interval2;\n  let [start73, end73] = interval1;\n  let [start74, end74] = interval2;\n  let [start75, end75] = interval1;\n  let [start76, end76] = interval2;\n  let [start77, end77] = interval1;\n  let [start78, end78] = interval2;\n  let [start79, end79] = interval1;\n  let [start80, end80] = interval2;\n  let [start81, end81] = interval1;\n  let [start82, end82] = interval2;\n  let [start83, end83] = interval1;\n  let [start84, end84] = interval2;\n  let [start85, end85] = interval1;\n  let [start86, end86] = interval2;\n  let [start87, end87] = interval1;\n  let [start88, end88] = interval2;\n  let [start89, end89] = interval1;\n  let [start90, end90] = interval2;\n  let [start91, end91] = interval1;\n  let [start92, end92] = interval2;\n  let [start93, end93] = interval1;\n  let [start94, end94] = interval2;\n  let [start95, end95] = interval1;\n  let [start96, end96] = interval2;\n  let [start97, end97] = interval1;\n  let [start98, end98] = interval2;\n  let [start99, end99] = interval1;\n  let [start100, end100] = interval2;\n  let [start101, end101] = interval1;\n  let [start102, end102] = interval2;\n  let [start103, end103] = interval1;\n  let [start104, end104] = interval2;\n  let [start105, end105] = interval1;\n  let [start106, end106] = interval2;\n  let [start107, end107] = interval1;\n  let [start108, end108] = interval2;\n  let [start109, end109] = interval1;\n  let [start110, end110] = interval2;\n  let [start111, end111] = interval1;\n  let [start112, end112] = interval2;\n  let [start113, end113] = interval1;\n  let [start114, end114] = interval2;\n  let [start115, end115] = interval1;\n  let [start116, end116] = interval2;\n  let [start117, end117] = interval1;\n  let [start118, end118] = interval2;\n  let [start119, end119] = interval1;\n  let [start120, end120] = interval2;\n  let [start121, end121] = interval1;\n  let [start122, end122] = interval2;\n  let [start123, end123] = interval1;\n  let [start124, end124] = interval2;\n  let [start125, end125] = interval1;\n  let [start126, end126] = interval2;\n  let [start127, end", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  yOu ARe givEn AN ARray arr oF IntegErs aNd You nEed to return\n  sum oF MaGNiTudEs Of InTegErs MULtiPLIeD by proDUct of alL SiGns\n  OF EAch NUmbER in THe ARrAy, RepresEnTeD by 1, -1 oR 0.\n  nOTE: return nULl for empty arr.\n\n  eXampLe:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let i;\n  let j;\n  let k;\n  let l;\n  let arrLen = arr.length;\n  let arrSign;\n  let arrSignLen = arrSign.length;\n  let arrSignSign;\n  let arrSignSignLen = arrSignSign.length;\n  let arrSignSignSign;\n  let arrSignSignSignLen = arrSignSignSign.length;\n  let arrSignSignSignSign;\n  let arrSignSignSignSignLen = arrSignSignSignSign.length;\n  let arrSignSignSignSignSignLen = arrSignSignSignSignSign.length;\n  let arrSignSignSignSignSignLen = arrSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSignSignSignSignSignLen = arrSignSignSignSignSignSignSign.length;\n  let arrSignSign", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  gIvEN a grid witH N ROWS and N COlumnS (N >= 2) anD a PosiTive integER k, \n  eACh CelL oF tHe grid ConTaiNS A vaLUE. EVery inTEger in the RAnGe [1, N * n]\n  INCluSIve APPEaRS eXaCtly onCe On The cELLS Of THe grid.\n\n  You have tO Find The minimUm pAth oF lEngTH k in the grid. YOU cAn Start\n  fRoM any cELl, and in Each SteP you CAn mOVe to any Of THe neIgHBoR celLS,\n  in otheR Words, you Can gO to ceLls wHICh Share aN edGe WITH you cuRrent\n  ceLl.\n  PleaSe note THAt a path Of LEngth k meANs visITINg exACTlY k cellS (nOT\n  NECEsSarily distincT).\n  YoU cAnNOT Go oFf ThE grid.\n  a paTh A (oF length k) is cOnsIderEd LesS thAn a path B (of lEngth k) IF\n  AfteR makIng tHe OrDered LisTs of tHe valUEs oN the cElLs THAt a aNd b GO\n  throUGh (lET's CaLl thEm LsT_A AND LSt_B), lsT_a is leXicogRAPhically LESS\n  tHaN lst_b, in OtHER wordS, TheRe exiST an iNTeger iNdex i (1 <= i <= k)\n  sUch THAT lSt_a[I] < lst_B[I] And foR aNy j (1 <= j < i) we HavE\n  lsT_A[j] = lsT_b[j].\n  IT iS guaRaNteeD tHat The aNsweR IS unIque.\n  RetUrN An ORDeReD list oF the ValueS oN the ceLls thaT THE MInImuM paTh GO tHRoUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a grid witH N ROWS and N COlumnS (N >= 2) anD a PosiTive integER k, \n  eACh CelL oF tHe grid ConTaiNS A vaLUE. EVery inTEger in the RAnGe [1, N * n]\n  INCluSIve APPEaRS eXaCtly onCe On The cELLS Of THe grid.\n\n  You have tO Find The minimUm pAth oF lEngTH k in the grid. YOU cAn Start\n  fRoM any cELl, and in Each SteP you CAn mOVe to any Of THe neIgHBoR celLS,\n  in otheR Words, you Can gO to ceLls wHICh Share aN edGe WITH you cuRrent\n  ceLl.\n  PleaSe note THAt a path Of LEngth k meANs visITINg exACTlY k cellS (nOT\n  NECEsSarily distincT).\n  YoU cAnNOT Go oFf ThE grid.\n  a paTh A (oF length k) is cOnsIderEd LesS thAn a path B (of lEngth k) IF\n  AfteR makIng tHe OrDered LisTs of tHe valUEs oN the cElLs THAt a aNd b GO\n  throUGh (lET's CaLl thEm LsT_A AND LSt_B), lsT_a is leXicogRAPhically LESS\n  tHaN lst_b, in OtHER wordS, TheRe exiST an iNTeger iNdex i (1 <= i <= k)\n  sUch THAT lSt_a[I] < lst_B[I] And foR aNy j (1 <= j < i) we HavE\n  lsT_A[j] = lsT_b[j].\n  IT iS guaRaNteeD tHat The aNsweR IS unIque.\n  RetUrN An ORDeReD list oF the ValueS oN the ceLls thaT THE MInImuM paTh GO tHRoUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* rEtURn a greAtEST CommoN DivisOr of TwO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* rEtURn a greAtEST CommoN DivisOr of TwO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n  const aIsZero = a === 0\n  const bIsZero = b === 0\n  const aIsOne = a === 1\n  const bIsOne = b === 1\n  const aIsTwo = a === 2\n  const bIsTwo = b === 2\n  const aIsThree = a === 3\n  const bIsThree = b === 3\n  const aIsFour = a === 4\n  const bIsFour = b === 4\n  const aIsFive = a === 5\n  const bIsFive = b === 5\n  const aIsSix = a === 6\n  const bIsSix = b === 6\n  const aIsSeven = a === 7\n  const bIsSeven = b === 7\n  const aIsEight = a === 8\n  const bIsEight = b === 8\n  const aIsNine = a === 9\n  const bIsNine = b === 9\n  const aIsTen = a === 10\n  const bIsTen = b === 10\n  const aIsEleven = a === 11\n  const bIsEleven = b === 11\n  const aIsTwelve = a === 12\n  const bIsTwelve = b === 12\n  const aIsThirteen = a === 13\n  const bIsThirteen = b === 13\n  const aIsFourteen = a === 14\n  const bIsFourteen = b === 14\n  const aIsFifteen = a === 15\n  const bIsFifteen = b === 15\n  const aIsSixteen = a === 16\n  const bIsSixteen = b === 16\n  const aIsSeventeen = a === 17\n  const bIsSeventeen = b === 17\n  const aIsEighteen = a === 18\n  const bIsEighteen = b === 18\n  const aIsNineteen = a === 19\n  const bIsNineteen = b === 19\n  const aIsTwenty = a === 20\n  const bIsTwenty = b === 20\n  const aIsThirty = a === 21\n  const bIsThirty = b === 21\n  const aIsForty = a === 22\n  const bIsForty = b === 22\n  const aIsFifty = a === 23\n  const bIsFifty = b === 23\n  const aIsSixty = a === 24\n  const bIsSixty = b === 24\n  const aIsSeventy = a === 25\n  const bIsSeventy = b === 25\n  const aIsEighty = a === 26\n  const bIsEighty = b === 26\n  const aIsNinety = a === 27\n  const bIsNinety = b === 27\n  const aIsTwentyOne = a === 28\n  const bIsTwentyOne = b === 28\n  const aIsTwentyTwo = a === 29\n  const bIsTwentyTwo = b === 29\n  const aIsTwentyThree = a === 30\n  const bIsTwentyThree = b === 30\n  const aIsTwentyFour = a === 31\n  const bIsTwentyFour = b === 31\n  const aIsTwentyFive = a === 32\n  const bIsTwentyFive = b === 32\n  const aIsTwentySix = a === 33\n  const bIsTwentySix = b === 33\n  const aIsTwentySeven = a === 34\n  const bIsTwentySeven = b === 34\n  const aIsTwentyEight = a === 35\n  const bIsTwentyEight = b === 35\n  const aIsTwentyNine = a === 36\n  const bIsTwentyNine = b === 36\n  const aIsThirtyOne = a === 37\n  const bIsThirtyOne = b === 37\n  const aIsThirtyTwo = a === 38\n  const bIsThirtyTwo = b === 38\n  const aIsThirtyThree = a === 39\n  const bIsThirtyThree = b === 39\n  const aIsThirtyFour = a === 40\n  const bIsThirtyFour = b === 40\n  const aIsThirtyFive = a === 41\n  const bIsThirtyFive = b === 41\n  const aIsThirtySix = a === 42\n  const bIsThirtySix = b === 42\n  const aIsThirtySeven = a === 43\n  const bIsThirtySeven = b === 43\n  const aIsThirtyEight = a === 44\n  const bIsThirtyEight = b === 44\n  const aIsThirtyNine = a === 45\n  const bIsThirtyNine = b === 45\n  const aIsFourtyOne = a === 46\n  const bIsFourtyOne = b === 46\n  const aIsFourtyTwo = a === 47\n  const bIsFourtyTwo = b === 47\n  const aIsFourtyThree = a === 48\n  const bIsFourtyThree = b === 48\n  const aIsFourtyFour = a === 49\n  const bIsFourtyFour = b === 49\n  const aIsFourtyFive = a === 50\n  const bIsFourtyFive = b === 50\n  const aIsFourtySix = a === 51\n  const bIsFourtySix = b === 51\n  const aIsFourtySeven = a === 52\n  const bIsFourtySeven = b === 52\n  const aIsFourtyEight = a === 53\n  const bIsFourtyEight = b === 53\n  const aIsFourtyNine = a === 54\n  const bIsFourtyNine = b === 54\n  const aIsFiftyOne = a === 55\n  const bIsFiftyOne = b === 55\n  const aIsFiftyTwo = a === 56\n  const bIsFiftyTwo = b === 56\n  const aIsFiftyThree = a === 57\n  const bIsFiftyThree = b === 57\n  const aIsFiftyFour = a === 58\n  const bIsFiftyFour = b === 58\n  const aIsFiftyFive = a === 59\n  const bIsFiftyFive = b === 59\n  const aIsFiftySix = a === 60\n  const bIsFiftySix = b === 60\n  const aIsFiftySeven = a === 61\n  const bIsFiftySeven = b === 61\n  const aIsFiftyEight = a === 62\n  const bIsFiftyEight = b === 62\n  const aIsFiftyNine = a === 63\n  const bIsFiftyNine = b === 63\n  const aIsSixtyOne = a === 64\n  const bIsSixtyOne = b === 64\n  const aIsSixtyTwo = a === 65\n  const bIsSixtyTwo = b === 65\n  const aIsSixtyThree = a === 66\n  const bIsSixtyThree = b === 66\n  const aIsSixtyFour = a === 67\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*EVErYOne knOwS fIBonacCI sequEnce, It Was sTudied deePLy BY mAthEmAtIcIanS in \n  thE LAst COUpLe centURies. HowEVeR, whAT PEopLE doN'T KNoW Is trIbonacCi SeQuenCE.\n  tRIbONacci sequeNCe is Defined bY thE recUrRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is EVeN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*EVErYOne knOwS fIBonacCI sequEnce, It Was sTudied deePLy BY mAthEmAtIcIanS in \n  thE LAst COUpLe centURies. HowEVeR, whAT PEopLE doN'T KNoW Is trIbonacCi SeQuenCE.\n  tRIbONacci sequeNCe is Defined bY thE recUrRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is EVeN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  let i = 1;\n  let j = 1;\n  let k = n;\n  while (i <= k) {\n    if (i === k) {\n      result.push(i);\n    }\n    result.push(j);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Returns the number of ways to arrange the digits 1 to n in ascending order.\n  For example, given n = 4, the function should return 3.\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n) space complexity?\n  Follow up: Could you solve it in O(n) time complexity?\n  Follow up: Could you solve it in O(n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Odd digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIVeN A posiTiVE INtegeR n, return The prOducT oF the Odd digits.\n  Return 0 IF aLL digits aRe eVeN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let nn = n.toString()\n  let nd = nnn.length\n  let nd = nd % 2\n  let nd = nd? nn : nn[0]\n  let nd = nd? nd : nn[1]\n  let nd = nd? nd : nn[2]\n  let nd = nd? nd : nn[3]\n  let nd = nd? nd : nn[4]\n  let nd = nd? nd : nn[5]\n  let nd = nd? nd : nn[6]\n  let nd = nd? nd : nn[7]\n  let nd = nd? nd : nn[8]\n  let nd = nd? nd : nn[9]\n  let nd = nd? nd : nn[10]\n  let nd = nd? nd : nn[11]\n  let nd = nd? nd : nn[12]\n  let nd = nd? nd : nn[13]\n  let nd = nd? nd : nn[14]\n  let nd = nd? nd : nn[15]\n  let nd = nd? nd : nn[16]\n  let nd = nd? nd : nn[17]\n  let nd = nd? nd : nn[18]\n  let nd = nd? nd : nn[19]\n  let nd = nd? nd : nn[20]\n  let nd = nd? nd : nn[21]\n  let nd = nd? nd : nn[22]\n  let nd = nd? nd : nn[23]\n  let nd = nd? nd : nn[24]\n  let nd = nd? nd : nn[25]\n  let nd = nd? nd : nn[26]\n  let nd = nd? nd : nn[27]\n  let nd = nd? nd : nn[28]\n  let nd = nd? nd : nn[29]\n  let nd = nd? nd : nn[30]\n  let nd = nd? nd : nn[31]\n  let nd = nd? nd : nn[32]\n  let nd = nd? nd : nn[33]\n  let nd = nd? nd : nn[34]\n  let nd = nd? nd : nn[35]\n  let nd = nd? nd : nn[36]\n  let nd = nd? nd : nn[37]\n  let nd = nd? nd : nn[38]\n  let nd = nd? nd : nn[39]\n  let nd = nd? nd : nn[40]\n  let nd = nd? nd : nn[41]\n  let nd = nd? nd : nn[42]\n  let nd = nd? nd : nn[43]\n  let nd = nd? nd : nn[44]\n  let nd = nd? nd : nn[45]\n  let nd = nd? nd : nn[46]\n  let nd = nd? nd : nn[47]\n  let nd = nd? nd : nn[48]\n  let nd = nd? nd : nn[49]\n  let nd = nd? nd : nn[50]\n  let nd = nd? nd : nn[51]\n  let nd = nd? nd : nn[52]\n  let nd = nd? nd : nn[53]\n  let nd = nd? nd : nn[54]\n  let nd = nd? nd : nn[55]\n  let nd = nd? nd : nn[56]\n  let nd = nd? nd : nn[57]\n  let nd = nd? nd : nn[58]\n  let nd = nd? nd : nn[59]\n  let nd = nd? nd : nn[60]\n  let nd = nd? nd : nn[61]\n  let nd = nd? nd : nn[62]\n  let nd = nd? nd : nn[63]\n  let nd = nd? nd : nn[64]\n  let nd = nd? nd : nn[65]\n  let nd = nd? nd : nn[66]\n  let nd = nd? nd : nn[67]\n  let nd = nd? nd : nn[68]\n  let nd = nd? nd : nn[69]\n  let nd = nd? nd : nn[70]\n  let nd = nd? nd : nn[71]\n  let nd = nd? nd : nn[72]\n  let nd = nd? nd : nn[73]\n  let nd = nd? nd : nn[74]\n  let nd = nd? nd : nn[75]\n  let nd = nd? nd : nn[76]\n  let nd = nd? nd : nn[77]\n  let nd = nd? nd : nn[78]\n  let nd = nd? nd : nn[79]\n  let nd = nd? nd : nn[80]\n  let nd = nd? nd : nn[81]\n  let nd = nd? nd : nn[82]\n  let nd = nd? nd : nn[83]\n  let nd = nd? nd : nn[84]\n  let nd = nd? nd : nn[85]\n  let nd = nd? nd : nn[86]\n  let nd = nd? nd : nn[87]\n  let nd = nd? nd : nn[88]\n  let nd = nd? nd : nn[89]\n  let nd = nd? nd : nn[90]\n  let nd = nd? nd : nn[91]\n  let nd = nd? nd : nn[92]\n  let nd = nd? nd : nn[93]\n  let nd = nd? nd : nn[94]\n  let nd = nd? nd : nn[95]\n  let nd = nd? nd : nn[96]\n  let nd = nd? nd : nn[97]\n  let nd = nd? nd : nn[98]\n  let nd = nd? nd : nn[99]\n  let nd = nd? nd : nn[100]\n  let nd = nd? nd : nn[101]\n  let nd = nd? nd : nn[102]\n  let nd = nd? nd : nn[103]\n  let nd = nd? nd : nn[104]\n  let nd = nd? nd : nn[105]\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  cReATe a fuNcTION that TAkes a string As inPuT whiCh containS OnLY sQuaRe BrAcKetS.\n  ThE FUncTIOn Should return TRue if anD OnLy iF THEre IS a vALID sUBsEqUence oF bRaCketS\n  WHERe AT least one bRAckeT in the subsEquEnce Is NesTEd.\n  isNested('[[]]') ➞ truE\n  isNested('[]]]]]]][[[[[]') ➞ FaLsE\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ FaLse\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\nConsT isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  cReATe a fuNcTION that TAkes a string As inPuT whiCh containS OnLY sQuaRe BrAcKetS.\n  ThE FUncTIOn Should return TRue if anD OnLy iF THEre IS a vALID sUBsEqUence oF bRaCketS\n  WHERe AT least one bRAckeT in the subsEquEnce Is NesTEd.\n  isNested('[[]]') ➞ truE\n  isNested('[]]]]]]][[[[[]') ➞ FaLsE\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ FaLse\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\nConsT isNested = (string) => {\n  const re = /\\[([[]|[][]|[][][]|[][][][]|[][][][][]|[][][][][][]|[][][][][][][]|[][][][][][][][]|[][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][]|[][][][][][][][][][][][]|[][][][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][]|[][][][][][][][][][]|[][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][]|[][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][]|[][][][][][][]|[][][][][][][]|[][][][][][][]|[][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][][]|[][][][][][][]|[][][][][][][]|[][][][][][][]|[][][][][][][]|[][][][][][][]|[][][][][][][]|[][][][][][]|[][][][][][]|[][][][][][]|", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*YOU aRE giveN a list OF NUmberS.\n  you neEd to return ThE sum Of squared NUmBErS in thE gIvEn list,\n  RouNd eACH elEMEnT in the list to THe upper int(Ceiling) FIrSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU aRE giveN a list OF NUmberS.\n  you neEd to return ThE sum Of squared NUmBErS in thE gIvEn list,\n  RouNd eACH elEMEnT in the list to THe upper int(Ceiling) FIrSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n    sumSquare += Math.pow(lst[i], 2);\n  }\n  return sum * sumSquare;\n};\n\n/*\n  You have to return an Array with all the possible combinations of an Array\n  of Numbers.\n  Examples:\n  arr = [1,2,3,4,5,6,7,8,9,10]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [1,2,3,4,5,6,7,8,9]\n  arr = [", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* cReATe a fuNcTION that REturnS truE iF the Last charaCTeR\n  Of A giVeN sTrIng Is aN ALphABEtIcal chARacter aND iS noT\n  A PArt OF a wORD, AnD FaLsE otherWiSe.\n  note: \"WORD\" Is A Group of chaRActeRs separaTed By spAcE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' || lastChar === '\\t' || lastChar === '\\n' || lastChar === '\\r';\n};\n\n/**\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALetterWithSpaces\n  checkIfLastCharIsALet", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*CREaTE a funCtION Which REturnS the LaRgesT index of aN ElEMeNt wHiCh\n  Is Not GreATEr tHAN oR equal TO the eleMEnT imMEDIatELy pRECEdINg It. if\n  no suCh ElEmenT EXIStS Then return -1. The givEN arrAy will noT coNtaiN\n  dUplICate vALuEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CREaTE a funCtION Which REturnS the LaRgesT index of aN ElEMeNt wHiCh\n  Is Not GreATEr tHAN oR equal TO the eleMEnT imMEDIatELy pRECEdINg It. if\n  no suCh ElEmenT EXIStS Then return -1. The givEN arrAy will noT coNtaiN\n  dUplICate vALuEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* cReATe a funCtION That rETurns a tuple (a, b), WherE 'a' iS\n  the Largest of NEgATiVe iNtEgErS, anD 'b' is THE smALLeSt\n  of poSItive inTEgErs in a list.\n  iF THerE Is nO NEGaTIvE oR positIvE iNtegERS, return THeM As null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* cReATe a funCtION That rETurns a tuple (a, b), WherE 'a' iS\n  the Largest of NEgATiVe iNtEgErS, anD 'b' is THE smALLeSt\n  of poSItive inTEgErs in a list.\n  iF THerE Is nO NEGaTIvE oR positIvE iNtegERS, return THeM As null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxSmallest = null;\n  let maxVal = null;\n  let maxIndex = null;\n  let maxIndex2 = null;\n  let maxIndex3 = null;\n  let maxIndex4 = null;\n  let maxIndex5 = null;\n  let maxIndex6 = null;\n  let maxIndex7 = null;\n  let maxIndex8 = null;\n  let maxIndex9 = null;\n  let maxIndex10 = null;\n  let maxIndex11 = null;\n  let maxIndex12 = null;\n  let maxIndex13 = null;\n  let maxIndex14 = null;\n  let maxIndex15 = null;\n  let maxIndex16 = null;\n  let maxIndex17 = null;\n  let maxIndex18 = null;\n  let maxIndex19 = null;\n  let maxIndex20 = null;\n  let maxIndex21 = null;\n  let maxIndex22 = null;\n  let maxIndex23 = null;\n  let maxIndex24 = null;\n  let maxIndex25 = null;\n  let maxIndex26 = null;\n  let maxIndex27 = null;\n  let maxIndex28 = null;\n  let maxIndex29 = null;\n  let maxIndex30 = null;\n  let maxIndex31 = null;\n  let maxIndex32 = null;\n  let maxIndex33 = null;\n  let maxIndex34 = null;\n  let maxIndex35 = null;\n  let maxIndex36 = null;\n  let maxIndex37 = null;\n  let maxIndex38 = null;\n  let maxIndex39 = null;\n  let maxIndex40 = null;\n  let maxIndex41 = null;\n  let maxIndex42 = null;\n  let maxIndex43 = null;\n  let maxIndex44 = null;\n  let maxIndex45 = null;\n  let maxIndex46 = null;\n  let maxIndex47 = null;\n  let maxIndex48 = null;\n  let maxIndex49 = null;\n  let maxIndex50 = null;\n  let maxIndex51 = null;\n  let maxIndex52 = null;\n  let maxIndex53 = null;\n  let maxIndex54 = null;\n  let maxIndex55 = null;\n  let maxIndex56 = null;\n  let maxIndex57 = null;\n  let maxIndex58 = null;\n  let maxIndex59 = null;\n  let maxIndex60 = null;\n  let maxIndex61 = null;\n  let maxIndex62 = null;\n  let maxIndex63 = null;\n  let maxIndex64 = null;\n  let maxIndex65 = null;\n  let maxIndex66 = null;\n  let maxIndex67 = null;\n  let maxIndex68 = null;\n  let maxIndex69 = null;\n  let maxIndex70 = null;\n  let maxIndex71 = null;\n  let maxIndex72 = null;\n  let maxIndex73 = null;\n  let maxIndex74 = null;\n  let maxIndex75 = null;\n  let maxIndex76 = null;\n  let maxIndex77 = null;\n  let maxIndex78 = null;\n  let maxIndex79 = null;\n  let maxIndex80 = null;\n  let maxIndex81 = null;\n  let maxIndex82 = null;\n  let maxIndex83 = null;\n  let maxIndex84 = null;\n  let maxIndex85 = null;\n  let maxIndex86 = null;\n  let maxIndex87 = null;\n  let maxIndex88 = null;\n  let maxIndex89 = null;\n  let maxIndex90 = null;\n  let maxIndex91 = null;\n  let maxIndex92 = null;\n  let maxIndex93 = null;\n  let maxIndex94 = null;\n  let maxIndex95 = null;\n  let maxIndex96 = null;\n  let maxIndex97 = null;\n  let maxIndex98 = null;\n  let maxIndex99 = null;\n  let maxIndex100 = null;\n  let maxIndex101 = null;\n  let maxIndex102 = null;\n  let maxIndex103 = null;\n  let maxIndex104 = null;\n  let maxIndex105 = null;\n  let maxIndex106 = null;\n  let maxIndex107 = null;\n  let maxIndex108 = null;\n  let maxIndex109 = null;\n  let maxIndex110 = null;\n  let maxIndex111 = null;\n  let maxIndex112 = null;\n  let maxIndex113 = null;\n  let maxIndex114 = null;\n  let maxIndex115 = null;\n  let maxIndex116 = null;\n  let maxIndex117 = null;\n  let maxIndex118 = null;\n  let maxIndex119 = null;\n  let maxIndex120 = null;\n  let maxIndex121 = null;\n  let maxIndex122 = null;\n  let maxIndex123 = null;\n  let maxIndex124 = null;\n  let maxIndex125 = null;\n  let maxIndex126 = null;\n  let maxIndex127 = null;\n  let maxIndex128 = null;\n  let maxIndex129 = null;\n  let maxIndex130 = null;\n  let maxIndex131 = null;\n  let maxIndex132 = null;\n  let maxIndex133 = null;\n  let maxIndex134 = null;\n  let maxIndex135 = null;\n  let maxIndex136 = null;\n  let maxIndex137 = null;\n  let maxIndex138 = null;\n  let maxIndex139 = null;\n  let maxIndex140 = null;\n  let maxIndex141 = null;\n  let maxIndex142 = null;\n  let maxIndex143 = null;\n  let maxIndex144 = null;\n  let maxIndex145 = null;\n  let maxIndex146 = null;\n  let maxIndex147 = null;\n  let maxIndex148 = null;\n  let maxIndex149 = null;\n  let maxIndex150 = null;\n  let maxIndex151 = null;\n  let maxIndex152 = null;\n  let maxIndex153 = null;\n  let maxIndex154 = null;\n  let maxIndex155 = null;\n  let maxIndex156 = null;\n  let maxIndex157 = null;\n  let maxIndex158 = null;\n  let maxIndex159 = null;\n  let maxIndex160 = null;\n  let maxIndex161 = null;\n  let maxIndex162 = null;\n  let maxIndex163 = null;\n  let maxIndex164 = null;\n  let maxIndex165 = null;\n  let maxIndex166 = null;\n  let maxIndex167 = null;\n  let maxIndex168 = null;\n  let maxIndex169 = null;\n  let maxIndex170 = null;\n  let maxIndex171 = null;\n  let maxIndex172 = null;\n  let maxIndex173 = null;\n  let maxIndex174 = null;\n  let maxIndex175 = null;\n  let maxIndex176 = null;\n  let maxIndex177 = null;\n  let maxIndex178 = null;\n  let maxIndex179 = null;\n  let maxIndex180 = null;\n  let maxIndex181 = null;\n  let maxIndex182 = null;\n  let maxIndex183 = null;\n  let maxIndex184 = null;\n  let maxIndex185 = null;\n  let maxIndex186 = null;\n  let maxIndex187 = null;\n  let maxIndex188 = null;\n  let maxIndex189 = null;\n  let maxIndex190 = null;\n  let maxIndex191 = null;\n  let maxIndex192 = null;\n  let maxIndex193 = null;\n  let maxIndex194 = null;\n  let maxIndex195 = null;\n  let maxIndex196 = null;\n  let maxIndex197 = null;\n  let maxIndex198 = null;\n  let maxIndex199 = null;\n  let maxIndex200 = null;\n  let maxIndex201 = null;\n  let maxIndex202 = null;\n  let maxIndex203 = null;\n  let maxIndex204 = null;\n  let maxIndex205 = null;\n  let maxIndex206 = null;\n  let maxIndex207 = null;\n  let maxIndex208 = null;\n  let maxIndex209 = null;\n  let maxIndex210 = null;\n  let maxIndex211 = null;\n  let maxIndex212 = null;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ Null\n  */\nCOnsT compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ Null\n  */\nCOnsT compareOne = (a, b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  return 0;\n};\n\n/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE. or,\n\n  compareTwo(1, 2.5) ➞ 2\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ Null\n  */\nCOnsT compareTwo = (a, b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  return 0;\n};\n\n/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE. or,\n\n  compareThree(1, 2.5) ➞ 3\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ Null\n  */\nCOnsT compareThree = (a, b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  return 0;\n};\n\n/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE. or,\n\n  compareFour(1, 2.5) ➞ 4\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ Null\n  */\nCOnsT compareFour = (a, b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  return 0;\n};\n\n/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE. or,\n\n  compareFive(1, 2.5) ➞ 5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ Null\n  */\nCOnsT compareFive = (a, b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  return 0;\n};\n\n/*\n  cReATe a funCtION That tAKes inTegeRs, FloaTs, or strinGS rEPrEseNtInG\n  rEal NumBERs, aND ReTurns tHE larger VArIabLE in ITs gIVen VARIaBLe TyPe.\n  RetuRn NuLl if THE VAlUEs are equal.\n  nOte: IF a real numBer Is rePrEseNTed as a STrInG, the flOaTing pOInt miGht bE. or,\n\n  compareSix(1, 2.5) ➞ 6\n  compareSix(1, \"2,3\") ➞ \"2,3\"\n  compareSix(\"5,1\", \"6\") ➞ \"6\"\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n & 1;\n  const sumOdd = n >> 1;\n  return sumEven === sumOdd;\n};\n\n/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sumEven = n & 1;\n  const sumOdd = n >> 1;\n  return sumEven!== sumOdd;\n};\n\n/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEven(5) == true\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(9) == false\n  */\nconst isEqualToSumEvenOrOdd = (n) => {\n  const sumEven = n & 1;\n  const sumOdd = n >> 1;\n  return sumEven!== sumOdd || sumEven === 0;\n};\n\n/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEvenOrOdd(5) == true\n  isEqualToSumEvenOrOdd(7) == true\n  isEqualToSumEvenOrOdd(9) == true\n  */\nconst isEqualToSumOddOrEven = (n) => {\n  const sumEven = n & 1;\n  const sumOdd = n >> 1;\n  return sumEven!== sumOdd || sumEven === 0;\n};\n\n/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEvenOrOdd(5) == true\n  isEqualToSumEvenOrOdd(7) == true\n  isEqualToSumEvenOrOdd(9) == true\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  const sumEven = n & 1;\n  const sumOdd = n >> 1;\n  return sumEven!== sumOdd || sumEven === 0 || sumOdd === 0;\n};\n\n/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEvenOrOddOrEven(5) == true\n  isEqualToSumEvenOrOddOrEven(7) == true\n  isEqualToSumEvenOrOddOrEven(9) == true\n  */\nconst isEqualToSumOddOrEvenOrEven = (n) => {\n  const sumEven = n & 1;\n  const sumOdd = n >> 1;\n  return sumEven!== sumOdd || sumEven === 0 || sumOdd === 0;\n};\n\n/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEvenOrOddOrEven(5) == true\n  isEqualToSumEvenOrOddOrEven(7) == true\n  isEqualToSumEvenOrOddOrEven(9) == true\n  */\nconst isEqualToSumOddOrEvenOrEven = (n) => {\n  const sumEven = n & 1;\n  const sumOdd = n >> 1;\n  return sumEven!== sumOdd || sumEven === 0 || sumOdd === 0;\n};\n\n/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEvenOrOddOrEven(5) == true\n  isEqualToSumEvenOrOddOrEven(7) == true\n  isEqualToSumEvenOrOddOrEven(9) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrEven = (n) => {\n  const sumEven = n & 1;\n  const sumOdd = n >> 1;\n  return sumEven!== sumOdd || sumEven === 0 || sumOdd === 0;\n};\n\n/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEvenOrOddOrEvenOrEven(5) == true\n  isEqualToSumEvenOrOddOrEvenOrEven(7) == true\n  isEqualToSumEvenOrOddOrEvenOrEven(9) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrEvenOrEven = (n) => {\n  const sumEven = n & 1;\n  const sumOdd = n >> 1;\n  return sumEven!== sumOdd || sumEven === 0 || sumOdd === 0;\n};\n\n/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEvenOrOddOrEvenOrEvenOrEven(5) == true\n  isEqualToSumEvenOrOddOrEvenOrEvenOrEven(7) == true\n  isEqualToSumEvenOrOddOrEvenOrEvenOrEven(9) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrEvenOrEvenOrEven = (n) => {\n  const sumEven = n & 1;\n  const sumOdd = n >> 1;\n  return sumEven!== sumOdd || sumEven === 0 || sumOdd === 0;\n};\n\n/*EVAlUAte whEtHER The giVEn numBer n cAn Be wrItten as thE SuM Of ExaCtLy 4 PoSitIve EVEn nUMBeRs\n  Example\n  isEqualToSumEvenOr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*THE BRAziliAn FACToriaL Is defIned As:\n  BrazIlian_factORiAL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  WheRe n > 0\n\n  foR eXamPle:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) return 1;\n  if (n <= 1) return n;\n  return n * n * n * n * n * n * n;\n};\n\n/*\n  Function: factorial\n  \n  Computes the factorial of a number or integer n.\n  \n  Parameters: \n  \n  n\n    The number or integer to be factored.\n  \n  Returns: \n  \n  The factorial of n.\n  \n  Notes: \n  \n  factorial(n) returns the factorial of n as an integer. \n  \n  factorial(n) will throw an error if n is negative.\n  \n  factorial(n) will throw an error if n is 0 or 1.\n  \n  factorial(n) will throw an error if n is greater than the maximum value \n  of n.\n  \n  factorial(n) will throw an error if n is less than the minimum value \n  of n.\n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is NaN or Infinity. \n  \n  factorial(n) will throw an error if n is ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* rEtURn list of aLl PREFixes FRom shOrteSt To loNgest of thE InPUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = []\n  let prefix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix === '-') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefix === '+') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefixes.length === 0) {\n      prefixes.push(prefix)\n    }\n    prefixes.push(prefix)\n    i++\n  }\n  return prefixes\n}\n\n/**\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = []\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    suffix = string.charAt(i)\n    if (suffix === '-') {\n      suffixes.push(suffix)\n      i++\n      continue\n    }\n    if (suffix === '+') {\n      suffixes.push(suffix)\n      i++\n      continue\n    }\n    if (suffixes.length === 0) {\n      suffixes.push(suffix)\n    }\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/**\n  >>> allSuffixes('abc')\n  ['ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  let prefixes = []\n  let suffixes = []\n  let prefix = ''\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix === '-') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefix === '+') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefixes.length === 0) {\n      prefixes.push(prefix)\n    }\n    prefixes.push(prefix)\n    i++\n  }\n  prefixes = prefixes.reverse()\n  suffixes = suffixes.reverse()\n  return prefixes.concat(suffixes)\n}\n\n/**\n  >>> allPrefixesAndSuffixes('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixes = (string) => {\n  let prefixes = []\n  let suffixes = []\n  let prefix = ''\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix === '-') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefix === '+') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefixes.length === 0) {\n      prefixes.push(prefix)\n    }\n    prefixes.push(prefix)\n    i++\n  }\n  prefixes = prefixes.reverse()\n  suffixes = suffixes.reverse()\n  return prefixes.concat(suffixes, prefixes)\n}\n\n/**\n  >>> allPrefixesAndSuffixesAndPrefixes('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndSuffixes = (string) => {\n  let prefixes = []\n  let suffixes = []\n  let prefix = ''\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix === '-') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefix === '+') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefixes.length === 0) {\n      prefixes.push(prefix)\n    }\n    prefixes.push(prefix)\n    i++\n  }\n  prefixes = prefixes.reverse()\n  suffixes = suffixes.reverse()\n  return prefixes.concat(suffixes, prefixes, suffixes)\n}\n\n/**\n  >>> allPrefixesAndSuffixesAndPrefixesAndSuffixes('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndSuffixesAndPrefixes = (string) => {\n  let prefixes = []\n  let suffixes = []\n  let prefix = ''\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix === '-') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefix === '+') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefixes.length === 0) {\n      prefixes.push(prefix)\n    }\n    prefixes.push(prefix)\n    i++\n  }\n  prefixes = prefixes.reverse()\n  suffixes = suffixes.reverse()\n  return prefixes.concat(suffixes, prefixes, suffixes, prefixes)\n}\n\n/**\n  >>> allPrefixesAndSuffixesAndPrefixesAndSuffixesAndPrefixes('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndSuffixesAndPrefixesAndSuffixes = (string) => {\n  let prefixes = []\n  let suffixes = []\n  let prefix = ''\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix === '-') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefix === '+') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefixes.length === 0) {\n      prefixes.push(prefix)\n    }\n    prefixes.push(prefix)\n    i++\n  }\n  prefixes = prefixes.reverse()\n  suffixes = suffixes.reverse()\n  return prefixes.concat(suffixes, prefixes, suffixes, prefixes, suffixes)\n}\n\n/**\n  >>> allPrefixesAndSuffixesAndPrefixesAndSuffixesAndPrefixesAndSuffixes('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndSuffixesAndPrefixesAndSuffixesAndPrefixes = (string) => {\n  let prefixes = []\n  let suffixes = []\n  let prefix = ''\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix === '-') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefix === '+') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefixes.length === 0) {\n      prefixes.push(prefix)\n    }\n    prefixes.push(prefix)\n    i++\n  }\n  prefixes = prefixes.reverse()\n  suffixes = suffixes.reverse()\n  return prefixes.concat(suffixes, prefixes, suffixes, prefixes, suffixes, prefixes)\n}\n\n/**\n  >>> allPrefixesAndSuffixesAndPrefixesAndSuffixesAndPrefixesAndSuffixesAndPrefixes('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndSuffixesAndPrefixesAndSuffixesAndPrefixesAndSuffixes = (string) => {\n  let prefixes = []\n  let suffixes = []\n  let prefix = ''\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix === '-') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefix === '+') {\n      prefixes.push(prefix)\n      i++\n      continue\n    }\n    if (prefixes.length === 0) {\n      prefixes.push(prefix)\n    }\n    prefixes.push(prefix)\n    i++", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /(^|\\s+)/g;\n  return text.replace(re,'');\n};\n\n/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /(^|\\s+)/g;\n  return text.replace(re,'');\n};\n\n/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /(^|\\s+)/g;\n  return text.replace(re,'');\n};\n\n/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /(^|\\s+)/g;\n  return text.replace(re,'');\n};\n\n/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /(^|\\s+)/g;\n  return text.replace(re,'');\n};\n\n/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /(^|\\s+)/g;\n  return text.replace(re,'');\n};\n\n/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /(^|\\s+)/g;\n  return text.replace(re,'');\n};\n\n/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /(^|\\s+)/g;\n  return text.replace(re,'');\n};\n\n/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n  AnD If A stRiNg HaS moRe tHAN 2 coNSEcUtive sPAces, \n  theN RePlaCE ALl cONseCUTIvE SpAcEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /(^|\\s+)/g;\n  return text.replace(re,'');\n};\n\n/*\n  gIvEN a strInG text, REPlace ALl spaCes in iT wIth uNderscoreS, \n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*CREaTE a funcTiON WHich tAKes a stRing RePresEnting a filE'S nAMe, And ReTuRnS\n  'YeS' if THE thE FIlE's name IS valid, aND rEtuRNS 'no' oTHerWISE.\n  A FIlE's Name is CoNsIderED TO Be VAlid if and oNLy if All the foLloWing CoNdiTIons \n  aRE mEt:\n  - there sHoUld noT Be morE thaN thRee dIGitS ('0'-'9') in The file'S nAMe.\n  - ThE fILe'S namE ContaINs exactlY one Dot '.'\n  - ThE subSTRiNg befoRe tHe DOT Should Not be emPty, and It starTS With a letTeR From \n  the LAtin aLPHApet ('a'-'z' AND 'A'-'z').\n  - The sUbSTRING aFter the dot shoUld BE oNe of TheSe: ['TxT', 'Exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CREaTE a funcTiON WHich tAKes a stRing RePresEnting a filE'S nAMe, And ReTuRnS\n  'YeS' if THE thE FIlE's name IS valid, aND rEtuRNS 'no' oTHerWISE.\n  A FIlE's Name is CoNsIderED TO Be VAlid if and oNLy if All the foLloWing CoNdiTIons \n  aRE mEt:\n  - there sHoUld noT Be morE thaN thRee dIGitS ('0'-'9') in The file'S nAMe.\n  - ThE fILe'S namE ContaINs exactlY one Dot '.'\n  - ThE subSTRiNg befoRe tHe DOT Should Not be emPty, and It starTS With a letTeR From \n  the LAtin aLPHApet ('a'-'z' AND 'A'-'z').\n  - The sUbSTRING aFter the dot shoUld BE oNe of TheSe: ['TxT', 'Exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_check = (file_name) => {\n    const file_name_check = file_name.trim().toLowerCase();\n    const file_name_check_array = file_name_check.split(\" \");\n    const file_name_check_array_length = file_name_check_array.length;\n    let file_name_check_array_index = 0;\n    let file_name_check_array_index_length = 0;\n    let file_name_check_array_index_length_length = 0;\n    let file_name_check_array_index_length_length_length = 0;\n    let file_name_check_array_index_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_length_length = 0;\n    let file_name_check_array_index_length_length_length_length_length_length_length_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  tHiS FunctIoN WILl takE A list of inTegeRs. for aLl entries in THe list, THe FunCtIoN sHalL sqUARe tHE InTeger eNTry if itS InDex IS A \n  MulTIplE OF 3 AnD WiLl Cube thE iNtEger ENTRY iF Its index is A MultIple of 4 anD noT a muLtIplE Of 3. The FUnCtIon wilL nOt \n  chaNGe the EntrIes in The list wHOse INdexes aRe NOt a mUlTIpLe of 3 OR 4. The fUNction shAll tHen return thE sum OF AlL entriEs. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  tHiS FunctIoN WILl takE A list of inTegeRs. for aLl entries in THe list, THe FunCtIoN sHalL sqUARe tHE InTeger eNTry if itS InDex IS A \n  MulTIplE OF 3 AnD WiLl Cube thE iNtEger ENTRY iF Its index is A MultIple of 4 anD noT a muLtIplE Of 3. The FUnCtIon wilL nOt \n  chaNGe the EntrIes in The list wHOse INdexes aRe NOt a mUlTIpLe of 3 OR 4. The fUNction shAll tHen return thE sum OF AlL entriEs. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  Sum of Square of Numbers\n  \n  Input: List of Numbers\n  Output: Sum of Square of Numbers\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  yOu ARe givEn A STRing rEPreseNtinG a sentence,\n  The sentence cOntains soME wORdS sePaRaTeD by A spACE,\n  anD YOu Have to return A String tHAt ConTAINs tHE woRDS FrOM tHe OriginAl sentence,\n  WhOse lENGTHs ARe prime numBErs,\n  tHe order oF thE worDs in The NEw strINg ShOuld be ThE same AS the oRigiNal One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  yOu ARe givEn ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*YOUr TAsk is To IMPLemenT a FunctIon tHaT wilL simplify the expreSSiON\n  x * n. THe fUnCtIoN reTurNS TruE IF x * n eValuatES to a wholE NuMbeR AND faLSe\n  oTHERwISe. boTh x and n, aRe StRing REPREsENtation of a fRActiOn, and havE thE folLoWinG FormaT,\n  <NuMeRator>/<dEnOminaTOr> wheRe boTh nUmerATor ANd denomInATor aRe POsItivE Whole NUmbers.\n\n  YoU can AssumE thaT x, ANd n Are valId fRaCTIOns, and Do not haVe zero As denoMINator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOUr TAsk is To IMPLemenT a FunctIon tHaT wilL simplify the expreSSiON\n  x * n. THe fUnCtIoN reTurNS TruE IF x * n eValuatES to a wholE NuMbeR AND faLSe\n  oTHERwISe. boTh x and n, aRe StRing REPREsENtation of a fRActiOn, and havE thE folLoWinG FormaT,\n  <NuMeRator>/<dEnOminaTOr> wheRe boTh nUmerATor ANd denomInATor aRe POsItivE Whole NUmbers.\n\n  YoU can AssumE thaT x, ANd n Are valId fRaCTIOns, and Do not haVe zero As denoMINator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconsT simplify = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {\n  let res = 0;\n  if (isNumber(x)) {\n    if (isNumber(n)) {\n      res = simplifyNumber(x, n);\n    }\n  }\n  return res;\n};\n\n/*\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = FAlse\n  simplify(\"7/10\", \"10/2\") = falSE\n  */\nconst simplifyNumber = (x, n) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b)\n  return numsArr.map((num) => num * -1)\n}\n\n/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b)\n  return numsArr.map((num) => num * -1)\n}\n\n/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b)\n  return numsArr.map((num) => num * -1)\n}\n\n/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b)\n  return numsArr.map((num) => num * -1)\n}\n\n/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b)\n  return numsArr.map((num) => num * -1)\n}\n\n/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b)\n  return numsArr.map((num) => num * -1)\n}\n\n/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b)\n  return numsArr.map((num) => num * -1)\n}\n\n/*\n  wRiTE a funCtION Which SOrts tHe giVeN list of iNtegers\n  in asCEnDInG orDeR aCcOrdIng TO The SUM oF their DIgits.\n  NoTE: iF thERE Are SEveRAL ItEMs WiTh simiLaR sUm of THEIR dIGits,\n  order tHEm baSed on theIr iNdex in OrIgiNAl list.\n\n  For EXaMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*WRItE A funcTiON THat taKEs an aRray Of NumbErs as inpuT AnD ReTurNs \n  ThE nUmbEr oF ELemENTs in The arrAY that arE GrEatER THan 10 ANd bOTH \n  FiRSt AnD last dIgItS of a NUMBEr ARe odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*WRItE A funcTiON THat taKEs an aRray Of NumbErs as inpuT AnD ReTurNs \n  ThE nUmbEr oF ELemENTs in The arrAY that arE GrEatER THan 10 ANd bOTH \n  FiRSt AnD last dIgItS of a NUMBEr ARe odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filter = 0;\n  let sum = 0;\n  let count = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268 = 0;\n  let sum269 = 0;\n  let sum270 = 0;\n  let sum271 = 0;\n  let sum272 = 0;\n  let sum273 = 0;\n  let sum274 = 0;\n  let sum275 = 0;\n  let sum276 = 0;\n  let sum277 = 0;\n  let sum278 = 0;\n  let sum279 = 0;\n  let sum280", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [1, 3, 7, 13, 21];\n  let maxTriples = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] > maxTriples) {\n      maxTriples = a[i];\n    }\n  }\n  return maxTriples;\n};\n\n/**\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  const a = [1, 3, 7, 13, 21];\n  let maxTriples = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] > maxTriples) {\n      maxTriples = a[i];\n    }\n  }\n  return maxTriples;\n};\n\n/**\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  const a = [1, 3, 7, 13, 21];\n  let maxTriples = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] > maxTriples) {\n      maxTriples = a[i];\n    }\n  }\n  return maxTriples;\n};\n\n/**\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  const a = [1, 3, 7, 13, 21];\n  let maxTriples = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] > maxTriples) {\n      maxTriples = a[i];\n    }\n  }\n  return maxTriples;\n};\n\n/**\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  const a = [1, 3, 7, 13, 21];\n  let maxTriples = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] > maxTriples) {\n      maxTriples = a[i];\n    }\n  }\n  return maxTriples;\n};\n\n/**\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  AnD a[i] + a[J] + A[K] IS a MUltiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  const a = [1, 3, 7, 13, 21];\n  let maxTriples = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] > maxTriples) {\n      maxTriples = a[i];\n    }\n  }\n  return maxTriples;\n};\n\n/**\n  yOu ARe givEn A POSitivE IntegEr n. YoU hAve tO create an INtEGeR arRaY a Of LenGth n.\n      fOR eaCH i (1 ≤ i ≤ n), ThE value OF a[i] = i * i - i + 1.\n      RetuRN tHe nUMBEr oF TriPLES (a[I], A[j], A[k]) Of a wheRe i < j < k, \n  An", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* tHeRE are eIgHT PLanetS in Our soLar sYsTem: tHe closersT To THe sun\n  Is meRcUry, The NEXt oNE Is venus, tHEn Earth, mArS, JuPITEr, SATurN,\n  uRAnUS, NEpTune.\n  WrItE a FuncTION ThAT takes two pLAnet Names as sTriNgs planet1 aNd planet2.\n  the FUnctiON sHoUld return a tuple coNtAininG All plAnetS whOse oRBitS Are\n  locaTeD BetwEeN ThE orbIT of planet1 anD The orbit Of planet2, soRted bY\n  the PROxImity tO thE sUN.\n  tHe funcTion shoUld return an eMpty tuple if planet1 OR planet2\n  Are not cOrREct planET nameS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* tHeRE are eIgHT PLanetS in Our soLar sYsTem: tHe closersT To THe sun\n  Is meRcUry, The NEXt oNE Is venus, tHEn Earth, mArS, JuPITEr, SATurN,\n  uRAnUS, NEpTune.\n  WrItE a FuncTION ThAT takes two pLAnet Names as sTriNgs planet1 aNd planet2.\n  the FUnctiON sHoUld return a tuple coNtAininG All plAnetS whOse oRBitS Are\n  locaTeD BetwEeN ThE orbIT of planet1 anD The orbit Of planet2, soRted bY\n  the PROxImity tO thE sUN.\n  tHe funcTion shoUld return an eMpty tuple if planet1 OR planet2\n  Are not cOrREct planET nameS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Name = planet1.toUpperCase();\n  const planet2Name = planet2.toUpperCase();\n  const planet1Index = planet1Name.indexOf(\"E\");\n  const planet2Index = planet2Name.indexOf(\"E\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"N\");\n  const planet2Index = planet2Name.indexOf(\"N\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"S\");\n  const planet2Index = planet2Name.indexOf(\"S\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"U\");\n  const planet2Index = planet2Name.indexOf(\"U\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"V\");\n  const planet2Index = planet2Name.indexOf(\"V\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"W\");\n  const planet2Index = planet2Name.indexOf(\"W\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"X\");\n  const planet2Index = planet2Name.indexOf(\"X\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"Y\");\n  const planet2Index = planet2Name.indexOf(\"Y\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"Z\");\n  const planet2Index = planet2Name.indexOf(\"Z\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"A\");\n  const planet2Index = planet2Name.indexOf(\"A\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"B\");\n  const planet2Index = planet2Name.indexOf(\"B\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"C\");\n  const planet2Index = planet2Name.indexOf(\"C\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"D\");\n  const planet2Index = planet2Name.indexOf(\"D\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"E\");\n  const planet2Index = planet2Name.indexOf(\"E\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"F\");\n  const planet2Index = planet2Name.indexOf(\"F\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"G\");\n  const planet2Index = planet2Name.indexOf(\"G\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"H\");\n  const planet2Index = planet2Name.indexOf(\"H\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"I\");\n  const planet2Index = planet2Name.indexOf(\"I\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"J\");\n  const planet2Index = planet2Name.indexOf(\"J\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"K\");\n  const planet2Index = planet2Name.indexOf(\"K\");\n  const planet1Name = planet1Name.substring(0, planet1Index);\n  const planet2Name = planet2Name.substring(0, planet2Index);\n  const planet1Index = planet1Name.indexOf(\"L\");\n  const planet2Index = planet2Name.indexOf(\"L\");\n  const planet1Name = plan", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*WRItE A funcTiON THat acCEpts a list Of stRiNgs aS a parametER,\n  dELeTes ThE sTrIngS thAT HavE ODd LengthS From it,\n  aND rEtuRNS The REsuLTED list wITh A sOrted oRdEr,\n  the list iS ALWAyS A list of strings ANd neVer an arrAy oF numBeRs,\n  aND it maY CoNtAin dupLiCates.\n  tHe ordEr of The list ShouLD be AScendinG bY LengTh OF eAch wORd, and YOu\n  should return The list sOrted By thAT RuLe.\n  If twO woRdS HAVe the sAme lengTh, sort The list alpHABeticalLy.\n  tHe functIOn shoULD return A list of sTRInGs in sorTeD ORDER.\n  YOu may assume thAt aLL wOrds WilL hAvE The Same Length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*WRItE A funcTiON THat acCEpts a list Of stRiNgs aS a parametER,\n  dELeTes ThE sTrIngS thAT HavE ODd LengthS From it,\n  aND rEtuRNS The REsuLTED list wITh A sOrted oRdEr,\n  the list iS ALWAyS A list of strings ANd neVer an arrAy oF numBeRs,\n  aND it maY CoNtAin dupLiCates.\n  tHe ordEr of The list ShouLD be AScendinG bY LengTh OF eAch wORd, and YOu\n  should return The list sOrted By thAT RuLe.\n  If twO woRdS HAVe the sAme lengTh, sort The list alpHABeticalLy.\n  tHe functIOn shoULD return A list of sTRInGs in sorTeD ORDER.\n  YOu may assume thAt aLL wOrds WilL hAvE The Same Length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sum = 0;\n  lst.forEach((item) => {\n    sum += item.length;\n  });\n  return sum;\n};\n\n/**\n  assert list_sort(lst) returns lst\n  assert list_sort([1,2,3]) => [1,2,3]\n  assert list_sort([1,2,3,4,5]) => [1,2,3,4,5]\n  assert list_sort([1,2,3,4,5,6]) => [1,2,3,4,5,6]\n  assert list_sort([1,2,3,4,5,6,7]) => [1,2,3,4,5,6,7]\n  assert list_sort([1,2,3,4,5,6,7,8]) => [1,2,3,4,5,6,7,8]\n  assert list_sort([1,2,3,4,5,6,7,8,9]) => [1,2,3,4,5,6,7,8,9]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11]) => [1,2,3,4,5,6,7,8,9,10,11]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12]) => [1,2,3,4,5,6,7,8,9,10,11,12]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13]) => [1,2,3,4,5,6,7,8,9,10,11,12,13]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n  assert list_sort([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) => [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* rEtURn a stRiNG COntaiNIng spAce-dElImitEd numbers STaRTiNg fRoM 0 uPtO n inCluSIVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* rEtURn a stRiNG COntaiNIng spAce-dElImitEd numbers STaRTiNg fRoM 0 uPtO n inCluSIVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/**\n  >>> stringToNumber(stringSequence('0'))\n  0\n  >>> stringToNumber(stringSequence('1'))\n  1\n  >>> stringToNumber(stringSequence('2'))\n  2\n  >>> stringToNumber(stringSequence('3'))\n  3\n  >>> stringToNumber(stringSequence('4'))\n  4\n  >>> stringToNumber(stringSequence('5'))\n  5\n  >>> stringToNumber(stringSequence('6'))\n  6\n  >>> stringToNumber(stringSequence('7'))\n  7\n  >>> stringToNumber(stringSequence('8'))\n  8\n  >>> stringToNumber(stringSequence('9'))\n  9\n  >>> stringToNumber(stringSequence('10'))\n  10\n  >>> stringToNumber(stringSequence('11'))\n  11\n  >>> stringToNumber(stringSequence('12'))\n  12\n  >>> stringToNumber(stringSequence('13'))\n  13\n  >>> stringToNumber(stringSequence('14'))\n  14\n  >>> stringToNumber(stringSequence('15'))\n  15\n  >>> stringToNumber(stringSequence('16'))\n  16\n  >>> stringToNumber(stringSequence('17'))\n  17\n  >>> stringToNumber(stringSequence('18'))\n  18\n  >>> stringToNumber(stringSequence('19'))\n  19\n  >>> stringToNumber(stringSequence('20'))\n  20\n  >>> stringToNumber(stringSequence('21'))\n  21\n  >>> stringToNumber(stringSequence('22'))\n  22\n  >>> stringToNumber(stringSequence('23'))\n  23\n  >>> stringToNumber(stringSequence('24'))\n  24\n  >>> stringToNumber(stringSequence('25'))\n  25\n  >>> stringToNumber(stringSequence('26'))\n  26\n  >>> stringToNumber(stringSequence('27'))\n  27\n  >>> stringToNumber(stringSequence('28'))\n  28\n  >>> stringToNumber(stringSequence('29'))\n  29\n  >>> stringToNumber(stringSequence('30'))\n  30\n  >>> stringToNumber(stringSequence('31'))\n  31\n  >>> stringToNumber(stringSequence('32'))\n  32\n  >>> stringToNumber(stringSequence('33'))\n  33\n  >>> stringToNumber(stringSequence('34'))\n  34\n  >>> stringToNumber(stringSequence('35'))\n  35\n  >>> stringToNumber(stringSequence('36'))\n  36\n  >>> stringToNumber(stringSequence('37'))\n  37\n  >>> stringToNumber(stringSequence('38'))\n  38\n  >>> stringToNumber(stringSequence('39'))\n  39\n  >>> stringToNumber(stringSequence('40'))\n  40\n  >>> stringToNumber(stringSequence('41'))\n  41\n  >>> stringToNumber(stringSequence('42'))\n  42\n  >>> stringToNumber(stringSequence('43'))\n  43\n  >>> stringToNumber(stringSequence('44'))\n  44\n  >>> stringToNumber(stringSequence('45'))\n  45\n  >>> stringToNumber(stringSequence('46'))\n  46\n  >>> stringToNumber(stringSequence('47'))\n  47\n  >>> stringToNumber(stringSequence('48'))\n  48\n  >>> stringToNumber(stringSequence('49'))\n  49\n  >>> stringToNumber(stringSequence('50'))\n  50\n  >>> stringToNumber(stringSequence('51'))\n  51\n  >>> stringToNumber(stringSequence('52'))\n  52\n  >>> stringToNumber(stringSequence('53'))\n  53\n  >>> stringToNumber(stringSequence('54'))\n  54\n  >>> stringToNumber(stringSequence('55'))\n  55\n  >>> stringToNumber(stringSequence('56'))\n  56\n  >>> stringToNumber(stringSequence('57'))\n  57\n  >>> stringToNumber(stringSequence('58'))\n  58\n  >>> stringToNumber(stringSequence('59'))\n  59\n  >>> stringToNumber(stringSequence('60'))\n  60\n  >>> stringToNumber(stringSequence('61'))\n  61\n  >>> stringToNumber(stringSequence('62'))\n  62\n  >>> stringToNumber(stringSequence('63'))\n  63\n  >>> stringToNumber(stringSequence('64'))\n  64\n  >>> stringToNumber(stringSequence('65'))\n  65\n  >>> stringToNumber(stringSequence('66'))\n  66\n  >>> stringToNumber(stringSequence('67'))\n  67\n  >>> stringToNumber(stringSequence('68'))\n  68\n  >>> stringToNumber(stringSequence('69'))\n  69\n  >>> stringToNumber(stringSequence('70'))\n  70\n  >>> stringToNumber(stringSequence('71'))\n  71\n  >>> stringToNumber(stringSequence('72'))\n  72\n  >>> stringToNumber(stringSequence('73'))\n  73\n  >>> stringToNumber(stringSequence('74'))\n  74\n  >>> stringToNumber(stringSequence('75'))\n  75\n  >>> stringToNumber(stringSequence('76'))\n  76\n  >>> stringToNumber(stringSequence('77'))\n  77\n  >>> stringToNumber(stringSequence('78'))\n  78\n  >>> stringToNumber(stringSequence('79'))\n  79\n  >>> stringToNumber(stringSequence('80'))\n  80\n  >>> stringToNumber(stringSequence('81'))\n  81\n  >>> stringToNumber(stringSequence('82'))\n  82\n  >>> stringToNumber(stringSequence('83'))\n  83\n  >>> stringToNumber(stringSequence('84'))\n  84\n  >>> stringToNumber(stringSequence('85'))\n  85\n  >>> stringToNumber(stringSequence('86'))\n  86\n  >>> stringToNumber(stringSequence('87'))\n  87\n  >>> stringToNumber(stringSequence('88'))\n  88\n  >>> stringToNumber(stringSequence('89'))\n  89\n  >>> stringToNumber(stringSequence('90'))\n  90\n  >>> stringToNumber(stringSequence('91'))\n  91\n  >>> stringToNumber(stringSequence('92'))\n  92\n  >>> stringToNumber(stringSequence('93'))\n  93\n  >>> stringToNumber(stringSequence('94'))\n  94\n  >>> stringToNumber(stringSequence('95'))\n  95\n  >>> stringToNumber(stringSequence('96'))\n  96\n  >>> stringToNumber(stringSequence('97'))\n  97\n  >>> stringToNumber(stringSequence('98'))\n  98\n  >>> stringToNumber(stringSequence('99'))\n  99\n  >>> stringToNumber(stringSequence('100'))\n  100\n  >>> stringToNumber(stringSequence('101'))\n  101\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A SImPLe proGrAM WHich sHOuld return tHe vaLuE of x iF n is \n  a prime NUmBEr And ShOuLd return The ValUE Of y oTHErWise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A SImPLe proGrAM WHich sHOuld return tHe vaLuE of x iF n is \n  a prime NUmBEr And ShOuLd return The ValUE Of y oTHErWise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || x == 0 || y == 0) return 0;\n  if (n == 1 || x == 1 || y == 1) return 1;\n  if (n == 2 || x == 2 || y == 2) return 2;\n  if (n == 3 || x == 3 || y == 3) return 3;\n  if (n == 4 || x == 4 || y == 4) return 4;\n  if (n == 5 || x == 5 || y == 5) return 5;\n  if (n == 6 || x == 6 || y == 6) return 6;\n  if (n == 7 || x == 7 || y == 7) return 7;\n  if (n == 8 || x == 8 || y == 8) return 8;\n  if (n == 9 || x == 9 || y == 9) return 9;\n  if (n == 10 || x == 10 || y == 10) return 10;\n  if (n == 11 || x == 11 || y == 11) return 11;\n  if (n == 12 || x == 12 || y == 12) return 12;\n  if (n == 13 || x == 13 || y == 13) return 13;\n  if (n == 14 || x == 14 || y == 14) return 14;\n  if (n == 15 || x == 15 || y == 15) return 15;\n  if (n == 16 || x == 16 || y == 16) return 16;\n  if (n == 17 || x == 17 || y == 17) return 17;\n  if (n == 18 || x == 18 || y == 18) return 18;\n  if (n == 19 || x == 19 || y == 19) return 19;\n  if (n == 20 || x == 20 || y == 20) return 20;\n  if (n == 21 || x == 21 || y == 21) return 21;\n  if (n == 22 || x == 22 || y == 22) return 22;\n  if (n == 23 || x == 23 || y == 23) return 23;\n  if (n == 24 || x == 24 || y == 24) return 24;\n  if (n == 25 || x == 25 || y == 25) return 25;\n  if (n == 26 || x == 26 || y == 26) return 26;\n  if (n == 27 || x == 27 || y == 27) return 27;\n  if (n == 28 || x == 28 || y == 28) return 28;\n  if (n == 29 || x == 29 || y == 29) return 29;\n  if (n == 30 || x == 30 || y == 30) return 30;\n  if (n == 31 || x == 31 || y == 31) return 31;\n  if (n == 32 || x == 32 || y == 32) return 32;\n  if (n == 33 || x == 33 || y == 33) return 33;\n  if (n == 34 || x == 34 || y == 34) return 34;\n  if (n == 35 || x == 35 || y == 35) return 35;\n  if (n == 36 || x == 36 || y == 36) return 36;\n  if (n == 37 || x == 37 || y == 37) return 37;\n  if (n == 38 || x == 38 || y == 38) return 38;\n  if (n == 39 || x == 39 || y == 39) return 39;\n  if (n == 40 || x == 40 || y == 40) return 40;\n  if (n == 41 || x == 41 || y == 41) return 41;\n  if (n == 42 || x == 42 || y == 42) return 42;\n  if (n == 43 || x == 43 || y == 43) return 43;\n  if (n == 44 || x == 44 || y == 44) return 44;\n  if (n == 45 || x == 45 || y == 45) return 45;\n  if (n == 46 || x == 46 || y == 46) return 46;\n  if (n == 47 || x == 47 || y == 47) return 47;\n  if (n == 48 || x == 48 || y == 48) return 48;\n  if (n == 49 || x == 49 || y == 49) return 49;\n  if (n == 50 || x == 50 || y == 50) return 50;\n  if (n == 51 || x == 51 || y == 51) return 51;\n  if (n == 52 || x == 52 || y == 52) return 52;\n  if (n == 53 || x == 53 || y == 53) return 53;\n  if (n == 54 || x == 54 || y == 54) return 54;\n  if (n == 55 || x == 55 || y == 55) return 55;\n  if (n == 56 || x == 56 || y == 56) return 56;\n  if (n == 57 || x == 57 || y == 57) return 57;\n  if (n == 58 || x == 58 || y == 58) return 58;\n  if (n == 59 || x == 59 || y == 59) return 59;\n  if (n == 60 || x == 60 || y == 60) return 60;\n  if (n == 61 || x == 61 || y == 61) return 61;\n  if (n == 62 || x == 62 || y == 62) return 62;\n  if (n == 63 || x == 63 || y == 63) return 63;\n  if (n == 64 || x == 64 || y == 64) return 64;\n  if (n == 65 || x == 65 || y == 65) return 65;\n  if (n == 66 || x == 66 || y == 66) return 66;\n  if (n == 67 || x == 67 || y == 67) return 67;\n  if (n == 68 || x == 68 || y == 68) return 68;\n  if (n == 69 || x == 69 || y == 69) return 69;\n  if (n == 70 || x == 70 || y == 70) return 70;\n  if (n == 71 || x == 71 || y == 71) return 71;\n  if (n == 72 || x == 72 || y == 72) return 72;\n  if (n == 73 || x == 73 || y == 73) return 73;\n  if (n == 74 || x == 74 || y == 74) return 74;\n  if (n == 75 || x == 75 || y == 75) return 75;\n  if (n == 76 || x == 76 || y == 76) return 76;\n  if (n == 77 || x == 77 || y == 77) return 77;\n  if (n == 78 || x == 78 || y == 78) return 78;\n  if (n == 79 || x == 79 || y == 79) return 79;\n  if (n == 80 || x == 80 || y == 80) return 80;\n  if (n == 81 || x == 81 || y == 81) return 81;\n  if (n == 82 || x == 82 || y == 82) return 82;\n  if (n == 83 || x == 83 || y == 83) return 83;\n  if (n == 84 || x == 84 || y == 84) return 84;\n  if (n == 85 || x == 85 || y == 85) return 85;\n  if (n == 86 || x == 86 || y == 86) return 86;\n  if (n == 87 || x == 87 || y == 87) return 87;\n  if (n == 88 || x == 88 || y == 88) return 88;\n  if (n == 89 || x == 89 || y == 89) return 89;\n  if (n == 90 || x == 90 || y == 90) return 90;\n  if (n == 91 || x == 91 || y == 91) return 91;\n  if (n == 92 || x == 92 || y == 92) return 92;\n  if (n == 93 || x == 93 || y == 93) return 93;\n  if (n == 94 || x == 94 || y == 94) return 94;\n  if (n == 95 || x == 95 || y == 95) return 95;\n  if (n == 96 || x == 96 || y == 96) return 96;\n  if (n == 97 || x == 97 || y == 97) return 97;\n  if (n == 98 || x == 98 || y == 98) return 98;\n  if (n == 99 || x == 99 || y == 99) return 99;\n  if (n == 100 || x == 100 || y == 100) return 100;\n  if (n == 101 || x == 101 || y == 101) return 101;\n  if (n == 102 || x == 102 || y == 102) return 102;\n  if (n == 103 || x == 103 || y == 103) return 103;\n  if (n == 104 || x == 104 || y == 104) return 104;\n  if (n == 105 || x == 105 || y == 105) return 105;\n  if (n == 106 || x == 106 || y == 106) return 106;\n  if (n == 107 || x == 107 || y == 107) return 107;\n  if (n == 108 ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  iF thE InpUT list IS eMPtY, return 0.\n  */\ncOnst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* gIvEN a list of nUmBERS, return the sUM of sqUareS oF the Numbers\n  in thE list ThAT aRe oDd. igNoRe nUmbERS thAT ArE negatIVe or not INtEgeRS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I THiNK we alL rEMEMber tHAt feeLing WhEn thE result of SOmE LoNg-aWaItEd\n  EveNt iS FInaLLY kNown. ThE FeelingS AnD thOUGHts YOu hAVE At THaT mOment aRe\n  DeFiniTELY WoRTh noting doWN and ComparinG.\n  YoUr taSk Is tO DeterMInE iF a persOn CorreCTly guEsseD thE resULts OF a numbeR oF MatcHeS.\n  yoU are GIven tWO arrays oF scoRes anD gueSSEs Of equaL leNgTH, WHere eaCh index Shows a Match. \n  RETUrn an arRaY Of the saME lengTH DEnotING hOw far OfF EACH guess WaS. If they have guEssED cOrreCtlY,\n  tHe VAluE is 0, aNd if not, the ValUe is ThE abSolUte differenCe betWEEn thE guess and The sCoRe.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I THiNK we alL rEMEMber tHAt feeLing WhEn thE result of SOmE LoNg-aWaItEd\n  EveNt iS FInaLLY kNown. ThE FeelingS AnD thOUGHts YOu hAVE At THaT mOment aRe\n  DeFiniTELY WoRTh noting doWN and ComparinG.\n  YoUr taSk Is tO DeterMInE iF a persOn CorreCTly guEsseD thE resULts OF a numbeR oF MatcHeS.\n  yoU are GIven tWO arrays oF scoRes anD gueSSEs Of equaL leNgTH, WHere eaCh index Shows a Match. \n  RETUrn an arRaY Of the saME lengTH DEnotING hOw far OfF EACH guess WaS. If they have guEssED cOrreCtlY,\n  tHe VAluE is 0, aNd if not, the ValUe is ThE abSolUte differenCe betWEEn thE guess and The sCoRe.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [player, computer] = game;\n  const [playerIndex, computerIndex] = guess;\n  const [playerScore, computerScore] = player[playerIndex];\n  const [playerTurn, computerTurn] = player[computerIndex];\n  const [playerTurnScore, computerTurnScore] = player[computerIndex];\n  const [playerWinner, computerWinner] = player[computerIndex];\n  const [playerWinnerIndex, computerWinnerIndex] = player[computerIndex];\n  const [playerWinnerScore, computerWinnerScore] = player[computerIndex];\n  const [playerLoser, computerLoser] = player[computerIndex];\n  const [playerLoserIndex, computerLoserIndex] = player[computerIndex];\n  const [playerLoserScore, computerLoserScore] = player[computerIndex];\n  const [playerWinnerLoser, computerWinnerLoser] = player[computerIndex];\n  const [playerWinnerLoserIndex, computerWinnerLoserIndex] = player[computerIndex];\n  const [playerWinnerLoserScore, computerWinnerLoserScore] = player[computerIndex];\n  const [playerWinnerLoserWinner, computerWinnerLoserWinner] = player[computerIndex];\n  const [playerWinnerLoserWinnerIndex, computerWinnerLoserWinnerIndex] = player[computerIndex];\n  const [playerWinnerLoserWinnerScore, computerWinnerLoserWinnerScore] = player[computerIndex];\n  const [playerWinnerLoserLoser, computerWinnerLoserLoser] = player[computerIndex];\n  const [playerWinnerLoserLoserIndex, computerWinnerLoserLoserIndex] = player[computerIndex];\n  const [playerWinnerLoserLoserScore, computerWinnerLoserLoserScore] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinner, computerWinnerLoserWinnerLoser] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerIndex, computerWinnerLoserWinnerLoserIndex] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerScore, computerWinnerLoserWinnerLoserScore] = player[computerIndex];\n  const [playerWinnerLoserLoserLoserLoserLoser, computerWinnerLoserLoserLoserLoser] = player[computerIndex];\n  const [playerWinnerLoserLoserLoserLoserLoserIndex, computerWinnerLoserLoserLoserLoserIndex] = player[computerIndex];\n  const [playerWinnerLoserLoserLoserLoserLoserScore, computerWinnerLoserLoserLoserLoserScore] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinner, computerWinnerLoserWinnerLoserWinner] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinnerIndex, computerWinnerLoserWinnerLoserWinnerIndex] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinnerScore, computerWinnerLoserWinnerLoserWinnerScore] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserLoserLoserLoser, computerWinnerLoserLoserLoserLoser] = player[computerIndex];\n  const [playerWinnerLoserLoserLoserLoserLoserLoserIndex, computerWinnerLoserLoserLoserLoserIndex] = player[computerIndex];\n  const [playerWinnerLoserLoserLoserLoserLoserScore, computerWinnerLoserLoserLoserLoserScore] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinnerLoser, computerWinnerLoserWinnerLoserWinner] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinnerLoserIndex, computerWinnerLoserWinnerLoserWinnerIndex] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinnerLoserScore, computerWinnerLoserWinnerLoserWinnerLoserScore] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinnerLoserWinner, computerWinnerLoserWinnerLoserWinnerLoser] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinnerLoserWinnerIndex, computerWinnerLoserWinnerLoserWinnerIndex] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinnerLoserScore, computerWinnerLoserWinnerLoserWinnerLoserScore] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinnerLoserWinner, computerWinnerLoserWinnerLoserWinnerLoser] = player[computerIndex];\n  const [playerWinnerLoserWinnerLoserWinnerLoserWinnerLoserIndex, computerWinnerLoserWinnerLoserWinnerLoserIndex] = player[computerIndex];\n  const [playerWinner", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*YOU wILl be gIvEN THe namE Of a clAss (a StRing) And a list of extensions.\n  The extensions ARe TO bE usEd To LoAd aDdiTIOnaL CLaSses to THe class. tHe\n  StrENGTh oF The EXTEnSIoN iS as folLoWs: let Cap BE ThE Number of thE UppeRcase\n  letTerS in the ExTenSIon's nAMe, AnD let SM Be The nuMBer of LoweRcaSe leTTerS\n  in The exteNsIOn's nAmE, ThE strENgth iS Given by tHe frActioN CAP - sm.\n  yoU shoulD fiNd THE StrongEst exteNsion aNd return a strING in this\n  foRmAT: ClassNAMe.StrONGEstEXTEnSionNAmE.\n  iF THErE are two or more extensions WitH ThE samE stReNgTH, yoU shoUld\n  choose tHe oNe thAt ComEs fIrst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU wILl be gIvEN THe namE Of a clAss (a StRing) And a list of extensions.\n  The extensions ARe TO bE usEd To LoAd aDdiTIOnaL CLaSses to THe class. tHe\n  StrENGTh oF The EXTEnSIoN iS as folLoWs: let Cap BE ThE Number of thE UppeRcase\n  letTerS in the ExTenSIon's nAMe, AnD let SM Be The nuMBer of LoweRcaSe leTTerS\n  in The exteNsIOn's nAmE, ThE strENgth iS Given by tHe frActioN CAP - sm.\n  yoU shoulD fiNd THE StrongEst exteNsion aNd return a strING in this\n  foRmAT: ClassNAMe.StrONGEstEXTEnSionNAmE.\n  iF THErE are two or more extensions WitH ThE samE stReNgTH, yoU shoUld\n  choose tHe oNe thAt ComEs fIrst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = 0;\n  let extension_strength_max = 0;\n  let extension_strength_min = 0;\n  let extension_strength_avg = 0;\n  let extension_strength_sum = 0;\n  let extension_strength_sum_max = 0;\n  let extension_strength_sum_min = 0;\n  let extension_strength_sum_avg = 0;\n  let extension_strength_sum_sum = 0;\n  let extension_strength_sum_sum_max = 0;\n  let extension_strength_sum_sum_min = 0;\n  let extension_strength_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_avg = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let extension_strength_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let extension_strength_sum_sum_sum_sum_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*YOU aRE giveN 2 wORDS. You nEEd to return tRue iF tHe seCond word oR AnY Of Its RoTaTiOns Is a sUBStrING in tHe firsT Word\n  cycpatternCheck(\"abcd\",\"abd\") => falSE\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => FALSe\n  cycpatternCheck(\"abab\",\"baa\") => tRUe\n  cycpatternCheck(\"efef\",\"eeff\") => fALSE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nCoNst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU aRE giveN 2 wORDS. You nEEd to return tRue iF tHe seCond word oR AnY Of Its RoTaTiOns Is a sUBStrING in tHe firsT Word\n  cycpatternCheck(\"abcd\",\"abd\") => falSE\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => FALSe\n  cycpatternCheck(\"abab\",\"baa\") => tRUe\n  cycpatternCheck(\"efef\",\"eeff\") => fALSE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nCoNst cycpatternCheck = (a, b) => {\n  let aWord = a.toLowerCase(),\n    bWord = b.toLowerCase();\n  if (aWord === bWord) return true;\n  let aWordArray = a.split(\"\"),\n    bWordArray = b.split(\"\");\n  if (aWordArray.length === bWordArray.length) return true;\n  let aWordArrayLength = aWordArray.length,\n    bWordArrayLength = bWordArray.length;\n  if (aWordArrayLength === bWordArrayLength) return true;\n  let aWordArrayIndex = 0,\n    bWordArrayIndex = 0;\n  while (true) {\n    if (aWordArrayIndex === aWordArrayLength - 1) return true;\n    if (bWordArrayIndex === bWordArrayLength - 1) return true;\n    if (aWordArray[aWordArrayIndex] === bWordArray[bWordArrayIndex]) {\n      aWordArrayIndex++;\n      bWordArrayIndex++;\n    } else {\n      return false;\n    }\n  }\n};\n\n/*\n  a. aRE giveN 2 wORDS. You nEEd to return tRue iF tHe seCond word oR AnY Of Its RoTaTiOns Is a sUBStrING in tHe firsT Word\n  cycpatternCheck(\"abcd\",\"abd\") => tRue\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => tRue\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => tRue\n  cycpatternCheck(\"himenss\",\"simen\") => tRue\n  */\nCoNst cycpatternCheck = (a, b) => {\n  let aWord = a.toLowerCase(),\n    bWord = b.toLowerCase();\n  if (aWord === bWord) return true;\n  let aWordArray = a.split(\"\"),\n    bWordArray = b.split(\"\");\n  if (aWordArray.length === bWordArray.length) return true;\n  let aWordArrayLength = aWordArray.length,\n    bWordArrayLength = bWordArray.length;\n  if (aWordArrayLength === bWordArrayLength) return true;\n  let aWordArrayIndex = 0,\n    bWordArrayIndex = 0;\n  while (true) {\n    if (aWordArrayIndex === aWordArrayLength - 1) return true;\n    if (bWordArrayIndex === bWordArrayLength - 1) return true;\n    if (aWordArray[aWordArrayIndex] === bWordArray[bWordArrayIndex]) {\n      aWordArrayIndex++;\n      bWordArrayIndex++;\n    } else {\n      return false;\n    }\n  }\n};\n\n/*\n  a. aRE giveN 2 wORDS. You nEEd to return tRue iF tHe seCond word oR AnY Of Its RoTaTiOns Is a sUBStrING in tHe firsT Word\n  cycpatternCheck(\"abcd\",\"abd\") => tRue\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => tRue\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => tRue\n  cycpatternCheck(\"himenss\",\"simen\") => tRue\n  */\nCoNst cycpatternCheck = (a, b) => {\n  let aWord = a.toLowerCase(),\n    bWord = b.toLowerCase();\n  if (aWord === bWord) return true;\n  let aWordArray = a.split(\"\"),\n    bWordArray = b.split(\"\");\n  if (aWordArray.length === bWordArray.length) return true;\n  let aWordArrayLength = aWordArray.length,\n    bWordArrayLength = bWordArray.length;\n  if (aWordArrayLength === bWordArrayLength) return true;\n  let aWordArrayIndex = 0,\n    bWordArrayIndex = 0;\n  while (true) {\n    if (aWordArrayIndex === aWordArrayLength - 1) return true;\n    if (bWordArrayIndex === bWordArrayLength - 1) return true;\n    if (aWordArray[aWordArrayIndex] === bWordArray[bWordArrayIndex]) {\n      aWordArrayIndex++;\n      bWordArrayIndex++;\n    } else {\n      return false;\n    }\n  }\n};\n\n/*\n  a. aRE giveN 2 wORDS. You nEEd to return tRue iF tHe seCond word oR AnY Of Its RoTaTiOns Is a sUBStrING in tHe firsT Word\n  cycpatternCheck(\"abcd\",\"abd\") => tRue\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => tRue\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => tRue\n  cycpatternCheck(\"himenss\",\"simen\") => tRue\n  */\nCoNst cycpatternCheck = (a, b) => {\n  let aWord = a.toLowerCase(),\n    bWord = b.toLowerCase();\n  if (aWord === bWord) return true;\n  let aWordArray = a.split(\"\"),\n    bWordArray = b.split(\"\");\n  if (aWordArray.length === bWordArray.length) return true;\n  let aWordArrayLength = aWordArray.length,\n    bWordArrayLength = bWordArray.length;\n  if (aWordArrayLength === bWordArrayLength) return true;\n  let aWordArrayIndex = 0,\n    bWordArrayIndex = 0;\n  while (true) {\n    if (aWordArrayIndex === aWordArrayLength - 1) return true;\n    if (bWordArrayIndex === bWordArrayLength - 1) return true;\n    if (aWordArray[aWordArrayIndex] === bWordArray[bWordArrayIndex]) {\n      aWordArrayIndex++;\n      bWordArrayIndex++;\n    } else {\n      return false;\n    }\n  }\n};\n\n/*\n  a. aRE giveN 2 wORDS. You nEEd to return tRue iF tHe seCond word oR AnY Of Its RoTaTiOns Is a sUBStrING in tHe firsT Word\n  cycpatternCheck(\"abcd\",\"abd\") => tRue\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => tRue\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => tRue\n  cycpatternCheck", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and odd diGItS ReSpeCtIvElY.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and odd diGItS ReSpeCtIvElY.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  let intEgER = num;\n  let intEgER2 = intEgER % 2;\n  if (intEgER2 === 0) {\n    even = intEgER;\n    odd = intEgER;\n  } else {\n    even = intEgER2;\n    odd = intEgER2;\n  }\n  if (even % 2 === 0) {\n    count += 1;\n  }\n  if (odd % 2 === 0) {\n    count += 1;\n  }\n  return count;\n};\n\n/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and even diGItS ReSpeCtIvElY.\n\n   Example:\n      evenEvenCount(-12) ==> (1, 2)\n      evenEvenCount(123) ==> (1, 1)\n  */\nconst evenEvenCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  let intEgER = num;\n  let intEgER2 = intEgER % 2;\n  if (intEgER2 === 0) {\n    even = intEgER;\n    odd = intEgER;\n  } else {\n    even = intEgER2;\n    odd = intEgER2;\n  }\n  if (even % 2 === 0) {\n    count += 1;\n  }\n  if (odd % 2 === 0) {\n    count += 1;\n  }\n  if (even % 2 === 1) {\n    count += 1;\n  }\n  if (odd % 2 === 1) {\n    count += 1;\n  }\n  return count;\n};\n\n/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and odd diGItS ReSpeCtIvElY.\n\n   Example:\n      oddOddCount(-12) ==> (2, 1)\n      oddOddCount(123) ==> (2, 1)\n  */\nconst oddOddCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  let intEgER = num;\n  let intEgER2 = intEgER % 2;\n  if (intEgER2 === 0) {\n    even = intEgER;\n    odd = intEgER;\n  } else {\n    even = intEgER2;\n    odd = intEgER2;\n  }\n  if (even % 2 === 0) {\n    count += 1;\n  }\n  if (odd % 2 === 0) {\n    count += 1;\n  }\n  if (even % 2 === 1) {\n    count += 1;\n  }\n  if (odd % 2 === 1) {\n    count += 1;\n  }\n  return count;\n};\n\n/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and even diGItS ReSpeCtIvElY.\n\n   Example:\n      evenEvenCount(-12) ==> (2, 1)\n      evenEvenCount(123) ==> (2, 1)\n  */\nconst evenEvenOddCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  let intEgER = num;\n  let intEgER2 = intEgER % 2;\n  if (intEgER2 === 0) {\n    even = intEgER;\n    odd = intEgER;\n  } else {\n    even = intEgER2;\n    odd = intEgER2;\n  }\n  if (even % 2 === 0) {\n    count += 1;\n  }\n  if (odd % 2 === 0) {\n    count += 1;\n  }\n  if (even % 2 === 1) {\n    count += 1;\n  }\n  if (odd % 2 === 1) {\n    count += 1;\n  }\n  if (even % 2 === 2) {\n    count += 1;\n  }\n  if (odd % 2 === 2) {\n    count += 1;\n  }\n  return count;\n};\n\n/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and odd diGItS ReSpeCtIvElY.\n\n   Example:\n      oddOddCount(-12) ==> (1, 2)\n      oddOddCount(123) ==> (1, 1)\n  */\nconst oddEvenOddCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  let intEgER = num;\n  let intEgER2 = intEgER % 2;\n  if (intEgER2 === 0) {\n    even = intEgER;\n    odd = intEgER;\n  } else {\n    even = intEgER2;\n    odd = intEgER2;\n  }\n  if (even % 2 === 0) {\n    count += 1;\n  }\n  if (odd % 2 === 0) {\n    count += 1;\n  }\n  if (even % 2 === 1) {\n    count += 1;\n  }\n  if (odd % 2 === 1) {\n    count += 1;\n  }\n  if (even % 2 === 2) {\n    count += 1;\n  }\n  if (odd % 2 === 2) {\n    count += 1;\n  }\n  return count;\n};\n\n/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and even diGItS ReSpeCtIvElY.\n\n   Example:\n      evenOddCount(-12) ==> (1, 2)\n      evenOddCount(123) ==> (1, 1)\n  */\nconst evenOddEvenCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  let intEgER = num;\n  let intEgER2 = intEgER % 2;\n  if (intEgER2 === 0) {\n    even = intEgER;\n    odd = intEgER;\n  } else {\n    even = intEgER2;\n    odd = intEgER2;\n  }\n  if (even % 2 === 0) {\n    count += 1;\n  }\n  if (odd % 2 === 0) {\n    count += 1;\n  }\n  if (even % 2 === 1) {\n    count += 1;\n  }\n  if (odd % 2 === 1) {\n    count += 1;\n  }\n  if (even % 2 === 2) {\n    count += 1;\n  }\n  if (odd % 2 === 2) {\n    count += 1;\n  }\n  return count;\n};\n\n/*GIVeN An intEgER. return A tuple That hAS the nUmbeR oF eveN and odd diGItS ReSpeCtIvElY.\n\n   Example:\n      oddOddCount(-12) ==> (2, 1)\n      oddOddCount(123) ==> (2, 1)\n  */\nconst oddEvenOddCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  let intEgER = num;\n  let intEgER2 = intEgER % 2;\n  if (intEgER2 === 0) {\n    even = intEgER;\n    odd = intEgER;\n  } else {\n    even = intEgER2;\n    odd = intEgER2;\n  }\n  if (even % 2 === 0) {\n    count += 1;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  gIvEN a posItIVE IntegER, obtaIn itS rOman Numeral eqUIvALeNt aS a StRiNg,\n  aNd return iT in LOweRCAsE.\n  RestrICtions: 1 <= num <= 1000\n\n  EXAmPleS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a posItIVE IntegER, obtaIn itS rOman Numeral eqUIvALeNt aS a StRiNg,\n  aNd return iT in LOweRCAsE.\n  RestrICtions: 1 <= num <= 1000\n\n  EXAmPleS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const [integer, fraction] = intToFraction(number);\n  const [integer, fraction] = intToFraction(integer);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = intToFraction(fraction);\n  const [integer, fraction] = int", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tRUe If tHe ThReE\n  siDes FORm a rIGHt-Angled TRiangle, FAlSe oTHERwiSE.\n  A rIGHT-aNGlEd TriangLe Is a TriaNGLE in WhICh one angle IS rigHt angle oR\n  90 deGree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const aAngle = angle(a);\n  const bAngle = angle(b);\n  const cAngle = angle(c);\n  const aAngleInDeg = aAngle / deg;\n  const bAngleInDeg = bAngle / deg;\n  const cAngleInDeg = cAngle / deg;\n  const aAngleInRad = aAngle * deg;\n  const bAngleInRad = bAngle * deg;\n  const cAngleInRad = cAngle * deg;\n  const aAngleInDegRad = aAngleInDeg * deg;\n  const bAngleInDegRad = bAngleInDeg * deg;\n  const cAngleInDegRad = cAngleInDeg * deg;\n  const aAngleInRadRad = aAngleInRad * deg;\n  const bAngleInRadRad = bAngleInRad * deg;\n  const cAngleInRadRad = cAngleInRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRad * deg;\n  const aAngleInRadRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRadRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRadRad * deg;\n  const aAngleInRadRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRadRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRadRad * deg;\n  const aAngleInRadRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRadRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRadRad * deg;\n  const aAngleInRadRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRadRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRadRad * deg;\n  const aAngleInRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRadRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRadRad * deg;\n  const aAngleInRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRadRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRadRad * deg;\n  const aAngleInRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRadRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRadRad * deg;\n  const aAngleInRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRadRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRadRad * deg;\n  const aAngleInRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRadRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRadRad * deg;\n  const aAngleInRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * deg;\n  const bAngleInDegRadRad = bAngleInDegRadRad * deg;\n  const cAngleInDegRadRad = cAngleInDegRadRad * deg;\n  const aAngleInRadRad = aAngleInRadRad * deg;\n  const bAngleInRadRad = bAngleInRadRad * deg;\n  const cAngleInRadRad = cAngleInRadRad * deg;\n  const aAngleInDegRadRad = aAngleInDegRadRad * ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*WRItE A funcTiON THat acCEpts a list Of stRiNgs.\n  THe list containS DiFFeRenT words. REtUrN thE woRD WitH MAxImum nuMBer\n  of unIQuE chARACteRS. If MULTiPLe StRings hAvE mAximUM NUMbER of unique\n  cHAracTers, return the oNe wHich CoMes FIrst in lEXiCoGraphiCaL ordeR.\n\n  findMax([\"name\", \"Of\", \"strIng\"]) === \"sTriNg\"\n  findMax([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"Cc\"]) === \"\"AAaaaAa\"\n  */\nCOnSt findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*WRItE A funcTiON THat acCEpts a list Of stRiNgs.\n  THe list containS DiFFeRenT words. REtUrN thE woRD WitH MAxImum nuMBer\n  of unIQuE chARACteRS. If MULTiPLe StRings hAvE mAximUM NUMbER of unique\n  cHAracTers, return the oNe wHich CoMes FIrst in lEXiCoGraphiCaL ordeR.\n\n  findMax([\"name\", \"Of\", \"strIng\"]) === \"sTriNg\"\n  findMax([\"name\", \"enAM\", \"gaME\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"Cc\"]) === \"\"AAaaaAa\"\n  */\nCOnSt findMax = (words) => {\n  let max = 0;\n  let maxWord = words[0];\n  let maxWordLength = words[0].length;\n  let maxWordIndex = 0;\n  let maxWordLengthIndex = 0;\n  let maxWordIndexLength = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthIndex = 0;\n  let maxWordLengthIndexLength = 0;\n  let maxWordIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordIndexLengthIndexLength = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordIndexLengthIndexLength = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordIndexLengthIndexLength = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordIndexLengthIndexLength = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordIndexLengthIndexLength = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex = 0;\n  let maxWordLengthIndexLengthIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  yOu'RE a hunGrY RABbit, aND you aLreaDy Have Eaten a cerTAiN number Of CarRoTs,\n  BuT noW yoU need TO eat moRE CaRrots tO CompletE ThE daY'S MEalS.\n  You SHOUlD return An ArRay of [ tOtAl number Of eaTEN CArROts after yoUR meaLs,\n                                  the number of cArrOts lEfT afTEr youR MeAlS ]\n  if theRe Are noT EnougH remaining carRotS, you WIll eat ALl remaining carroTs, BUt wiLl STiLl be HUngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  yOu'RE a hunGrY RABbit, aND you aLreaDy Have Eaten a cerTAiN number Of CarRoTs,\n  BuT noW yoU need TO eat moRE CaRrots tO CompletE ThE daY'S MEalS.\n  You SHOUlD return An ArRay of [ tOtAl number Of eaTEN CArROts after yoUR meaLs,\n                                  the number of cArrOts lEfT afTEr youR MeAlS ]\n  if theRe Are noT EnougH remaining carRotS, you WIll eat ALl remaining carroTs, BUt wiLl STiLl be HUngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const remainder = Math.floor(remaining / carrots);\n  const remainders = remaining % carrots;\n  const remaindersRemaining = remaining % remainders;\n  const remaindersRemainingRemaining = remaindersRemaining % remainders;\n  const remaindersRemainingRemainingRemaining = remaindersRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % remainders;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remain", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* gIvEN a string, finD oUT HOw manY DistiNct cHaRactErs (regardLEsS Of CasE) dOeS iT coNsiST Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters\n * countDistinctCharacters", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  gIvEN two lIsTS operator, ANd operand. The FIrst list hAs baSiC algEbra operaTIoNS, aNd \n  tHe SeCoNd list iS a list oF INteGERs. use the TWo given LIsTs tO BUIld THe aLGEBrIC \n  eXpRessioN aNd return The eVALUAtIOn of this exPRessIon.\n\n  The baSic AlgeBrA opERatioNS:\n  ADdItion ( + ) \n  SUbTractIOn ( - ) \n  MulTiplIcaTion ( * ) \n  fLooR DivisioN ( // ) \n  EXPoneNtIAtIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN two lIsTS operator, ANd operand. The FIrst list hAs baSiC algEbra operaTIoNS, aNd \n  tHe SeCoNd list iS a list oF INteGERs. use the TWo given LIsTs tO BUIld THe aLGEBrIC \n  eXpRessioN aNd return The eVALUAtIOn of this exPRessIon.\n\n  The baSic AlgeBrA opERatioNS:\n  ADdItion ( + ) \n  SUbTractIOn ( - ) \n  MulTiplIcaTion ( * ) \n  fLooR DivisioN ( // ) \n  EXPoneNtIAtIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    let operator = operator[operatorIndex];\n    let operatorLength = operator.length;\n    let operand = operand[operandIndex];\n    let operandLength = operand.length;\n    while (operandIndex < operandLength) {\n      let operator = operator[operatorIndex];\n      let operatorLength = operator.length;\n      let operand = operand[operandIndex];\n      let operandLength = operand.length;\n      let operatorIndex = 0;\n      let operandIndex = 0;\n      while (operandIndex < operandLength) {\n        let operator = operator[operatorIndex];\n        let operatorLength = operator.length;\n        let operand = operand[operandIndex];\n        let operandLength = operand.length;\n        let operatorIndex = 0;\n        let operandIndex = 0;\n        while (operandIndex < operandLength) {\n          let operator = operator[operatorIndex];\n          let operatorLength = operator.length;\n          let operand = operand[operandIndex];\n          let operandLength = operand.length;\n          let operatorIndex = 0;\n          let operandIndex = 0;\n          while (operandIndex < operandLength) {\n            let operator = operator[operatorIndex];\n            let operatorLength = operator.length;\n            let operand = operand[operandIndex];\n            let operandLength = operand.length;\n            let operatorIndex = 0;\n            let operandIndex = 0;\n            let result = result + operand;\n            operandIndex++;\n          }\n          operatorIndex++;\n          operandIndex++;\n        }\n        operatorIndex++;\n        operandIndex++;\n      }\n      operatorIndex++;\n      operandIndex++;\n    }\n    operatorIndex++;\n    operandIndex++;\n  }\n  return result;\n};\n\n/*\n  gIvEN two lIsTS operator, ANd operand. The FIrst list hAs baSiC algEbra operaTIoNS, aNd \n  tHe SeCoNd list iS a list oF INteGERs. use the TWo given LIsTs tO BUIld THe aLGEBrIC \n  eXpRessioN aNd return The eVALUAtIOn of this exPRessIon.\n\n  The baSic AlgeBrA opERatioNS:\n  ADdItion ( + ) \n  SUbTractIOn ( - ) \n  MulTiplIcaTion ( * ) \n  fLooR DivisioN ( // ) \n  EXPoneNtIAtIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    let operator = operator[operatorIndex];\n    let operatorLength = operator.length;\n    let operand = operand[operandIndex];\n    let operandLength = operand.length;\n    let operatorIndex = 0;\n    let operandIndex = 0;\n    while (operandIndex < operandLength) {\n      let operator = operator[operatorIndex];\n      let operatorLength = operator.length;\n      let operand = operand[operandIndex];\n      let operandLength = operand.length;\n      let operatorIndex = 0;\n      let operandIndex = 0;\n      while (operandIndex < operandLength) {\n        let operator = operator[operatorIndex];\n        let operatorLength = operator.length;\n        let operand = operand[operandIndex];\n        let operandLength = operand.length;\n        let operatorIndex = 0;\n        let operandIndex = 0;\n        while (operandIndex < operandLength) {\n          let operator = operator[operatorIndex];\n          let operatorLength = operator.length;\n          let operand = operand[operandIndex];\n          let operandLength = operand.length;\n          let operatorIndex = 0;\n          let operandIndex = 0;\n          while (operandIndex < operandLength) {\n            let operator = operator[operatorIndex];\n            let operatorLength = operator.length;\n            let operand = operand[operandIndex];\n            let operandLength = operand.length;\n            let operatorIndex = 0;\n            let operandIndex = 0;\n            let result = result + operand;\n            operandIndex++;\n          }\n          operatorIndex++;\n          operandIndex++;\n        }\n        operatorIndex++;\n        operandIndex++;\n      }\n      operatorIndex++;\n      operandIndex++;\n    }\n    operatorIndex++;\n    operandIndex++;\n  }\n  return result;\n};\n\n/*\n  gIvEN two lIsTS operator, ANd operand. The FIrst list hAs baSiC algEbra operaTIoNS, aNd \n  tHe SeCoNd list iS a list oF INteGERs. use the TWo given LIsTs tO BUIld THe aLGEBrIC \n  eXpRessioN aNd return The eVALUAtIOn of this exPRessIon.\n\n  The baSic AlgeBrA opERatioNS:\n  ADdItion ( + ) \n  SUbTractIOn ( - ) \n  MulTiplIcaTion ( * ) \n  fLooR DivisioN ( // ) \n  EXPoneNtIAtIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    let operator = operator[operatorIndex];\n    let operatorLength = operator.length;\n    let operand = operand[operandIndex];\n    let operandLength = operand.length;\n    let operatorIndex = 0;\n    let operandIndex = 0;\n    while (operandIndex < operandLength) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*YOU aRE giveN a STRIng s.\n  if s[i] IS a letTer, rEvErse Its case frOM lOWeR to UpPeR oR viSe vERSa, \n  oTHErWise keEP it as it IS.\n  IF thE STRinG ConTAINs NO lEtTers, reVeRsE the STRINg.\n  tHe function SHoulD return the resuLteD strInG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU aRE giveN a STRIng s.\n  if s[i] IS a letTer, rEvErse Its case frOM lOWeR to UpPeR oR viSe vERSa, \n  oTHErWise keEP it as it IS.\n  IF thE STRinG ConTAINs NO lEtTers, reVeRsE the STRINg.\n  tHe function SHoulD return the resuLteD strInG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let rEvErse = s.toLowerCase().replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/[^a-z]/g,\"\");\n  let rEvErse = rEvErse.replace(/", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', return ITS md5 hash EQuivaLent StRing.\n  if 'text' is an empTY sTRiNg, return nUlL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  gIvEN a strInG 'text', ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  gIvEN two pOsITIVe intEGers a aNd b, return thE eVen dIgits betwEEn a\n  ANd b, in AscEnDiNg OrdEr.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN two pOsITIVe intEGers a aNd b, return thE eVen dIgits betwEEn a\n  ANd b, in AscEnDiNg OrdEr.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a; i++) {\n    result.push(i);\n  }\n  for (let i = b; i < result.length; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\nconst generateIntegers_ = (...args) => {\n  const result = generateIntegers(...args);\n  return result.sort();\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNting musiCAl NOtEs in a SpEcIaL AScII FORmaT.\n  yOuR task iS To parse THiS stRING anD return list Of iNTEGeRS cOrResponDiNg To hoW MANY bEAts does eacH\n  Not lAst.\n\n  Here iS a lEgenD:\n  'o' - WhoLE note, LAsTs Four beAtS\n  'o|' - halF Note, lAsts Two BeatS\n  '.|' - QuaTEr note, lAsTS one BeAT\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* iNpUT to thIs FUNCtion IS a strIng rEpReseNting musiCAl NOtEs in a SpEcIaL AScII FORmaT.\n  yOuR task iS To parse THiS stRING anD return list Of iNTEGeRS cOrResponDiNg To hoW MANY bEAts does eacH\n  Not lAst.\n\n  Here iS a lEgenD:\n  'o' - WhoLE note, LAsTs Four beAtS\n  'o|' - halF Note, lAsts Two BeatS\n  '.|' - QuaTEr note, lAsTS one BeAT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_list_length = music_list.length;\n  const music_list_array = [];\n  let music_list_index = 0;\n  let music_list_array_index = 0;\n  let music_list_array_length = 0;\n  let music_list_array_index2 = 0;\n  let music_list_array_index3 = 0;\n  let music_list_array_index4 = 0;\n  let music_list_array_index5 = 0;\n  let music_list_array_index6 = 0;\n  let music_list_array_index7 = 0;\n  let music_list_array_index8 = 0;\n  let music_list_array_index9 = 0;\n  let music_list_array_index10 = 0;\n  let music_list_array_index11 = 0;\n  let music_list_array_index12 = 0;\n  let music_list_array_index13 = 0;\n  let music_list_array_index14 = 0;\n  let music_list_array_index15 = 0;\n  let music_list_array_index16 = 0;\n  let music_list_array_index17 = 0;\n  let music_list_array_index18 = 0;\n  let music_list_array_index19 = 0;\n  let music_list_array_index20 = 0;\n  let music_list_array_index21 = 0;\n  let music_list_array_index22 = 0;\n  let music_list_array_index23 = 0;\n  let music_list_array_index24 = 0;\n  let music_list_array_index25 = 0;\n  let music_list_array_index26 = 0;\n  let music_list_array_index27 = 0;\n  let music_list_array_index28 = 0;\n  let music_list_array_index29 = 0;\n  let music_list_array_index30 = 0;\n  let music_list_array_index31 = 0;\n  let music_list_array_index32 = 0;\n  let music_list_array_index33 = 0;\n  let music_list_array_index34 = 0;\n  let music_list_array_index35 = 0;\n  let music_list_array_index36 = 0;\n  let music_list_array_index37 = 0;\n  let music_list_array_index38 = 0;\n  let music_list_array_index39 = 0;\n  let music_list_array_index40 = 0;\n  let music_list_array_index41 = 0;\n  let music_list_array_index42 = 0;\n  let music_list_array_index43 = 0;\n  let music_list_array_index44 = 0;\n  let music_list_array_index45 = 0;\n  let music_list_array_index46 = 0;\n  let music_list_array_index47 = 0;\n  let music_list_array_index48 = 0;\n  let music_list_array_index49 = 0;\n  let music_list_array_index50 = 0;\n  let music_list_array_index51 = 0;\n  let music_list_array_index52 = 0;\n  let music_list_array_index53 = 0;\n  let music_list_array_index54 = 0;\n  let music_list_array_index55 = 0;\n  let music_list_array_index56 = 0;\n  let music_list_array_index57 = 0;\n  let music_list_array_index58 = 0;\n  let music_list_array_index59 = 0;\n  let music_list_array_index60 = 0;\n  let music_list_array_index61 = 0;\n  let music_list_array_index62 = 0;\n  let music_list_array_index63 = 0;\n  let music_list_array_index64 = 0;\n  let music_list_array_index65 = 0;\n  let music_list_array_index66 = 0;\n  let music_list_array_index67 = 0;\n  let music_list_array_index68 = 0;\n  let music_list_array_index69 = 0;\n  let music_list_array_index70 = 0;\n  let music_list_array_index71 = 0;\n  let music_list_array_index72 = 0;\n  let music_list_array_index73 = 0;\n  let music_list_array_index74 = 0;\n  let music_list_array_index75 = 0;\n  let music_list_array_index76 = 0;\n  let music_list_array_index77 = 0;\n  let music_list_array_index78 = 0;\n  let music_list_array_index79 = 0;\n  let music_list_array_index80 = 0;\n  let music_list_array_index81 = 0;\n  let music_list_array_index82 = 0;\n  let music_list_array_index83 = 0;\n  let music_list_array_index84 = 0;\n  let music_list_array_index85 = 0;\n  let music_list_array_index86 = 0;\n  let music_list_array_index87 = 0;\n  let music_list_array_index88 = 0;\n  let music_list_array_index89 = 0;\n  let music_list_array_index90 = 0;\n  let music_list_array_index91 = 0;\n  let music_list_array_index92 = 0;\n  let music_list_array_index93 = 0;\n  let music_list_array_index94 = 0;\n  let music_list_array_index95 = 0;\n  let music_list_array_index96 = 0;\n  let music_list_array_index97 = 0;\n  let music_list_array_index98 = 0;\n  let music_list_array_index99 = 0;\n  let music_list_array_index100 = 0;\n  let music_list_array_index101 = 0;\n  let music_list_array_index102 = 0;\n  let music_list_array_index103 = 0;\n  let music_list_array_index104 = 0;\n  let music_list_array_index105 = 0;\n  let music_list_array_index106 = 0;\n  let music_list_array_index107 = 0;\n  let music_list_array_index108 = 0;\n  let music_list_array_index109 = 0;\n  let music_list_array_index110 = 0;\n  let music_list_array_index111 = 0;\n  let music_list_array_index112 = 0;\n  let music_list_array_index113 = 0;\n  let music_list_array_index114 = 0;\n  let music_list_array_index115 = 0;\n  let music_list_array_index116 = 0;\n  let music_list_array_index117 = 0;\n  let music_list_array_index118 = 0;\n  let music_list_array_index119 = 0;\n  let music_list_array_index120 = 0;\n  let music_list_array_index121 = 0;\n  let music_list_array_index122 = 0;\n  let music_list_array_index123 = 0;\n  let music_list_array_index124 = 0;\n  let music_list_array_index125 = 0;\n  let music_list_array_index126 = 0;\n  let music_list_array_index127 = 0;\n  let music_list_array_index128 = 0;\n  let music_list_array_index129 = 0;\n  let music_list_array_index130 = 0;\n  let music_list_array_index131 = 0;\n  let music_list_array_index132 = 0;\n  let music_list_array_index133 = 0;\n  let music_list_array_index134 = 0;\n  let music_list_array_index135 = 0;\n  let music_list_array_index136 = 0;\n  let music_list_array_index137 = 0;\n  let music_list_array_index138 = 0;\n  let music_list_array_index139 = 0;\n  let music_list_array_index140 = 0;\n  let music_list_array_index141 = 0;\n  let music_list_array_index142 = 0;\n  let music_list_array_index143 = 0;\n  let music_list_array_index144", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* fInD How maNy times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fInD How maNy times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = string.indexOf(substring);\n  while (index > -1) {\n    count++;\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return count;\n};\n\n/**\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN Be fouNd in thE oRigiNal string. Count oVErLApIng CaSeS.\n * fInD How many times A GIVen substring caN B", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* iNpUT is a spAcE-DELimitED striNg of NuMberAls from 'zeRO' tO 'NiNe'.\n  VAlId ChOicEs aRE 'ZerO', 'ONe', 'Two', 'thrEE', 'four', 'fiVE', 'sIx', 'sEVEN', 'eiGHt' aND 'NInE'.\n  reTuRn the sTrInG witH numbers SORTeD From smalleST to lArgest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* iNpUT is a spAcE-DELimitED striNg of NuMberAls from 'zeRO' tO 'NiNe'.\n  VAlId ChOicEs aRE 'ZerO', 'ONe', 'Two', 'thrEE', 'four', 'fiVE','sIx','sEVEN', 'eiGHt' aND 'NInE'.\n  reTuRn the sTrInG witH numbers SORTeD From smalleST to lArgest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersWithSpaces = numbers.split(' ').map(Number);\n  const sortedNumbers = numbersWithSpaces.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\nconst getNumbersFromString = (string) => {\n  const numbers = string.split(' ');\n  return numbers.map(Number);\n};\n\nconst getNumbersFromArray = (array) => {\n  return array.map(Number);\n};\n\nconst getNumbersFromObject = (object) => {\n  return Object.keys(object).map(Number);\n};\n\nconst getNumbersFromArrayOfObjects = (arrayOfObjects) => {\n  return arrayOfObjects.map(getNumbersFromObject);\n};\n\nconst getNumbersFromArrayOfArrays = (arrayOfArrays) => {\n  return arrayOfArrays.map(getNumbersFromArray);\n};\n\nconst getNumbersFromArrayOfNumbers = (arrayOfNumbers) => {\n  return arrayOfNumbers.map(Number);\n};\n\nconst getNumbersFromArrayOfStrings = (arrayOfStrings) => {\n  return arrayOfStrings.map(Number);\n};\n\nconst getNumbersFromArrayOfNumbersAndStrings = (arrayOfNumbersAndStrings) => {\n  return arrayOfNumbersAndStrings.map(getNumbersFromArray);\n};\n\nconst getNumbersFromArrayOfNumbersAndArrays = (arrayOfNumbersAndArrays) => {\n  return arrayOfNumbersAndArrays.map(getNumbersFromArrayOfArrays);\n};\n\nconst getNumbersFromArrayOfNumbersAndObjects = (arrayOfNumbersAndObjects) => {\n  return arrayOfNumbersAndObjects.map(getNumbersFromArrayOfObjects);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndObjects = (arrayOfNumbersAndArraysAndObjects) => {\n  return arrayOfNumbersAndArraysAndObjects.map(getNumbersFromArrayOfArraysAndObjects);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndStrings = (arrayOfNumbersAndArraysAndStrings) => {\n  return arrayOfNumbersAndArraysAndStrings.map(getNumbersFromArrayOfArraysAndStrings);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndStrings = (\n  arrayOfNumbersAndArraysAndNumbersAndStrings\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndStrings.map(getNumbersFromArrayOfNumbersAndStrings);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArrays = (\n  arrayOfNumbersAndArraysAndNumbersAndArrays\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArrays.map(getNumbersFromArrayOfNumbersAndArrays);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndObjects = (\n  arrayOfNumbersAndArraysAndNumbersAndObjects\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndObjects.map(getNumbersFromArrayOfNumbersAndObjects);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndObjects = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndObjects\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndObjects.map(getNumbersFromArrayOfNumbersAndArraysAndObjects);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndStrings = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndStrings\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndStrings.map(getNumbersFromArrayOfNumbersAndArraysAndStrings);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndStrings = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndStrings\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndStrings.map(getNumbersFromArrayOfNumbersAndArraysAndNumbersAndStrings);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndNumbersAndArrays = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArrays\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArrays.map(getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArrays);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndObjects = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndObjects\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndObjects.map(getNumbersFromArrayOfNumbersAndArraysAndNumbersAndObjects);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndNumbersAndObjects = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndObjects\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndObjects.map(getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndObjects);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndStrings = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndStrings\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndStrings.map(getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndStrings);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndNumbersAndStrings = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndNumbersAndStrings\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndStrings.map(getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndStrings);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndNumbersAndNumbersAndStrings = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndNumbersAndStrings\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndStrings.map(getNumbersFromArrayOfNumbersAndArraysAndNumbersAndStrings);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndNumbersAndArraysAndNumbersAndNumbersAndStrings = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndNumbersAndStrings\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndStrings.map(getNumbersFromArrayOfNumbersAndArraysAndStrings);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndNumbersAndArraysAndNumbersAndStrings = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndNumbersAndStrings\n) => {\n  return arrayOfNumbersAndArraysAndNumbersAndArraysAndStrings.map(getNumbersFromArrayOfStrings);\n};\n\nconst getNumbersFromArrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndNumbersAndArraysAndNumbersAndStrings = (\n  arrayOfNumbersAndArraysAndNumbersAndArraysAndNumbersAndArraysAndStrings\n) => {\n  return arrayOfNumber", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* gIvEN a posItIVE FloatINg poiNt number, it CaN be dEcomposed INtO\n  AnD inTeGeR pArt (LarGESt iNTEgEr smalLEr than gIVeN number) anD DECimALs\n  (lEFTOvER pArT alwayS sMaLler THAN 1).\n\n  reTUrn the deciMAl paRt of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  const [integer, fractional2] = integer.toString().split('.');\n  const [integer, fractional3] = integer.toString().split('.');\n  const [integer, fractional4] = integer.toString().split('.');\n  const [integer, fractional5] = integer.toString().split('.');\n  const [integer, fractional6] = integer.toString().split('.');\n  const [integer, fractional7] = integer.toString().split('.');\n  const [integer, fractional8] = integer.toString().split('.');\n  const [integer, fractional9] = integer.toString().split('.');\n  const [integer, fractional10] = integer.toString().split('.');\n  const [integer, fractional11] = integer.toString().split('.');\n  const [integer, fractional12] = integer.toString().split('.');\n  const [integer, fractional13] = integer.toString().split('.');\n  const [integer, fractional14] = integer.toString().split('.');\n  const [integer, fractional15] = integer.toString().split('.');\n  const [integer, fractional16] = integer.toString().split('.');\n  const [integer, fractional17] = integer.toString().split('.');\n  const [integer, fractional18] = integer.toString().split('.');\n  const [integer, fractional19] = integer.toString().split('.');\n  const [integer, fractional20] = integer.toString().split('.');\n  const [integer, fractional21] = integer.toString().split('.');\n  const [integer, fractional22] = integer.toString().split('.');\n  const [integer, fractional23] = integer.toString().split('.');\n  const [integer, fractional24] = integer.toString().split('.');\n  const [integer, fractional25] = integer.toString().split('.');\n  const [integer, fractional26] = integer.toString().split('.');\n  const [integer, fractional27] = integer.toString().split('.');\n  const [integer, fractional28] = integer.toString().split('.');\n  const [integer, fractional29] = integer.toString().split('.');\n  const [integer, fractional30] = integer.toString().split('.');\n  const [integer, fractional31] = integer.toString().split('.');\n  const [integer, fractional32] = integer.toString().split('.');\n  const [integer, fractional33] = integer.toString().split('.');\n  const [integer, fractional34] = integer.toString().split('.');\n  const [integer, fractional35] = integer.toString().split('.');\n  const [integer, fractional36] = integer.toString().split('.');\n  const [integer, fractional37] = integer.toString().split('.');\n  const [integer, fractional38] = integer.toString().split('.');\n  const [integer, fractional39] = integer.toString().split('.');\n  const [integer, fractional40] = integer.toString().split('.');\n  const [integer, fractional41] = integer.toString().split('.');\n  const [integer, fractional42] = integer.toString().split('.');\n  const [integer, fractional43] = integer.toString().split('.');\n  const [integer, fractional44] = integer.toString().split('.');\n  const [integer, fractional45] = integer.toString().split('.');\n  const [integer, fractional46] = integer.toString().split('.');\n  const [integer, fractional47] = integer.toString().split('.');\n  const [integer, fractional48] = integer.toString().split('.');\n  const [integer, fractional49] = integer.toString().split('.');\n  const [integer, fractional50] = integer.toString().split('.');\n  const [integer, fractional51] = integer.toString().split('.');\n  const [integer, fractional52] = integer.toString().split('.');\n  const [integer, fractional53] = integer.toString().split('.');\n  const [integer, fractional54] = integer.toString().split('.');\n  const [integer, fractional55] = integer.toString().split('.');\n  const [integer, fractional56] = integer.toString().split('.');\n  const [integer, fractional57] = integer.toString().split('.');\n  const [integer, fractional58] = integer.toString().split('.');\n  const [integer, fractional59] = integer.toString().split('.');\n  const [integer, fractional60] = integer.toString().split('.');\n  const [integer, fractional61] = integer.toString().split('.');\n  const [integer, fractional62] = integer.toString().split('.');\n  const [integer, fractional63] = integer.toString().split('.');\n  const [integer, fractional64] = integer.toString().split('.');\n  const [integer, fractional65] = integer.toString().split('.');\n  const [integer, fractional66] = integer.toString().split('.');\n  const [integer, fractional67] = integer.toString().split('.');\n  const [integer, fractional68] = integer.toString().split('.');\n  const [integer, fractional69] = integer.toString().split('.');\n  const [integer, fractional70] = integer.toString().split('.');\n  const [integer, fractional71] = integer.toString().split('.');\n  const [integer, fractional72] = integer.toString().split('.');\n  const [integer, fractional73] = integer.toString().split('.');\n  const [integer, fractional74] = integer.toString().split('.');\n  const [integer, fractional75] = integer.toString().split('.');\n  const [integer, fractional76] = integer.toString().split('.');\n  const [integer, fractional77] = integer.toString().split('.');\n  const [integer, fractional78] = integer.toString().split('.');\n  const [integer, fractional79] = integer.toString().split('.');\n  const [integer, fractional80] = integer.toString().split('.');\n  const [integer, fractional81] = integer.toString().split('.');\n  const [integer, fractional82] = integer.toString().split('.');\n  const [integer, fractional83] = integer.toString().split('.');\n  const [integer, fractional84] = integer.toString().split('.');\n  const [integer, fractional85] = integer.toString().split('.');\n  const [integer, fractional86] = integer.toString().split('.');\n  const [integer, fractional87] = integer.toString().split('.');\n  const [integer, fractional88] = integer.toString().split('.');\n  const [integer, fractional89] = integer.toString().split('.');\n  const [integer, fractional90] = integer.toString().split('.');\n  const [integer, fractional91] = integer.toString().split('.');\n  const [integer, fractional92] = integer.toString().split('.');\n  const [integer, fractional93] = integer.toString().split('.');\n  const [integer, fractional94] = integer.toString().split('.');\n  const [integer, fractional95] = integer.toString().split('.');\n  const [integer, fractional96] = integer.toString().split('.');\n  const [integer, fractional97] = integer.toString().split('.');\n  const [integer, fractional98] = integer.toString().split('.');\n  const [integer, fractional99] = integer.toString().split('.');\n  const [integer, fractional100] = integer.toString().split('.');\n  const [integer, fractional101] = integer.toString().split('.');\n  const [integer, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* fRoM a SupplIeD list OF numbers (Of lenGTh at lEast TwO) selEct and return two THaT ArE thE cLoSeSt tO eaCH\n  OthER AnD return them in oRDer (smalLEr NumBER, LarGEr nUMBEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fRoM a SupplIeD list OF numbers (Of lenGTh at lEast TwO) selEct and return two THaT ArE thE cLoSeSt tO eaCH\n  OthER AnD return them in oRDer (smalLEr NumBER, LarGEr nUMBEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const minDistance = Number.MAX_VALUE;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  const minDistanceElementIndex = numbers.findIndex(\n    number => number < minDistanceElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number < minDistanceElementElement\n  );\n  const minDistanceElementElement = numbers[minDistanceElementElementIndex];\n  const minDistanceElementElementIndex = numbers.findIndex(\n    number => number ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* gIvEN list of numbers (of At LEASt two ELemenTs), apPlY a liNear transFOrM To ThaT list,\n  sUcH tHat The SMAllEST nUmber wILl becomE 0 AnD thE LARgeST wiLL BEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* gIvEN list of numbers (of At LEASt two ELemenTs), apPlY a liNear transFOrM To ThaT list,\n  sUcH tHat The SMAllEST nUmber wILl becomE 0 AnD thE LARgeST wiLL BEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000 * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnitAndUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000 * 1000 * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000 * 1000 * 1000 * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000 * 1000 * 1000 * 1000 * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnit = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    return [Math.min(...acc), Math.max(...acc)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * maxValue / minValue * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000)\n}\n\n/**\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnitAndUnit", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fIlTEr givEn list OF ANy pytHOn values onlY for InTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const res = []\n  const isNumber = (val) => typeof val === 'number'\n  const isString = (val) => typeof val ==='string'\n  const isList = (val) => Array.isArray(val)\n  const isDict = (val) => typeof val === 'object'\n  const isAny = val => isList(val) || isDict(val)\n  const isAny = val => isNumber(val) || isString(val)\n  const isAny = val => isDict(val) || isList(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAny = val => isDict(val) || isString(val)\n  const isAny = val => isDict(val) || isNumber(val)\n  const isAn", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* rEtURn lenGtH OF Given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* rEtURn lenGtH OF Given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH OF Given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * rEtURn lenGtH ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fOr A Given NuMBER n, find THe larGest NuMber That dividES n eVEnLy, sMaLlEr ThaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  let largestNumber = 0;\n  let largestNumberOfDigits = 0;\n  let largestNumberOfDigitsInTheNumber = 1;\n  let largestNumberOfDigitsInTheNumberOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = 1;\n  let largestNumberOfDigitsInTheNumberOfDigitsOfDigitsOfDigitsOfDigitsOf", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* rEtURn list of pRiME FActorS Of givEn inTeGer in tHe order frOM sMAlLesT tO lArGesT.\n  EaCH Of tHE FaCtors sHOuld be lIStEd nUMBEr oF TimES COrREsPoNding tO hOw Many TIMES iT Appeares in faCToriZation.\n  InPut NumbEr ShoULd be eQUaL tO the prOdUct of ALl facTors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* rEtURn list of pRiME FActorS Of givEn inTeGer in tHe order frOM sMAlLesT tO lArGesT.\n  EaCH Of tHE FaCtors sHOuld be lIStEd nUMBEr oF TimES COrREsPoNding tO hOw Many TIMES iT Appeares in faCToriZation.\n  InPut NumbEr ShoULd be eQUaL tO the prOdUct of ALl facTors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let A = 1;\n  let B = 1;\n  let C = 1;\n  let D = 1;\n  let E = 1;\n  let F = 1;\n  let G = 1;\n  let H = 1;\n  let I = 1;\n  let J = 1;\n  let K = 1;\n  let L = 1;\n  let M = 1;\n  let N = 1;\n  let O = 1;\n  let P = 1;\n  let Q = 1;\n  let R = 1;\n  let S = 1;\n  let T = 1;\n  let U = 1;\n  let V = 1;\n  let W = 1;\n  let X = 1;\n  let Y = 1;\n  let Z = 1;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a1 = 0;\n  let a2 = 0;\n  let a3 = 0;\n  let a4 = 0;\n  let a5 = 0;\n  let a6 = 0;\n  let a7 = 0;\n  let a8 = 0;\n  let a9 = 0;\n  let a10 = 0;\n  let a11 = 0;\n  let a12 = 0;\n  let a13 = 0;\n  let a14 = 0;\n  let a15 = 0;\n  let a16 = 0;\n  let a17 = 0;\n  let a18 = 0;\n  let a19 = 0;\n  let a20 = 0;\n  let a21 = 0;\n  let a22 = 0;\n  let a23 = 0;\n  let a24 = 0;\n  let a25 = 0;\n  let a26 = 0;\n  let a27 = 0;\n  let a28 = 0;\n  let a29 = 0;\n  let a30 = 0;\n  let a31 = 0;\n  let a32 = 0;\n  let a33 = 0;\n  let a34 = 0;\n  let a35 = 0;\n  let a36 = 0;\n  let a37 = 0;\n  let a38 = 0;\n  let a39 = 0;\n  let a40 = 0;\n  let a41 = 0;\n  let a42 = 0;\n  let a43 = 0;\n  let a44 = 0;\n  let a45 = 0;\n  let a46 = 0;\n  let a47 = 0;\n  let a48 = 0;\n  let a49 = 0;\n  let a50 = 0;\n  let a51 = 0;\n  let a52 = 0;\n  let a53 = 0;\n  let a54 = 0;\n  let a55 = 0;\n  let a56 = 0;\n  let a57 = 0;\n  let a58 = 0;\n  let a59 = 0;\n  let a60 = 0;\n  let a61 = 0;\n  let a62 = 0;\n  let a63 = 0;\n  let a64 = 0;\n  let a65 = 0;\n  let a66 = 0;\n  let a67 = 0;\n  let a68 = 0;\n  let a69 = 0;\n  let a70 = 0;\n  let a71 = 0;\n  let a72 = 0;\n  let a73 = 0;\n  let a74 = 0;\n  let a75 = 0;\n  let a76 = 0;\n  let a77 = 0;\n  let a78 = 0;\n  let a79 = 0;\n  let a80 = 0;\n  let a81 = 0;\n  let a82 = 0;\n  let a83 = 0;\n  let a84 = 0;\n  let a85 = 0;\n  let a86 = 0;\n  let a87 = 0;\n  let a88 = 0;\n  let a89 = 0;\n  let a90 = 0;\n  let a91 = 0;\n  let a92 = 0;\n  let a93 = 0;\n  let a94 = 0;\n  let a95 = 0;\n  let a96 = 0;\n  let a97 = 0;\n  let a98 = 0;\n  let a99 = 0;\n  let a100 = 0;\n  let a101 = 0;\n  let a102 = 0;\n  let a103 = 0;\n  let a104 = 0;\n  let a105 = 0;\n  let a106 = 0;\n  let a107 = 0;\n  let a108 = 0;\n  let a109 = 0;\n  let a110 = 0;\n  let a111 = 0;\n  let a112 = 0;\n  let a113 = 0;\n  let a114 = 0;\n  let a115 = 0;\n  let a116 = 0;\n  let a117 = 0;\n  let a118 = 0;\n  let a119 = 0;\n  let a120 = 0;\n  let a121 = 0;\n  let a122 = 0;\n  let a123 = 0;\n  let a124 = 0;\n  let a125 = 0;\n  let a126 = 0;\n  let a127 = 0;\n  let a128 = 0;\n  let a129 = 0;\n  let a130 = 0;\n  let a131 = 0;\n  let a132 = 0;\n  let a133 = 0;\n  let a134 = 0;\n  let a135 = 0;\n  let a136 = 0;\n  let a137 = 0;\n  let a138 = 0;\n  let a139 = 0;\n  let a140 = 0;\n  let a141 = 0;\n  let a142 = 0;\n  let a143 = 0;\n  let a144 = 0;\n  let a145 = 0;\n  let a146 = 0;\n  let a147 = 0;\n  let a148 = 0;\n  let a149 = 0;\n  let a150 = 0;\n  let a151 = 0;\n  let a152 = 0;\n  let a153 = 0;\n  let a154 = 0;\n  let a155 = 0;\n  let a156 = 0;\n  let a157 = 0;\n  let a158 = 0;\n  let a159 = 0;\n  let a160 = 0;\n  let a161 = 0;\n  let a162 = 0;\n  let a163 = 0;\n  let a164 = 0;\n  let a165 = 0;\n  let a166 = 0;\n  let a167 = 0;\n  let a168 = 0;\n  let a169 = 0;\n  let a170 = 0;\n  let a171 = 0;\n  let a172 = 0;\n  let a173 = 0;\n  let a174 = 0;\n  let a175 = 0;\n  let a176 = 0;\n  let a177 = 0;\n  let a178 = 0;\n  let a179 = 0;\n  let a180 = 0;\n  let a181 = 0;\n  let a182 = 0;\n  let a183 = 0;\n  let a184 = 0;\n  let a185 = 0;\n  let a186 = 0;\n  let a187 = 0;\n  let a188 = 0;\n  let a189 = 0;\n  let a190 = 0;\n  let a191 = 0;\n  let a192 = 0;\n  let a193 = 0;\n  let a194 = 0;\n  let a195 = 0;\n  let a196 = 0;\n  let a197 = 0;\n  let a198 = 0;\n  let a199 = 0;\n  let a200 = 0;\n  let a201 = 0;\n  let a202 = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* fRoM A list of inTeGERS, remoVE all eLemeNtS thaT occur morE ThAN oNce.\n  keEp OrDer Of eLEMenTS LeFt the sAMe as in the INpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fRoM A list of inTeGERS, remoVE all eLemeNtS thaT occur morE ThAN oNce.\n  keEp OrDer Of eLEMenTS LeFt the sAMe as in the INpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicates }\n\n},{}],9:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesI = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesI }\n\n},{\"./removeDuplicates\":8}],10:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesII = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesII }\n\n},{\"./removeDuplicates\":8}],11:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesIII = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesIII }\n\n},{\"./removeDuplicates\":8}],12:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesIV = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesIV }\n\n},{\"./removeDuplicates\":8}],13:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesV = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesV }\n\n},{\"./removeDuplicates\":8}],14:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesVI = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesVI }\n\n},{\"./removeDuplicates\":8}],15:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesVII = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesVII }\n\n},{\"./removeDuplicates\":8}],16:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesVIII = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesVIII }\n\n},{\"./removeDuplicates\":8}],17:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesIX = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesIX }\n\n},{\"./removeDuplicates\":8}],18:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesX = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesX }\n\n},{\"./removeDuplicates\":8}],19:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesXI = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesXI }\n\n},{\"./removeDuplicates\":8}],20:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesXII = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesXII }\n\n},{\"./removeDuplicates\":8}],21:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesXIII = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesXIII }\n\n},{\"./removeDuplicates\":8}],22:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesXIV = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesXIV }\n\n},{\"./removeDuplicates\":8}],23:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesXV = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesXV }\n\n},{\"./removeDuplicates\":8}],24:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')\n\nconst removeDuplicatesXVI = (numbers) => {\n  const seen = new Set()\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false\n    }\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicatesXVI }\n\n},{\"./removeDuplicates\":8}],25:[function(require,module,exports){\nconst { removeDuplicates } = require('./removeDuplicates')", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* fOr A Given string, FlIP LOwercASe chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fOr A Given string, FlIP LOwercASe chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((letter) => letter.charAt(0).toUpperCase() + letter.slice(1))\n   .join('');\n};\n\n/**\n  >>> isBlank A Given string, FlIP isBlank chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isBlank('Hello')\n  true\n  */\nconst isBlank = (string) => {\n  return string === '';\n};\n\n/**\n  >>> isEmpty A Given string, FlIP isEmpty chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isEmpty('Hello')\n  false\n  */\nconst isEmpty = (string) => {\n  return string === null || string === undefined;\n};\n\n/**\n  >>> isNumber A Given string, FlIP isNumber chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isNumber('Hello')\n  true\n  */\nconst isNumber = (string) => {\n  return!isNaN(parseFloat(string));\n};\n\n/**\n  >>> isObject A Given string, FlIP isObject chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isObject('Hello')\n  true\n  */\nconst isObject = (string) => {\n  return typeof string === 'object';\n};\n\n/**\n  >>> isString A Given string, FlIP isString chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isString('Hello')\n  true\n  */\nconst isString = (string) => {\n  return typeof string ==='string';\n};\n\n/**\n  >>> isSymbol A Given string, FlIP isSymbol chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isSymbol('Hello')\n  true\n  */\nconst isSymbol = (string) => {\n  return typeof string ==='symbol';\n};\n\n/**\n  >>> isType A Given string, FlIP isType chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isType('Hello')\n  true\n  */\nconst isType = (string) => {\n  return typeof string ==='string' || typeof string ==='symbol';\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string) && isNumber(string) && isSymbol(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string) && isNumber(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string) || isNumber(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string) || isNumber(string) || isSymbol(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string) || isNumber(string) || isSymbol(string) || isBlank(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string) || isNumber(string) || isSymbol(string) || isBlank(string) || isBlank(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string) || isNumber(string) || isSymbol(string) || isBlank(string) || isBlank(string) || isBlank(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string) || isNumber(string) || isSymbol(string) || isBlank(string) || isBlank(string) || isBlank(string) || isBlank(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string) || isNumber(string) || isSymbol(string) || isBlank(string) || isBlank(string) || isBlank(string) || isBlank(string) || isBlank(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n  */\nconst isValid = (string) => {\n  return isString(string) || isNumber(string) || isSymbol(string) || isBlank(string) || isBlank(string) || isBlank(string) || isBlank(string) || isBlank(string) || isBlank(string);\n};\n\n/**\n  >>> isValid A Given string, FlIP isValid chaRactErS to uPpercase aND uPPeRcaSe To LoWerCasE.\n  >>> isValid('Hello')\n  true\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['x', 'y', 'z'])\n  'xyz'\n  */\nconst concat = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concat(['x', 'y', 'z'])\n  'xyz'\n  >>> concat(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWith = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWith(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWith(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWith = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWith(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWith(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWithAllWith(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAllWith = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAllWith(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWithAllWithAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAllWithAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAllWithAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWithAllWithAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAllWithAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAllWithAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWithAllWithAllWith(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAllWithAllWith = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAllWithAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWithAllWithAllWith(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAllWithAllWithAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAllWithAllWithAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWithAllWithAllWithAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAllWithAllWithAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAllWithAllWithAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWithAllWithAllWithAllWithAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAllWithAllWithAllWithAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAllWithAllWithAllWithAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWithAllWithAllWithAllWithAllWithAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAllWithAllWithAllWithAllWithAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAllWithAllWithAllWithAllWithAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWithAllWithAllWithAllWithAllWithAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAllWithAllWithAllWithAllWithAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAllWithAllWithAllWithAllWithAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAllWithAllWithAllWithAllWithAllWithAllWithAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAllWithAllWithAllWithAllWithAllWithAllWithAll = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/* cOnCAtenaTe list OF strings INto a sINgle sTrinG\n  >>> concatAllWithAllWithAllWithAllWithAllWithAllWithAllWith", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* fIlTEr an iNpUT list OF strings only FOr oneS thaT sTart With a giveN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fIlTEr an iNpUT list OF strings only FOr oneS thaT sTart With a giveN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefix = filterByPrefix;\n\n/**\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde']\n  */", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* yOu'RE giveN a list OF DEposiT And wiThdrAwAl operations on A bank accoUNt THaT stArTs WiTh\n  zEro balance. yOUr tASK iS to detECt if at aNY pOinT THE balance of ACcoUNT FaLLlS bElow zeRo, AnD\n  at tHAT POiNT function sHOuld return True. OtheRwiSe it ShOulD return False.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* yOu'RE giveN a list OF DEposiT And wiThdrAwAl operations on A bank accoUNt THaT stArTs WiTh\n  zEro balance. yOUr tASK iS to detECt if at aNY pOinT THE balance of ACcoUNT FaLLlS bElow zeRo, AnD\n  at tHAT POiNT function sHOuld return True. OtheRwiSe it ShOulD return False.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const { yOu, yOr, yOuR, yOuR, yOuS, yOuS, yOuT, yOuT, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, yOuU, y", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*RETuRN only PoSITIve nuMBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN only PoSITIve nuMBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n  >>> getPositiveAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegative = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n  >>> getPositiveAndNegativeAndZero([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] === 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n  >>> getPositiveAndNegativeAndZeroAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndZeroAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndZeroAndNegative = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] === 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZero([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndZeroAndNegativeAndZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] === 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegative = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] === 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZero([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] === 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegative = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] === 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZero([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegative = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] === 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAndNegativeAndZeroAnd", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*RETuRN true If A GIVen nuMBer is PrimE, aNd faLse otherwISe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN true If A GIVen nuMBer is PrimE, aNd faLse otherwISe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let i = Math.sqrt(n);\n  let factor = 2;\n  while (i > 1) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = Math.floor(i / factor);\n    factor *= 2;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(150)\n  true\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  >>> isPrime(239)\n  false\n  >>> isPrime(240)\n  false\n  >>> isPrime(241)\n  false\n  >>> isPrime(242)\n  false\n  >>> isPrime(243)\n  false\n  >>> isPrime(244)\n  false\n  >>> isPrime(245)\n  false\n  >>> isPrime(246)\n  false\n  >>> isPrime(247)\n  false\n  >>> isPrime(248)\n  false\n  >>> isPrime(249)\n  false\n  >>> isPrime(250)\n  false\n  >>> isPrime(251)\n  false\n  >>> isPrime(252)\n  false\n  >>> isPrime(253)\n  false\n  >>> isPrime(254)\n  false\n  >>> isPrime(255)\n  false\n  >>> isPrime(256)\n  false\n  >>> isPrime(257)\n  false\n  >>> isPrime(258)\n  false\n  >>> isPrime(259)\n  false\n  >>> isPrime(260)\n  false\n  >>> isPrime(261)\n  false\n  >>> isPrime(262)\n  false\n  >>> isPrime(263)\n  false\n  >>> isPrime(264", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  eVaLUates PoLYNOmial WIth coEffiCiEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncoNSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  eVaLUates PoLYNOmial WIth coEffiCiEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncoNSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) {\n    return NaN;\n  }\n  return zeros.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) {\n    return NaN;\n  }\n  return zeros.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) {\n    return NaN;\n  }\n  return zeros.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) {\n    return NaN;\n  }\n  return zeros.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As iT guaRAntEEs\n  a soluTiON.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) {\n    return NaN;\n  }\n  return zeros.reduce((prev, item) => {\n    return prev + item;\n  }, 0);\n}\n\n/*\n  xs ARe CoeFfIcIeNts Of a POLynOMIaL.\n  findZero find x sUCh that poly(x) = 0.\n  findZero rETuRns ONLY onLY zeRO POiNT, eVeN if theRe ArE manY.\n  mOREoVEr, findZero only takeS list xs HaviNg even nuMbeR of cOeFfiCIents\n  ANd LaRgest nOn Zero cOEfficIent As ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe IndIcIeS tHat Are NOT diVISiBle by three, wHIle its vALuEs aT THE inDIciES THaT ArE dIvisibLe By three Are eQUAL\n  To THe values of THe coRrespondIng IndiCiEs oF l, But soRTeD.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe IndIcIeS tHat Are NOT diVISiBle by three, wHIle its vALuEs aT THE inDIciES THaT ArE dIvisibLe By three Are eQUAL\n  To THe values of THe coRrespondIng IndiCiEs oF l, But soRTeD.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const [l,...l2] = l;\n  return l2.sort((a, b) => a - b);\n};\n\n/*\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirdByTwo([5, 6, 3, 4, 8, 9, 2])\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN sortEd unique ELEMents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueInt = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueFloat = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBool = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObject = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSet = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectList = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSet = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectObject = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetList = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetObject = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetSet = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetObjectList = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetObjectSetList = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetObjectSetObject = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetObjectSetSet = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetObjectSetObjectList = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetObjectSetSetList = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetObjectSetObjectList = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!seen.has(el)) {\n      seen.add(el)\n      return false\n    }\n    return true\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueObjectSetObjectSetSetObject = l => {\n  let seen = new Set()\n  return l.filter((el, i) => {\n    if (!", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*RETuRN maxiMuM ELEment in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN maxiMuM ELEment in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElem;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxElem = e;\n    }\n  });\n  return maxElem;\n};\n\n/*\n  >>> maxElementInListInListInListInListIn", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*RETuRN the nUmBER Of timES the dIgit 7 ApPearS in integers LEsS ThAn n wHiCh ArE diVisIBLe bY 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN the nUmBER Of timES the dIgit 7 ApPearS in integers LEsS ThAn n wHiCh ArE diVisIBLe bY 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let nUmBER = 0;\n  let dIgit = 7;\n  let LEsS = Math.ceil(Math.log(n) / Math.log(10));\n  let wHiCh = Math.floor((n - LEsS) / Math.log(10));\n  let ArE = Math.floor((n - wHiCh) / Math.log(10));\n  let diVisIBLE = 11 - ArE;\n  let bY = 13 - ArE;\n  if (bY > ArE) {\n    bY = ArE;\n  }\n  if (diVisIBLE > ArE) {\n    diVisIBLE = ArE;\n  }\n  if (bY === ArE) {\n    bY = 1;\n  }\n  if (diVisIBLE === ArE) {\n    diVisIBLE = 1;\n  }\n  let nIgit = 0;\n  for (let i = 0; i < LEsS; i++) {\n    nIgit += dIgit * Math.pow(10, wHiCh - i);\n  }\n  return nUmBER + nIgit * diVisIBLE;\n};\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  1\n  >>> fizzBuzz(102)\n  2\n  >>> fizzBuzz(103)\n  3\n  >>> fizzBuzz(104)\n  4\n  >>> fizzBuzz(105)\n  5\n  >>> fizzBuzz(106)\n  6\n  >>> fizzBuzz(107)\n  7\n  >>> fizzBuzz(108)\n  8\n  >>> fizzBuzz(109)\n  9\n  >>> fizzBuzz(110)\n  10\n  >>> fizzBuzz(111)\n  11\n  >>> fizzBuzz(112)\n  12\n  >>> fizzBuzz(113)\n  13\n  >>> fizzBuzz(114)\n  14\n  >>> fizzBuzz(115)\n  15\n  >>> fizzBuzz(116)\n  16\n  >>> fizzBuzz(117)\n  17\n  >>> fizzBuzz(118)\n  18\n  >>> fizzBuzz(119)\n  19\n  >>> fizzBuzz(120)\n  20\n  >>> fizzBuzz(121)\n  21\n  >>> fizzBuzz(122)\n  22\n  >>> fizzBuzz(123)\n  23\n  >>> fizzBuzz(124)\n  24\n  >>> fizzBuzz(125)\n  25\n  >>> fizzBuzz(126)\n  26\n  >>> fizzBuzz(127)\n  27\n  >>> fizzBuzz(128)\n  28\n  >>> fizzBuzz(129)\n  29\n  >>> fizzBuzz(130)\n  30\n  >>> fizzBuzz(131)\n  31\n  >>> fizzBuzz(132)\n  32\n  >>> fizzBuzz(133)\n  33\n  >>> fizzBuzz(134)\n  34\n  >>> fizzBuzz(135)\n  35\n  >>> fizzBuzz(136)\n  36\n  >>> fizzBuzz(137)\n  37\n  >>> fizzBuzz(138)\n  38\n  >>> fizzBuzz(139)\n  39\n  >>> fizzBuzz(140)\n  40\n  >>> fizzBuzz(141)\n  41\n  >>> fizzBuzz(142)\n  42\n  >>> fizzBuzz(143)\n  43\n  >>> fizzBuzz(144)\n  44\n  >>> fizzBuzz(145)\n  45\n  >>> fizzBuzz(146)\n  46\n  >>> fizzBuzz(147)\n  47\n  >>> fizzBuzz(148)\n  48\n  >>> fizzBuzz(149)\n  49\n  >>> fizzBuzz(150)\n  50\n  >>> fizzBuzz(151)\n  51\n  >>> fizzBuzz(152)\n  52\n  >>> fizzBuzz(153)\n  53\n  >>> fizzBuzz(154)\n  54\n  >>> fizzBuzz(155)\n  55\n  >>> fizzBuzz(156)\n  56\n  >>> fizzBuzz(157)\n  57\n  >>> fizzBuzz(158)\n  58\n  >>> fizzBuzz(159)\n  59\n  >>> fizzBuzz(160)\n  60\n  >>> fizzBuzz(161)\n  61\n  >>> fizzBuzz(162)\n  62\n  >>> fizzBuzz(163)\n  63\n  >>> fizzBuzz(164)\n  64\n  >>> fizzBuzz(165)\n  65\n  >>> fizzBuzz(166)\n  66\n  >>> fizzBuzz(167)\n  67\n  >>> fizzBuzz(168)\n  68\n  >>> fizzBuzz(169)\n  69\n  >>> fizzBuzz(170)\n  70\n  >>> fizzBuzz(171)\n  71\n  >>> fizzBuzz(172)\n  72\n  >>> fizzBuzz(173)\n  73\n  >>> fizzBuzz(174)\n  74\n  >>> fizzBuzz(175)\n  75\n  >>> fizzBuzz(176)\n  76\n  >>> fizzBuzz(177)\n  77\n  >>> fizzBuzz(178)\n  78\n  >>> fizzBuzz(179)\n  79\n  >>> fizzBuzz(180)\n  80\n  >>> fizzBuzz(181)\n  81\n  >>> fizzBuzz(182)\n  82\n  >>> fizzBuzz(183)\n  83\n  >>> fizzBuzz(184)\n  84\n  >>> fizzBuzz(185)\n  85\n  >>> fizzBuzz(186)\n  86\n  >>> fizzBuzz(187)\n  87\n  >>> fizzBuzz(188)\n  88\n  >>> fizzBuzz(189)\n  89\n  >>> fizzBuzz(190)\n  90\n  >>> fizzBuzz(191)\n  91\n  >>> fizzBuzz(192)\n  92\n  >>> fizzBuzz(193)\n  93\n  >>> fizzBuzz(194)\n  94\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe Odd InDiCiEs, wHilE ITs vALUeS at the even INdicies ARe EquAL\n  TO thE ValUES Of THe even InDicies Of l, BuT sorTED.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*THIs FUnctiOn TAKEs a list l and REturnS a list l' sucH tHat\n  l' iS identicaL To l in THe Odd InDiCiEs, wHilE ITs vALUeS at the even INdicies ARe EquAL\n  TO thE ValUES Of THe even InDicies Of l, BuT sorTED.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? 1 : -1);\n  return l2;\n};\n\n/**\n  >>> sortOdd\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOdd = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? -1 : 1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOdd\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOdd = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? 1 : -1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOdd\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? 1 : -1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEven\n  >>> sortEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? -1 : 1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEven\n  >>> sortEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? 1 : -1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEvenOddEven\n  >>> sortEvenOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? -1 : 1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEvenOddEven\n  >>> sortEvenOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? 1 : -1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEvenOddEven\n  >>> sortEvenOddOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEvenOddEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? -1 : 1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEvenOddEvenOddEven\n  >>> sortEvenOddOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? 1 : -1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEvenOddEvenOddEven\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? -1 : 1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEven\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? 1 : -1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEven\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1? -1 : 1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\n  >>> sortEvenOddOddEvenOddEvenOddEvenOddEven", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takeS As input STrIng ENCOdeD WitH ENCoDE_cYcLic funCtIoN. RetURNS DeCOded string.\n  */\nCOnst decodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElSe\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  REtURns enCoDED StrinG By cycLing groups Of ThreE characteRS.\n  */\ncONsT encodeCyclic = (s) => {\n  vaR groups = [], groups2 = [];\n  fOr (LeT i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (coNST group of groups) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibonAcci NuMber And it's alsO PrIMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [];\n  while (i <= n) {\n    fib[i] = i;\n    i++;\n  }\n  return fib;\n};\n\n/*\n  primeFib REtURns n-th nuMbER THat is A fibon", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num / numbers.length, 0);\n  return Math.sqrt(mean);\n};\n\n/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num / numbers.length, 0);\n  return Math.sqrt(mean);\n};\n\n/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num / numbers.length, 0);\n  return Math.sqrt(mean);\n};\n\n/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  4.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num / numbers.length, 0);\n  return Math.sqrt(mean);\n};\n\n/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  5.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num / numbers.length, 0);\n  return Math.sqrt(mean);\n};\n\n/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  6.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num / numbers.length, 0);\n  return Math.sqrt(mean);\n};\n\n/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  7.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num / numbers.length, 0);\n  return Math.sqrt(mean);\n};\n\n/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  8.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num / numbers.length, 0);\n  return Math.sqrt(mean);\n};\n\n/* fOr A Given list Of INPUt numbers, calCUlate mean abSoluTe DeviatiON\n  aROuNd tHe mean Of ThIs dAtaSET.\n  MeAN abSolute dEviatioN Is The AVERagE AbsOLUTe DIfFeRence bEtWeEn eaCH\n  ELEmENt and a centERpoiNt (mean in this caSe):\n  MaD = avErAge | X - X_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  9.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, num) => acc + num / numbers.length, 0);\n  return Math.sqrt(mean);\n};\n\n/* fOr A Given list Of INPUt number", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Zero, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToOne TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO One, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Two, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 2;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Three, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 3;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Four, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 4;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Five, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 5;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Six, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 6;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE ThRee DiStInCt eLemENTs in tHE list ThAt\n  sum tO Seven, and FAlSe oTHERwiSE.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 7;\n  for (let i = 0; i < l.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  iMaGIne a rOaD THAt's a pERfectLy stRaIght InfinitelY LoNG lIne.\n  n CaRs ArE drIviNG LefT TO rIght;  siMUltaneoUSlY, a dIFFEreNT seT OF n CaRS\n  aRe DrivinG rIgHt to LEFT.   thE Two sets of cARs stArt out beIng Very FaR frOM\n  each OThEr.  all carS mOve in thE Same sPeed.  two Cars ARe sAId to colLiDE\n  wheN a CAr That'S MovinG Left to riGht hIts a cAr thAT'S mOving rIghT tO LEFt.\n  HoweVer, the cArs are InfiniTELy sturdY aND strong; AS a resULT, They CONtInue mOvING\n  in THEiR trajectory as If tHEy Did nOt cOlLiDE.\n\n  ThIs fuNction outpUts The nUmBer Of sUch collisioNs.\n  */\nconST carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  iMaGIne a rOaD THAt's a pERfectLy stRaIght InfinitelY LoNG lIne.\n  n CaRs ArE drIviNG LefT TO rIght;  siMUltaneoUSlY, a dIFFEreNT seT OF n CaRS\n  aRe DrivinG rIgHt to LEFT.   thE Two sets of cARs stArt out beIng Very FaR frOM\n  each OThEr.  all carS mOve in thE Same sPeed.  two Cars ARe sAId to colLiDE\n  wheN a CAr That'S MovinG Left to riGht hIts a cAr thAT'S mOving rIghT tO LEFt.\n  HoweVer, the cArs are InfiniTELy sturdY aND strong; AS a resULT, They CONtInue mOvING\n  in THEiR trajectory as If tHEy Did nOt cOlLiDE.\n\n  ThIs fuNction outpUts The nUmBer Of sUch collisioNs.\n  */\nconST carRaceCollision = (n) => {\n  const car = n.car;\n  const cars = n.cars;\n  const carsLength = cars.length;\n  const carsArr = Array.from(cars);\n  const carsArrLength = carsArr.length;\n  const carsArrArr = Array.from(carsArr);\n  const carsArrArrLength = carsArrArr.length;\n  const carsArrArrArrLength = carsArrArrArr.length;\n  const carsArrArrArrArrLength = carsArrArrArrArr.length;\n  const carsArrArrArrArrArrLength = carsArrArrArrArrArr.length;\n  const carsArrArrArrArrArrArrArrLength = carsArrArrArrArrArrArrArr.length;\n  const carsArrArrArrArrArrArrArrArrArrLength = carsArrArrArrArrArrArrArrArrArr.length;\n  const carsArrArrArrArrArrArrArrArrArrArrArrArrArrLength = carsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*RETuRN list with ElEMENts inCRemenTed bY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN list with ElEMENts inCRemenTed bY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let el\n  while ((el = l[i])!== undefined) {\n    if (el === undefined) {\n      ret[i] = undefined\n      break\n    }\n    if (el === 1) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 2) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 3) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 4) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 5) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 6) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 7) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 8) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 9) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 10) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 11) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 12) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 13) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 14) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 15) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 16) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 17) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 18) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 19) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 20) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 21) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 22) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 23) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 24) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 25) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 26) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 27) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 28) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 29) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 30) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 31) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 32) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 33) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 34) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 35) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 36) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 37) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 38) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 39) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 40) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 41) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 42) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 43) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 44) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 45) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 46) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 47) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 48) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 49) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 50) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 51) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 52) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 53) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 54) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 55) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 56) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 57) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 58) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 59) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 60) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 61) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 62) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 63) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 64) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 65) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 66) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 67) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 68) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 69) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 70) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 71) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 72) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 73) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 74) {\n      ret[i] = el\n      i++\n      continue\n    }\n    if (el === 75) {\n      ret[i] = el\n      i++\n      continue\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight TAkES a list of iNtEGERs as aN Input.\n  It reTuRns tRue if therE ArE TwO diStInCt EleMenTS in The list THAt\n  Sum to zERo, and faLSe OthERWIse.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*CHAnGE numeRiCAL base Of inpUT numbEr x to base.\n  return StRing RepresentATiON aFteR tHe CoNveRsiON.\n  base NumBERs Are lesS Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CHAnGE numeRiCAL base Of inpUT numbEr x to base.\n  return StRing RepresentATiON aFteR tHe CoNveRsiON.\n  base NumBERs Are lesS Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let ret = '';\n  if (base === 10) {\n    ret = x.toString();\n  } else if (base === 2) {\n    ret = x.toString().split('').reverse().join('');\n  } else {\n    ret = x.toString().split('').reverse().join('').split('').map(e => e.toString()).reverse().join('');\n  }\n  return ret;\n};\n\nconst getBase = (x) => {\n  let ret = '';\n  if (x === 10) {\n    ret = '10';\n  } else if (x === 2) {\n    ret = '2';\n  } else {\n    ret = '' + x.toString().split('').reverse().join('');\n  }\n  return ret;\n};\n\nconst getBaseOf = (x) => {\n  let ret = '';\n  if (x === 10) {\n    ret = '10';\n  } else if (x === 2) {\n    ret = '2';\n  } else {\n    ret = '' + x.toString().split('').reverse().join('').split('').map(e => e.toString()).reverse().join('');\n  }\n  return ret;\n};\n\nconst getBaseOfNum = (x) => {\n  let ret = '';\n  if (x === 10) {\n    ret = '10';\n  } else if (x === 2) {\n    ret = '2';\n  } else {\n    ret = '' + x.toString().split('').reverse().join('').split('').map(e => e.toString()).reverse().join('');\n  }\n  return ret;\n};\n\nconst getBaseOfNumOf = (x) => {\n  let ret = '';\n  if (x === 10) {\n    ret = '10';\n  } else if (x === 2) {\n    ret = '2';\n  } else {\n    ret = '' + x.toString().split('').reverse().join('').split('').map(e => e.toString()).reverse().join('').split('').map(e => e.toString()).reverse().join('');\n  }\n  return ret;\n};\n\nconst getBaseOfNumOfNum = (x) => {\n  let ret = '';\n  if (x === 10) {\n    ret = '10';\n  } else if (x === 2) {\n    ret = '2';\n  } else {\n    ret = '' + x.toString().split('').reverse().join('').split('').map(e => e.toString()).reverse().join('').split('').map(e => e.toString()).reverse().join('').split('').map(e => e.toString()).reverse().join('');\n  }\n  return ret;\n};\n\nconst getBaseOfNumOfNumOf = (x) => {\n  let ret = '';\n  if (x === 10) {\n    ret = '10';\n  } else if (x === 2) {\n    ret = '2';\n  } else {\n    ret = '' + x.toString().split('').reverse().join('').split('').map(e => e.toString()).reverse().join('').split('').map(e => e.toString()).reverse().join('').split('').map(e => e.toString()).reverse().join('');\n  }\n  return ret;\n};\n\nconst getBaseOfNumOfNumOfNumOf = (x) => {\n  let ret = '';\n  if (x === 10) {\n    ret = '10';\n  } else if (x === 2) {\n    ret = '2';\n  } else {\n    ret = '' + x.toString().split('').reverse().join('').split('').map(e => e.toString()).reverse().join('').split('').map(e => e.toString()).reverse().join('').split('').map(e => e.toString()).reverse().join('');\n  }\n  return ret;\n};\n\nconst getBaseOfNumOfNumOfNumOfNumOf = (x) => {\n  let ret = '';\n  if (x === 10) {\n    ret = '10';\n  } else if (x === 2) {\n    ret = '2';\n  } else {\n    ret = '' + x.toString().split('').reverse().join('').split('').map(e => e.toString()).reverse().join('').split('').map(e => e.toString()).reverse().join('').split('').map(e => e.toString()).reverse().join('').split('').map(e => e.toString()).reverse().join('');\n  }\n  return ret;\n};\n\nconst getBaseOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOfNumOf", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIVeN LengtH oF a SIDe and HIgh return arEa foR a tRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 4)\n  12.5\n  */\nconst triangleArea2 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 5)\n  15.0\n  */\nconst triangleArea3 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 6)\n  23.0\n  */\nconst triangleArea4 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 7)\n  30.0\n  */\nconst triangleArea5 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 8)\n  45.0\n  */\nconst triangleArea6 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 9)\n  60.0\n  */\nconst triangleArea7 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 10)\n  80.0\n  */\nconst triangleArea8 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 11)\n  90.0\n  */\nconst triangleArea9 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 12)\n  100.0\n  */\nconst triangleArea10 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 13)\n  120.0\n  */\nconst triangleArea11 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 14)\n  140.0\n  */\nconst triangleArea12 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 15)\n  160.0\n  */\nconst triangleArea13 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 16)\n  180.0\n  */\nconst triangleArea14 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 17)\n  200.0\n  */\nconst triangleArea15 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 18)\n  220.0\n  */\nconst triangleArea16 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 19)\n  240.0\n  */\nconst triangleArea17 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 20)\n  260.0\n  */\nconst triangleArea18 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 21)\n  280.0\n  */\nconst triangleArea19 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 22)\n  300.0\n  */\nconst triangleArea20 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 23)\n  320.0\n  */\nconst triangleArea21 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 24)\n  340.0\n  */\nconst triangleArea22 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 25)\n  360.0\n  */\nconst triangleArea23 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 26)\n  370.0\n  */\nconst triangleArea24 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 27)\n  400.0\n  */\nconst triangleArea25 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 28)\n  420.0\n  */\nconst triangleArea26 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 29)\n  440.0\n  */\nconst triangleArea27 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 30)\n  460.0\n  */\nconst triangleArea28 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 31)\n  480.0\n  */\nconst triangleArea29 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 32)\n  500.0\n  */\nconst triangleArea30 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 33)\n  520.0\n  */\nconst triangleArea31 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 34)\n  540.0\n  */\nconst triangleArea32 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 35)\n  560.0\n  */\nconst triangleArea33 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangleArea(6, 36)\n  580.0\n  */\nconst triangleArea34 = (a, h) => {\n  const a = Math.sqrt(a * a + h * h);\n  return a * h;\n};\n\n/*\n  >>> triangle", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/46", "prompt": "/*THE FIB4 numbEr SEQUence IS a seqUencE sImilAr to the FiBBoNAcCi sEqUnEcE thAt's DEFinED As FollowS:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*THE FIB4 numbEr SEQUence IS a seqUencE sImilAr to the FiBBoNAcCi sEqUnEcE thAt's DEFinED As FollowS:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let fib4 = 0;\n  let fib4Seq = [];\n  for (let i = 1; i <= n; i++) {\n    fib4Seq.push(i);\n    fib4 = fib4 + fib4Seq[i - 1];\n  }\n  return fib4;\n};\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  0\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  0\n  >>> fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4Seq = (n) => {\n  let fib4Seq = [];\n  for (let i = 1; i <= n; i++) {\n    fib4Seq.push(i);\n  }\n  return fib4Seq;\n};\n\n/*\n  >>> fib4Seq(0)\n  [0]\n  >>> fib4Seq(1)\n  [0]\n  >>> fib4Seq(2)\n  [1]\n  >>> fib4Seq(3)\n  [1]\n  >>> fib4Seq(n) -> fib4Seq(n-1) + fib4Seq(n-2) + fib4Seq(n-3) + fib4Seq(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4Seq(5)\n  [4]\n  >>> fib4Seq(6)\n  [8]\n  >>> fib4Seq(7)\n  [14]\n  */\nconst fib4Seq = (n) => {\n  let fib4Seq = [];\n  for (let i = 1; i <= n; i++) {\n    fib4Seq.push(i);\n  }\n  return fib4Seq;\n};\n\n/*\n  >>> fib4Seq(0)\n  [0]\n  >>> fib4Seq(1)\n  [0]\n  >>> fib4Seq(2)\n  [1]\n  >>> fib4Seq(3)\n  [1]\n  >>> fib4Seq(n) -> fib4Seq(n-1) + fib4Seq(n-2) + fib4Seq(n-3) + fib4Seq(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4Seq(5)\n  [4]\n  >>> fib4Seq(6)\n  [8]\n  >>> fib4Seq(7)\n  [14]\n  */\nconst fib4Seq = (n) => {\n  let fib4Seq = [];\n  for (let i = 1; i <= n; i++) {\n    fib4Seq.push(i);\n  }\n  return fib4Seq;\n};\n\n/*\n  >>> fib4Seq(0)\n  [0]\n  >>> fib4Seq(1)\n  [0]\n  >>> fib4Seq(2)\n  [1]\n  >>> fib4Seq(3)\n  [1]\n  >>> fib4Seq(n) -> fib4Seq(n-1) + fib4Seq(n-2) + fib4Seq(n-3) + fib4Seq(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4Seq(5)\n  [4]\n  >>> fib4Seq(6)\n  [8]\n  >>> fib4Seq(7)\n  [14]\n  */\nconst fib4Seq = (n) => {\n  let fib4Seq = [];\n  for (let i = 1; i <= n; i++) {\n    fib4Seq.push(i);\n  }\n  return fib4Seq;\n};\n\n/*\n  >>> fib4Seq(0)\n  [0]\n  >>> fib4Seq(1)\n  [0]\n  >>> fib4Seq(2)\n  [1]\n  >>> fib4Seq(3)\n  [1]\n  >>> fib4Seq(n) -> fib4Seq(n-1) + fib4Seq(n-2) + fib4Seq(n-3) + fib4Seq(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4Seq(5)\n  [4]\n  >>> fib4Seq(6)\n  [8]\n  >>> fib4Seq(7)\n  [14]\n  */\nconst fib4Seq = (n) => {\n  let fib4Seq = [];\n  for (let i = 1; i <= n; i++) {\n    fib4Seq.push(i);\n  }\n  return fib4Seq;\n};\n\n/*\n  >>> fib4Seq(0)\n  [0]\n  >>> fib4Seq(1)\n  [0]\n  >>> fib4Seq(2)\n  [1]\n  >>> fib4Seq(3)\n  [1]\n  >>> fib4Seq(n) -> fib4Seq(n-1) + fib4Seq(n-2) + fib4Seq(n-3) + fib4Seq(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n  >>> fib4Seq(5)\n  [4]\n  >>> fib4Seq(6)\n  [8]\n  >>> fib4Seq(7)\n  [14]\n  */\nconst fib4Seq = (n) => {\n  let fib4Seq = [];\n  for (let i = 1; i <= n; i++) {\n    fib4Seq.push(i);\n  }\n  return fib4Seq;\n};\n\n/*\n  >>> fib4Seq(0)\n  [0]\n  >>> fib4Seq(1)\n  [0]\n  >>> fib4Seq(2)\n  [1]\n  >>> fib4Seq(3)\n  [1]\n  >>> fib4Seq(n) -> fib4Seq(n-1) + fib4Seq(n-2) + fib4Seq(n-3) + fib4Seq(n-4).\n  please wRItE a fUNCTioN To eFFICiENtLy ComputE tHe n-th ElemENT OF tHE fib4 number seqUEnce.  do not use RecUrsiOn.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*RETuRN median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN median of elEmENTS in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let j = 0\n  let ret = 0\n  while (i < m) {\n    j = i + 1\n    if (l[j] < l[m]) {\n      i = j\n      j = m\n    }\n    ret = l[j] + ret\n  }\n  return ret\n}\n\n/**\n  >>> average([3, 1, 2, 4, 5])\n  3\n  >>> average([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst average = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 2)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 2)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 3)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 3)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 4)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 4)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 5)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 5)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 6)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 6)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 7)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 7)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 8)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 8)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 9)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 9)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 10)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 10)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 11)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 11)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 12)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 12)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 13)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], 13)\n  8.0\n  */\nconst averageOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let m = l.length / 2\n  let i = Math.floor(m)\n  let ret = 0\n  while (i < m) {\n    ret = ret + l[i]\n    i = i + 1\n  }\n  return ret / m\n}\n\n/**\n  >>> medianOf([3, 1, 2, 4, 5], 14)\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20], ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/48", "prompt": "/*\n  cHeCKs if gIvEN STring IS a palIndrOmE\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  cHeCKs if gIvEN STring IS a palIndrOmE\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let len = text.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289;\n  let temp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*RETuRN 2^n modUlO p (BE Aware OF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN 2^n modUlO p (BE Aware OF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const [d, r] = divmod(n, p);\n  return d === 0? 0 : d === 1? 1 : d % 2 === 0? r : modp(n - d, p);\n};\n\n/*\n  >>> modp(-3, 5)\n  -3\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 11)\n  8\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 100)\n  8\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* iNsERt a nuMbER 'delimeter' BEtweeN Every Two cOnSecuTive elemeNTs OF iNpuT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* iNsERt a nuMbER 'delimeter' BEtweeN Every Two cOnSecuTive elemeNTs OF iNpuT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n\n  while (i < numbers.length) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n\n    if (numbers[i] === deli", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  TAkEs aS INPut STriNG ENcODeD wIth encOdE_sHift FUNCTiON. Returns deCOded String.\n  */\ncoNst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  TAkEs aS INPut STriNG ENcODeD wIth encOdE_sHift FUNCTiON. Returns deCOded String.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"a\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCoDED StrinG By shiFtinG eVery Character BY 5 in tHE aLphAbEt.\n  */\nCoNst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".chARcodEaT(0)) % 26) + \"A\".CharCoDEAt(0)\n  )).join(\"\");\n}\n\n/*\n  REtURns enCo", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT vOweLs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT vOweLs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  vowels.forEach((vowel) => {\n    const index = text.indexOf(vowel);\n    if (index > -1) {\n      newText = text.substring(0, index) + text.substring(index + vowel.length);\n    }\n  });\n  return newText;\n};\n\n/*\n  removePunctuation IS a FUnctiOn THAT takeS StrinG and ReTurnS string wiTHoUT punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  const punctuations = ['.', ',', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!', ':', ';', '?', '!", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*RETuRN true If ALL NumbeRS in the list l aRe beLoW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN true If ALL NumbeRS in the list l aRe beLoW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum >= t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n  >>> findMax(l)\n  4\n  >>> findMax([1,2,3,4,5,6,7,8,9,10])\n  9\n  >>> findMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n  15\n  >>> findMax([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,70", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*ADD tWO numbErS x AND y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  let tWO = x % y;\n  let numbErS = y % x;\n  let tWO2 = tWO * 2;\n  let tWO3 = tWO * 3;\n  let tWO4 = tWO * 4;\n  let tWO5 = tWO * 5;\n  let tWO6 = tWO * 6;\n  let tWO7 = tWO * 7;\n  let tWO8 = tWO * 8;\n  let tWO9 = tWO * 9;\n  let tWO10 = tWO * 10;\n  let tWO11 = tWO * 11;\n  let tWO12 = tWO * 12;\n  let tWO13 = tWO * 13;\n  let tWO14 = tWO * 14;\n  let tWO15 = tWO * 15;\n  let tWO16 = tWO * 16;\n  let tWO17 = tWO * 17;\n  let tWO18 = tWO * 18;\n  let tWO19 = tWO * 19;\n  let tWO20 = tWO * 20;\n  let tWO21 = tWO * 21;\n  let tWO22 = tWO * 22;\n  let tWO23 = tWO * 23;\n  let tWO24 = tWO * 24;\n  let tWO25 = tWO * 25;\n  let tWO26 = tWO * 26;\n  let tWO27 = tWO * 27;\n  let tWO28 = tWO * 28;\n  let tWO29 = tWO * 29;\n  let tWO30 = tWO * 30;\n  let tWO31 = tWO * 31;\n  let tWO32 = tWO * 32;\n  let tWO33 = tWO * 33;\n  let tWO34 = tWO * 34;\n  let tWO35 = tWO * 35;\n  let tWO36 = tWO * 36;\n  let tWO37 = tWO * 37;\n  let tWO38 = tWO * 38;\n  let tWO39 = tWO * 39;\n  let tWO40 = tWO * 40;\n  let tWO41 = tWO * 41;\n  let tWO42 = tWO * 42;\n  let tWO43 = tWO * 43;\n  let tWO44 = tWO * 44;\n  let tWO45 = tWO * 45;\n  let tWO46 = tWO * 46;\n  let tWO47 = tWO * 47;\n  let tWO48 = tWO * 48;\n  let tWO49 = tWO * 49;\n  let tWO50 = tWO * 50;\n  let tWO51 = tWO * 51;\n  let tWO52 = tWO * 52;\n  let tWO53 = tWO * 53;\n  let tWO54 = tWO * 54;\n  let tWO55 = tWO * 55;\n  let tWO56 = tWO * 56;\n  let tWO57 = tWO * 57;\n  let tWO58 = tWO * 58;\n  let tWO59 = tWO * 59;\n  let tWO60 = tWO * 60;\n  let tWO61 = tWO * 61;\n  let tWO62 = tWO * 62;\n  let tWO63 = tWO * 63;\n  let tWO64 = tWO * 64;\n  let tWO65 = tWO * 65;\n  let tWO66 = tWO * 66;\n  let tWO67 = tWO * 67;\n  let tWO68 = tWO * 68;\n  let tWO69 = tWO * 69;\n  let tWO70 = tWO * 70;\n  let tWO71 = tWO * 71;\n  let tWO72 = tWO * 72;\n  let tWO73 = tWO * 73;\n  let tWO74 = tWO * 74;\n  let tWO75 = tWO * 75;\n  let tWO76 = tWO * 76;\n  let tWO77 = tWO * 77;\n  let tWO78 = tWO * 78;\n  let tWO79 = tWO * 79;\n  let tWO80 = tWO * 80;\n  let tWO81 = tWO * 81;\n  let tWO82 = tWO * 82;\n  let tWO83 = tWO * 83;\n  let tWO84 = tWO * 84;\n  let tWO85 = tWO * 85;\n  let tWO86 = tWO * 86;\n  let tWO87 = tWO * 87;\n  let tWO88 = tWO * 88;\n  let tWO89 = tWO * 89;\n  let tWO90 = tWO * 90;\n  let tWO91 = tWO * 91;\n  let tWO92 = tWO * 92;\n  let tWO93 = tWO * 93;\n  let tWO94 = tWO * 94;\n  let tWO95 = tWO * 95;\n  let tWO96 = tWO * 96;\n  let tWO97 = tWO * 97;\n  let tWO98 = tWO * 98;\n  let tWO99 = tWO * 99;\n  let tWO100 = tWO * 100;\n  let tWO101 = tWO * 101;\n  let tWO102 = tWO * 102;\n  let tWO103 = tWO * 103;\n  let tWO104 = tWO * 104;\n  let tWO105 = tWO * 105;\n  let tWO106 = tWO * 106;\n  let tWO107 = tWO * 107;\n  let tWO108 = tWO * 108;\n  let tWO109 = tWO * 109;\n  let tWO110 = tWO * 110;\n  let tWO111 = tWO * 111;\n  let tWO112 = tWO * 112;\n  let tWO113 = tWO * 113;\n  let tWO114 = tWO * 114;\n  let tWO115 = tWO * 115;\n  let tWO116 = tWO * 116;\n  let tWO117 = tWO * 117;\n  let tWO118 = tWO * 118;\n  let tWO119 = tWO * 119;\n  let tWO120 = tWO * 120;\n  let tWO121 = tWO * 121;\n  let tWO122 = tWO * 122;\n  let tWO123 = tWO * 123;\n  let tWO124 = tWO * 124;\n  let tWO125 = tWO * 125;\n  let tWO126 = tWO * 126;\n  let tWO127 = tWO * 127;\n  let tWO128 = tWO * 128;\n  let tWO129 = tWO * 129;\n  let tWO130 = tWO * 130;\n  let tWO131 = tWO * 131;\n  let tWO132 = tWO * 132;\n  let tWO133 = tWO * 133;\n  let tWO134 = tWO * 134;\n  let tWO135 = tWO * 135;\n  let tWO136 = tWO * 136;\n  let tWO137 = tWO * 137;\n  let tWO138 = tWO * 138;\n  let tWO139 = tWO * 139;\n  let tWO140 = tWO * 140;\n  let tWO141 = tWO * 141;\n  let tWO142 = tWO * 142;\n  let tWO143 = tWO * 143;\n  let tWO144 = tWO * 144;\n  let tWO145 = tWO * 145;\n  let tWO146 = tWO * 14", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  cHeCK if twO wORDS have THe samE chaRaCterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  cHeCK if twO wORDS have THe samE chaRaCterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*RETuRN n-th FiboNaCCI NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN n-th FiboNaCCI NumbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(9)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  8\n  >>> fib(5)\n  3\n  >>> fib(4)\n  1\n  >>> fib(3)\n  0\n  >>> fib(2)\n  1\n  >>> fib(1) \n  0\n  >>> fib(0)\n  0\n  >>> fib(-1)\n  -1\n  >>> fib(-2)\n  -2\n  >>> fib(-3)\n  -3\n  >>> fib(-4)\n  -4\n  >>> fib(-5)\n  -5\n  >>> fib(-6)\n  -6\n  >>> fib(-7)\n  -7\n  >>> fib(-8)\n  -8\n  >>> fib(-9)\n  -9\n  >>> fib(-10)\n  -10\n  >>> fib(-11)\n  -11\n  >>> fib(-12)\n  -12\n  >>> fib(-13)\n  -13\n  >>> fib(-14)\n  -14\n  >>> fib(-15)\n  -15\n  >>> fib(-16)\n  -16\n  >>> fib(-17)\n  -17\n  >>> fib(-18)\n  -18\n  >>> fib(-19)\n  -19\n  >>> fib(-20)\n  -20\n  >>> fib(-21)\n  -21\n  >>> fib(-22)\n  -22\n  >>> fib(-23)\n  -23\n  >>> fib(-24)\n  -24\n  >>> fib(-25)\n  -25\n  >>> fib(-26)\n  -26\n  >>> fib(-27)\n  -27\n  >>> fib(-28)\n  -28\n  >>> fib(-29)\n  -29\n  >>> fib(-30)\n  -30\n  >>> fib(-31)\n  -31\n  >>> fib(-32)\n  -32\n  >>> fib(-33)\n  -33\n  >>> fib(-34)\n  -34\n  >>> fib(-35)\n  -35\n  >>> fib(-36)\n  -36\n  >>> fib(-37)\n  -37\n  >>> fib(-38)\n  -38\n  >>> fib(-39)\n  -39\n  >>> fib(-40)\n  -40\n  >>> fib(-41)\n  -41\n  >>> fib(-42)\n  -42\n  >>> fib(-43)\n  -43\n  >>> fib(-44)\n  -44\n  >>> fib(-45)\n  -45\n  >>> fib(-46)\n  -46\n  >>> fib(-47)\n  -47\n  >>> fib(-48)\n  -48\n  >>> fib(-49)\n  -49\n  >>> fib(-50)\n  -50\n  >>> fib(-51)\n  -51\n  >>> fib(-52)\n  -52\n  >>> fib(-53)\n  -53\n  >>> fib(-54)\n  -54\n  >>> fib(-55)\n  -55\n  >>> fib(-56)\n  -56\n  >>> fib(-57)\n  -57\n  >>> fib(-58)\n  -58\n  >>> fib(-59)\n  -59\n  >>> fib(-60)\n  -60\n  >>> fib(-61)\n  -61\n  >>> fib(-62)\n  -62\n  >>> fib(-63)\n  -63\n  >>> fib(-64)\n  -64\n  >>> fib(-65)\n  -65\n  >>> fib(-66)\n  -66\n  >>> fib(-67)\n  -67\n  >>> fib(-68)\n  -68\n  >>> fib(-69)\n  -69\n  >>> fib(-70)\n  -70\n  >>> fib(-71)\n  -71\n  >>> fib(-72)\n  -72\n  >>> fib(-73)\n  -73\n  >>> fib(-74)\n  -74\n  >>> fib(-75)\n  -75\n  >>> fib(-76)\n  -76\n  >>> fib(-77)\n  -77\n  >>> fib(-78)\n  -78\n  >>> fib(-79)\n  -79\n  >>> fib(-80)\n  -80\n  >>> fib(-81)\n  -81\n  >>> fib(-82)\n  -82\n  >>> fib(-83)\n  -83\n  >>> fib(-84)\n  -84\n  >>> fib(-85)\n  -85\n  >>> fib(-86)\n  -86\n  >>> fib(-87)\n  -87\n  >>> fib(-88)\n  -88\n  >>> fib(-89)\n  -89\n  >>> fib(-90)\n  -90\n  >>> fib(-91)\n  -91\n  >>> fib(-92)\n  -92\n  >>> fib(-93)\n  -93\n  >>> fib(-94)\n  -94\n  >>> fib(-95)\n  -95\n  >>> fib(-96)\n  -96\n  >>> fib(-97)\n  -97\n  >>> fib(-98)\n  -98\n  >>> fib(-99)\n  -99\n  >>> fib(-100)\n  -100\n  >>> fib(-101)\n  -101\n  >>> fib(-102)\n  -102\n  >>> fib(-103)\n  -103\n  >>> fib(-104)\n  -104\n  >>> fib(-105)\n  -105\n  >>> fib(-106)\n  -106\n  >>> fib(-107)\n  -107\n  >>> fib(-108)\n  -108\n  >>> fib(-109)\n  -109\n  >>> fib(-110)\n  -110\n  >>> fib(-111)\n  -111\n  >>> fib(-112)\n  -112\n  >>> fib(-113)\n  -113\n  >>> fib(-114)\n  -114\n  >>> fib(-115)\n  -115\n  >>> fib(-116)\n  -116\n  >>> fib(-117)\n  -117\n  >>> fib(-118)\n  -118\n  >>> fib(-119)\n  -119\n  >>> fib(-120)\n  -120\n  >>> fib(-121)\n  -121\n  >>> fib(-122)\n  -122\n  >>> fib(-123)\n  -123\n  >>> fib(-124)\n  -124\n  >>> fib(-125)\n  -125\n  >>> fib(-126)\n  -126\n  >>> fib(-127)\n  -127\n  >>> fib(-128)\n  -128\n  >>> fib(-129)\n  -129\n  >>> fib(-130)\n  -130\n  >>> fib(-131)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets IS a STring Of \"<\" AND \">\".\n  return False IF everY opeNiNg brAcket has a COrREsPonDiNg ClOsiNg bRACkeT.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets IS a STring Of \"<\" AND \">\".\n  return False IF everY opeNiNg brAcket has a COrREsPonDiNg ClOsiNg bRACkeT.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = new RegExp(\n    brackets.replace(/[<>]/g, \"\"),\n    \"g\"\n  );\n  return bracketingRegex.test(brackets);\n};\n\n/**\n  Returns true if the given string is a valid HTML tag (i.e. it starts\n  with \"<\" and ends with \">\").\n\n  >>> isValidHTMLTag(\"<\")\n  true\n  >>> isValidHTMLTag(\"<a\")\n  true\n  >>> isValidHTMLTag(\"<a \")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a>\")\n  true\n  >>> isValidHTMLTag(\"<a bRACkeT></a><a></a><a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*RETuRN true Is list ELEMents ARe monOtonIcAlly IncreasinG Or DEcReaSiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN true Is list ELEMents ARe monOtonIcAlly IncreasinG Or DEcReaSiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  let isMonotonic = true\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isMonotonic = false\n      break\n    }\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*RETuRN sortEd UNIQue common elEMents For tWo ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN sortEd UNIQue common elEMents For tWo ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0\n  let j = 0\n  let ret = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      ret.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return ret\n}\n\n/**\n * sortEd sorts elements by comparing their numeric values.\n * If two elements are equal then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * If two elements are equal and their order is undefined then their order is undefined.\n * ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*RETuRN the largest pRiME FActor OF n. AssuMe n > 1 anD iS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RETuRN the largest pRiME FActor OF n. AssuMe n > 1 anD iS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 0;\n  let primeFactor = 1;\n  let primeFactors = [];\n  let primeFactorsIndex = 0;\n  let primeFactorsLength = 0;\n  let primeFactorsIndex2 = 0;\n  let primeFactorsLength2 = 0;\n  let primeFactorsIndex3 = 0;\n  let primeFactorsLength3 = 0;\n  let primeFactorsIndex4 = 0;\n  let primeFactorsLength4 = 0;\n  let primeFactorsIndex5 = 0;\n  let primeFactorsLength5 = 0;\n  let primeFactorsIndex6 = 0;\n  let primeFactorsLength6 = 0;\n  let primeFactorsIndex7 = 0;\n  let primeFactorsLength7 = 0;\n  let primeFactorsIndex8 = 0;\n  let primeFactorsLength8 = 0;\n  let primeFactorsIndex9 = 0;\n  let primeFactorsLength9 = 0;\n  let primeFactorsIndex10 = 0;\n  let primeFactorsLength10 = 0;\n  let primeFactorsIndex11 = 0;\n  let primeFactorsLength11 = 0;\n  let primeFactorsIndex12 = 0;\n  let primeFactorsLength12 = 0;\n  let primeFactorsIndex13 = 0;\n  let primeFactorsLength13 = 0;\n  let primeFactorsIndex14 = 0;\n  let primeFactorsLength14 = 0;\n  let primeFactorsIndex15 = 0;\n  let primeFactorsLength15 = 0;\n  let primeFactorsIndex16 = 0;\n  let primeFactorsLength16 = 0;\n  let primeFactorsIndex17 = 0;\n  let primeFactorsLength17 = 0;\n  let primeFactorsIndex18 = 0;\n  let primeFactorsLength18 = 0;\n  let primeFactorsIndex19 = 0;\n  let primeFactorsLength19 = 0;\n  let primeFactorsIndex20 = 0;\n  let primeFactorsLength20 = 0;\n  let primeFactorsIndex21 = 0;\n  let primeFactorsLength21 = 0;\n  let primeFactorsIndex22 = 0;\n  let primeFactorsLength22 = 0;\n  let primeFactorsIndex23 = 0;\n  let primeFactorsLength23 = 0;\n  let primeFactorsIndex24 = 0;\n  let primeFactorsLength24 = 0;\n  let primeFactorsIndex25 = 0;\n  let primeFactorsLength25 = 0;\n  let primeFactorsIndex26 = 0;\n  let primeFactorsLength26 = 0;\n  let primeFactorsIndex27 = 0;\n  let primeFactorsLength27 = 0;\n  let primeFactorsIndex28 = 0;\n  let primeFactorsLength28 = 0;\n  let primeFactorsIndex29 = 0;\n  let primeFactorsLength29 = 0;\n  let primeFactorsIndex30 = 0;\n  let primeFactorsLength30 = 0;\n  let primeFactorsIndex31 = 0;\n  let primeFactorsLength31 = 0;\n  let primeFactorsIndex32 = 0;\n  let primeFactorsLength32 = 0;\n  let primeFactorsIndex33 = 0;\n  let primeFactorsLength33 = 0;\n  let primeFactorsIndex34 = 0;\n  let primeFactorsLength34 = 0;\n  let primeFactorsIndex35 = 0;\n  let primeFactorsLength35 = 0;\n  let primeFactorsIndex36 = 0;\n  let primeFactorsLength36 = 0;\n  let primeFactorsIndex37 = 0;\n  let primeFactorsLength37 = 0;\n  let primeFactorsIndex38 = 0;\n  let primeFactorsLength38 = 0;\n  let primeFactorsIndex39 = 0;\n  let primeFactorsLength39 = 0;\n  let primeFactorsIndex40 = 0;\n  let primeFactorsLength40 = 0;\n  let primeFactorsIndex41 = 0;\n  let primeFactorsLength41 = 0;\n  let primeFactorsIndex42 = 0;\n  let primeFactorsLength42 = 0;\n  let primeFactorsIndex43 = 0;\n  let primeFactorsLength43 = 0;\n  let primeFactorsIndex44 = 0;\n  let primeFactorsLength44 = 0;\n  let primeFactorsIndex45 = 0;\n  let primeFactorsLength45 = 0;\n  let primeFactorsIndex46 = 0;\n  let primeFactorsLength46 = 0;\n  let primeFactorsIndex47 = 0;\n  let primeFactorsLength47 = 0;\n  let primeFactorsIndex48 = 0;\n  let primeFactorsLength48 = 0;\n  let primeFactorsIndex49 = 0;\n  let primeFactorsLength49 = 0;\n  let primeFactorsIndex50 = 0;\n  let primeFactorsLength50 = 0;\n  let primeFactorsIndex51 = 0;\n  let primeFactorsLength51 = 0;\n  let primeFactorsIndex52 = 0;\n  let primeFactorsLength52 = 0;\n  let primeFactorsIndex53 = 0;\n  let primeFactorsLength53 = 0;\n  let primeFactorsIndex54 = 0;\n  let primeFactorsLength54 = 0;\n  let primeFactorsIndex55 = 0;\n  let primeFactorsLength55 = 0;\n  let primeFactorsIndex56 = 0;\n  let primeFactorsLength56 = 0;\n  let primeFactorsIndex57 = 0;\n  let primeFactorsLength57 = 0;\n  let primeFactorsIndex58 = 0;\n  let primeFactorsLength58 = 0;\n  let primeFactorsIndex59 = 0;\n  let primeFactorsLength59 = 0;\n  let primeFactorsIndex60 = 0;\n  let primeFactorsLength60 = 0;\n  let primeFactorsIndex61 = 0;\n  let primeFactorsLength61 = 0;\n  let primeFactorsIndex62 = 0;\n  let primeFactorsLength62 = 0;\n  let primeFactorsIndex63 = 0;\n  let primeFactorsLength63 = 0;\n  let primeFactorsIndex64 = 0;\n  let primeFactorsLength64 = 0;\n  let primeFactorsIndex65 = 0;\n  let primeFactorsLength65 = 0;\n  let primeFactorsIndex66 = 0;\n  let primeFactorsLength66 = 0;\n  let primeFactorsIndex67 = 0;\n  let primeFactorsLength67 = 0;\n  let primeFactorsIndex68 = 0;\n  let primeFactorsLength68 = 0;\n  let primeFactorsIndex69 = 0;\n  let primeFactorsLength69 = 0;\n  let primeFactorsIndex70 = 0;\n  let primeFactorsLength70 = 0;\n  let primeFactorsIndex71 = 0;\n  let primeFactorsLength71 = 0;\n  let primeFactorsIndex72 = 0;\n  let primeFactorsLength72 = 0;\n  let primeFactorsIndex73 = 0;\n  let primeFactorsLength73 = 0;\n  let primeFactorsIndex74 = 0;\n  let primeFactorsLength74 = 0;\n  let primeFactorsIndex75 = 0;\n  let primeFactorsLength75 = 0;\n  let primeFactorsIndex76 = 0;\n  let primeFactorsLength76 = 0;\n  let primeFactorsIndex77 = 0;\n  let primeFactorsLength77 = 0;\n  let primeFactorsIndex78 = 0;\n  let primeFactorsLength78 = 0;\n  let primeFactorsIndex79 = 0;\n  let primeFactorsLength79 = 0;\n  let primeFactorsIndex80 = 0;\n  let primeFactorsLength80 = 0;\n  let primeFactorsIndex81 = 0;\n  let primeFactorsLength81 = 0;\n  let primeFactorsIndex82 = 0;\n  let primeFactorsLength82 = 0;\n  let primeFactorsIndex83 = 0;\n  let primeFactorsLength83 = 0;\n  let primeFactorsIndex84 = 0;\n  let primeFactorsLength84 = 0;\n  let primeFactorsIndex85 = 0;\n  let primeFactorsLength85 = 0;\n  let primeFactorsIndex86 = 0;\n  let primeFactorsLength86 = 0;\n  let primeFactorsIndex87 = 0;\n  let primeFactorsLength87 = 0;\n  let primeFactorsIndex88 = 0;\n  let primeFactorsLength88 = 0;\n  let primeFactorsIndex89 = 0;\n  let primeFactorsLength89 = 0;\n  let primeFactorsIndex90 = 0;\n  let primeFactorsLength90 = 0;\n  let primeFactorsIndex91 = 0;\n  let primeFactorsLength91 = 0;\n  let primeFactorsIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNted multiPLe GRoUps FoR nEsTed ParENTheSES sEparatED by spacES.\n  FOr eACH Of tHE grOUP, OuTPuT tHe deepEsT lEvel OF NEStINg of parentHEses.\n  e.g. (()()) has maxImuM two LeVelS Of nesTInG wHile ((())) haS tHree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* iNpUT to thIs FUNCtion IS a strIng rEpReseNted multiPLe GRoUps FoR nEsTed ParENTheSES sEparatED by spacES.\n  FOr eACH Of tHE grOUP, OuTPuT tHe deepEsT lEvel OF NEStINg of parentHEses.\n  e.g. (()()) has maxImuM two LeVelS Of nesTInG wHile ((())) haS tHree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_array_length = paren_array.length;\n  const paren_array_index = 0;\n  const paren_array_items = [];\n  let paren_array_item;\n  let paren_array_item_length;\n  let paren_array_item_index;\n  let paren_array_item_item;\n  let paren_array_item_item_length;\n  let paren_array_item_item_index;\n  let paren_array_item_item_item;\n  let paren_array_item_item_item_length;\n  let paren_array_item_item_item_index;\n  let paren_array_item_item_item_item;\n  let paren_array_item_item_item_item_length;\n  let paren_array_item_item_item_item_index;\n  let paren_array_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_length;\n  let paren_array_item_item_item_item_item_item_item_item_item_item_item_item_item_item_item_item_index;\n  let paren_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUMTOn is a fUnCTIOn thaT Sums nUmbeRs From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*sUMTOn is a fUnCTIOn thaT Sums nUmbeRs From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(10))\n  55\n  >>> sumToN(sumToN(5))\n  15\n  >>> sumToN(sumToN(1))\n  1\n  */\nconst sumToN2 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN2(sumToN2(10))\n  55\n  >>> sumToN2(sumToN2(5))\n  15\n  >>> sumToN2(sumToN2(1))\n  1\n  */\nconst sumToN3 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN3(sumToN3(10))\n  55\n  >>> sumToN3(sumToN3(5))\n  15\n  >>> sumToN3(sumToN3(1))\n  1\n  */\nconst sumToN4 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN4(sumToN4(10))\n  55\n  >>> sumToN4(sumToN4(5))\n  15\n  >>> sumToN4(sumToN4(1))\n  1\n  */\nconst sumToN5 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN5(sumToN5(10))\n  55\n  >>> sumToN5(sumToN5(5))\n  15\n  >>> sumToN5(sumToN5(1))\n  1\n  */\nconst sumToN6 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN6(sumToN6(10))\n  55\n  >>> sumToN6(sumToN6(5))\n  15\n  >>> sumToN6(sumToN6(1))\n  1\n  */\nconst sumToN7 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN7(sumToN7(10))\n  55\n  >>> sumToN7(sumToN7(5))\n  15\n  >>> sumToN7(sumToN7(1))\n  1\n  */\nconst sumToN8 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN8(sumToN8(10))\n  55\n  >>> sumToN8(sumToN8(5))\n  15\n  >>> sumToN8(sumToN8(1))\n  1\n  */\nconst sumToN9 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN9(sumToN9(10))\n  55\n  >>> sumToN9(sumToN9(5))\n  15\n  >>> sumToN9(sumToN9(1))\n  1\n  */\nconst sumToN10 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN10(sumToN10(10))\n  55\n  >>> sumToN10(sumToN10(5))\n  15\n  >>> sumToN10(sumToN10(1))\n  1\n  */\nconst sumToN11 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN11(sumToN11(10))\n  55\n  >>> sumToN11(sumToN11(5))\n  15\n  >>> sumToN11(sumToN11(1))\n  1\n  */\nconst sumToN12 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN12(sumToN12(10))\n  55\n  >>> sumToN12(sumToN12(5))\n  15\n  >>> sumToN12(sumToN12(1))\n  1\n  */\nconst sumToN13 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN13(sumToN13(10))\n  55\n  >>> sumToN13(sumToN13(5))\n  15\n  >>> sumToN13(sumToN13(1))\n  1\n  */\nconst sumToN14 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN14(sumToN14(10))\n  55\n  >>> sumToN14(sumToN14(5))\n  15\n  >>> sumToN14(sumToN14(1))\n  1\n  */\nconst sumToN15 = (n) => {\n  const sum = 0;\n  const arr = [];\n  for (let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets IS a STring Of \"(\" AND \")\".\n  return True iF Every OpenInG braCket has a cORrESpOndInG cLoSinG brACKet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets IS a STring Of \"(\" AND \")\".\n  return True iF Every OpenInG braCket has a cORrESpOndInG cLoSinG brACKet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/[()]/g);\n  return openingBrackets.every(openingBracket => openingBracket!== '');\n};\n\n/**\n  Returns true if the given string is a valid function name.\n  \n  >>> isValidFunctionName(\"foo\")\n  true\n  >>> isValidFunctionName(\"fooBar\")\n  false\n  */\nconst isValidFunctionName = (name) => {\n  return /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name);\n};\n\n/**\n  Returns true if the given string is a valid variable name.\n  \n  >>> isValidVariableName(\"foo\")\n  true\n  >>> isValidVariableName(\"fooBar\")\n  false\n  */\nconst isValidVariableName = (name) => {\n  return /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name);\n};\n\n/**\n  Returns true if the given string is a valid variable name.\n  \n  >>> isValidVariableName(\"fooBar\")\n  true\n  >>> isValidVariableName(\"fooBarFoo\")\n  false\n  */\nconst isValidVariableNameWithUnderscore = (name) => {\n  return /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name);\n};\n\n/**\n  Returns true if the given string is a valid variable name.\n  \n  >>> isValidVariableName(\"fooBarFoo\")\n  true\n  >>> isValidVariableName(\"fooBarFooBar\")\n  false\n  */\nconst isValidVariableNameWithUnderscoreAndUnderscore = (name) => {\n  return /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name);\n};\n\n/**\n  Returns true if the given string is a valid variable name.\n  \n  >>> isValidVariableName(\"fooBarFooBar\")\n  true\n  >>> isValidVariableName(\"fooBarFooBarFoo\")\n  false\n  */\nconst isValidVariableNameWithUnderscoreAndUnderscoreAndUnderscore = (name) => {\n  return /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name);\n};\n\n/**\n  Returns true if the given string is a valid variable name.\n  \n  >>> isValidVariableName(\"fooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBarFooBar", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs REpREsent CoEFFIcienTS of a pOlynOmIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative of thIS pOLyNomIaL in tHe SamE foRM.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs REpREsent CoEFFIcienTS of a pOlynOmIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thIS pOLyNomIaL in tHe SamE foRM.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const res = []\n  for (let i = 0; i < n; i++) {\n    const x = xs[i]\n    const xi = x\n    const xj = x\n    const xk = x\n    const xl = x\n    const xm = x\n    const xn = x\n    const xo = x\n    const xp = x\n    const xq = x\n    const xr = x\n    const xs = x\n    const xt = x\n    const xu = x\n    const xv = x\n    const xw = x\n    const xx = x\n    const xy = x\n    const xz = x\n    const y0 = x\n    const y1 = x\n    const y2 = x\n    const y3 = x\n    const y4 = x\n    const y5 = x\n    const y6 = x\n    const y7 = x\n    const y8 = x\n    const y9 = x\n    const y10 = x\n    const y11 = x\n    const y12 = x\n    const y13 = x\n    const y14 = x\n    const y15 = x\n    const y16 = x\n    const y17 = x\n    const y18 = x\n    const y19 = x\n    const y20 = x\n    const y21 = x\n    const y22 = x\n    const y23 = x\n    const y24 = x\n    const y25 = x\n    const y26 = x\n    const y27 = x\n    const y28 = x\n    const y29 = x\n    const y30 = x\n    const y31 = x\n    const y32 = x\n    const y33 = x\n    const y34 = x\n    const y35 = x\n    const y36 = x\n    const y37 = x\n    const y38 = x\n    const y39 = x\n    const y40 = x\n    const y41 = x\n    const y42 = x\n    const y43 = x\n    const y44 = x\n    const y45 = x\n    const y46 = x\n    const y47 = x\n    const y48 = x\n    const y49 = x\n    const y50 = x\n    const y51 = x\n    const y52 = x\n    const y53 = x\n    const y54 = x\n    const y55 = x\n    const y56 = x\n    const y57 = x\n    const y58 = x\n    const y59 = x\n    const y60 = x\n    const y61 = x\n    const y62 = x\n    const y63 = x\n    const y64 = x\n    const y65 = x\n    const y66 = x\n    const y67 = x\n    const y68 = x\n    const y69 = x\n    const y70 = x\n    const y71 = x\n    const y72 = x\n    const y73 = x\n    const y74 = x\n    const y75 = x\n    const y76 = x\n    const y77 = x\n    const y78 = x\n    const y79 = x\n    const y80 = x\n    const y81 = x\n    const y82 = x\n    const y83 = x\n    const y84 = x\n    const y85 = x\n    const y86 = x\n    const y87 = x\n    const y88 = x\n    const y89 = x\n    const y90 = x\n    const y91 = x\n    const y92 = x\n    const y93 = x\n    const y94 = x\n    const y95 = x\n    const y96 = x\n    const y97 = x\n    const y98 = x\n    const y99 = x\n    const y100 = x\n    const y101 = x\n    const y102 = x\n    const y103 = x\n    const y104 = x\n    const y105 = x\n    const y106 = x\n    const y107 = x\n    const y108 = x\n    const y109 = x\n    const y110 = x\n    const y111 = x\n    const y112 = x\n    const y113 = x\n    const y114 = x\n    const y115 = x\n    const y116 = x\n    const y117 = x\n    const y118 = x\n    const y119 = x\n    const y120 = x\n    const y121 = x\n    const y122 = x\n    const y123 = x\n    const y124 = x\n    const y125 = x\n    const y126 = x\n    const y127 = x\n    const y128 = x\n    const y129 = x\n    const y130 = x\n    const y131 = x\n    const y132 = x\n    const y133 = x\n    const y134 = x\n    const y135 = x\n    const y136 = x\n    const y137 = x\n    const y138 = x\n    const y139 = x\n    const y140 = x\n    const y141 = x\n    const y142 = x\n    const y143 = x\n    const y144 = x\n    const y145 = x\n    const y146 = x\n    const y147 = x\n    const y148 = x\n    const y149 = x\n    const y150 = x\n    const y151 = x\n    const y152 = x\n    const y153 = x\n    const y154 = x\n    const y155 = x\n    const y156 = x\n    const y157 = x\n    const y158 = x\n    const y159 = x\n    const y160 = x\n    const y161 = x\n    const y162 = x\n    const y163 = x\n    const y164 = x\n    const y165 = x\n    const y166 = x\n    const y167 = x\n    const y168 = x\n    const y169 = x\n    const y170 = x\n    const y171 = x\n    const y172 = x\n    const y173 = x\n    const y174 = x\n    const y175 = x\n    const y176 = x\n    const y177 = x\n    const y178 = x\n    const y179 = x\n    const y180 = x\n    const y181 = x\n    const y182 = x\n    const y183 = x\n    const y184 = x\n    const y185 = x\n    const y186 = x\n    const y187 = x\n    const y188 = x\n    const y189 = x\n    const y190 = x\n    const y191 = x\n    const y192 = x\n    const y193 = x\n    const y194 = x\n    const y195 = x\n    const y196 = x\n    const y197 = x\n    const y198 = x\n    const y199 = x\n    const y200 = x\n    const y201 = x\n    const y202 = x\n    const y203 = x\n    const y204 = x\n    const y205 = x\n    const y206 = x\n    const y207 = x\n    const y208 = x\n    const y209 = x\n    const y210 = x\n    const y211 = x\n    const y212 = x\n    const y213 = x\n    const y214 = x\n    const y215 = x\n    const y216 = x\n    const y217 = x\n    const y218 = x\n    const y219 = x\n    const y220 = x\n    const y221 = x\n    const y222 = x\n    const y223 = x\n    const y224 = x\n    const y225 = x\n    const y226 = x\n    const y227 = x\n    const y228 = x\n    const y229 = x\n    const y230 = x\n    const y231 = x\n    const y232 = x\n    const y233 = x\n    const y234 = x\n    const y235 = x\n    const y236 = x\n    const y237 = x\n    const y238 = x\n    const y239 = x\n    const y240 = x\n    const y241 = x\n    const y242 = x\n    const y243 = x\n    const y244 = x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*THE FIBFib nUmBER SequeNCe is a SequEnCe siMilar to thE fiBBoNacCi SeQuNecE thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*THE FIBFib nUmBER SequeNCe is a SequEnCe siMilar to thE fiBBoNacCi SeQuNecE thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  A FUncTIon thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  A FUncTIon thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  A FUncTIon thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  A FUncTIon thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  A FUncTIon thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  A FUncTIon thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  A FUncTIon thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  A FUncTIon thAT'S deFINeD as folLOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSE wRitE A FUncTIon TO EFfICiEnTly comPuTe The n-th eLEMENt OF the fibfib number SEqueNce.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*WRItE A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, bUt onLY WHEn IT is at the enD Of thE given woRd.\n\n  EXampLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  A funcTiON vowelsCount WHich tAKes a sTrinG rEpreSenting\n  a wORd AS iNpuT aNd ReTurNs tHE NumBER oF vowels in the stRIng.\n  VoweLS in tHis CASE arE 'A', 'e', 'i', 'O', 'U'. hErE, 'Y' iS aLso a\n  voWeL, b", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*CIRcULar shift thE dIGITs of tHE inteGer x, shift tHe DigiTs right by shift\n  ANd return THe ResUlT aS a StrIng.\n  iF shift > NumBER oF digitS, return Digits rEVeRseD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CIRcULar shift thE dIGITs of tHE inteGer x, shift tHe DigiTs right by shift\n  ANd return THe ResUlT aS a StrIng.\n  iF shift > NumBER oF digitS, return Digits rEVeRseD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digitS = x.toString(10);\n  let numBER = digitS.length;\n  let resULT = \"\";\n  let numDigits = numBER;\n  let numShift = shift;\n  let numDigitsInt = numDigits - numShift;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = numDigitsInt > 0? numDigitsInt : 0;\n  let numDigitsInt = num", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*TASk\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs only'\n  asCII codES.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*\n  wRite a FuNCTIon thAT takeS a stRiNg as Input and rETuRNs The SuM oF tHe uPpeR CHarACTeRs ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  iN tHIs tasK, yOU WIll be GIven a StriNg That RepresentS A nUMbEr oF aPpLeS anD orANGes\n  THAt Are disTRibuted in A BaSkeT OF FruIT thIS BAsKEt CoNtains\n  ApPlEs, orANGES, aND mango fruiTS. GivEn the strIng That RePreSEnts tHE tOtAl numbEr Of\n  the ORangeS and AppLes aND an INteger tHaT ReprEsENt The tOTal nuMBer of the FruiTs\n  in the BaskET return ThE numbeR of ThE MANgo fruIts in the bAsket.\n  fOr examBLE:\n  fruitDistribution(\"5 apples AnD 6 Oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 APples AND 1 OranGES\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 aPples AnD 3 ORANGeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oraNgeS\",120) -> 120 - 100 - 1 = 19\n  */\nCoNst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  iN tHIs tasK, yOU WIll be GIven a StriNg That RepresentS A nUMbEr oF aPpLeS anD orANGes\n  THAt Are disTRibuted in A BaSkeT OF FruIT thIS BAsKEt CoNtains\n  ApPlEs, orANGES, aND mango fruiTS. GivEn the strIng That RePreSEnts tHE tOtAl numbEr Of\n  the ORangeS and AppLes aND an INteger tHaT ReprEsENt The tOTal nuMBer of the FruiTs\n  in the BaskET return ThE numbeR of ThE MANgo fruIts in the bAsket.\n  fOr examBLE:\n  fruitDistribution(\"5 apples AnD 6 Oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 APples AND 1 OranGES\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 aPples AnD 3 ORANGeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oraNgeS\",120) -> 120 - 100 - 1 = 19\n  */\nCoNst fruitDistribution = (s, n) => {\n  let res = {};\n  let rep = s.split(' ').map(Number);\n  let len = rep.length;\n  let sum = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let aN;\n  let bN;\n  let cN;\n  let dN;\n  let eN;\n  let fN;\n  let gN;\n  let hN;\n  let iN;\n  let jN;\n  let kN;\n  let lN;\n  let mN;\n  let nN;\n  let oN;\n  let pN;\n  let qN;\n  let rN;\n  let sN;\n  let tN;\n  let uN;\n  let vN;\n  let wN;\n  let xN;\n  let yN;\n  let zN;\n  let aP;\n  let bP;\n  let cP;\n  let dP;\n  let eP;\n  let fP;\n  let gP;\n  let hP;\n  let iP;\n  let jP;\n  let kP;\n  let lP;\n  let mP;\n  let nP;\n  let oP;\n  let pP;\n  let qP;\n  let rP;\n  let sP;\n  let tP;\n  let uP;\n  let vP;\n  let wP;\n  let xP;\n  let yP;\n  let zP;\n  let aQ;\n  let bQ;\n  let cQ;\n  let dQ;\n  let eQ;\n  let fQ;\n  let gQ;\n  let hQ;\n  let iQ;\n  let jQ;\n  let kQ;\n  let lQ;\n  let mQ;\n  let nQ;\n  let oQ;\n  let pQ;\n  let qQ;\n  let rQ;\n  let sQ;\n  let tQ;\n  let uQ;\n  let vQ;\n  let wQ;\n  let xQ;\n  let yQ;\n  let zQ;\n  let aR;\n  let bR;\n  let cR;\n  let dR;\n  let eR;\n  let fR;\n  let gR;\n  let hR;\n  let iR;\n  let jR;\n  let kR;\n  let lR;\n  let mR;\n  let nR;\n  let oR;\n  let pR;\n  let qR;\n  let rR;\n  let sR;\n  let tR;\n  let uR;\n  let vR;\n  let wR;\n  let xR;\n  let yR;\n  let zR;\n  let aS;\n  let bS;\n  let cS;\n  let dS;\n  let eS;\n  let fS;\n  let gS;\n  let hS;\n  let iS;\n  let jS;\n  let kS;\n  let lS;\n  let mS;\n  let nS;\n  let oS;\n  let pS;\n  let qS;\n  let rS;\n  let sS;\n  let tS;\n  let uS;\n  let vS;\n  let wS;\n  let xS;\n  let yS;\n  let zS;\n  let aT;\n  let bT;\n  let cT;\n  let dT;\n  let eT;\n  let fT;\n  let gT;\n  let hT;\n  let iT;\n  let jT;\n  let kT;\n  let lT;\n  let mT;\n  let nT;\n  let oT;\n  let pT;\n  let qT;\n  let rT;\n  let sT;\n  let tT;\n  let uT;\n  let vT;\n  let wT;\n  let xT;\n  let yT;\n  let zT;\n  let aU;\n  let bU;\n  let cU;\n  let dU;\n  let eU;\n  let fU;\n  let gU;\n  let hU;\n  let iU;\n  let jU;\n  let kU;\n  let lU;\n  let mU;\n  let nU;\n  let oU;\n  let pU;\n  let qU;\n  let rU;\n  let sU;\n  let tU;\n  let uU;\n  let vU;\n  let wU;\n  let xU;\n  let yU;\n  let zU;\n  let aV;\n  let bV;\n  let cV;\n  let dV;\n  let eV;\n  let fV;\n  let gV;\n  let hV;\n  let iV;\n  let jV;\n  let kV;\n  let lV;\n  let mV;\n  let nV;\n  let oV;\n  let pV;\n  let qV;\n  let rV;\n  let sV;\n  let tV;\n  let uV;\n  let vV;\n  let wV;\n  let xV;\n  let yV;\n  let zV;\n  let aW;\n  let bW;\n  let cW;\n  let dW;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"gIvEN an arRaY REPreseNTing a BranCh Of a tRee that haS NoN-NeGatIvE iNtEgeR noDES\n  yoUR TaSk is to pluck ONe of the NOdEs aND return IT.\n  ThE PluCKED nODe ShOuld be ThE nOde wITH THe SMallest eveN ValuE.\n  If multiPle NodeS wIth THe samE SmAlLest evEn Value ARe fouNd return thE noDe thAT haS SmallesT iNDex.\n\n  THe PLuCked NOde shOUld be retUrneD in a list, [ smaLest_VALuE, its inDex ],\n  if THERe are nO even vaLues or The givEN Array is EmPTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \"gIvEN an arRaY REPreseNTing a BranCh Of a tRee that haS NoN-NeGatIvE iNtEgeR noDES\n  yoUR TaSk is to pluck ONe of the NOdEs aND return IT.\n  ThE PluCKED nODe ShOuld be ThE nOde wITH THe SMallest eveN ValuE.\n  If multiPle NodeS wIth THe samE SmAlLest evEn Value ARe fouNd return thE noDe thAT haS SmallesT iNDex.\n\n  THe PLuCked NOde shOUld be retUrneD in a list, [ smaLest_VALuE, its inDex ],\n  if THERe are nO even vaLues or The givEN Array is EmPTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arrLen = arr.length;\n  const arrVal = arr.map(v => v);\n  const arrIndexes = [];\n  let minIndex = 0;\n  let minVal = arrVal[0];\n  for (let i = 1; i < arrLen; i++) {\n    if (arrVal[i] < minVal) {\n      minVal = arrVal[i];\n      minIndex = i;\n    }\n  }\n  return [minIndex, minVal];\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  let min = 0;\n  let min = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMax = function (nums) {\n  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSum = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-average-of-the-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findAverage = function (nums) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count++;\n  }\n  return sum / count;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedian = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n  return findMedian(left) + findMedian(right);\n};\n\n// https://leetcode.com/problems/find-the-mode-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMode = function (nums) {\n  let len = nums.length;\n  let mode = 0;\n  let max = 0;\n  let min = nums[0];\n  for (let i = 1; i < len; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianOfArray = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n  return findMedian(left) + findMedian(right);\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianOfArray2 = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n  return findMedian(left) + findMedian(right);\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianOfArray3 = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n  return findMedian(left) + findMedian(right);\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianOfArray4 = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n  return findMedian(left) + findMedian(right);\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianOfArray5 = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n  return findMedian(left) + findMedian(right);\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianOfArray6 = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n  return findMedian(left) + findMedian(right);\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianOfArray7 = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  yOu ARe givEn A NON-emptY list Of posItivE iNtegErs. Return THe GReAteSt InTeGer ThaT IS grEATeR than\n  zERo, and haS A fReqUENCy gREatER THaN Or EqUal to tHe VaLue oF THE InTEger itself.\n  tHe frEquency oF an InteGeR is THe numBEr Of Times iT aPpearS in The list.\n  If No suCh a ValuE ExiST, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  yOu ARe givEn A NON-emptY list Of posItivE iNtegErs. Return THe GReAteSt InTeGer ThaT IS grEATeR than\n  zERo, and haS A fReqUENCy gREatER THaN Or EqUal to tHe VaLue oF THE InTEger itself.\n  tHe frEquency oF an InteGeR is THe numBEr Of Times iT aPpearS in The list.\n  If No suCh a ValuE ExiST, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let pos = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let res = -1;\n  while (pos < lst.length) {\n    if (lst[pos] < lst[i]) {\n      i++;\n    } else {\n      j++;\n    }\n    if (lst[pos] > lst[i]) {\n      j--;\n    }\n    if (lst[pos] === lst[i]) {\n      k++;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i] && lst[i] === lst[i]) {\n      i++;\n      j--;\n    }\n    if (lst[pos] > lst[i] && lst[pos] < lst[j] && lst[pos] === lst[j] && lst[i] === lst[i] && lst[i] === ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) || string.includes(substring.toUpperCase()));\n};\n\n/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOrElse = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()));\n};\n\n/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstringOrElse(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOrElse(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstringOrElse(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOrElseIf = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()));\n};\n\n/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstringOrElseIf(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOrElseIf(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstringOrElseIf(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOrElseIfElse = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()));\n};\n\n/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstringOrElseIfElse(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOrElseIfElse(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstringOrElseIfElse(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOrElseIfElseIf = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()));\n};\n\n/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOrElseIfElseIfElse = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()));\n};\n\n/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOrElseIfElseIfElseIfElse = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()));\n};\n\n/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOrElseIfElseIfElseIfElse = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()));\n};\n\n/* fIlTEr an iNpUT list OF strings only FOr oneS thaT cOntaIn given substring\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstringOrElseIfElseIfElse(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOrElseIfElseIfElseIfElse = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()) || string.includes(substring.toUpperCase()) || string.includes(substring.toLowerCase()));\n};\n\n/* fIlTEr an iNpUT list OF strings ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN list of inTeGERS, return list in straNGe ordEr.\n  StRaNge sOrting, is wHEn YOu StaRt WiTh The MinIMUm vALUe,\n  Then maXImum of tHE rEmaININg iNTegERS, ThEN mInImum anD sO oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sOrting = []\n  let mInImum = 0\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst.length\n  let tHEn = lst[0]\n  let sO = lst[0]\n  let gIvEN = []\n  let iNTegERS = lst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tHE area oF\n  thE tRiAnGle RouNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLe.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN the lEnGTHS of thE Three SideS oF a triAngle. RetuRN tHE area oF\n  thE tRiAnGle RouNDEd tO 2 DEcImal poINts if thE ThRee SIDEs fORm a vALID tRIaNgLe.\n  OtheRwIsE return -1\n  ThrEE SIDeS Make a valid tRIangLe when thE suM of aNy Two SIdes iS GrEaTer\n  thaN tHe thiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const [a, c, b] = [...new Set([a, b, c])];\n  const [d, e, f] = [...new Set([a, b, c])];\n  const [g, h, i] = [...new Set([a, b, c])];\n  const [k, l, m] = [...new Set([a, b, c])];\n  const [n, o, p] = [...new Set([a, b, c])];\n  const [q, r, s] = [...new Set([a, b, c])];\n  const [t, u, v] = [...new Set([a, b, c])];\n  const [w, x, y, z] = [...new Set([a, b, c])];\n  const [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P] = [\n   ...new Set([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n  ] = [\n   ...new Set([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]),\n  ];\n  const [\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) ANd ThE sum of ItS eLemeNTS IS lESs than or eqUAl thE maximum PosSiblE wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  wRiTE a funCtION That rETurns True If The oBject q will FLy, ANd FalSe OtHeRwiSe.\n  THE ObjECT q wIll fly IF it's balANcEd (iT IS A paLIndROMIc list) ANd ThE sum of ItS eLemeNTS IS lESs than or eqUAl thE maximum PosSiblE wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeightSum = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).sum();\n  const maxWeightSumOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).sum();\n  const maxWeightOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = q.map(cur => cur.reduce((acc, cur) => acc + cur, 0)).max();\n  const maxWeightOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeightsOfWeights = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let smallestChange = 0;\n  let smallestIndex = 0;\n  let smallestNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallestNum) {\n      smallestNum = arr[i];\n      smallestIndex = i;\n    }\n  }\n  smallestChange = smallestNum - arr[smallestIndex];\n  return smallestChange;\n};\n\n/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let largestChange = 0;\n  let largestIndex = 0;\n  let largestNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largestNum) {\n      largestNum = arr[i];\n      largestIndex = i;\n    }\n  }\n  largestChange = largestNum - arr[largestIndex];\n  return largestChange;\n};\n\n/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInRange = (arr) => {\n  let smallestChange = 0;\n  let smallestIndex = 0;\n  let smallestNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallestNum && smallestNum < arr[i]) {\n      smallestNum = arr[i];\n      smallestIndex = i;\n    }\n  }\n  smallestChange = smallestNum - arr[smallestIndex];\n  return smallestChange;\n};\n\n/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChangeInRange = (arr) => {\n  let largestChange = 0;\n  let largestIndex = 0;\n  let largestNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largestNum && largestNum > arr[i]) {\n      largestNum = arr[i];\n      largestIndex = i;\n    }\n  }\n  largestChange = largestNum - arr[largestIndex];\n  return largestChange;\n};\n\n/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInRangeInRange = (arr) => {\n  let smallestChange = 0;\n  let smallestIndex = 0;\n  let smallestNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallestNum && smallestNum < arr[i] && smallestNum < arr[i + 1]) {\n      smallestNum = arr[i];\n      smallestIndex = i;\n    }\n  }\n  smallestChange = smallestNum - arr[smallestIndex];\n  return smallestChange;\n};\n\n/*\n  gIvEN an arRaY arr OF IntegERs, finD the MiNimuM number of ELeMEnTs tHaT\n  nEeD to Be cHANgeD TO mAke the ARray palINdRomIC. a PalINdrOMIC aRRaY iS an arrAy ThAt\n  is READ ThE Same backwaRDs anD forwardS. In One cHaNge, YOu can CHaNgE one elEmEnt to ANy othEr elEmeNt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChangeInRangeInRange = (arr) => {\n  let largestChange = 0;\n  let largestIndex = 0;\n  let largestNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largestNum && largestNum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  wRiTE a funCtION That aCCepts Two lIsTs of Strings anD ReTUrNs tHe list ThAt Has\n  TotAL NumBER oF chars in THe all stRInGs oF THE list leSS thAN THe OThEr list.\n\n  If the tWo LiSts hAVE THe SAme number oF CharS, return the firsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  wRiTE a funCtION That aCCepts Two lIsTs of Strings anD ReTUrNs tHe list ThAt Has\n  TotAL NumBER oF chars in THe all stRInGs oF THE list leSS thAN THe OThEr list.\n\n  If the tWo LiSts hAVE THe SAme number oF CharS, return the firsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let totalMatched = []\n  let numMatches = 0\n  let charsMatched = 0\n  let charsNotMatched = 0\n  let charsNotMatched2 = 0\n  let charsNotMatched3 = 0\n  let charsNotMatched4 = 0\n  let charsNotMatched5 = 0\n  let charsNotMatched6 = 0\n  let charsNotMatched7 = 0\n  let charsNotMatched8 = 0\n  let charsNotMatched9 = 0\n  let charsNotMatched10 = 0\n  let charsNotMatched11 = 0\n  let charsNotMatched12 = 0\n  let charsNotMatched13 = 0\n  let charsNotMatched14 = 0\n  let charsNotMatched15 = 0\n  let charsNotMatched16 = 0\n  let charsNotMatched17 = 0\n  let charsNotMatched18 = 0\n  let charsNotMatched19 = 0\n  let charsNotMatched20 = 0\n  let charsNotMatched21 = 0\n  let charsNotMatched22 = 0\n  let charsNotMatched23 = 0\n  let charsNotMatched24 = 0\n  let charsNotMatched25 = 0\n  let charsNotMatched26 = 0\n  let charsNotMatched27 = 0\n  let charsNotMatched28 = 0\n  let charsNotMatched29 = 0\n  let charsNotMatched30 = 0\n  let charsNotMatched31 = 0\n  let charsNotMatched32 = 0\n  let charsNotMatched33 = 0\n  let charsNotMatched34 = 0\n  let charsNotMatched35 = 0\n  let charsNotMatched36 = 0\n  let charsNotMatched37 = 0\n  let charsNotMatched38 = 0\n  let charsNotMatched39 = 0\n  let charsNotMatched40 = 0\n  let charsNotMatched41 = 0\n  let charsNotMatched42 = 0\n  let charsNotMatched43 = 0\n  let charsNotMatched44 = 0\n  let charsNotMatched45 = 0\n  let charsNotMatched46 = 0\n  let charsNotMatched47 = 0\n  let charsNotMatched48 = 0\n  let charsNotMatched49 = 0\n  let charsNotMatched50 = 0\n  let charsNotMatched51 = 0\n  let charsNotMatched52 = 0\n  let charsNotMatched53 = 0\n  let charsNotMatched54 = 0\n  let charsNotMatched55 = 0\n  let charsNotMatched56 = 0\n  let charsNotMatched57 = 0\n  let charsNotMatched58 = 0\n  let charsNotMatched59 = 0\n  let charsNotMatched60 = 0\n  let charsNotMatched61 = 0\n  let charsNotMatched62 = 0\n  let charsNotMatched63 = 0\n  let charsNotMatched64 = 0\n  let charsNotMatched65 = 0\n  let charsNotMatched66 = 0\n  let charsNotMatched67 = 0\n  let charsNotMatched68 = 0\n  let charsNotMatched69 = 0\n  let charsNotMatched70 = 0\n  let charsNotMatched71 = 0\n  let charsNotMatched72 = 0\n  let charsNotMatched73 = 0\n  let charsNotMatched74 = 0\n  let charsNotMatched75 = 0\n  let charsNotMatched76 = 0\n  let charsNotMatched77 = 0\n  let charsNotMatched78 = 0\n  let charsNotMatched79 = 0\n  let charsNotMatched80 = 0\n  let charsNotMatched81 = 0\n  let charsNotMatched82 = 0\n  let charsNotMatched83 = 0\n  let charsNotMatched84 = 0\n  let charsNotMatched85 = 0\n  let charsNotMatched86 = 0\n  let charsNotMatched87 = 0\n  let charsNotMatched88 = 0\n  let charsNotMatched89 = 0\n  let charsNotMatched90 = 0\n  let charsNotMatched91 = 0\n  let charsNotMatched92 = 0\n  let charsNotMatched93 = 0\n  let charsNotMatched94 = 0\n  let charsNotMatched95 = 0\n  let charsNotMatched96 = 0\n  let charsNotMatched97 = 0\n  let charsNotMatched98 = 0\n  let charsNotMatched99 = 0\n  let charsNotMatched100 = 0\n  let charsNotMatched101 = 0\n  let charsNotMatched102 = 0\n  let charsNotMatched103 = 0\n  let charsNotMatched104 = 0\n  let charsNotMatched105 = 0\n  let charsNotMatched106 = 0\n  let charsNotMatched107 = 0\n  let charsNotMatched108 = 0\n  let charsNotMatched109 = 0\n  let charsNotMatched110 = 0\n  let charsNotMatched111 = 0\n  let charsNotMatched112 = 0\n  let charsNotMatched113 = 0\n  let charsNotMatched114 = 0\n  let charsNotMatched115 = 0\n  let charsNotMatched116 = 0\n  let charsNotMatched117 = 0\n  let charsNotMatched118 = 0\n  let charsNotMatched119 = 0\n  let charsNotMatched120 = 0\n  let charsNotMatched121 = 0\n  let charsNotMatched122 = 0\n  let charsNotMatched123 = 0\n  let charsNotMatched124 = 0\n  let charsNotMatched125 = 0\n  let charsNotMatched126 = 0\n  let charsNotMatched127 = 0\n  let charsNotMatched128 = 0\n  let charsNotMatched129 = 0\n  let charsNotMatched130 = 0\n  let charsNotMatched131 = 0\n  let charsNotMatched132 = 0\n  let charsNotMatched133 = 0\n  let charsNotMatched134 = 0\n  let charsNotMatched135 = 0\n  let charsNotMatched136 = 0\n  let charsNotMatched137 = 0\n  let charsNotMatched138 = 0\n  let charsNotMatched139 = 0\n  let charsNotMatched140 = 0\n  let charsNotMatched141 = 0\n  let charsNotMatched142 = 0\n  let charsNotMatched143 = 0\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*WRItE a FunctIoN THAt retURns trUe if ThE givEn number iS ThE MuLtiPlIcAtIon Of 3 pRIMe nUMBeRs\n  and fALse otheRWiSe.\n  KNOWIng THat (a) IS LEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*WRItE a FunctIoN THAt retURns trUe if ThE givEn number iS ThE MuLtiPlIcAtIon Of 3 pRIMe nUMBeRs\n  and fALse otheRWiSe.\n  KNOWIng THat (a) IS LEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  let isPrime = true;\n  let isFactor = true;\n  let isFactorial = true;\n  let isFactorialFactorial = true;\n  let isFactorialFactorialFactorial = true;\n  let isFactorialFactorialFactorialFactorial = true;\n  let isFactorialFactorialFactorialFactorialFactorial = true;\n  let isFactorialFactorialFactorialFactorialFactorialFactorial = true;\n  let isFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorial = true;\n  let isFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactorialFactori", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*YOUr TAsk is To WRITe a fuNCtion That ReTurnS true if a nUMbER x iS a sImPlE\n  power oF n anD faLSE in otHER cAses.\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOUr TAsk is To WRITe a fuNCtion That ReTurnS true if a nUMbER x iS a sImPlE\n  power oF n anD faLSE in otHER cAses.\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const isPowerOfTwo = n & (n - 1) === 0;\n  return isPowerOfTwo && x === Math.pow(2, n);\n};\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfTwo = x => x & (x - 1) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfFour = x => x & (x - 2) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfEight = x => x & (x - 4) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfNine = x => x & (x - 8) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfTen = x => x & (x - 10) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfEleven = x => x & (x - 12) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfTwelve = x => x & (x - 14) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfThirteen = x => x & (x - 16) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfFourteen = x => x & (x - 20) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfFifteen = x => x & (x - 24) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfSixteen = x => x & (x - 28) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfSeventeen = x => x & (x - 32) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfEighteen = x => x & (x - 40) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isPowerOfNineteen = x => x & (x - 48) === 0;\n\n/*\n  x is A Simple power oF n If n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let iscube = a > 0;\n  if (iscube) {\n    console.log(`iscube(${a})`);\n  } else {\n    console.log(`iscube(${a})`);\n  }\n  return iscube;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  let iscube = a > 0;\n  if (iscube) {\n    console.log(`iscube2(${a})`);\n  } else {\n    console.log(`iscube2(${a})`);\n  }\n  return iscube;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  let iscube = a > 0;\n  if (iscube) {\n    console.log(`iscube3(${a})`);\n  } else {\n    console.log(`iscube3(${a})`);\n  }\n  return iscube;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  let iscube = a > 0;\n  if (iscube) {\n    console.log(`iscube4(${a})`);\n  } else {\n    console.log(`iscube4(${a})`);\n  }\n  return iscube;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  let iscube = a > 0;\n  if (iscube) {\n    console.log(`iscube5(${a})`);\n  } else {\n    console.log(`iscube5(${a})`);\n  }\n  return iscube;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  let iscube = a > 0;\n  if (iscube) {\n    console.log(`iscube6(${a})`);\n  } else {\n    console.log(`iscube6(${a})`);\n  }\n  return iscube;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  let iscube = a > 0;\n  if (iscube) {\n    console.log(`iscube7(${a})`);\n  } else {\n    console.log(`iscube7(${a})`);\n  }\n  return iscube;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  let iscube = a > 0;\n  if (iscube) {\n    console.log(`iscube8(${a})`);\n  } else {\n    console.log(`iscube8(${a})`);\n  }\n  return iscube;\n};\n\n/*\n  wRiTE a funcTiON THat taKEs an iNtegEr a And rEturns truE\n  If THiS inGeGeR iS a cuBe oF SOme INTeGer numBEr.\n  Note: yOU mAy aSSUMe tHE inPUT Is ALwAyS valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  let iscube = a > 0;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*YOU hAVe beeN tASKEd to wRIte a fUnctIoN thaT receives\n  A HeXAdEciMaL nUmBer As a STRinG ANd Counts THe numbeR Of HexADECimAL\n  diGITS tHAt ArE primes (prime NuMbEr=== or A PRIMe=== IS a natural nUMber\n  Greater tHan 1 That Is Not A ProduCT oF tWo smalLeR natuRAl numBers).\n  hexAdecIMal DIgits arE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== c=== D=== E=== F.\n  prIMe NumbERs are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO you have To deTermiNe a nUMBeR of the FolLoWING digitS: 2=== 3=== 5=== 7===\n  B (=decimAl 11)=== D (=decImal 13).\n  NoTE: You may aSsUMe the inPUt is aLWAYs coRREcT or emPtY STRINg===\n  And symbols A===B===C===d===E===F ARe AlwaYs uPpErCAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU hAVe beeN tASKEd to wRIte a fUnctIoN thaT receives\n  A HeXAdEciMaL nUmBer As a STRinG ANd Counts THe numbeR Of HexADECimAL\n  diGITS tHAt ArE primes (prime NuMbEr=== or A PRIMe=== IS a natural nUMber\n  Greater tHan 1 That Is Not A ProduCT oF tWo smalLeR natuRAl numBers).\n  hexAdecIMal DIgits arE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== c=== D=== E=== F.\n  prIMe NumbERs are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO you have To deTermiNe a nUMBeR of the FolLoWING digitS: 2=== 3=== 5=== 7===\n  B (=decimAl 11)=== D (=decImal 13).\n  NoTE: You may aSsUMe the inPUt is aLWAYs coRREcT or emPtY STRINg===\n  And symbols A===B===C===d===E===F ARe AlwaYs uPpErCAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumString = \"\";\n  let hexNumStringLength = 0;\n  let hexNumStringString = \"\";\n  let hexNumStringStringLength = 0;\n  let hexNumStringStringString = \"\";\n  let hexNumStringStringStringLength = 0;\n  let hexNumStringStringStringString = \"\";\n  let hexNumStringStringStringStringLength = 0;\n  let hexNumStringStringStringStringString = \"\";\n  let hexNumStringStringStringStringStringStringLength = 0;\n  let hexNumStringStringStringStringStringStringString = \"\";\n  let hexNumStringStringStringStringStringStringStringString = \"\";\n  let hexNumStringStringStringStringStringStringStringStringString = \"\";\n  let hexNumStringStringStringStringStringStringStringStringStringStringStringString = \"\";\n  let hexNumStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*YOU wILl be gIvEN A NumbeR in decimal Form aNd yoUr Task Is to conveRT iT To\n  BinArY fOrMat. the FUNctION sHould return a STring, wiTH eAch CHARacTEr rEPREsENtInG a binaRy\n  NuMber. eACH ChARacter in the sTRing Will be '0' or '1'.\n\n  theRe wiLl Be aN Extra COuPlE of chaRaCters 'DB' at thE begInnIng aND at THe end of ThE StriNg.\n  tHe ExtrA CharaCTers are tHere To helP witH THe Format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU wILl be gIvEN A NumbeR in decimal Form aNd yoUr Task Is to conveRT iT To\n  BinArY fOrMat. the FUNctION sHould return a STring, wiTH eAch CHARacTEr rEPREsENtInG a binaRy\n  NuMber. eACH ChARacter in the sTRing Will be '0' or '1'.\n\n  theRe wiLl Be aN Extra COuPlE of chaRaCters 'DB' at thE begInnIng aND at THe end of ThE StriNg.\n  tHe ExtrA CharaCTers are tHere To helP witH THe Format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = decimalToBinary(decimal);\n  return binary;\n};\n\n/*\n  decimalToHex(decimal)\n  converts a decimal to a hexadecimal string\n\n  Parameters:\n  decimal - a decimal number\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111\"\n  decimalToHex(32)   # returns \"db100000\"\n  */\nconst decimalToHex = (decimal) => {\n  const hex = decimalToHex(decimal);\n  return hex;\n};\n\n/*\n  decimalToBinary(decimal)\n  converts a decimal to a binary string\n\n  Parameters:\n  decimal - a decimal number\n\n  Examples:\n  decimalToBinary(15)   # returns \"11111111\"\n  decimalToBinary(32)   # returns \"10000010\"\n  */\nconst decimalToBinary = decimalToBinary(decimal);\n\n/*\n  decimalToHex(decimal)\n  converts a decimal to a hexadecimal string\n\n  Parameters:\n  decimal - a decimal number\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111\"\n  decimalToHex(32)   # returns \"db100000\"\n  */\nconst decimalToHex = decimalToHex(decimal);\n\n/*\n  decimalToBinary(decimal, binary)\n  converts a decimal to a binary string\n\n  Parameters:\n  decimal - a decimal number\n  binary - a binary string\n\n  Examples:\n  decimalToBinary(15)   # returns \"11111111\"\n  decimalToBinary(32)   # returns \"10000010\"\n  */\nconst decimalToBinary = decimalToBinary(decimal, binary);\n\n/*\n  decimalToHex(decimal, binary)\n  converts a decimal to a hexadecimal string\n\n  Parameters:\n  decimal - a decimal number\n  binary - a binary string\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111\"\n  decimalToHex(32)   # returns \"db100000\"\n  */\nconst decimalToHex = decimalToHex(decimal, binary);\n\n/*\n  decimalToBinary(decimal, hex)\n  converts a decimal to a binary string\n\n  Parameters:\n  decimal - a decimal number\n  hex - a hexadecimal string\n\n  Examples:\n  decimalToBinary(15)   # returns \"11111111\"\n  decimalToBinary(32)   # returns \"10000010\"\n  */\nconst decimalToBinary = decimalToBinary(decimal, hex);\n\n/*\n  decimalToHex(decimal, hex)\n  converts a decimal to a hexadecimal string\n\n  Parameters:\n  decimal - a decimal number\n  hex - a hexadecimal string\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111\"\n  decimalToHex(32)   # returns \"db100000\"\n  */\nconst decimalToHex = decimalToHex(decimal, hex);\n\n/*\n  decimalToBinary(decimal, binary)\n  converts a decimal to a binary string\n\n  Parameters:\n  decimal - a decimal number\n  binary - a binary string\n\n  Examples:\n  decimalToBinary(15)   # returns \"11111111\"\n  decimalToBinary(32)   # returns \"10000010\"\n  */\nconst decimalToBinary = decimalToBinary(decimal, binary);\n\n/*\n  decimalToHex(decimal, binary)\n  converts a decimal to a hexadecimal string\n\n  Parameters:\n  decimal - a decimal number\n  binary - a binary string\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111\"\n  decimalToHex(32)   # returns \"db100000\"\n  */\nconst decimalToHex = decimalToHex(decimal, binary);\n\n/*\n  decimalToBinary(decimal, hex)\n  converts a decimal to a binary string\n\n  Parameters:\n  decimal - a decimal number\n  hex - a hexadecimal string\n\n  Examples:\n  decimalToBinary(15)   # returns \"11111111\"\n  decimalToBinary(32)   # returns \"10000010\"\n  */\nconst decimalToBinary = decimalToBinary(decimal, hex);\n\n/*\n  decimalToHex(decimal, hex)\n  converts a decimal to a hexadecimal string\n\n  Parameters:\n  decimal - a decimal number\n  hex - a hexadecimal string\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111\"\n  decimalToHex(32)   # returns \"db100000\"\n  */\nconst decimalToHex = decimalToHex(decimal, hex);\n\n/*\n  decimalToBinary(decimal, binary)\n  converts a decimal to a binary string\n\n  Parameters:\n  decimal - a decimal number\n  binary - a binary string\n\n  Examples:\n  decimalToBinary(15)   # returns \"11111111\"\n  decimalToBinary(32)   # returns \"10000010\"\n  */\nconst decimalToBinary = decimalToBinary(decimal, binary);\n\n/*\n  decimalToHex(decimal, binary)\n  converts a decimal to a hexadecimal string\n\n  Parameters:\n  decimal - a decimal number\n  binary - a binary string\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111\"\n  decimalToHex(32)   # returns \"db100000\"\n  */\nconst decimalToHex = decimalToHex(decimal, binary);\n\n/*\n  decimalToBinary(decimal, binary)\n  converts a decimal to a binary string\n\n  Parameters:\n  decimal - a decimal number\n  binary - a binary string\n\n  Examples:\n  decimalToBinary(15)   # returns \"11111111\"\n  decimalToBinary(32)   # returns \"10000010\"\n  */\nconst decimalToBinary = decimalToBinary(decimal, binary);\n\n/*\n  decimalToHex(decimal, binary)\n  converts a decimal to a hexadecimal string\n\n  Parameters:\n  decimal - a decimal number\n  binary - a binary string\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111\"\n  decimalToHex(32)   # returns \"db100000\"\n  */\nconst decimalToHex = decimalToHex(decimal, binary);\n\n/*\n  decimalToBinary(decimal, binary)\n  converts a decimal to a binary string\n\n  Parameters:\n  decimal - a decimal number\n  binary - a binary string\n\n  Examples:\n  decimalToBinary(15)   # returns \"11111111\"\n  decimalToBinary(32)   # returns \"10000010\"\n  */\nconst decimalToBinary = decimalToBinary(decimal, binary);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (int) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProductWithZero = (numbers, int) => {\n  if (int) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([], 0)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 0)\n  (10, 24)\n  */\nconst sumProductWithOne = (numbers, int) => {\n  if (int) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProductWithTwo = (numbers, int) => {\n  if (int) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProductWithThree = (numbers, int) => {\n  if (int) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProductWithFour = (numbers, int) => {\n  if (int) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProductWithFive = (numbers, int) => {\n  if (int) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProductWithSix = (numbers, int) => {\n  if (int) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProductWithSeven = (numbers, int) => {\n  if (int) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prodUCt OF aLl tHe InTeGerS in a list.\n  EMPTy sUM ShOuld be EQual to 0 aND eMptY PROduCT shOULD bE EqUaL to 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProductWithEight = (numbers, int) => {\n  if (int) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n/* fOr A Given list Of INTEgers, return A tuple ConsiStinG oF a suM and a prod", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HAppY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HAppY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len === 3\n  return isHappy\n}\n\n/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HApY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len === 3\n  return isHappy\n}\n\n/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HApY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len === 3\n  return isHappy\n}\n\n/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HApY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len === 3\n  return isHappy\n}\n\n/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HApY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len === 3\n  return isHappy\n}\n\n/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HApY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len === 3\n  return isHappy\n}\n\n/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HApY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len === 3\n  return isHappy\n}\n\n/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HApY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len === 3\n  return isHappy\n}\n\n/*YOU aRE giveN a STRIng s.\n  YoUR task Is to ChEck iF the strinG Is HApPy oR nOt.\n  a sTriNg iS HApY IF iTs lengTH is at leASt 3 And EVERy 3 cONseCUTIvE LeTtErs are DiStInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*IT Is THe lasT wEEK Of the SEmestEr anD tHe teAcher has tO GiVE tHe grades\n  tO sTuDeNts. the TEAchER HaS been mAKing her OWn AlgORIThm FOr gRADInG.\n  thE oNly proBlEm Is, shE HAS LoST the code shE Used For gradiNg.\n  SHe haS gIveN You a list oF gPas For somE sTudenTS and yOu haVe tO wriTE\n  a fUNction tHaT Can oUtPUt A list of lETter grades uSIng the foLlowIng taBle:\n           Gpa       |    leTter grAde\n            4.0                a+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                b\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*IT Is THe lasT wEEK Of the SEmestEr anD tHe teAcher has tO GiVE tHe grades\n  tO sTuDeNts. the TEAchER HaS been mAKing her OWn AlgORIThm FOr gRADInG.\n  thE oNly proBlEm Is, shE HAS LoST the code shE Used For gradiNg.\n  SHe haS gIveN You a list oF gPas For somE sTudenTS and yOu haVe tO wriTE\n  a fUNction tHaT Can oUtPUt A list of lETter grades uSIng the foLlowIng taBle:\n           Gpa       |    leTter grAde\n            4.0                a+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                b\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    const letter = grade.charAt(0);\n    return grade.slice(1).split('').map(letter => letter.toUpperCase()).join('');\n  });\n  return letterGrades;\n};\n\n/**\n  Given a grades array and an optional string '-' as a separator, returns the\n  string representation of the grades array in its original order. If\n  the separator is omitted, the function returns an empty string.\n\n  Example:\n  reverseGrades([4.0, 3, 1.7, 2, 3.5], '-') ==> '3.5-4.0-1.7-2-3.5'\n  */\nconst reverseGrades = (grades, separator = '-') => {\n  if (separator === '') {\n    return grades.join('');\n  }\n  return grades.reverse().join(separator);\n};\n\n/**\n  Given a grades array and an optional string '-' as a separator, returns the\n  string representation of the grades array in its original order. If\n  the separator is omitted, the function returns an empty string.\n\n  Example:\n  reverseGrades([4.0, 3, 1.7, 2, 3.5], '-') ==> '4.0-3.5-2.7-1.7-2'\n  */\nconst reverseGradesReversed = (grades, separator = '-') => {\n  if (separator === '') {\n    return reverseGrades(grades, '-');\n  }\n  return reverseGrades(grades.reverse(), separator);\n};\n\n/**\n  Given a grades array and an optional string '-' as a separator, returns the\n  string representation of the grades array in its original order. If\n  the separator is omitted, the function returns an empty string.\n\n  Example:\n  reverseGrades([4.0, 3, 1.7, 2, 3.5], '-') ==> '3.5-4.0-1.7-2-3.5'\n  */\nconst reverseGradesReversedWithSeparator = (grades, separator = '-') => {\n  if (separator === '') {\n    return reverseGradesReversed(grades, '-');\n  }\n  return reverseGradesReversed(grades.reverse(), separator);\n};\n\n/**\n  Given a grades array and an optional string '-' as a separator, returns the\n  string representation of the grades array in its original order. If\n  the separator is omitted, the function returns an empty string.\n\n  Example:\n  reverseGrades([4.0, 3, 1.7, 2, 3.5], '-') ==> '3.5-4.0-1.7-2-3.5'\n  */\nconst reverseGradesReversedWithSeparatorReversed = (grades, separator = '-') => {\n  if (separator === '') {\n    return reverseGradesReversedWithSeparator(grades, '-');\n  }\n  return reverseGradesReversedWithSeparator(grades.reverse(), separator);\n};\n\n/**\n  Given a grades array and an optional string '-' as a separator, returns the\n  string representation of the grades array in its original order. If\n  the separator is omitted, the function returns an empty string.\n\n  Example:\n  reverseGrades([4.0, 3, 1.7, 2, 3.5], '-') ==> '3.5-4.0-1.7-2-3.5'\n  */\nconst reverseGradesReversedWithSeparatorReversedWithSeparator = (grades, separator = '-') => {\n  if (separator === '') {\n    return reverseGradesReversedWithSeparatorReversed(grades, '-');\n  }\n  return reverseGradesReversedWithSeparatorReversed(grades.reverse(), separator);\n};\n\n/**\n  Given a grades array and an optional string '-' as a separator, returns the\n  string representation of the grades array in its original order. If\n  the separator is omitted, the function returns an empty string.\n\n  Example:\n  reverseGrades([4.0, 3, 1.7, 2, 3.5], '-') ==> '3.5-4.0-1.7-2-3.5'\n  */\nconst reverseGradesReversedWithSeparatorReversedWithSeparatorReversed = (grades, separator = '-') => {\n  if (separator === '') {\n    return reverseGradesReversedWithSeparatorReversedWithSeparator(grades, '-');\n  }\n  return reverseGradesReversedWithSeparatorReversedWithSeparator(grades.reverse(), separator);\n};\n\n/**\n  Given a grades array and an optional string '-' as a separator, returns the\n  string representation of the grades array in its original order. If\n  the separator is omitted, the function returns an empty string.\n\n  Example:\n  reverseGrades([4.0, 3, 1.7, 2, 3.5], '-') ==> '3.5-4.0-1.7-2-3.5'\n  */\nconst reverseGradesReversedWithSeparatorReversedWithSeparatorReversedWithSeparator = (grades, separator = '-') => {\n  if (separator === '') {\n    return reverseGradesReversedWithSeparatorReversedWithSeparatorReversedWithSeparator(grades, '-');\n  }\n  return reverseGradesReversedWithSeparatorReversedWithSeparatorReversedWithSeparator(grades.reverse(), separator);\n};\n\n/**\n  Given a grades array and an optional string '-' as a separator, returns the\n  string representation of the grades array in its original order. If\n  the separator is omitted, the function returns an empty string.\n\n  Example:\n  reverseGrades([4.0, 3, 1.7, 2, 3.5], '-') ==> '3.5-4.0-1.7-2-3.5'\n  */\nconst reverseGradesReversedWithSeparatorReversedWithSeparatorReversedWithSeparatorReversedWithSeparator = (grades, separator = '-') => {\n  if (separator === '') {\n    return reverseGradesReversedWithSeparatorReversedWithSeparatorReversedWithSeparatorReversedWithSeparator(grades, '-');\n  }\n  return reverseGradesReversedWithSeparatorReversedWithSeparatorReversedWithSeparatorReversedWithSeparator(grades.reverse(), separator);\n};\n\n/**\n  Given a grades array and an optional string '-' as a separator, returns the\n  string representation of the grades array in its ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*WRItE A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '') {\n      primeLength++;\n    }\n  }\n  return primeLength;\n};\n\n/*\n  A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrime = (string) => {\n  let primeLength = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '') {\n      return false;\n    }\n    if (chars[i] === 1) {\n      primeLength++;\n    }\n  }\n  return primeLength % 2 === 0;\n};\n\n/*\n  A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let primeLength = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '') {\n      return false;\n    }\n    if (chars[i] === 1) {\n      primeLength++;\n    }\n  }\n  return primeLength % 2 === 0;\n};\n\n/*\n  A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let primeLength = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '') {\n      return false;\n    }\n    if (chars[i] === 1) {\n      primeLength++;\n    }\n  }\n  return primeLength % 2 === 0;\n};\n\n/*\n  A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let primeLength = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '') {\n      return false;\n    }\n    if (chars[i] === 1) {\n      primeLength++;\n    }\n  }\n  return primeLength % 2 === 0;\n};\n\n/*\n  A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let primeLength = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '') {\n      return false;\n    }\n    if (chars[i] === 1) {\n      primeLength++;\n    }\n  }\n  return primeLength % 2 === 0;\n};\n\n/*\n  A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let primeLength = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '') {\n      return false;\n    }\n    if (chars[i] === 1) {\n      primeLength++;\n    }\n  }\n  return primeLength % 2 === 0;\n};\n\n/*\n  A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let primeLength = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '') {\n      return false;\n    }\n    if (chars[i] === 1) {\n      primeLength++;\n    }\n  }\n  return primeLength % 2 === 0;\n};\n\n/*\n  A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let primeLength = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '') {\n      return false;\n    }\n    if (chars[i] === 1) {\n      primeLength++;\n    }\n  }\n  return primeLength % 2 === 0;\n};\n\n/*\n  A funcTiON THat taKEs a string anD retUrNs trUe if the string\n  leNGtH Is A prImE nUmBer Or fALSe oTHErWise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let primeLength = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === '') {\n      return false;\n    }\n    if (chars[i] === 1) {\n      primeLength++;\n    }\n  }\n  return primeLength % 2 === 0;\n};\n\n/*\n  A funcTiON TH", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a posItIVE IntegER n, return the cOunt Of The nUmbers of n-digit\n  pOSiTIvE inTeGeRs ThaT stART or END wIth 1.\n  */\nconST startsOneEnds = (n) => {\n  let i = 1;\n  let ii = n;\n  let i1 = 0\n  let i2 = 1;\n  let i3 = 2;\n  let i4 = 3;\n  let i5 = 4;\n  let i6 = 5;\n  let i7 = 6;\n  let i8 = 7;\n  let i9 = 8;\n  let i10 = 9;\n  let i11 = 10;\n  let i12 = 11;\n  let i13 = 12;\n  let i14 = 13;\n  let i15 = 14;\n  let i16 = 15;\n  let i17 = 16;\n  let i18 = 17;\n  let i19 = 18;\n  let i20 = 19;\n  let i21 = 20;\n  let i22 = 21;\n  let i23 = 22;\n  let i24 = 23;\n  let i25 = 24;\n  let i26 = 25;\n  let i27 = 26;\n  let i28 = 27;\n  let i29 = 28;\n  let i30 = 29;\n  let i31 = 30;\n  let i32 = 31;\n  let i33 = 32;\n  let i34 = 33;\n  let i35 = 34;\n  let i36 = 35;\n  let i37 = 36;\n  let i38 = 37;\n  let i39 = 38;\n  let i40 = 39;\n  let i41 = 40;\n  let i42 = 41;\n  let i43 = 42;\n  let i44 = 43;\n  let i45 = 44;\n  let i46 = 45;\n  let i47 = 46;\n  let i48 = 47;\n  let i49 = 48;\n  let i50 = 49;\n  let i51 = 50;\n  let i52 = 51;\n  let i53 = 52;\n  let i54 = 53;\n  let i55 = 54;\n  let i56 = 55;\n  let i57 = 56;\n  let i58 = 57;\n  let i59 = 58;\n  let i60 = 59;\n  let i61 = 60;\n  let i62 = 61;\n  let i63 = 62;\n  let i64 = 63;\n  let i65 = 64;\n  let i66 = 65;\n  let i67 = 66;\n  let i68 = 67;\n  let i69 = 68;\n  let i70 = 69;\n  let i71 = 70;\n  let i72 = 71;\n  let i73 = 72;\n  let i74 = 73;\n  let i75 = 74;\n  let i76 = 75;\n  let i77 = 76;\n  let i78 = 77;\n  let i79 = 78;\n  let i80 = 79;\n  let i81 = 80;\n  let i82 = 81;\n  let i83 = 82;\n  let i84 = 83;\n  let i85 = 84;\n  let i86 = 85;\n  let i87 = 86;\n  let i88 = 87;\n  let i89 = 88;\n  let i90 = 89;\n  let i91 = 90;\n  let i92 = 91;\n  let i93 = 92;\n  let i94 = 93;\n  let i95 = 94;\n  let i96 = 95;\n  let i97 = 96;\n  let i98 = 97;\n  let i99 = 98;\n  let i100 = 99;\n  let i101 = 100;\n  let i102 = 101;\n  let i103 = 102;\n  let i104 = 103;\n  let i105 = 104;\n  let i106 = 105;\n  let i107 = 106;\n  let i108 = 107;\n  let i109 = 108;\n  let i110 = 109;\n  let i111 = 110;\n  let i112 = 111;\n  let i113 = 112;\n  let i114 = 113;\n  let i115 = 114;\n  let i116 = 112;\n  let i117 = 113;\n  let i118 = 114;\n  let i119 = 115;\n  let i120 = 112;\n  let i121 = 113;\n  let i122 = 114;\n  let i123 = 115;\n  let i124 = 116;\n  let i125 = 117;\n  let i126 = 118;\n  let i127 = 119;\n  let i128 = 120;\n  let i129 = 121;\n  let i130 = 122;\n  let i131 = 123;\n  let i132 = 124;\n  let i133 = 125;\n  let i134 = 126;\n  let i135 = 127;\n  let i136 = 128;\n  let i137 = 129;\n  let i138 = 130;\n  let i139 = 131;\n  let i140 = 132;\n  let i141 = 133;\n  let i142 = 134;\n  let i143 = 135;\n  let i144 = 136;\n  let i145 = 137;\n  let i146 = 138;\n  let i147 = 139;\n  let i148 = 140;\n  let i149 = 141;\n  let i150 = 142;\n  let i151 = 143;\n  let i152 = 144;\n  let i153 = 145;\n  let i154 = 146;\n  let i155 = 147;\n  let i156 = 148;\n  let i157 = 149;\n  let i158 = 150;\n  let i159 = 151;\n  let i160 = 152;\n  let i161 = 153;\n  let i162 = 154;\n  let i163 = 155;\n  let i164 = 156;\n  let i165 = 157;\n  let i166 = 158;\n  let i167 = 159;\n  let i168 = 120;\n  let i169 = 121;\n  let i170 = 122;\n  let i171 = 123;\n  let i172 = 124;\n  let i173 = 125;\n  let i174 = 126;\n  let i175 = 127;\n  let i176 = 128;\n  let i177 = 129;\n  let i178 = 130;\n  let i179 = 131;\n  let i180 = 132;\n  let i181 = 133;\n  let i182 = 134;\n  let i183 = 135;\n  let i184 = 136;\n  let i185 = 137;\n  let i186 = 138;\n  let i177 = 139;\n  let i188 = 140;\n  let i189 = 141;\n  let i190 = 142;\n  let i191 = 143;\n  let i192 = 144;\n  let i193 = 145;\n  let i194 = 146;\n  let i195 = 147;\n  let i196 = 148;\n  let i197 = 149;\n  let i198 = 150;\n  let i199 = 151;\n  let i200 = 152;\n  let i201 = 153;\n  let i202 = 154;\n  let i203 = 155;\n  let i204 = 156;\n  let i205 = 157;\n  let i206 = 158;\n  let i207 = 159;\n  let i208 = 160;\n  let i209 = 161;\n  let i210 = 162;\n  let i211 = 163;\n  let i212 = 164;\n  let i213 = 165;\n  let i214 = 166;\n  let i215 = 167;\n  let i216 = 168;\n  let i217 = 169;\n  let i218 = 170;\n  let i219 = 171;\n  let i220 = 172;\n  let i221 = 173;\n  let i222 = 174;\n  let i223 = 175;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIVeN A posiTiVE INtegeR N, return The toTal sUm Of itS digits in biNArY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIVeN A posiTiVE INtegeR N, return The toTal sUm Of itS digits in biNArY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*\n  Given a positive integer N, return its decimal equivalent in binary.\n  \n  Example\n      For N = 1000, the decimal equivalent is \"1000\".\n      For N = 150, the decimal equivalent is \"1001\".\n      For N = 147, the decimal equivalent is \"1010\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimal = (N) => {\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer N, return its hexadecimal equivalent in binary.\n  \n  Example\n      For N = 1000, the hexadecimal equivalent is \"0x1000\".\n      For N = 150, the hexadecimal equivalent is \"0x1001\".\n      For N = 147, the hexadecimal equivalent is \"0x1010\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst hexadecimal = (N) => {\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(16);\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer N, return its octal equivalent in binary.\n  \n  Example\n      For N = 1000, the octal equivalent is \"0o1000\".\n      For N = 150, the octal equivalent is \"0o1001\".\n      For N = 147, the octal equivalent is \"0o1010\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst octal = (N) => {\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(8);\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer N, return its binary equivalent in binary.\n  \n  Example\n      For N = 1000, the binary equivalent is \"0b1000\".\n      For N = 150, the binary equivalent is \"0b1001\".\n      For N = 147, the binary equivalent is \"0b1010\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst binary = (N) => {\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer N, return its decimal equivalent in hexadecimal.\n  \n  Example\n      For N = 1000, the decimal equivalent is \"0x1000\".\n      For N = 150, the decimal equivalent is \"0x1001\".\n      For N = 147, the decimal equivalent is \"0x1010\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst hexdecimal = (N) => {\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(16);\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer N, return its octal equivalent in hexadecimal.\n  \n  Example\n      For N = 1000, the octal equivalent is \"0o1000\".\n      For N = 150, the octal equivalent is \"0o1001\".\n      For N = 147, the octal equivalent is \"0o1010\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst octaldecimal = (N) => {\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(8);\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer N, return its binary equivalent in hexadecimal.\n  \n  Example\n      For N = 1000, the binary equivalent is \"0b1000\".\n      For N = 150, the binary equivalent is \"0b1001\".\n      For N = 147, the binary equivalent is \"0b1010\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst binarydecimal = (N) => {\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer N, return its decimal equivalent in binary.\n  \n  Example\n      For N = 1000, the decimal equivalent is \"1000\".\n      For N = 150, the decimal equivalent is \"1001\".\n      For N = 147, the decimal equivalent is \"1010\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimaldecimal = (N) => {\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer N, return its hexadecimal equivalent in binary.\n  \n  Example\n      For N = 1000, the hexadecimal equivalent is \"0x1000\".\n      For N = 150, the hexadecimal equivalent is \"0x1001\".\n      For N = 147, the hexadecimal equivalent is \"0x1010\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst hexadecimaldecimaldecimal = (N) => {\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(16);\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer N, return its octal equivalent in binary.\n  \n  Example\n      For N = 1000, the octal equivalent is \"0o1000\".\n      For N = 150, the octal equivalent is \"0o1001\".\n      For N = 147, the octal equivalent is \"0o1010\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 �", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst subtract = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum -= lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst multiply = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst divide = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] / lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst power = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum *= lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteGErs lst. add thE eveN eLemeNts that arE At ODd IndIcEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst modPower = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % lst[i];\n  }\n  return sum;\n};\n\n/*\n  GIVeN A non-eMpTY list OF inteG", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const re = /(\\w)/g;\n  const shuffled = s.replace(re, (_, letter) => letter.toUpperCase());\n  return shuffled;\n};\n\n/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const re = /(\\w)/g;\n  const shuffled = s.replace(re, (_, letter) => letter.toUpperCase());\n  return shuffled;\n};\n\n/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const re = /(\\w)/g;\n  const shuffled = s.replace(re, (_, letter) => letter.toUpperCase());\n  return shuffled;\n};\n\n/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const re = /(\\w)/g;\n  const shuffled = s.replace(re, (_, letter) => letter.toUpperCase());\n  return shuffled;\n};\n\n/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const re = /(\\w)/g;\n  const shuffled = s.replace(re, (_, letter) => letter.toUpperCase());\n  return shuffled;\n};\n\n/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tHe characTerS arrAnGed in\n  AScendINg OrDer basEd On ascII valuE.\n  NotE: YoU shoULd kEEp the orDeR Of woRdS AnD blaNK spacES in the sentEnce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const re = /(\\w)/g;\n  const shuffled = s.replace(re, (_, letter) => letter.toUpperCase());\n  return shuffled;\n};\n\n/*\n  wRiTE a funCtION That tAKes a sTrinG aNd reTurns an orDErED vErsIoN oF iT.\n  OrDerED VerSIOn Of striNG, is a strINg WheRE ALl wORds (SEPArATeD bY space)\n  ArE rEplaCED BY a NEw word wherE All tH", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  yOu ARe givEn A 2 DIMensiONal daTa, as A nEsteD lists,\n  whiCH iS SiMilAr To MaTriX, hoWEVer, UNLiKe matrICes,\n  each ROw May CONTaiN A diFFEReNT nUmBer of cOlUmNs.\n  GiVEN lst, ANd INteger x, find INtegErs x in the list,\n  anD return list of TuplEs, [(X1, y1), (x2, Y2) ...] Such tHAt\n  EaCh tuple is a cOoRdinaTE - (row, cOlumNs), sTartINg wITh 0.\n  Sort cOoRDinaTeS InItiaLLy by rOWs in ascendIng oRder.\n  ALso, sORT cOordinAteS oF THE row by Columns in DescenDing orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  yOu ARe givEn A 2 DIMensiONal daTa, as A nEsteD lists,\n  whiCH iS SiMilAr To MaTriX, hoWEVer, UNLiKe matrICes,\n  each ROw May CONTaiN A diFFEReNT nUmBer of cOlUmNs.\n  GiVEN lst, ANd INteger x, find INtegErs x in the list,\n  anD return list of TuplEs, [(X1, y1), (x2, Y2)...] Such tHAt\n  EaCh tuple is a cOoRdinaTE - (row, cOlumNs), sTartINg wITh 0.\n  Sort cOoRDinaTeS InItiaLLy by rOWs in ascendIng oRder.\n  ALso, sORT cOordinAteS oF THE row by Columns in DescenDing orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let [row, col] = lst;\n  let [x, y] = col;\n  let [x, y] = x;\n  let [x, y] = y;\n  return [row, col];\n};\n\n/*\n  yOu ARe givEn A 2 DIMensiONal daTa, as A nEsteD lists,\n  whiCH iS SiMilAr To MaTriX, hoWEVer, UNLiKe matrICes,\n  each ROw May CONTaiN A diFFEReNT nUmBer of cOlUmNs.\n  GiVEN lst, ANd INteger x, find INtegErs x in the list,\n  anD return list of TuplEs, [(X1, y1), (x2, Y2)...] Such tHAt\n  EaCh tuple is a cOoRdinaTE - (row, cOlumNs), sTartINg wITh 0.\n  Sort cOoRDinaTeS InItiaLLy by rOWs in ascendIng oRder.\n  ALso, sORT cOordinAteS oF THE row by Columns in DescenDing orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let [row, col] = lst;\n  let [x, y] = col;\n  let [x, y] = x;\n  let [x, y] = y;\n  return [row, col];\n};\n\n/*\n  yOu ARe givEn A 2 DIMensiONal daTa, as A nEsteD lists,\n  whiCH iS SiMilAr To MaTriX, hoWEVer, UNLiKe matrICes,\n  each ROw May CONTaiN A diFFEReNT nUmBer of cOlUmNs.\n  GiVEN lst, ANd INteger x, find INtegErs x in the list,\n  anD return list of TuplEs, [(X1, y1), (x2, Y2)...] Such tHAt\n  EaCh tuple is a cOoRdinaTE - (row, cOlumNs), sTartINg wITh 0.\n  Sort cOoRDinaTeS InItiaLLy by rOWs in ascendIng oRder.\n  ALso, sORT cOordinAteS oF THE row by Columns in DescenDing orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let [row, col] = lst;\n  let [x, y] = col;\n  let [x, y] = x;\n  let [x, y] = y;\n  return [row, col];\n};\n\n/*\n  yOu ARe givEn A 2 DIMensiONal daTa, as A nEsteD lists,\n  whiCH iS SiMilAr To MaTriX, hoWEVer, UNLiKe matrICes,\n  each ROw May CONTaiN A diFFEReNT nUmBer of cOlUmNs.\n  GiVEN lst, ANd INteger x, find INtegErs x in the list,\n  anD return list of TuplEs, [(X1, y1), (x2, Y2)...] Such tHAt\n  EaCh tuple is a cOoRdinaTE - (row, cOlumNs), sTartINg wITh 0.\n  Sort cOoRDinaTeS InItiaLLy by rOWs in ascendIng oRder.\n  ALso, sORT cOordinAteS oF THE row by Columns in DescenDing orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let [row, col] = lst;\n  let [x, y] = col;\n  let [x, y] = x;\n  let [x, y] = y;\n  return [row, col];\n};\n\n/*\n  yOu ARe givEn A 2 DIMensiONal daTa, as A nEsteD lists,\n  whiCH iS SiMilAr To MaTriX, hoWEVer, UNLiKe matrICes,\n  each ROw May CONTaiN A diFFEReNT nUmBer of cOlUmNs.\n  GiVEN lst, ANd INteger x, find INtegErs x in the list,\n  anD return list of TuplEs, [(X1, y1), (x2, Y2)...] Such tHAt\n  EaCh tuple is a cOoRdinaTE - (row, cOlumNs), sTartINg wITh 0.\n  Sort cOoRDinaTeS InItiaLLy by rOWs in ascendIng oRder.\n  ALso, sORT cOordinAteS oF THE row by Columns in DescenDing orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  gIvEN an array of NoN-NEGativE IntegErs, return a CoPy of The given array aFTeR SoRtiNg,\n  YoU wIll SorT THe gIVEn array in AscendINg order IF tHe sUM( FIrsT IndEX VAlUE, lAsT index VaLuE) is oDD,\n  OR SoRT it in descendINg orDer if the Sum( FirsT iNdeX Value, LAsT iNdex vaLuE) is evEN.\n\n  Note:\n  * Don't ChaNge tHE giVEn array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN an array of NoN-NEGativE IntegErs, return a CoPy of The given array aFTeR SoRtiNg,\n  YoU wIll SorT THe gIVEn array in AscendINg order IF tHe sUM( FIrsT IndEX VAlUE, lAsT index VaLuE) is oDD,\n  OR SoRT it in descendINg orDer if the Sum( FirsT iNdeX Value, LAsT iNdex vaLuE) is evEN.\n\n  Note:\n  * Don't ChaNge tHE giVEn array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const aFTeR = array.slice();\n  const aIvEN = [];\n  let iNdEX = 0;\n  let iNdex = 0;\n  let iNdEN = 0;\n  let iNdENg = 0;\n  let iNdENgIndEX = 0;\n  let iNdENgIndEXg = 0;\n  let iNdENgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXg = 0;\n  let iNdENgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX = 0;\n  let iNdENgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEXgIndEX", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*CREaTE a funCtION encrypt That tAKes a sTrinG aS an aRgument anD\n  ReTUrNs a StRiNg EncRypTED wiTH ThE alphaBEt being ROtAteD. \n  tHE alPHabET SHoULd Be RotateD in a MaNner SUCH ThAT the letterS \n  ShifT down by tWo mUltiPlIed TO two pLAcEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CREaTE a funCtION encrypt That tAKes a sTrinG aS an aRgument anD\n  ReTUrNs a StRiNg EncRypTED wiTH ThE alphaBEt being ROtAteD. \n  tHE alPHabET SHoULd Be RotateD in a MaNner SUCH ThAT the letterS \n  ShifT down by tWo mUltiPlIed TO two pLAcEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = '';\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* fRoM A giveN list oF INTegerS, GenerAte a list Of RollIng maximuM ElEMeNt fOuNd UnTil GivEN MomENT\n  in tHe sequENce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxes = numbers.reduce((acc, curr, index) => {\n    if (curr > acc) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  return numbers.reduce((acc, curr, index) => {\n    if (curr > maxes) {\n      return curr;\n    }\n    return acc;\n  }, 0);\n};\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2]\n  */\nconst rollingMax3 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2]\n  */\nconst rollingMax4 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2]\n  */\nconst rollingMax5 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax6 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax7 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax8 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax9 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax10 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax11 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax12 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax13 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax14 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax15 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax16 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax17 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax18 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax19 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax20 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax21 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax22 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax23 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax24 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax25 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax26 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax27 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax28 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax29 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax30 = rollingMax;\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2])\n  [1, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMax31 = rollingMax;\n\n/**\n  >>> rolling", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  yOu ARe givEn A list OF IntegERs.\n  WriTe a fUnCtioN nextSmallest() that retuRNs THe 2Nd smallest eLeMeNt Of tHe list.\n  RETUrn NULl If therE Is no sucH ElEmeNT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == NUll\n  nextSmallest([1, 1]) == NUll\n  */\nCONSt nextSmallest = (lst) => {\n  let nextSmallest = (lst) => {\n    if (lst.length === 0) return null\n    let nextSmallest = (lst) => {\n      if (lst.length === 0) return null\n      let nextSmallest = (lst) => {\n        if (lst.length === 0) return null\n        let nextSmallest = (lst) => {\n          if (lst.length === 0) return null\n          let nextSmallest = (lst) => {\n            if (lst.length === 0) return null\n            let nextSmallest = (lst) => {\n              if (lst.length === 0) return null\n              let nextSmallest = (lst) => {\n                if (lst.length === 0) return null\n                let nextSmallest = (lst) => {\n                  if (lst.length === 0) return null\n                  let nextSmallest = (lst) => {\n                    if (lst.length === 0) return null\n                    let nextSmallest = (lst) => {\n                      if (lst.length === 0) return null\n                      let nextSmallest = (lst) => {\n                        if (lst.length === 0) return null\n                        let nextSmallest = (lst) => {\n                          if (lst.length === 0) return null\n                          let nextSmallest = (lst) => {\n                            if (lst.length === 0) return null\n                            let nextSmallest = (lst) => {\n                              if (lst.length === 0) return null\n                              let nextSmallest = (lst) => {\n                                if (lst.length === 0) return null\n                                let nextSmallest = (lst) => {\n                                  if (lst.length === 0) return null\n                                  let nextSmallest = (lst) => {\n                                    if (lst.length === 0) return null\n                                    let nextSmallest = (lst) => {\n                                      if (lst.length === 0) return null\n                                      let nextSmallest = (lst) => {\n                                        if (lst.length === 0) return null\n                                        let nextSmallest = (lst) => {\n                                          if (lst.length === 0) return null\n                                          let nextSmallest = (lst) => {\n                                            if (lst.length === 0) return null\n                                            let nextSmallest = (lst) => {\n                                              if (lst.length === 0) return null\n                                              let nextSmallest = (lst) => {\n                                                let nextSmallest = (lst) => {\n                                                  if (lst.length === 0) return null\n                                                  let nextSmallest = (lst) => {\n                                                    if (lst.length === 0) return null\n                                                    let nextSmallest = (lst) => {\n                                                      if (lst.length === 0) return null\n                                                      let nextSmallest = (lst) => {\n                                                        let nextSmallest = (lst) => {\n                                                          let nextSmallest = (lst) => {\n                                                            let nextSmallest = (lst) => {\n                                                              let nextSmallest = (lst) => {\n                                                                let nextSmallest = (lst) => {\n                                                                  let nextSmallest = (lst) => {\n                                                                    let nextSmallest = (lst) => {\n                                                                      let nextSmallest = (lst) => {\n                                                                        let nextSmallest = (lst) => {\n                                                                          let nextSmallest = (lst) => {\n                                                                            let nextSmallest = (lst) => {\n                                                                              let nextSmallest = (lst) => {\n                                                                                let nextSmallest = (lst) => {\n                                                                                  let nextSmallest = (lst) => {\n                                                                                    let nextSmallest = (lst) => {\n                                                                                      let nextSmallest = (lst) => {\n                                                                                        let nextSmallest = (lst) => {\n                                                                                          let nextSmallest = (lst) => {\n                                                                                            let nextSmallest = (lst) => {\n                                                                                              let nextSmallest = (lst) => {\n                                                                                                let nextSmallest = (lst) => {\n                                                                                                  let nextSmallest = (lst) => {\n                                                                                                    let nextSmallest = (lst) => {\n                                                                                                      if (lst.length === 0) return null\n                                                                                                      let nextSmallest = (lst) => {\n                                                                                                        if (lst.length === 0) return null\n                                                                                                        let nextSmallest = (lst) => {\n                                                                                                          let nextSmallest = (lst) => {\n                                                                                                            if (lst.length === 0) return null\n                                                                                                            let nextSmallest = (lst) => {\n                                                                                                              let nextSmallest = (lst) => {\n                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                  let nextSmallest = (lst) => {\n                                                                                                                    let nextSmallest = (lst) => {\n                                                                                                                      let nextSmallest = (lst) => {\n                                                                                                                        let nextSmallest = (lst) => {\n                                                                                                                          let nextSmallest = (lst) => {\n                                                                                                                            let nextSmallest = (lst) => {\n                                                                                                                              let nextSmallest = (lst) => {\n                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                  let nextSmallest = (lst) => {\n                                                                                                                                    let nextSmallest = (lst) => {\n                                                                                                                                      let nextSmallest = (lst) => {\n                                                                                                                                        let nextSmallest = (lst) => {\n                                                                                                                                          let nextSmallest = (lst) => {\n                                                                                                                                            let nextSmallest = (lst) => {\n                                                                                                                                              let nextSmallest = (lst) => {\n                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                  let nextSmallest = (lst) => {\n                                                                                                                                                    let nextSmallest = (lst) => {\n                                                                                                                                                      let nextSmallest = (lst) => {\n                                                                                                                                                        let nextSmallest = (lst) => {\n                                                                                                                                                          let nextSmallest = (lst) => {\n                                                                                                                                                            let nextSmallest = (lst) => {\n                                                                                                                                                              let nextSmallest = (lst) => {\n                                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                                  let nextSmallest = (lst) => {\n                                                                                                                                                                    let nextSmallest = (lst) => {\n                                                                                                                                                                      if (lst.length === 0) return null\n                                                                                                                                                                      let nextSmallest = (lst) => {\n                                                                                                                                                                        let nextSmallest = (lst) => {\n                                                                                                                                                                          let nextSmallest = (lst) => {\n                                                                                                                                                                        if (lst.length === 0) return null\n                                                                                                                                                                        let nextSmallest = (lst) => {\n                                                                                                                                                                          let nextSmallest = (lst) => {\n                                                                                                                                                                            if (lst.length === 0) return null\n                                                                                                                                                                            let nextSmallest = (lst) => {\n                                                                                                                                                                              let nextSmallest = (lst) => {\n                                                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                                                  let nextSmallest = (lst) => {\n                                                                                                                                                                                    let nextSmallest = (lst) => {\n                                                                                                                                                                                      let nextSmallest = (lst) => {\n                                                                                                                                                                                        let nextSmallest = (lst) => {\n                                                                                                                                                                                          let nextSmallest = (lst) => {\n                                                                                                                                                                                            let nextSmallest = (lst) => {\n                                                                                                                                                                                              let nextSmallest = (lst) => {\n                                                                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                                                                let nextSmallest = (lst) => {\n                                                                                                                                                                                                let next", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  yOu'LL be giVeN A STring OF wordS, and YoUr taSk is to couNT tHE nUmbEr\n  Of BoRedOms. a BOreDOM iS a sentENce that STaRts WITH thE WorD \"i\".\n  sEnTEnCeS are deLiMiTed bY '.', '?' OR '!'.\n \n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  yOu'LL be giVeN A STring OF wordS, and YoUr taSk is to couNT tHE nUmbEr\n  Of BoRedOms. a BOreDOM iS a sentENce that STaRts WITH thE WorD \"i\".\n  sEnTEnCeS are deLiMiTed bY '.', '?' OR '!'.\n \n  fOr EXample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let wordS = S.toLowerCase()\n  let wordS = wordS.trim()\n  let wordS = wordS.split(' ')\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word => word.toLowerCase())\n  let wordS = wordS.filter(word => word.length > 0)\n  let wordS = wordS.map(word ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* cReATe a fuNcTION that TAkes 3 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* cReATe a fuNcTION that TAkes 3 nUmbeRs.\n  retuRns true if ONe OF tHe nUmBeRs Is eQuaL TO thE SUm Of the oTHer two, aND aLl nUMBErs ARe iNTEGeRS.\n  REtUrns faLsE in aNy otHER CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const isOdd = (x % 2) === 1;\n  const isEven = (x % 2) === 0;\n  const isOddEven = (x % 2) === (isEven? 2 : 1);\n  const isOddOddEven = (x % 2) === (isOddEven? 2 : 1);\n  const isOddOddOddEven = (x % 2) === (isOddOddEven? 2 : 1);\n  const isOddOddOddOddEven = (x % 2) === (isOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddEven = (x % 2) === (isOddOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddOddEven = (x % 2) === (isOddOddOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddOddOddEven = (x % 2) === (isOddOddOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddOddOddOddEven = (x % 2) === (isOddOddOddOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddOddOddOddOddOddEven = (x % 2) === (isOddOddOddOddOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddOddOddOddOddOddOddEven = (x % 2) === (isOddOddOddOddOddOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddOddOddOddOddOddOddOddEven = (x % 2) === (isOddOddOddOddOddOddOddOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddOddOddOddOddOddOddOddOddEven = (x % 2) === (isOddOddOddOddOddOddOddOddOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = (x % 2) === (isOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = (x % 2) === (isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven? 2 : 1);\n  const isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const encoded = message.split('').map(c => c.charCodeAt(0)).join('');\n  return encoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (encoded) => {\n  const decoded = encoded.split('').map(c => c.charCodeAt(0)).join('');\n  return decoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAll = (encoded) => {\n  const decoded = encoded.split('').map(c => c.charCodeAt(0)).join('');\n  return decoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAllAll = (encoded) => {\n  const decoded = encoded.split('').map(c => c.charCodeAt(0)).join('');\n  return decoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAllAllAll = (encoded) => {\n  const decoded = encoded.split('').map(c => c.charCodeAt(0)).join('');\n  return decoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAllAllAllAll = (encoded) => {\n  const decoded = encoded.split('').map(c => c.charCodeAt(0)).join('');\n  return decoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAllAllAllAllAll = (encoded) => {\n  const decoded = encoded.split('').map(c => c.charCodeAt(0)).join('');\n  return decoded;\n};\n\n/*\n  wRiTE a funCtION That tAKes a message, aNd enCoDes in sUch a \n  way thAT iT SwAps CaSe Of All LetTERs, rEPLaCes all VOwels in \n  thE message WiTh tHE LEttER thAT APpEArS 2 pLaces aHeAd Of thAT \n  VOWeL in The english ALphaBet. \n  AssumE onLy leTtErs. \n  \n  eXamplES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAllAllAllAllAllAll = (encoded) => {\n  const decoded = encoded.split('').map(c => c.charCodeAt(0)).join('');\n  return decoded;\n};\n\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*YOU aRE giveN a list OF INtegeRS.\n  You nEed tO fInd tHe largest PRiME vAluE aNd return ThE suM of ITS diGITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOU aRE giveN a list OF INtegeRS.\n  You nEed tO fInd tHe largest PRiME vAluE aNd return ThE suM of ITS diGITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxInt = -1;\n  let maxNum = -1;\n  let maxNumInt = -1;\n  let maxNumNum = -1;\n  let maxNumNumInt = -1;\n  let maxNumNumNum = -1;\n  let maxNumNumNumInt = -1;\n  let maxNumNumNumNum = -1;\n  let maxNumNumNumNumInt = -1;\n  let maxNumNumNumNumNum = -1;\n  let maxNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNum = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n  let maxNumNumNumNumNumNumNumInt = -1;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let retVal = false;\n  for (let key in dict) {\n    if (dict[key]!== undefined) {\n      if (dict[key]!== null && dict[key]!== undefined && dict[key]!== \"\") {\n        if (dict[key].toLowerCase().includes(dict[i].toLowerCase())) {\n          retVal = true;\n        }\n      }\n    }\n  }\n  return retVal;\n};\n\n/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let retVal = false;\n  for (let key in dict) {\n    if (dict[key]!== undefined) {\n      if (dict[key]!== null && dict[key]!== undefined && dict[key]!== \"\") {\n        if (dict[key].toLowerCase().includes(dict[i].toLowerCase())) {\n          retVal = true;\n        }\n      }\n    }\n  }\n  return retVal;\n};\n\n/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe the GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let retVal = false;\n  for (let key in dict) {\n    if (dict[key]!== undefined) {\n      if (dict[key]!== null && dict[key]!== undefined && dict[key]!== \"\") {\n        if (dict[key].toLowerCase().includes(dict[i].toLowerCase())) {\n          retVal = true;\n        }\n      }\n    }\n  }\n  return retVal;\n};\n\n/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe the GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let retVal = false;\n  for (let key in dict) {\n    if (dict[key]!== undefined) {\n      if (dict[key]!== null && dict[key]!== undefined && dict[key]!== \"\") {\n        if (dict[key].toLowerCase().includes(dict[i].toLowerCase())) {\n          retVal = true;\n        }\n      }\n    }\n  }\n  return retVal;\n};\n\n/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe the GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let retVal = false;\n  for (let key in dict) {\n    if (dict[key]!== undefined) {\n      if (dict[key]!== null && dict[key]!== undefined && dict[key]!== \"\") {\n        if (dict[key].toLowerCase().includes(dict[i].toLowerCase())) {\n          retVal = true;\n        }\n      }\n    }\n  }\n  return retVal;\n};\n\n/*\n  gIvEN a dicTiONARy, return truE If all Keys ArE strIngs in lower \n  CAsE Or All KeYs ArE stRinGS in UppER CaSe, else return FAlse.\n  The FUnCtiON SHouLD return faLSE Is THe the GiVen dicTiOnAry iS EMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*IMPlEMent a FuNCTIon thAT takeS an nOn-NegaTive integER aND rEtuRnS aN aRraY of THE fiRST n\n  iNtegerS That are PRiMe nUMBErs ANd lESS ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*IMPlEMent a FuNCTIon thAT takeS an nOn-NegaTive integER aND rEtuRnS aN aRraY of THE fiRST n\n  iNtegerS That are PRiMe nUMBErs ANd lESS ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = []\n  let i = 0\n  while (i < n) {\n    arr.push(++i)\n  }\n  return arr\n}\n\n/*\n  countDownTo(n) =>\n  countDownTo(n,0) => []\n  countDownTo(n,1) => []\n  countDownTo(n,2) => [1,2,3]\n  countDownTo(n,3) => [1,2,4,6,8]\n  countDownTo(n,4) => [1,2,4,6,8,10,12]\n  countDownTo(n,5) =>\n    [1,2,4,6,8,10,12,14,16,18,20]\n  countDownTo(n,6) =>\n    [1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,744,746,748,750,752,754,756,758,760,764,766,768,770,772,774,776,778,780,782,784,788,790,792,794,796,798,800,802,804,806,808,810,812,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982];\n  countDownTo(n,1) => []\n  countDownTo(n,2) => [1,2,3]\n  countDownTo(n,3) => [1,2,4,6,8]\n  countDownTo(n,4) => [1,2,4,6,8,10,12]\n  countDownTo(n,5) =>\n    [1,2,4,6,8,10,12,14,16,18,20]\n  countDownTo(n,6) =>\n    [1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*COMpLEte thE fUNCTion tHAt takEs twO iNtegErs and retURnS \n  ThE prOdUcT oF thEir UNIt dIGItS.\n  AssumE The inpuT Is AlwAYS ValID.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*COMpLEte thE fUNCTion tHAt takEs twO iNtegErs and retURnS \n  ThE prOdUcT oF thEir UNIt dIGItS.\n  AssumE The inpuT Is AlwAYS ValID.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const aNum = Number(a);\n  const bNum = Number(b);\n  const aIsValid = isValid(aNum);\n  const bIsValid = isValid(bNum);\n  if (aIsValid && bIsValid) {\n    return aNum * bNum;\n  }\n  return NaN;\n};\n\n/**\n  Returns true if the input is a valid number.\n  Examples:\n  isValid(14) should return true.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN) should return false.\n  isValid(NaN", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  gIvEN a strInG s, COUnt thE NumbeR of uPpErcaSe vowels in eVEn INdIceS.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* cReATe a fuNcTION that TAkes a value (StriNg) ReprEsenting a NUmBEr\n  And ReTuRnS thE clOSEst INTeGer to iT. if the nuMBeR is EQUIdiSTanT\n  FROm TWo InTegers, RoUnD it aWAY FRoM Zero.\n  ExamplES\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* cReATe a fuNcTION that TAkes a value (StriNg) ReprEsenting a NUmBEr\n  And ReTuRnS thE clOSEst INTeGer to iT. if the nuMBeR is EQUIdiSTanT\n  FROm TWo InTegers, RoUnD it aWAY FRoM Zero.\n  ExamplES\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const [integer3, fraction3] = fraction2.split(\".\");\n  const [integer4, fraction4] = fraction3.split(\".\");\n  const [integer5, fraction5] = fraction4.split(\".\");\n  const [integer6, fraction6] = fraction5.split(\".\");\n  const [integer7, fraction7] = fraction6.split(\".\");\n  const [integer8, fraction8] = fraction7.split(\".\");\n  const [integer9, fraction9] = fraction8.split(\".\");\n  const [integer10, fraction10] = fraction9.split(\".\");\n  const [integer11, fraction11] = fraction10.split(\".\");\n  const [integer12, fraction12] = fraction11.split(\".\");\n  const [integer13, fraction13] = fraction12.split(\".\");\n  const [integer14, fraction14] = fraction13.split(\".\");\n  const [integer15, fraction15] = fraction14.split(\".\");\n  const [integer16, fraction16] = fraction15.split(\".\");\n  const [integer17, fraction17] = fraction16.split(\".\");\n  const [integer18, fraction18] = fraction17.split(\".\");\n  const [integer19, fraction19] = fraction18.split(\".\");\n  const [integer20, fraction20] = fraction19.split(\".\");\n  const [integer21, fraction21] = fraction20.split(\".\");\n  const [integer22, fraction22] = fraction21.split(\".\");\n  const [integer23, fraction23] = fraction22.split(\".\");\n  const [integer24, fraction24] = fraction23.split(\".\");\n  const [integer25, fraction25] = fraction24.split(\".\");\n  const [integer26, fraction26] = fraction25.split(\".\");\n  const [integer27, fraction27] = fraction26.split(\".\");\n  const [integer28, fraction28] = fraction27.split(\".\");\n  const [integer29, fraction29] = fraction28.split(\".\");\n  const [integer30, fraction30] = fraction29.split(\".\");\n  const [integer31, fraction31] = fraction30.split(\".\");\n  const [integer32, fraction32] = fraction31.split(\".\");\n  const [integer33, fraction33] = fraction32.split(\".\");\n  const [integer34, fraction34] = fraction33.split(\".\");\n  const [integer35, fraction35] = fraction34.split(\".\");\n  const [integer36, fraction36] = fraction35.split(\".\");\n  const [integer37, fraction37] = fraction36.split(\".\");\n  const [integer38, fraction38] = fraction37.split(\".\");\n  const [integer39, fraction39] = fraction38.split(\".\");\n  const [integer40, fraction40] = fraction39.split(\".\");\n  const [integer41, fraction41] = fraction40.split(\".\");\n  const [integer42, fraction42] = fraction41.split(\".\");\n  const [integer43, fraction43] = fraction42.split(\".\");\n  const [integer44, fraction44] = fraction43.split(\".\");\n  const [integer45, fraction45] = fraction44.split(\".\");\n  const [integer46, fraction46] = fraction45.split(\".\");\n  const [integer47, fraction47] = fraction46.split(\".\");\n  const [integer48, fraction48] = fraction47.split(\".\");\n  const [integer49, fraction49] = fraction48.split(\".\");\n  const [integer50, fraction50] = fraction49.split(\".\");\n  const [integer51, fraction51] = fraction50.split(\".\");\n  const [integer52, fraction52] = fraction51.split(\".\");\n  const [integer53, fraction53] = fraction52.split(\".\");\n  const [integer54, fraction54] = fraction53.split(\".\");\n  const [integer55, fraction55] = fraction54.split(\".\");\n  const [integer56, fraction56] = fraction55.split(\".\");\n  const [integer57, fraction57] = fraction56.split(\".\");\n  const [integer58, fraction58] = fraction57.split(\".\");\n  const [integer59, fraction59] = fraction58.split(\".\");\n  const [integer60, fraction60] = fraction59.split(\".\");\n  const [integer61, fraction61] = fraction60.split(\".\");\n  const [integer62, fraction62] = fraction61.split(\".\");\n  const [integer63, fraction63] = fraction62.split(\".\");\n  const [integer64, fraction64] = fraction63.split(\".\");\n  const [integer65, fraction65] = fraction64.split(\".\");\n  const [integer66, fraction66] = fraction65.split(\".\");\n  const [integer67, fraction67] = fraction66.split(\".\");\n  const [integer68, fraction68] = fraction67.split(\".\");\n  const [integer69, fraction69] = fraction68.split(\".\");\n  const [integer70, fraction70] = fraction69.split(\".\");\n  const [integer71, fraction71] = fraction70.split(\".\");\n  const [integer72, fraction72] = fraction71.split(\".\");\n  const [integer73, fraction73] = fraction72.split(\".\");\n  const [integer74, fraction74] = fraction73.split(\".\");\n  const [integer75, fraction75] = fraction74.split(\".\");\n  const [integer76, fraction76] = fraction75.split(\".\");\n  const [integer77, fraction77] = fraction76.split(\".\");\n  const [integer78, fraction78] = fraction77.split(\".\");\n  const [integer79, fraction79] = fraction78.split(\".\");\n  const [integer80, fraction80] = fraction79.split(\".\");\n  const [integer81, fraction81] = fraction80.split(\".\");\n  const [integer82, fraction82] = fraction81.split(\".\");\n  const [integer83, fraction83] = fraction82.split(\".\");\n  const [integer84, fraction84] = fraction83.split(\".\");\n  const [integer85, fraction85] = fraction84.split(\".\");\n  const [integer86, fraction86] = fraction85.split(\".\");\n  const [integer87, fraction87] = fraction86.split(\".\");\n  const [integer88, fraction88] = fraction87.split(\".\");\n  const [integer89, fraction89] = fraction88.split(\".\");\n  const [integer90, fraction90] = fraction89.split(\".\");\n  const [integer91, fraction91] = fraction90.split(\".\");\n  const [integer92, fraction92] = fraction91.split(\".\");\n  const [integer93, fraction93] = fraction92.split(\".\");\n  const [integer94, fraction94] = fraction93.split(\".\");\n  const [integer95, fraction95] = fraction94.split(\".\");\n  const [integer96, fraction96] = fraction95.split(\".\");\n  const [integer97, fraction97] = fraction96.split(\".\");\n  const [integer98, fraction98] = fraction97.split(\".\");\n  const ", "passed": 0, "run_status": 2}
