{"task_id": "JavaScript/0", "prompt": "/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let closeElements = false;\n  let closeNumbers = numbers.filter(n => Math.abs(n - threshold) < 1e-10);\n  if (closeNumbers.length > 0) {\n    closeElements = closeNumbers.some(n => Math.abs(n - threshold) < 1e-10);\n  }\n  return closeElements;\n};\n\n/**\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEquals = (numbers, threshold) => {\n  let closeElements = false;\n  let closeNumbers = numbers.filter(n => Math.abs(n - threshold) < 1e-10);\n  if (closeNumbers.length > 0) {\n    closeElements = closeNumbers.some(n => Math.abs(n - threshold) < 1e-10);\n  }\n  return closeElements || closeNumbers.length === 0;\n};\n\n/**\n  >>> hasCloseElementsOrEquals([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEquals([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualsOrEquals = (numbers, threshold) => {\n  let closeElements = false;\n  let closeNumbers = numbers.filter(n => Math.abs(n - threshold) < 1e-10);\n  if (closeNumbers.length > 0) {\n    closeElements = closeNumbers.some(n => Math.abs(n - threshold) < 1e-10);\n  }\n  return closeElements || closeNumbers.length === 0;\n};\n\n/**\n  >>> hasCloseElementsOrEqualsOrEquals([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualsOrEquals([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualsOrEqualsOrEquals = (numbers, threshold) => {\n  let closeElements = false;\n  let closeNumbers = numbers.filter(n => Math.abs(n - threshold) < 1e-10);\n  if (closeNumbers.length > 0) {\n    closeElements = closeNumbers.some(n => Math.abs(n - threshold) < 1e-10);\n  }\n  return closeElements || closeNumbers.length === 0;\n};\n\n/**\n  >>> hasCloseElementsOrEqualsOrEqualsOrEquals([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualsOrEqualsOrEquals([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualsOrEqualsOrEqualsOrEquals = (numbers, threshold) => {\n  let closeElements = false;\n  let closeNumbers = numbers.filter(n => Math.abs(n - threshold) < 1e-10);\n  if (closeNumbers.length > 0) {\n    closeElements = closeNumbers.some(n => Math.abs(n - threshold) < 1e-10);\n  }\n  return closeElements || closeNumbers.length === 0;\n};\n\n/**\n  >>> hasCloseElementsOrEqualsOrEqualsOrEqualsOrEquals([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualsOrEqualsOrEqualsOrEqualsOrEquals([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualsOrEqualsOrEqualsOrEqualsOrEquals = (numbers, threshold) => {\n  let closeElements = false;\n  let closeNumbers = numbers.filter(n => Math.abs(n - threshold) < 1e-10);\n  if (closeNumbers.length > 0) {\n    closeElements = closeNumbers.some(n => Math.abs(n - threshold) < 1e-10);\n  }\n  return closeElements || closeNumbers.length === 0;\n};\n\n/**\n  >>> hasCloseElementsOrEqualsOrEqualsOrEqualsOrEqualsOrEquals([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEquals([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEquals = (numbers, threshold) => {\n  let closeElements = false;\n  let closeNumbers = numbers.filter(n => Math.abs(n - threshold) < 1e-10);\n  if (closeNumbers.length > 0) {\n    closeElements = closeNumbers.some(n => Math.abs(n - threshold) < 1e-10);\n  }\n  return closeElements || closeNumbers.length === 0;\n};\n\n/**\n  >>> hasCloseElementsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEquals([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEquals([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEquals = (numbers, threshold) => {\n  let closeElements = false;\n  let closeNumbers = numbers.filter(n => Math.abs(n - threshold) < 1e-10);\n  if (closeNumbers.length > 0) {\n    closeElements = closeNumbers.some(n => Math.abs(n - threshold) < 1e-10);\n  }\n  return closeElements || closeNumbers.length === 0;\n};\n\n/**\n  >>> hasCloseElementsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEquals([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOrEqualsOr", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG coNTAiNIng mUltIPle grouPs of neSTed Parentheses. yOur goAl is to\n  SeparAte Those grouP inTo seParatE STrings And return THE list oF ThOSE.\n  SEParAtE grOUps Are BALaNced (Each Open BrACe iS pRopeRLy ClosEd) and nOT neSTeD wIthIN EacH OtheR\n  IgnoRe ANy SpaceS in The inPuT STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* inpUt to tHIs fuNctIon IS a stRiNG coNTAiNIng mUltIPle grouPs of neSTed Parentheses. yOur goAl is to\n  SeparAte Those grouP inTo seParatE STrings And return THE list oF ThOSE.\n  SEParAtE grOUps Are BALaNced (Each Open BrACe iS pRopeRLy ClosEd) and nOT neSTeD wIthIN EacH OtheR\n  IgnoRe ANy SpaceS in The inPuT STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/)\n  return paren_groups.map((group) => {\n    const paren_group_name = group[1]\n    const paren_group_paren = group[2]\n    const paren_group_paren_groups = paren_group_paren.match(/\\(([^)]*)\\)/)\n    return paren_group_paren_groups.map((group_paren) => {\n      const paren_group_paren_group_name = group_paren[1]\n      const paren_group_paren_group_paren = group_paren[2]\n      const paren_group_paren_group_paren_groups = paren_group_paren_group_paren.match(/\\(([^)]*)\\)/)\n      return paren_group_paren_group_paren_groups.map((group_paren_group) => {\n        const paren_group_paren_group_paren_group_name = group_paren_group_paren_group[1]\n        const paren_group_paren_group_paren_group_paren = group_paren_group_paren_group_paren[2]\n        const paren_group_paren_group_paren_group_paren_groups = paren_group_paren_group_paren_group_paren.match(/\\(([^)]*)\\)/)\n        return paren_group_paren_group_paren_group_paren_groups.map((group_paren_group_paren_group_paren_group) => {\n          const paren_group_paren_group_paren_group_paren_group_name = group_paren_group_paren_group_paren_group[1]\n          const paren_group_paren_group_paren_group_paren_group_paren = group_paren_group_paren_group_paren_group_paren[2]\n          const paren_group_paren_group_paren_group_paren_group_paren_groups = paren_group_paren_group_paren_group_paren_group_paren.match(/\\(([^)]*)\\)/)\n          return paren_group_paren_group_paren_group_paren_group_paren_groups.map((group_paren_group_paren_group_paren_group_paren_group) => {\n            const paren_group_paren_group_paren_group_paren_group_paren_group_name = group_paren_group_paren_group_paren_group_paren_group[1]\n            const paren_group_paren_group_paren_group_paren_group_paren_group_paren = group_paren_group_paren_group_paren_group_paren_group_paren[2]\n            const paren_group_paren_group_paren_group_paren_group_paren_groups = paren_group_paren_group_paren_group_paren_group_paren_group_paren.match(/\\(([^)]*)\\)/)\n            return paren_group_paren_group_paren_group_paren_group_paren_group_paren_groups.map((group_paren_group_paren_group_paren_group_paren_group_paren_group) => {\n              const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_name = group_paren_group_paren_group_paren_group_paren_group_paren_group[1]\n              const paren_group_paren_group_paren_group_paren_group_paren_group_paren = group_paren_group_paren_group_paren_group_paren_group_paren[2]\n              const paren_group_paren_group_paren_group_paren_group_paren_group_paren_groups = paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren.match(/\\(([^)]*)\\)/)\n              return paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_groups.map((group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group) => {\n                const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_name = group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group[1]\n                const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren = group_paren_group_paren_group_paren_group_paren_group_paren_group_paren[2]\n                const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_groups = paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren.match(/\\(([^)]*)\\)/)\n                return paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_groups.map((group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group) => {\n                  const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_name = group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group[1]\n                  const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren = group_paren_group_paren_group_paren_group_paren_group_paren_group_paren[2]\n                  const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_groups = paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren.match(/\\(([^)]*)\\)/)\n                  return paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_groups.map((group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group) => {\n                    const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_name = group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group[1]\n                    const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren = group_paren_group_paren_group_paren_group_paren_group_paren_group_paren[2]\n                    const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_groups = paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren.match(/\\(([^)]*)\\)/)\n                    return paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_groups.map((group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group) => {\n                      const paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let length = string.length;\n  let start = 0;\n  let end = length;\n  let temp;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const sTones = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 424, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 424, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 424, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 424, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 424, 425, 426, 4", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const numBEr = BigInt(x);\n  const numer = BigInt(y);\n  const reTNumer = numBEr.minus(numer);\n  const reTNumer = reTNumer.toNumber();\n  const reTNumer = reTNumer.toFixed(BigInt(10));\n  return reTNumer;\n};\n\n/*\n  BiggerThan taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  BiggerThan(12, 15) = 14\n  BiggerThan(13, 12) = -1\n  */\nconst BiggerThan = (x, y) => {\n  const numBEr = BigInt(x);\n  const numer = BigInt(y);\n  const reTNumer = numBEr.plus(numer);\n  const reTNumer = reTNumer.toNumber();\n  const reTNumer = reTNumer.toFixed(BigInt(10));\n  return reTNumer;\n};\n\n/*\n  BiggerThan taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  BiggerThan(12, 15) = 14\n  BiggerThan(13, 12) = -1\n  */\nconst BiggerThanOrEqual = (x, y) => {\n  const numBEr = BigInt(x);\n  const numer = BigInt(y);\n  const reTNumer = numBEr.minus(numer);\n  const reTNumer = reTNumer.toNumber();\n  const reTNumer = reTNumer.toFixed(BigInt(10));\n  return reTNumer;\n};\n\n/*\n  BiggerThan taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  BiggerThan(12, 15) = 14\n  BiggerThan(13, 12) = -1\n  */\nconst BiggerThanOrEqualTo = (x, y) => {\n  const numBEr = BigInt(x);\n  const numer = BigInt(y);\n  const reTNumer = numBEr.minus(numer);\n  const reTNumer = reTNumer.toNumber();\n  const reTNumer = reTNumer.toFixed(BigInt(10));\n  return reTNumer;\n};\n\n/*\n  BiggerThan taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  BiggerThan(12, 15) = 14\n  BiggerThan(13, 12) = -1\n  */\nconst BiggerThanOrEqualToOrEqual = (x, y) => {\n  const numBEr = BigInt(x);\n  const numer = BigInt(y);\n  const reTNumer = numBEr.minus(numer);\n  const reTNumer = reTNumer.toNumber();\n  const reTNumer = reTNumer.toFixed(BigInt(10));\n  return reTNumer;\n};\n\n/*\n  BiggerThan taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  BiggerThan(12, 15) = 14\n  BiggerThan(13, 12) = -1\n  */\nconst BiggerThanOrEqualToOrEqualTo = (x, y) => {\n  const numBEr = BigInt(x);\n  const numer = BigInt(y);\n  const reTNumer = numBEr.minus(numer);\n  const reTNumer = reTNumer.toNumber();\n  const reTNumer = reTNumer.toFixed(BigInt(10));\n  return reTNumer;\n};\n\n/*\n  BiggerThan taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  BiggerThan(12, 15) = 14\n  BiggerThan(13, 12) = -1\n  */\nconst BiggerThanOrEqualToOrEqualTo = (x, y) => {\n  const numBEr = BigInt(x);\n  const numer = BigInt(y);\n  const reTNumer = numBEr.minus(numer);\n  const reTNumer = reTNumer.toNumber();\n  const reTNumer = reTNumer.toFixed(BigInt(10));\n  return reTNumer;\n};\n\n/*\n  BiggerThan taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  BiggerThan(12, 15) = 14\n  BiggerThan(13, 12) = -1\n  */\nconst BiggerThanOrEqualToOrEqualTo = (x, y) => {\n  const numBEr = BigInt(x);\n  const numer = BigInt(y);\n  const reTNumer = numBEr.minus(numer);\n  const reTNumer = reTNumer.toNumber();\n  const reTNumer = reTNumer.toFixed(BigInt(10));\n  return reTNumer;\n};\n\n/*\n  BiggerThan taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer ", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*YOu aRe givEN two PosItiVE intEgERs n aND m, AnD Your TasK Is to comPute thE\n  AveRage of the inTEgers From n thRough m (IncLuding n and m). \n  rouNd thE answER To the nEarEST iNTeGER aND coNvErt THat To bINArY.\n  If n iS greAter ThAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN two PosItiVE intEgERs n aND m, AnD Your TasK Is to comPute thE\n  AveRage of the inTEgers From n thRough m (IncLuding n and m). \n  rouNd thE answER To the nEarEST iNTeGER aND coNvErt THat To bINArY.\n  If n iS greAter ThAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let ", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const ret = [];\n  const arr = [...x];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (ret.includes(num)) {\n      continue;\n    }\n    ret.push(num);\n  }\n  return ret;\n};\n\n/*\n  Given a list x. return a SoRTed list OF ElemEntS that hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueElems([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueElems([152, 323, 1422, 10])\n  []\n  */\nconst uniqueElems = (x) => {\n  const ret = [];\n  const arr = [...x];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (ret.includes(num)) {\n      continue;\n    }\n    ret.push(num);\n  }\n  return ret;\n};\n\n/*\n  Given a list x. return a SoRTed list OF ElemEntS that hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueElems([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueElems([152, 323, 1422, 10])\n  []\n  */\nconst uniqueElemElems = (x) => {\n  const ret = [];\n  const arr = [...x];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (ret.includes(num)) {\n      continue;\n    }\n    ret.push(num);\n  }\n  return ret;\n};\n\n/*\n  Given a list x. return a SoRTed list OF ElemEntS that hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueElemElems([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueElemElems([152, 323, 1422, 10])\n  []\n  */\nconst uniqueElemElemElems = (x) => {\n  const ret = [];\n  const arr = [...x];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (ret.includes(num)) {\n      continue;\n    }\n    ret.push(num);\n  }\n  return ret;\n};\n\n/*\n  Given a list x. return a SoRTed list OF ElemEntS that hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueElemElemElems([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueElemElemElems([152, 323, 1422, 10])\n  []\n  */\nconst uniqueElemElemElemElems = (x) => {\n  const ret = [];\n  const arr = [...x];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (ret.includes(num)) {\n      continue;\n    }\n    ret.push(num);\n  }\n  return ret;\n};\n\n/*\n  Given a list x. return a SoRTed list OF ElemEntS that hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueElemElemElemElems([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueElemElemElemElems([152, 323, 1422, 10])\n  []\n  */\nconst uniqueElemElemElemElems = (x) => {\n  const ret = [];\n  const arr = [...x];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (ret.includes(num)) {\n      continue;\n    }\n    ret.push(num);\n  }\n  return ret;\n};\n\n/*\n  Given a list x. return a SoRTed list OF ElemEntS that hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueElemElemElemElems([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueElemElemElemElems([152, 323, 1422, 10])\n  []\n  */\nconst uniqueElemElemElemElems = (x) => {\n  const ret = [];\n  const arr = [...x];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (ret.includes(num)) {\n      continue;\n    }\n    ret.push(num);\n  }\n  return ret;\n};\n\n/*\n  Given a list x. return a SoRTed list OF ElemEntS that hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueElemElemElemElems([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueElemElemElemElems([152, 323, 1422, 10])\n  []\n  */\nconst uniqueElemElemElemElems = (x) => {\n  const ret = [];\n  const arr = [...x];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (ret.includes(num)) {\n      continue;\n    }\n    ret.push(num);\n  }\n  return ret;\n};\n\n/*\n  Given a list x. return a SoRTed list OF ElemEntS that hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueElemElemElemElems([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueElemElemElemElems([152, 323, 1422, 10])\n  []\n  */\nconst uniqueElemElemElemElems = (x) => {\n  const ret = [];\n  const arr = [...x];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (ret.includes(num)) {\n      continue;\n    }\n    ret.push(num);\n  }\n  return ret;\n};\n\n/*\n  Given a list x. return a SoRTed list OF ElemEntS that hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueElemElemElemElems([15, 33, 1422, 1])\n", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  givEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  return [...Array(len).keys()].sort().reverse().map(i => arr[i]);\n};\n\n/*\n  GivEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  return [...Array(len).keys()].sort().reverse().map(i => arr[i]);\n};\n\n/*\n  GivEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverseReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  return [...Array(len).keys()].sort().reverse().map(i => arr[i]);\n};\n\n/*\n  GivEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverseReverseReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  return [...Array(len).keys()].sort().reverse().map(i => arr[i]);\n};\n\n/*\n  GivEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverseReverseReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  return [...Array(len).keys()].sort().reverse().map(i => arr[i]);\n};\n\n/*\n  GivEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fUncTioN = f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f => f ", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const palindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = n; i > 0; i--) {\n    if (n % i === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  palindromes.push(even, odd);\n  return palindromes;\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindrome = (n) => {\n  const palindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = n; i > 0; i--) {\n    if (n % i === 0) {\n      odd++;\n    } else {\n      even++;\n    }\n  }\n  palindromes.push(even, odd);\n  return palindromes;\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddOddPalindrome = (n) => {\n  const palindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = n; i > 0; i--) {\n    if (n % i === 0) {\n      odd++;\n    } else {\n      even++;\n    }\n  }\n  palindromes.push(even, odd);\n  return palindromes;\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst palindrome = (n) => {\n  const palindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = n; i > 0; i--) {\n    if (n % i === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  palindromes.push(even, odd);\n  return palindromes;\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst palindromeEvenOdd = (n) => {\n  const palindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = n; i > 0; i--) {\n    if (n % i === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  palindromes.push(even, odd);\n  return palindromes;\n};\n\n/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst palindromeOddEven = (n) => {\n  const palindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = n; i > 0; i--) {\n    if (n % i === 0) {\n      odd++;\n    } else {\n      even++;\n    }\n  }\n  palindrome", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*WE haVe an aRRay 'arr' oF N iNteGErs arr[1], arr[2], ..., arr[N].The\n  nUmBErs in THE aRRay wIll BE randomLy ordeREd. YOur task is to DEtermIne if\n  iT is poSsiBle to get aN arRay sOrted in NON-decreAsiNG OrDEr BY PeRForMiNg \n  tHE foLloWINg OperAtioN on tHe GIveN aRray:\n      yOu Are aLlowed TO peRFoRm RigHT ShiFT opeRatioN aNY nUmber OF timeS.\n  \n  ONE RighT shifT OPeratIon MeANs SHifTINg All elEMeNtS Of The ARray BY one\n  poSiTION in the rigHT DirECtioN. tHE lASt ElemEnt Of The aRRay WiLl BE moved tO\n  tHe sTArting poSITion in ThE ARray i.e. 0tH Index. \n\n  If It iS possIbLE to ObtAin the sorteD ARraY by PeRfOrmiNg tHe above operATIon\n  TheN return TRuE ElSe return faLSe.\n  if The given arrAY iS empty TheN return truE.\n\n  NoTe: The giVEN list is guaranteED to hAve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WE haVe an aRRay 'arr' oF N iNteGErs arr[1], arr[2],..., arr[N].The\n  nUmBErs in THE aRRay wIll BE randomLy ordeREd. YOur task is to DEtermIne if\n  iT is poSsiBle to get aN arRay sOrted in NON-decreAsiNG OrDEr BY PeRForMiNg \n  tHE foLloWINg OperAtioN on tHe GIveN aRray:\n      yOu Are aLlowed TO peRFoRm RigHT ShiFT opeRatioN aNY nUmber OF timeS.\n  \n  ONE RighT shifT OPeratIon MeANs SHifTINg All elEMeNtS Of The ARray BY one\n  poSiTION in the rigHT DirECtioN. tHE lASt ElemEnt Of The aRRay WiLl BE moved tO\n  tHe sTArting poSITion in ThE ARray i.e. 0tH Index. \n\n  If It iS possIbLE to ObtAin the sorteD ARraY by PeRfOrmiNg tHe above operATIon\n  TheN return TRuE ElSe return faLSe.\n  if The given arrAY iS empty TheN return truE.\n\n  NoTe: The giVEN list is guaranteED to hAve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const arrAY = arr;\n  const arrAYLength = arrAY.length;\n  const arrAYIndexes = arrAY.map((el, i) => i);\n  const arrAYIndexesLength = arrAYIndexes.length;\n  const arrAYIndexesValues = arrAYIndexes.map((el, i) => el);\n  const arrAYIndexesValuesLength = arrAYIndexesValues.length;\n  const arrAYIndexesValuesValues = arrAYIndexesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesLength = arrAYIndexesValuesValues.length;\n  const arrAYIndexesValuesValuesValues = arrAYIndexesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesLength = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.length;\n  const arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValues = arrAYIndexesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.map((el, i) => el);\n  const arrAYIndexesValuesValues", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aInt = parseInt(a, 10);\n  const bInt = parseInt(b, 10);\n  const res = aInt ^ bInt;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a) => {\n  const aInt = parseInt(a, 10);\n  const res = aInt ^ 1;\n  return resToStr(res, 2);\n};\n\n/**\n  >>> stringXor('010', '110", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!= lst2.length) {\n    return \"NO\";\n  }\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let retVal = \"\";\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i]!= lst2[j]) {\n      retVal = \"NO\";\n      break;\n    }\n    i++;\n    j++;\n  }\n  while (i < lst1.length) {\n    retVal = retVal + lst1[i];\n    i++;\n  }\n  while (j < lst2.length) {\n    retVal = retVal + lst2[j];\n    j++;\n  }\n  return retVal;\n};\n\n/*\n  proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!= lst2.length) {\n    return \"NO\";\n  }\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let retVal = \"\";\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i]!= lst2[j]) {\n      retVal = \"NO\";\n      break;\n    }\n    i++;\n    j++;\n  }\n  while (i < lst1.length) {\n    retVal = retVal + lst1[i];\n    i++;\n  }\n  while (j < lst2.length) {\n    retVal = retVal + lst2[j];\n    j++;\n  }\n  return retVal;\n};\n\n/*\n  proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!= lst2.length) {\n    return \"NO\";\n  }\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let retVal = \"\";\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i]!= lst2[j]) {\n      retVal = \"NO\";\n      break;\n    }\n    i++;\n    j++;\n  }\n  while (i < lst1.length) {\n    retVal = retVal + lst1[i];\n    i++;\n  }\n  while (j < lst2.length) {\n    retVal = retVal + lst2[j];\n    j++;\n  }\n  return retVal;\n};\n\n/*\n  proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!= lst2.length) {\n    return \"NO\";\n  }\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let retVal = \"\";\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i]!= lst2[j]) {\n      retVal = \"NO\";\n      break;\n    }\n    i++;\n    j++;\n  }\n  while (i < lst1.length) {\n    retVal = retVal + lst1[i];\n    i++;\n  }\n  while (j < lst2.length) {\n    retVal = retVal + lst2[j];\n    j++;\n  }\n  return retVal;\n};\n\n/*\n  proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perFor", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n  const res = {};\n", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const strIng = s.split('').reverse().join('')\n  const cArr = c.split('')\n  const cArrLen = cArr.length\n  const cArrLen2 = cArrLen - 1\n  let cArrLen3 = cArrLen - 1\n  let cArrLen4 = cArrLen - 1\n  let cArrLen5 = cArrLen - 1\n  let cArrLen6 = cArrLen - 1\n  let cArrLen7 = cArrLen - 1\n  let cArrLen8 = cArrLen - 1\n  let cArrLen9 = cArrLen - 1\n  let cArrLen10 = cArrLen - 1\n  let cArrLen11 = cArrLen - 1\n  let cArrLen12 = cArrLen - 1\n  let cArrLen13 = cArrLen - 1\n  let cArrLen14 = cArrLen - 1\n  let cArrLen15 = cArrLen - 1\n  let cArrLen16 = cArrLen - 1\n  let cArrLen17 = cArrLen - 1\n  let cArrLen18 = cArrLen - 1\n  let cArrLen19 = cArrLen - 1\n  let cArrLen20 = cArrLen - 1\n  let cArrLen21 = cArrLen - 1\n  let cArrLen22 = cArrLen - 1\n  let cArrLen23 = cArrLen - 1\n  let cArrLen24 = cArrLen - 1\n  let cArrLen25 = cArrLen - 1\n  let cArrLen26 = cArrLen - 1\n  let cArrLen27 = cArrLen - 1\n  let cArrLen28 = cArrLen - 1\n  let cArrLen29 = cArrLen - 1\n  let cArrLen30 = cArrLen - 1\n  let cArrLen31 = cArrLen - 1\n  let cArrLen32 = cArrLen - 1\n  let cArrLen33 = cArrLen - 1\n  let cArrLen34 = cArrLen - 1\n  let cArrLen35 = cArrLen - 1\n  let cArrLen36 = cArrLen - 1\n  let cArrLen37 = cArrLen - 1\n  let cArrLen38 = cArrLen - 1\n  let cArrLen39 = cArrLen - 1\n  let cArrLen40 = cArrLen - 1\n  let cArrLen41 = cArrLen - 1\n  let cArrLen42 = cArrLen - 1\n  let cArrLen43 = cArrLen - 1\n  let cArrLen44 = cArrLen - 1\n  let cArrLen45 = cArrLen - 1\n  let cArrLen46 = cArrLen - 1\n  let cArrLen47 = cArrLen - 1\n  let cArrLen48 = cArrLen - 1\n  let cArrLen49 = cArrLen - 1\n  let cArrLen50 = cArrLen - 1\n  let cArrLen51 = cArrLen - 1\n  let cArrLen52 = cArrLen - 1\n  let cArrLen53 = cArrLen - 1\n  let cArrLen54 = cArrLen - 1\n  let cArrLen55 = cArrLen - 1\n  let cArrLen56 = cArrLen - 1\n  let cArrLen57 = cArrLen - 1\n  let cArrLen58 = cArrLen - 1\n  let cArrLen59 = cArrLen - 1\n  let cArrLen60 = cArrLen - 1\n  let cArrLen61 = cArrLen - 1\n  let cArrLen62 = cArrLen - 1\n  let cArrLen63 = cArrLen - 1\n  let cArrLen64 = cArrLen - 1\n  let cArrLen65 = cArrLen - 1\n  let cArrLen66 = cArrLen - 1\n  let cArrLen67 = cArrLen - 1\n  let cArrLen68 = cArrLen - 1\n  let cArrLen69 = cArrLen - 1\n  let cArrLen70 = cArrLen - 1\n  let cArrLen71 = cArrLen - 1\n  let cArrLen72 = cArrLen - 1\n  let cArrLen73 = cArrLen - 1\n  let cArrLen74 = cArrLen - 1\n  let cArrLen75 = cArrLen - 1\n  let cArrLen76 = cArrLen - 1\n  let cArrLen77 = cArrLen - 1\n  let cArrLen78 = cArrLen - 1\n  let cArrLen79 = cArrLen - 1\n  let cArrLen80 = cArrLen - 1\n  let cArrLen81 = cArrLen - 1\n  let cArrLen82 = cArrLen - 1\n  let cArrLen83 = cArrLen - 1\n  let cArrLen84 = cArrLen - 1\n  let cArrLen85 = cArrLen - 1\n  let cArrLen86 = cArrLen - 1\n  let cArrLen87 = cArrLen - 1\n  let cArrLen88 = cArrLen - 1\n  let cArrLen89 = cArrLen - 1\n  let cArrLen90 = cArrLen - 1\n  let cArrLen91 = cArrLen - 1\n  let cArrLen92 = cArrLen - 1\n  let cArrLen93 = cArrLen - 1\n  let cArrLen94 = cArrLen - 1\n  let cArrLen95 = cArrLen - 1\n  let cArrLen96 = cArrLen - 1\n  let cArrLen97 = cArrLen - 1\n  let cArrLen98 = cArrLen - 1\n  let cArrLen99 = cArrLen - 1\n  let cArrLen100 = cArrLen - 1\n  let cArrLen101 = cArrLen - 1\n  let cArrLen102 = cArrLen - 1\n  let cArrLen103 = cArrLen - 1\n  let cArrLen104 = cArrLen - 1\n  let cArrLen105 = cArrLen - 1\n  let cArrLen106 = cArrLen - 1\n  let cArrLen107 = cArrLen - 1\n  let cArrLen108 = cArrLen - 1\n  let cArrLen109 = cArrLen - 1\n  let cArrLen110 = cArrLen - 1\n  let cArrLen111 = cArrLen - 1\n  let cArrLen112 = cArrLen - 1\n  let cArrLen113 = cArrLen - 1\n  let cArrLen114 = cArrLen - 1\n  let cArrLen115 = cArrLen - 1\n  let cArrLen116 = cArrLen - 1\n  let cArrLen117 = cArrLen - 1\n  let cArrLen118 = cArrLen - 1\n  let cArrLen119 = cArrLen - 1\n  let cArrLen120 = cArrLen - 1\n  let cArrLen121 = cArrLen - 1\n  let cArrLen122 = cArrLen - 1\n  let cArrLen123 = cArrLen - 1\n  let cArrLen124 = cArrLen - 1\n  let cArrLen125 = cArrLen - 1\n  let cArrLen12", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let out = []\n  let i = 0\n  let n = lst.length\n  while (i < n) {\n    if (lst[i] % 2 === 0) {\n      out.push(lst[i])\n      i++\n    }\n  }\n  return out\n}\n\n/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let out = []\n  let i = 0\n  let n = lst.length\n  while (i < n) {\n    if (lst[i] % 2!== 0) {\n      out.push(lst[i])\n      i++\n    }\n  }\n  return out\n}\n\n/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements and even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let out = []\n  let i = 0\n  let n = lst.length\n  while (i < n) {\n    if (lst[i] % 2 === 0 && lst[i] % 2!== 0) {\n      out.push(lst[i])\n      i++\n    }\n  }\n  return out\n}\n\n/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements and even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements and even elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let out = []\n  let i = 0\n  let n = lst.length\n  while (i < n) {\n    if (lst[i] % 2 === 0 && lst[i] % 2!== 0) {\n      out.push(lst[i])\n      i++\n    }\n  }\n  return out\n}\n\n/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements and even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements and even elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let out = []\n  let i = 0\n  let n = lst.length\n  while (i < n) {\n    if (lst[i] % 2 === 0 && lst[i] % 2!== 0) {\n      out.push(lst[i])\n      i++\n    }\n  }\n  return out\n}\n\n/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements and even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEven", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Infinity;\n  let minSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > minSum) {\n      minSum = nums[i];\n      minSubArray = nums.slice(0, i);\n    }\n  }\n  return minSubArray.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  let maxSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n      maxSubArray = nums.slice(0, i);\n    }\n  }\n  return maxSubArray.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst sumOfSubArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArray([2, 3, 4, 1, 2, 4]) == 4\n  sumOfSubArray([-1, -2, -3]) == -3\n  */\nconst sumOfSubArrayOfNums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrayOfNums([2, 3, 4, 1, 2, 4]) == 4\n  sumOfSubArrayOfNums([-1, -2, -3]) == -3\n  */\nconst sumOfSubArrayOfNumsOfNums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrayOfNumsOfNums([2, 3, 4, 1, 2, 4]) == 4\n  sumOfSubArrayOfNumsOfNums([-1, -2, -3]) == -3\n  */\nconst sumOfSubArrayOfNumsOfNumsOfNums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrayOfNumsOfNumsOfNumsOfNums([2, 3, 4, 1, 2, 4]) == 4\n  sumOfSubArrayOfNumsOfNumsOfNumsOfNumsOfNums([-1, -2, -3]) == -3\n  */\nconst sumOfSubArrayOfNumsOfNumsOfNumsOfNums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrayOfNumsOfNumsOfNumsOfNumsOfNumsOfNums([2, 3, 4, 1, 2, 4]) == 4\n  sumOfSubArrayOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNums([-1, -2, -3]) == -3\n  */\nconst sumOfSubArrayOfNumsOfNumsOfNumsOfNumsOfNumsOfNums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrayOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNums([2, 3, 4, 1, 2, 4]) == 4\n  sumOfSubArrayOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNums([-1, -2, -3]) == -3\n  */\nconst sumOfSubArrayOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  sumOfSubArrayOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNumsOfNum", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let result = 0;\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 1) {\n        result += Math.pow(rowIndex, 2) * Math.pow(capacity, 2) * Math.pow(colIndex, 2);\n      }\n    });\n  });\n  \n  return result;\n};\n\n/**\n * Given a grid of size n x m, find the maximum filling capacity of m grids.\n * \n * Time complexity: O(n^2)\n * Space complexity: O(n)\n * \n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nconst maxFillCapacity = (grid, capacity) => {\n  const result = 0;\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 1) {\n        result += Math.pow(rowIndex, 2) * Math.pow(capacity, 2) * Math.pow(colIndex, 2);\n      }\n    });\n  });\n  \n  return result;\n};\n\n/**\n * Given a grid of size n x m, find the minimum filling capacity of m grids.\n * \n * Time complexity: O(n^2)\n * Space complexity: O(n)\n * \n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nconst minFillCapacity = (grid, capacity) => {\n  let result = 0;\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 1) {\n        result += Math.pow(rowIndex, 2) * Math.pow(capacity, 2) * Math.pow(colIndex, 2);\n      }\n    });\n  });\n  \n  return result;\n};\n\n/**\n * Given a grid of size n x m, find the maximum filling capacity of m grids.\n * \n * Time complexity: O(n^2)\n * Space complexity: O(n)\n * \n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nconst maxFillCapacityWithWeight = (grid, capacity) => {\n  let result = 0;\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 1) {\n        result += Math.pow(rowIndex, 2) * Math.pow(capacity, 2) * Math.pow(colIndex, 2) * value;\n      }\n    });\n  });\n  \n  return result;\n};\n\n/**\n * Given a grid of size n x m, find the minimum filling capacity of m grids.\n * \n * Time complexity: O(n^2)\n * Space complexity: O(n)\n * \n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nconst minFillCapacityWithWeight = (grid, capacity) => {\n  let result = 0;\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 1) {\n        result += Math.pow(rowIndex, 2) * Math.pow(capacity, 2) * Math.pow(colIndex, 2) * value;\n      }\n    });\n  });\n  \n  return result;\n};\n\n/**\n * Given a grid of size n x m, find the maximum filling capacity of m grids.\n * \n * Time complexity: O(n^2)\n * Space complexity: O(n)\n * \n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nconst maxFillCapacityWithWeightAndWeight = (grid, capacity) => {\n  let result = 0;\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 1) {\n        result += Math.pow(rowIndex, 2) * Math.pow(capacity, 2) * Math.pow(colIndex, 2) * value * value;\n      }\n    });\n  });\n  \n  return result;\n};\n\n/**\n * Given a grid of size n x m, find the minimum filling capacity of m grids.\n * \n * Time complexity: O(n^2)\n * Space complexity: O(n)\n * \n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nconst minFillCapacityWithWeightAndWeight = (grid, capacity) => {\n  let result = 0;\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 1) {\n        result += Math.pow(rowIndex, 2) * Math.pow(capacity, 2) * Math.pow(colIndex, 2) * value * value;\n      }\n    });\n  });\n  \n  return result;\n};\n\n/**\n * Given a grid of size n x m, find the maximum filling capacity of m grids.\n * \n * Time complexity: O(n^2)\n * Space complexity: O(n)\n * \n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nconst maxFillCapacityWithWeightAndWeightAndWeight = (grid, capacity) => {\n  let result = 0;\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 1) {\n        result += Math.pow(rowIndex, 2) * Math.pow(capacity, 2) * Math.pow(colIndex, 2) * value * value * value;\n      }\n    });\n  });\n  \n  return result;\n};\n\n/**\n * Given a grid of size n x m, find the minimum filling capacity of m grids.\n * \n * Time complexity: O(n^2)\n * Space complexity: O(n)\n * \n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nconst minFillCapacityWithWeightAndWeightAndWeight = (grid, capacity) => {\n  let result = 0;\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 1) {\n        result += Math.pow(rowIndex, 2) * Math.pow(capacity, 2) * Math.pow(colIndex, 2) * value * value * value * value;\n      }\n    });\n  });\n  \n  return result;\n};\n\n/**\n * Given a grid of size n x m, find the maximum filling capacity of m grids.\n * \n * Time complexity: O(n^2)\n * Space complexity: O(n)\n * \n * @param {number[][]} grid\n * @param {number} capacity\n * @return {number}\n */\nconst maxFillCapacityWithWeightAndWeightAndWeight", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let a = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*YOu aRe givEN a word. YoUr tAsk IS to fInD The CLOsESt voWel THat stanDs betwEEn \n  tWo consonantS From tHe righT side Of tHe word (case senSitIve).\n  \n  VOwels in THE beginNinG ANd ENdING dOEsn'T cOunT. retUrn EMPtY strIng iF you DiDN't\n  fInD any VOwEl meT the abOVe cONdItIon. \n\n  yOU maY AssuMe thaT tHE gIven sTRing cOnTAIns ENglisH LEtter OnlY.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN a word. YoUr tAsk IS to fInD The CLOsESt voWel THat stanDs betwEEn \n  tWo consonantS From tHe righT side Of tHe word (case senSitIve).\n  \n  VOwels in THE beginNinG ANd ENdING dOEsn'T cOunT. retUrn EMPtY strIng iF you DiDN't\n  fInD any VOwEl meT the abOVe cONdItIon. \n\n  yOU maY AssuMe thaT tHE gIven sTRing cOnTAIns ENglisH LEtter OnlY.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = \"aeiouAEIOU\"\n  const vowelsLength = vowels.length\n  const vowelsArray = Array.from(vowels)\n  const vowelsArrayLength = vowelsArray.length\n  const vowelsArrayIndex = 0\n  const vowelsArrayLength = vowelsArray.length\n  const vowelsArrayIndexLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength = 0\n  const vowelsArrayIndexLengthLength", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* you Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* you Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens)\n}\n\n/* matchParens2 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens2(['(', ')']) == 'Yes'\n  matchParens2([')', ')']) == 'No'\n  */\nconst matchParens2 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens2)\n}\n\n/* matchParens3 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens3(['(', ')']) == 'Yes'\n  matchParens3([')', ')']) == 'No'\n  */\nconst matchParens3 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens3)\n}\n\n/* matchParens4 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens4(['(', ')']) == 'Yes'\n  matchParens4([')', ')']) == 'No'\n  */\nconst matchParens4 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens4)\n}\n\n/* matchParens5 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens5(['(', ')']) == 'Yes'\n  matchParens5([')', ')']) == 'No'\n  */\nconst matchParens5 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens5)\n}\n\n/* matchParens6 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens6(['(', ')']) == 'Yes'\n  matchParens6([')', ')']) == 'No'\n  */\nconst matchParens6 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens6)\n}\n\n/* matchParens7 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens7(['(', ')']) == 'Yes'\n  matchParens7([')', ')']) == 'No'\n  */\nconst matchParens7 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens7)\n}\n\n/* matchParens8 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens8(['(', ')']) == 'Yes'\n  matchParens8([')', ')']) == 'No'\n  */\nconst matchParens8 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens8)\n}\n\n/* matchParens9 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens9(['(', ')']) == 'Yes'\n  matchParens9([')', ')']) == 'No'\n  */\nconst matchParens9 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens9)\n}\n\n/* matchParens10 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens10(['(', ')']) == 'Yes'\n  matchParens10([')', ')']) == 'No'\n  */\nconst matchParens10 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens10)\n}\n\n/* matchParens11 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens11(['(', ')']) == 'Yes'\n  matchParens11([')', ')']) == 'No'\n  */\nconst matchParens11 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens11)\n}\n\n/* matchParens12 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens12(['(', ')']) == 'Yes'\n  matchParens12([')', ')']) == 'No'\n  */\nconst matchParens12 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens12)\n}\n\n/* matchParens13 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens13(['(', ')']) == 'Yes'\n  matchParens13([')', ')']) == 'No'\n  */\nconst matchParens13 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens13)\n}\n\n/* matchParens14 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens14(['(', ')']) == 'Yes'\n  matchParens14([')', ')']) == 'No'\n  */\nconst matchParens14 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens14)\n}\n\n/* matchParens15 returns 'Yes' if there's a way to make a good string, and 'No'\n  otherwise.\n  Examples:\n  matchParens15(['(', ')']) == 'Yes'\n  matchParens15([')', ')']) == 'No'\n  */\nconst matchParens15 = (lst) => {\n  let re = new RegExp(`(${lst.join('|')})`, 'g')\n  return re.test(strParens15)\n}\n\n/* matchParens16 returns 'Yes' if there's a way to make a good ", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* out Of list of strings, return tHE longest one. retUrn THe fiRsT One in CASe OF mulTipLE\n  strings of the sAme lenGTh. REturn null in caSE the iNput list is Empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* out Of list of strings, return tHE longest one. retUrn THe fiRsT One in CASe OF mulTipLE\n  strings of the sAme lenGTh. REturn null in caSE the iNput list is Empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let maxLength = 0;\n  let maxLengthOfLongestString = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLengthOfLongestString) {\n      maxLengthOfLongestString = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  */\nconst longestWithRepeat = (strings) => {\n  let maxLength = 0;\n  let maxLengthOfLongestString = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLengthOfLongestString) {\n      maxLengthOfLongestString = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n  >>> longestWithRepeat(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longestWithRepeat(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  */\nconst longestWithRepeatWithRepeat = (strings) => {\n  let maxLength = 0;\n  let maxLengthOfLongestString = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLengthOfLongestString) {\n      maxLengthOfLongestString = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n  >>> longestWithRepeatWithRepeat(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longestWithRepeatWithRepeat(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  */\nconst longestWithRepeatWithRepeatWithRepeat = (strings) => {\n  let maxLength = 0;\n  let maxLengthOfLongestString = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLengthOfLongestString) {\n      maxLengthOfLongestString = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n  >>> longestWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longestWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  */\nconst longestWithRepeatWithRepeatWithRepeatWithRepeat = (strings) => {\n  let maxLength = 0;\n  let maxLengthOfLongestString = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLengthOfLongestString) {\n      maxLengthOfLongestString = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  */\nconst longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat = (strings) => {\n  let maxLength = 0;\n  let maxLengthOfLongestString = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLengthOfLongestString) {\n      maxLengthOfLongestString = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  */\nconst longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat = (strings) => {\n  let maxLength = 0;\n  let maxLengthOfLongestString = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLengthOfLongestString) {\n      maxLengthOfLongestString = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  */\nconst longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat = (strings) => {\n  let maxLength = 0;\n  let maxLengthOfLongestString = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLengthOfLongestString) {\n      maxLengthOfLongestString = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  */\nconst longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat = (strings) => {\n  let maxLength = 0;\n  let maxLengthOfLongestString = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLengthOfLongestString) {\n      maxLengthOfLongestString = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  */\nconst longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeat = (strings) => {\n  let maxLength = 0;\n  let maxLengthOfLongestString = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLengthOfLongestString) {\n      maxLengthOfLongestString = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n  >>> longestWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWithRepeatWith", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  let max = 0;\n  let i = 1;\n  while (i <= len) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    i++;\n  }\n  return arr.slice(0, k).sort((a, b) => b - a);\n};\n\n// https://leetcode.com/problems/maximum-subarray-sum-ii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} target\n * @return {number}\n */\nvar maxSubArraySum = function(head, target) {\n  const stack = [];\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    stack.push(curr);\n    curr = curr.next;\n  }\n  while (stack.length) {\n    const curr = stack.pop();\n    sum += curr.val;\n    if (target - sum >= 0) {\n      return sum;\n    }\n    sum += curr.val;\n    stack.push(curr);\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/maximum-subarray-sum-iii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} target\n * @return {number}\n */\nvar maxSubArraySumIII = function(head, target) {\n  const stack = [];\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    stack.push(curr);\n    curr = curr.next;\n  }\n  while (stack.length) {\n    const curr = stack.pop();\n    sum += curr.val;\n    if (target - sum >= 0) {\n      return sum;\n    }\n    stack.push(curr);\n    curr = curr.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/maximum-subarray-sum-iiii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} target\n * @return {number}\n */\nvar maxSubArraySumIIII = function(head, target) {\n  const stack = [];\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    stack.push(curr);\n    curr = curr.next;\n  }\n  while (stack.length) {\n    const curr = stack.pop();\n    sum += curr.val;\n    if (target - sum >= 0) {\n      return sum;\n    }\n    stack.push(curr);\n    curr = curr.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/maximum-subarray-sum-iv/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} target\n * @return {number}\n */\nvar maxSubArraySumIV = function(head, target) {\n  const stack = [];\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    stack.push(curr);\n    curr = curr.next;\n  }\n  while (stack.length) {\n    const curr = stack.pop();\n    sum += curr.val;\n    if (target - sum >= 0) {\n      return sum;\n    }\n    stack.push(curr);\n    curr = curr.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/maximum-subarray-sum-iii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} target\n * @return {number}\n */\nvar maxSubArraySumIII = function(head, target) {\n  const stack = [];\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    stack.push(curr);\n    curr = curr.next;\n  }\n  while (stack.length) {\n    const curr = stack.pop();\n    sum += curr.val;\n    if (target - sum >= 0) {\n      return sum;\n    }\n    stack.push(curr);\n    curr = curr.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/maximum-subarray-sum-iv/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} target\n * @return {number}\n */\nvar maxSubArraySumIV = function(head, target) {\n  const stack = [];\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    stack.push(curr);\n    curr = curr.next;\n  }\n  while (stack.length) {\n    const curr = stack.pop();\n    sum += curr.val;\n    if (target - sum >= 0) {\n      return sum;\n    }\n    stack.push(curr);\n    curr = curr.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/maximum-subarray-sum-iiii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} target\n * @return {number}\n */\nvar maxSubArraySumIIII = function(head, target) {\n  const stack = [];\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    stack.push(curr);\n    curr = curr.next;\n  }\n  while (stack.length) {\n    const curr = stack.pop();\n    sum += curr.val;\n    if (target - sum >= 0) {\n      return sum;\n    }\n    stack.push(curr);\n    curr = curr.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/maximum-subarray-sum-iiiii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} target\n * @return {number}\n */\nvar maxSubArraySumIIIII = function(head, target) {\n  const stack = [];\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    stack.push(curr);\n    curr = curr.next;\n  }\n  while (stack.length) {\n    const curr = stack.pop();\n    sum += curr.val;\n    if (target - sum >= 0) {\n      return sum;\n    }\n    stack.push(curr);\n    curr = curr.next;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/maximum-subarray-sum-iv/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = 0;\n  let odd = 0;\n  let evenArr = [];\n  let oddArr = [];\n  \n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      evenArr[even] = el;\n      even++;\n    } else {\n      oddArr[odd] = el;\n      odd++;\n    }\n  });\n  \n  evenArr.forEach((el) => {\n    if (el % 2 === 0) {\n      sum += el;\n    } else {\n      odd += el;\n    }\n  });\n  \n  console.log(sum);\n  console.log(odd);\n  console.log(even);\n};\n\n/*\n  Given a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = 0;\n  let odd = 0;\n  let evenArr = [];\n  let oddArr = [];\n  \n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      evenArr[even] = el;\n      even++;\n    } else {\n      oddArr[odd] = el;\n      odd++;\n    }\n  });\n  \n  evenArr.forEach((el) => {\n    if (el % 2 === 0) {\n      sum += el;\n    } else {\n      odd += el;\n    }\n  });\n  \n  console.log(sum);\n  console.log(odd);\n  console.log(even);\n};\n\n/*\n  Given a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = 0;\n  let odd = 0;\n  let evenArr = [];\n  let oddArr = [];\n  \n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      evenArr[even] = el;\n      even++;\n    } else {\n      oddArr[odd] = el;\n      odd++;\n    }\n  });\n  \n  evenArr.forEach((el) => {\n    if (el % 2 === 0) {\n      sum += el;\n    } else {\n      odd += el;\n    }\n  });\n  \n  console.log(sum);\n  console.log(odd);\n  console.log(even);\n};\n\n/*\n  Given a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = 0;\n  let odd = 0;\n  let evenArr = [];\n  let oddArr = [];\n  \n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      evenArr[even] = el;\n      even++;\n    } else {\n      oddArr[odd] = el;\n      odd++;\n    }\n  });\n  \n  evenArr.forEach((el) => {\n    if (el % 2 === 0) {\n      sum += el;\n    } else {\n      odd += el;\n    }\n  });\n  \n  console.log(sum);\n  console.log(odd);\n  console.log(even);\n};\n\n/*\n  Given a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = 0;\n  let odd = 0;\n  let evenArr = [];\n  let oddArr = [];\n  \n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      evenArr[even] = el;\n      even++;\n    } else {\n      oddArr[odd] = el;\n      odd++;\n    }\n  });\n  \n  evenArr.forEach((el) => {\n    if (el % 2 === 0) {\n      sum += el;\n    } else {\n      odd += el;\n    }\n  });\n  \n  console.log(sum);\n  console.log(odd);\n  console.log(even);\n};\n\n/*\n  Given a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = 0;\n  let odd = 0;\n  let evenArr = [];\n  let oddArr = [];\n  \n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      evenArr[even] = el;\n      even++;\n    } else {\n      oddArr[odd] = el;\n      odd++;\n    }\n  });\n  \n  evenArr.forEach((el) => {\n    if (el % 2 === 0) {\n      sum += el;\n    } else {\n      odd += el;\n    }\n  });\n  \n  console.log(sum);\n  console.log(odd);\n  console.log(even);\n};\n\n/*\n  Given a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = 0;\n  let odd = 0;\n  let evenArr = [];\n  let oddArr = [];\n  \n  lst.forEach((el) => {\n    if (el % 2 === 0) {\n      evenArr[even] = el;\n      even++;\n    } else {\n      oddArr[odd] = el;\n      odd++;\n    }\n  });\n  \n  evenArr.forEach((el) => {\n    if (el % 2 === 0) {\n      sum += el;\n    } else {\n      odd += el;\n    }\n  });\n  \n  console.log(sum);\n  console.log(odd);\n  console.log(even);\n};\n\n/*\n  Given a non-EMpty list Of iNteGEr", "passed": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const arrLen = arr.length;\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  const arrSumOfElems = arrSum / arrLen;\n  const arrSumOfElemOfK = arrSumOfElems / k;\n  return arrSumOfElemOfK;\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsK = (arr, k) => {\n  const arrLen = arr.length;\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  const arrSumOfElems = arrSum / arrLen;\n  const arrSumOfElemOfK = arrSumOfElems / k;\n  return arrSumOfElemOfK;\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsK2 = (arr, k) => {\n  const arrLen = arr.length;\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  const arrSumOfElems = arrSum / arrLen;\n  const arrSumOfElemOfK = arrSumOfElems / k;\n  return arrSumOfElemOfK;\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsK3 = (arr, k) => {\n  const arrLen = arr.length;\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  const arrSumOfElems = arrSum / arrLen;\n  const arrSumOfElemOfK = arrSumOfElems / k;\n  return arrSumOfElemOfK;\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsK4 = (arr, k) => {\n  const arrLen = arr.length;\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  const arrSumOfElems = arrSum / arrLen;\n  const arrSumOfElemOfK = arrSumOfElems / k;\n  return arrSumOfElemOfK;\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsK5 = (arr, k) => {\n  const arrLen = arr.length;\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  const arrSumOfElems = arrSum / arrLen;\n  const arrSumOfElemOfK = arrSumOfElems / k;\n  return arrSumOfElemOfK;\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsK6 = (arr, k) => {\n  const arrLen = arr.length;\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  const arrSumOfElems = arrSum / arrLen;\n  const arrSumOfElemOfK = arrSumOfElems / k;\n  return arrSumOfElemOfK;\n};\n\n/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsK7 = (arr, k) => {\n  const arrLen = arr.length;\n  const arrSum = arr.reduce((acc, val) => acc + val, 0);\n  const arrSumOfElems = arrSum / arrLen;\n  const arrSumOfElemOfK = arrSumOfElems / k;\n  return arrSumOfElemOfK;\n};\n\n/*\n  givEn a noN-EmptY ", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is [1].\n      2. returNED list soRteD in iNcReasIng Order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is [1].\n      2. returNED list soRteD in iNcReasIng Order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = []\n  let returNED = []\n  let i = 1\n  while (i <= n) {\n    collatz.push(i)\n    i++\n  }\n  collatz.sort((a, b) => a - b)\n  collatz.forEach((n) => {\n    if (n % 2 === 0) {\n      returNED.push(n)\n    }\n  })\n  return returNED\n}\n\n/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is [1].\n      2. returNED list soRteD in iNcReasIng Order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = []\n  let returNED = []\n  let i = 1\n  while (i <= n) {\n    collatz.push(i)\n    i++\n  }\n  collatz.sort((a, b) => a - b)\n  collatz.forEach((n) => {\n    if (n % 2!== 0) {\n      returNED.push(n)\n    }\n  })\n  return returNED\n}\n\n/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is [1].\n      2. returNED list soRteD in iNcReasIng Order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddEvenCollatz = (n) => {\n  let collatz = []\n  let returNED = []\n  let i = 1\n  while (i <= n) {\n    collatz.push(i)\n    i++\n  }\n  collatz.sort((a, b) => a - b)\n  collatz.forEach((n) => {\n    if (n % 2 === 0 && n % 2!== 0) {\n      returNED.push(n)\n    }\n  })\n  return returNED\n}\n\n/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is ", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*YOu hAve to WRite A fuNctIOn whIcH ValIDAtES a giVen date STring anD\n  returNS trUe if the date is vaLId othErwise False.\n  the date Is valid if All Of thE follOWIng rulEs aRE SaTIsFIEd:\n  1. tHe date sTrIng IS noT emPTY.\n  2. THe nuMber Of daYs IS noT lEss tHAn 1 Or hiGher thAN 31 daYS fOr MonTHS 1,3,5,7,8,10,12. AnD The nUmber Of DAyS is noT Less tHaN 1 OR higHer thAN 30 Days fOr mOnTHs 4,6,9,11. aNd, tHE NuMber oF DaYs IS nOt lESs thAN 1 or higHeR THAn 29 for thE MOntH 2.\n  3. the mONTHs SHoUld nOt bE lEss tHAn 1 oR hIgHEr than 12.\n  4. THe date ShoULd be in the fORMat: mM-dD-YYyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu hAve to WRite A fuNctIOn whIcH ValIDAtES a giVen date STring anD\n  returNS trUe if the date is vaLId othErwise False.\n  the date Is valid if All Of thE follOWIng rulEs aRE SaTIsFIEd:\n  1. tHe date sTrIng IS noT emPTY.\n  2. THe nuMber Of daYs IS noT lEss tHAn 1 Or hiGher thAN 31 daYS fOr MonTHS 1,3,5,7,8,10,12. AnD The nUmber Of DAyS is noT Less tHaN 1 OR higHer thAN 30 Days fOr mOnTHs 4,6,9,11. aNd, tHE NuMber oF DaYs IS nOt lESs thAN 1 or higHeR THAn 29 for thE MOntH 2.\n  3. the mONTHs SHoUld nOt bE lEss tHAn 1 oR hIgHEr than 12.\n  4. THe date ShoULd be in the fORMat: mM-dD-YYyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateString = date.toString();\n  const dateArray = dateString.split('-');\n  const dateYear = dateArray[0];\n  const dateMonth = dateArray[1];\n  const dateDay = dateArray[2];\n  const dateYearString = dateYear.toString();\n  const dateMonthString = dateMonth.toString();\n  const dateDayString = dateDay.toString();\n  const dateYearArray = dateYearString.split('-');\n  const dateMonthArray = dateMonthString.split('-');\n  const dateDayArray = dateDayString.split('-');\n  const dateYearString = dateYearArray[0];\n  const dateMonthString = dateMonthArray[0];\n  const dateDayString = dateDayArray[0];\n  const dateYearArray = dateYearArray[1];\n  const dateMonthArray = dateMonthArray[1];\n  const dateDayArray = dateDayArray[1];\n  const dateYear = dateYearArray[0];\n  const dateMonth = dateMonthArray[0];\n  const dateDay = dateDayArray[0];\n  const dateArray = dateYearArray.toString().split('-');\n  const dateArray2 = dateMonthArray.toString().split('-');\n  const dateArray3 = dateDayArray.toString().split('-');\n  const dateArray4 = dateYearArray.toString().split('-');\n  const dateArray5 = dateMonthArray.toString().split('-');\n  const dateArray6 = dateDayArray.toString().split('-');\n  const dateArray7 = dateYearArray.toString().split('-');\n  const dateArray8 = dateMonthArray.toString().split('-');\n  const dateArray9 = dateDayArray.toString().split('-');\n  const dateArray10 = dateYearArray.toString().split('-');\n  const dateArray11 = dateMonthArray.toString().split('-');\n  const dateArray12 = dateDayArray.toString().split('-');\n  const dateArray13 = dateYearArray.toString().split('-');\n  const dateArray14 = dateMonthArray.toString().split('-');\n  const dateArray15 = dateDayArray.toString().split('-');\n  const dateArray16 = dateYearArray.toString().split('-');\n  const dateArray17 = dateMonthArray.toString().split('-');\n  const dateArray18 = dateDayArray.toString().split('-');\n  const dateArray19 = dateYearArray.toString().split('-');\n  const dateArray20 = dateMonthArray.toString().split('-');\n  const dateArray21 = dateDayArray.toString().split('-');\n  const dateArray22 = dateYearArray.toString().split('-');\n  const dateArray23 = dateMonthArray.toString().split('-');\n  const dateArray24 = dateDayArray.toString().split('-');\n  const dateArray25 = dateYearArray.toString().split('-');\n  const dateArray26 = dateMonthArray.toString().split('-');\n  const dateArray27 = dateDayArray.toString().split('-');\n  const dateArray28 = dateYearArray.toString().split('-');\n  const dateArray29 = dateMonthArray.toString().split('-');\n  const dateArray30 = dateDayArray.toString().split('-');\n  const dateArray31 = dateYearArray.toString().split('-');\n  const dateArray32 = dateMonthArray.toString().split('-');\n  const dateArray33 = dateDayArray.toString().split('-');\n  const dateArray34 = dateYearArray.toString().split('-');\n  const dateArray35 = dateMonthArray.toString().split('-');\n  const dateArray36 = dateDayArray.toString().split('-');\n  const dateArray37 = dateYearArray.toString().split('-');\n  const dateArray38 = dateMonthArray.toString().split('-');\n  const dateArray39 = dateDayArray.toString().split('-');\n  const dateArray40 = dateYearArray.toString().split('-');\n  const dateArray41 = dateMonthArray.toString().split('-');\n  const dateArray42 = dateDayArray.toString().split('-');\n  const dateArray43 = dateYearArray.toString().split('-');\n  const dateArray44 = dateMonthArray.toString().split('-');\n  const dateArray45 = dateDayArray.toString().split('-');\n  const dateArray46 = dateYearArray.toString().split('-');\n  const dateArray47 = dateMonthArray.toString().split('-');\n  const dateArray48 = dateDayArray.toString().split('-');\n  const dateArray49 = dateYearArray.toString().split('-');\n  const dateArray50 = dateMonthArray.toString().split('-');\n  const dateArray51 = dateDayArray.toString().split('-');\n  const dateArray52 = dateYearArray.toString().split('-');\n  const dateArray53 = dateMonthArray.toString().split('-');\n  const dateArray54 = dateDayArray.toString().split('-');\n  const dateArray55 = dateYearArray.toString().split('-');\n  const dateArray56 = dateMonthArray.toString().split('-');\n  const dateArray57 = dateDayArray.toString().split('-');\n  const dateArray58 = dateYearArray.toString().split('-');\n  const dateArray59 = dateMonthArray.toString().split('-');\n  const dateArray60 = dateDayArray.toString().split('-');\n  const dateArray61 = dateYearArray.toString().split('-');\n  const dateArray62 = dateMonthArray.toString().split('-');\n  const dateArray63 = dateDayArray.toString().split('-');\n  const dateArray64 = dateYearArray.toString().split('-');\n  const dateArray65 = dateMonthArray.toString().split('-');\n  const dateArray66 = dateDayArray.toString().split('-');\n  const dateArray67 = dateYearArray.toString().split('-');\n  const dateArray68 = dateMonthArray.toString().split('-');\n  const dateArray69 = dateDayArray.toString().split('-');\n  const dateArray70 = dateYearArray.toString().split('-');\n  const dateArray71 = dateMonthArray.toString().split('-');\n  const dateArray72 = dateDayArray.toString", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* givEn a stRIng oF woRds, return A list Of woRdS SplIT On WHiteSpaCE, if no whItespaCEs eXists in the texT You\n  shOuld spLit on ComMas ',' if no coMmaS exiSts yoU SHould return tHe nUMBeR Of LOWeR-CasE lEttERs wIth ODD oRder in The\n  aLphaBeT, Ord('A') = 0, oRd('b') = 1, ... oRD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn a stRIng oF woRds, return A list Of woRdS SplIT On WHiteSpaCE, if no whItespaCEs eXists in the texT You\n  shOuld spLit on ComMas ',' if no coMmaS exiSts yoU SHould return tHe nUMBeR Of LOWeR-CasE lEttERs wIth ODD oRder in The\n  aLphaBeT, Ord('A') = 0, oRd('b') = 1,... oRD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = []\n  let word = ''\n  let words = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []\n  let word = ''\n  let words = []", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const asCEnding = asCEnding(lst)\n  const oRder = oRder(lst)\n  const oF = oF(lst)\n  const oNLY = oNLY(lst)\n  const oNTEGERs = oNTEGERs(lst)\n  const NUMbers = NUMbers(lst)\n  const negActive = negActive(lst)\n  const asCEndingSorted = asCEndingSorted(lst)\n  const oRderSorted = oRderSorted(lst)\n  const oFSorted = oFSorted(lst)\n  const oNLYSorted = oNLYSorted(lst)\n  const oNTEGERsSorted = oNTEGERsSorted(lst)\n  const NUMbersSorted = NUMbersSorted(lst)\n  const negActiveSorted = negActiveSorted(lst)\n  const asCEndingSortedSorted = asCEndingSortedSorted(lst)\n  const oRderSortedSorted = oRderSortedSorted(lst)\n  const oFSortedSorted = oFSortedSorted(lst)\n  const oNLYSortedSorted = oNLYSortedSorted(lst)\n  const oNTEGERsSortedSorted = oNTEGERsSortedSorted(lst)\n  const NUMbersSortedSorted = NUMbersSortedSorted(lst)\n  const negActiveSortedSorted = negActiveSortedSorted(lst)\n  const asCEndingSortedSortedSorted = asCEndingSortedSortedSorted(lst)\n  const oRderSortedSortedSorted = oRderSortedSortedSorted(lst)\n  const oFSortedSortedSorted = oFSortedSortedSorted(lst)\n  const oNLYSortedSortedSorted = oNLYSortedSortedSorted(lst)\n  const oNTEGERsSortedSortedSorted = oNTEGERsSortedSortedSorted(lst)\n  const NUMbersSortedSortedSorted = NUMbersSortedSortedSorted(lst)\n  const negActiveSortedSortedSorted = negActiveSortedSortedSorted(lst)\n  const asCEndingSortedSortedSorted = asCEndingSortedSortedSorted(lst)\n  const oRderSortedSortedSortedSorted = oRderSortedSortedSortedSorted(lst)\n  const oFSortedSortedSortedSorted = oFSortedSortedSortedSorted(lst)\n  const oNLYSortedSortedSortedSorted = oNLYSortedSortedSortedSorted(lst)\n  const oNTEGERsSortedSortedSortedSorted = oNTEGERsSortedSortedSortedSorted(lst)\n  const NUMbersSortedSortedSortedSorted = NUMbersSortedSortedSortedSorted(lst)\n  const negActiveSortedSortedSortedSorted = negActiveSortedSortedSortedSorted(lst)\n  const asCEndingSortedSortedSortedSorted = asCEndingSortedSortedSortedSorted(lst)\n  const oRderSortedSortedSortedSortedSorted = oRderSortedSortedSortedSortedSorted(lst)\n  const oFSortedSortedSortedSortedSorted = oFSortedSortedSortedSortedSorted(lst)\n  const oNLYSortedSortedSortedSorted = oNLYSortedSortedSortedSorted(lst)\n  const oNTEGERsSortedSortedSortedSorted = oNTEGERsSortedSortedSortedSorted(lst)\n  const NUMbersSortedSortedSortedSorted = NUMbersSortedSortedSortedSorted(lst)\n  const negActiveSortedSortedSortedSorted = negActiveSortedSortedSortedSorted(lst)\n  const asCEndingSortedSortedSortedSortedSorted = asCEndingSortedSortedSortedSortedSorted(lst)\n  const oRderSortedSortedSortedSortedSorted = oRderSortedSortedSortedSortedSorted(lst)\n  const oFSortedSortedSortedSortedSorted = oFSortedSortedSortedSortedSorted(lst)\n  const oNLYSortedSortedSortedSortedSorted = oNLYSortedSortedSortedSortedSorted(lst)\n  const oNTEGERsSortedSortedSortedSortedSorted = oNTEGERsSortedSortedSortedSortedSorted(lst)\n  const NUMbersSortedSortedSortedSorted = NUMbersSortedSortedSortedSorted(lst)\n  const negActiveSortedSortedSortedSorted = negActiveSortedSortedSortedSorted(lst)\n  const asCEndingSortedSortedSortedSorted = asCEndingSortedSortedSortedSorted(lst)\n  const oRderSortedSortedSortedSortedSorted = oRderSortedSortedSortedSortedSorted(lst)\n  const oFSortedSortedSortedSortedSortedSorted = oFSortedSortedSortedSortedSorted(lst)\n  const oNLYSortedSortedSortedSortedSorted = oNLYSortedSortedSortedSorted(lst)\n  const oNTEGERsSortedSortedSortedSortedSorted = oNTEGERsSortedSortedSortedSortedSorted(lst)\n  const NUMbersSortedSortedSortedSortedSorted = NUMbersSortedSortedSortedSorted(lst)\n  const negActiveSortedSortedSortedSortedSorted = negActiveSortedSortedSortedSortedSorted(lst)\n  const asCEndingSortedSortedSortedSortedSorted = asCEndingSortedSortedSortedSortedSorted(lst)\n  const oRderSortedSortedSortedSortedSortedSorted = oRderSortedSortedSortedSortedSorted(lst)\n  const oFSortedSortedSortedSortedSortedSorted = oFSortedSortedSortedSortedSorted(lst)\n  const oNLYSortedSortedSortedSortedSortedSorted = oNLYSortedSortedSortedSortedSorted(lst)\n  const oNTEGERsSortedSortedSortedSortedSorted = oNTEGERsSortedSortedSortedSortedSorted(lst)\n  const NUMbersSortedSortedSortedSortedSorted = NUMbersSortedSortedSortedSortedSorted(lst)\n  const negActiveSortedSortedSortedSortedSorted = negActiveSortedSortedSortedSortedSorted(lst)\n  const asCEndingSortedSortedSortedSortedSorted = asCEndingSortedSortedSortedSortedSorted(lst)\n  const oRderSortedSortedSortedSortedSortedSorted = oRderSortedSortedSortedSortedSortedSorted(lst)\n  const oFSortedSortedSortedSortedSortedSorted = oFSortedSortedSortedSortedSortedSorted(lst)\n  const oNLYSortedSortedSortedSortedSorted = oNLYSortedSortedSortedSortedSorted(lst)\n  const oNTEGERsSortedSortedSortedSortedSorted = oNTEGERsSortedSortedSortedSortedSorted(lst)\n  const NUMbersSortedSortedSortedSortedSorted = NUMbersSortedSortedSortedSortedSorted(lst)\n  const negActiveSortedSortedSortedSortedSorted = negActiveSortedSortedSortedSortedSorted(lst)", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*YOu aRe givEN two IntErvALs,\n  whErE EacH INtERval Is a PAir of inTegers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN two IntErvALs,\n  whErE EacH INtERval Is a PAir of inTegers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval1;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval1;\n  const [start6, end6] = interval2;\n  const [start7, end7] = interval1;\n  const [start8, end8] = interval2;\n  const [start9, end9] = interval1;\n  const [start10, end10] = interval2;\n  const [start11, end11] = interval1;\n  const [start12, end12] = interval2;\n  const [start13, end13] = interval1;\n  const [start14, end14] = interval2;\n  const [start15, end15] = interval1;\n  const [start16, end16] = interval2;\n  const [start17, end17] = interval1;\n  const [start18, end18] = interval2;\n  const [start19, end19] = interval1;\n  const [start20, end20] = interval2;\n  const [start21, end21] = interval1;\n  const [start22, end22] = interval2;\n  const [start23, end23] = interval1;\n  const [start24, end24] = interval2;\n  const [start25, end25] = interval1;\n  const [start26, end26] = interval2;\n  const [start27, end27] = interval1;\n  const [start28, end28] = interval2;\n  const [start29, end29] = interval1;\n  const [start30, end30] = interval2;\n  const [start31, end31] = interval1;\n  const [start32, end32] = interval2;\n  const [start33, end33] = interval1;\n  const [start34, end34] = interval2;\n  const [start35, end35] = interval1;\n  const [start36, end36] = interval2;\n  const [start37, end37] = interval1;\n  const [start38, end38] = interval2;\n  const [start39, end39] = interval1;\n  const [start40, end40] = interval2;\n  const [start41, end41] = interval1;\n  const [start42, end42] = interval2;\n  const [start43, end43] = interval1;\n  const [start44, end44] = interval2;\n  const [start45, end45] = interval1;\n  const [start46, end46] = interval2;\n  const [start47, end47] = interval1;\n  const [start48, end48] = interval2;\n  const [start49, end49] = interval1;\n  const [start50, end50] = interval2;\n  const [start51, end51] = interval1;\n  const [start52, end52] = interval2;\n  const [start53, end53] = interval1;\n  const [start54, end54] = interval2;\n  const [start55, end55] = interval1;\n  const [start56, end56] = interval2;\n  const [start57, end57] = interval1;\n  const [start58, end58] = interval2;\n  const [start59, end59] = interval1;\n  const [start60, end60] = interval2;\n  const [start61, end61] = interval1;\n  const [start62, end62] = interval2;\n  const [start63, end63] = interval1;\n  const [start64, end64] = interval2;\n  const [start65, end65] = interval1;\n  const [start66, end66] = interval2;\n  const [start67, end67] = interval1;\n  const [start68, end68] = interval2;\n  const [start69, end69] = interval1;\n  const [start70, end70] = interval2;\n  const [start71, end71] = interval1;\n  const [start72, end72] = interval2;\n  const [start73, end73] = interval1;\n  const [start74, end74] = interval2;\n  const [start75, end75] = interval1;\n  const [start76, end76] = interval2;\n  const [start77, end77] = interval1;\n  const [start78, end78] = interval2;\n  const [start79, end79] = interval1;\n  const [start80, end80] = interval2;\n  const [start81, end81] = interval1;\n  const [start82, end82] = interval2;\n  const [start83, end83] = interval1;\n  const [start84, end84] = interval2;\n  const [start85, end85] = interval1;\n  const [start86, end86] = interval2;\n  const [start87, end87] = interval1;\n  const [start88, end88] = interval2;\n  const [start89, end89] = interval1;\n  const [start90, end90] = interval2;\n  const [start91, end91] = interval1;\n  const [start92, end92] = interval2;\n  const [start93, end93] = interval1;\n  const [start94, end94] = interval2;\n  const [start95, end95] = interval1;\n  const [start96, end96] = interval2;\n  const [start97, end97] = interval1;\n  const [start98, end98] = interval2;\n  const [start99, end99] = interval1;\n  const [start100, end100] = interval2;\n  const [start101, end101] = interval1;\n  const [start102, end102] = interval2;\n  const [start103, end103] = interval1;\n  const [start104, end104] = interval2;\n  const [start105, end105] = interval1;\n  const [start106, end106] = interval2;\n  const [start107, end107] = interval1;\n  const [start108, end108] = interval2;\n  const [start109, end109] = interval1;\n  const [start110, end110] = interval2;\n  const [start111, end111] = interval1;\n  const [start112, end112] = interval2;\n  const [start113, end113] = interval1;\n  const [start114, end114] = interval2;\n  const [start115, end115] = interval1;\n  const [start116, end116] = interval2;\n  const [start117, end117] = interval1;\n  const [start118, end118] = interval2;\n  const [start119, end119] = interval1;\n  const [start120, end120] = interval2;\n  const [start121, end121] = interval1;\n  const [start122, end122] = interval2;\n  const [start123, end123] = interval1;\n  const [start124, end124] = interval2;\n  const [start125, end125] = interval1;\n  const [start126, end126] = interval2;\n  const [start127, end127] = interval1;\n  const [start128, ", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 0;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr < 0) {\n      sign = -1;\n    } else if (curr > 0) {\n      sign = 1;\n    }\n    return acc;\n  }, 0);\n  return sign * signs;\n};\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiply = (arr) => {\n  let sign = 0;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr < 0) {\n      sign = -1;\n    } else if (curr > 0) {\n      sign = 1;\n    }\n    return acc * sign;\n  }, 0);\n  return signs * signs;\n};\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSignsMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiply([4, 3, 2, 1]) == -27\n  */\nconst prodSignsMultiplyMultiply = (arr) => {\n  let sign = 0;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr < 0) {\n      sign = -1;\n    } else if (curr > 0) {\n      sign = 1;\n    }\n    return acc * sign * sign;\n  }, 0);\n  return signs * signs * signs;\n};\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSignsMultiplyMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiplyMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiplyMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiplyMultiply([4, 3, 2, 1]) == -27\n  */\nconst prodSignsMultiplyMultiplyMultiply = (arr) => {\n  let sign = 0;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr < 0) {\n      sign = -1;\n    } else if (curr > 0) {\n      sign = 1;\n    }\n    return acc * sign * sign * sign;\n  }, 0);\n  return signs * signs * signs * signs;\n};\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSignsMultiplyMultiplyMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiplyMultiplyMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiplyMultiplyMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiplyMultiplyMultiply([4, 3, 2, 1]) == -27\n  */\nconst prodSignsMultiplyMultiplyMultiplyMultiply = (arr) => {\n  let sign = 0;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr < 0) {\n      sign = -1;\n    } else if (curr > 0) {\n      sign = 1;\n    }\n    return acc * sign * sign * sign * sign;\n  }, 0);\n  return signs * signs * signs * signs * signs;\n};\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSignsMultiplyMultiplyMultiplyMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiplyMultiplyMultiplyMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiplyMultiplyMultiplyMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiplyMultiplyMultiplyMultiply([4, 3, 2, 1]) == -27\n  */\nconst prodSignsMultiplyMultiplyMultiplyMultiplyMultiply = (arr) => {\n  let sign = 0;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr < 0) {\n      sign = -1;\n    } else if (curr > 0) {\n      sign = 1;\n    }\n    return acc * sign * sign * sign * sign * sign;\n  }, 0);\n  return signs * signs * signs * signs * signs * signs;\n};\n\n/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSignsMultiplyMultiplyMultiplyMultiplyMultiply([4, 3, 2, 1]) == -27\n  >>> prodSignsMultiplyMultiplyMultiplyMultiplyMultiply([4, 3, 2, 1]) == -", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  givEn a grid wiTH N roWs aNd N COlumNs (n >= 2) And A POsITive IntEGer k, \n  each Cell of THe grid cOntains a valUE. EverY integEr in the RanGe [1, N * N]\n  incluSivE appEars eXACtly onCe oN THe CElLS Of THe grid.\n\n  YOu HavE To fInd THE mInimUm paTh of LeNGth k in ThE grid. You CAn StarT\n  from aNY ceLL, aNd in EacH STep YOu caN move To ANy Of the NEighbOr CELls,\n  in oTher wORDs, you Can Go TO cELls WHIcH sharE An EdGE wIth YOu cuRRent\n  ceLl.\n  pLEAse note THAt a PAth oF LENgTH k mEans VisItIng eXActLy k CeLLs (not\n  neCeSsaRIly distiNCT).\n  You cAnnoT go oFF the grid.\n  A paTh A (Of lenGtH k) Is cOnsIdered less tHAN a pAth b (oF lEngtH k) if\n  After making THE orDerED LiSTs Of thE VaLuEs on the cellS ThAt A and b go\n  ThroUgh (Let's calL THem lst_A and lST_B), lsT_A is lexicographically leSS\n  thaN lst_b, in other Words, thERe EXist an InteGeR iNdeX i (1 <= i <= k)\n  Such ThaT lst_a[i] < Lst_B[i] aNd FOr anY j (1 <= j < i) we HAve\n  LST_A[j] = LSt_B[j].\n  IT iS gUaraNTeed ThAt thE anSwer is uNiQUe.\n  reTurn AN oRDEREd list of the valUEs oN the CelLs that thE mInimUM path Go tHrouGh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a grid wiTH N roWs aNd N COlumNs (n >= 2) And A POsITive IntEGer k, \n  each Cell of THe grid cOntains a valUE. EverY integEr in the RanGe [1, N * N]\n  incluSivE appEars eXACtly onCe oN THe CElLS Of THe grid.\n\n  YOu HavE To fInd THE mInimUm paTh of LeNGth k in ThE grid. You CAn StarT\n  from aNY ceLL, aNd in EacH STep YOu caN move To ANy Of the NEighbOr CELls,\n  in oTher wORDs, you Can Go TO cELls WHIcH sharE An EdGE wIth YOu cuRRent\n  ceLl.\n  pLEAse note THAt a PAth oF LENgTH k mEans VisItIng eXActLy k CeLLs (not\n  neCeSsaRIly distiNCT).\n  You cAnnoT go oFF the grid.\n  A paTh A (Of lenGtH k) Is cOnsIdered less tHAN a pAth b (oF lEngtH k) if\n  After making THE orDerED LiSTs Of thE VaLuEs on the cellS ThAt A and b go\n  ThroUgh (Let's calL THem lst_A and lST_B), lsT_A is lexicographically leSS\n  thaN lst_b, in other Words, thERe EXist an InteGeR iNdeX i (1 <= i <= k)\n  Such ThaT lst_a[i] < Lst_B[i] aNd FOr anY j (1 <= j < i) we HAve\n  LST_A[j] = LSt_B[j].\n  IT iS gUaraNTeed ThAt thE anSwer is uNiQUe.\n  reTurn AN oRDEREd list of the valUEs oN the CelLs that thE mInimUM path Go tHrouGh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const { length, length } = grid;\n  const [gridA, gridB] = grid;\n  const [gridA2, gridB2] = grid;\n  const [gridA3, gridB3] = grid;\n  const [gridA4, gridB4] = grid;\n  const [gridA5, gridB5] = grid;\n  const [gridA6, gridB6] = grid;\n  const [gridA7, gridB7] = grid;\n  const [gridA8, gridB8] = grid;\n  const [gridA9, gridB9] = grid;\n  const [gridA10, gridB10] = grid;\n  const [gridA11, gridB11] = grid;\n  const [gridA12, gridB12] = grid;\n  const [gridA13, gridB13] = grid;\n  const [gridA14, gridB14] = grid;\n  const [gridA15, gridB15] = grid;\n  const [gridA16, gridB16] = grid;\n  const [gridA17, gridB17] = grid;\n  const [gridA18, gridB18] = grid;\n  const [gridA19, gridB19] = grid;\n  const [gridA20, gridB20] = grid;\n  const [gridA21, gridB21] = grid;\n  const [gridA22, gridB22] = grid;\n  const [gridA23, gridB23] = grid;\n  const [gridA24, gridB24] = grid;\n  const [gridA25, gridB25] = grid;\n  const [gridA26, gridB26] = grid;\n  const [gridA27, gridB27] = grid;\n  const [gridA28, gridB28] = grid;\n  const [gridA29, gridB29] = grid;\n  const [gridA30, gridB30] = grid;\n  const [gridA31, gridB31] = grid;\n  const [gridA32, gridB32] = grid;\n  const [gridA33, gridB33] = grid;\n  const [gridA34, gridB34] = grid;\n  const [gridA35, gridB35] = grid;\n  const [gridA36, gridB36] = grid;\n  const [gridA37, gridB37] = grid;\n  const [gridA38, gridB38] = grid;\n  const [gridA39, gridB39] = grid;\n  const [gridA40, gridB40] = grid;\n  const [gridA41, gridB41] = grid;\n  const [gridA42, gridB42] = grid;\n  const [gridA43, gridB43] = grid;\n  const [gridA44, gridB44] = grid;\n  const [gridA45, gridB45] = grid;\n  const [gridA46, gridB46] = grid;\n  const [gridA47, gridB47] = grid;\n  const [gridA48, gridB48] = grid;\n  const [gridA49, gridB49] = grid;\n  const [gridA50, gridB50] = grid;\n  const [gridA51, gridB51] = grid;\n  const [gridA52, gridB52] = grid;\n  const [gridA53, gridB53] = grid;\n  const [gridA54, gridB54] = grid;\n  const [gridA55, gridB55] = grid;\n  const [gridA56, gridB56] = grid;\n  const [gridA57, gridB57] = grid;\n  const [gridA58, gridB58] = grid;\n  const [gridA59, gridB59] = grid;\n  const [gridA60, gridB60] = grid;\n  const [gridA61, gridB61] = grid;\n  const [gridA62, gridB62] = grid;\n  const [gridA63, gridB63] = grid;\n  const [gridA64, gridB64] = grid;\n  const [gridA65, gridB65] = grid;\n  const [gridA66, gridB66] = grid;\n  const [gridA67, gridB67] = grid;\n  const [gridA68, gridB68] = grid;\n  const [gridA69, gridB69] = grid;\n  const [gridA70, gridB70] = grid;\n  const [gridA71, gridB71] = grid;\n  const [gridA72, gridB72] = grid;\n  const [gridA73, gridB73] = grid;\n  const [gridA74, gridB74] = grid;\n  const [gridA75, gridB75] = grid;\n  const [gridA76, gridB76] = grid;\n  const [gridA77, gridB77] = grid;\n  const [gridA78, gridB78] = grid;\n  const [gridA79, gridB79] = grid;\n  const [gridA80, gridB80] = grid;\n  const [gridA81, gridB81] = ", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* retUrn a grEAtesT coMmoN DiviSoR Of tWO InTEgerS a anD b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* retUrn a grEAtesT coMmoN DiviSoR Of tWO InTEgerS a anD b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  const t = Math.max(a, b);\n  const r = a % b;\n  return r === 0? a : b - r;\n};\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10(2)\n * // returns '2'\n */\nconst toBase10 = n => n.toString(10);\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10(2.5)\n * // returns '2.50'\n */\nconst toBase10Fixed = n => toBase10(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10Fixed(2.5)\n * // returns '2.50'\n */\nconst toBase10Percent = n => toBase10Fixed(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10Percent(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentFixed = n => toBase10Percent(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentFixed(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercent = n => toBase10PercentFixed(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentPercent(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercentFixed = n => toBase10PercentPercent(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentPercentFixed(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercentPercentPercent = n => toBase10PercentPercentFixed(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentPercentPercentFixed(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercentPercentPercentFixed = n => toBase10PercentPercentPercentPercent(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentPercentPercentPercentFixed(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercentPercentPercentPercentPercent = n => toBase10PercentPercentPercentPercentPercentFixed(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentPercentPercentPercentPercentFixed(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercentPercentPercentPercentFixed = n => toBase10PercentPercentPercentPercentPercentPercent(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentPercentPercentPercentPercentPercentFixed(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercentPercentPercentPercentPercentPercent = n => toBase10PercentPercentPercentPercentPercentPercentPercentFixed(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentPercentPercentPercentPercentPercentFixed(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercentPercentPercentPercentPercentPercentPercentFixed = n => toBase10PercentPercentPercentPercentPercentPercentPercentPercentPercent(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentPercentPercentPercentPercentPercentPercentFixed(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercentPercentPercentPercentPercentPercentPercentPercent = n => toBase10PercentPercentPercentPercentPercentPercentPercentPercentPercentPercentFixed(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentPercentPercentPercentPercentPercentPercentPercentPercentFixed(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercentPercentPercentPercentPercentPercentPercentPercentPercent = n => toBase10PercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(n).replace(/0+$/, '');\n\n/**\n * A utility function to convert a number to a string in base 10.\n *\n * @param {number} n The number to be converted.\n * @returns {string} The number converted to a string.\n * @example\n * // Convert 2 to base 10.\n * toBase10PercentPercentPercentPercentPercentPercentPercentPercentPercentFixed(2.5)\n * // returns '2.50'\n */\nconst toBase10PercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentFixed = n => toBase10PercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentFixed(n).replace(/0+$/, '');\n\n/**\n * A utility function to ", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*EVerYone kNOws FIboNacCI seqUeNCe, iT WAs STudiEd dEEply by mAthemaTIciAns in \n  the last cOUple cEnturiEs. HowEveR, what peopLe dOn't kNow is tRIbonacCi sEQUeNCe.\n  tRIbONacCi SeqUEncE is DEFiNed bY the RecuRrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, If n Is evEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is oDd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*EVerYone kNOws FIboNacCI seqUeNCe, iT WAs STudiEd dEEply by mAthemaTIciAns in \n  the last cOUple cEnturiEs. HowEveR, what peopLe dOn't kNow is tRIbonacCi sEQUeNCe.\n  tRIbONacCi SeqUEncE is DEFiNed bY the RecuRrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, If n Is evEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is oDd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const arr = [1, 3, 2, 8];\n  let i = 1;\n  while (i < n) {\n    arr.push(arr[i++] + arr[i++] + arr[i++]);\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return a list of all possible triplets of length n.\n  For example, given n = 4, the triplets are:\n  [(1, 2), (2, 3), (3, 4)]\n  [(1, 3), (2, 4), (3, 1)]\n  [(1, 4), (2, 3), (3, 2)]\n  [(1, 5), (2, 4), (3, 3)]\n  [(1, 6), (2, 3), (3, 4)]\n  [(1, 7), (2, 4), (3, 5)]\n  [(1, 8), (2, 3), (3, 6)]\n  [(1, 9), (2, 4), (3, 7)]\n  [(1, 10), (2, 3), (3, 8)]\n  [(1, 11), (2, 4), (3, 9)]\n  [(1, 12), (2, 3), (3, 10)]\n  [(1, 13), (2, 4), (3, 11)]\n  [(1, 14), (2, 3), (3, 12)]\n  [(1, 15), (2, 4), (3, 13)]\n  [(1, 16), (2, 3), (3, 14)]\n  [(1, 17), (2, 4), (3, 15)]\n  [(1, 18), (2, 3), (3, 16)]\n  [(1, 19), (2, 4), (3, 17)]\n  [(1, 20), (2, 3), (3, 18)]\n  [(1, 21), (2, 4), (3, 19)]\n  [(1, 22), (2, 3), (3, 20)]\n  [(1, 23), (2, 4), (3, 21)]\n  [(1, 24), (2, 3), (3, 22)]\n  [(1, 25), (2, 4), (3, 23)]\n  [(1, 26), (2, 3), (3, 24)]\n  [(1, 27), (2, 4), (3, 25)]\n  [(1, 28), (2, 3), (3, 26)]\n  [(1, 29), (2, 4), (3, 27)]\n  [(1, 30), (2, 3), (3, 28)]\n  [(1, 31), (2, 4), (3, 29)]\n  [(1, 32), (2, 3), (3, 30)]\n  [(1, 33), (2, 4), (3, 31)]\n  [(1, 34), (2, 3), (3, 32)]\n  [(1, 35), (2, 4), (3, 33)]\n  [(1, 36), (2, 3), (3, 34)]\n  [(1, 37), (2, 4), (3, 35)]\n  [(1, 38), (2, 3), (3, 36)]\n  [(1, 39), (2, 4), (3, 37)]\n  [(1, 40), (2, 3), (3, 38)]\n  [(1, 41), (2, 4), (3, 39)]\n  [(1, 42), (2, 3), (3, 40)]\n  [(1, 43), (2, 4), (3, 41)]\n  [(1, 44), (2, 3), (3, 42)]\n  [(1, 45), (2, 4), (3, 43)]\n  [(1, 46), (2, 3), (3, 44)]\n  [(1, 47), (2, 4), (3, 45)]\n  [(1, 48), (2, 3), (3, 46)]\n  [(1, 49), (2, 4), (3, 47)]\n  [(1, 50), (2, 3), (3, 48)]\n  [(1, 51), (2, 4), (3, 49)]\n  [(1, 52), (2, 3), (3, 50)]\n  [(1, 53), (2, 4), (3, 51)]\n  [(1, 54), (2, 3), (3, 52)]\n  [(1, 55), (2, 4), (3, 53)]\n  [(1, 56), (2, 3), (3, 54)]\n  [(1, 57), (2, 4), (3, 55)]\n  [(1, 58), (2, 3), (3, 56)]\n  [(1, 59), (2, 4), (3, 57)]\n  [(1, 60), (2, 3), (3, 58)]\n  [(1, 61), (2, 4), (3, 59)]\n  [(1, 62), (2, 3), (3, 60)]\n  [(1, 63), (2, 4), (3, 61)]\n  [(1, 64), (2, 3), (3, 62)]\n  [(1, 65), (2, 4), (3, 63)]\n  [(1, 66), (2, 3), (3, 64)]\n  [(1, 67), (2, 4), (3, 65)]\n  [(1, 68), (2, 3), (3, 66)]\n  [(1, 69), (2, 4), (3, 67)]\n  [(1, 70), (2, 3), (3, 68)]\n  [(1, 71), (2, 4), (3, 69)]\n  [(1, 72), (2, 3), (3, 70)]\n  [(1, 73), (2, 4), (3, 71)]\n  [(1, 74), (2, 3), (3, 72)]\n  [(1, 75), (2, 4), (3, 73)]\n  [(1, 76), (2, 3), (3, 74)]\n  [(1, 77), (2, 4), (3, 75)]\n  [(1, 78), (2, 3), (3, 76)]\n  [(1, 79), (2, 4), (3, 77)]\n  [(1, 80), (2, 3), (3, 78)]\n  [(1, 81), (2, 4), (3, 79)]\n  [(1, 82), (2, 3), (3, 80)]\n  [(1, 83), (2, 4), (3, 81)]\n  [(1, 84), (2, 3), (3, 82)]\n  [(1, 85), (2, 4), (3, 83)]\n  [(1, 86), (2, 3), (3, 84)]\n  [(1, 87), (2, 4), (3, 85)]\n  [(1, 88), (2, 3), (3, 86)]\n  [(1, 89), (2, 4), (3, 87)]\n  [(1, 90), (2, 3), (3, 88)]\n  [(1, 91), (2, 4), (3, 89)]\n  [(1, 92), (2, 3), (3, 90)]\n  [(1, 93), (2, 4), (3, 91)]\n  [(1, 94), (2, 3), (3, 92)]\n  [(1, 95), (2, 4), (3, 93)]\n  [(1, 96), (2, 3), (3, 94)]\n  [(1, 97), (2, 4), (3, 95)]\n  [(1, 98), (2, 3), (3, 96)]\n  [(1, 99), (2, 4), (3, 97)]\n  [(1, 100), (2, 3), (3, 98)]\n  [(1, 101), (2, 4), (3, 99)]\n  [(1, 102), (2, 3), (3, 100)]\n  [(1, 103), (2, 4), (3, 101)]\n  [(1, 104), (2, 3), (3, 102)]\n  [(1, 105), (2, 4), (3, 103)]\n  [(1, 106), (2, 3), (3, 104)]\n  [(1, 107), (2, 4), (3, 105)]\n  [(1, 108), (2, 3), (3, 106)]\n  [(1, 109), (2, 4), (3, 107)]\n  [(1, 110), (2, 3), (3, 108)]\n  [(1, 111), (2, 4), (3, 109)]\n  [(1, 112), (2, 3), (3, 110)]\n  [(1, 113), (2, 4), (3, 111)]\n  [(1, 114), (2, 3), (3, 112)]\n  [(1, 115), (2, 4), (3, 113)]\n  [(1, 116), (2, 3), (3, 114)]\n  [(1, 117), (2, 4), (3, 115)]\n  [(1, 118), (2, 3), (3, 116)]\n  [(1, 119), (2, 4), (3, ", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*GIveN a posITive IntEgeR n, return The pRoDUct OF ThE Odd digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a posITive IntEgeR n, return The pRoDUct OF ThE Odd digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let nDigits = n.toString().length;\n  let nOddDigits = nDigits % 2;\n  let nRemainder = nDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let nRemainder = nOddDigits - nOddDigits;\n  let nOddDigits = nOddDigits % 2;\n  let n", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n  const stack = [string];\n  let isNested = true;\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === ']') {\n      isNested = false;\n      break;\n    }\n    if (char === ']') {\n      stack.push(char);\n    } else {\n      stack.push(char);\n    }\n  }\n  return isNested;\n};\n\n/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n  const stack = [string];\n  let isNested = true;\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === ']') {\n      isNested = false;\n      break;\n    }\n    if (char === ']') {\n      stack.push(char);\n    } else {\n      stack.push(char);\n    }\n  }\n  return isNested;\n};\n\n/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n  const stack = [string];\n  let isNested = true;\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === ']') {\n      isNested = false;\n      break;\n    }\n    if (char === ']') {\n      stack.push(char);\n    } else {\n      stack.push(char);\n    }\n  }\n  return isNested;\n};\n\n/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n  const stack = [string];\n  let isNested = true;\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === ']') {\n      isNested = false;\n      break;\n    }\n    if (char === ']') {\n      stack.push(char);\n    } else {\n      stack.push(char);\n    }\n  }\n  return isNested;\n};\n\n/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n  const stack = [string];\n  let isNested = true;\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === ']') {\n      isNested = false;\n      break;\n    }\n    if (char === ']') {\n      stack.push(char);\n    } else {\n      stack.push(char);\n    }\n  }\n  return isNested;\n};\n\n/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sqUarED = lst.map(n => n * n)\n  const ceiling = Math.ceil(sqUarED.length)\n  return sqUarED.map(n => Math.pow(sqUarED[ceiling], n))\n}\n\n/*\n  You nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares_2 = (lst, sqUarED) => {\n  const ceiling = Math.ceil(sqUarED.length)\n  return sqUarED.map(n => Math.pow(sqUarED[ceiling], n))\n}\n\n/*\n  You nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares_3 = (lst, sqUarED) => {\n  const ceiling = Math.ceil(sqUarED.length)\n  return sqUarED.map(n => Math.pow(sqUarED[ceiling], n))\n}\n\n/*\n  You nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares_4 = (lst, sqUarED) => {\n  const ceiling = Math.ceil(sqUarED.length)\n  return sqUarED.map(n => Math.pow(sqUarED[ceiling], n))\n}\n\n/*\n  You nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares_5 = (lst, sqUarED) => {\n  const ceiling = Math.ceil(sqUarED.length)\n  return sqUarED.map(n => Math.pow(sqUarED[ceiling], n))\n}\n\n/*\n  You nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares_6 = (lst, sqUarED) => {\n  const ceiling = Math.ceil(sqUarED.length)\n  return sqUarED.map(n => Math.pow(sqUarED[ceiling], n))\n}\n\n/*\n  You nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares_7 = (lst, sqUarED) => {\n  const ceiling = Math.ceil(sqUarED.length)\n  return sqUarED.map(n => Math.pow(sqUarED[ceiling], n))\n}\n\n/*\n  You nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares_8 = (lst, sqUarED) => {\n  const ceiling = Math.ceil(sqUarED.length)\n  return sqUarED.map(n => Math.pow(sqUarED[ceiling], n))\n}\n\n/*\n  You nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares_9 = (lst, sqUarED) => {\n  const ceiling = Math.ceil(sqUarED.length)\n  return sqUarED.map(n => Math.pow(sqUarED[ceiling], n))\n}\n\n/*\n  You n", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \" \" || lastChar === \"'\" || lastChar === \"\\\"\" || lastChar === \"-\" || lastChar === \"_\" || lastChar === \"-\";\n};\n\n/**\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsALetterOrSpace :: String -> Bool\n  checkIfLastCharIsAL", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*CReaTe a fuNCtioN whIch REturNs THe lARGeST indEx oF An elemeNt whicH\n  Is nOt greater thAN or eqUal to tHe eleMenT immediatEly PrecEding IT. if\n  no suCh eLEMeNT eXIStS TheN return -1. THe gIVen ArrAY WiLl noT conTain\n  DuPLicAtE valUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CReaTe a fuNCtioN whIch REturNs THe lARGeST indEx oF An elemeNt whicH\n  Is nOt greater thAN or eqUal to tHe eleMenT immediatEly PrecEding IT. if\n  no suCh eLEMeNT eXIStS TheN return -1. THe gIVen ArrAY WiLl noT conTain\n  DuPLicAtE valUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let retVal = 0;\n  let arrLength = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const isNegative = lst.length > 0;\n  const isPositive = lst.length > 1;\n  const isZero = lst.length === 0;\n  const isOne = lst.length === 1;\n  const isOneOrZero = lst.length === 1 || lst.length === 0;\n  const isOneOrOne = lst.length === 1 || lst.length === 1;\n  const isOneOrMore = lst.length === 1 || lst.length > 1;\n  const isOneOrMoreOrZero = lst.length === 1 || lst.length > 1 || lst.length === 0;\n  const isOneOrMoreOrOne = lst.length === 1 || lst.length > 1 || lst.length === 1;\n  const isOneOrMoreOrOneOrZero = lst.length === 1 || lst.length > 1 || lst.length === 1 || lst.length === 0;\n  const isOneOrMoreOrOneOrOne = lst.length === 1 || lst.length > 1 || lst.length === 1 || lst.length === 1;\n  const isOneOrMoreOrOneOrOneOrZero = lst.length === 1 || lst.length > 1 || lst.length === 1 || lst.length === 1 || lst.length === 0;\n  const isOneOrMoreOrOneOrOneOrOneOrZero = lst.length === 1 || lst.length > 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1;\n  const isOneOrMoreOrOneOrOneOrOneOrZero = lst.length === 1 || lst.length > 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1;\n  const isOneOrMoreOrOneOrOneOrOneOrOneOrZero = lst.length === 1 || lst.length > 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1;\n  const isOneOrMoreOrOneOrOneOrOneOrOneOrZero = lst.length === 1 || lst.length > 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1;\n  const isOneOrMoreOrOneOrOneOrOneOrOneOrOneOrZero = lst.length === 1 || lst.length > 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst.length === 1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst1 || lst", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE . Or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nULl\n  */\ncoNst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE. Or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nULl\n  */\ncoNst compareOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n/*\n  coNst compareTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareFour = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareFive = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareSix = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareSeven = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareEight = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareNine = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareEleven = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwelve = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareThirteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareFourteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareFifteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareSixteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareSeventeen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareEighteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareNineteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwenty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareThirty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareForty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareFifty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareSixty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareSeventy = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareEighty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareNinety = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyFour = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyFive = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentySix = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentySeven = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyEight = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyNine = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyTen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyEleven = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyTwelve = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyThirteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyFourteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentyFifteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  coNst compareTwentySixteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\n  ", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive even numbers. Example\n  isExactlySumEven(4) == true\n  isExactlySumEven(6) == true\n  isExactlySumEven(8) == true\n  */\nconst isExactlySumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive odd numbers. Example\n  isExactlySumOdd(4) == true\n  isExactlySumOdd(6) == true\n  isExactlySumOdd(8) == true\n  */\nconst isExactlySumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive even numbers. Example\n  isExactlySumEvenOdd(4) == true\n  isExactlySumEvenOdd(6) == true\n  isExactlySumEvenOdd(8) == true\n  */\nconst isExactlySumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive odd numbers. Example\n  isExactlySumOddOdd(4) == true\n  isExactlySumOddOdd(6) == true\n  isExactlySumOddOdd(8) == true\n  */\nconst isExactlySumOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive even numbers. Example\n  isExactlySumEvenOddOdd(4) == true\n  isExactlySumEvenOddOdd(6) == true\n  isExactlySumEvenOddOdd(8) == true\n  */\nconst isExactlySumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive even numbers. Example\n  isExactlySumOddEvenOdd(4) == true\n  isExactlySumOddEvenOdd(6) == true\n  isExactlySumOddEvenOdd(8) == true\n  */\nconst isExactlySumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive odd numbers. Example\n  isExactlySumEvenOddOddOdd(4) == true\n  isExactlySumEvenOddOddOdd(6) == true\n  isExactlySumEvenOddOddOdd(8) == true\n  */\nconst isExactlySumEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive even numbers. Example\n  isExactlySumOddEvenOddEvenOdd(4) == true\n  isExactlySumOddEvenOddEvenOdd(6) == true\n  isExactlySumOddEvenOddEvenOdd(8) == true\n  */\nconst isExactlySumOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive odd numbers. Example\n  isExactlySumEvenOddOddEvenOdd(4) == true\n  isExactlySumEvenOddOddEvenOdd(6) == true\n  isExactlySumEvenOddOddEvenOdd(8) == true\n  */\nconst isExactlySumOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive even numbers. Example\n  isExactlySumOddEvenOddOddEvenOdd(4) == true\n  isExactlySumEvenOddEvenOddEvenOdd(6) == true\n  isExactlySumEvenOddEvenOddEvenOdd(8) == true\n  */\nconst isExactlySumOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive odd numbers. Example\n  isExactlySumEvenOddOddEvenOddEvenOdd(4) == true\n  isExactlySumEvenOddOddEvenOddEvenOdd(6) == true\n  isExactlySumEvenOddOddEvenOddEvenOdd(8) == true\n  */\nconst isExactlySumOddEvenOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive even numbers. Example\n  isExactlySumOddEvenOddOddEvenOddEvenOdd(4) == true\n  isExactlySumEvenOddEvenOddEvenOddEvenOdd(6) == true\n  isExactlySumEvenOddEvenOddEvenOddEvenOdd(8) == true\n  */\nconst isExactlySumOddEvenOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/**\n  Returns true if n equals exactly the sum of ExactlyY 4 PosItive even numbers. Example\n  isExactlySumOddEvenOddOddEvenOddEvenOdd(4) == true\n  isExactlySumEvenOddEvenOddEvenOddEvenOdd(6) == true\n  isExactlySumEvenOddEvenOddEvenOdd", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*THe BRazilIAn faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCTorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THe BRazilIAn faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorialCtoRiaL = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorialCtoRiaL(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorialCtoRiaL2 = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorialCtoRiaL2(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorialCtoRiaL3 = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorialCtoRiaL3(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorialCtoRiaL4 = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorialCtoRiaL4(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorialCtoRiaL5 = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorialCtoRiaL5(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorialCtoRiaL6 = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorialCtoRiaL6(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorialCtoRiaL7 = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorialCtoRiaL7(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorialCtoRiaL8 = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorialCtoRiaL8(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorialCtoRiaL9 = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorialCtoRiaL9(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorialCtoRiaL10 = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorialCtoRiaL10(n - 1);\n};\n\n/*\n  BRaZIliaN_faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCtoRiaL(n) = n! * (n-1)! *... * n!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and ", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* retUrn list of ALl prEfiXes FRom sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* retUrn list of ALl prEfiXes FRom sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let ret = []\n  let i = 0\n  let prefix = ''\n  let prefixLen = 0\n  let prefixChar = ''\n  let prefixCharLen = 0\n  let prefixChars = []\n  let prefixCharsLen = 0\n  let prefixCharsChars = []\n  let prefixCharsCharsLen = 0\n  let prefixCharsCharsChars = []\n  let prefixCharsCharsCharsLen = 0\n  let prefixCharsCharsCharsChars = []\n  let prefixCharsCharsCharsCharsLen = 0\n  let prefixCharsCharsCharsCharsChars = []\n  let prefixCharsCharsCharsCharsCharsLen = 0\n  let prefixCharsCharsCharsCharsCharsChars = []\n  let prefixCharsCharsCharsCharsCharsCharsCharsLen = 0\n  let prefixCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsChar", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const fixSpace = (text) => {\n    const spaces = text.split(\" \");\n    const newText = spaces.map((space) => {\n      return space.replace(/\\s+/g, \" \");\n    });\n    return newText.join(\" \");\n  };\n  return fixSpace(text);\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const fixSpace = (text) => {\n    const spaces = text.split(\" \");\n    const newText = spaces.map((space) => {\n      return space.replace(/\\s+/g, \" \");\n    });\n    return newText.join(\" \");\n  };\n  return fixSpace(text);\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const fixSpace = (text) => {\n    const spaces = text.split(\" \");\n    const newText = spaces.map((space) => {\n      return space.replace(/\\s+/g, \" \");\n    });\n    return newText.join(\" \");\n  };\n  return fixSpace(text);\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const fixSpace = (text) => {\n    const spaces = text.split(\" \");\n    const newText = spaces.map((space) => {\n      return space.replace(/\\s+/g, \" \");\n    });\n    return newText.join(\" \");\n  };\n  return fixSpace(text);\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const fixSpace = (text) => {\n    const spaces = text.split(\" \");\n    const newText = spaces.map((space) => {\n      return space.replace(/\\s+/g, \" \");\n    });\n    return newText.join(\" \");\n  };\n  return fixSpace(text);\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const fixSpace = (text) => {\n    const spaces = text.split(\" \");\n    const newText = spaces.map((space) => {\n      return space.replace(/\\s+/g, \" \");\n    });\n    return newText.join(\" \");\n  };\n  return fixSpace(text);\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const fixSpace = (text) => {\n    const spaces = text.split(\" \");\n    const newText = spaces.map((space) => {\n      return space.replace(/\\s+/g, \" \");\n    });\n    return newText.join(\" \");\n  };\n  return fixSpace(text);\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const fixSpace = (text) => {\n    const spaces = text.split(\" \");\n    const newText = spaces.map((space) => {\n      return space.replace(/\\s+/g, \" \");\n    });\n    return newText.join(\" \");\n  };\n  return fixSpace(text);\n};\n\n/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcu", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/-/g, '');\n  const file_name = file_name.replace(/_/g, '');\n  const file_name = file_name.replace(/~/g, '');\n  const file_name = file_name.replace(/\\\\/g, '');\n  const file_name = file_name.replace(/\\//g, '');\n  const file_name = file_name.replace(/:/g, '');\n  const file_name = file_name.replace(/\\?/g, '');\n  const file_name = file_name.replace(/\\*/g, '');\n  const file_name = file_name.replace(/\\?/g, '');\n  const file_name = file_name.replace(/\\?/g, '');\n  const file_name = file_name.replace(/\\?/g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\./g, '');", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  thiS funcTIon wIll TakE A list of iNtEGerS. fOr ALl enTriES in the list, the FunctiON shAll square thE IntegEr entrY if itS inDex is a \n  mulTipLe of 3 And wiLL Cube thE inTEGeR EnTRY iF Its InDex IS a mUltIPLe Of 4 anD not A mulTiPLe oF 3. THe fuNCtIon wIll not \n  CHanGE tHe EntRIEs in tHE list whoSe indExES aRe not A MultiPlE OF 3 or 4. THe funCTIon shAll ThEN return tHE suM OF aLl entRIeS. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\"\n  thiS funcTIon wIll TakE A list of iNtEGerS. fOr ALl enTriES in the list, the FunctiON shAll square thE IntegEr entrY if itS inDex is a \n  mulTipLe of 3 And wiLL Cube thE inTEGeR EnTRY iF Its InDex IS a mUltIPLe Of 4 anD not A mulTiPLe oF 3. THe fuNCtIon wIll not \n  CHanGE tHe EntRIEs in tHE list whoSe indExES aRe not A MultiPlE OF 3 or 4. THe funCTIon shAll ThEN return tHE suM OF aLl entRIeS. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Function: sumSquares\n  Description: \n  \n  Takes an array of numbers and returns the sum of the squares of those numbers.\n  \n  Parameters:\n  \n  lst: Array of numbers to sum\n  \n  Returns: \n  \n  Sum of squares of lst\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares2 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    sum += lst[j] * lst[j];\n  }\n  return sum;\n};\n\n/*\n  Function: sumSquares2\n  Description: \n  \n  Takes an array of numbers and returns the sum of the squares of those numbers.\n  \n  Parameters:\n  \n  lst: Array of numbers to sum\n  \n  Returns: \n  \n  Sum of squares of lst\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Function: sumSquares3\n  Description: \n  \n  Takes an array of numbers and returns the sum of the squares of those numbers.\n  \n  Parameters:\n  \n  lst: Array of numbers to sum\n  \n  Returns: \n  \n  Sum of squares of lst\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Function: sumSquares4\n  Description: \n  \n  Takes an array of numbers and returns the sum of the squares of those numbers.\n  \n  Parameters:\n  \n  lst: Array of numbers to sum\n  \n  Returns: \n  \n  Sum of squares of lst\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Function: sumSquares5\n  Description: \n  \n  Takes an array of numbers and returns the sum of the squares of those numbers.\n  \n  Parameters:\n  \n  lst: Array of numbers to sum\n  \n  Returns: \n  \n  Sum of squares of lst\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Function: sumSquares6\n  Description: \n  \n  Takes an array of numbers and returns the sum of the squares of those numbers.\n  \n  Parameters:\n  \n  lst: Array of numbers to sum\n  \n  Returns: \n  \n  Sum of squares of lst\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Function: sumSquares7\n  Description: \n  \n  Takes an array of numbers and returns the sum of the squares of those numbers.\n  \n  Parameters:\n  \n  lst: Array of numbers to sum\n  \n  Returns: \n  \n  Sum of squares of lst\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Function: sumSquares8\n  Description: \n  \n  Takes an array of numbers and returns the sum of the squares of those numbers.\n  \n  Parameters:\n  \n  lst: Array of numbers to sum\n  \n  Returns: \n  \n  Sum of squares of lst\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Function: sumSquares9\n  Description: \n  \n  Takes an array of numbers and returns the sum of the squares of those numbers.\n  \n  Parameters:\n  \n  lst: Array of numbers to sum\n  \n  Returns: \n  \n  Sum of squares of lst\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Function: sumSquares10\n  Description: \n  \n  Takes an array of numbers and returns the sum of the squares of those numbers.\n  \n  Parameters:\n  \n  lst: Array of numbers to sum\n  \n  Returns: ", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let wordsInSentence = [];\n  let words = sentence.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceWithWordsInSentence = (sentence) => {\n  let wordsInSentence = wordsInSentence(sentence);\n  let sentenceWithWordsInSentence = \"\";\n  for (let i = 0; i < wordsInSentence.length; i++) {\n    let word = wordsInSentence[i];\n    if (word.length > 0) {\n      sentenceWithWordsInSentence += word + \" \";\n    }\n  }\n  return sentenceWithWordsInSentence;\n};\n\n/*\n  You Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceWithWordsInSentenceAndWordsInSentence = (sentence) => {\n  let wordsInSentence = wordsInSentence(sentence);\n  let sentenceWithWordsInSentence = \"\";\n  for (let i = 0; i < wordsInSentence.length; i++) {\n    let word = wordsInSentence[i];\n    if (word.length > 0) {\n      sentenceWithWordsInSentence += word + \" \";\n    }\n  }\n  let wordsInSentenceWithWordsInSentence = wordsInSentence(sentenceWithWordsInSentence);\n  let sentenceWithWordsInSentenceWithWordsInSentence = \"\";\n  for (let i = 0; i < wordsInSentenceWithWordsInSentence.length; i++) {\n    let word = wordsInSentenceWithWordsInSentence[i];\n    if (word.length > 0) {\n      sentenceWithWordsInSentenceWithWordsInSentence += word + \" \";\n    }\n  }\n  return sentenceWithWordsInSentenceWithWordsInSentence;\n};\n\n/*\n  You Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceWithWordsInSentenceAndWordsInSentenceAndWordsInSentence = (sentence) => {\n  let wordsInSentence = wordsInSentence(sentence);\n  let sentenceWithWordsInSentence = \"\";\n  for (let i = 0; i < wordsInSentence.length; i++) {\n    let word = wordsInSentence[i];\n    if (word.length > 0) {\n      sentenceWithWordsInSentence += word + \" \";\n    }\n  }\n  let wordsInSentenceWithWordsInSentence = wordsInSentence(sentenceWithWordsInSentence);\n  let sentenceWithWordsInSentenceWithWordsInSentence = \"\";\n  for (let i = 0; i < wordsInSentenceWithWordsInSentence.length; i++) {\n    let word = wordsInSentenceWithWordsInSentence[i];\n    if (word.length > 0) {\n      sentenceWithWordsInSentenceWithWordsInSentence += word + \" \";\n    }\n  }\n  let wordsInSentenceWithWordsInSentenceAndWordsInSentence = wordsInSentence(sentenceWithWordsInSentenceWithWordsInSentence);\n  let sentenceWithWordsInSentenceWithWordsInSentenceAndWordsInSentence = \"\";\n  for (let i = 0; i < wordsInSentenceWithWordsInSentenceAndWordsInSentence.length; i++) {\n    let word = wordsInSentenceWithWordsInSentenceAndWordsInSentence[i];\n    if (word.length > 0) {\n      sentenceWithWordsInSentenceWithWordsInSentenceAndWordsInSentence += word + \" \";\n    }\n  }\n  return sentenceWithWordsInSentenceWithWordsInSentenceAndWordsInSentence;\n};\n\n/*\n  You Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n  if (isNumber(x)) {\n    if (n === \"/\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"*\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"^\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"+\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"-\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"%\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"/=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"%=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"^=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"<\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \">\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"<=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \">=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"!\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"!=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"+\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"-\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"*\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"/\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"^\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"+\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"-\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"!\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"!=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"+\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"-\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"*\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"/\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"^\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"+\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"-\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"!\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"!=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"+\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"-\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"*\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"/\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"^\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"+\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"-\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"!\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"!=\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"+\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"-\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"*\") {\n      return (isNumber(n)? n : 0) === x? true : false;\n    }\n    if (n === \"", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const points = []\n  const numsArr = Array.isArray(nums)? nums : [nums]\n  numsArr.forEach((num) => {\n    const [x, y] = num\n    points.push([x, y])\n  })\n  points.sort((a, b) => a[0] - b[0])\n  return points\n}\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  const points = []\n  const numsArr = Array.isArray(nums)? nums : [nums]\n  numsArr.forEach((num) => {\n    const [x, y] = num\n    points.push([x, y])\n  })\n  points.sort((a, b) => b[0] - a[0])\n  return points\n}\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverse = (nums) => {\n  const points = []\n  const numsArr = Array.isArray(nums)? nums : [nums]\n  numsArr.forEach((num) => {\n    const [x, y] = num\n    points.push([x, y])\n  })\n  points.sort((a, b) => b[0] - a[0])\n  return points\n}\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverse = (nums) => {\n  const points = []\n  const numsArr = Array.isArray(nums)? nums : [nums]\n  numsArr.forEach((num) => {\n    const [x, y] = num\n    points.push([x, y])\n  })\n  points.sort((a, b) => b[0] - a[0])\n  return points\n}\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverse = (nums) => {\n  const points = []\n  const numsArr = Array.isArray(nums)? nums : [nums]\n  numsArr.forEach((num) => {\n    const [x, y] = num\n    points.push([x, y])\n  })\n  points.sort((a, b) => b[0] - a[0])\n  return points\n}\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverse = (nums) => {\n  const points = []\n  const numsArr = Array.isArray(nums)? nums : [nums]\n  numsArr.forEach((num) => {\n    const [x, y] = num\n    points.push([x, y])\n  })\n  points.sort((a, b) => b[0] - a[0])\n  return points\n}\n\n/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverse = (nums) ", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*WRitE a funCTion ThaT taKEs an ArRAy oF NUmBErs aS inPUt and reTurns \n  tHE nuMber of elemeNTs in the Array tHat arE grEater than 10 And Both \n  First AND last dIgiTS Of A NuMBEr ARe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funCTion ThaT taKEs an ArRAy oF NUmBErs aS inPUt and reTurns \n  tHE nuMber of elemeNTs in the Array tHat arE grEater than 10 And Both \n  First AND last dIgiTS Of A NuMBEr ARe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let numsArr = nums.filter(num => num >= 0 && num < 10);\n  let firstNum = numsArr.shift();\n  let lastNum = numsArr.shift();\n  let firstNumArr = firstNum.toString().split('');\n  let lastNumArr = lastNum.toString().split('');\n  let firstNumArr = firstNumArr.filter(num => num >= 0 && num < 10);\n  let lastNumArr = lastNumArr.filter(num => num >= 0 && num < 10);\n  let firstNumArrArr = firstNumArr.map(num => num.toString());\n  let lastNumArrArr = lastNumArr.map(num => num.toString());\n  let firstNumArrArrArr = firstNumArrArr.map(num => num.toString());\n  let lastNumArrArrArr = lastNumArrArr.map(num => num.toString());\n  let firstNumArrArrArrArr = firstNumArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArr = lastNumArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArr = firstNumArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArr = lastNumArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let firstNumArrArrArrArrArrArrArrArrArrArrArrArr = firstNumArrArrArrArrArrArrArrArrArrArrArrArr.map(num => num.toString());\n  let lastNumArrArrArrArrArrArrArrArrArrArrArr = lastNumArrArrArrArrArrArrArrArrArr", "passed": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVe TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVe TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let maxTriples = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        if (i === j && j === k) {\n          continue;\n        }\n        if (i === j && k === i) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === i) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }\n        if (j === k) {\n          continue;\n        }\n        if (i === k) {\n          continue;\n        }\n        if (i === j) {\n          continue;\n        }", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* theRe are EIght PlaNetS in Our sOlAR sySTEm: THe clOseRSt to the sun\n  is MERcuRy, the next onE Is VenUs, then earth, marS, Jupiter, SAtuRn,\n  UrAnus, NEPTune.\n  WrIte A FUnCTiON ThAT taKeS twO PlaNet NAMeS as sTrinGs planet1 anD planet2.\n  THE fuNcTion SHoUld return a tuple ContaiNIng ALl PlAneTS WhoSE orbIts arE\n  lOCaTed beTWeen tHe ORBit oF planet1 and tHE Orbit Of planet2, sOrTEd BY\n  thE PRoXimitY To ThE SuN.\n  ThE FuncTIon shoUlD return AN Empty tuple if planet1 OR planet2\n  Are NOt coRRECt PLaNet nAmeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* theRe are EIght PlaNetS in Our sOlAR sySTEm: THe clOseRSt to the sun\n  is MERcuRy, the next onE Is VenUs, then earth, marS, Jupiter, SAtuRn,\n  UrAnus, NEPTune.\n  WrIte A FUnCTiON ThAT taKeS twO PlaNet NAMeS as sTrinGs planet1 anD planet2.\n  THE fuNcTion SHoUld return a tuple ContaiNIng ALl PlAneTS WhoSE orbIts arE\n  lOCaTed beTWeen tHe ORBit oF planet1 and tHE Orbit Of planet2, sOrTEd BY\n  thE PRoXimitY To ThE SuN.\n  ThE FuncTIon shoUlD return AN Empty tuple if planet1 OR planet2\n  Are NOt coRRECt PLaNet nAmeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Name = planet1.toUpperCase();\n  const planet2Name = planet2.toUpperCase();\n  const planet1Index = planet1Name.indexOf(\"N\");\n  const planet2Index = planet2Name.indexOf(\"N\");\n  if (planet1Index === -1) {\n    throw new Error(\n      `Planet1 Name ${planet1} Not In Planet1 Names`\n    );\n  }\n  if (planet2Index === -1) {\n    throw new Error(\n      `Planet2 Name ${planet2} Not In Planet2 Names`\n    );\n  }\n  if (planet1Index < planet2Index) {\n    throw new Error(\n      `Planet1 Name ${planet1} Is Before Planet2 Name ${planet2}`\n    );\n  }\n  const planet1Name = planet1Name.substring(\n    0,\n    planet1Index\n  );\n  const planet2Name = planet2Name.substring(\n    0,\n    planet2Index\n  );\n  const planet1Index = planet1Name.indexOf(\"E\");\n  const planet2Index = planet2Name.indexOf(\"E\");\n  if (planet1Index === -1) {\n    throw new Error(\n      `Planet1 Name ${planet1} Not In Planet1 Names`\n    );\n  }\n  if (planet2Index === -1) {\n    throw new Error(\n      `Planet2 Name ${planet2} Not In Planet2 Names`\n    );\n  }\n  if (planet1Index < planet2Index) {\n    throw new Error(\n      `Planet1 Name ${planet1} Is Before Planet2 Name ${planet2}`\n    );\n  }\n  const planet1Name = planet1Name.substring(\n    0,\n    planet1Index\n  );\n  const planet2Name = planet2Name.substring(\n    0,\n    planet2Index\n  );\n  const planet1Index = planet1Name.indexOf(\"S\");\n  const planet2Index = planet2Name.indexOf(\"S\");\n  if (planet1Index === -1) {\n    throw new Error(\n      `Planet1 Name ${planet1} Not In Planet1 Names`\n    );\n  }\n  if (planet2Index === -1) {\n    throw new Error(\n      `Planet2 Name ${planet2} Not In Planet2 Names`\n    );\n  }\n  if (planet1Index < planet2Index) {\n    throw new Error(\n      `Planet1 Name ${planet1} Is Before Planet2 Name ${planet2}`\n    );\n  }\n  const planet1Name = planet1Name.substring(\n    0,\n    planet1Index\n  );\n  const planet2Name = planet2Name.substring(\n    0,\n    planet2Index\n  );\n  const planet1Index = planet1Name.indexOf(\"U\");\n  const planet2Index = planet2Name.indexOf(\"U\");\n  if (planet1Index === -1) {\n    throw new Error(\n      `Planet1 Name ${planet1} Not In Planet1 Names`\n    );\n  }\n  if (planet2Index === -1) {\n    throw new Error(\n      `Planet2 Name ${planet2} Not In Planet2 Names`\n    );\n  }\n  if (planet1Index < planet2Index) {\n    throw new Error(\n      `Planet1 Name ${planet1} Is Before Planet2 Name ${planet2}`\n    );\n  }\n  const planet1Name = planet1Name.substring(\n    0,\n    planet1Index\n  );\n  const planet2Name = planet2Name.substring(\n    0,\n    planet2Index\n  );\n  const planet1Index = planet1Name.indexOf(\"T\");\n  const planet2Index = planet2Name.indexOf(\"T\");\n  if (planet1Index === -1) {\n    throw new Error(\n      `Planet1 Name ${planet1} Not In Planet1 Names`\n    );\n  }\n  if (planet2Index === -1) {\n    throw new Error(\n      `Planet2 Name ${planet2} Not In Planet2 Names`\n    );\n  }\n  if (planet1Index < planet2Index) {\n    throw new Error(\n      `Planet1 Name ${planet1} Is Before Planet2 Name ${planet2}`\n    );\n  }\n  const planet1Name = planet1Name.substring(\n    0,\n    planet1Index\n  );\n  const planet2Name = planet2Name.substring(\n    0,\n    planet2Index\n  );\n  const planet1Index = planet1Name.indexOf(\"R\");\n  const planet2Index = planet2Name.indexOf(\"R\");\n  if (planet1Index === -1) {\n    throw new Error(\n      `Planet1 Name ${planet1} Not In Planet1 Names`\n    );\n  }\n  if (planet2Index === -1) {\n    throw new Error(\n      `Planet2 Name ${planet2} Not In Planet2 Names`\n    );\n  }\n  if (planet1Index < planet2Index) {\n    throw new Error(\n      `Planet1 Name ${planet1} Is Before Planet2 Name ${planet2}`\n    );\n  }\n  const planet1Name = planet1Name.substring(\n    0,\n    planet1Index\n  );\n  const planet2Name = planet2Name.substring(\n    0,\n    planet2Index\n  );\n  const planet1Index = planet1Name.indexOf(\"N\");\n  const planet2Index = planet2Name.indexOf(\"N\");\n  if (planet1Index === -1) {\n    throw new Error(\n      `Planet1 Name ${planet1} Not In Planet1 Names`\n    );\n  }\n  if (planet2Index === -1) {\n    throw new Error(\n      `Planet2 Name ${planet2} Not In Planet2 Names`\n    );\n  }\n  if (planet1Index < planet2Index) {\n    throw new Error(\n      `Planet1 Name ${planet1} Is Before Planet2 Name ${planet2}`\n    );\n  }\n  const ", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs AS a paRamETer,\n  deleTes the STriNgs that have ODd lenGths frOm it,\n  aNd rEturns the ResUlteD list with A SOrted oRdeR,\n  tHe list IS aLWAyS A list of StRinGS anD neVER aN arrAy of NumbErS,\n  And It May cONtAin dUplicaTEs.\n  THE oRdEr oF THe list sHOuld Be ascEnDInG by leNGth of EaCH Word, And yoU\n  SHould return The list SoRTeD By tHAT rUle.\n  If TWo WoRDs HavE The sAMe lengTh, SORT the list alpHABetICallY.\n  tHE fUNcTion ShoUlD return a list of STriNgS in sORted ordEr.\n  you MAy assume THAt alL wORDs wilL Have the SamE lengTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funCTion ThaT acCEpts A list oF StrINGs AS a paRamETer,\n  deleTes the STriNgs that have ODd lenGths frOm it,\n  aNd rEturns the ResUlteD list with A SOrted oRdeR,\n  tHe list IS aLWAyS A list of StRinGS anD neVER aN arrAy of NumbErS,\n  And It May cONtAin dUplicaTEs.\n  THE oRdEr oF THe list sHOuld Be ascEnDInG by leNGth of EaCH Word, And yoU\n  SHould return The list SoRTeD By tHAT rUle.\n  If TWo WoRDs HavE The sAMe lengTh, SORT the list alpHABetICallY.\n  tHE fUNcTion ShoUlD return a list of STriNgS in sORted ordEr.\n  you MAy assume THAt alL wORDs wilL Have the SamE lengTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sortedListSort = (lst) => {\n  const len = lst.length;\n  let sortedLst = [];\n  for (let i = 0; i < len; i++) {\n    sortedLst.push(lst[i]);\n  }\n  sortedLst.sort((a, b) => a - b);\n  return sortedLst;\n};\n\nconst sortedListReverse = (lst) => {\n  const len = lst.length;\n  let reverseLst = [];\n  for (let i = 0; i < len; i++) {\n    reverseLst.push(lst[i]);\n  }\n  reverseLst.sort((a, b) => b - a);\n  return reverseLst;\n};\n\nconst sortedListMerge = (lst1, lst2) => {\n  const len = lst1.length;\n  let mergedLst = [];\n  for (let i = 0; i < len; i++) {\n    mergedLst.push(lst1[i]);\n  }\n  for (let i = 0; i < len; i++) {\n    mergedLst.push(lst2[i]);\n  }\n  return mergedLst;\n};\n\nconst sortedListIntersect = (lst1, lst2) => {\n  const len = lst1.length;\n  let intersectLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      intersectLst.push(lst1[i]);\n    }\n  }\n  return intersectLst;\n};\n\nconst sortedListDifference = (lst1, lst2) => {\n  const len = lst1.length;\n  let differenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst2[i]) {\n      differenceLst.push(lst1[i]);\n    }\n  }\n  return differenceLst;\n};\n\nconst sortedListSymDifference = (lst1, lst2) => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst2[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst;\n};\n\nconst sortedListDifferenceBy = (lst1, lst2) => {\n  const len = lst1.length;\n  let differenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst2[i]) {\n      differenceLst.push(lst1[i]);\n    }\n  }\n  return differenceLst.sort((a, b) => a - b);\n};\n\nconst sortedListSymDifferenceBy = (lst1, lst2) => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst2[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst.sort((a, b) => b - a);\n};\n\nconst sortedListDifferenceWith = (lst1, lst2) => {\n  const len = lst1.length;\n  let differenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst2[i]) {\n      differenceLst.push(lst1[i]);\n    }\n  }\n  return differenceLst.sort((a, b) => a - b);\n};\n\nconst sortedListSymDifferenceWith = (lst1, lst2) => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst2[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst.sort((a, b) => b - a);\n};\n\nconst sortedListDifferenceWithout = lst1 => {\n  const len = lst1.length;\n  let differenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst1[i]) {\n      differenceLst.push(lst1[i]);\n    }\n  }\n  return differenceLst;\n};\n\nconst sortedListSymDifferenceWithout = lst1 => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst1[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst;\n};\n\nconst sortedListSymDifferenceWithout = lst1 => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst1[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst.sort((a, b) => b - a);\n};\n\nconst sortedListSymDifferenceWithout = lst1 => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst1[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst.sort((a, b) => b - a);\n};\n\nconst sortedListSymDifferenceWithout = lst1 => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst1[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst.sort((a, b) => b - a);\n};\n\nconst sortedListSymDifferenceWithout = lst1 => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst1[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst.sort((a, b) => b - a);\n};\n\nconst sortedListSymDifferenceWithout = lst1 => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst1[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst.sort((a, b) => b - a);\n};\n\nconst sortedListSymDifferenceWithout = lst1 => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst1[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst.sort((a, b) => b - a);\n};\n\nconst sortedListSymDifferenceWithout = lst1 => {\n  const len = lst1.length;\n  let symDifferenceLst = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst1[i]) {\n      symDifferenceLst.push(lst1[i]);\n    }\n  }\n  return symDifferenceLst.sort((a, b) => b - a);\n};\n\nconst ", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join('');\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpace = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ');\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndNewLineAndNewLineAndNewLine = (n) => {\n  const retStr = [];\n  let i = 1;\n  while (i < n) {\n    retStr.push(String.fromCharCode(i));\n    i++;\n  }\n  return retStr.join(' ') + '\\n';\n};\n\n/**\n  >>> stringSequenceWithSpace(0)\n  '0'\n  >>> stringSequenceWithSpace(5)\n  '0 1 2 3 4 5'\n  */", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) return y\n  if (n >= Math.sqrt(x)) return x\n  if (n % 2 === 1) return xOrY(n / 2, y, x)\n  return yOrX(xOrY(n / 2, y, x), n, y)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst yOrX = (n, x, y) => {\n  if (n <= 0) return x\n  if (n >= Math.sqrt(y)) return y\n  if (n % 2 === 1) return xOrY(n / 2, x, y)\n  return yOrX(xOrY(n / 2, x, y), n, x)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) return y\n  if (n >= Math.sqrt(x)) return x\n  if (n % 2 === 1) return xOrZ(n / 2, y, x)\n  return yOrX(xOrZ(n / 2, x, y), n, y)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst yOrZ = (n, x, y) => {\n  if (n <= 0) return x\n  if (n >= Math.sqrt(y)) return y\n  if (n % 2 === 1) return xOrZ(n / 2, x, y)\n  return yOrX(xOrZ(n / 2, x, y), n, x)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) return y\n  if (n >= Math.sqrt(x)) return x\n  if (n % 2 === 1) return xOrW(n / 2, y, x)\n  return yOrX(xOrW(n / 2, x, y), n, y)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst yOrW = (n, x, y) => {\n  if (n <= 0) return x\n  if (n >= Math.sqrt(y)) return y\n  if (n % 2 === 1) return xOrW(n / 2, x, y)\n  return yOrX(xOrW(n / 2, x, y), n, x)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0) return y\n  if (n >= Math.sqrt(x)) return x\n  if (n % 2 === 1) return xOrX(n / 2, x, y)\n  return yOrX(xOrX(n / 2, x, y), n, y)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst yOrX = (n, x, y) => {\n  if (n <= 0) return x\n  if (n >= Math.sqrt(y)) return y\n  if (n % 2 === 1) return xOrX(n / 2, x, y)\n  return yOrX(xOrX(n / 2, x, y), n, x)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) return x\n  if (n >= Math.sqrt(y)) return y\n  if (n % 2 === 1) return xOrY(n / 2, x, y)\n  return yOrX(xOrY(n / 2, x, y), n, y)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst yOrZ = (n, x, y) => {\n  if (n <= 0) return x\n  if (n >= Math.sqrt(y)) return y\n  if (n % 2 === 1) return xOrY(n / 2, x, y)\n  return yOrX(xOrY(n / 2, x, y), n, x)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) return y\n  if (n >= Math.sqrt(x)) return x\n  if (n % 2 === 1) return xOrW(n / 2, x, y)\n  return yOrX(xOrW(n / 2, x, y), n, y)\n}\n\n/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  ", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let tHe =\n    lst.reduce((acc, x) => acc + x * x, 0) / lst.length;\n  return tHe;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([-1, -2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let tHe =\n    lst.reduce((acc, x) => acc + x * x, 0) / lst.length;\n  return tHe;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([-1, -2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let tHe =\n    lst.reduce((acc, x) => acc + x * x, 0) / lst.length;\n  return tHe;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([-1, -2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let tHe =\n    lst.reduce((acc, x) => acc + x * x, 0) / lst.length;\n  return tHe;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([-1, -2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let tHe =\n    lst.reduce((acc, x) => acc + x * x, 0) / lst.length;\n  return tHe;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([-1, -2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let tHe =\n    lst.reduce((acc, x) => acc + x * x, 0) / lst.length;\n  return tHe;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([-1, -2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let tHe =\n    lst.reduce((acc, x) => acc + x * x, 0) / lst.length;\n  return tHe;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([-1, -2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let tHe =\n    lst.reduce((acc, x) => acc + x * x, 0) / lst.length;\n  return tHe;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([-1, -2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let tHe =\n    lst.reduce((acc, x) => acc + x * x, 0) / lst.length;\n  return tHe;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([-1, -2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  let tHe =\n    lst.reduce((acc, x) => acc + x * x, 0) / lst.length;\n  return tHe;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers tha", "passed": 1}
{"task_id": "JavaScript/152", "prompt": "/*I ThiNk we aLL remEmbEr tHAt feElINg wHEN tHE resUlt OF some loNg-awaiTEd\n  eVent is finalLY knowN. The feElingS anD thoughts You Have At thaT MOment aRe\n  dEFInITeLY WoRTh nOtIng DOwn And COMpArinG.\n  YouR tasK iS To dEtErmiNE iF a peRson coRRecTLy GuEssED The REsulTs of a NuMBeR of maTChes.\n  YOu ARE givEn two ARRays oF scOrES aND guESSeS of eqUAl LeNGtH, whERe eaCH index ShOWS A match. \n  RETUrn AN arrAY OF tHE sAme lEngTh DenoTIng HoW fAR off eacH guess wAs. IF They have GUEsseD cORRectlY,\n  The valuE is 0, And if NoT, The ValUe is the absoLUTe dIffErEnCe beTweEn the guess and the SCOre.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*I ThiNk we aLL remEmbEr tHAt feElINg wHEN tHE resUlt OF some loNg-awaiTEd\n  eVent is finalLY knowN. The feElingS anD thoughts You Have At thaT MOment aRe\n  dEFInITeLY WoRTh nOtIng DOwn And COMpArinG.\n  YouR tasK iS To dEtErmiNE iF a peRson coRRecTLy GuEssED The REsulTs of a NuMBeR of maTChes.\n  YOu ARE givEn two ARRays oF scOrES aND guESSeS of eqUAl LeNGtH, whERe eaCH index ShOWS A match. \n  RETUrn AN arrAY OF tHE sAme lEngTh DenoTIng HoW fAR off eacH guess wAs. IF They have GUEsseD cORRectlY,\n  The valuE is 0, And if NoT, The ValUe is the absoLUTe dIffErEnCe beTweEn the guess and the SCOre.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const { length } = game;\n  const { length } = guess;\n  const gameCopy = game.slice();\n  const guessCopy = guess.slice();\n  const gameCopyLength = gameCopy.length;\n  const guessCopyLength = guessCopy.length;\n  const gameCopyIndex = 0;\n  const guessCopyIndex = 0;\n  const gameCopyIndex2 = 0;\n  const guessCopyIndex2 = 0;\n  const gameCopyIndex3 = 0;\n  const guessCopyIndex3 = 0;\n  const gameCopyIndex4 = 0;\n  const guessCopyIndex4 = 0;\n  const gameCopyIndex5 = 0;\n  const guessCopyIndex5 = 0;\n  const gameCopyIndex6 = 0;\n  const guessCopyIndex6 = 0;\n  const gameCopyIndex7 = 0;\n  const guessCopyIndex7 = 0;\n  const gameCopyIndex8 = 0;\n  const guessCopyIndex8 = 0;\n  const gameCopyIndex9 = 0;\n  const guessCopyIndex9 = 0;\n  const gameCopyIndex10 = 0;\n  const guessCopyIndex10 = 0;\n  const gameCopyIndex11 = 0;\n  const guessCopyIndex11 = 0;\n  const gameCopyIndex12 = 0;\n  const guessCopyIndex12 = 0;\n  const gameCopyIndex13 = 0;\n  const guessCopyIndex13 = 0;\n  const gameCopyIndex14 = 0;\n  const guessCopyIndex14 = 0;\n  const gameCopyIndex15 = 0;\n  const guessCopyIndex15 = 0;\n  const gameCopyIndex16 = 0;\n  const guessCopyIndex16 = 0;\n  const gameCopyIndex17 = 0;\n  const guessCopyIndex17 = 0;\n  const gameCopyIndex18 = 0;\n  const guessCopyIndex18 = 0;\n  const gameCopyIndex19 = 0;\n  const guessCopyIndex19 = 0;\n  const gameCopyIndex20 = 0;\n  const guessCopyIndex20 = 0;\n  const gameCopyIndex21 = 0;\n  const guessCopyIndex21 = 0;\n  const gameCopyIndex22 = 0;\n  const guessCopyIndex22 = 0;\n  const gameCopyIndex23 = 0;\n  const guessCopyIndex23 = 0;\n  const gameCopyIndex24 = 0;\n  const guessCopyIndex24 = 0;\n  const gameCopyIndex25 = 0;\n  const guessCopyIndex25 = 0;\n  const gameCopyIndex26 = 0;\n  const guessCopyIndex26 = 0;\n  const gameCopyIndex27 = 0;\n  const guessCopyIndex27 = 0;\n  const gameCopyIndex28 = 0;\n  const guessCopyIndex28 = 0;\n  const gameCopyIndex29 = 0;\n  const guessCopyIndex29 = 0;\n  const gameCopyIndex30 = 0;\n  const guessCopyIndex30 = 0;\n  const gameCopyIndex31 = 0;\n  const guessCopyIndex31 = 0;\n  const gameCopyIndex32 = 0;\n  const guessCopyIndex32 = 0;\n  const gameCopyIndex33 = 0;\n  const guessCopyIndex33 = 0;\n  const gameCopyIndex34 = 0;\n  const guessCopyIndex34 = 0;\n  const gameCopyIndex35 = 0;\n  const guessCopyIndex35 = 0;\n  const gameCopyIndex36 = 0;\n  const guessCopyIndex36 = 0;\n  const gameCopyIndex37 = 0;\n  const guessCopyIndex37 = 0;\n  const gameCopyIndex38 = 0;\n  const guessCopyIndex38 = 0;\n  const gameCopyIndex39 = 0;\n  const guessCopyIndex39 = 0;\n  const gameCopyIndex40 = 0;\n  const guessCopyIndex40 = 0;\n  const gameCopyIndex41 = 0;\n  const guessCopyIndex41 = 0;\n  const gameCopyIndex42 = 0;\n  const guessCopyIndex42 = 0;\n  const gameCopyIndex43 = 0;\n  const guessCopyIndex43 = 0;\n  const gameCopyIndex44 = 0;\n  const guessCopyIndex44 = 0;\n  const gameCopyIndex45 = 0;\n  const guessCopyIndex45 = 0;\n  const gameCopyIndex46 = 0;\n  const guessCopyIndex46 = 0;\n  const gameCopyIndex47 = 0;\n  const guessCopyIndex47 = 0;\n  const gameCopyIndex48 = 0;\n  const guessCopyIndex48 = 0;\n  const gameCopyIndex49 = 0;\n  const guessCopyIndex49 = 0;\n  const gameCopyIndex50 = 0;\n  const guessCopyIndex50 = 0;\n  const gameCopyIndex51 = 0;\n  const guessCopyIndex51 = 0;\n  const gameCopyIndex52 = 0;\n  const guessCopyIndex52 = 0;\n  const gameCopyIndex53 = 0;\n  const guessCopyIndex53 = 0;\n  const gameCopyIndex54 = 0;\n  const guessCopyIndex54 = 0;\n  const gameCopyIndex55 = 0;\n  const guessCopyIndex55 = 0;\n  const gameCopyIndex56 = 0;\n  const guessCopyIndex56 = 0;\n  const gameCopyIndex57 = 0;\n  const guessCopyIndex57 = 0;\n  const gameCopyIndex58 = 0;\n  const guessCopyIndex58 = 0;\n  const gameCopyIndex59 = 0;\n  const guessCopyIndex59 = 0;\n  const gameCopyIndex60 = 0;\n  const guessCopyIndex60 = 0;\n  const gameCopyIndex61 = 0;\n  const guessCopyIndex61 = 0;\n  const gameCopyIndex62 = 0;\n  const guessCopyIndex62 = 0;\n  const gameCopyIndex63 = 0;\n  const guessCopyIndex63 = 0;\n  const gameCopyIndex64 = 0;\n  const guessCopyIndex64 = 0;\n  const gameCopyIndex65 = 0;\n  const guessCopyIndex65 = 0;\n  const gameCopyIndex66 = 0;\n  const guessCopyIndex66 = 0;\n  const gameCopyIndex67 = 0;\n  const guessCopyIndex67 = 0;\n  const gameCopyIndex68 = 0;\n  const guessCopyIndex68 = 0;\n  const gameCopyIndex69 = 0;\n  const guessCopyIndex69 = 0;\n  const gameCopyIndex70 = 0;\n  const guessCopyIndex70 = 0;\n  const gameCopyIndex71 = 0;\n  const guessCopyIndex71 = 0;\n  const gameCopyIndex72 = 0;\n  const guessCopyIndex72 = 0;\n  const gameCopyIndex73 = 0;\n  const guessCopyIndex73 = 0;\n  const gameCopyIndex74 = 0;\n  const guessCopyIndex74 = 0;\n  const gameCopyIndex75 = 0;\n  const guessCopyIndex75 = 0;\n  const gameCopyIndex76 = 0;\n  const guessCopyIndex76 = 0;\n  const gameCopyIndex77 = 0;\n  const guessCopyIndex77 = 0;\n  const gameCopyIndex78 = 0;\n  const guessCopyIndex78 = 0;\n  const gameCopyIndex79 = 0;\n  const guessCopyIndex79 = 0;\n  const gameCopyIndex80 = 0;\n  const guessCopyIndex80 = 0;\n  const gameCopyIndex81 = 0;\n  const guessCopyIndex81 = 0;\n  const gameCopyIndex82 = 0;\n  const guessCopyIndex82 = 0;\n  const gameCopyIndex83 = 0;\n  const guessCopyIndex83 = 0;\n  const gameCopyIndex84 = 0;\n  const guess", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*YOu wIll be GIven The NamE Of a cLaSS (a sTRInG) And a list Of extensions.\n  THE extensions are to bE used tO LoaD additional CLasseS to the Class. the\n  Strength oF thE extEnsioN IS as folLowS: lEt caP BE ThE NumBeR of THe uPpeRCAsE\n  letTers in The eXtENsiOn'S namE, AnD let sM be thE NumBEr Of LowERCasE LettErs\n  in thE eXTeNsion'S Name, tHe STRengTh is gIVEn by tHe fRaCTiON CAp - sm.\n  YOu shoULd FiND tHe sTRongESt exteNsION And return a strING in thIS\n  forMAT: clASsname.strOnGesteXteNsIoNname.\n  If tHeRe aRE two or moRE extensions With ThE SAme stREngth, yoU shOuld\n  cHoOSe tHe oNe that comes FIRst in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu wIll be GIven The NamE Of a cLaSS (a sTRInG) And a list Of extensions.\n  THE extensions are to bE used tO LoaD additional CLasseS to the Class. the\n  Strength oF thE extEnsioN IS as folLowS: lEt caP BE ThE NumBeR of THe uPpeRCAsE\n  letTers in The eXtENsiOn'S namE, AnD let sM be thE NumBEr Of LowERCasE LettErs\n  in thE eXTeNsion'S Name, tHe STRengTh is gIVEn by tHe fRaCTiON CAp - sm.\n  YOu shoULd FiND tHe sTRongESt exteNsION And return a strING in thIS\n  forMAT: clASsname.strOnGesteXteNsIoNname.\n  If tHeRe aRE two or moRE extensions With ThE SAme stREngth, yoU shOuld\n  cHoOSe tHe oNe that comes FIRst in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_str = '';\n  let extension_strength_str_list = '';\n  let extension_strength_str_list2 = '';\n  let extension_strength_str_list3 = '';\n  let extension_strength_str_list4 = '';\n  let extension_strength_str_list5 = '';\n  let extension_strength_str_list6 = '';\n  let extension_strength_str_list7 = '';\n  let extension_strength_str_list8 = '';\n  let extension_strength_str_list9 = '';\n  let extension_strength_str_list10 = '';\n  let extension_strength_str_list11 = '';\n  let extension_strength_str_list12 = '';\n  let extension_strength_str_list13 = '';\n  let extension_strength_str_list14 = '';\n  let extension_strength_str_list15 = '';\n  let extension_strength_str_list16 = '';\n  let extension_strength_str_list17 = '';\n  let extension_strength_str_list18 = '';\n  let extension_strength_str_list19 = '';\n  let extension_strength_str_list20 = '';\n  let extension_strength_str_list21 = '';\n  let extension_strength_str_list22 = '';\n  let extension_strength_str_list23 = '';\n  let extension_strength_str_list24 = '';\n  let extension_strength_str_list25 = '';\n  let extension_strength_str_list26 = '';\n  let extension_strength_str_list27 = '';\n  let extension_strength_str_list28 = '';\n  let extension_strength_str_list29 = '';\n  let extension_strength_str_list30 = '';\n  let extension_strength_str_list31 = '';\n  let extension_strength_str_list32 = '';\n  let extension_strength_str_list33 = '';\n  let extension_strength_str_list34 = '';\n  let extension_strength_str_list35 = '';\n  let extension_strength_str_list36 = '';\n  let extension_strength_str_list37 = '';\n  let extension_strength_str_list38 = '';\n  let extension_strength_str_list39 = '';\n  let extension_strength_str_list40 = '';\n  let extension_strength_str_list41 = '';\n  let extension_strength_str_list42 = '';\n  let extension_strength_str_list43 = '';\n  let extension_strength_str_list44 = '';\n  let extension_strength_str_list45 = '';\n  let extension_strength_str_list46 = '';\n  let extension_strength_str_list47 = '';\n  let extension_strength_str_list48 = '';\n  let extension_strength_str_list49 = '';\n  let extension_strength_str_list50 = '';\n  let extension_strength_str_list51 = '';\n  let extension_strength_str_list52 = '';\n  let extension_strength_str_list53 = '';\n  let extension_strength_str_list54 = '';\n  let extension_strength_str_list55 = '';\n  let extension_strength_str_list56 = '';\n  let extension_strength_str_list57 = '';\n  let extension_strength_str_list58 = '';\n  let extension_strength_str_list59 = '';\n  let extension_strength_str_list60 = '';\n  let extension_strength_str_list61 = '';\n  let extension_strength_str_list62 = '';\n  let extension_strength_str_list63 = '';\n  let extension_strength_str_list64 = '';\n  let extension_strength_str_list65 = '';\n  let extension_strength_str_list66 = '';\n  let extension_strength_str_list67 = '';\n  let extension_strength_str_list68 = '';\n  let extension_strength_str_list69 = '';\n  let extension_strength_str_list70 = '';\n  let extension_strength_str_list71 = '';\n  let extension_strength_str_list72 = '';\n  let extension_strength_str_list73 = '';\n  let extension_strength_str_list74 = '';\n  let extension_strength_str_list75 = '';\n  let extension_strength_str_list76 = '';\n  let extension_strength_str_list77 = '';\n  let extension_strength_str_list78 = '';\n  let extension_strength_str_list79 = '';\n  let extension_strength_str_list80 = '';\n  let extension_strength_str_list81 = '';\n  let extension_strength_str_list82 = '';\n  let extension_strength_str_list83 = '';\n  let extension_strength_str_list84 = '';\n  let extension_strength_str_list85 = '';\n  let extension_strength_str_list86 = '';\n  let extension_strength_str_list87 = '';\n  let extension_strength_str_list88 = '';\n  let extension_strength_str_list89 = '';\n  let extension_strength_str_list90 = '';\n  let extension_strength_str_list91 = '';\n  let extension_strength_str_list92 = '';\n  let extension_strength_str_list93 = '';\n  let extension_strength_str_list94 = '';\n  let extension_strength_str_list95 = '';\n  let extension_strength_str_list96 = '';\n  let extension_strength_str_list97 = '';\n  let extension_strength_str_list98 = '';\n  let extension_strength_str_list99 = '';\n  let extension_strength_str_list100 = '';\n  let extension_strength_str_list101 = '';\n  let extension_strength_str_list102 = '';\n  let extension_strength_str_list103 = '';\n  let extension_strength_str_list104 = '';\n  let extension_strength_str_list105 = '';\n  let extension_strength_str_list106 = '';\n  let extension_strength_str_list107 = '';\n  let extension_strength_str_list108 = '';\n  let extension_strength_str_list109 = '';\n  let extension_strength_str_list110 = '';\n  let extension_strength_str_list111 = '';\n  let extension_strength_str_list112 = '';\n  let extension_strength_str_list113 = '';\n  let extension_strength_str_list114 = '';\n  let extension_strength_", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n  const aArr = a.split('')\n  const bArr = b.split('')\n  const aLen = aArr.length\n  const bLen = bArr.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  do {\n    even = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (even && num);\n  do {\n    odd = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (odd && num);\n  return [even, odd];\n};\n\n/*\n  GIveN an inTEger. return A tuple thAT hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n  Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCountWithOdd = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  do {\n    even = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (even && num);\n  do {\n    odd = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (odd && num);\n  return [even, odd];\n};\n\n/*\n  GIveN an inTEger. return A tuple thAT hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n  Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCountWithEven = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  do {\n    even = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (even && num);\n  do {\n    odd = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (odd && num);\n  return [even, odd];\n};\n\n/*\n  GIveN an inTEger. return A tuple thAT hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n  Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddOddCount = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  do {\n    even = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (even && num);\n  do {\n    odd = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (odd && num);\n  return [even, odd];\n};\n\n/*\n  GIveN an inTEger. return A tuple thAT hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n  Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddOddCountWithOdd = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  do {\n    even = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (even && num);\n  do {\n    odd = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (odd && num);\n  return [even, odd];\n};\n\n/*\n  GIveN an inTEger. return A tuple thAT hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n  Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddOddCountWithEven = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  do {\n    even = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (even && num);\n  do {\n    odd = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (odd && num);\n  return [even, odd];\n};\n\n/*\n  GIveN an inTEger. return A tuple thAT hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n  Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCountWithOddAndEven = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  do {\n    even = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (even && num);\n  do {\n    odd = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (odd && num);\n  return [even, odd];\n};\n\n/*\n  GIveN an inTEger. return A tuple thAT hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n  Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCountWithOddAndOdd = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  do {\n    even = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (even && num);\n  do {\n    odd = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (odd && num);\n  return [even, odd];\n};\n\n/*\n  GIveN an inTEger. return A tuple thAT hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n  Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCountWithEvenAndOdd = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  do {\n    even = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (even && num);\n  do {\n    odd = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (odd && num);\n  return [even, odd];\n};\n\n/*\n  GIveN an inTEger. return A tuple thAT hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n  Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCountWithOddAndEven = (num) => {\n  let even = 0;\n  let odd = 0;\n  let count = 0;\n  do {\n    even = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (even && num);\n  do {\n    odd = num % 2;\n    num = Math.floor(num / 2);\n    count++;\n  } while (odd && num);\n  return [even, odd];\n};\n\n/*\n  GIveN ", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCAse.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCAse.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let miniRoman = '';\n  let numStr = number.toString();\n  let numArr = numStr.split('');\n  let numLen = numArr.length;\n  let numStrLen = numStr.length;\n  let numStrArr = numStr.split('');\n  let numStrLenArr = numStrArr.length;\n  let numStrLen = numStrLenArr.length;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStrLen = numStrLen;\n  let numStr", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const aIsRightAngle = a >= 0 && a <= 180;\n  const bIsRightAngle = b >= 0 && b <= 180;\n  const cIsRightAngle = c >= 0 && c <= 180;\n  return aIsRightAngle && bIsRightAngle && cIsRightAngle;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const aIsRightAngle = a >= 0 && a <= 180;\n  const bIsRightAngle = b >= 0 && b <= 180;\n  const cIsRightAngle = c >= 0 && c <= 180;\n  return aIsRightAngle && bIsRightAngle && cIsRightAngle;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const aIsRightAngle = a >= 0 && a <= 180;\n  const bIsRightAngle = b >= 0 && b <= 180;\n  const cIsRightAngle = c >= 0 && c <= 180;\n  return aIsRightAngle && bIsRightAngle && cIsRightAngle;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const aIsRightAngle = a >= 0 && a <= 180;\n  const bIsRightAngle = b >= 0 && b <= 180;\n  const cIsRightAngle = c >= 0 && c <= 180;\n  return aIsRightAngle && bIsRightAngle && cIsRightAngle;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const aIsRightAngle = a >= 0 && a <= 180;\n  const bIsRightAngle = b >= 0 && b <= 180;\n  const cIsRightAngle = c >= 0 && c <= 180;\n  return aIsRightAngle && bIsRightAngle && cIsRightAngle;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const aIsRightAngle = a >= 0 && a <= 180;\n  const bIsRightAngle = b >= 0 && b <= 180;\n  const cIsRightAngle = c >= 0 && c <= 180;\n  return aIsRightAngle && bIsRightAngle && cIsRightAngle;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const aIsRightAngle = a >= 0 && a <= 180;\n  const bIsRightAngle = b >= 0 && b <= 180;\n  const cIsRightAngle = c >= 0 && c <= 180;\n  return aIsRightAngle && bIsRightAngle && cIsRightAngle;\n};\n\n/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS ", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs.\n  tHe list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRings hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\" ,\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funCTion ThaT acCEpts A list oF StrINGs.\n  tHe list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRings hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxWordNum = 0;\n  let maxWordChar = \"\";\n  let maxWordCharNum = 0;\n  let maxWordCharChar = \"\";\n  let maxWordCharCharNum = 0;\n  let maxWordCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWordCharCharCharChar = \"\";\n  let maxWordCharCharCharNum = 0;\n  let maxWord", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  you'Re a huNGry rAbbIt, aND you AlREadY HAvE EateN a cERtain number of CarrotS,\n  But Now you need to eat morE CarroTs to coMpletE thE day's mealS.\n  yoU shoUld return an ARRay of [ tOtaL number OF eATeN CArROts AfTer YOur MeaLS,\n                                  ThE number of cArroTs leFt AFteR yOur mEAlS ]\n  if tHere arE Not ENoUgH remaining caRROts, YOu wiLl eat all remaining CaRRoTs, but WIll stIlL BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you'Re a huNGry rAbbIt, aND you AlREadY HAvE EateN a cERtain number of CarrotS,\n  But Now you need to eat morE CarroTs to coMpletE thE day's mealS.\n  yoU shoUld return an ARRay of [ tOtaL number OF eATeN CArROts AfTer YOur MeaLS,\n                                  ThE number of cArroTs leFt AFteR yOur mEAlS ]\n  if tHere arE Not ENoUgH remaining caRROts, YOu wiLl eat all remaining CaRRoTs, but WIll stIlL BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  const carrots = Array(number).fill(0);\n  const remaining = Array(need).fill(0);\n  const remainder = (remaining, carrots, number) => {\n    const remainderCarrots = Array(number).fill(0);\n    for (let i = 0; i < number; i++) {\n      remainderCarrots[i] = carrots[i];\n    }\n    return remainderCarrots;\n  };\n  const eatCarrots = (number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots;\n  };\n  const eatCarrot = (number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrots = (carrots, number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrot = (number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrots = (carrots, number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrot = (number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrots = (carrots, number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrot = (number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrots = (carrots, number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrot = (number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrots = (carrots, number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrot = (number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrot = (number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrots.map((carrot) => carrot + need);\n  };\n  const eatCarrot = (number, need) => {\n    const remainderCarrots = remainder(remaining, carrots, number);\n    const remainderCarrots = remainderCarrots.map((carrots, i) => {\n      return carrots.map((carrot) => carrot + remainderCarrots[i]);\n    });\n    return remainderCarrot", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* givEn a string, fiND out How ManY DistInCT chARAcTErs (rEgaRDless of Case) doES it Consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn a string, fiND out How ManY DistInCT chARAcTErs (rEgaRDless of Case) doES it Consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let charCount = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i] === '') {\n      charCount++;\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * countDistinctCharactersWithCase\n * countDistinctCharactersWithCase(string, caseSensitive)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase, ignoreCase)\n * countDistinctCharactersWithCase(string, caseSensitive, ignoreCase, ", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  givEn two LIsts operator, And operand. the FIrst list HaS BasIC AlGEbra OpeRAtions, aNd \n  the sEConD list is a list of integERs. Use The two Given LisTs to build The AlgeBric \n  eXPRessioN anD return THe EVaLUAtIOn oF tHis EXprEssION.\n\n  THe baSic aLgebRa OPerAtIons:\n  aDdItioN ( + ) \n  SubtrACtiON ( - ) \n  MUlTipLICatIOn ( * ) \n  FlOor diViSIoN ( // ) \n  ExpoNEntiaTiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn two LIsts operator, And operand. the FIrst list HaS BasIC AlGEbra OpeRAtions, aNd \n  the sEConD list is a list of integERs. Use The two Given LisTs to build The AlgeBric \n  eXPRessioN anD return THe EVaLUAtIOn oF tHis EXprEssION.\n\n  THe baSic aLgebRa OPerAtIons:\n  aDdItioN ( + ) \n  SubtrACtiON ( - ) \n  MUlTipLICatIOn ( * ) \n  FlOor diViSIoN ( // ) \n  ExpoNEntiaTiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('-');\n  const result = operandList.reduce((acc, curr) => {\n    return acc + operatorList.includes(curr)? curr : 0;\n  }, 0);\n  return result;\n};\n\n/*\n  Given two lists operators and operands, return true if and only if both lists \n  are non-empty.\n\n  Example:\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => true\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/']\n  operands = ['1', '2', '3', '4']\n  => false\n\n  operators = ['+', '-', '*', '/", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*YOu aRe givEN a stRinG s.\n  if s[i] IS a leTtER, reVERsE Its cAse FRom loweR to uppER or Vise versa, \n  otHErwisE keep iT as it Is.\n  IF the strinG coNtaiNs no lETTers, reVerSE ThE StRINg.\n  tHe fUnCtiON shOulD return THe ResuLted StriNg.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN a stRinG s.\n  if s[i] IS a leTtER, reVERsE Its cAse FRom loweR to uppER or Vise versa, \n  otHErwisE keep iT as it Is.\n  IF the strinG coNtaiNs no lETTers, reVerSE ThE StRINg.\n  tHe fUnCtiON shOulD return THe ResuLted StriNg.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const re = /[#@]/g;\n  const re1 = /[#@]/g;\n  const re2 = /[#@]/g;\n  const re3 = /[#@]/g;\n  const re4 = /[#@]/g;\n  const re5 = /[#@]/g;\n  const re6 = /[#@]/g;\n  const re7 = /[#@]/g;\n  const re8 = /[#@]/g;\n  const re9 = /[#@]/g;\n  const re10 = /[#@]/g;\n  const re11 = /[#@]/g;\n  const re12 = /[#@]/g;\n  const re13 = /[#@]/g;\n  const re14 = /[#@]/g;\n  const re15 = /[#@]/g;\n  const re16 = /[#@]/g;\n  const re17 = /[#@]/g;\n  const re18 = /[#@]/g;\n  const re19 = /[#@]/g;\n  const re20 = /[#@]/g;\n  const re21 = /[#@]/g;\n  const re22 = /[#@]/g;\n  const re23 = /[#@]/g;\n  const re24 = /[#@]/g;\n  const re25 = /[#@]/g;\n  const re26 = /[#@]/g;\n  const re27 = /[#@]/g;\n  const re28 = /[#@]/g;\n  const re29 = /[#@]/g;\n  const re30 = /[#@]/g;\n  const re31 = /[#@]/g;\n  const re32 = /[#@]/g;\n  const re33 = /[#@]/g;\n  const re34 = /[#@]/g;\n  const re35 = /[#@]/g;\n  const re36 = /[#@]/g;\n  const re37 = /[#@]/g;\n  const re38 = /[#@]/g;\n  const re39 = /[#@]/g;\n  const re40 = /[#@]/g;\n  const re41 = /[#@]/g;\n  const re42 = /[#@]/g;\n  const re43 = /[#@]/g;\n  const re44 = /[#@]/g;\n  const re45 = /[#@]/g;\n  const re46 = /[#@]/g;\n  const re47 = /[#@]/g;\n  const re48 = /[#@]/g;\n  const re49 = /[#@]/g;\n  const re50 = /[#@]/g;\n  const re51 = /[#@]/g;\n  const re52 = /[#@]/g;\n  const re53 = /[#@]/g;\n  const re54 = /[#@]/g;\n  const re55 = /[#@]/g;\n  const re56 = /[#@]/g;\n  const re57 = /[#@]/g;\n  const re58 = /[#@]/g;\n  const re59 = /[#@]/g;\n  const re60 = /[#@]/g;\n  const re61 = /[#@]/g;\n  const re62 = /[#@]/g;\n  const re63 = /[#@]/g;\n  const re64 = /[#@]/g;\n  const re65 = /[#@]/g;\n  const re66 = /[#@]/g;\n  const re67 = /[#@]/g;\n  const re68 = /[#@]/g;\n  const re69 = /[#@]/g;\n  const re70 = /[#@]/g;\n  const re71 = /[#@]/g;\n  const re72 = /[#@]/g;\n  const re73 = /[#@]/g;\n  const re74 = /[#@]/g;\n  const re75 = /[#@]/g;\n  const re76 = /[#@]/g;\n  const re77 = /[#@]/g;\n  const re78 = /[#@]/g;\n  const re79 = /[#@]/g;\n  const re80 = /[#@]/g;\n  const re81 = /[#@]/g;\n  const re82 = /[#@]/g;\n  const re83 = /[#@]/g;\n  const re84 = /[#@]/g;\n  const re85 = /[#@]/g;\n  const re86 = /[#@]/g;\n  const re87 = /[#@]/g;\n  const re88 = /[#@]/g;\n  const re89 = /[#@]/g;\n  const re90 = /[#@]/g;\n  const re91 = /[#@]/g;\n  const re92 = /[#@]/g;\n  const re93 = /[#@]/g;\n  const re94 = /[#@]/g;\n  const re95 = /[#@]/g;\n  const re96 = /[#@]/g;\n  const re97 = /[#@]/g;\n  const re98 = /[#@]/g;\n  const re99 = /[#@]/g;\n  const re100 = /[#@]/g;\n  const re101 = /[#@]/g;\n  const re102 = /[#@]/g;\n  const re103 = /[#@]/g;\n  const re104 = /[#@]/g;\n  const re105 = /[#@]/g;\n  const re106 = /[#@]/g;\n  const re107 = /[#@]/g;\n  const re108 = /[#@]/g;\n  const re109 = /[#@]/g;\n  const re110 = /[#@]/g;\n  const re111 = /[#@]/g;\n  const re112 = /[#@]/g;\n  const re113 = /[#@]/g;\n  const re114 = /[#@]/g;\n  const re115 = /[#@]/g;\n  const re116 = /[#@]/g;\n  const re117 = /[#@]/g;\n  const re118 = /[#@]/g;\n  const re119 = /[#@]/g;\n  const re120 = /[#@]/g;\n  const re121 = /[#@]/g;\n  const re122 = ", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const hAsh = crypto.createHmac('sha512', process.env.HASH_KEY).update(text).digest('hex')\n  const eQuivAlENt = crypto.createHmac('sha512', process.env.EQUIV_ALT_KEY).update(hAsh).digest('hex')\n  const sTRIng = crypto.createHmac('sha512', process.env.STR_ING_KEY).update(eQuivAlEnt).digest('hex')\n  return sTRIng\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const hAsh = crypto.createHmac('sha512', process.env.HASH_KEY).update(text).digest('hex')\n  const eQuivAlENt = crypto.createHmac('sha512', process.env.EQUIV_ALT_KEY).update(hAsh).digest('hex')\n  const sTRIng = crypto.createHmac('sha512', process.env.STR_ING_KEY).update(eQuivAlEnt).digest('hex')\n  return sTRIng\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const hAsh = crypto.createHmac('sha512', process.env.HASH_KEY).update(text).digest('hex')\n  const eQuivAlENt = crypto.createHmac('sha512', process.env.EQUIV_ALT_KEY).update(hAsh).digest('hex')\n  const sTRIng = crypto.createHmac('sha512', process.env.STR_ING_KEY).update(eQuivAlEnt).digest('hex')\n  return sTRIng\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const hAsh = crypto.createHmac('sha512', process.env.HASH_KEY).update(text).digest('hex')\n  const eQuivAlENt = crypto.createHmac('sha512', process.env.EQUIV_ALT_KEY).update(hAsh).digest('hex')\n  const sTRIng = crypto.createHmac('sha512', process.env.STR_ING_KEY).update(eQuivAlEnt).digest('hex')\n  return sTRIng\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const hAsh = crypto.createHmac('sha512', process.env.HASH_KEY).update(text).digest('hex')\n  const eQuivAlENt = crypto.createHmac('sha512', process.env.EQUIV_ALT_KEY).update(hAsh).digest('hex')\n  const sTRIng = crypto.createHmac('sha512', process.env.STR_ING_KEY).update(eQuivAlEnt).digest('hex')\n  return sTRIng\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const hAsh = crypto.createHmac('sha512', process.env.HASH_KEY).update(text).digest('hex')\n  const eQuivAlENt = crypto.createHmac('sha512', process.env.EQUIV_ALT_KEY).update(hAsh).digest('hex')\n  const sTRIng = crypto.createHmac('sha512', process.env.STR_ING_KEY).update(eQuivAlEnt).digest('hex')\n  return sTRIng\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const hAsh = crypto.createHmac('sha512', process.env.HASH_KEY).update(text).digest('hex')\n  const eQuivAlENt = crypto.createHmac('sha512', process.env.EQUIV_ALT_KEY).update(hAsh).digest('hex')\n  const sTRIng = crypto.createHmac('sha512', process.env.STR_ING_KEY).update(eQuivAlEnt).digest('hex')\n  return sTRIng\n}\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const hAsh = crypto.createHmac('sha512', process.env.HASH_KEY).update(text).digest('hex')\n  const eQuivAlENt = crypto.createHmac('sha512', process.env.EQUIV_ALT_KEY).update(hAsh).digest('hex')\n  const sTRIng = crypto.createHmac('sha512', process.env.STR_ING_KEY).update(eQu", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  const aLen = a.length;\n  const bLen = b.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let resultLen = 0;\n  let resultIndex = 0;\n  let resultValue = 0;\n  let resultIndex2 = 0;\n  let resultValue2 = 0;\n  let resultIndex3 = 0;\n  let resultValue3 = 0;\n  let resultIndex4 = 0;\n  let resultValue4 = 0;\n  let resultIndex5 = 0;\n  let resultValue5 = 0;\n  let resultIndex6 = 0;\n  let resultValue6 = 0;\n  let resultIndex7 = 0;\n  let resultValue7 = 0;\n  let resultIndex8 = 0;\n  let resultValue8 = 0;\n  let resultIndex9 = 0;\n  let resultValue9 = 0;\n  let resultIndex10 = 0;\n  let resultValue10 = 0;\n  let resultIndex11 = 0;\n  let resultValue11 = 0;\n  let resultIndex12 = 0;\n  let resultValue12 = 0;\n  let resultIndex13 = 0;\n  let resultValue13 = 0;\n  let resultIndex14 = 0;\n  let resultValue14 = 0;\n  let resultIndex15 = 0;\n  let resultValue15 = 0;\n  let resultIndex16 = 0;\n  let resultValue16 = 0;\n  let resultIndex17 = 0;\n  let resultValue17 = 0;\n  let resultIndex18 = 0;\n  let resultValue18 = 0;\n  let resultIndex19 = 0;\n  let resultValue19 = 0;\n  let resultIndex20 = 0;\n  let resultValue20 = 0;\n  let resultIndex21 = 0;\n  let resultValue21 = 0;\n  let resultIndex22 = 0;\n  let resultValue22 = 0;\n  let resultIndex23 = 0;\n  let resultValue23 = 0;\n  let resultIndex24 = 0;\n  let resultValue24 = 0;\n  let resultIndex25 = 0;\n  let resultValue25 = 0;\n  let resultIndex26 = 0;\n  let resultValue26 = 0;\n  let resultIndex27 = 0;\n  let resultValue27 = 0;\n  let resultIndex28 = 0;\n  let resultValue28 = 0;\n  let resultIndex29 = 0;\n  let resultValue29 = 0;\n  let resultIndex30 = 0;\n  let resultValue30 = 0;\n  let resultIndex31 = 0;\n  let resultValue31 = 0;\n  let resultIndex32 = 0;\n  let resultValue32 = 0;\n  let resultIndex33 = 0;\n  let resultValue33 = 0;\n  let resultIndex34 = 0;\n  let resultValue34 = 0;\n  let resultIndex35 = 0;\n  let resultValue35 = 0;\n  let resultIndex36 = 0;\n  let resultValue36 = 0;\n  let resultIndex37 = 0;\n  let resultValue37 = 0;\n  let resultIndex38 = 0;\n  let resultValue38 = 0;\n  let resultIndex39 = 0;\n  let resultValue39 = 0;\n  let resultIndex40 = 0;\n  let resultValue40 = 0;\n  let resultIndex41 = 0;\n  let resultValue41 = 0;\n  let resultIndex42 = 0;\n  let resultValue42 = 0;\n  let resultIndex43 = 0;\n  let resultValue43 = 0;\n  let resultIndex44 = 0;\n  let resultValue44 = 0;\n  let resultIndex45 = 0;\n  let resultValue45 = 0;\n  let resultIndex46 = 0;\n  let resultValue46 = 0;\n  let resultIndex47 = 0;\n  let resultValue47 = 0;\n  let resultIndex48 = 0;\n  let resultValue48 = 0;\n  let resultIndex49 = 0;\n  let resultValue49 = 0;\n  let resultIndex50 = 0;\n  let resultValue50 = 0;\n  let resultIndex51 = 0;\n  let resultValue51 = 0;\n  let resultIndex52 = 0;\n  let resultValue52 = 0;\n  let resultIndex53 = 0;\n  let resultValue53 = 0;\n  let resultIndex54 = 0;\n  let resultValue54 = 0;\n  let resultIndex55 = 0;\n  let resultValue55 = 0;\n  let resultIndex56 = 0;\n  let resultValue56 = 0;\n  let resultIndex57 = 0;\n  let resultValue57 = 0;\n  let resultIndex58 = 0;\n  let resultValue58 = 0;\n  let resultIndex59 = 0;\n  let resultValue59 = 0;\n  let resultIndex60 = 0;\n  let resultValue60 = 0;\n  let resultIndex61 = 0;\n  let resultValue61 = 0;\n  let resultIndex62 = 0;\n  let resultValue62 = 0;\n  let resultIndex63 = 0;\n  let resultValue63 = 0;\n  let resultIndex64 = 0;\n  let resultValue64 = 0;\n  let resultIndex65 = 0;\n  let resultValue65 = 0;\n  let resultIndex66 = 0;\n  let resultValue66 = 0;\n  let resultIndex67 = 0;\n  let resultValue67 = 0;\n  let resultIndex68 = 0;\n  let resultValue68 = 0;\n  let resultIndex69 = 0;\n  let resultValue69 = 0;\n  let resultIndex70 = 0;\n  let resultValue70 = 0;\n  let resultIndex71 = 0;\n  let resultValue71 = 0;\n  let resultIndex72 = 0;\n  let resultValue72 = 0;\n  let resultIndex73 = 0;\n  let resultValue73 = 0;\n  let resultIndex74 = 0;\n  let resultValue74 = 0;\n  let resultIndex75 = 0;\n  let resultValue75 = 0;\n  let resultIndex76 = 0;\n  let resultValue76 = 0;\n  let resultIndex77 = 0;\n  let resultValue77 = 0;\n  let resultIndex78 = 0;\n  let resultValue78 = 0;\n  let resultIndex79 = 0;\n  let resultValue79 = 0;\n  let resultIndex80 = 0;\n  let resultValue80 = 0;\n  let resultIndex81 = 0;\n  let resultValue81 = 0;\n  let resultIndex82 = 0;\n  let resultValue82 = 0;\n  let resultIndex83 = 0;\n  let resultValue83 = 0;\n  let resultIndex84 = 0;\n  let resultValue84 = 0;\n  let resultIndex85 = 0;\n  let resultValue85 = 0;\n  let resultIndex86 = 0;\n  let resultValue86 = 0;\n  let resultIndex87 = 0;\n  let resultValue87 = 0;\n  let resultIndex88 = 0;\n  let resultValue88 = 0;\n  let resultIndex89 = 0;\n  let resultValue89 = 0;\n  let resultIndex90 = 0;\n  let resultValue90 = 0;\n  let resultIndex91 = 0;\n  let resultValue91 = 0;\n  let resultIndex92 = 0;\n  let resultValue92 = 0;\n  let resultIndex93 = 0;\n  let resultValue93 = 0;\n  let resultIndex94 = 0;\n  let resultValue94 = 0;\n  let resultIndex95 = 0;\n  let resultValue95 = 0;\n  let resultIndex96 = 0;\n  let resultValue96 = 0;\n  let resultIndex97 = 0;\n  let resultValue97 = 0;\n  let resultIndex98 = 0;\n  let resultValue98 = 0;\n  let resultIndex99 = 0;\n  let resultValue99 = 0;\n  let resultIndex100 = 0;\n  let resultValue100 = 0;\n  let resultIndex101 = 0;\n  let resultValue101 = 0;\n  let resultIndex102 = 0;\n  let resultValue102 = 0;\n  let resultIndex103 = 0;\n  let resultValue103 = 0;\n  let resultIndex104 = 0;\n  let resultValue104 = 0;\n  let resultIndex105 = 0;\n  let resultValue105 = 0;\n  let resultIndex106 = 0;\n  let resultValue106 = 0;\n  let resultIndex107 = 0;\n  let resultValue107 = 0;\n  let resultIndex108 = 0;\n  let resultValue108 = 0;\n  let resultIndex109 = 0;\n  let resultValue109 = 0;\n  let resultIndex110 = 0;\n  let resultValue110 = 0;\n  let resultIndex111 = 0;\n  let resultValue111 = 0;\n  let resultIndex112 = 0;\n  let resultValue112 = 0;\n  let resultIndex113 = 0;\n  let resultValue113 = 0;\n  let resultIndex114 = 0;\n  let resultValue114 = 0;\n  let resultIndex115 = 0;\n  let resultValue115 = 0;\n  let resultIndex116 = 0;\n  let resultValue116 = 0;\n  let resultIndex117 = 0;\n  let resultValue117 = 0;\n  let resultIndex118", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n  yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n  nOt lAST.\n\n  HEre iS a leGend:\n  'O' - wHOle NoTe, laSTs Four Beats\n  'o|' - HAlf NOtE, lAstS TWo bEAts\n  '.|' - qUater NoTE, lAsts oNE beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n  yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n  nOt lAST.\n\n  HEre iS a leGend:\n  'O' - wHOle NoTe, laSTs Four Beats\n  'o|' - HAlf NOtE, lAstS TWo bEAts\n  '.|' - qUater NoTE, lAsts oNE beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const musicArray = music_string.split('|');\n  const musicArrayLength = musicArray.length;\n  let musicArrayIndex = 0;\n  let musicArrayElement = 0;\n  let musicArrayElementIndex = 0;\n  let musicArrayElementLength = 0;\n  let musicArrayElementIndexLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let musicArrayElementIndexLengthLength = 0;\n  let music", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* finD how mANy times a gIveN substring caN Be foUnD in The ORIgINal string. COunT OverlapIng casES.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* finD how mANy times a gIveN substring caN Be foUnD in The ORIgINal string. COunT OverlapIng casES.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n  >>> findSubstringInString('ab', 'ab')\n  'b'\n  >>> findSubstringInString('ab', 'aba')\n  'b'\n  >>> findSubstringInString('ab', 'abaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaab')\n  'b'\n  >>> findSubstringInString('ab', 'abaaaba')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaab')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaaba')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaab')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaaba')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaab')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaaba')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaab')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaaba')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaab')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaaba')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', 'abaaabaaabaaabaaabaaabaaabaaa')\n  'b'\n  >>> findSubstringInString('ab', '", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe', 'sIx', 'seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sNumbers = numbers.split('')\n  let sNumbersSorted = sNumbers.sort((a, b) => a - b)\n  return sNumbersSorted.join('')\n}\n\n/* \n  sTriNG is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersTriNG = (numbers) => {\n  let sNumbers = numbers.split('')\n  let sNumbersSorted = sNumbers.sort((a, b) => a - b)\n  let sNumbersTriNG = sNumbersSorted.join('')\n  return sNumbersTriNG\n}\n\n/* \n  sTriNG is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersTriNG2 = (numbers) => {\n  let sNumbers = numbers.split('')\n  let sNumbersSorted = sNumbers.sort((a, b) => a - b)\n  let sNumbersTriNG = sNumbersSorted.join('')\n  return sNumbersTriNG\n}\n\n/* \n  sTriNG is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersTriNG3 = (numbers) => {\n  let sNumbers = numbers.split('')\n  let sNumbersSorted = sNumbers.sort((a, b) => a - b)\n  let sNumbersTriNG = sNumbersSorted.join('')\n  return sNumbersTriNG\n}\n\n/* \n  sTriNG is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersTriNG4 = (numbers) => {\n  let sNumbers = numbers.split('')\n  let sNumbersSorted = sNumbers.sort((a, b) => a - b)\n  let sNumbersTriNG = sNumbersSorted.join('')\n  return sNumbersTriNG\n}\n\n/* \n  sTriNG is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersTriNG5 = (numbers) => {\n  let sNumbers = numbers.split('')\n  let sNumbersSorted = sNumbers.sort((a, b) => a - b)\n  let sNumbersTriNG = sNumbersSorted.join('')\n  return sNumbersTriNG\n}\n\n/* \n  sTriNG is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersTriNG6 = (numbers) => {\n  let sNumbers = numbers.split('')\n  let sNumbersSorted = sNumbers.sort((a, b) => a - b)\n  let sNumbersTriNG = sNumbersSorted.join('')\n  return sNumbersTriNG\n}\n\n/* \n  sTriNG is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersTriNG7 = (numbers) => {\n  let sNumbers = numbers.split('')\n  let sNumbersSorted = sNumbers.sort((a, b) => a - b)\n  let sNumbersTriNG = sNumbersSorted.join('')\n  return sNumbersTriNG\n}\n\n/* \n  sTriNG is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD Cho", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* givEn a poSItivE flOatINg poInT number, It cAN Be DEcomPosED into\n  anD integER paRt (largest inTEger sMaller Than gIveN number) and decimAls\n  (LeftOver pART alwayS smALLeR ThAN 1).\n\n  reTUrn ThE deCImaL paRT Of The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn a poSItivE flOatINg poInT number, It cAN Be DEcomPosED into\n  anD integER paRt (largest inTEger sMaller Than gIveN number) and decimAls\n  (LeftOver pART alwayS smALLeR ThAN 1).\n\n  reTUrn ThE deCImaL paRT Of The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const decimal = decimals.length? decimals.slice(0, decimals.length - 1).join('') : '';\n  const decimalPart = decimal.length? decimal : '';\n  const decimalPartsLength = decimalPart.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPart.split('');\n  const decimalPartLength = decimalParts.length;\n  const decimalParts = decimalPar", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* froM a suppLIed list oF numbers (of LenGTh at LeASt tWO) SeLEct aNd return tWO that arE the clOSesT to each\n  otheR And return thEm in ordeR (smalLer Number, larGer NumbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* froM a suppLIed list oF numbers (of LenGTh at LeASt tWO) SeLEct aNd return tWO that arE the clOSesT to each\n  otheR And return thEm in ordeR (smalLer Number, larGer NumbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closestElements = [];\n  const closestElementsNumber = [];\n  const closestElementsNumber2 = [];\n  const closestElementsNumber3 = [];\n  const closestElementsNumber4 = [];\n  const closestElementsNumber5 = [];\n  const closestElementsNumber6 = [];\n  const closestElementsNumber7 = [];\n  const closestElementsNumber8 = [];\n  const closestElementsNumber9 = [];\n  const closestElementsNumber10 = [];\n  const closestElementsNumber11 = [];\n  const closestElementsNumber12 = [];\n  const closestElementsNumber13 = [];\n  const closestElementsNumber14 = [];\n  const closestElementsNumber15 = [];\n  const closestElementsNumber16 = [];\n  const closestElementsNumber17 = [];\n  const closestElementsNumber18 = [];\n  const closestElementsNumber19 = [];\n  const closestElementsNumber20 = [];\n  const closestElementsNumber21 = [];\n  const closestElementsNumber22 = [];\n  const closestElementsNumber23 = [];\n  const closestElementsNumber24 = [];\n  const closestElementsNumber25 = [];\n  const closestElementsNumber26 = [];\n  const closestElementsNumber27 = [];\n  const closestElementsNumber28 = [];\n  const closestElementsNumber29 = [];\n  const closestElementsNumber30 = [];\n  const closestElementsNumber31 = [];\n  const closestElementsNumber32 = [];\n  const closestElementsNumber33 = [];\n  const closestElementsNumber34 = [];\n  const closestElementsNumber35 = [];\n  const closestElementsNumber36 = [];\n  const closestElementsNumber37 = [];\n  const closestElementsNumber38 = [];\n  const closestElementsNumber39 = [];\n  const closestElementsNumber40 = [];\n  const closestElementsNumber41 = [];\n  const closestElementsNumber42 = [];\n  const closestElementsNumber43 = [];\n  const closestElementsNumber44 = [];\n  const closestElementsNumber45 = [];\n  const closestElementsNumber46 = [];\n  const closestElementsNumber47 = [];\n  const closestElementsNumber48 = [];\n  const closestElementsNumber49 = [];\n  const closestElementsNumber50 = [];\n  const closestElementsNumber51 = [];\n  const closestElementsNumber52 = [];\n  const closestElementsNumber53 = [];\n  const closestElementsNumber54 = [];\n  const closestElementsNumber55 = [];\n  const closestElementsNumber56 = [];\n  const closestElementsNumber57 = [];\n  const closestElementsNumber58 = [];\n  const closestElementsNumber59 = [];\n  const closestElementsNumber60 = [];\n  const closestElementsNumber61 = [];\n  const closestElementsNumber62 = [];\n  const closestElementsNumber63 = [];\n  const closestElementsNumber64 = [];\n  const closestElementsNumber65 = [];\n  const closestElementsNumber66 = [];\n  const closestElementsNumber67 = [];\n  const closestElementsNumber68 = [];\n  const closestElementsNumber69 = [];\n  const closestElementsNumber70 = [];\n  const closestElementsNumber71 = [];\n  const closestElementsNumber72 = [];\n  const closestElementsNumber73 = [];\n  const closestElementsNumber74 = [];\n  const closestElementsNumber75 = [];\n  const closestElementsNumber76 = [];\n  const closestElementsNumber77 = [];\n  const closestElementsNumber78 = [];\n  const closestElementsNumber79 = [];\n  const closestElementsNumber80 = [];\n  const closestElementsNumber81 = [];\n  const closestElementsNumber82 = [];\n  const closestElementsNumber83 = [];\n  const closestElementsNumber84 = [];\n  const closestElementsNumber85 = [];\n  const closestElementsNumber86 = [];\n  const closestElementsNumber87 = [];\n  const closestElementsNumber88 = [];\n  const closestElementsNumber89 = [];\n  const closestElementsNumber90 = [];\n  const closestElementsNumber91 = [];\n  const closestElementsNumber92 = [];\n  const closestElementsNumber93 = [];\n  const closestElementsNumber94 = [];\n  const closestElementsNumber95 = [];\n  const closestElementsNumber96 = [];\n  const closestElementsNumber97 = [];\n  const closestElementsNumber98 = [];\n  const closestElementsNumber99 = [];\n  const closestElementsNumber100 = [];\n  const closestElementsNumber101 = [];\n  const closestElementsNumber102 = [];\n  const closestElementsNumber103 = [];\n  const closestElementsNumber104 = [];\n  const closestElementsNumber105 = [];\n  const closestElementsNumber106 = [];\n  const closestElementsNumber107 = [];\n  const closestElementsNumber108 = [];\n  const closestElementsNumber109 = [];\n  const closestElementsNumber110 = [];\n  const closestElementsNumber111 = [];\n  const closestElementsNumber112 = [];\n  const closestElementsNumber113 = [];\n  const closestElementsNumber114 = [];\n  const closestElementsNumber115 = [];\n  const closestElementsNumber116 = [];\n  const closestElementsNumber117 = [];\n  const closestElementsNumber118 = [];\n  const closestElementsNumber119 = [];\n  const closestElementsNumber120 = [];\n  const closestElementsNumber121 = [];\n  const closestElementsNumber122 = [];\n  const closestElementsNumber123 = [];\n  const closestElementsNumber124 = [];\n  const closestElementsNumber125 = [];\n  const closestElementsNumber126 = [];\n  const closestElementsNumber127 = [];\n  const closestElementsNumber128 = [];\n  const closestElementsNumber129 = [];\n  const closestElementsNumber130 = [];\n  const closestElementsNumber131 = [];\n  const closestElementsNumber132 = [];\n  const closestElementsNumber133 = [];\n  const closestElementsNumber134 = [];\n  const closestElementsNumber135 = [];\n  const closestElementsNumber136 = [];\n  const closestElementsNumber137 = [];\n  const closestElementsNumber138 = [];\n  const closestElementsNumber139 = [];\n  const closestElementsNumber140 = [];\n  const closestElementsNumber141 = [];\n  const closestElementsNumber142 = [];\n  const closestElementsNumber143 = [];\n  const closestElementsNumber144 = [];\n  const closestElementsNumber145 = [];\n  const closestElementsNumber146 = [];\n  const closestElementsNumber147 = [];\n  const closestElementsNumber148 = [];\n  const closestElementsNumber149 = [];\n  const closestElementsNumber150 = [];\n  const closestElementsNumber151 = [];\n  const closestElementsNumber152 = [];\n  const closestElementsNumber153 = [];\n  const closestElementsNumber154 = [];\n  const closestElementsNumber155 = [];\n  const closestElementsNumber156 = [];\n  const closestElementsNumber157 = [];\n  const closestElementsNumber158 = [];\n  const closestElementsNumber159 = [];\n  const closestElementsNumber160 = [];\n  const closestElementsNumber161 = [];\n  const closestElementsNumber162 = [];\n  const closestElementsNumber163 = [];\n  const closestElementsNumber164 = [];\n  const closestElementsNumber165 = [];\n  const closestElementsNumber166 = [];\n  const closestElementsNumber167 = [];\n  const closestElementsNumber168 = [];\n  const closestElementsNumber169 = [];\n  const closestElementsNumber170 = [];\n", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [atLeast, twoElms, elms, atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = numbers;\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive] = [atLeastOne, elmOne, atLeastTwo, elmTwo, atLeastThree, elmThree, atLeastFour, elmFour, atLeastFive, elmFive];\n  const [atLeastOne, elmOne, atLeast", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* filTer giVEn list of Any PytHOn values onLy FOr iNTEgERs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* filTer giVEn list of Any PytHOn values onLy FOr iNTEgERs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value)\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterIntegers(['a', 3.14, 5])\n * [3.14]\n * >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterFloats = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (Number.isFinite(value)) {\n      result.push(value)\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterFloats(['a', 3.14, 5])\n * [3.14]\n * >>> filterFloats([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterStrings = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof String) {\n      result.push(value)\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterStrings(['a', 3.14, 5])\n * [3.14]\n * >>> filterStrings([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterBooleans = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof Boolean) {\n      result.push(value)\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterBooleans(['a', 3.14, 5])\n * [3.14]\n * >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterObjects = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof Object) {\n      result.push(value)\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterObjects(['a', 3.14, 5])\n * [3.14]\n * >>> filterObjects([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterArrays = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value)\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterArrays(['a', 3.14, 5])\n * [3.14]\n * >>> filterArrays([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterSets = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof Set) {\n      result.push(value)\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterSets(['a', 3.14, 5])\n * [3.14]\n * >>> filterSets([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterMaps = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof Map) {\n      result.push(value)\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterMaps(['a', 3.14, 5])\n * [3.14]\n * >>> filterMaps([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterSetMaps = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof Map) {\n      value.forEach((value, key) => {\n        if (key === '__key__') {\n          result.push(value)\n        }\n      })\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterSetMaps(['a', 3.14, 5])\n * [3.14]\n * >>> filterSetMaps([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterSetMapsKeys = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof Map) {\n      value.forEach((value, key) => {\n        if (key === '__key__') {\n          result.push(key)\n        }\n      })\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterSetMapsKeys(['a', 3.14, 5])\n * [3.14]\n * >>> filterSetMapsKeys([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterSetMapsValuesKeys = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof Map) {\n      value.forEach((value, key) => {\n        if (key === '__key__') {\n          result.push(key)\n        }\n      })\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterSetMapsValuesKeys(['a', 3.14, 5])\n * [3.14]\n * >>> filterSetMapsValuesKeys([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterSetMapsValuesValues = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof Map) {\n      value.forEach((value, key) => {\n        if (key === '__key__') {\n          result.push(key)\n        }\n      })\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterSetMapsValuesValues(['a', 3.14, 5])\n * [3.14]\n * >>> filterSetMapsValuesValues([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterSetMapsValuesKeysValues = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof Map) {\n      value.forEach((value, key) => {\n        if (key === '__key__') {\n          result.push(key)\n        }\n      })\n    }\n  })\n  return result\n}\n\n/**\n * Filter out any PytHOn values onLy FOr iNTEgERs\n * >>> filterSetMapsValuesKeysValues(['a', 3.14, 5])\n * [3.14]\n * >>> filterSetMapsValuesKeysValues([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filterSetMapsValuesValuesKeysValues = (values) => {\n  const result = []\n  values.forEach((value) => {\n    if (value instanceof Map) {\n      value.forEach((value, key) => {\n        if (key === '__key__') {\n          result.push(key)\n        }\n      })\n", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    len += string.charCodeAt(i).length;\n  }\n  return len;\n};\n\n/**\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth oF giVen string\n * retUrn leNGth o", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* for A giveN NumbEr n, fInd THe laRgESt nUMBeR That DivIDes n evenLy, smalLEr tHan n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* for A giveN NumbEr n, fInd THe laRgESt nUMBeR That DivIDes n evenLy, smalLEr tHan n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let div = 1;\n  let rem = 0;\n  let rem2 = 1;\n  let rem3 = 1;\n  let rem4 = 1;\n  let rem5 = 1;\n  let rem6 = 1;\n  let rem7 = 1;\n  let rem8 = 1;\n  let rem9 = 1;\n  let rem10 = 1;\n  let rem11 = 1;\n  let rem12 = 1;\n  let rem13 = 1;\n  let rem14 = 1;\n  let rem15 = 1;\n  let rem16 = 1;\n  let rem17 = 1;\n  let rem18 = 1;\n  let rem19 = 1;\n  let rem20 = 1;\n  let rem21 = 1;\n  let rem22 = 1;\n  let rem23 = 1;\n  let rem24 = 1;\n  let rem25 = 1;\n  let rem26 = 1;\n  let rem27 = 1;\n  let rem28 = 1;\n  let rem29 = 1;\n  let rem30 = 1;\n  let rem31 = 1;\n  let rem32 = 1;\n  let rem33 = 1;\n  let rem34 = 1;\n  let rem35 = 1;\n  let rem36 = 1;\n  let rem37 = 1;\n  let rem38 = 1;\n  let rem39 = 1;\n  let rem40 = 1;\n  let rem41 = 1;\n  let rem42 = 1;\n  let rem43 = 1;\n  let rem44 = 1;\n  let rem45 = 1;\n  let rem46 = 1;\n  let rem47 = 1;\n  let rem48 = 1;\n  let rem49 = 1;\n  let rem50 = 1;\n  let rem51 = 1;\n  let rem52 = 1;\n  let rem53 = 1;\n  let rem54 = 1;\n  let rem55 = 1;\n  let rem56 = 1;\n  let rem57 = 1;\n  let rem58 = 1;\n  let rem59 = 1;\n  let rem60 = 1;\n  let rem61 = 1;\n  let rem62 = 1;\n  let rem63 = 1;\n  let rem64 = 1;\n  let rem65 = 1;\n  let rem66 = 1;\n  let rem67 = 1;\n  let rem68 = 1;\n  let rem69 = 1;\n  let rem70 = 1;\n  let rem71 = 1;\n  let rem72 = 1;\n  let rem73 = 1;\n  let rem74 = 1;\n  let rem75 = 1;\n  let rem76 = 1;\n  let rem77 = 1;\n  let rem78 = 1;\n  let rem79 = 1;\n  let rem80 = 1;\n  let rem81 = 1;\n  let rem82 = 1;\n  let rem83 = 1;\n  let rem84 = 1;\n  let rem85 = 1;\n  let rem86 = 1;\n  let rem87 = 1;\n  let rem88 = 1;\n  let rem89 = 1;\n  let rem90 = 1;\n  let rem91 = 1;\n  let rem92 = 1;\n  let rem93 = 1;\n  let rem94 = 1;\n  let rem95 = 1;\n  let rem96 = 1;\n  let rem97 = 1;\n  let rem98 = 1;\n  let rem99 = 1;\n  let rem100 = 1;\n  let rem101 = 1;\n  let rem102 = 1;\n  let rem103 = 1;\n  let rem104 = 1;\n  let rem105 = 1;\n  let rem106 = 1;\n  let rem107 = 1;\n  let rem108 = 1;\n  let rem109 = 1;\n  let rem110 = 1;\n  let rem111 = 1;\n  let rem112 = 1;\n  let rem113 = 1;\n  let rem114 = 1;\n  let rem115 = 1;\n  let rem116 = 1;\n  let rem117 = 1;\n  let rem118 = 1;\n  let rem119 = 1;\n  let rem120 = 1;\n  let rem121 = 1;\n  let rem122 = 1;\n  let rem123 = 1;\n  let rem124 = 1;\n  let rem125 = 1;\n  let rem126 = 1;\n  let rem127 = 1;\n  let rem128 = 1;\n  let rem129 = 1;\n  let rem130 = 1;\n  let rem131 = 1;\n  let rem132 = 1;\n  let rem133 = 1;\n  let rem134 = 1;\n  let rem135 = 1;\n  let rem136 = 1;\n  let rem137 = 1;\n  let rem138 = 1;\n  let rem139 = 1;\n  let rem140 = 1;\n  let rem141 = 1;\n  let rem142 = 1;\n  let rem143 = 1;\n  let rem144 = 1;\n  let rem145 = 1;\n  let rem146 = 1;\n  let rem147 = 1;\n  let rem148 = 1;\n  let rem149 = 1;\n  let rem150 = 1;\n  let rem151 = 1;\n  let rem152 = 1;\n  let rem153 = 1;\n  let rem154 = 1;\n  let rem155 = 1;\n  let rem156 = 1;\n  let rem157 = 1;\n  let rem158 = 1;\n  let rem159 = 1;\n  let rem160 = 1;\n  let rem161 = 1;\n  let rem162 = 1;\n  let rem163 = 1;\n  let rem164 = 1;\n  let rem165 = 1;\n  let rem166 = 1;\n  let rem167 = 1;\n  let rem168 = 1;\n  let rem169 = 1;\n  let rem170 = 1;\n  let rem171 = 1;\n  let rem172 = 1;\n  let rem173 = 1;\n  let rem174 = 1;\n  let rem175 = 1;\n  let rem176 = 1;\n  let rem177 = 1;\n  let rem178 = 1;\n  let rem179 = 1;\n  let rem180 = 1;\n  let rem181 = 1;\n  let rem182 = 1;\n  let rem183 = 1;\n  let rem184 = 1;\n  let rem185 = 1;\n  let rem186 = 1;\n  let rem187 = 1;\n  let rem188 = 1;\n  let rem189 = 1;\n  let rem190 = 1;\n  let rem191 = 1;\n  let rem192 = 1;\n  let rem193 = 1;\n  let rem194 = 1;\n  let rem195 = 1;\n  let rem196 = 1;\n  let rem197 = 1;\n  let rem198 = 1;\n  let rem199 = 1;\n  let rem200 = 1;\n  let rem201 = 1;\n  let rem202 = 1;\n  let rem203 = 1;\n  let rem204 = 1;\n  let rem205 = 1;\n  let rem206 = 1;\n  let rem207 = 1;\n  let rem208 = 1;\n  let rem209 = 1;\n  let rem210 = 1;\n  let rem211 = 1;\n  let rem212 = 1;\n  let rem213 = 1;\n  let rem214 = 1;\n  let rem215 = 1;\n  let rem216 = 1;\n  let rem217 = 1;\n  let rem218 = 1;\n  let rem219 = 1;\n  let rem220 = 1;\n  let rem221 = 1;\n  let rem222 = 1;\n  let rem223 = 1;\n  let rem224 = 1;\n  let rem225 = 1;\n  let rem226 = 1;\n  let rem227 = 1;\n  let rem228 = 1;\n  let rem229 = 1;\n  let rem230 = 1;\n  let rem231 = 1;\n  let rem232 = 1;\n  let rem233 = 1;\n  let rem234 = 1;\n  let rem235 = 1;\n  let rem236 = 1;\n  let rem237 = 1;\n  let rem238 = 1;\n  let rem239 = 1;\n  let rem240 = 1;\n  let rem241 = 1;\n  let rem242 = 1;\n  let rem243 = 1;\n  let rem244 = 1;\n  let rem245 = 1;\n  let rem246 = 1;\n  let rem247 = 1;\n  let rem248 = 1;\n  let rem249 = 1;\n  let rem250 = 1;\n  let rem251 = 1;\n  let rem252 = 1;\n  let rem253 = 1;\n  let rem254 = 1;\n  let rem255 = 1;\n  let rem256 = 1;\n  let rem257 = 1;\n  let rem258 = 1;\n  let rem259 = 1;\n  let rem260 = 1;\n  let rem261 = 1;\n  let rem262 = 1;\n  let rem263 = 1;\n  let rem264 = 1;\n  let rem265 = 1;\n  let rem266 = 1;\n  let rem267 = 1;\n  let rem268 = 1;\n  let rem269 = 1;\n  let rem270 = 1;\n  let rem271 = 1;\n  let rem272 = 1;\n  let rem273 = 1;\n  let rem274 = 1;\n  let rem275 = 1;\n  let rem276 = 1;\n  let rem277 = 1;\n  let rem278 = 1;\n  let rem279 = 1;\n  let ", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let ret = []\n  let factors = []\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let tst\n  let tst2\n  let tst3\n  let tst4\n  let tst5\n  let tst6\n  let tst7\n  let tst8\n  let tst9\n  let tst10\n  let tst11\n  let tst12\n  let tst13\n  let tst14\n  let tst15\n  let tst16\n  let tst17\n  let tst18\n  let tst19\n  let tst20\n  let tst21\n  let tst22\n  let tst23\n  let tst24\n  let tst25\n  let tst26\n  let tst27\n  let tst28\n  let tst29\n  let tst30\n  let tst31\n  let tst32\n  let tst33\n  let tst34\n  let tst35\n  let tst36\n  let tst37\n  let tst38\n  let tst39\n  let tst40\n  let tst41\n  let tst42\n  let tst43\n  let tst44\n  let tst45\n  let tst46\n  let tst47\n  let tst48\n  let tst49\n  let tst50\n  let tst51\n  let tst52\n  let tst53\n  let tst54\n  let tst55\n  let tst56\n  let tst57\n  let tst58\n  let tst59\n  let tst60\n  let tst61\n  let tst62\n  let tst63\n  let tst64\n  let tst65\n  let tst66\n  let tst67\n  let tst68\n  let tst69\n  let tst70\n  let tst71\n  let tst72\n  let tst73\n  let tst74\n  let tst75\n  let tst76\n  let tst77\n  let tst78\n  let tst79\n  let tst80\n  let tst81\n  let tst82\n  let tst83\n  let tst84\n  let tst85\n  let tst86\n  let tst87\n  let tst88\n  let tst89\n  let tst90\n  let tst91\n  let tst92\n  let tst93\n  let tst94\n  let tst95\n  let tst96\n  let tst97\n  let tst98\n  let tst99\n  let tst100\n  let tst101\n  let tst102\n  let tst103\n  let tst104\n  let tst105\n  let tst106\n  let tst107\n  let tst108\n  let tst109\n  let tst110\n  let tst111\n  let tst112\n  let tst113\n  let tst114\n  let tst115\n  let tst116\n  let tst117\n  let tst118\n  let tst119\n  let tst120\n  let tst121\n  let tst122\n  let tst123\n  let tst124\n  let tst125\n  let tst126\n  let tst127\n  let tst128\n  let tst129\n  let tst130\n  let tst131\n  let tst132\n  let tst133\n  let tst134\n  let tst135\n  let tst136\n  let tst137\n  let tst138\n  let tst139\n  let tst140\n  let tst141\n  let tst142\n  let tst143\n  let tst144\n  let tst145\n  let tst146\n  let tst147\n  let tst148\n  let tst149\n  let tst150\n  let tst151\n  let tst152\n  let tst153\n  let tst154\n  let tst155\n  let tst156\n  let tst157\n  let tst158\n  let tst159\n  let tst160\n  let tst161\n  let tst162\n  let tst163\n  let tst164\n  let tst165\n  let tst166\n  let tst167\n  let tst168\n  let tst169\n  let tst170\n  let tst171\n  let tst172\n  let tst173\n  let tst174\n  let tst175\n  let tst176\n  let tst177\n  let tst178\n  let tst179\n  let tst180\n  let tst181\n  let tst182\n  let tst183\n  let tst184\n  let tst185\n  let tst186\n  let tst187\n  let tst188\n  let tst189\n  let tst190\n  let tst191\n  let tst192\n  let tst193\n  let tst194\n  let tst195\n  let tst196\n  let tst197\n  let tst198\n  let tst199\n  let tst200\n  let tst201\n  let tst202\n  let tst203\n  let tst204\n  let tst205\n  let tst206\n  let tst207\n  let tst208\n  let tst209\n  let tst210\n  let tst211\n  let tst212\n  let tst213\n  let tst214\n  let tst215\n  let tst216\n  let tst217\n  let tst218\n  let tst219\n  let tst220\n  let tst221\n  let tst222\n  let tst223\n  let tst224\n  let tst225\n  let tst226\n  let tst227\n  let tst228\n  let tst229\n  let tst230\n  let tst231\n  let tst232\n  let tst233\n  let tst234\n  let tst235\n  let tst236\n  let tst237\n  let tst238\n  let tst239\n  let tst240\n  let tst241\n  let tst242\n  let tst243\n  let tst244\n  let tst245\n  let tst246\n  let tst247\n  let tst248\n  let tst249\n  let tst250\n  let tst251\n  let tst252\n  let tst253\n  let tst254\n  let tst255\n  let tst256\n  let tst257", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* froM a list of iNTegeRs, rEmoVE all ElEMenTS ThAT occUr mORe than oNce.\n  KeeP OrdEr of elementS Left tHe same As in the InpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* froM a list of iNTegeRs, rEmoVE all ElEMenTS ThAT occUr mORe than oNce.\n  KeeP OrdEr of elementS Left tHe same As in the InpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set()\n  numbers.forEach(number => {\n    if (set.has(number)) {\n      set.delete(number)\n    } else {\n      set.add(number)\n    }\n  })\n  return Array.from(set)\n}\n\n// --- HELPER FUNCTIONS ---\n\n// --- EXPORTS ---\n\nmodule.exports = {\n  add,\n  addAll,\n  addAllToSet,\n  addAllToSetWith,\n  addAllToSetWithMultiple,\n  addAllToSetWithMultipleWith,\n  addAllToSetWithMultipleWithMultiple,\n  addAllToSetWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultiple,\n  addAllToSetWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultiple,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWithMultipleWith,\n  addAllToSetWithMultipleWithMultipleWithMultipleWith", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* for A giveN string, Flip LowErcASe chArACteRS To UPperCasE And uppeRcase tO LowErcase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* for A giveN string, Flip LowErcASe chArACteRS To UPperCasE And uppeRcase tO LowErcase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const chars = string.toLowerCase().split('');\n  let newString = '';\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += char.toUpperCase();\n    }\n  }\n  return newString;\n};\n\n/**\n * Given a string, return its uppercase version.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n * Given a string, return its lowercase version.\n * For a string \"Hello\", return \"hello\".\n */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"H\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"h\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"Hello\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first lowercase letter.\n * For a string \"Hello\", return \"hello\".\n */\nconst firstLowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n * Given a string, return its first uppercase letter.\n * For a string \"Hello\", return \"HELLO\".\n */\nconst firstUppercase = (string) => {\n  return string.charAt(0", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), [])\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['x', 'y', 'z'])\n  'xyz'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  >>> conCatenate([1,2,3], ',')\n  '1,2,3'\n  */\nconst conCatenate = (strings, separator) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), []).join(separator)\n}\n\n/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> conCatenate", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr([], 'b')\n  []\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByPrefixOr = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) || string.startsWith(prefix+'-'))\n}\n\n/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefixOr(['", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* you'Re givEN a list of DepOsiT And wItHDraWAL operations oN A banK acCOunt thaT startS WitH\n  zero balance. Your taSK is to Detect If at aNy pOint the balance of AccOunt FalllS BElow zeRo, aND\n  At THaT POiNT fuNcTioN ShoUld return TRUe. otheRwisE it sHoULd return fAlSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* you'Re givEN a list of DepOsiT And wItHDraWAL operations oN A banK acCOunt thaT startS WitH\n  zero balance. Your taSK is to Detect If at aNy pOint the balance of AccOunt FalllS BElow zeRo, aND\n  At THaT POiNT fuNcTioN ShoUld return TRUe. otheRwisE it sHoULd return fAlSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let operation;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n  let operationCount;\n  let operationIndex;\n", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*REtuRn onlY PosiTivE nuMBers in ThE list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn onlY PosiTivE nuMBers in ThE list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] >= 0) {\n      res.push(l[i]);\n      i++;\n    } else {\n      res.push(0);\n      i++;\n    }\n  }\n  while (j < l) {\n    if (l[j] >= 0) {\n      res.push(l[j]);\n      j++;\n    } else {\n      res.push(0);\n      j++;\n    }\n  }\n  while (k < l) {\n    if (l[k] >= 0) {\n      res.push(l[k]);\n      k++;\n    } else {\n      res.push(0);\n      k++;\n    }\n  }\n  return res;\n};\n\n/**\n * getNegative\n * getNegative([-1, 2, -4, 5, 6])\n * [-5, -4, -3, 2, -1, 1]\n * getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [-5, -4, -3, 2, -1, 1]\n */\nconst getNegative = (l) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n      i++;\n    } else {\n      res.push(0);\n      i++;\n    }\n  }\n  while (j < l) {\n    if (l[j] < 0) {\n      res.push(l[j]);\n      j++;\n    } else {\n      res.push(0);\n      j++;\n    }\n  }\n  while (k < l) {\n    if (l[k] < 0) {\n      res.push(l[k]);\n      k++;\n    } else {\n      res.push(0);\n      k++;\n    }\n  }\n  return res;\n};\n\n/**\n * getPositiveOrZero\n * getPositiveOrZero([-1, 2, -4, 5, 6])\n * [-5, -4, -3, 2, -1, 1]\n * getPositiveOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [-5, -4, -3, 2, -1, 1]\n */\nconst getPositiveOrZero = (l) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] >= 0) {\n      res.push(l[i]);\n      i++;\n    } else {\n      res.push(0);\n      i++;\n    }\n  }\n  while (j < l) {\n    if (l[j] >= 0) {\n      res.push(l[j]);\n      j++;\n    } else {\n      res.push(0);\n      j++;\n    }\n  }\n  while (k < l) {\n    if (l[k] >= 0) {\n      res.push(l[k]);\n      k++;\n    } else {\n      res.push(0);\n      k++;\n    }\n  }\n  return res;\n};\n\n/**\n * getNegativeOrZero\n * getNegativeOrZero([-1, 2, -4, 5, 6])\n * [-5, -4, -3, 2, -1, 1]\n * getNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [-5, -4, -3, 2, -1, 1]\n */\nconst getNegativeOrZero = (l) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n      i++;\n    } else {\n      res.push(0);\n      i++;\n    }\n  }\n  while (j < l) {\n    if (l[j] < 0) {\n      res.push(l[j]);\n      j++;\n    } else {\n      res.push(0);\n      j++;\n    }\n  }\n  while (k < l) {\n    if (l[k] < 0) {\n      res.push(l[k]);\n      k++;\n    } else {\n      res.push(0);\n      k++;\n    }\n  }\n  return res;\n};\n\n/**\n * getPositiveOrZeroOrNegative\n * getPositiveOrZeroOrNegative([-1, 2, -4, 5, 6])\n * [-5, -4, -3, 2, -1, 1]\n * getPositiveOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [-5, -4, -3, 2, -1, 1]\n */\nconst getPositiveOrZeroOrNegative = (l) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] >= 0) {\n      res.push(l[i]);\n      i++;\n    } else {\n      res.push(0);\n      i++;\n    }\n  }\n  while (j < l) {\n    if (l[j] >= 0) {\n      res.push(l[j]);\n      j++;\n    } else {\n      res.push(0);\n      j++;\n    }\n  }\n  while (k < l) {\n    if (l[k] >= 0) {\n      res.push(l[k]);\n      k++;\n    } else {\n      res.push(0);\n      k++;\n    }\n  }\n  return res;\n};\n\n/**\n * getNegativeOrZeroOrNegative\n * getNegativeOrZeroOrNegative([-1, 2, -4, 5, 6])\n * [-5, -4, -3, 2, -1, 1]\n * getNegativeOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [-5, -4, -3, 2, -1, 1]\n */\nconst getNegativeOrZeroOrNegative = (l) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n      i++;\n    } else {\n      res.push(0);\n      i++;\n    }\n  }\n  while (j < l) {\n    if (l[j] < 0) {\n      res.push(l[j]);\n      j++;\n    } else {\n      res.push(0);\n      j++;\n    }\n  }\n  while (k < l) {\n    if (l[k] < 0) {\n      res.push(l[k]);\n      k++;\n    } else {\n      res.push(0);\n      k++;\n    }\n  }\n  return res;\n};\n\n/**\n * getPositiveOrZeroOrNegativeOrZero\n * getPositiveOrZeroOrNegativeOrZero([-1, 2, -4, 5, 6])\n * [-5, -4, -3, 2, -1, 1]\n * getPositiveOrZeroOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [-5, -4, -3, 2, -1, 1]\n */\nconst getPositiveOrZeroOrNegativeOrZero = (l) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] >= 0) {\n      res.push(l[i]);\n      i++;\n    } else {\n      res.push(0);\n      i++;\n    }\n  }\n  while (j < l) {\n    if (l[j] >= 0) {\n      res.push(l[j]);\n      j++;\n    } else {\n      res.push(0);\n      j++;\n    }\n  }\n  while (k < l) {\n    if (l[k] >= 0) {\n      res.push(l[k]);\n      k++;\n    } else {\n      res.push(0);\n      k++;\n    }\n  }\n  return res;\n};\n\n/**\n * getPositiveOrZeroOrNegativeOrZeroOrNegative\n * getPositiveOrZeroOrNegativeOrZeroOrNegative([-1, 2, -4, 5, 6])\n * [-5, -4, -3, 2, -1, 1]\n * getPositiveOrZeroOrNegativeOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [-5, -4, -3, 2, -1, 1]\n */\nconst getPositive", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return true;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return true;\n  if (n!== Math.floor(n)) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeOrZero = (n) => {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return true;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return true;\n  if (n!== Math.floor(n)) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrimeOrZero(6)\n  true\n  >>> isPrimeOrZero(101)\n  false\n  >>> isPrimeOrZero(11)\n  false\n  >>> isPrimeOrZero(13441)\n  false\n  >>> isPrimeOrZero(61)\n  false\n  >>> isPrimeOrZero(4)\n  false\n  >>> isPrimeOrZero(1)\n  false\n  */\nconst isPrimeOrZeroOrOne = (n) => {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return true;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return true;\n  if (n!== Math.floor(n)) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrimeOrZeroOrOne(6)\n  true\n  >>> isPrimeOrZeroOrOne(101)\n  false\n  >>> isPrimeOrZeroOrOne(11)\n  false\n  >>> isPrimeOrZeroOrOne(13441)\n  false\n  >>> isPrimeOrZeroOrOne(61)\n  false\n  >>> isPrimeOrZeroOrOne(4)\n  false\n  >>> isPrimeOrZeroOrOne(1)\n  false\n  */\nconst isPrimeOrZeroOrOneOrZero = (n) => {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return true;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return true;\n  if (n!== Math.floor(n)) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrimeOrZeroOrOneOrZero(6)\n  true\n  >>> isPrimeOrZeroOrOneOrZero(101)\n  false\n  >>> isPrimeOrZeroOrOneOrZero(11)\n  false\n  >>> isPrimeOrZeroOrOneOrZero(13441)\n  false\n  >>> isPrimeOrZeroOrOneOrZero(61)\n  false\n  >>> isPrimeOrZeroOrOneOrZero(4)\n  false\n  >>> isPrimeOrZeroOrOneOrZero(1)\n  false\n  */\nconst isPrimeOrZeroOrOneOrZeroOrOne = (n) => {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return true;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return true;\n  if (n!== Math.floor(n)) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(6)\n  true\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(101)\n  false\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(11)\n  false\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(13441)\n  false\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(61)\n  false\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(4)\n  false\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(1)\n  false\n  */\nconst isPrimeOrZeroOrOneOrZeroOrOneOrZero = (n) => {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return true;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return true;\n  if (n!== Math.floor(n)) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(6)\n  true\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(101)\n  false\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(11)\n  false\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(13441)\n  false\n  >>> isPrimeOrZeroOrOneOrZeroOrOne(61)\n  false\n  >>> isPrimeOrZeroOrOneOrZeroOr", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nCOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nCOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.reduce((prev, item, index) => {\n    return prev + item * Math.pow(xs[index], index);\n  }, 0);\n  return Math.sign(zero)? zero : Math.sqrt(zero);\n}\n\n/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.reduce((prev, item, index) => {\n    return prev + item * Math.pow(xs[index], index);\n  }, 0);\n  return Math.sign(zero)? zero : Math.sqrt(zero);\n}\n\n/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.reduce((prev, item, index) => {\n    return prev + item * Math.pow(xs[index], index);\n  }, 0);\n  return Math.sign(zero)? zero : Math.sqrt(zero);\n}\n\n/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.reduce((prev, item, index) => {\n    return prev + item * Math.pow(xs[index], index);\n  }, 0);\n  return Math.sign(zero)? zero : Math.sqrt(zero);\n}\n\n/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theR", "passed": 1}
{"task_id": "JavaScript/33", "prompt": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the IndiciES thAt are not divISible By three, whilE its vAluEs at the inDicIes tHat arE DIvisibLe bY three ARe EQuAL\n  To THe vAlUes OF thE coRREsPondIng iNdicIeS Of l, bUt SortED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the IndiciES thAt are not divISible By three, whilE its vAluEs at the inDicIes tHat arE DIvisibLe bY three ARe EQuAL\n  To THe vAlUes OF thE coRREsPondIng iNdicIeS Of l, bUt SortED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 3);\n};\n\n/**\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 4);\n};\n\n/**\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 5);\n};\n\n/**\n  >>> sortSixth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 6);\n};\n\n/**\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventh = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 7);\n};\n\n/**\n  >>> sortEighth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEighth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 8);\n};\n\n/**\n  >>> sortNinth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNinth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 9);\n};\n\n/**\n  >>> sortTenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTenth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 10);\n};\n\n/**\n  >>> sortEleventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEleventh = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 11);\n};\n\n/**\n  >>> sortTwelfth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwelfth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 12);\n};\n\n/**\n  >>> sortThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirteenth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 13);\n};\n\n/**\n  >>> sortFourteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourteenth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 14);\n};\n\n/**\n  >>> sortFifteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifteenth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 15);\n};\n\n/**\n  >>> sortSixteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixteenth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 16);\n};\n\n/**\n  >>> sortSeventeenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventeenth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 17);\n};\n\n/**\n  >>> sortEighteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEighteenth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 18);\n};\n\n/**\n  >>> sortNineteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNineteenth = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 19);\n};\n\n/**\n  >>> sortTwentyFirst([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyFirst = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 20);\n};\n\n/**\n  >>> sortTwentySeconds([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentySeconds = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 21);\n};\n\n/**\n  >>> sortTwentyThirds([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyThirds = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 22);\n};\n\n/**\n  >>> sortTwentyFourths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyFourths = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 23);\n};\n\n/**\n  >>> sortTwentyFifths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyFifths = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 24);\n};\n\n/**\n  >>> sortTwentySixths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentySixths = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 25);\n};\n\n/**\n  >>> sortTwentySevenths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentySevenths = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 26);\n};\n\n/**\n  >>> sortTwentyEighths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyEighths = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 27);\n};\n\n/**\n  >>> sortTwentyNinths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyNinths = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 28);\n};\n\n/**\n  >>> sortTwentyTenths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyTenths = (l) => {\n  const l = l.sort((a, b) => a - b);\n  return l.slice(0, 29);\n", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSort = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\n/*\n  >>> uniqueSort([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortBy = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  }).filter((v) => {\n    return seen[v]\n  })\n}\n\n/*\n  >>> uniqueSortBy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDesc = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  }).filter((v) => {\n    return seen[v]\n  }).reverse()\n}\n\n/*\n  >>> uniqueSortByDesc([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDescBy = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  }).filter((v) => {\n    return seen[v]\n  }).reverse()\n}\n\n/*\n  >>> uniqueSortByDescBy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDescByDesc = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  }).filter((v) => {\n    return seen[v]\n  }).reverse()\n}\n\n/*\n  >>> uniqueSortByDescByDesc([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDescByDescBy = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  }).filter((v) => {\n    return seen[v]\n  }).reverse()\n}\n\n/*\n  >>> uniqueSortByDescByDescBy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDescByDescByDesc = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  }).filter((v) => {\n    return seen[v]\n  }).reverse()\n}\n\n/*\n  >>> uniqueSortByDescByDescByDesc([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDescByDescByDescByDesc = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  }).filter((v) => {\n    return seen[v]\n  }).reverse()\n}\n\n/*\n  >>> uniqueSortByDescByDescByDescByDesc([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDescByDescByDescByDescByDesc = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  }).filter((v) => {\n    return seen[v]\n  }).reverse()\n}\n\n/*\n  >>> uniqueSortByDescByDescByDescByDescByDesc([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDescByDescByDescByDescByDescByDesc = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  }).filter((v) => {\n    return seen[v]\n  }).reverse()\n}\n\n/*\n  >>> uniqueSortByDescByDescByDescByDescByDescByDesc([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDescByDescByDescByDescByDescByDescByDesc = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  }).filter((v) => {\n    return seen[v]\n  }).reverse()\n}\n\n/*\n  >>> uniqueSortByDescByDescByDescByDescByDescByDesc([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueSortByDescByDescByDescByDescByDescByDescByDescByDesc = (l) => {\n  let seen = {}\n  return l.filter((v) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  }).sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  }).filter((", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*REtuRn maxIMum eLemEnt in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn maxIMum eLemEnt in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInListInListInListInListInListInListInList([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementInListInListInListInListInListInListInListInListInListInListInList = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\n/**\n  >>> maxElementInListInListInListInListInListInListInListInListInList", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const intEgeRS = Math.floor(n / 11);\n  const intEgeRn = (n % 11) - intEgeRS;\n  const intEgeRsEgeRn = (intEgeRn * 11) + intEgeRS;\n  const intEgeRsEgeRsEgeRn = (intEgeRsEgeRn * 11) + intEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn * 11) + intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRs;\n  const intEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRsEgeRn = (intEgeRsEgeRs", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the Odd indICieS, while its vaLUes at The even indIcies Are Equal\n  to thE vaLues Of the even INDicies Of l, bUT SoRTeD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the Odd indICieS, while its vaLUes at The even indIcies Are Equal\n  to thE vaLues Of the even INDicies Of l, bUT SoRTeD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.sort((a, b) => a % 2 === 1? b : -a)\n}\n\n/*\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a)\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? b : -a, (a, b) => a % 2 === 1? ", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1));\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1));\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1));\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1));\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1));\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1));\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1));\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1));\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1));\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1));\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst ", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 1;\n  let d = 2;\n  let e = 1;\n  let f = 2;\n  let g = 1;\n  let h = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 3;\n  let s = 2;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let A = 1;\n  let B = 2;\n  let C = 3;\n  let D = 4;\n  let E = 5;\n  let F = 6;\n  let G = 7;\n  let H = 8;\n  let I = 9;\n  let J = 10;\n  let K = 11;\n  let L = 12;\n  let M = 13;\n  let N = 14;\n  let O = 15;\n  let P = 16;\n  let Q = 17;\n  let R = 18;\n  let S = 19;\n  let T = 20;\n  let U = 21;\n  let V = 22;\n  let W = 23;\n  let X = 24;\n  let Y = 25;\n  let Z = 26;\n  let a1 = 21;\n  let a2 = 22;\n  let a3 = 23;\n  let a4 = 24;\n  let a5 = 25;\n  let a6 = 26;\n  let a7 = 27;\n  let a8 = 28;\n  let a9 = 29;\n  let a10 = 30;\n  let a11 = 31;\n  let a12 = 32;\n  let a13 = 33;\n  let a14 = 34;\n  let a15 = 35;\n  let a16 = 36;\n  let a17 = 37;\n  let a18 = 38;\n  let a19 = 39;\n  let a20 = 40;\n  let a21 = 41;\n  let a22 = 42;\n  let a23 = 43;\n  let a24 = 44;\n  let a25 = 45;\n  let a26;\n  let a27;\n  let a28;\n  let a29;\n  let a30 = 46;\n  let a31 = 47;\n  let a32 = 48;\n  let a33 = 49;\n  let a34 = 50;\n  let a35 = 51;\n  let a36 = 52;\n  let a37 = 53;\n  let a38 = 54;\n  let a39 = 55;\n  let a40 = 56;\n  let a41 = 57;\n  let a42 = 58;\n  let a43 = 59;\n  let a44 = 60;\n  let a45 = 61;\n  let a46 = 62;\n  let a47 = 63;\n  let a48 = 64;\n  let a49 = 65;\n  let a50 = 66;\n  let a51 = 67;\n  let a52 = 68;\n  let a53 = 69;\n  let a54 = 70;\n  let a55 = 71;\n  let a56 = 72;\n  let a57 = 73;\n  let a58 = 74;\n  let a59 = 75;\n  let a60 = 76;\n  let a61 = 77;\n  let a62 = 78;\n  let a63 = 79;\n  let a64 = 80;\n  let a65 = 81;\n  let a66 = 82;\n  let a67 = 83;\n  let a68 = 84;\n  let a69 = 85;\n  let a70 = 86;\n  let a71 = 87;\n  let a72 = 88;\n  let a73 = 89;\n  let a74 = 90;\n  let a75 = 91;\n  let a76 = 92;\n  let a77 = 93;\n  let a78 = 94;\n  let a79 = 95;\n  let a80 = 96;\n  let a81 = 97;\n  let a82 = 98;\n  let a83 = 99;\n  let a84 = 100;\n  let a85 = 101;\n  let a86 = 102;\n  let a87 = 103;\n  let a88 = 104;\n  let a89 = 105;\n  let a90 = 106;\n  let a91 = 107;\n  let a92 = 108;\n  let a93 = 109;\n  let a94 = 110;\n  let a95 = 111;\n  let a96 = 112;\n  let a97 = 113;\n  let a98 = 114;\n  let a99 = 115;\n  let a100 = 116;\n  let a101 = 117;\n  let a102 = 118;\n  let a103 = 119;\n  let a104 = 120;\n  let a105 = 121;\n  let a106 = 122;\n  let a107 = 123;\n  let a108 = 124;\n  let a109 = 125;\n  let a110 = 126;\n  let a111 = 127;\n  let a112 = 128;\n  let a113 = 129;\n  let a114 = 130;\n  let a115 = 131;\n  let a116 = 132;\n  let a117 = 133;\n  let a118 = 132;\n  let a119 = 134;\n  let a120 = 135;\n  let a121 = 136;\n  let a122 = 137;\n  let a123 = 138;\n  let a124 = 139;\n  let a125 = 140;\n  let a126 = 141;\n  let a127 = 142;\n  let a128 = 143;\n  let a129 = 144;\n  let a130 = 145;\n  let a131 = 146;\n  let a132 = 147;\n  let a133 = 148;\n  let a134 = 149;\n  let a135 = 150;\n  let a136 = 151;\n  let a137 = 152;\n  let a138 = 153;\n  let a139 = 154;\n  let a140 = 155;\n  let a141 = 156;\n  let a142 = 157;\n  let a143 = 158;\n  let a144 = 159;\n  let a145 = 160;\n  let a146 = 161;\n  let a147 = 162;\n  let a148 = 163;\n  let a149 = 164;\n  let a150 = 165;\n  let a151 = 166;\n  let a152 = 167;\n  let a153 = 168;\n  let a154 = 169;\n  let a155 = 170;\n  let a156 = 171;\n  let a157 = 172;\n  let a158 = 173;\n  let a159 = 174;\n  let a160 = 175;\n  let a161 = 176;\n  let a162 = 177;\n  let a163 = 178;\n  let a164 = 179;\n  let a165 = 180;\n  let a166 = 181;\n  let a167 = 182;\n  let a168 = 183;\n  let a169 = 184;\n  let a170 = 185;\n  let a171 = 186;\n  let a172 = 187;\n  let a173 = 188;\n  let a174 = 189;\n  let a175 = 190;\n  let a176 = 191;\n  let a177 = 192;\n  let a178 = 193;\n  let a179 = 194;\n  let a180 = 195;\n  let a181 = 196;\n  let a182 = 197;\n  let a183 = 198;\n  let a184 = 199;\n  let a185 = 200;\n  let a186 = 201;\n  let a187 = 202;\n  let a188 = 203;\n", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* for A giveN list Of inPut numbers, CalCUlatE MEAn ABSOlUTe DeViaTIon\n  arouNd the mean oF ThiS dataset.\n  MeaN absolUte DevIatioN is The averagE abSoluTe difFERence bEtwEEN eACh\n  ELEmENt aNd A ceNTerPoiNT (mean in ThIs caSe):\n  MAd = aveRaGE | x - x_MeAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* for A giveN list Of inPut numbers, CalCUlatE MEAn ABSOlUTe DeViaTIon\n  arouNd the mean oF ThiS dataset.\n  MeaN absolUte DevIatioN is The averagE abSoluTe difFERence bEtwEEN eACh\n  ELEmENt aNd A ceNTerPoiNT (mean in ThIs caSe):\n  MAd = aveRaGE | x - x_MeAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  let sumOfSquares = 0;\n  let sumOfSquaresOfMean = 0;\n  let sumOfSquaresOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n  let sumOfSquaresOfMeanOfMeanOf", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  sumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> sumToZero([1, 3, 5, 0])\n  false\n  >>> sumToZero([1, 3, -2, 1])\n  true\n  >>> sumToZero([1, 2, 3, 7])\n  false\n  >>> sumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToZero([1])\n  false\n  */\nconst sumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  sumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> sumToZero([1, 3, 5, 0])\n  false\n  >>> sumToZero([1, 3, -2, 1])\n  true\n  >>> sumToZero([1, 2, 3, 7])\n  false\n  >>> sumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToZero([1])\n  false\n  */\nconst sumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  sumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> sumToZero([1, 3, 5, 0])\n  false\n  >>> sumToZero([1, 3, -2, 1])\n  true\n  >>> sumToZero([1, 2, 3, 7])\n  false\n  >>> sumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToZero([1])\n  false\n  */\nconst sumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  sumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> sumToZero([1, 3, 5, 0])\n  false\n  >>> sumToZero([1, 3, -2, 1])\n  true\n  >>> sumToZero([1, 2, 3, 7])\n  false\n  >>> sumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToZero([1])\n  false\n  */\nconst sumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  sumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> sumToZero([1, 3, 5, 0])\n  false\n  >>> sumToZero([1, 3, -2, 1])\n  true\n  >>> sumToZero([1, 2, 3, 7])\n  false\n  >>> sumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToZero([1])\n  false\n  */\nconst sumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  sumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> sumToZero([1, 3, 5, 0])\n  false\n  >>> sumToZero([1, 3, -2, 1])\n  true\n  >>> sumToZero([1, 2, 3, 7])\n  false\n  >>> sumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToZero([1])\n  false\n  */\nconst sumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  sumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> sumToZero([1, 3, 5, 0])\n  false\n  >>> sumToZero([1, 3, -2, 1])\n  true\n  >>> sumToZero([1, 2, 3, 7])\n  false\n  >>> sumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToZero([1])\n  false\n  */\nconst sumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  sumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> sumToZero([1, 3, 5, 0])\n  false\n  >>> sumToZero([1, 3, -2, 1])\n  true\n  >>> sumToZero([1, 2, 3, 7])\n  false\n  >>> sumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToZero([1])\n  false\n  */\nconst sumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*\n  sumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT ", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n  let carsOnRoad = carsOnRoad;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = carsOnRoad.length;\n  let carsOnRoadLength = cars", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*REtuRn list witH ElemEntS inCRemeNtED by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn list witH ElemEntS inCRemeNtED by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let l = l\n  if (l === []) {\n    return l\n  }\n  let l = l[0]\n  let l2 = incrList(l.slice(1, l.length))\n  let l3 = incrList(l.slice(2, l.length))\n  let l4 = incrList(l.slice(3, l.length))\n  let l5 = incrList(l.slice(4, l.length))\n  let l6 = incrList(l.slice(5, l.length))\n  let l7 = incrList(l.slice(6, l.length))\n  let l8 = incrList(l.slice(7, l.length))\n  let l9 = incrList(l.slice(8, l.length))\n  let l10 = incrList(l.slice(9, l.length))\n  let l11 = incrList(l.slice(10, l.length))\n  let l12 = incrList(l.slice(11, l.length))\n  let l13 = incrList(l.slice(12, l.length))\n  let l14 = incrList(l.slice(13, l.length))\n  let l15 = incrList(l.slice(14, l.length))\n  let l16 = incrList(l.slice(15, l.length))\n  let l17 = incrList(l.slice(16, l.length))\n  let l18 = incrList(l.slice(17, l.length))\n  let l19 = incrList(l.slice(18, l.length))\n  let l20 = incrList(l.slice(19, l.length))\n  let l21 = incrList(l.slice(20, l.length))\n  let l22 = incrList(l.slice(21, l.length))\n  let l23 = incrList(l.slice(22, l.length))\n  let l24 = incrList(l.slice(23, l.length))\n  let l25 = incrList(l.slice(24, l.length))\n  let l26 = incrList(l.slice(25, l.length))\n  let l27 = incrList(l.slice(26, l.length))\n  let l28 = incrList(l.slice(27, l.length))\n  let l29 = incrList(l.slice(28, l.length))\n  let l30 = incrList(l.slice(29, l.length))\n  let l31 = incrList(l.slice(30, l.length))\n  let l32 = incrList(l.slice(31, l.length))\n  let l33 = incrList(l.slice(32, l.length))\n  let l34 = incrList(l.slice(33, l.length))\n  let l35 = incrList(l.slice(34, l.length))\n  let l36 = incrList(l.slice(35, l.length))\n  let l37 = incrList(l.slice(36, l.length))\n  let l38 = incrList(l.slice(37, l.length))\n  let l39 = incrList(l.slice(38, l.length))\n  let l40 = incrList(l.slice(39, l.length))\n  let l41 = incrList(l.slice(40, l.length))\n  let l42 = incrList(l.slice(41, l.length))\n  let l43 = incrList(l.slice(42, l.length))\n  let l44 = incrList(l.slice(43, l.length))\n  let l45 = incrList(l.slice(44, l.length))\n  let l46 = incrList(l.slice(45, l.length))\n  let l47 = incrList(l.slice(46, l.length))\n  let l48 = incrList(l.slice(47, l.length))\n  let l49 = incrList(l.slice(48, l.length))\n  let l50 = incrList(l.slice(49, l.length))\n  let l51 = incrList(l.slice(50, l.length))\n  let l52 = incrList(l.slice(51, l.length))\n  let l53 = incrList(l.slice(52, l.length))\n  let l54 = incrList(l.slice(53, l.length))\n  let l55 = incrList(l.slice(54, l.length))\n  let l56 = incrList(l.slice(55, l.length))\n  let l57 = incrList(l.slice(56, l.length))\n  let l58 = incrList(l.slice(57, l.length))\n  let l59 = incrList(l.slice(58, l.length))\n  let l60 = incrList(l.slice(59, l.length))\n  let l61 = incrList(l.slice(60, l.length))\n  let l62 = incrList(l.slice(61, l.length))\n  let l63 = incrList(l.slice(62, l.length))\n  let l64 = incrList(l.slice(63, l.length))\n  let l65 = incrList(l.slice(64, l.length))\n  let l66 = incrList(l.slice(65, l.length))\n  let l67 = incrList(l.slice(66, l.length))\n  let l68 = incrList(l.slice(67, l.length))\n  let l69 = incrList(l.slice(68, l.length))\n  let l70 = incrList(l.slice(69, l.length))\n  let l71 = incrList(l.slice(70, l.length))\n  let l72 = incrList(l.slice(71, l.length))\n  let l73 = incrList(l.slice(72, l.length))\n  let l74 = incrList(l.slice(73, l.length))\n  let l75 = incrList(l.slice(74, l.length))\n  let l76 = incrList(l.slice(75, l.length))\n  let l77 = incrList(l.slice(76, l.length))\n  let l78 = incrList(l.slice(77, l.length))\n  let l79 = incrList(l.slice(78, l.length))\n  let l80 = incrList(l.slice(79, l.length))\n  let l81 = incrList(l.slice(80, l.length))\n  let l82 = incrList(l.slice(81, l.length))\n  let l83 = incrList(l.slice(82, l.length))\n  let l84 = incrList(l.slice(83, l.length))\n  let l85 = incrList(l.slice(84, l.length))\n  let l86 = incrList(l.slice(85, l.length))\n  let l87 = incrList(l.slice(86, l.length))\n  let l88 = incrList(l.slice(87, l.length))\n  let l89 = incrList(l.slice(88, l.length))\n  let l90 = incrList(l.slice(89, l.length))\n  let l91 = incrList(l.slice(90, l.length))\n  let l92 = incrList(l.slice(91, l.length))\n  let l93 = incrList(l.slice(92, l.length))\n  let l94 = incrList(l.slice(93, l.length))\n  let l95 = incrList(l.slice(94, l.length))\n  let l96 = incrList(l.slice(95, l.length))\n  let l97 = incrList(l.slice(96, l.length))\n  let l98 = incrList(l.slice(97, l.length))\n  let l99 = incrList(l.slice(98, l.length))\n  let l100 = incrList(l.slice(99, l.length))\n  let l101 = incrList(l.slice(100, l.length))\n  let l102 = incrList(l.slice(101, l.length))\n  let l103 = incrList(l.slice(102, ", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To one, And faLse Otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To two, And faLse Otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To three, And faLse Otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To four, And faLse Otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To five, And faLse Otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To six, And faLse Otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To seven, And faLse Otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To eight, And faLse Otherwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine TakEs a list of INtegErs As ", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*CHanGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CHanGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERicaL*base+numBeR;\n};\n\n/*\n  ChaNGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERicaL*base+numBeR;\n};\n\n/*\n  ChaNGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERicaL*base+numBeR;\n};\n\n/*\n  ChaNGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERicaL*base+numBeR;\n};\n\n/*\n  ChaNGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERicaL*base+numBeR;\n};\n\n/*\n  ChaNGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERicaL*base+numBeR;\n};\n\n/*\n  ChaNGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERicaL*base+numBeR;\n};\n\n/*\n  ChaNGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERicaL*base+numBeR;\n};\n\n/*\n  ChaNGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERicaL*base+numBeR;\n};\n\n/*\n  ChaNGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERicaL*base+numBeR;\n};\n\n/*\n  ChaNGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  const numERicaL = Math.floor(x/base);\n  const numBeR = x-numERicaL*base;\n  return numERic", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const p1 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p2 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p3 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p4 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p5 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p6 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p7 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p8 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p9 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p10 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p11 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p12 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p13 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p14 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p15 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p16 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p17 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p18 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p19 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p20 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p21 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p22 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p23 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p24 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p25 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p26 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p27 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p28 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p29 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p30 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p31 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p32 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p33 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p34 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p35 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p36 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p37 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p38 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p39 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p40 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p41 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p42 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p43 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p44 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p45 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p46 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n  ];\n  const p47 = [\n    0,\n", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*THe FIb4 numBEr seQueNce IS a seQuENce SIMiLAr to The fIbbonacCi sequNEce That's defineD As folLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THe FIb4 numBEr seQueNce IS a seQuENce SIMiLAr to The fIbbonacCi sequNEce That's defineD As folLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  0\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  0\n  >>> fib4(n)\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  0\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  0\n  >>> fib4(n)\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  0\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  0\n  >>> fib4(n)\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  0\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  0\n  >>> fib4(n)\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  0\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  0\n  >>> fib4(n)\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  0\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  0\n  >>> fib4(n)\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  0\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  0\n  >>> fib4(n)\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let sum = 0\n  let sumsq = 0\n  let sumsq2 = 0\n  let sumsq3 = 0\n  let sumsq4 = 0\n  let sumsq5 = 0\n  let sumsq6 = 0\n  let sumsq7 = 0\n  let sumsq8 = 0\n  let sumsq9 = 0\n  let sumsq10 = 0\n  let sumsq11 = 0\n  let sumsq12 = 0\n  let sumsq13 = 0\n  let sumsq14 = 0\n  let sumsq15 = 0\n  let sumsq16 = 0\n  let sumsq17 = 0\n  let sumsq18 = 0\n  let sumsq19 = 0\n  let sumsq20 = 0\n  let sumsq21 = 0\n  let sumsq22 = 0\n  let sumsq23 = 0\n  let sumsq24 = 0\n  let sumsq25 = 0\n  let sumsq26 = 0\n  let sumsq27 = 0\n  let sumsq28 = 0\n  let sumsq29 = 0\n  let sumsq30 = 0\n  let sumsq31 = 0\n  let sumsq32 = 0\n  let sumsq33 = 0\n  let sumsq34 = 0\n  let sumsq35 = 0\n  let sumsq36 = 0\n  let sumsq37 = 0\n  let sumsq38 = 0\n  let sumsq39 = 0\n  let sumsq40 = 0\n  let sumsq41 = 0\n  let sumsq42 = 0\n  let sumsq43 = 0\n  let sumsq44 = 0\n  let sumsq45 = 0\n  let sumsq46 = 0\n  let sumsq47 = 0\n  let sumsq48 = 0\n  let sumsq49 = 0\n  let sumsq50 = 0\n  let sumsq51 = 0\n  let sumsq52 = 0\n  let sumsq53 = 0\n  let sumsq54 = 0\n  let sumsq55 = 0\n  let sumsq56 = 0\n  let sumsq57 = 0\n  let sumsq58 = 0\n  let sumsq59 = 0\n  let sumsq60 = 0\n  let sumsq61 = 0\n  let sumsq62 = 0\n  let sumsq63 = 0\n  let sumsq64 = 0\n  let sumsq65 = 0\n  let sumsq66 = 0\n  let sumsq67 = 0\n  let sumsq68 = 0\n  let sumsq69 = 0\n  let sumsq70 = 0\n  let sumsq71 = 0\n  let sumsq72 = 0\n  let sumsq73 = 0\n  let sumsq74 = 0\n  let sumsq75 = 0\n  let sumsq76 = 0\n  let sumsq77 = 0\n  let sumsq78 = 0\n  let sumsq79 = 0\n  let sumsq80 = 0\n  let sumsq81 = 0\n  let sumsq82 = 0\n  let sumsq83 = 0\n  let sumsq84 = 0\n  let sumsq85 = 0\n  let sumsq86 = 0\n  let sumsq87 = 0\n  let sumsq88 = 0\n  let sumsq89 = 0\n  let sumsq90 = 0\n  let sumsq91 = 0\n  let sumsq92 = 0\n  let sumsq93 = 0\n  let sumsq94 = 0\n  let sumsq95 = 0\n  let sumsq96 = 0\n  let sumsq97 = 0\n  let sumsq98 = 0\n  let sumsq99 = 0\n  let sumsq100 = 0\n  let sumsq101 = 0\n  let sumsq102 = 0\n  let sumsq103 = 0\n  let sumsq104 = 0\n  let sumsq105 = 0\n  let sumsq106 = 0\n  let sumsq107 = 0\n  let sumsq108 = 0\n  let sumsq109 = 0\n  let sumsq110 = 0\n  let sumsq111 = 0\n  let sumsq112 = 0\n  let sumsq113 = 0\n  let sumsq114 = 0\n  let sumsq115 = 0\n  let sumsq116 = 0\n  let sumsq117 = 0\n  let sumsq118 = 0\n  let sumsq119 = 0\n  let sumsq120 = 0\n  let sumsq121 = 0\n  let sumsq122 = 0\n  let sumsq123 = 0\n  let sumsq124 = 0\n  let sumsq125 = 0\n  let sumsq126 = 0\n  let sumsq127 = 0\n  let sumsq128 = 0\n  let sumsq129 = 0\n  let sumsq130 = 0\n  let sumsq131 = 0\n  let sumsq132 = 0\n  let sumsq133 = 0\n  let sumsq134 = 0\n  let sumsq135 = 0\n  let sumsq136 = 0\n  let sumsq137 = 0\n  let sumsq138 = 0\n  let sumsq139 = 0\n  let sumsq140 = 0\n  let sumsq141 = 0\n  let sumsq142 = 0\n  let sumsq143 = 0\n  let sumsq144 = 0\n  let sumsq145 = 0\n  let sumsq146 = 0\n  let sumsq147 = 0\n  let sumsq148 = 0\n  let sumsq149 = 0\n  let sumsq150 = 0\n  let sumsq151 = 0\n  let sumsq152 = 0\n  let sumsq153 = 0\n  let sumsq154 = 0\n  let sumsq155 = 0\n  let sumsq156 = 0\n  let sumsq157 = 0\n  let sumsq158 = 0\n  let sumsq159 = 0\n  let sumsq160 = 0\n  let sumsq161 = 0\n  let sumsq162 = 0\n  let sumsq163 = 0\n  let sumsq164 = 0\n  let sumsq165 = 0\n  let sumsq166 = 0\n  let sumsq167 = 0\n  let sumsq168 = 0\n  let sumsq169 = 0\n  let sumsq170 = 0\n  let sumsq171 = 0\n  let sumsq172 = 0\n  let sumsq173 = 0\n  let sumsq174 = 0\n  let sumsq175 = 0\n  let sumsq176 = 0\n  let sumsq177 = 0\n  let sumsq178 = 0\n  let sumsq179 = 0\n  let sumsq180 = 0\n  let sumsq181 = 0\n  let sumsq182 = 0\n  let sumsq183 = 0\n  let sumsq184 = 0\n  let sumsq185 = 0\n  let sumsq186 = 0\n  let sumsq187 = 0\n  let sumsq188 = 0\n  let sumsq189 = 0\n  let sumsq190 = 0\n  let sumsq191 = 0\n  let sumsq192 = 0\n  let sumsq193 = 0\n  let sumsq194 = 0\n  let sumsq195 = 0\n  let sumsq196 = 0\n  let sumsq197 = 0\n  let sumsq198 = 0\n  let sumsq199 = 0\n  let sumsq200 = 0\n  let sumsq201 = 0\n  let sumsq202 = 0\n  let sumsq203 = 0\n  let sumsq204 = 0\n  let sumsq205 = 0\n  let sumsq206 = 0\n  let sumsq207 = 0\n  let sumsq208 = 0\n  let sumsq209 = 0\n  let sumsq210 = 0\n  let sumsq211 = 0\n  let sumsq212 = 0\n  let sumsq213 = 0\n  let sumsq214 = 0\n  let sumsq215 = 0\n  let sumsq216 = 0\n  let sumsq217 = 0\n  let sumsq218 = 0\n  let sumsq219 = 0\n  let sumsq220 = 0\n  let sumsq221 = 0\n  let sumsq222 = 0\n  let sumsq223 = 0\n  let sumsq224 = 0\n  let sumsq225 = 0\n  let sumsq226 = 0\n  let sumsq227 = 0\n  let sumsq228 = 0\n  let sumsq229 = 0\n  let sumsq230 = 0\n  let sumsq231 = 0\n  let sumsq232 = 0\n  let sumsq233 = 0\n  let sumsq234 = 0\n  let sumsq235 = 0\n  let sumsq236 = 0\n  let sumsq237 = 0\n  let sumsq238 = 0\n", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let strIng = text;\n  let strIngLength = strIng.length;\n  let strIngReversed = strIng.split('').reverse().join('');\n  let strIngReversedLength = strIngReversed.length;\n  let strIngReversedReversed = strIngReversed.split('').reverse().join('');\n  let strIngReversedReversedLength = strIngReversedReversed.length;\n  let strIngReversedReversedReversedLength = strIngReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedLength = strIngReversedReversedReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedReversedLength = strIngReversedReversedReversedReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedReversedReversedLength = strIngReversedReversedReversedReversedReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedReversedReversedReversedLength = strIngReversedReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedReversedReversedReversedReversedLength = strIngReversedReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = strIngReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = strIngReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = strIngReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  let strIngReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*REtuRn 2^n moDUlo p (bE awAre OF numErICs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn 2^n moDUlo p (bE awAre OF numErICs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modp(-3, 5)\n  -1\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErICs;\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  2\n  >>> modn(0, 101)\n  1\n  >>> modn(3, 11)\n  8\n  >>> modn(100, 101)\n  1\n  */\nconst modn = (n, p) => {\n  const bE = Math.pow(2, n);\n  const awAre = p % bE;\n  const numErICs = p / bE;\n  return awAre === numErICs? bE : awAre % numErIC", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* insErt a nUMber 'delimeter' BetWeeN EverY tWO coNSEcUTive EleMEnts of iNput list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* insErt a nUMber 'delimeter' BetWeeN EverY tWO coNSEcUTive EleMEnts of iNput list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let n = numbers.length\n  let delim = delimeter ||''\n  while (i < n) {\n    let num = numbers[i]\n    if (num) {\n      result.push(num)\n      i++\n    }\n  }\n  return result\n}\n\n/**\n  >>> intersperse([1,2,3], 4)\n  [1, 2, 3, 4]\n  >>> intersperse([1,2,3], 3)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], 2)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], 1)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], 0)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -1)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -2)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -3)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -4)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -5)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -6)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -7)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -8)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -9)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -10)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -11)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -12)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -13)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -14)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -15)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -16)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -17)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -18)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -19)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -20)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -21)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -22)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -23)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -24)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -25)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -26)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -27)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -28)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -29)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -30)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -31)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -32)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -33)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -34)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -35)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -36)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -37)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -38)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -39)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -40)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -41)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -42)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -43)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -44)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -45)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -46)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -47)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -48)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -49)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -50)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -51)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -52)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -53)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -54)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -55)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -56)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -57)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -58)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -59)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -60)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -61)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -62)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -63)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -64)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -65)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -66)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -67)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -68)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -69)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -70)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -71)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -72)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -73)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -74)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -75)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -76)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -77)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -78)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -79)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -80)\n  [1, 2, 3, 1, 2, 3]\n  >>> intersperse([1,2,3], -81)\n  [1, 2, 3, ", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  RetUrns eNCodeD stRinG", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  removePunctuation Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\ngh", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> isEven(6)\n  true\n  >>> isEven(7)\n  false\n  */\nconst isEven = n => {\n  return n % 2 === 0\n}\n\n/*\n  >>> isOdd(6)\n  false\n  >>> isOdd(7)\n  true\n  */\nconst isOdd = n => {\n  return n % 2!== 0\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOdd = n => {\n  return isEven(n) || isOdd(n)\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrZero = n => {\n  return isEvenOrOdd(n) || n === 0\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrOne = n => {\n  return isEvenOrOdd(n) || n === 1\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrTwo = n => {\n  return isEvenOrOdd(n) || n === 2\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrThree = n => {\n  return isEvenOrOdd(n) || n === 3\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrFour = n => {\n  return isEvenOrOdd(n) || n === 4\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrFive = n => {\n  return isEvenOrOdd(n) || n === 5\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrSix = n => {\n  return isEvenOrOdd(n) || n === 6\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrSeven = n => {\n  return isEvenOrOdd(n) || n === 7\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrEight = n => {\n  return isEvenOrOdd(n) || n === 8\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrNine = n => {\n  return isEvenOrOdd(n) || n === 9\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrTen = n => {\n  return isEvenOrOdd(n) || n === 10\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrEleven = n => {\n  return isEvenOrOdd(n) || n === 11\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrTwelve = n => {\n  return isEvenOrOdd(n) || n === 12\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrThirteen = n => {\n  return isEvenOrOdd(n) || n === 13\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrFourteen = n => {\n  return isEvenOrOdd(n) || n === 14\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrFifteen = n => {\n  return isEvenOrOdd(n) || n === 15\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrSixteen = n => {\n  return isEvenOrOdd(n) || n === 16\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrSeventeen = n => {\n  return isEvenOrOdd(n) || n === 17\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrEighteen = n => {\n  return isEvenOrOdd(n) || n === 18\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrNineteen = n => {\n  return isEvenOrOdd(n) || n === 19\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrTwenty = n => {\n  return isEvenOrOdd(n) || n === 20\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrTwentyOne = n => {\n  return isEvenOrOdd(n) || n === 21\n}\n\n/*\n  >>> isEvenOrOdd(6)\n  true\n  >>> isEvenOrOdd(7)\n  false\n  */\nconst isEvenOrOddOrTwentyTwo = n => {\n  return is", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*ADd tWo numBErs x aNd y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*ADd tWo numBErs x aNd y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const aNd = Math.ceil(x),\n    bNd = Math.floor(y)\n  return aNd + bNd\n}\n\n/**\n * Subtract two numbers, return new number\n *\n * @param {number} x\n * @param {number} y\n * @return {number}\n *\n * @example\n * Subtract two numbers, return new number\n * >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  const aNd = Math.ceil(x),\n    bNd = Math.floor(y)\n  return aNd - bNd\n}\n\n/**\n * Multiply two numbers, return new number\n *\n * @param {number} x\n * @param {number} y\n * @return {number}\n *\n * @example\n * Multiply two numbers, return new number\n * >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (x, y) => {\n  const aNd = Math.ceil(x),\n    bNd = Math.floor(y)\n  return aNd * bNd\n}\n\n/**\n * Divide two numbers, return new number\n *\n * @param {number} x\n * @param {number} y\n * @return {number}\n *\n * @example\n * Divide two numbers, return new number\n * >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0.5\n  */\nconst divide = (x, y) => {\n  const aNd = Math.ceil(x),\n    bNd = Math.floor(y)\n  return aNd / bNd\n}\n\n/**\n * Calculate square root of number\n *\n * @param {number} x\n * @return {number}\n *\n * @example\n * Calculate square root of number\n * >>> squareRoot(2)\n  0.5\n  >>> squareRoot(5)\n  1.5\n  */\nconst squareRoot = (x) => {\n  const aNd = Math.ceil(x),\n    bNd = Math.floor(x)\n  return Math.sqrt(aNd * aNd)\n}\n\n/**\n * Calculate cube root of number\n *\n * @param {number} x\n * @return {number}\n *\n * @example\n * Calculate cube root of number\n * >>> cubeRoot(2)\n  1.5\n  >>> cubeRoot(5)\n  7.5\n  */\nconst cubeRoot = (x) => {\n  const aNd = Math.ceil(x),\n    bNd = Math.floor(x)\n  return Math.pow(aNd, 3)\n}\n\n/**\n * Calculate natural logarithm of number\n *\n * @param {number} x\n * @return {number}\n *\n * @example\n * Calculate natural logarithm of number\n * >>> naturalLog(2)\n  1.4426950408889634\n  >>> naturalLog(10)\n  1.4426950408889634\n  >>> naturalLog(100)\n  1.4426950408889634\n  >>> naturalLog(1000)\n  1.4426950408889634\n  >>> naturalLog(10000)\n  1.4426950408889634\n  >>> naturalLog(100000)\n  1.4426950408889634\n  >>> naturalLog(1000000)\n  1.4426950408889634\n  >>> naturalLog(10000000)\n  1.4426950408889634\n  >>> naturalLog(100000000)\n  1.4426950408889634\n  >>> naturalLog(1000000000)\n  1.4426950408889634\n  >>> naturalLog(10000000000)\n  1.4426950408889634\n  >>> naturalLog(100000000000)\n  1.4426950408889634\n  >>> naturalLog(1000000000000)\n  1.4426950408889634\n  >>> naturalLog(1000000000000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000)\n  1.4426950408889634\n  >>> naturalLog(10000000000000000)\n  1.4426950408889634\n  >>> naturalLog(10000000000000000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000)\n  1.4426950408889634\n  >>> naturalLog(1000000000000000001)\n  1.4426950408889634\n  >>> naturalLog(1000000000000000001)\n  1.4426950408889634\n  >>> naturalLog(10000000000000000010)\n  1.4426950408889634\n  >>> naturalLog(10000000000000000010)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000100)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000100)\n  1.4426950408889634\n  >>> naturalLog(1000000000000000001000)\n  1.4426950408889634\n  >>> naturalLog(1000000000000000001000)\n  1.4426950408889634\n  >>> naturalLog(10000000000000000010000)\n  1.4426950408889634\n  >>> naturalLog(10000000000000000010000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000100000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000100000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000100000)\n  1.4426950408889634\n  >>> naturalLog(1000000000000000001000000)\n  1.4426950408889634\n  >>> naturalLog(1000000000000000001000000)\n  1.4426950408889634\n  >>> naturalLog(10000000000000000010000000)\n  1.4426950408889634\n  >>> naturalLog(10000000000000000010000000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000100000000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000100000000)\n  1.4426950408889634\n  >>> naturalLog(1000000000000000001000000000)\n  1.4426950408889634\n  >>> naturalLog(1000000000000000001000000000)\n  1.4426950408889634\n  >>> naturalLog(10000000000000000010000000000)\n  1.4426950408889634\n  >>> naturalLog(10000000000000000010000000000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000100000000000)\n  1.4426950408889634\n  >>> naturalLog(100000000000000000100000000000)\n  1.4426950408889634\n  >>> naturalLog(1000000000000000001000000000000)\n  1.4426950408889634\n  >>> naturalLog(1000000000000000001000000000000)\n  1.4426950408889634\n  >>> natural", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0 === '') {\n    return false;\n  }\n  if (s1 === '') {\n    return false;\n  }\n  if (s0 === '' || s1 === '') {\n    return false;\n  }\n  if (s0 === s1) {\n    return false;\n  }\n  let len = Math.min(s1.length, s0.length);\n  let i;\n  let j;\n  let k;\n  let l;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return acc;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 1];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 2];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 3];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 4];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 5];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 6];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 7];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 8];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 9];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 10];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 11];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 12];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 13];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 14];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 15];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 16];\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib18 = (n) => {\n  let acc = 0;\n  let fibs = [];\n  for (let i = 1; i <= n; i++) {\n    fibs.push(fib(i));\n  }\n  for (let i = 0; i < fibs.length; i++) {\n    acc = acc + fibs[i];\n  }\n  return fibs[n - 17];\n", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets Is a StrinG Of \"<\" anD \">\".\n  return faLse IF eveRy OPenING bRAckeT haS A corresPondinG CloSing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets Is a StrinG Of \"<\" anD \">\".\n  return faLse IF eveRy OPenING bRAckeT haS A corresPondinG CloSing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketing = {\n    \"<\": true,\n    \">\": true,\n    \"<<>\": true,\n    \">>\": true,\n  };\n  return brackets[brackets];\n};\n\n/**\n  Returns true if the given string is a valid HTML tag.\n  Returns false if the given string is not a valid HTML tag.\n\n  >>> isHTMLTag(\"a\")\n  true\n  >>> isHTMLTag(\"b\")\n  false\n  >>> isHTMLTag(\"<\")\n  false\n  >>> isHTMLTag(\"a\")\n  false\n  >>> isHTMLTag(\"</\")\n  false\n  >>> isHTMLTag(\"a\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n  >>> isHTMLTag(\"</\")\n  true\n", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*REtuRn truE Is list elEmeNts ARe moNoTOniCALlY IncrEasINg or decReasinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn truE Is list elEmeNts ARe moNoTOniCALlY IncrEasINg or decReasinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = l[0];\n  let l = l[l.length - 1];\n  let m = l[0];\n  let n = l[l.length - 1];\n  let p = l[0];\n  let q = l[l.length - 1];\n  let r = l[0];\n  let s = l[l.length - 1];\n  let t = l[0];\n  let u = l[l.length - 1];\n  let v = l[0];\n  let w = l[l.length - 1];\n  let x = l[0];\n  let y = l[l.length - 1];\n  let z = l[0];\n  let A = l[l.length - 1];\n  let B = l[0];\n  let C = l[l.length - 1];\n  let D = l[0];\n  let E = l[l.length - 1];\n  let F = l[0];\n  let G = l[l.length - 1];\n  let H = l[0];\n  let I = l[l.length - 1];\n  let J = l[0];\n  let K = l[l.length - 1];\n  let L = l[0];\n  let M = l[l.length - 1];\n  let N = l[0];\n  let O = l[l.length - 1];\n  let P = l[0];\n  let Q = l[l.length - 1];\n  let R = l[0];\n  let S = l[l.length - 1];\n  let T = l[0];\n  let U = l[l.length - 1];\n  let V = l[0];\n  let W = l[l.length - 1];\n  let X = l[0];\n  let Y = l[l.length - 1];\n  let Z = l[0];\n  let A = l[l.length - 1];\n  let B = l[0];\n  let C = l[l.length - 1];\n  let D = l[0];\n  let E = l[l.length - 1];\n  let F = l[0];\n  let G = l[l.length - 1];\n  let H = l[0];\n  let I = l[l.length - 1];\n  let J = l[0];\n  let K = l[l.length - 1];\n  let L = l[0];\n  let M = l[l.length - 1];\n  let N = l[0];\n  let O = l[l.length - 1];\n  let P = l[0];\n  let Q = l[l.length - 1];\n  let R = l[0];\n  let S = l[l.length - 1];\n  let T = l[0];\n  let U = l[l.length - 1];\n  let V = l[0];\n  let W = l[l.length - 1];\n  let X = l[0];\n  let Y = l[l.length - 1];\n  let Z = l[0];\n  let A = l[l.length - 1];\n  let B = l[0];\n  let C = l[l.length - 1];\n  let D = l[0];\n  let E = l[l.length - 1];\n  let F = l[0];\n  let G = l[l.length - 1];\n  let H = l[0];\n  let I = l[l.length - 1];\n  let J = l[0];\n  let K = l[l.length - 1];\n  let L = l[0];\n  let M = l[l.length - 1];\n  let N = l[0];\n  let O = l[l.length - 1];\n  let P = l[0];\n  let Q = l[l.length - 1];\n  let R = l[0];\n  let S = l[l.length - 1];\n  let T = l[0];\n  let U = l[l.length - 1];\n  let V = l[0];\n  let W = l[l.length - 1];\n  let X = l[0];\n  let Y = l[l.length - 1];\n  let Z = l[0];\n  let A = l[l.length - 1];\n  let B = l[0];\n  let C = l[l.length - 1];\n  let D = l[0];\n  let E = l[l.length - 1];\n  let F = l[0];\n  let G = l[l.length - 1];\n  let H = l[0];\n  let I = l[l.length - 1];\n  let J = l[0];\n  let K = l[l.length - 1];\n  let L = l[0];\n  let M = l[l.length - 1];\n  let N = l[0];\n  let O = l[l.length - 1];\n  let P = l[0];\n  let Q = l[l.length - 1];\n  let R = l[0];\n  let S = l[l.length - 1];\n  let T = l[0];\n  let U = l[l.length - 1];\n  let V = l[0];\n  let W = l[l.length - 1];\n  let X = l[0];\n  let Y = l[l.length - 1];\n  let Z = l[0];\n  let A = l[l.length - 1];\n  let B = l[0];\n  let C = l[l.length - 1];\n  let D = l[0];\n  let E = l[l.length - 1];\n  let F = l[0];\n  let G = l[l.length - 1];\n  let H = l[0];\n  let I = l[l.length - 1];\n  let J = l[0];\n  let K = l[l.length - 1];\n  let L = l[0];\n  let M = l[l.length - 1];\n  let N = l[0];\n  let O = l[l.length - 1];\n  let P = l[0];\n  let Q = l[l.length - 1];\n  let R = l[0];\n  let S = l[l.length - 1];\n  let T = l[0];\n  let U = l[l.length - 1];\n  let V = l[0];\n  let W = l[l.length - 1];\n  let X = l[0];\n  let Y = l[l.length - 1];\n  let Z = l[0];\n  let A = l[l.length - 1];\n  let B = l[0];\n  let C = l[l.length - 1];\n  let D = l[0];\n  let E = l[l.length - 1];\n  let F = l[0];\n  let G = l[l.length - 1];\n  let H = l[0];\n  let I = l[l.length - 1];\n  let J = l[0];\n  let K = l[l.length - 1];\n  let L = l[0];\n  let M = l[l.length - 1];\n  let N = l[0];\n  let O = l[l.length - 1];\n  let P = l[0];\n  let Q = l[l.length - 1];\n  let R = l[0];\n  let S = l[l.length - 1];\n  let T = l[0];\n  let U = l[l.length - 1];\n  let V = l[0];\n  let W = l[l.length - 1];\n  let X = l[0];\n  let Y = l[l.length - 1];\n  let Z = l[0];\n  let A = l[l.length - 1];\n  let B = l[0];\n  let C = l[l.length - 1];\n  let D = l[0];\n  let E = l[l.length - 1];\n  let F = l[0];\n  let G = l[l.length - 1];\n  let H = l[0];\n  let I = l[l.length - 1];\n  let J = l[0];\n  let K = l[l.length - 1];\n  let L = l[0];\n  let M = l[l.length - 1];\n  let N = l[0];\n  let O = l[l.length - 1];\n  let P = l[0];\n  let Q = l[l.length - 1];\n  let R = l[0];\n  let S = l[l.length - 1];\n  let T = l[0];\n  let U = l[l.length - 1];\n  let V = l[0];\n  let W = l[l.length - 1];\n  let X = l[0];\n  let Y = l[l.length - 1];\n  let Z = l[0];\n  let A = l[l.length - 1];\n  let B = l[0];\n  let C = l[l.length - 1];\n  let D = l[0];\n  let E = l[l.length - 1];\n  let F = l[0];\n  let G = l[l.length - 1];\n  let H = l[0];\n  let I = l[l.length - 1];\n  let J = l[0];\n  let K = l[l.length - 1];\n  let L = l[0];\n  let M = l[l.length - 1];\n  let N = l[0];\n", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*REtuRn sorTEd unIquE common elEMentS fOR twO LIsTS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn sorTEd unIquE common elEMentS fOR twO LIsTS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n      k++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * Returns true if two arrays have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same length and the same values.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two arrays are considered equal if they have the same elements in the same order.\n *\n * Two array", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*REtuRn the largest PRime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*REtuRn the largest PRime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  factors.push(factor);\n  let i = 2;\n  while (n % factor!== 0) {\n    factor++;\n    i++;\n  }\n  factors.push(factor);\n  factors.reverse();\n  let largest = factors[0];\n  for (let i = 1; i < factors.length; i++) {\n    if (n % factors[i]!== 0) {\n      largest = factors[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> primeFactors(13195)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  >>> primeFactors(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  >>> primeFactors(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  >>> primeFactors(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  >>> primeFactors(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, ", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENted MulTIple groUps for NEstEd parenthesES sepaRated bY spacEs.\n  FOr each of tHe gRoup, OutpuT THe deepEst LEVeL Of NEStINg oF pAreNTheSes.\n  e.G. (()()) HaS maxImum Two lEvELs oF nEstiNG wHile ((())) Has thrEE.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENted MulTIple groUps for NEstEd parenthesES sepaRated bY spacEs.\n  FOr each of tHe gRoup, OutpuT THe deepEst LEVeL Of NEStINg oF pAreNTheSes.\n  e.G. (()()) HaS maxImum Two lEvELs oF nEstiNG wHile ((())) Has thrEE.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = []\n  const paren_stack_count = 0\n  const paren_stack_base = []\n  const paren_stack_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack_base_base = []\n  const paren_stack_base_base_count = 0\n  const paren_stack", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sUmTON is a FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*sUmTON is a FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumToN(10)\n * 55\n * >>> sumToN(1)\n * 1\n */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n * >>> sumToN(30)\n * 465\n * >>> sumToN(100)\n * 5050\n * >>> sumToN(5)\n * 15\n * >>> sumTo", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets Is a StrinG Of \"(\" anD \")\".\n  return trUe iF EverY oPEniNG BrACket Has A CorrespOnding CLosIng bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets Is a StrinG Of \"(\" anD \")\".\n  return trUe iF EverY oPEniNG BrACket Has A CorrespOnding CLosIng bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = /^\\(([^\\)]+)\\)$/;\n  return bracketingRegex.test(brackets);\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\".class\")\n  true\n  >>> isCssClassName(\".class2\")\n  false\n  */\nconst isCssClassName = (className) => {\n  return /^[A-Za-z][A-Za-z0-9_]*$/.test(className);\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmpty = (className) => {\n  return isCssClassName(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrWhitespace = (className) => {\n  return isCssClassName(className) || /^\\s*$/.test(className);\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespace = (className) => {\n  return isCssClassNameOrWhitespace(className) || isCssClassName(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrWhitespaceOrEmpty = (className) => {\n  return isCssClassNameOrWhitespace(className) || isCssClassName(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespaceOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespace(className) || isCssClassNameOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrWhitespaceOrEmptyOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespaceOrWhitespace(className) || isCssClassNameOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespace(className) || isCssClassNameOrWhitespaceOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(className) || isCssClassNameOrWhitespaceOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(className) || isCssClassNameOrWhitespaceOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(className) || isCssClassNameOrWhitespaceOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(className) || isCssClassNameOrWhitespaceOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(className) || isCssClassNameOrWhitespaceOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(className) || isCssClassNameOrWhitespaceOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(className) || isCssClassNameOrWhitespaceOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid CSS class name.\n\n  >>> isCssClassName(\"class\")\n  true\n  >>> isCssClassName(\"class2\")\n  false\n  */\nconst isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = (className) => {\n  return isCssClassNameOrEmptyOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(className) || isCssClassNameOrWhitespaceOrWhitespace(className) || className === \"\";\n};\n\n/**\n  Returns true if the given string is a valid ", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative_2 = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative_3 = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative_4 = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative_5 = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative_6 = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative_7 = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative_8 = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative_9 = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative_10 = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative_11 = (xs) => {\n  const n = xs.length;\n  const d = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/**\n * xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * rEturN derivative of THis polyNomial in THe sAme form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n */\nconst derivative", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*THe FIbFib NUmbeR seQueNCe is A sEQueNCE sIMilaR to THe FibboNacci sEQunEce that's defINed as FollowS:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*THe FIbFib NUmbeR seQueNCe is A sEQueNCE sIMilaR to THe FibboNacci sEQunEce that's defINed as FollowS:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) ", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*WRitE a funCTion vowelsCount WhiCh tAKes a StRIng REPrESentIng\n  A Word as iNput anD RetUrns the numbER of vowels in thE strinG.\n  VoweLs in tHis case arE 'a', 'e', 'I', 'o', 'u'. HEre, 'y' iS ALso a\n  voWel, BUT oNLy WHEn IT is At The ENd oF thE GIvEn woRd.\n\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funCTion vowelsCount WhiCh tAKes a StRIng REPrESentIng\n  A Word as iNput anD RetUrns the numbER of vowels in thE strinG.\n  VoweLs in tHis case arE 'a', 'e', 'I', 'o', 'u'. HEre, 'y' iS ALso a\n  voWel, BUT oNLy WHEn IT is At The ENd oF thE GIvEn woRd.\n\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowelsCountInt = 1;\n  let vowelsCountChar = s.split('').map(c => c.charCodeAt(0));\n  vowelsCountChar.forEach((c, i) => {\n    if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57) {\n      vowelsCount++;\n    } else if (c >= 65 && c <= 90) {\n      vowelsCount++;\n    } else if (c >= 97 && c <= 122) {\n      vowelsCount++;\n    } else if (c >= 48 && c <= 57", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*CIrcUlar shift tHE digIts Of tHE intEgER x, shift thE DIgITs riGht BY shift\n  and return the Result AS a sTring.\n  If shift > numbER of diGits, return diGits rEveRsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CIrcUlar shift tHE digIts Of tHE intEgER x, shift thE DIgITs riGht BY shift\n  and return the Result AS a sTring.\n  If shift > numbER of diGits, return diGits rEveRsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 1)\n  \"21\"\n  */\nconst circularShiftRight = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeft = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 1)\n  \"21\"\n  */\nconst circularShiftRightOne = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftOne = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 1)\n  \"21\"\n  */\nconst circularShiftRightTwo = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftTwo = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 1)\n  \"21\"\n  */\nconst circularShiftRightThree = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftThree = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 1)\n  \"21\"\n  */\nconst circularShiftRightFour = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftFour = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 1)\n  \"21\"\n  */\nconst circularShiftRightFive = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftFive = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 1)\n  \"21\"\n  */\nconst circularShiftRightSix = (x, shift) => {\n  const diGits = Math.ceil(Math.log(x) / Math.log(2));\n  const intEgER = Math.floor((x / Math.pow(10, diGits)) * Math.pow(10, diGits));\n  const rEveRsed = intEgER * Math.pow(10, diGits) + shift;\n  return rEveRsed;\n};\n\n/*\n  >>> circularShif", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let i = s.length - 1;\n  while (i >= 0) {\n    sum += s.charCodeAt(i) - 97;\n    i--;\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE lower charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length - 1;\n  while (i >= 0) {\n    sum += s.charCodeAt(i) - 65;\n    i--;\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  let i = s.length - 1;\n  while (i >= 0) {\n    sum += s.charCodeAt(i) - 98;\n    i--;\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE lower charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length - 1;\n  while (i >= 0) {\n    sum += s.charCodeAt(i) - 96;\n    i--;\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  let i = s.length - 1;\n  while (i >= 0) {\n    sum += s.charCodeAt(i) - 97;\n    i--;\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE lower charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length - 1;\n  while (i >= 0) {\n    sum += s.charCodeAt(i) - 65;\n    i--;\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  let i = s.length - 1;\n  while (i >= 0) {\n    sum += s.charCodeAt(i) - 98;\n    i--;\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE lower charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = s.length - 1;\n  while (i >= 0) {\n    sum += s.charCodeAt(i) - 96;\n    i--;\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  let i = s.length - 1;\n  while (i >= 0) {\n    sum += s.charCodeAt(i) - 97;\n    i--;\n  }\n  return sum;\n};\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE lower charaCTers o", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n  let res = [];\n  let count = 0;\n  let sum = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let sumOfFruits;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOfPears;\n  let sumOfOranges;\n  let sumOfApples;\n  let sumOfBananas;\n  let sumOf", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"givEn an aRRay rEprEseNTing A bRAncH OF a TRee tHat HAs non-neGative INteGer nodes\n  youR Task iS to pluck one Of the NodEs and return it.\n  ThE plUckeD node SHOuld be The NODe WItH THe SMalLeSt eVEn vAluE.\n  iF mUltiPle nOdes WiTH thE sAme sMAlLest Even vaLUe aRE fOuNd return tHE NodE That Has smAlLEsT indeX.\n\n  the plUcKED nodE shouLD Be retUrnEd in A list, [ SmALesT_VAlUe, its INdEx ],\n  iF tHerE Are nO Even vaLuES OR the givEN ArrAY is eMPTY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  \"givEn an aRRay rEprEseNTing A bRAncH OF a TRee tHat HAs non-neGative INteGer nodes\n  youR Task iS to pluck one Of the NodEs and return it.\n  ThE plUckeD node SHOuld be The NODe WItH THe SMalLeSt eVEn vAluE.\n  iF mUltiPle nOdes WiTH thE sAme sMAlLest Even vaLUe aRE fOuNd return tHE NodE That Has smAlLEsT indeX.\n\n  the plUcKED nodE shouLD Be retUrnEd in A list, [ SmALesT_VAlUe, its INdEx ],\n  iF tHerE Are nO Even vaLuES OR the givEN ArrAY is eMPTY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = len - 1;\n  let result = [];\n  while (min <= max) {\n    const mid = min + ((max - min) >> 1);\n    const val = arr[mid];\n    if (val % 2 === 0) {\n      result.push(val);\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-smallest-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSmallest = function (nums) {\n  let min = 0;\n  let max = nums.length - 1;\n  while (min <= max) {\n    const mid = min + ((max - min) >> 1);\n    if (nums[mid] < nums[min]) {\n      min = mid + 1;\n    } else if (nums[mid] > nums[max]) {\n      max = mid - 1;\n    } else {\n      return nums[mid];\n    }\n  }\n  return nums[max];\n};\n\n// https://leetcode.com/problems/find-the-smallest-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSmallestInSortedArray = function (nums) {\n  let min = 0;\n  let max = nums.length - 1;\n  while (min <= max) {\n    const mid = min + ((max - min) >> 1);\n    if (nums[mid] < nums[min]) {\n      min = mid + 1;\n    } else if (nums[mid] > nums[max]) {\n      max = mid - 1;\n    } else {\n      return nums[mid];\n    }\n  }\n  return nums[max];\n};\n\n// https://leetcode.com/problems/find-the-smallest-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSmallestInSortedArrayReverse = function (nums) {\n  let min = 0;\n  let max = nums.length - 1;\n  while (min <= max) {\n    const mid = min + ((max - min) >> 1);\n    if (nums[mid] < nums[min]) {\n      min = mid + 1;\n    } else if (nums[mid] > nums[max]) {\n      max = mid - 1;\n    } else {\n      return nums[mid];\n    }\n  }\n  return nums[max];\n};\n\n// https://leetcode.com/problems/find-the-smallest-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSmallestInSortedArrayReverse2d = function (nums) {\n  let min = 0;\n  let max = nums.length - 1;\n  while (min <= max) {\n    const mid = min + ((max - min) >> 1);\n    if (nums[mid] < nums[min]) {\n      min = mid + 1;\n    } else if (nums[mid] > nums[max]) {\n      max = mid - 1;\n    } else {\n      return nums[mid];\n    }\n  }\n  return nums[max];\n};\n\n// https://leetcode.com/problems/find-the-smallest-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSmallestInSortedArrayReverse3dArray = function (nums) {\n  let min = 0;\n  let max = nums.length - 1;\n  while (min <= max) {\n    const mid = min + ((max - min) >> 1);\n    if (nums[mid] < nums[min]) {\n      min = mid + 1;\n    } else if (nums[mid] > nums[max]) {\n      max = mid - 1;\n    } else {\n      return nums[mid];\n    }\n  }\n  return nums[max];\n};\n\n// https://leetcode.com/problems/find-the-smallest-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSmallestInSortedArrayReverse4d = function (nums) {\n  let min = 0;\n  let max = nums.length - 1;\n  while (min <= max) {\n    const mid = min + ((max - min) >> 1);\n    if (nums[mid] < nums[min]) {\n      min = mid + 1;\n    } else if (nums[mid] > nums[max]) {\n      max = mid - 1;\n    } else {\n      return nums[mid];\n    }\n  }\n  return nums[max];\n};\n\n// https://leetcode.com/problems/find-the-smallest-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSmallestInSortedArrayReverse4d = function (nums) {\n  let min = 0;\n  let max = nums.length - 1;\n  while (min <= max) {\n    const mid = min + ((max - min) >> 1);\n    if (nums[mid] < nums[min]) {\n      min = mid + 1;\n    } else if (nums[mid] > nums[max]) {\n      max = mid - 1;\n    } else {\n      return nums[mid];\n    }\n  }\n  return nums[max];\n};\n\n// https://leetcode.com/problems/find-the-smallest-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSmallestInSortedArrayReverse4d = function (nums) {\n  let min = 0;\n  let max = nums.length - 1;\n  while (min <= max) {\n    const mid = min + ((max - min) >> 1);\n    if (nums[mid] < nums[min]) {\n      min = mid + 1;\n    } else if (nums[mid] > nums[max]) {\n      max = mid - 1;\n    } else {\n      return nums[mid];\n    }\n  }\n  return nums[max];\n};\n\n// https://leetcode.com/problems/find-the-smallest-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSmallestInSortedArrayReverse4d = function (nums) {\n  let min = 0;\n  let max = nums.length - 1;\n  while (min <= ", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHe vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHe vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = lst.length\n  let j = 0\n  let k = 0\n  let ret = 0\n  while (j < i) {\n    if (lst[j] < lst[k]) {\n      ret = j\n      break\n    }\n    if (lst[j] > lst[k]) {\n      ret = k\n      break\n    }\n    k = j\n    j = i\n  }\n  return ret\n}\n\n/**\n  Search the list for INtegEr sUCH as vALue eXist, return its position in the list.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst searchInList = (lst) => {\n  let i = lst.length\n  let j = 0\n  let k = 0\n  let ret = 0\n  while (j < i) {\n    if (lst[j] < lst[k]) {\n      ret = j\n      break\n    }\n    if (lst[j] > lst[k]) {\n      ret = k\n      break\n    }\n    k = j\n    j = i\n  }\n  return ret\n}\n\n/**\n  Search the list for INtegEr sUCH as vALue eXist, return its position in the list.\n  Examples:\n      searchInList([4, 1, 2, 2, 3, 1])) == 3\n      searchInList([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      searchInList([5, 5, 4, 4, 4])) == -1\n  */\nconst searchInListInList = (lst) => {\n  let i = lst.length\n  let j = 0\n  let k = 0\n  let ret = 0\n  while (j < i) {\n    if (lst[j] < lst[k]) {\n      ret = j\n      break\n    }\n    if (lst[j] > lst[k]) {\n      ret = k\n      break\n    }\n    k = j\n    j = i\n  }\n  return ret\n}\n\n/**\n  Search the list for INtegEr sUCH as vALue eXist, return its position in the list.\n  Examples:\n      searchInListInList([4, 1, 2, 2, 3, 1])) == 3\n      searchInListInList([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      searchInListInList([5, 5, 4, 4, 4])) == -1\n  */\nconst searchInListInListInList = (lst) => {\n  let i = lst.length\n  let j = 0\n  let k = 0\n  let ret = 0\n  while (j < i) {\n    if (lst[j] < lst[k]) {\n      ret = j\n      break\n    }\n    if (lst[j] > lst[k]) {\n      ret = k\n      break\n    }\n    k = j\n    j = i\n  }\n  return ret\n}\n\n/**\n  Search the list for INtegEr sUCH as vALue eXist, return its position in the list.\n  Examples:\n      searchInListInListInList([4, 1, 2, 2, 3, 1])) == 3\n      searchInListInListInList([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      searchInListInListInList([5, 5, 4, 4, 4])) == -1\n  */\nconst searchInListInListInListInList = (lst) => {\n  let i = lst.length\n  let j = 0\n  let k = 0\n  let ret = 0\n  while (j < i) {\n    if (lst[j] < lst[k]) {\n      ret = j\n      break\n    }\n    if (lst[j] > lst[k]) {\n      ret = k\n      break\n    }\n    k = j\n    j = i\n  }\n  return ret\n}\n\n/**\n  Search the list for INtegEr sUCH as vALue eXist, return its position in the list.\n  Examples:\n      searchInListInListInListInList([4, 1, 2, 2, 3, 1])) == 3\n      searchInListInListInListInList([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      searchInListInListInListInList([5, 5, 4, 4, 4])) == -1\n  */\nconst searchInListInListInListInList = (lst) => {\n  let i = lst.length\n  let j = 0\n  let k = 0\n  let ret = 0\n  while (j < i) {\n    if (lst[j] < lst[k]) {\n      ret = j\n      break\n    }\n    if (lst[j] > lst[k]) {\n      ret = k\n      break\n    }\n    k = j\n    j = i\n  }\n  return ret\n}\n\n/**\n  Search the list for INtegEr sUCH as vALue eXist, return its position in the list.\n  Examples:\n      searchInListInListInListInList([4, 1, 2, 2, 3, 1])) == 3\n      searchInListInListInListInList([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      searchInListInListInListInList([5, 5, 4, 4, 4])) == -1\n  */\nconst searchInListInListInListInListInList = (lst) => {\n  let i = lst.length\n  let j = 0\n  let k = 0\n  let ret = 0\n  while (j < i) {\n    if (lst[j] < lst[k]) {\n      ret = j\n      break\n    }\n    if (lst[j] > lst[k]) {\n      ret = k\n      break\n    }\n    k = j\n    j = i\n  }\n  return ret\n}\n\n/**\n  Search the list for INtegEr sUCH as vALue eXist, return its position in the list.\n  Examples:\n      searchInListInListInListInListInList([4, 1, 2, 2, 3, 1])) == 3\n      searchInListInListInListInListInList([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      searchInListInListInListInListInList([5, 5, 4, 4, 4])) == -1\n  */\nconst searchInListInListInListInListInListInList = (lst) => {\n  let i = lst.length\n  let j = 0\n  let k = 0\n  let ret = 0\n  while (j < i) {\n    if (lst[j] < lst[k]) {\n      ret = j\n      break\n    }\n    if (lst[j] > lst[k]) {\n      ret = k\n      break\n    }\n    k = j\n    j = i\n  }\n  return ret\n}\n\n/**\n  Search the list for INtegEr sUCH as vALue eXist, return its position in the list.\n  Examples:\n      searchInListInListInListInListInList([4, 1, 2, 2, 3, 1])) == 3\n      searchInListInListInListInListInList([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      searchInListInListInListInListInList([5, 5, 4, 4, 4])) == -1\n  */\nconst searchInListInListInListInListInListInList = (lst) => {\n  let i = lst.length\n  let j = 0\n  let k = 0\n  let ret = 0\n  while (j < i) {\n    if (lst[j", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'f')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'g')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'h')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'i')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'j')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'k')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'l')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'],'m')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'n')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'o')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'p')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'q')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'r')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'],'s')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 't')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'u')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'v')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'w')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'x')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'y')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'z')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'A')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'B')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'C')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'D')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'E')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'F')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'G')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'H')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'I')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'J')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'K')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'L')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'M')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'N')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'O')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'P')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'Q')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'R')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'S')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'T')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'U')\n  ['abc', 'ba", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  givEn list of iNTegeRs, return list in sTraNGe orDeR.\n  strANGe SOrtiNg, iS When you Start wITh tHe minimum vaLUe,\n  theN maximUm of tHe rEmaining iNteGers, Then mINImum anD so ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn list of iNTegeRs, return list in sTraNGe orDeR.\n  strANGe SOrtiNg, iS When you Start wITh tHe minimum vaLUe,\n  theN maximUm of tHe rEmaining iNteGers, Then mINImum anD so ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sTraNGe = []\n  let sOrDeR = []\n  let iNTeGeR = 0\n  let iNTeGers = 0\n  let iNTeGeRs = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n  let iNTeGeRm = 0\n  let iNTeGeRn = 0\n  let iNTeGeRms = 0\n  let iNTeGeRns = 0\n", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const det = a * b - c * a;\n  if (det === 0) {\n    return -1;\n  }\n  return Math.sqrt(det);\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const det = a * b - c * a;\n  if (det === 0) {\n    return -1;\n  }\n  return Math.sqrt(det / 2);\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const det = a * b - c * a;\n  if (det === 0) {\n    return -1;\n  }\n  return Math.sqrt(det / 3);\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const det = a * b - c * a;\n  if (det === 0) {\n    return -1;\n  }\n  return Math.sqrt(det / 4);\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const det = a * b - c * a;\n  if (det === 0) {\n    return -1;\n  }\n  return Math.sqrt(det / 5);\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const det = a * b - c * a;\n  if (det === 0) {\n    return -1;\n  }\n  return Math.sqrt(det / 6);\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const det = a * b - c * a;\n  if (det === 0) {\n    return -1;\n  }\n  return Math.sqrt(det / 7);\n};\n\n/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const det = a * b - c", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, maxWeight, maxWeight } = w;\n  const { balAncEd, maxWeight, maxWeight } = q;\n  const { balAncEd, ", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  givEn an aRRay arr oF inTegERs, fiNd THe mINImUM numBer OF elemenTs that\n  NEed To be changed TO make The arrAy palIndRomic. A palIndRomiC arraY IS an arrAy tHAT\n  iS ReAD ThE SamE bAckWArdS anD FOrWardS. In oNe chAnGE, yoU cAn chANgE one ElemenT To aNY oThEr eLEMenT.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn an aRRay arr oF inTegERs, fiNd THe mINImUM numBer OF elemenTs that\n  NEed To be changed TO make The arrAy palIndRomic. A palIndRomiC arraY IS an arrAy tHAT\n  iS ReAD ThE SamE bAckWArdS anD FOrWardS. In oNe chAnGE, yoU cAn chANgE one ElemenT To aNY oThEr eLEMenT.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let smallestChange = Number.MAX_VALUE;\n  let smallestElem = null;\n  let smallestNum = Number.MAX_VALUE;\n  let smallestNumInd = -1;\n  let smallestElemInd = -1;\n  let smallestElemIndInt = -1;\n  let smallestElemIndIntInt = -1;\n  let smallestElemIndIntIntInt = -1;\n  let smallestElemIndIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = -1;\n  let smallestElemIndIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const res = [];\n  const len = lst1.length;\n  for (let i = 0; i < len; i++) {\n    const el1 = lst1[i];\n    const el2 = lst2[i];\n    if (el1 === el2) {\n      res.push(el1);\n    } else {\n      res.push(el2);\n    }\n  }\n  return res;\n};\n\n/*\n  fUcNtR a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const res = [];\n  const len = lst1.length;\n  for (let i = 0; i < len; i++) {\n    const el1 = lst1[i];\n    const el2 = lst2[i];\n    if (el1 === el2) {\n      res.push(el1);\n    } else {\n      res.push(el2);\n    }\n  }\n  return res;\n};\n\n/*\n  fUcNtR a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const res = [];\n  const len = lst1.length;\n  for (let i = 0; i < len; i++) {\n    const el1 = lst1[i];\n    const el2 = lst2[i];\n    if (el1 === el2) {\n      res.push(el1);\n    } else {\n      res.push(el2);\n    }\n  }\n  return res;\n};\n\n/*\n  fUcNtR a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const res = [];\n  const len = lst1.length;\n  for (let i = 0; i < len; i++) {\n    const el1 = lst1[i];\n    const el2 = lst2[i];\n    if (el1 === el2) {\n      res.push(el1);\n    } else {\n      res.push(el2);\n    }\n  }\n  return res;\n};\n\n/*\n  fUcNtR a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const res = [];\n  const len = lst1.length;\n  for (let i = 0; i < len; i++) {\n    const el1 = lst1[i];\n    const el2 = lst2[i];\n    if (el1 === el2) {\n      res.push(el1);\n    } else {\n      res.push(el2);\n    }\n  }\n  return res;\n};\n\n/*\n  fUcNtR a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR ", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let isMultiply = false;\n  let isMultiplyPrime = true;\n  let isMultiplyPrime2 = true;\n  let isMultiplyPrime3 = true;\n  let isMultiplyPrime5 = true;\n  let isMultiplyPrime7 = true;\n  let isMultiplyPrime9 = true;\n  let isMultiplyPrime11 = true;\n  let isMultiplyPrime13 = true;\n  let isMultiplyPrime15 = true;\n  let isMultiplyPrime17 = true;\n  let isMultiplyPrime19 = true;\n  let isMultiplyPrime23 = true;\n  let isMultiplyPrime29 = true;\n  let isMultiplyPrime31 = true;\n  let isMultiplyPrime33 = true;\n  let isMultiplyPrime35 = true;\n  let isMultiplyPrime37 = true;\n  let isMultiplyPrime39 = true;\n  let isMultiplyPrime41 = true;\n  let isMultiplyPrime43 = true;\n  let isMultiplyPrime45 = true;\n  let isMultiplyPrime47 = true;\n  let isMultiplyPrime49 = true;\n  let isMultiplyPrime51 = true;\n  let isMultiplyPrime53 = true;\n  let isMultiplyPrime55 = true;\n  let isMultiplyPrime57 = true;\n  let isMultiplyPrime59 = true;\n  let isMultiplyPrime61 = true;\n  let isMultiplyPrime63 = true;\n  let isMultiplyPrime65 = true;\n  let isMultiplyPrime67 = true;\n  let isMultiplyPrime69 = true;\n  let isMultiplyPrime71 = true;\n  let isMultiplyPrime73 = true;\n  let isMultiplyPrime75 = true;\n  let isMultiplyPrime77 = true;\n  let isMultiplyPrime79 = true;\n  let isMultiplyPrime81 = true;\n  let isMultiplyPrime83 = true;\n  let isMultiplyPrime85 = true;\n  let isMultiplyPrime87 = true;\n  let isMultiplyPrime89 = true;\n  let isMultiplyPrime91 = true;\n  let isMultiplyPrime93 = true;\n  let isMultiplyPrime95 = true;\n  let isMultiplyPrime97 = true;\n  let isMultiplyPrime99 = true;\n  let isMultiplyPrime101 = true;\n  let isMultiplyPrime103 = true;\n  let isMultiplyPrime105 = true;\n  let isMultiplyPrime107 = true;\n  let isMultiplyPrime109 = true;\n  let isMultiplyPrime111 = true;\n  let isMultiplyPrime113 = true;\n  let isMultiplyPrime115 = true;\n  let isMultiplyPrime117 = true;\n  let isMultiplyPrime119 = true;\n  let isMultiplyPrime121 = true;\n  let isMultiplyPrime123 = true;\n  let isMultiplyPrime125 = true;\n  let isMultiplyPrime127 = true;\n  let isMultiplyPrime129 = true;\n  let isMultiplyPrime131 = true;\n  let isMultiplyPrime133 = true;\n  let isMultiplyPrime135 = true;\n  let isMultiplyPrime137 = true;\n  let isMultiplyPrime139 = true;\n  let isMultiplyPrime141 = true;\n  let isMultiplyPrime143 = true;\n  let isMultiplyPrime145 = true;\n  let isMultiplyPrime147 = true;\n  let isMultiplyPrime149 = true;\n  let isMultiplyPrime151 = true;\n  let isMultiplyPrime153 = true;\n  let isMultiplyPrime155 = true;\n  let isMultiplyPrime157 = true;\n  let isMultiplyPrime159 = true;\n  let isMultiplyPrime161 = true;\n  let isMultiplyPrime163 = true;\n  let isMultiplyPrime165 = true;\n  let isMultiplyPrime167 = true;\n  let isMultiplyPrime169 = true;\n  let isMultiplyPrime171 = true;\n  let isMultiplyPrime173 = true;\n  let isMultiplyPrime175 = true;\n  let isMultiplyPrime177 = true;\n  let isMultiplyPrime179 = true;\n  let isMultiplyPrime181 = true;\n  let isMultiplyPrime183 = true;\n  let isMultiplyPrime185 = true;\n  let isMultiplyPrime187 = true;\n  let isMultiplyPrime189 = true;\n  let isMultiplyPrime191 = true;\n  let isMultiplyPrime193 = true;\n  let isMultiplyPrime195 = true;\n  let isMultiplyPrime197 = true;\n  let isMultiplyPrime199 = true;\n  let isMultiplyPrime201 = true;\n  let isMultiplyPrime203 = true;\n  let isMultiplyPrime205 = true;\n  let isMultiplyPrime207 = true;\n  let isMultiplyPrime209 = true;\n  let isMultiplyPrime211 = true;\n  let isMultiplyPrime213 = true;\n  let isMultiplyPrime215 = true;\n  let isMultiplyPrime217 = true;\n  let isMultiplyPrime219 = true;\n  let isMultiplyPrime221 = true;\n  let isMultiplyPrime223 = true;\n  let isMultiplyPrime225 = true;\n  let isMultiplyPrime227 = true;\n  let isMultiplyPrime229 = true;\n  let isMultiplyPrime231 = true;\n  let isMultiplyPrime233 = true;\n  let isMultiplyPrime235 = true;\n  let isMultiplyPrime237 = true;\n  let isMultiplyPrime239 = true;\n  let isMultiplyPrime241 = true;\n  let isMultiplyPrime243 = true;\n  let isMultiplyPrime245 = true;\n  let isMultiplyPrime247 = true;\n  let isMultiplyPrime249 = true;\n  let isMultiplyPrime251 = true;\n  let isMultiplyPrime253 = true;\n  let isMultiplyPrime255 = true;\n  let isMultiplyPrime257 = true;\n  let isMultiplyPrime259 = true;\n  let isMultiplyPrime261 = true;\n  let isMultiplyPrime263 = true;\n  let isMultiplyPrime265 = true;\n  let isMultiplyPrime267 = true;\n  let isMultiplyPrime269 = true;\n  let isMultiplyPrime271 = true;\n  let isMultiplyPrime273 = true;\n  let isMultiplyPrime275 = true;\n  let isMultiplyPrime277 = true;\n  let isMultiplyPrime279 = true;\n  let isMultiplyPrime281 = true;\n  let isMultiplyPrime283 = true;\n  let isMultiplyPrime285 = true;\n  let isMultiplyPrime287 = true;\n  let isMultiplyPrime289 = true;\n  let isMultiplyPrime291 = true;\n  let isMultiplyPrime293 = true;\n  let isMultiplyPrime295 = true;\n  let isMultiplyPrime297 = true;\n  let isMultiplyPrime299 = true;\n  let isMultiplyPrime301 = true;\n  let isMultiplyPrime303 = true;\n  let isMultiplyPrime305 = true;\n  let isMultiply", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 1!== 0) return false;\n  if (n <= 1) return true;\n  return isSimplePower(x, Math.floor(n / 1));\n};\n\n/**\n  A function that checks if a number is divisible by another number.\n  It checks if a number is divisible by 2 if n is divisible by 2 and\n  by 3 if n is divisible by 3.\n  It checks if a number is divisible by 4 if n is divisible by 4 and\n  by 5 if n is divisible by 5.\n  It checks if a number is divisible by 6 if n is divisible by 6 and\n  by 7 if n is divisible by 7.\n  It checks if a number is divisible by 8 if n is divisible by 8 and\n  by 9 if n is divisible by 9.\n  It checks if a number is divisible by 10 if n is divisible by 10 and\n  by 11 if n is divisible by 11.\n  It checks if a number is divisible by 12 if n is divisible by 12 and\n  by 13 if n is divisible by 13.\n  It checks if a number is divisible by 14 if n is divisible by 14 and\n  by 15 if n is divisible by 15.\n  It checks if a number is divisible by 16 if n is divisible by 16 and\n  by 17 if n is divisible by 17.\n  It checks if a number is divisible by 18 if n is divisible by 18 and\n  by 19 if n is divisible by 19.\n  It checks if a number is divisible by 20 if n is divisible by 20 and\n  by 21 if n is divisible by 21.\n  It checks if a number is divisible by 22 if n is divisible by 22 and\n  by 23 if n is divisible by 23.\n  It checks if a number is divisible by 24 if n is divisible by 24 and\n  by 25 if n is divisible by 25.\n  It checks if a number is divisible by 26 if n is divisible by 26 and\n  by 27 if n is divisible by 27.\n  It checks if a number is divisible by 28 if n is divisible by 28 and\n  by 29 if n is divisible by 29.\n  It checks if a number is divisible by 30 if n is divisible by 30 and\n  by 31 if n is divisible by 31.\n  It checks if a number is divisible by 32 if n is divisible by 32 and\n  by 33 if n is divisible by 33.\n  It checks if a number is divisible by 34 if n is divisible by 34 and\n  by 35 if n is divisible by 35.\n  It checks if a number is divisible by 36 if n is divisible by 36 and\n  by 37 if n is divisible by 37.\n  It checks if a number is divisible by 38 if n is divisible by 38 and\n  by 39 if n is divisible by 39.\n  It checks if a number is divisible by 40 if n is divisible by 40 and\n  by 41 if n is divisible by 41.\n  It checks if a number is divisible by 42 if n is divisible by 42 and\n  by 43 if n is divisible by 43.\n  It checks if a number is divisible by 44 if n is divisible by 44 and\n  by 45 if n is divisible by 45.\n  It checks if a number is divisible by 46 if n is divisible by 46 and\n  by 47 if n is divisible by 47.\n  It checks if a number is divisible by 48 if n is divisible by 48 and\n  by 49 if n is divisible by 49.\n  It checks if a number is divisible by 50 if n is divisible by 50 and\n  by 51 if n is divisible by 51.\n  It checks if a number is divisible by 52 if n is divisible by 52 and\n  by 53 if n is divisible by 53.\n  It checks if a number is divisible by 54 if n is divisible by 54 and\n  by 55 if n is divisible by 55.\n  It checks if a number is divisible by 56 if n is divisible by 56 and\n  by 57 if n is divisible by 57.\n  It checks if a number is divisible by 58 if n is divisible by 58 and\n  by 59 if n is divisible by 59.\n  It checks if a number is divisible by 60 if n is divisible by 60 and\n  by 61 if n is divisible by 61.\n  It checks if a number is divisible by 62 if n is divisible by 62 and\n  by 63 if n is divisible by 63.\n  It checks if a number is divisible by 64 if n is divisible by 64 and\n  by 65 if n is divisible by 65.\n  It checks if a number is divisible by 66 if n is divisible by 66 and\n  by 67 if n is divisible by 67.\n  It checks if a number is divisible by 68 if n is divisible by 68 and\n  by 69 if n is divisible by 69.\n  It checks if a number is divisible by 70 if n is divisible by 70 and\n  by 71 if n is divisible by 71.\n  It checks if a number is divisible by 72 if n is divisible by 72 and\n  by 73 if n is divisible by 73.\n  It checks if a number is divisible by 74 if n is divisible by 74 and\n  by 75 if n is divisible by 75.\n  It checks if a number is divisible by 76 if n is divisible by 76 and\n  by 77 if n is divisible by 77.\n  It checks if a number is divisible by 78 if n is divisible by 78 and\n  by 79 if n is divisible by 79.\n  It checks if a number is divisible by 80 if n is divisible by 80 and\n  by 81 if n is divisible by 81.\n  It checks if a number is divisible by 82 if n is divisible by 82 and\n  by 83 if n is divisible by 83.\n  It checks if a number is divisible by 84 if n is divisible by 84 and\n  by 85 if n is divisible by 85.\n  It checks if a number is divisible by 86 if n is divisible by 86 and\n  by 87 if n is divisible by 87.\n  It checks if a number is divisible by 88 if n is ", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === -1) return true\n  if (a === 64) return true\n  if (a === 0) return true\n  if (a === 180) return false\n  return false\n}\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === -1) return true\n  if (a === 64) return true\n  if (a === 0) return true\n  if (a === 180) return false\n  return false\n}\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === -1) return true\n  if (a === 64) return true\n  if (a === 0) return true\n  if (a === 180) return false\n  return false\n}\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === -1) return true\n  if (a === 64) return true\n  if (a === 0) return true\n  if (a === 180) return false\n  return false\n}\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === -1) return true\n  if (a === 64) return true\n  if (a === 0) return true\n  if (a === 180) return false\n  return false\n}\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === -1) return true\n  if (a === 64) return true\n  if (a === 0) return true\n  if (a === 180) return false\n  return false\n}\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === -1) return true\n  if (a === 64) return true\n  if (a === 0) return true\n  if (a === 180) return false\n  return false\n}\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === -1) return true\n  if (a === 64) return true\n  if (a === 0) return true\n  if (a === 180) return false\n  return false\n}\n\n/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  ", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=decimAl 11)=== d (=DECimal 13).\n  NoTE: You MAy asSUME tHE iNput Is aLwAys cORreCt Or EMpty strInG===\n  anD Symbols A===b===c===d===E===F aRe ALWays uPPercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=decimAl 11)=== d (=DECimal 13).\n  NoTE: You MAy asSUME tHE iNput Is aLwAys cORreCt Or EMpty strInG===\n  anD Symbols A===b===c===d===E===F aRe ALWays uPPercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArr = hexNum.split(\"\");\n  let hexNumArrLength = hexNumArr.length;\n  let hexNumArrIndex = 0;\n  let hexNumArrIndex2 = 0;\n  let hexNumArrIndex3 = 0;\n  let hexNumArrIndex4 = 0;\n  let hexNumArrIndex5 = 0;\n  let hexNumArrIndex6 = 0;\n  let hexNumArrIndex7 = 0;\n  let hexNumArrIndex8 = 0;\n  let hexNumArrIndex9 = 0;\n  let hexNumArrIndex10 = 0;\n  let hexNumArrIndex11 = 0;\n  let hexNumArrIndex12 = 0;\n  let hexNumArrIndex13 = 0;\n  let hexNumArrIndex14 = 0;\n  let hexNumArrIndex15 = 0;\n  let hexNumArrIndex16 = 0;\n  let hexNumArrIndex17 = 0;\n  let hexNumArrIndex18 = 0;\n  let hexNumArrIndex19 = 0;\n  let hexNumArrIndex20 = 0;\n  let hexNumArrIndex21 = 0;\n  let hexNumArrIndex22 = 0;\n  let hexNumArrIndex23 = 0;\n  let hexNumArrIndex24 = 0;\n  let hexNumArrIndex25 = 0;\n  let hexNumArrIndex26 = 0;\n  let hexNumArrIndex27 = 0;\n  let hexNumArrIndex28 = 0;\n  let hexNumArrIndex29 = 0;\n  let hexNumArrIndex30 = 0;\n  let hexNumArrIndex31 = 0;\n  let hexNumArrIndex32 = 0;\n  let hexNumArrIndex33 = 0;\n  let hexNumArrIndex34 = 0;\n  let hexNumArrIndex35 = 0;\n  let hexNumArrIndex36 = 0;\n  let hexNumArrIndex37 = 0;\n  let hexNumArrIndex38 = 0;\n  let hexNumArrIndex39 = 0;\n  let hexNumArrIndex40 = 0;\n  let hexNumArrIndex41 = 0;\n  let hexNumArrIndex42 = 0;\n  let hexNumArrIndex43 = 0;\n  let hexNumArrIndex44 = 0;\n  let hexNumArrIndex45 = 0;\n  let hexNumArrIndex46 = 0;\n  let hexNumArrIndex47 = 0;\n  let hexNumArrIndex48 = 0;\n  let hexNumArrIndex49 = 0;\n  let hexNumArrIndex50 = 0;\n  let hexNumArrIndex51 = 0;\n  let hexNumArrIndex52 = 0;\n  let hexNumArrIndex53 = 0;\n  let hexNumArrIndex54 = 0;\n  let hexNumArrIndex55 = 0;\n  let hexNumArrIndex56 = 0;\n  let hexNumArrIndex57 = 0;\n  let hexNumArrIndex58 = 0;\n  let hexNumArrIndex59 = 0;\n  let hexNumArrIndex60 = 0;\n  let hexNumArrIndex61 = 0;\n  let hexNumArrIndex62 = 0;\n  let hexNumArrIndex63 = 0;\n  let hexNumArrIndex64 = 0;\n  let hexNumArrIndex65 = 0;\n  let hexNumArrIndex66 = 0;\n  let hexNumArrIndex67 = 0;\n  let hexNumArrIndex68 = 0;\n  let hexNumArrIndex69 = 0;\n  let hexNumArrIndex70 = 0;\n  let hexNumArrIndex71 = 0;\n  let hexNumArrIndex72 = 0;\n  let hexNumArrIndex73 = 0;\n  let hexNumArrIndex74 = 0;\n  let hexNumArrIndex75 = 0;\n  let hexNumArrIndex76 = 0;\n  let hexNumArrIndex77 = 0;\n  let hexNumArrIndex78 = 0;\n  let hexNumArrIndex79 = 0;\n  let hexNumArrIndex80 = 0;\n  let hexNumArrIndex81 = 0;\n  let hexNumArrIndex82 = 0;\n  let hexNumArrIndex83 = 0;\n  let hexNumArrIndex84 = 0;\n  let hexNumArrIndex85 = 0;\n  let hexNumArrIndex86 = 0;\n  let hexNumArrIndex87 = 0;\n  let hexNumArrIndex88 = 0;\n  let hexNumArrIndex89 = 0;\n  let hexNumArrIndex90 = 0;\n  let hexNumArrIndex91 = 0;\n  let hexNumArrIndex92 = 0;\n  let hexNumArrIndex93 = 0;\n  let hexNumArrIndex94 = 0;\n  let hexNumArrIndex95 = 0;\n  let hexNumArrIndex96 = 0;\n  let hexNumArrIndex97 = 0;\n  let hexNumArrIndex98 = 0;\n  let hexNumArrIndex99 = 0;\n  let hexNumArrIndex100 = 0;\n  let hexNumArrIndex101 = 0;\n  let hexNumArrIndex102 = 0;\n  let hexNumArrIndex103 = 0;\n  let hexNumArrIndex104 = 0;\n  let hexNumArrIndex105 = 0;\n  let hexNumArrIndex106 = 0;\n  let hexNumArrIndex107 = 0;\n  let hexNumArrIndex108 = 0;\n  let hexNumArrIndex109 = 0;\n  let hexNumArrIndex110 = 0;\n  let hexNumArrIndex111 = 0;\n  let hexNumArrIndex112 = 0;\n  let hexNumArrIndex113 = 0;\n  let hexNumArrIndex114 = 0;\n  let hexNumArrIndex115 = 0;\n  let hexNumArrIndex116 = 0;\n  let hexNumArrIndex117 = 0;\n  let hexNumArrIndex118 = 0;\n  let hexNumArrIndex119 = 0;\n  let hexNumArrIndex120 = 0;\n  let hexNumArrIndex121 = 0;\n  let hexNumArrIndex122 = 0;\n  let hexNumArrIndex123 = 0;\n  let hexNumArrIndex124 = 0;\n  let hexNumArrIndex125 = 0;\n  let hexNumArrIndex126 = 0;\n  let hexNumArrIndex127 = 0;\n  let hexNumArrIndex128 = 0;\n  let hexNumArrIndex129 = 0;\n  let hexNumArrIndex130 = 0;\n  let hexNumArrIndex131 = 0;\n  let hexNumArrIndex132 = 0;\n  let hexNumArrIndex133 = 0;\n  let hexNumArrIndex134 = 0;\n  let hexNumArrIndex135 = 0;\n  let hexNumArrIndex136 = 0;\n  let hexNumArrIndex137 = 0;\n  let hexNumArrIndex138 = 0;\n  let hexNumArrIndex139 = 0;\n  let hexNumArrIndex140 = 0;\n  let hexNumArrIndex", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Binary FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a binaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'dB' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Binary FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a binaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'dB' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let num = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let ", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([], 2)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([], 3)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([], 4)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 4)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([], 5)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 5)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([], 6)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 6)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([], 7)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 7)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([], 8)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 8)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([], 9)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 9)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([], 10)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 10)\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* for A giveN list Of inTegErs, return A tuple Cons", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const [a, b, c] = s.split('');\n  return a === 'a' && b === 'b' && c === 'c';\n};\n\n/*\n  YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const [a, b, c] = s.split('');\n  return a === 'a' && b === 'b' && c === 'c';\n};\n\n/*\n  YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const [a, b, c] = s.split('');\n  return a === 'a' && b === 'b' && c === 'c';\n};\n\n/*\n  YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const [a, b, c] = s.split('');\n  return a === 'a' && b === 'b' && c === 'c';\n};\n\n/*\n  YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const [a, b, c] = s.split('');\n  return a === 'a' && b === 'b' && c === 'c';\n};\n\n/*\n  YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const [a, b, c] = s.split('');\n  return a === 'a' && b === 'b' && c === 'c';\n};\n\n/*\n  YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const [a, b, c] = s.split('');\n  return a === 'a' && b === 'b' && c === 'c';\n};\n\n/*\n  YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const [a, b, c] = s.split('');\n  return a === 'a' && b === 'b' && c === 'c';\n};\n\n/*\n  YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT", "passed": 0}
{"task_id": "JavaScript/81", "prompt": "/*IT is The laST weeK of The SEmesTeR And THE tEAcheR haS To give tHe grades\n  to stUDenTs. The teacheR Has beEn makiNg her Own Algorithm For GradIng.\n  ThE ONly proBleM IS, sHE hAS LoST thE cOde SHe uSed FOR gRadiNg.\n  ShE has GiVEn yOu A list of Gpas For sOme stuDEntS AnD yOu hAVE to WRite\n  A funcTiON tHat caN OutpuT a list OF LettEr grades usiNG The foLloWiNG tABle:\n           gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*IT is The laST weeK of The SEmesTeR And THE tEAcheR haS To give tHe grades\n  to stUDenTs. The teacheR Has beEn makiNg her Own Algorithm For GradIng.\n  ThE ONly proBleM IS, sHE hAS LoST thE cOde SHe uSed FOR gRadiNg.\n  ShE has GiVEn yOu A list of Gpas For sOme stuDEntS AnD yOu hAVE to WRite\n  A funcTiON tHat caN OutpuT a list OF LettEr grades usiNG The foLloWiNG tABle:\n           gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((acc, curr) => acc + curr, 0);\n  const gradesArrayMean = gradesArray.reduce((acc, curr) => acc + curr, 0) / gradesArrayLength;\n  const gradesArrayVariance = gradesArray.reduce((acc, curr) => acc + Math.pow(curr, 2), 0) / gradesArrayLength;\n  const gradesArrayStdDev = Math.sqrt(gradesArrayVariance);\n  const gradesArrayStdDeviation = gradesArrayMean * gradesArrayStdDev;\n  const gradesArrayMeanGrade = gradesArrayMean / gradesArrayLength;\n  const gradesArrayVarianceGrade = gradesArrayVariance / gradesArrayLength;\n  const gradesArrayStdDeviationGrade = gradesArrayStdDev / gradesArrayLength;\n  const gradesArrayMeanGradeGrade = gradesArrayMeanGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGrade = gradesArrayVarianceGrade / gradesArrayLength;\n  const gradesArrayStdDeviationGradeGrade = gradesArrayStdDeviationGrade / gradesArrayLength;\n  const gradesArrayMeanGradeGradeGrade = gradesArrayMeanGradeGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGradeGrade = gradesArrayVarianceGradeGrade / gradesArrayLength;\n  const gradesArrayStdDeviationGradeGrade = gradesArrayStdDeviationGradeGrade / gradesArrayLength;\n  const gradesArrayMeanGradeGradeGrade = gradesArrayMeanGradeGradeGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGradeGrade = gradesArrayVarianceGradeGradeGrade / gradesArrayLength;\n  const gradesArrayStdDeviationGradeGrade = gradesArrayStdDeviationGradeGrade / gradesArrayLength;\n  const gradesArrayMeanGradeGradeGradeGrade = gradesArrayMeanGradeGradeGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGradeGradeGrade = gradesArrayVarianceGradeGradeGrade / gradesArrayLength;\n  const gradesArrayStdDeviationGradeGradeGrade = gradesArrayStdDeviationGradeGrade / gradesArrayLength;\n  const gradesArrayMeanGradeGradeGradeGrade = gradesArrayMeanGradeGradeGradeGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGradeGradeGrade = gradesArrayVarianceGradeGradeGrade / gradesArrayLength;\n  const gradesArrayStdDeviationGradeGradeGrade = gradesArrayStdDeviationGradeGrade / gradesArrayLength;\n  const gradesArrayMeanGradeGradeGradeGrade = gradesArrayMeanGradeGradeGradeGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGradeGradeGrade = gradesArrayVarianceGradeGradeGrade / gradesArrayLength;\n  const gradesArrayStdDeviationGradeGradeGrade = gradesArrayStdDeviationGradeGrade / gradesArrayLength;\n  const gradesArrayMeanGradeGradeGradeGrade = gradesArrayMeanGradeGradeGradeGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGradeGradeGrade = gradesArrayVarianceGradeGradeGrade / gradesArrayLength;\n  const gradesArrayStdDeviationGradeGradeGrade = gradesArrayStdDeviationGradeGrade / gradesArrayLength;\n  const gradesArrayMeanGradeGradeGradeGradeGrade = gradesArrayMeanGradeGradeGradeGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGradeGradeGrade = gradesArrayVarianceGradeGradeGradeGrade / gradesArrayLength;\n  const gradesArrayStdDeviationGradeGradeGrade = gradesArrayStdDeviationGradeGrade / gradesArrayLength;\n  const gradesArrayMeanGradeGradeGradeGradeGrade = gradesArrayMeanGradeGradeGradeGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGradeGradeGradeGrade = gradesArrayVarianceGradeGradeGrade / gradesArrayLength;\n  const gradesArrayStdDeviationGradeGradeGrade = gradesArrayStdDeviationGradeGrade / gradesArrayLength;\n  const gradesArrayMeanGradeGradeGradeGradeGrade = gradesArrayMeanGradeGradeGradeGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGradeGradeGradeGrade = gradesArrayVarianceGradeGradeGrade / gradesArrayLength;\n  const gradesArrayStdDeviationGradeGradeGradeGrade = gradesArrayStdDeviationGradeGrade / gradesArrayLength;\n  const gradesArrayMeanGradeGradeGradeGradeGrade = gradesArrayMeanGradeGradeGradeGrade / gradesArrayLength;\n  const gradesArrayVarianceGradeGradeGradeGrade = gradesArrayVarianceGradeGradeGrade / gradesArrayLength;\n  const grade", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  if (length < 3) {\n    return false;\n  }\n  if (length % 2 === 0) {\n    return false;\n  }\n  if (length % 3 === 0) {\n    return false;\n  }\n  if (length % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  if (length < 3) {\n    return false;\n  }\n  if (length % 2 === 0) {\n    return false;\n  }\n  if (length % 3 === 0) {\n    return false;\n  }\n  if (length % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  if (length < 3) {\n    return false;\n  }\n  if (length % 2 === 0) {\n    return false;\n  }\n  if (length % 3 === 0) {\n    return false;\n  }\n  if (length % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  if (length < 3) {\n    return false;\n  }\n  if (length % 2 === 0) {\n    return false;\n  }\n  if (length % 3 === 0) {\n    return false;\n  }\n  if (length % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  if (length < 3) {\n    return false;\n  }\n  if (length % 2 === 0) {\n    return false;\n  }\n  if (length % 3 === 0) {\n    return false;\n  }\n  if (length % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  if (length < 3) {\n    return false;\n  }\n  if (length % 2 === 0) {\n    return false;\n  }\n  if (length % 3 === 0) {\n    return false;\n  }\n  if (length % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  if (length < 3) {\n    return false;\n  }\n  if (length % 2 === 0) {\n    return false;\n  }\n  if (length % 3 === 0) {\n    return false;\n  }\n  if (length % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  if (length < 3) {\n    return false;\n  }\n  if (length % 2 === 0) {\n    return false;\n  }\n  if (length % 3 === 0) {\n    return false;\n  }\n  if (length % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  if (length < 3) {\n    return false;\n  }\n  if (length % 2 === 0) {\n    return false;\n  }\n  if (length % 3 === 0) {\n    return false;\n  }\n  if (length % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  if (length < 3) {\n    return false;\n  }\n  if (length", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds = (n) => {\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let A = 1;\n  let B = 1;\n  let C = 1;\n  let D = 1;\n  let E = 1;\n  let F = 1;\n  let G = 1;\n  let H = 1;\n  let I = 1;\n  let J = 1;\n  let K = 1;\n  let L = 1;\n  let M = 1;\n  let N = 1;\n  let O = 1;\n  let P = 1;\n  let Q = 1;\n  let R = 1;\n  let S = 1;\n  let T = 1;\n  let U = 1;\n  let V = 1;\n  let W = 1;\n  let X = 1;\n  let Y = 1;\n  let Z = 1;\n  let a1 = 1;\n  let a2 = 1;\n  let a3 = 1;\n  let a4 = 1;\n  let a5 = 1;\n  let a6 = 1;\n  let a7 = 1;\n  let a8 = 1;\n  let a9 = 1;\n  let a10 = 1;\n  let a11 = 1;\n  let a12 = 1;\n  let a13 = 1;\n  let a14 = 1;\n  let a15 = 1;\n  let a16 = 1;\n  let a17 = 1;\n  let a18 = 1;\n  let a19 = 1;\n  let a20 = 1;\n  let a21 = 1;\n  let a22 = 1;\n  let a23 = 1;\n  let a24 = 1;\n  let a25 = 1;\n  let a26 = 1;\n  let a27 = 1;\n  let a28 = 1;\n  let a29 = 1;\n  let a30 = 1;\n  let a31 = 1;\n  let a32 = 1;\n  let a33 = 1;\n  let a34 = 1;\n  let a35 = 1;\n  let a36 = 1;\n  let a37 = 1;\n  let a38 = 1;\n  let a39 = 1;\n  let a40 = 1;\n  let a41 = 1;\n  let a42 = 1;\n  let a43 = 1;\n  let a44 = 1;\n  let a45 = 1;\n  let a46 = 1;\n  let a47 = 1;\n  let a48 = 1;\n  let a49 = 1;\n  let a50 = 1;\n  let a51 = 1;\n  let a52 = 1;\n  let a53 = 1;\n  let a54 = 1;\n  let a55 = 1;\n  let a56 = 1;\n  let a57 = 1;\n  let a58 = 1;\n  let a59 = 1;\n  let a60 = 1;\n  let a61 = 1;\n  let a62 = 3;\n  let a63 = 3;\n  let a64 = 1;\n  let a65 = 1;\n  let a66 = 1;\n  let a67 = 1;\n  let a68 = 1;\n  let a69 = 1;\n  let a70 = 1;\n  let a71 = 1;\n  let a72 = 1;\n  let a73 = 1;\n  let a74 = 1;\n  let a75 = 1;\n  let a76 = 1;\n  let a77 = 1;\n  let a78 = 1;\n  let a79 = 1;\n  let a80 = 1;\n  let a81 = 1;\n  let a82 = 3;\n  let a83 = 3;\n  let a84 = 1;\n  let a85 = 1;\n  let a86 = 1;\n  let a87 = 1;\n  let a88 = 1;\n  let a89 = 1;\n  let a91 = 1;\n  let a92 = 3;\n  let a93 = 1;\n  let a94 = 1;\n  let a95 = 1;\n  let a96 = 1;\n  let a97 = 1;\n  let a98 = 1;\n  let a99 = 1;\n  let a100 = 1;\n  let a101 = 1;\n  let a102 = 1;\n  let a103 = 1;\n  let a104 = 1;\n  let a105 = 1;\n  let a106 = 1;\n  let a107 = 1;\n  let a108 = 1;\n  let a109 = 1;\n  let a110 = 1;\n  let a111 = 1;\n  let a112 = 1;\n  let a113 = 1;\n  let a114 = 1;\n  let a115 = 1;\n  let a116 = 1;\n  let a117 = 1;\n  let a118 = 1;\n  let a119 = 1;\n  let a120 = 1;\n  let a121 = 1;\n  let a122 = 1;\n  let a123 = 1;\n  let a124 = 1;\n  let a125 = 1;\n  let a126 = 1;\n  let a127 = 1;\n  let a128 = 1;\n  let a129 = 1;\n  let a131 = 1;\n  let a132 = 1;\n  let a133 = 1;\n  let a134 = 1;\n  let a135 = 1;\n  let a136 = 1;\n  let a137 = 1;\n  let a138 = 1;\n  let a139 = 1;\n  let a140 = 1;\n  let a141 = 1;\n  let a142 = 1;\n  let a143 = 1;\n  let a144 = 1;\n  let a145 = 1;\n  let a146 = 1;\n  let a147 = 1;\n  let a148 = 1;\n  let a149 = 1;\n  let a150 = 1;\n  let a151 = 1;\n  let a152 = 1;\n  let a153 = 1;\n  let a154 = 1;\n  let a155 = 1;\n  let a156 = 1;\n  let a157 = 1;\n  let a158 = 1;\n  let a159 = 1;\n  let a160 = 1;\n  let a161 = 1;\n  let a162 = 1;\n  let a163 = 3;\n  let a164 = 3;\n  let a165 = 1;\n  let a166 = 1;\n  let a167 = 1;\n  let a168 = 1;\n  let a169 = 1;\n  let a170 = 1;\n  let a171 = 1;\n  let a172 = 1;\n  let a173 = 1;\n  let a174 = 1;\n  let a175 = 1;\n  let a176 = 1;\n  let a177 = 1;\n  let a178 = 1;\n  let a179 = 1;\n  let a180 = 1;\n  let a181 = 1;\n  let a182 = 1;\n  let a183 = 1;\n  let a184 = 1;\n  let a185 = 1;\n  let a186 = 1;\n  let a187 = 1;\n  let a188 = 1;\n  let a189 = 1;\n  let a190 = 1;\n  let a191 = 1;\n  let a192 = 1;\n  let a193 = 1;\n  let a194 = 1;\n  let a195 = 1;\n  let a196 = 1;\n  let a197 = 1;\n  let a198 = 1;\n  let a199 = 1;\n  let a200 = 1;\n  let a201 = 1;\n  let a202 = 1;\n  let a203 = 1;\n  let a204 = 1;\n  let a205 = 1;\n  let a206 = 1;\n  let a207 = 1;\n  let a208 = 1;\n  let a209 = 1;\n  let a210 = 1;\n  let a211 = 1;\n  let a212 = 1;\n  let a213 = 1;\n  let a214 = 1;\n  let a215 = 1;\n  let a216 = 1;\n  let a217 = 1;\n  let a218 = 1;\n  let a219 = 1;\n  let a220 = 1;\n  let a221 = 1;\n  let a222 = 1;\n  let a223 = 1;\n  let a224 = 1;\n  let a225 = 1;\n  let a226 = 1;\n  let a227 = 1;\n  let a228 = 1;\n  let a229 = 1;\n  let a230 = 1;\n  let a231 = 1;\n  let a232 = 1;\n  let a233 = 1;\n  let a234 = 1;\n  let a235 = 1;\n  let a236 = 1;\n  let a237 = 1;\n  let a238 = 1;\n  let a239 = 1;\n  let a240 = 1;\n  let a241 = 1;\n  let a242 = 1;\n  let a243 = 1;\n  let a244 = 1;\n  let a245 = 1;\n  let a246 = 1;\n  let a247 = 1;\n  let a248 = 1;\n  let a249 = 1;\n  let a250 = 1;\n  let a251 = 1;\n  let a252 = 1;\n  let a253 = 1;\n  let a254 = 1;\n  let a255 = 1;\n  let a256 = 1;\n  let a257 = 1;\n  let a258 = 1;\n  let a259 = 1;\n", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = \"\";\n  for (let i = 0; i < N; i++) {\n    digit = binary.slice(-2);\n    binary = binary.slice(0, -2);\n    sum += parseInt(digit, 2);\n  }\n  return sum.toString();\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = \"\";\n  for (let i = 0; i < N; i++) {\n    digit = binary.slice(-2);\n    binary = binary.slice(0, -2);\n    sum += parseInt(digit, 2);\n  }\n  return sum.toString();\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = \"\";\n  for (let i = 0; i < N; i++) {\n    digit = binary.slice(-2);\n    binary = binary.slice(0, -2);\n    sum += parseInt(digit, 2);\n  }\n  return sum.toString();\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = \"\";\n  for (let i = 0; i < N; i++) {\n    digit = binary.slice(-2);\n    binary = binary.slice(0, -2);\n    sum += parseInt(digit, 2);\n  }\n  return sum.toString();\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = \"\";\n  for (let i = 0; i < N; i++) {\n    digit = binary.slice(-2);\n    binary = binary.slice(0, -2);\n    sum += parseInt(digit, 2);\n  }\n  return sum.toString();\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = \"\";\n  for (let i = 0; i < N; i++) {\n    digit = binary.slice(-2);\n    binary = binary.slice(0, -2);\n    sum += parseInt(digit, 2);\n  }\n  return sum.toString();\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = \"\";\n  for (let i = 0; i < N; i++) {\n    digit = binary.slice(-2);\n    binary = binary.slice(0, -2);\n    sum += parseInt(digit, 2);\n  }\n  return sum.toString();\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = \"\";\n  for (let i = 0; i < N; i++) {\n    digit = binary.slice(-2);\n    binary = binary.slice(0, -2);\n    sum += parseInt(digit, 2);\n  }\n  return sum.toString();\n};\n\n/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*GIveN a non-EMpty list Of iNteGErs lst. add tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*GIveN a non-EMpty list Of iNteGErs lst. add tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let newLst = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let even = 0\n  let odd = 0\n  let evenIndex = 0\n  let oddIndex = 0\n  let evenElem = null\n  let oddElem = null\n  let evenElems\n  let oddElems\n  let evenElemsIndex\n  let oddElemsIndex\n  let evenElemsElems\n  let oddElemsElems\n  let evenElemsElemsIndex\n  let oddElemsElemsIndex\n  let evenElemsElemsElems\n  let oddElemsElemsElems\n  let evenElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let oddElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsIndex\n  let evenElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsElemsEle", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  wriTe a fuNCtioN thAt tAKes a StRIng AND rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN thAt tAKes a StRIng AND rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArr = s.split('');\n  const sArr2 = [];\n  for (let i = 0; i < sArr.length; i++) {\n    sArr2.push(sArr[i]);\n  }\n  const sArr3 = [];\n  for (let i = 0; i < sArr2.length; i++) {\n    sArr3.push(sArr2[i]);\n  }\n  const sArr4 = [];\n  for (let i = 0; i < sArr3.length; i++) {\n    sArr4.push(sArr3[i]);\n  }\n  const sArr5 = [];\n  for (let i = 0; i < sArr4.length; i++) {\n    sArr5.push(sArr4[i]);\n  }\n  const sArr6 = [];\n  for (let i = 0; i < sArr5.length; i++) {\n    sArr6.push(sArr5[i]);\n  }\n  const sArr7 = [];\n  for (let i = 0; i < sArr6.length; i++) {\n    sArr7.push(sArr6[i]);\n  }\n  const sArr8 = [];\n  for (let i = 0; i < sArr7.length; i++) {\n    sArr8.push(sArr7[i]);\n  }\n  const sArr9 = [];\n  for (let i = 0; i < sArr8.length; i++) {\n    sArr9.push(sArr8[i]);\n  }\n  const sArr10 = [];\n  for (let i = 0; i < sArr9.length; i++) {\n    sArr10.push(sArr9[i]);\n  }\n  const sArr11 = [];\n  for (let i = 0; i < sArr10.length; i++) {\n    sArr11.push(sArr10[i]);\n  }\n  const sArr12 = [];\n  for (let i = 0; i < sArr11.length; i++) {\n    sArr12.push(sArr11[i]);\n  }\n  const sArr13 = [];\n  for (let i = 0; i < sArr12.length; i++) {\n    sArr13.push(sArr12[i]);\n  }\n  const sArr14 = [];\n  for (let i = 0; i < sArr13.length; i++) {\n    sArr14.push(sArr13[i]);\n  }\n  const sArr15 = [];\n  for (let i = 0; i < sArr14.length; i++) {\n    sArr15.push(sArr14[i]);\n  }\n  const sArr16 = [];\n  for (let i = 0; i < sArr15.length; i++) {\n    sArr16.push(sArr15[i]);\n  }\n  const sArr17 = [];\n  for (let i = 0; i < sArr16.length; i++) {\n    sArr17.push(sArr16[i]);\n  }\n  const sArr18 = [];\n  for (let i = 0; i < sArr17.length; i++) {\n    sArr18.push(sArr17[i]);\n  }\n  const sArr19 = [];\n  for (let i = 0; i < sArr18.length; i++) {\n    sArr19.push(sArr18[i]);\n  }\n  const sArr20 = [];\n  for (let i = 0; i < sArr19.length; i++) {\n    sArr20.push(sArr19[i]);\n  }\n  const sArr21 = [];\n  for (let i = 0; i < sArr20.length; i++) {\n    sArr21.push(sArr20[i]);\n  }\n  const sArr22 = [];\n  for (let i = 0; i < sArr21.length; i++) {\n    sArr22.push(sArr2[i]);\n  }\n  const sArr23 = [];\n  for (let i = 0; i < sArr22.length; i++) {\n    sArr23.push(sArr22[i]);\n  }\n  const sArr24 = [];\n  for (let i = 0; i < sArr23.length; i++) {\n    sArr24.push(sArr23[i]);\n  }\n  const sArr25 = [];\n  for (let i = 0; i < sArr24.length; i++) {\n    sArr25.push(sArr24[i]);\n  }\n  const sArr26 = [];\n  for (let i = 0; i < sArr25.length; i++) {\n    sArr26.push(sArr25[i]);\n  }\n  const sArr27 = [];\n  for (let i = 0; i < sArr26.length; i++) {\n    sArr27.push(sArr26[i]);\n  }\n  const sArr28 = [];\n  for (let i = 0; i < sArr27.length; i++) {\n    sArr28.push(sArr27[i]);\n  }\n  const sArr29 = [];\n  for (let i = 0; i < sArr28.length; i++) {\n    sArr29.push(sArr28[i]);\n  }\n  const sArr30 = [];\n  for (let i = 0; i < sArr29.length; i++) {\n    sArr30.push(sArr29[i]);\n  }\n  const sArr31 = [];\n  for (let i = 0; i < sArr30.length; i++) {\n    sArr31.push(sArr30[i]);\n  }\n  const sArr32 = [];\n  for (let i = 0; i < sArr31.length; i++) {\n    sArr32.push(sArr31[i]);\n  }\n  const sArr33 = [];\n  for (let i = 0; i < sArr32.length; i++) {\n    sArr33.push(sArr32[i]);\n  }\n  const sArr34 = [];\n  for (let i = 0; i < sArr33.length; i++) {\n    sArr34.push(sArr33[i]);\n  }\n  const sArr35 = [];\n  for (let i = 0; i < sArr34.length; i++) {\n    sArr35.push(sArr34[i]);\n  }\n  const sArr36 = [];\n  for (let i = 0; i < sArr35.length; i++) {\n    sArr36.push(sArr35[i]);\n  }\n  const sArr37 = [];\n  for (let i = 0; i < sArr36.length; i++) {\n    sArr37.push(sArr36[i]);\n  }\n  const sArr38 = [];\n  for (let i = 0; i < sArr37.length; i++) {\n    sArr38.push(sArr37[i]);\n  }\n  const sArr39 = [];\n  for (let i = 0; i < sArr38.length; i++) {\n    sArr39.push(sArr38[i]);\n  }\n  const sArr40 = [];\n  for (let i = 0; i < sArr39.length; i++) {\n    sArr40.push(sArr39[i]);\n  }\n  const sArr41 = [];\n  for (let i = 0; i < sArr40.length; i++) {\n    sArr41.push(sArr40[i]);\n  }\n  const sArr42 = [];\n  for (let i = 0; i < sArr41.length; i++) {\n    sArr42.push(sArr41[i]);\n  }\n  const sArr43 = [];\n  for (let i = 0; i < sArr42.length; i++) {\n    sArr43.push(sArr42[i]);\n  }\n  const sArr44 = [];\n  for (let i = 0; i < sArr43.length; i++) {\n    sArr44.push(sArr43[i]);\n  }\n  const sArr45 = [];\n  for (let i = 0; i < sArr44.length; i++) {\n    sArr45.push(sArr44[i]);\n  }\n  const sArr46 = [];\n  for (let i = 0; i < sArr45.length; i++) {\n    sArr46.push(sArr45[i]);\n  }\n  const sArr47 = [];\n  for (let i = 0; i < sArr46.length; i++) {\n    sArr47.push(sArr46[i]);\n  }\n  const sArr48 = [];\n  for (let i = 0; i < sArr47.length; i++) {\n    sArr48.push(sArr47[i]);\n  }\n  const sArr49 = [];\n  for (let i = 0; i < sArr48.length; i++) {\n    sArr49.push(sArr48[i]);\n  }\n  const sArr50 = [];\n  for (let i = 0; i < sArr49.length; i++) {\n    sArr50.push(sArr49[i]);\n  }\n  const sArr51 = [];\n  for (let i = 0; i < sArr50.length; i++) {\n    sArr51.push(sArr50[i]);\n  }\n  const sArr52 = [];\n  for (let i = 0; i < sArr51.length; i++) {\n    sArr52.push(sArr51[i]);\n  }\n  const sArr53 = [];\n  for (let i = 0; i < sArr52.length; i++) {\n    sArr5", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2) ...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2)...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row = []\n  const rows = []\n  const row", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayInPlace = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return array;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayInPlaceInPlace = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return array;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayInPlaceInPlaceInPlace = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return array;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayInPlaceInPlaceInPlaceInPlace = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return array;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayInPlaceInPlaceInPlaceInPlaceInPlace = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return array;\n};\n\n/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, ", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (let i = 0; i < alphabetLength; i++) {\n    alphabetIndex[alphabet[i]] = i;\n  }\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = {};\n  for (", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* froM a givEN list of iNteGerS, GeneRaTE a list oF ROlLIng mAxiMUm elemeNt founD UntIl given momeNT\n  in the sEquencE.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* froM a givEN list of iNteGerS, GeneRaTE a list oF ROlLIng mAxiMUm elemeNt founD UntIl given momeNT\n  in the sEquencE.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxIndexValue = 0;\n  let maxIndexValue2 = 0;\n  let maxIndexValue3 = 0;\n  let maxIndexValue4 = 0;\n  let maxIndexValue5 = 0;\n  let maxIndexValue6 = 0;\n  let maxIndexValue7 = 0;\n  let maxIndexValue8 = 0;\n  let maxIndexValue9 = 0;\n  let maxIndexValue10 = 0;\n  let maxIndexValue11 = 0;\n  let maxIndexValue12 = 0;\n  let maxIndexValue13 = 0;\n  let maxIndexValue14 = 0;\n  let maxIndexValue15 = 0;\n  let maxIndexValue16 = 0;\n  let maxIndexValue17 = 0;\n  let maxIndexValue18 = 0;\n  let maxIndexValue19 = 0;\n  let maxIndexValue20 = 0;\n  let maxIndexValue21 = 0;\n  let maxIndexValue22 = 0;\n  let maxIndexValue23 = 0;\n  let maxIndexValue24 = 0;\n  let maxIndexValue25 = 0;\n  let maxIndexValue26 = 0;\n  let maxIndexValue27 = 0;\n  let maxIndexValue28 = 0;\n  let maxIndexValue29 = 0;\n  let maxIndexValue30 = 0;\n  let maxIndexValue31 = 0;\n  let maxIndexValue32 = 0;\n  let maxIndexValue33 = 0;\n  let maxIndexValue34 = 0;\n  let maxIndexValue35 = 0;\n  let maxIndexValue36 = 0;\n  let maxIndexValue37 = 0;\n  let maxIndexValue38 = 0;\n  let maxIndexValue39 = 0;\n  let maxIndexValue40 = 0;\n  let maxIndexValue41 = 0;\n  let maxIndexValue42 = 0;\n  let maxIndexValue43 = 0;\n  let maxIndexValue44 = 0;\n  let maxIndexValue45 = 0;\n  let maxIndexValue46 = 0;\n  let maxIndexValue47 = 0;\n  let maxIndexValue48 = 0;\n  let maxIndexValue49 = 0;\n  let maxIndexValue50 = 0;\n  let maxIndexValue51 = 0;\n  let maxIndexValue52 = 0;\n  let maxIndexValue53 = 0;\n  let maxIndexValue54 = 0;\n  let maxIndexValue55 = 0;\n  let maxIndexValue56 = 0;\n  let maxIndexValue57 = 0;\n  let maxIndexValue58 = 0;\n  let maxIndexValue59 = 0;\n  let maxIndexValue60 = 0;\n  let maxIndexValue61 = 0;\n  let maxIndexValue62 = 0;\n  let maxIndexValue63 = 0;\n  let maxIndexValue64 = 0;\n  let maxIndexValue65 = 0;\n  let maxIndexValue66 = 0;\n  let maxIndexValue67 = 0;\n  let maxIndexValue68 = 0;\n  let maxIndexValue69 = 0;\n  let maxIndexValue70 = 0;\n  let maxIndexValue71 = 0;\n  let maxIndexValue72 = 0;\n  let maxIndexValue73 = 0;\n  let maxIndexValue74 = 0;\n  let maxIndexValue75 = 0;\n  let maxIndexValue76 = 0;\n  let maxIndexValue77 = 0;\n  let maxIndexValue78 = 0;\n  let maxIndexValue79 = 0;\n  let maxIndexValue80 = 0;\n  let maxIndexValue81 = 0;\n  let maxIndexValue82 = 0;\n  let maxIndexValue83 = 0;\n  let maxIndexValue84 = 0;\n  let maxIndexValue85 = 0;\n  let maxIndexValue86 = 0;\n  let maxIndexValue87 = 0;\n  let maxIndexValue88 = 0;\n  let maxIndexValue89 = 0;\n  let maxIndexValue90 = 0;\n  let maxIndexValue91 = 0;\n  let maxIndexValue92 = 0;\n  let maxIndexValue93 = 0;\n  let maxIndexValue94 = 0;\n  let maxIndexValue95 = 0;\n  let maxIndexValue96 = 0;\n  let maxIndexValue97 = 0;\n  let maxIndexValue98 = 0;\n  let maxIndexValue99 = 0;\n  let maxIndexValue100 = 0;\n  let maxIndexValue101 = 0;\n  let maxIndexValue102 = 0;\n  let maxIndexValue103 = 0;\n  let maxIndexValue104 = 0;\n  let maxIndexValue105 = 0;\n  let maxIndexValue106 = 0;\n  let maxIndexValue107 = 0;\n  let maxIndexValue108 = 0;\n  let maxIndexValue109 = 0;\n  let maxIndexValue110 = 0;\n  let maxIndexValue111 = 0;\n  let maxIndexValue112 = 0;\n  let maxIndexValue113 = 0;\n  let maxIndexValue114 = 0;\n  let maxIndexValue115 = 0;\n  let maxIndexValue116 = 0;\n  let maxIndexValue117 = 0;\n  let maxIndexValue118 = 0;\n  let maxIndexValue119 = 0;\n  let maxIndexValue120 = 0;\n  let maxIndexValue121 = 0;\n  let maxIndexValue122 = 0;\n  let maxIndexValue123 = 0;\n  let maxIndexValue124 = 0;\n  let maxIndexValue125 = 0;\n  let maxIndexValue126 = 0;\n  let maxIndexValue127 = 0;\n  let maxIndexValue128 = 0;\n  let maxIndexValue129 = 0;\n  let maxIndexValue130 = 0;\n  let maxIndexValue131 = 0;\n  let maxIndexValue132 = 0;\n  let maxIndexValue133 = 0;\n  let maxIndexValue134 = 0;\n  let maxIndexValue135 = 0;\n  let maxIndexValue136 = 0;\n  let maxIndexValue137 = 0;\n  let maxIndexValue138 = 0;\n  let maxIndexValue139 = 0;\n  let maxIndexValue140 = 0;\n  let maxIndexValue141 = 0;\n  let maxIndexValue142 = 0;\n  let maxIndexValue143 = 0;\n  let maxIndexValue144 = 0;\n  let maxIndexValue145 = 0;\n  let maxIndexValue146 = 0;\n  let maxIndexValue147 = 0;\n  let maxIndexValue148 = 0;\n  let maxIndexValue149 = 0;\n  let maxIndexValue150 = 0;\n  let maxIndexValue151 = 0;\n  let maxIndexValue152 = 0;\n  let maxIndexValue153 = 0;\n  let maxIndexValue154 = 0;\n  let maxIndexValue155 = 0;\n  let maxIndexValue156 = 0;\n  let maxIndexValue157 = 0;\n  let maxIndexValue158 = 0;\n  let maxIndexValue159 = 0;\n  let maxIndexValue160 = 0;\n  let maxIndexValue161 = 0;\n  let maxIndexValue162 = 0;\n  let maxIndexValue163 = 0;\n  let maxIndexValue164 = 0;\n  let maxIndexValue165 = 0;\n  let maxIndexValue166 = 0;\n  let maxIndexValue167 = 0;\n  let maxIndexValue168 = 0;\n  let maxIndexValue169 = 0;\n  let maxIndexValue170 = 0;\n  let maxIndexValue171 = 0;\n  let maxIndexValue172 = 0;\n  let maxIndexValue173 = 0;\n  let maxIndexValue174 = 0;\n  let maxIndexValue175 = 0;\n  let maxIndexValue176 = 0;\n  let maxIndexValue177 = 0;\n  let maxIndexValue178 = 0;\n  let maxIndexValue179 = 0;\n  let maxIndexValue180 = 0;\n  let maxIndexValue181 = 0;\n  let maxIndexValue182 = 0;\n  let maxIndexValue183 = 0;\n  let maxIndexValue184 = 0;\n  let maxIndexValue185 = 0;\n  let maxIndexValue186 = 0;\n  let maxIndexValue187 = 0;\n  let maxIndexValue188 = 0;\n  let maxIndexValue189 = 0;\n  let maxIndexValue190 = 0;\n  let maxIndexValue191 = 0;\n  let maxIndexValue192 = 0;\n  let maxIndexValue193 = 0;\n  let maxIndexValue194 = 0;\n  let maxIndexValue195 = 0;\n  let maxIndexValue196 = 0;\n  let maxIndexValue197 = 0;\n  let maxIndexValue198 = 0;\n  let maxIndexValue199 = 0;\n  let maxIndexValue200 = 0;\n  let maxIndexValue201 = 0;\n  let maxIndexValue202 = 0;\n  let maxIndexValue203 = 0;\n  let maxIndexValue204 = 0;\n  let maxIndexValue205 = 0;\n  let maxIndexValue206 = 0;\n  let maxIndexValue", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n  let nULl = null\n  let nextSmallest = (lst) => {\n    if (lst === null) return nULl\n    let nULl = lst\n    let nextSmallest = (lst) => {\n      if (lst === null) return nULl\n      let nULl = lst\n      let nextSmallest = (lst) => {\n        if (lst === null) return nULl\n        let nULl = lst\n        let nextSmallest = (lst) => {\n          if (lst === null) return nULl\n          let nULl = lst\n          let nextSmallest = (lst) => {\n            if (lst === null) return nULl\n            let nULl = lst\n            let nextSmallest = (lst) => {\n              if (lst === null) return nULl\n              let nULl = lst\n              let nextSmallest = (lst) => {\n                if (lst === null) return nULl\n                let nULl = lst\n                let nextSmallest = (lst) => {\n                  if (lst === null) return nULl\n                  let nULl = lst\n                  let nextSmallest = (lst) => {\n                    if (lst === null) return nULl\n                    let nULl = lst\n                    let nextSmallest = (lst) => {\n                      if (lst === null) return nULl\n                      let nULl = lst\n                      let nextSmallest = (lst) => {\n                        if (lst === null) return nULl\n                        let nULl = lst\n                        let nextSmallest = (lst) => {\n                          if (lst === null) return nULl\n                          let nULl = lst\n                          let nextSmallest = (lst) => {\n                            if (lst === null) return nULl\n                            let nULl = lst\n                            let nextSmallest = (lst) => {\n                              if (lst === null) return nULl\n                              let nULl = lst\n                              let nextSmallest = (lst) => {\n                                if (lst === null) return nULl\n                                let nULl = lst\n                                let nextSmallest = (lst) => {\n                                  if (lst === null) return nULl\n                                  let nULl = lst\n                                  let nextSmallest = (lst) => {\n                                    if (lst === null) return nULl\n                                    let nULl = lst\n                                    let nextSmallest = (lst) => {\n                                      if (lst === null) return nULl\n                                      let nULl = lst\n                                      let nextSmallest = (lst) => {\n                                        if (lst === null) return nULl\n                                        let nULl = lst\n                                        let nextSmallest = (lst) => {\n                                          if (lst === null) return nULl\n                                          let nULl = lst\n                                          let nextSmallest = (lst) => {\n                                            if (lst === null) return nULl\n                                            let nULl = lst\n                                            let nextSmallest = (lst) => {\n                                              if (lst === null) return nULl\n                                              let nULl = lst\n                                              let nextSmallest = (lst) => {\n                                                let nULl = lst\n                                                let nextSmallest = (lst) => {\n                                                  if (lst === null) return nULl\n                                                  let nULl = lst\n                                                  let nextSmallest = (lst) => {\n                                                    if (lst === null) return nULl\n                                                    let nULl = lst\n                                                    let nextSmallest = (lst) => {\n                                                      if (lst === null) return nULl\n                                                      let nULl = lst\n                                                      let nextSmallest = (lst) => {\n                                                        if (lst === null) return nULl\n                                                        let nULl = lst\n                                                        let nextSmallest = (lst) => {\n                                                          if (lst === null) return nULl\n                                                          let nULl = lst\n                                                          let nextSmallest = (lst) => {\n                                                            if (lst === null) return nULl\n                                                            let nULl = lst\n                                                            let nextSmallest = (lst) => {\n                                                              let nULl = lst\n                                                              let nextSmallest = (lst) => {\n                                                                if (lst === null) return nULl\n                                                                let nULl = lst\n                                                                let nextSmallest = (lst) => {\n                                                                  if (lst === null) return nULl\n                                                                  let nULl = lst\n                                                                  let nextSmallest = (lst) => {\n                                                                    if (lst === null) return nULl\n                                                                    let nULl = lst\n                                                                    let nextSmallest = (lst) => {\n                                                                      if (lst === null) return nULl\n                                                                      let nULl = lst\n                                                                      let nextSmallest = (lst) => {\n                                                                        if (lst === null) return nULl\n                                                                        let nULl = lst\n                                                                        let nextSmallest = (lst) => {\n                                                                          if (lst === null) return nULl\n                                                                          let nULl = lst\n                                                                          let nextSmallest = (lst) => {\n                                                                            if (lst === null) return nULl\n                                                                            let nULl = lst\n                                                                            let nextSmallest = (lst) => {\n                                                                              if (lst === null) return nULl\n                                                                              let nULl = lst\n                                                                              let nextSmallest = (lst) => {\n                                                                                if (lst === null) return nULl\n                                                                                let nULl = lst\n                                                                                let nextSmallest = (lst) => {\n                                                                                  if (lst === null) return nULl\n                                                                                  let nULl = lst\n                                                                                  let nextSmallest = (lst) => {\n                                                                                    if (lst === null) return nULl\n                                                                                    let nULl = lst\n                                                                                    let nextSmallest = (lst) => {\n                                                                                      if (lst === null) return nULl\n                                                                                      let nULl = lst\n                                                                                      let nextSmallest = (lst) => {\n                                                                                        if (lst === null) return nULl\n                                                                                        let nULl = lst\n                                                                                        let nextSmallest = (lst) => {\n                                                                                          if (lst === null) return nULl\n                                                                                          let nULl = lst\n                                                                                          let nextSmallest = (lst) => {\n                                                                                            if (lst === null) return nULl\n                                                                                            let nULl = lst\n                                                                                            let nextSmallest = (lst) => {\n                                                                                              if (lst === null) return nULl\n                                                                                              let nULl = lst\n                                                                                              let nextSmallest = (lst) => {\n                                                                                                if (lst === null) return nULl\n                                                                                                let nULl = lst\n                                                                                                let nextSmallest = (lst) => {\n                                                                                                  if (lst === null) return nULl\n                                                                                                  let nULl = lst\n                                                                                                  let nextSmallest = (lst) => {\n                                                                                                    if (lst === null) return nULl\n                                                                                                    let nULl = lst\n                                                                                                    let nextSmallest = (lst) => {\n                                                                                                      if (lst === null) return nULl\n                                                                                                      let nULl = lst\n                                                                                                      let nextSmallest = (", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const [,, word] = S.split(' ');\n  return word === 'I'? 1 : 0;\n};\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const [,, word] = S.split(' ');\n  return word === 'I'? 1 : 0;\n};\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const [,, word] = S.split(' ');\n  return word === 'I'? 1 : 0;\n};\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const [,, word] = S.split(' ');\n  return word === 'I'? 1 : 0;\n};\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const [,, word] = S.split(' ');\n  return word === 'I'? 1 : 0;\n};\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const [,, word] = S.split(' ');\n  return word === 'I'? 1 : 0;\n};\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const [,, word] = S.split(' ');\n  return word === 'I'? 1 : 0;\n};\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const [,, word] = S.split(' ');\n  return word === 'I'? 1 : 0;\n};\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const [,, word] = S.split(' ');\n  return word === 'I'? ", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const isNum = Number.isInteger(x) && Number.isInteger(y)\n  const isNum2 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum3 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum4 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum5 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum6 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum7 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum8 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum9 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum10 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum11 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum12 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum13 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum14 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum15 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum16 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum17 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum18 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum19 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum20 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum21 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum22 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum23 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum24 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum25 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum26 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum27 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum28 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum29 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum30 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum31 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum32 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum33 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum34 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum35 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum36 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum37 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum38 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum39 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum40 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum41 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum42 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum43 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum44 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum45 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum46 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum47 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum48 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum49 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum50 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum51 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum52 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum53 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum54 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum55 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum56 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum57 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum58 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum59 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum60 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum61 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum62 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum63 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum64 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum65 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum66 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum67 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum68 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum69 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum70 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum71 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum72 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum73 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum74 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum75 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum76 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum77 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum78 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum79 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum80 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum81 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum82 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum83 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum84 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum85 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum86 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum87 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum88 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum89 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum90 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum91 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum92 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum93 = Number.isInteger(x) && Number.isInteger(y)\n  const isNum94 = Number.isInteger(x", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  wriTe a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  wriTe a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const encodedMessage = message\n   .split('')\n   .map(c => String.fromCharCode(c))\n   .join('')\n  return encodedMessage\n}\n\n/*\n  Decode a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (encodedMessage) => {\n  const decodedMessage = encodedMessage\n   .split('')\n   .map(c => String.fromCharCode(c))\n   .join('')\n  return decodedMessage\n}\n\n/*\n  Encode a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encodeMessage = (message) => {\n  const encodedMessage = encode(message)\n  return encodedMessage\n}\n\n/*\n  Decode a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeMessage = (encodedMessage) => {\n  const decodedMessage = decode(encodedMessage)\n  return decodedMessage\n}\n\n/*\n  Encode a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encodeMessageWithEncoding = (message) => {\n  const encodedMessage = encode(message)\n  return encodedMessage\n}\n\n/*\n  Decode a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeMessageWithEncoding = (encodedMessage) => {\n  const decodedMessage = decode(encodedMessage)\n  return decodedMessage\n}\n\n/*\n  Encode a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encodeMessageWithEncodingAndEncoding = (message) => {\n  const encodedMessage = encode(message)\n  return encodedMessage\n}\n\n/*\n  Decode a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeMessageWithEncodingAndEncoding = (encodedMessage) => {\n  const decodedMessage = decode(encodedMessage)\n  return decodedMessage\n}\n\n/*\n  Encode a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the le", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let prime = 0;\n  let count = 0;\n  let i = lst.length;\n  let j = 0;\n  let k = 0;\n  let primes = [];\n  let primesArr = [];\n  let primesArr2 = [];\n  let primesArr3 = [];\n  let primesArr4 = [];\n  let primesArr5 = [];\n  let primesArr6 = [];\n  let primesArr7 = [];\n  let primesArr8 = [];\n  let primesArr9 = [];\n  let primesArr10 = [];\n  let primesArr11 = [];\n  let primesArr12 = [];\n  let primesArr13 = [];\n  let primesArr14 = [];\n  let primesArr15 = [];\n  let primesArr16 = [];\n  let primesArr17 = [];\n  let primesArr18 = [];\n  let primesArr19 = [];\n  let primesArr20 = [];\n  let primesArr21 = [];\n  let primesArr22 = [];\n  let primesArr23 = [];\n  let primesArr24 = [];\n  let primesArr25 = [];\n  let primesArr26 = [];\n  let primesArr27 = [];\n  let primesArr28 = [];\n  let primesArr29 = [];\n  let primesArr30 = [];\n  let primesArr31 = [];\n  let primesArr32 = [];\n  let primesArr33 = [];\n  let primesArr34 = [];\n  let primesArr35 = [];\n  let primesArr36 = [];\n  let primesArr37 = [];\n  let primesArr38 = [];\n  let primesArr39 = [];\n  let primesArr40 = [];\n  let primesArr41 = [];\n  let primesArr42 = [];\n  let primesArr43 = [];\n  let primesArr44 = [];\n  let primesArr45 = [];\n  let primesArr46 = [];\n  let primesArr47 = [];\n  let primesArr48 = [];\n  let primesArr49 = [];\n  let primesArr50 = [];\n  let primesArr51 = [];\n  let primesArr52 = [];\n  let primesArr53 = [];\n  let primesArr54 = [];\n  let primesArr55 = [];\n  let primesArr56 = [];\n  let primesArr57 = [];\n  let primesArr58 = [];\n  let primesArr59 = [];\n  let primesArr60 = [];\n  let primesArr61 = [];\n  let primesArr62 = [];\n  let primesArr63 = [];\n  let primesArr64 = [];\n  let primesArr65 = [];\n  let primesArr66 = [];\n  let primesArr67 = [];\n  let primesArr68 = [];\n  let primesArr69 = [];\n  let primesArr70 = [];\n  let primesArr71 = [];\n  let primesArr72 = [];\n  let primesArr73 = [];\n  let primesArr74 = [];\n  let primesArr75 = [];\n  let primesArr76 = [];\n  let primesArr77 = [];\n  let primesArr78 = [];\n  let primesArr79 = [];\n  let primesArr80 = [];\n  let primesArr81 = [];\n  let primesArr82 = [];\n  let primesArr83 = [];\n  let primesArr84 = [];\n  let primesArr85 = [];\n  let primesArr86 = [];\n  let primesArr87 = [];\n  let primesArr88 = [];\n  let primesArr89 = [];\n  let primesArr90 = [];\n  let primesArr91 = [];\n  let primesArr92 = [];\n  let primesArr93 = [];\n  let primesArr94 = [];\n  let primesArr95 = [];\n  let primesArr96 = [];\n  let primesArr97 = [];\n  let primesArr98 = [];\n  let primesArr99 = [];\n  let primesArr100 = [];\n  let primesArr101 = [];\n  let primesArr102 = [];\n  let primesArr103 = [];\n  let primesArr104 = [];\n  let primesArr105 = [];\n  let primesArr106 = [];\n  let primesArr107 = [];\n  let primesArr108 = [];\n  let primesArr109 = [];\n  let primesArr110 = [];\n  let primesArr111 = [];\n  let primesArr112 = [];\n  let primesArr113 = [];\n  let primesArr114 = [];\n  let primesArr115 = [];\n  let primesArr116 = [];\n  let primesArr117 = [];\n  let primesArr118 = [];\n  let primesArr119 = [];\n  let primesArr120 = [];\n  let primesArr121 = [];\n  let primesArr122 = [];\n  let primesArr123 = [];\n  let primesArr124 = [];\n  let primesArr125 = [];\n  let primesArr126 = [];\n  let primesArr127 = [];\n  let primesArr128 = [];\n  let primesArr129 = [];\n  let primesArr130 = [];\n  let primesArr131 = [];\n  let primesArr132 = [];\n  let primesArr133 = [];\n  let primesArr134 = [];\n  let primesArr135 = [];\n  let primesArr136 = [];\n  let primesArr137 = [];\n  let primesArr138 = [];\n  let primesArr139 = [];\n  let primesArr140 = [];\n  let primesArr141 = [];\n  let primesArr142 = [];\n  let primesArr143 = [];\n  let primesArr144 = [];\n  let primesArr145 = [];\n  let primesArr146 = [];\n  let primesArr147 = [];\n  let primesArr148 = [];\n  let primesArr149 = [];\n  let primesArr150 = [];\n  let primesArr151 = [];\n  let primesArr152 = [];\n  let primesArr153 = [];\n  let primesArr154 = [];\n  let primesArr155 = [];\n  let primesArr156 = [];\n  let primesArr157 = [];\n  let primesArr158 = [];\n  let primesArr159 = [];\n  let primesArr160 = [];\n  let primesArr161 = [];\n  let primesArr162 = [];\n  let primesArr163 = [];\n  let primesArr164 = [];\n  let primesArr165 = [];\n  let primesArr166 = [];\n  let primesArr167 = [];\n  let primesArr168 = [];\n  let primesArr169 = [];\n  let primesArr170 = [];\n  let primesArr171 = [];\n  let primesArr172 = [];\n  let primesArr173 = [];\n  let primesArr174 = [];\n  let primesArr175 = [];\n  let primesArr176 = [];\n  let primesArr177 = [];\n  let primesArr178 = [];\n  let primesArr179 = [];\n  let primesArr180 = [];\n  let ", "passed": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  const isAllKeysLowerCase = lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()]);\n  const isAllKeysUpperCase = upperCaseKeys.every(key => dict[key] === dict[key.toUpperCase()]);\n  const isAllKeysAllLowerCase = lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()] || dict[key] === dict[key.toUpperCase()]);\n  const isAllKeysAllUpperCase = upperCaseKeys.every(key => dict[key] === dict[key.toLowerCase()] || dict[key] === dict[key.toUpperCase()]);\n  return isAllKeysAllLowerCase || isAllKeysAllUpperCase || isAllKeysAllLowerCase || isAllKeysAllUpperCase;\n};\n\n/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  const isAllKeysLowerCase = lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()]);\n  const isAllKeysUpperCase = upperCaseKeys.every(key => dict[key] === dict[key.toUpperCase()]);\n  const isAllKeysAllLowerCase = lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()] || dict[key] === dict[key.toUpperCase()]);\n  const isAllKeysAllUpperCase = upperCaseKeys.every(key => dict[key] === dict[key.toLowerCase()] || dict[key] === dict[key.toUpperCase()]);\n  return isAllKeysAllLowerCase || isAllKeysAllUpperCase || isAllKeysAllLowerCase || isAllKeysAllUpperCase;\n};\n\n/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  const isAllKeysLowerCase = lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()]);\n  const isAllKeysUpperCase = upperCaseKeys.every(key => dict[key] === dict[key.toUpperCase()]);\n  const isAllKeysAllLowerCase = lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()] || dict[key] === dict[key.toUpperCase()]);\n  const isAllKeysAllUpperCase = upperCaseKeys.every(key => dict[key] === dict[key.toLowerCase()] || dict[key] === dict[key.toUpperCase()]);\n  return isAllKeysAllLowerCase || isAllKeysAllUpperCase || isAllKeysAllLowerCase || isAllKeysAllUpperCase;\n};\n\n/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  const isAllKeysLowerCase = lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()]);\n  const isAllKeysUpperCase = upperCaseKeys.every(key => dict[key] === dict[key.toUpperCase()]);\n  const isAllKeysAllLowerCase = lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()] || dict[key] === dict[key.toUpperCase()]);\n  const isAllKeysAllUpperCase = upperCaseKeys.every(key => dict[key] === dict[key.toLowerCase()] || dict[key] === dict[key.toUpperCase()]);\n  return isAllKeysAllLowerCase || isAllKeysAllUpperCase || isAllKeys", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*IMplEment A FuncTioN thAT takEs AN noN-NEgATive IntEGer and rEturns AN arRay of the firST n\n  inteGers thAt are PriMe numbers And Less Than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*IMplEment A FuncTioN thAT takEs AN noN-NEgATive IntEGer and rEturns AN arRay of the firST n\n  inteGers thAt are PriMe numbers And Less Than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  countDownTo takes no arguments and returns an array containing the number of elements in the array that are greater than or equal to n.\n  countDownTo(5) returns [2,3]\n  countDownTo(11) returns [2,3,5,7]\n  countDownTo(0) returns []\n  countDownTo(20) returns [2,3,5,7,11,13,17,19]\n  countDownTo(1) returns []\n  countDownTo(18) returns [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  countDownToWithValue takes no arguments and returns an array containing the number of elements in the array that are greater than or equal to n and that are less than or equal to n.\n  countDownToWithValue(5, 2) returns [2,3]\n  countDownToWithValue(11, 2) returns [2,3,5,7]\n  countDownToWithValue(10, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(9, 2) returns [2,3,5,7,11,13,17]\n  countDownToWithValue(8, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(7, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(6, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(5, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(4, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(3, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(2, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(1) returns []\n  countDownToWithValue(0, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-1, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-2, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-3, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-4, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-5, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-6, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-7, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-8, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-9, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-10, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-11, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-12, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-13, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-14, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-15, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-16, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-17, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-18, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-19, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-20, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-21, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-22, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-23, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-24, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-25, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-26, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-27, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-28, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-29, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-30, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-31, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-32, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-33, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-34, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-35, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-36, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-37, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-38, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-39, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-40, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-41, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-42, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-43, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-44, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-45, 2) returns [2,3,5,7,11,13,17,19]\n  countDownToWithValue(-46, 2) returns [2,3,5,7,11,13,17,19]\n  countDown", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let res = 0;\n  \n  if (a === 0 || b === 0) {\n    return res;\n  }\n  \n  if (a === 1) {\n    res = b;\n  }\n  \n  if (b === 1) {\n    res = a;\n  }\n  \n  if (a > 0 && b > 0) {\n    res = a * b;\n  }\n  \n  return res;\n};\n\n/*\n  Sum tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let res = 0;\n  \n  if (a === 0 || b === 0) {\n    return res;\n  }\n  \n  if (a === 1) {\n    res = b;\n  }\n  \n  if (b === 1) {\n    res = a;\n  }\n  \n  if (a > 0 && b > 0) {\n    res = a + b;\n  }\n  \n  return res;\n};\n\n/*\n  Sum tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst subtract = (a, b) => {\n  let res = 0;\n  \n  if (a === 0 || b === 0) {\n    return res;\n  }\n  \n  if (a === 1) {\n    res = b;\n  }\n  \n  if (b === 1) {\n    res = a;\n  }\n  \n  if (a > 0 && b > 0) {\n    res = a - b;\n  }\n  \n  return res;\n};\n\n/*\n  Sum tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  let res = 0;\n  \n  if (a === 0 || b === 0) {\n    return res;\n  }\n  \n  if (a === 1) {\n    res = b;\n  }\n  \n  if (b === 1) {\n    res = a;\n  }\n  \n  if (a > 0 && b > 0) {\n    res = a / b;\n  }\n  \n  return res;\n};\n\n/*\n  Sum tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst modulo = (a, b) => {\n  let res = 0;\n  \n  if (a === 0 || b === 0) {\n    return res;\n  }\n  \n  if (a === 1) {\n    res = b;\n  }\n  \n  if (b === 1) {\n    res = a;\n  }\n  \n  if (a > 0 && b > 0) {\n    res = a % b;\n  }\n  \n  return res;\n};\n\n/*\n  Sum tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst compare = (a, b) => {\n  let res = 0;\n  \n  if (a === 0 || b === 0) {\n    return res;\n  }\n  \n  if (a === 1) {\n    res = b;\n  }\n  \n  if (b === 1) {\n    res = a;\n  }\n  \n  if (a > 0 && b > 0) {\n    res = a > b? 1 : -1;\n  }\n  \n  return res;\n};\n\n/*\n  Sum tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst compareTo = (a, b) => {\n  let res = 0;\n  \n  if (a === 0 || b === 0) {\n    return res;\n  }\n  \n  if (a === 1) {\n    res = b;\n  }\n  \n  if (b === 1) {\n    res = a;\n  }\n  \n  if (a > 0 && b > 0) {\n    res = a > b? 1 : -1;\n  }\n  \n  return res;\n};\n\n/*\n  Sum tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst compareTo = (a, b) => {\n  let res = 0;\n  \n  if (a === 0 || b === 0) {\n    return res;\n  }\n  \n  if (a === 1) {\n    res = b;\n  }\n  \n  if (b === 1) {\n    res = a;\n  }\n  \n  if (a > 0 && b > 0) {\n    res = a > b? 1 : -1;\n  }\n  \n  return res;\n};\n\n/*\n  Sum tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst compareTo = (a, b) => {\n  let res = 0;\n  \n  if (a === 0 || b === 0) {\n    return ", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upper = 0;\n  let upperCount = 0;\n  let upperIndex = 0;\n  let upperIndexCount = 0;\n  let upperIndexCount2 = 0;\n  let upperIndexCount3 = 0;\n  let upperIndexCount4 = 0;\n  let upperIndexCount5 = 0;\n  let upperIndexCount6 = 0;\n  let upperIndexCount7 = 0;\n  let upperIndexCount8 = 0;\n  let upperIndexCount9 = 0;\n  let upperIndexCount10 = 0;\n  let upperIndexCount11 = 0;\n  let upperIndexCount12 = 0;\n  let upperIndexCount13 = 0;\n  let upperIndexCount14 = 0;\n  let upperIndexCount15 = 0;\n  let upperIndexCount16 = 0;\n  let upperIndexCount17 = 0;\n  let upperIndexCount18 = 0;\n  let upperIndexCount19 = 0;\n  let upperIndexCount20 = 0;\n  let upperIndexCount21 = 0;\n  let upperIndexCount22 = 0;\n  let upperIndexCount23 = 0;\n  let upperIndexCount24 = 0;\n  let upperIndexCount25 = 0;\n  let upperIndexCount26 = 0;\n  let upperIndexCount27 = 0;\n  let upperIndexCount28 = 0;\n  let upperIndexCount29 = 0;\n  let upperIndexCount30 = 0;\n  let upperIndexCount31 = 0;\n  let upperIndexCount32 = 0;\n  let upperIndexCount33 = 0;\n  let upperIndexCount34 = 0;\n  let upperIndexCount35 = 0;\n  let upperIndexCount36 = 0;\n  let upperIndexCount37 = 0;\n  let upperIndexCount38 = 0;\n  let upperIndexCount39 = 0;\n  let upperIndexCount40 = 0;\n  let upperIndexCount41 = 0;\n  let upperIndexCount42 = 0;\n  let upperIndexCount43 = 0;\n  let upperIndexCount44 = 0;\n  let upperIndexCount45 = 0;\n  let upperIndexCount46 = 0;\n  let upperIndexCount47 = 0;\n  let upperIndexCount48 = 0;\n  let upperIndexCount49 = 0;\n  let upperIndexCount50 = 0;\n  let upperIndexCount51 = 0;\n  let upperIndexCount52 = 0;\n  let upperIndexCount53 = 0;\n  let upperIndexCount54 = 0;\n  let upperIndexCount55 = 0;\n  let upperIndexCount56 = 0;\n  let upperIndexCount57 = 0;\n  let upperIndexCount58 = 0;\n  let upperIndexCount59 = 0;\n  let upperIndexCount60 = 0;\n  let upperIndexCount61 = 0;\n  let upperIndexCount62 = 0;\n  let upperIndexCount63 = 0;\n  let upperIndexCount64 = 0;\n  let upperIndexCount65 = 0;\n  let upperIndexCount66 = 0;\n  let upperIndexCount67 = 0;\n  let upperIndexCount68 = 0;\n  let upperIndexCount69 = 0;\n  let upperIndexCount70 = 0;\n  let upperIndexCount71 = 0;\n  let upperIndexCount72 = 0;\n  let upperIndexCount73 = 0;\n  let upperIndexCount74 = 0;\n  let upperIndexCount75 = 0;\n  let upperIndexCount76 = 0;\n  let upperIndexCount77 = 0;\n  let upperIndexCount78 = 0;\n  let upperIndexCount79 = 0;\n  let upperIndexCount80 = 0;\n  let upperIndexCount81 = 0;\n  let upperIndexCount82 = 0;\n  let upperIndexCount83 = 0;\n  let upperIndexCount84 = 0;\n  let upperIndexCount85 = 0;\n  let upperIndexCount86 = 0;\n  let upperIndexCount87 = 0;\n  let upperIndexCount88 = 0;\n  let upperIndexCount89 = 0;\n  let upperIndexCount90 = 0;\n  let upperIndexCount91 = 0;\n  let upperIndexCount92 = 0;\n  let upperIndexCount93 = 0;\n  let upperIndexCount94 = 0;\n  let upperIndexCount95 = 0;\n  let upperIndexCount96 = 0;\n  let upperIndexCount97 = 0;\n  let upperIndexCount98 = 0;\n  let upperIndexCount99 = 0;\n  let upperIndexCount100 = 0;\n  let upperIndexCount101 = 0;\n  let upperIndexCount102 = 0;\n  let upperIndexCount103 = 0;\n  let upperIndexCount104 = 0;\n  let upperIndexCount105 = 0;\n  let upperIndexCount106 = 0;\n  let upperIndexCount107 = 0;\n  let upperIndexCount108 = 0;\n  let upperIndexCount109 = 0;\n  let upperIndexCount110 = 0;\n  let upperIndexCount111 = 0;\n  let upperIndexCount112 = 0;\n  let upperIndexCount113 = 0;\n  let upperIndexCount114 = 0;\n  let upperIndexCount115 = 0;\n  let upperIndexCount116 = 0;\n  let upperIndexCount117 = 0;\n  let upperIndexCount118 = 0;\n  let upperIndexCount119 = 0;\n  let upperIndexCount120 = 0;\n  let upperIndexCount121 = 0;\n  let upperIndexCount122 = 0;\n  let upperIndexCount123 = 0;\n  let upperIndexCount124 = 0;\n  let upperIndexCount125 = 0;\n  let upperIndexCount126 = 0;\n  let upperIndexCount127 = 0;\n  let upperIndexCount128 = 0;\n  let upperIndexCount129 = 0;\n  let upperIndexCount130 = 0;\n  let upperIndexCount131 = 0;\n  let upperIndexCount132 = 0;\n  let upperIndexCount133 = 0;\n  let upperIndexCount134 = 0;\n  let upperIndexCount135 = 0;\n  let upperIndexCount136 = 0;\n  let upperIndexCount137 = 0;\n  let upperIndexCount138 = 0;\n  let upperIndexCount139 = 0;\n  let upperIndexCount140 = 0;\n  let upperIndexCount141 = 0;\n  let upperIndexCount142 = 0;\n  let upperIndexCount143 = 0;\n  let upperIndexCount144 = 0;\n  let upperIndexCount145 = 0;\n  let upperIndexCount146 = 0;\n  let upperIndexCount147 = 0;\n  let upperIndexCount148 = 0;\n  let upperIndexCount149 = 0;\n  let upperIndexCount150 = 0;\n  let upperIndexCount151 = 0;\n  let upperIndexCount152 = 0;\n  let upperIndexCount153 = 0;\n  let upperIndexCount154 = 0;\n  let upperIndexCount155 = 0;\n  let upperIndexCount156 = 0;\n  let upperIndexCount157 = 0;\n  let upperIndexCount158 = 0;\n  let upperIndexCount159 = 0;\n  let upperIndexCount160 = 0;\n  let upperIndexCount161 = 0;\n  let upperIndexCount162 = 0;\n  let upperIndexCount163 = 0;\n  let upperIndexCount164 = 0;\n  let upperIndexCount165 = 0;\n  let upperIndexCount166 = 0;\n  let upperIndexCount167 = 0;\n  let upperIndexCount168 = 0;\n  let upperIndexCount169 = 0;\n  let upperIndexCount170 = 0;\n  let upperIndexCount171 = 0;\n  let upperIndexCount172 = 0;\n  let upperIndexCount173 = 0;\n  let upperIndexCount174 = 0;\n  let upperIndexCount175 = 0;\n  let upperIndexCount176 = 0;\n  let upperIndexCount177 = 0;\n  let upperIndexCount178 = 0;\n  let upperIndexCount179 = 0;\n  let upperIndexCount180 = 0;\n  let upperIndexCount181 = 0;\n  let upperIndexCount182 = 0;\n  let upperIndexCount183 = 0;\n  let upperIndexCount184 = 0;\n  let upperIndexCount185 = 0;\n  let upperIndexCount186 = 0;\n  let upperIndexCount187 = 0;\n  let upperIndexCount188 = 0;\n  let upperIndexCount189 = 0;\n  let upperIndexCount190 = 0;\n  let upperIndexCount191 = 0;\n  let upperIndexCount192 = 0;\n  let upperIndexCount193 = 0;\n  let upperIndexCount194 = 0;\n  let upperIndexCount195 = 0;\n  let upperIndexCount196 = 0;\n  let upperIndexCount197 = 0;\n  let upperIndexCount198 = 0;\n  let upperIndexCount199 = 0;\n  let upperIndexCount200 = 0;\n  let upperIndexCount201 = 0;\n  let upperIndexCount202 = 0;\n  let upperIndexCount203 = 0;\n  let upperIndexCount204 = 0;\n  let upperIndexCount205 = 0;\n  let upperIndexCount206 = 0;\n  let upper", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* creAte a fUNctiOn tHat TAkes A value (sTRinG) REpREsenTinG A number\n  And retURns The closest iNTeger To it. If The nuMbeR is equidiStaNt\n  frOm two INTegers, RouND It AWaY FRoM ZerO.\n  EXamPLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* creAte a fUNctiOn tHat TAkes A value (sTRinG) REpREsenTinG A number\n  And retURns The closest iNTeger To it. If The nuMbeR is equidiStaNt\n  frOm two INTegers, RouND It AWaY FRoM ZerO.\n  EXamPLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let roundedValue = Math.round(value);\n  let roundedValue2 = Math.ceil(roundedValue);\n  let roundedValue3 = Math.floor(roundedValue);\n  let roundedValue4 = Math.ceil(roundedValue2);\n  let roundedValue5 = Math.floor(roundedValue3);\n  let roundedValue6 = Math.ceil(roundedValue4);\n  let roundedValue7 = Math.floor(roundedValue5);\n  let roundedValue8 = Math.ceil(roundedValue6);\n  let roundedValue9 = Math.floor(roundedValue7);\n  let roundedValue10 = Math.ceil(roundedValue8);\n  let roundedValue11 = Math.floor(roundedValue9);\n  let roundedValue12 = Math.ceil(roundedValue10);\n  let roundedValue13 = Math.floor(roundedValue11);\n  let roundedValue14 = Math.ceil(roundedValue12);\n  let roundedValue15 = Math.floor(roundedValue13);\n  let roundedValue16 = Math.ceil(roundedValue14);\n  let roundedValue17 = Math.floor(roundedValue15);\n  let roundedValue18 = Math.ceil(roundedValue16);\n  let roundedValue19 = Math.floor(roundedValue17);\n  let roundedValue20 = Math.ceil(roundedValue18);\n  let roundedValue21 = Math.floor(roundedValue19);\n  let roundedValue22 = Math.ceil(roundedValue20);\n  let roundedValue23 = Math.floor(roundedValue21);\n  let roundedValue24 = Math.ceil(roundedValue22);\n  let roundedValue25 = Math.floor(roundedValue23);\n  let roundedValue26 = Math.ceil(roundedValue24);\n  let roundedValue27 = Math.floor(roundedValue25);\n  let roundedValue28 = Math.ceil(roundedValue26);\n  let roundedValue29 = Math.floor(roundedValue27);\n  let roundedValue30 = Math.ceil(roundedValue28);\n  let roundedValue31 = Math.floor(roundedValue29);\n  let roundedValue32 = Math.ceil(roundedValue30);\n  let roundedValue33 = Math.floor(roundedValue31);\n  let roundedValue34 = Math.ceil(roundedValue32);\n  let roundedValue35 = Math.floor(roundedValue33);\n  let roundedValue36 = Math.ceil(roundedValue34);\n  let roundedValue37 = Math.floor(roundedValue35);\n  let roundedValue38 = Math.ceil(roundedValue36);\n  let roundedValue39 = Math.floor(roundedValue37);\n  let roundedValue40 = Math.ceil(roundedValue38);\n  let roundedValue41 = Math.floor(roundedValue39);\n  let roundedValue42 = Math.ceil(roundedValue40);\n  let roundedValue43 = Math.floor(roundedValue41);\n  let roundedValue44 = Math.ceil(roundedValue42);\n  let roundedValue45 = Math.floor(roundedValue43);\n  let roundedValue46 = Math.ceil(roundedValue44);\n  let roundedValue47 = Math.floor(roundedValue45);\n  let roundedValue48 = Math.ceil(roundedValue46);\n  let roundedValue49 = Math.floor(roundedValue47);\n  let roundedValue50 = Math.ceil(roundedValue48);\n  let roundedValue51 = Math.floor(roundedValue49);\n  let roundedValue52 = Math.ceil(roundedValue50);\n  let roundedValue53 = Math.floor(roundedValue51);\n  let roundedValue54 = Math.ceil(roundedValue52);\n  let roundedValue55 = Math.floor(roundedValue53);\n  let roundedValue56 = Math.ceil(roundedValue54);\n  let roundedValue57 = Math.floor(roundedValue55);\n  let roundedValue58 = Math.ceil(roundedValue56);\n  let roundedValue59 = Math.floor(roundedValue57);\n  let roundedValue60 = Math.ceil(roundedValue58);\n  let roundedValue61 = Math.floor(roundedValue59);\n  let roundedValue62 = Math.ceil(roundedValue60);\n  let roundedValue63 = Math.floor(roundedValue61);\n  let roundedValue64 = Math.ceil(roundedValue62);\n  let roundedValue65 = Math.floor(roundedValue63);\n  let roundedValue66 = Math.ceil(roundedValue64);\n  let roundedValue67 = Math.floor(roundedValue65);\n  let roundedValue68 = Math.ceil(roundedValue66);\n  let roundedValue69 = Math.floor(roundedValue67);\n  let roundedValue70 = Math.ceil(roundedValue68);\n  let roundedValue71 = Math.floor(roundedValue69);\n  let roundedValue72 = Math.ceil(roundedValue70);\n  let roundedValue73 = Math.floor(roundedValue71);\n  let roundedValue74 = Math.ceil(roundedValue72);\n  let roundedValue75 = Math.floor(roundedValue73);\n  let roundedValue76 = Math.ceil(roundedValue74);\n  let roundedValue77 = Math.floor(roundedValue75);\n  let roundedValue78 = Math.ceil(roundedValue76);\n  let roundedValue79 = Math.floor(roundedValue77);\n  let roundedValue80 = Math.ceil(roundedValue78);\n  let roundedValue81 = Math.floor(roundedValue79);\n  let roundedValue82 = Math.ceil(roundedValue80);\n  let roundedValue83 = Math.floor(roundedValue81);\n  let roundedValue84 = Math.ceil(roundedValue82);\n  let roundedValue85 = Math.floor(roundedValue83);\n  let roundedValue86 = Math.ceil(roundedValue84);\n  let roundedValue87 = Math.floor(roundedValue85);\n  let roundedValue88 = Math.ceil(roundedValue86);\n  let roundedValue89 = Math.floor(roundedValue87);\n  let roundedValue90 = Math.ceil(roundedValue88);\n  let roundedValue91 = Math.floor(roundedValue89);\n  let roundedValue92 = Math.ceil(roundedValue90);\n  let roundedValue93 = Math.floor(roundedValue91);\n  let roundedValue94 = Math.ceil(roundedValue92);\n  let roundedValue95 = Math.floor(roundedValue93);\n  let roundedValue96 = Math.ceil(roundedValue94);\n  let roundedValue97 = Math.floor(roundedValue95);\n  let roundedValue98 = Math.ceil(roundedValue96);\n  let roundedValue99 = Math.floor(roundedValue97);\n  let roundedValue100 = Math.ceil(roundedValue98);\n  let roundedValue101 = Math.floor(roundedValue99);\n  let roundedValue102 = Math.ceil(roundedValue100);\n  let roundedValue103 = Math.floor(roundedValue101);\n  let roundedValue104 = Math.ceil(roundedValue102);\n  let roundedValue105 = Math.floor(roundedValue103);\n  let roundedValue106 = Math.ceil(rounded", "passed": 0}
