{"task_id": "JavaScript/0", "prompt": "/* crack if in given list of numbers, are any two numbers closer to each early than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* crack if in given list of numbers, are any two numbers closer to each early than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closest = numbers.reduce((prev, curr) => {\n    const diff = curr - prev;\n    if (diff < threshold) {\n      return curr;\n    }\n    return prev;\n  }, Number.POSITIVE_INFINITY);\n  return closest === Number.POSITIVE_INFINITY || closest === Number.NEGATIVE_INFINITY;\n};\n\n/**\n * Returns true if the given array contains all elements in the given array.\n * \n * >>> hasAllElements([1, 2, 3], 1)\n * true\n * >>> hasAllElements([1, 2, 3], 2)\n * false\n * >>> hasAllElements([1, 2, 3], 3)\n * false\n * >>> hasAllElements([1, 2, 3], 4)\n * false\n */\nconst hasAllElements = (array, value) => {\n  return array.every(element => element === value);\n};\n\n/**\n * Returns true if the given array contains any element in the given array.\n * \n * >>> hasAnyElement([1, 2, 3], 1)\n * true\n * >>> hasAnyElement([1, 2, 3], 2)\n * false\n * >>> hasAnyElement([1, 2, 3], 3)\n * false\n * >>> hasAnyElement([1, 2, 3], 4)\n * false\n */\nconst hasAnyElement = (array, value) => {\n  return array.some(element => element === value);\n};\n\n/**\n * Returns true if the given array contains all elements in the given array.\n * \n * >>> hasAllElements([1, 2, 3], 1)\n * true\n * >>> hasAllElements([1, 2, 3], 2)\n * false\n * >>> hasAllElements([1, 2, 3], 3)\n * false\n * >>> hasAllElements([1, 2, 3], 4)\n * false\n */\nconst hasAllElementsOrEqual = (array, value) => {\n  return hasAllElements(array, value) || hasAnyElement(array, value);\n};\n\n/**\n * Returns true if the given array contains any element in the given array.\n * \n * >>> hasAnyElement([1, 2, 3], 1)\n * true\n * >>> hasAnyElement([1, 2, 3], 2)\n * false\n * >>> hasAnyElement([1, 2, 3], 3)\n * false\n * >>> hasAnyElement([1, 2, 3], 4)\n * false\n */\nconst hasAnyElementOrEqual = (array, value) => {\n  return hasAnyElement(array, value) || hasAllElements(array, value);\n};\n\n/**\n * Returns true if the given array contains all elements in the given array.\n * \n * >>> hasAllElements([1, 2, 3], 1)\n * true\n * >>> hasAllElements([1, 2, 3], 2)\n * false\n * >>> hasAllElements([1, 2, 3], 3)\n * false\n * >>> hasAllElements([1, 2, 3], 4)\n * false\n */\nconst hasAllElementsOrEqualOrEqual = (array, value) => {\n  return hasAllElements(array, value) || hasAnyElement(array, value) || hasAllElementsOrEqual(array, value);\n};\n\n/**\n * Returns true if the given array contains any element in the given array.\n * \n * >>> hasAnyElement([1, 2, 3], 1)\n * true\n * >>> hasAnyElement([1, 2, 3], 2)\n * false\n * >>> hasAnyElement([1, 2, 3], 3)\n * false\n * >>> hasAnyElement([1, 2, 3], 4)\n * false\n */\nconst hasAnyElementOrEqualOrEqual = (array, value) => {\n  return hasAnyElement(array, value) || hasAllElementsOrEqual(array, value) || hasAnyElementOrEqual(array, value);\n};\n\n/**\n * Returns true if the given array contains all elements in the given array.\n * \n * >>> hasAllElements([1, 2, 3], 1)\n * true\n * >>> hasAllElements([1, 2, 3], 2)\n * false\n * >>> hasAllElements([1, 2, 3], 3)\n * false\n * >>> hasAllElements([1, 2, 3], 4)\n * false\n */\nconst hasAllElementsOrEqualOrEqual = (array, value) => {\n  return hasAllElements(array, value) || hasAnyElement(array, value) || hasAllElementsOrEqual(array, value) || hasAnyElementOrEqual(array, value);\n};\n\n/**\n * Returns true if the given array contains all elements in the given array.\n * \n * >>> hasAllElements([1, 2, 3], 1)\n * true\n * >>> hasAllElements([1, 2, 3], 2)\n * false\n * >>> hasAllElements([1, 2, 3], 3)\n * false\n * >>> hasAllElements([1, 2, 3], 4)\n * false\n */\nconst hasAllElementsOrEqualOrEqual = (array, value) => {\n  return hasAllElements(array, value) || hasAnyElement(array, value) || hasAllElementsOrEqual(array, value) || hasAnyElementOrEqual(array, value);\n};\n\n/**\n * Returns true if the given array contains all elements in the given array.\n * \n * >>> hasAllElements([1, 2, 3], 1)\n * true\n * >>> hasAllElements([1, 2, 3], 2)\n * false\n * >>> hasAllElements([1, 2, 3], 3)\n * false\n * >>> hasAllElements([1, 2, 3], 4)\n * false\n */\nconst hasAllElementsOrEqualOrEqualOrEqual = (array, value) => {\n  return hasAllElements(array, value) || hasAnyElement(array, value) || hasAllElementsOrEqual(array, value) || hasAnyElementOrEqual(array, value) || hasAnyElementOrEqual(array, value);\n};\n\n/**\n * Returns true if the given array contains all elements in the given array.\n * \n * >>> hasAllElements([1, 2, 3], 1)\n * true\n * >>> hasAllElements([1, 2, 3], 2)\n * false\n * >>> hasAllElements([1, 2, 3], 3)\n * false\n * >>> hasAllElements([1, 2, 3], 4)\n * false\n */\nconst hasAllElementsOrEqualOrEqualOrEqual = (array, value) => {\n  return hasAllElements(array, value) || hasAnyElement(array, value) || hasAllElementsOrEqual(array, value) || hasAnyElementOrEqual(array, value) || hasAnyElementOrEqual(array, value);\n};\n\n/**\n * Returns true if the given array contains all elements in the given array.\n * \n * >>> hasAllElements([1, 2, 3], 1)\n * true\n * >>> hasAllElements([1, 2, 3], 2)\n * false\n * >>> hasAllElements([1, 2, 3], 3)\n * false\n * >>> hasAllElements([1, 2, 3], 4)\n * false\n */\nconst hasAllElementsOrEqualOrEqualOrEqual = (array, value) => {\n  return hasAllElements(array, value) || hasAnyElement(array, value) || hasAllElementsOrEqual(array, value) || hasAnyElementOrEqual(array, value) || hasAnyElementOrEqual(array, value);\n};\n\n/**\n * Returns true if the given array contains all elements in the given array.\n * \n * >>> hasAllElements([1, 2, 3], 1)\n * true\n * >>> hasAllElements([1, 2, 3], 2)\n * false\n * >>> hasAllElements([1, 2, 3], 3)\n * false\n * >>> hasAllElements([1, 2, 3], 4)\n * false\n */\nconst hasAllElementsOrEqualOrEqualOrEqual = (array, value) => {\n  return hasAllElements(array, value) || hasAnyElement(array, value) || hasAllElementsOrEqual(array, value) || hasAnyElementOrEqual(array, value) || hasAnyElementOrEqual(array, value);\n};\n\n/**\n * Returns true if the given array contains all elements in the given array.\n * \n * >>> hasAllElements([1, 2, 3], 1)\n * true\n * >>> hasAllElements([1, 2, 3], 2)\n * false\n * >>> "}
{"task_id": "JavaScript/1", "prompt": "/* remark to this function is a string control multiple groups of nest parenthesis. Your goal is to \n   separate those group into separate strings and return the list of those. \n   disjoined group are balanced (each candid pair is by rights shut) and not nested within each early \n   Ignore any spaces in the input signal chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* remark to this function is a string control multiple groups of nest parenthesis. Your goal is to \n   separate those group into separate strings and return the list of those. \n   disjoined group are balanced (each candid pair is by rights shut) and not nested within each early \n   Ignore any spaces in the input signal chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* remark to this function is a string control multiple groups of nest parenthesis. Your goal is to \n   separate those group into separate strings and return the list of those. \n   disjoined group are balanced (each candid pair is by rights shut) and not nested within each early \n   Ignore any spaces in the input signal chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* remark to this function is a string control multiple groups of nest parenthesis. Your goal is to \n   separate those group into separate strings and return the list of those. \n   disjoined group are balanced (each candid pair is by rights shut) and not nested within each early \n   Ignore any spaces in the input signal chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups3 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* remark to this function is a string control multiple groups of nest parenthesis. Your goal is to \n   separate those group into separate strings and return the list of those. \n   disjoined group are balanced (each candid pair is by rights shut) and not nested within each early \n   Ignore any spaces in the input signal chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups4 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* remark to this function is a string control multiple groups of nest parenthesis. Your goal is to \n   separate those group into separate strings and return the list of those. \n   disjoined group are balanced (each candid pair is by rights shut) and not nested within each early \n   Ignore any spaces in the input signal chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups5 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* remark to this function is a string control multiple groups of nest parenthesis. Your goal is to \n   separate those group into separate strings and return the list of those. \n   disjoined group are balanced (each candid pair is by rights shut) and not nested within each early \n   Ignore any spaces in the input signal chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups6 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* remark to this function is a string control multiple groups of nest parenthesis. Your goal is to \n   separate those group into separate strings and return the list of those. \n   disjoined group are balanced (each candid pair is by rights shut) and not nested within each early \n   Ignore any spaces in the input signal chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups7 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    paren_group.forEach((item) => {\n      if (item.trim().length > 0) {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* remark to this function is a string control multiple groups of nest parenthesis. Your goal is to \n   separate those group into separate strings and return the list of those. \n   disjoined group are balanced (each candid pair is by rights shut) and not nested within each early \n   Ignore any spaces in the input signal chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups8 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];"}
{"task_id": "JavaScript/2", "prompt": "/* give a positive float degree number, it can be disintegrate into \n   and integer contribution (largest integer humble than given number) and decimals \n   (leftover part constantly humble than 1). \n\n   retort the decimal contribution of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* give a positive float degree number, it can be disintegrate into \n   and integer contribution (largest integer humble than given number) and decimals \n   (leftover part constantly humble than 1). \n\n   retort the decimal contribution of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1\n  const fraction = num - remainder * Math.pow(10, decimals)\n  return parseFloat((fraction * Math.pow(10, decimals)).toFixed(decimals))\n}\n\n/* \n   round a number to the nearest integer. \n   \n   retort the rounded number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundNumber = (number) => {\n  const num = parseFloat(number)\n  const decimals = Math.floor(Math.log(num) / Math.LN10)\n  const remainder = num % 1"}
{"task_id": "JavaScript/3", "prompt": "/* You're give a list of deposit and withdrawal operations on a depository financial institution score that starts with \n   zero balance. Your undertaking is to detect if at any point the balance of account fallls below zero, and \n   at that point function should return dependable. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You're give a list of deposit and withdrawal operations on a depository financial institution score that starts with \n   zero balance. Your undertaking is to detect if at any point the balance of account fallls below zero, and \n   at that point function should return dependable. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance < 0;\n};\n\nmodule.exports = { belowZero, aboveZero };\n\n},{}],9:[function(require,module,exports){\nconst { aboveZero, belowZero } = require('./helpers');\n\nconst isUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0;\n};\n\nconst isUnderstandableWithBalance = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100;\n};\n\nconst isUnderstandableWithBalanceAndUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations);\n};\n\nconst isUnderstandableWithBalanceAndUnderstandableWithBalance = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations) && isUnderstandableWithBalance(operations);\n};\n\nconst isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations) && isUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandable(operations);\n};\n\nconst isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations) && isUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandable(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalance(operations);\n};\n\nconst isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations) && isUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandable(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable(operations);\n};\n\nconst isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations) && isUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandable(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable(operations);\n};\n\nconst isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations) && isUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandable(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable(operations);\n};\n\nconst isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations) && isUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandable(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable(operations);\n};\n\nconst isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations) && isUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandable(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable(operations);\n};\n\nconst isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations) && isUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandable(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable(operations);\n};\n\nconst isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable = (operations) => {\n  let balance = 0;\n  operations.forEach(operation => {\n    balance += operation.amount;\n  });\n  return balance > 0 && balance < 100 && isUnderstandable(operations) && isUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandable(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalance(operations) && isUnderstandableWithBalanceAndUnderstandableWithBalanceAndUnderstandable(operations);\n};\n\nconst "}
{"task_id": "JavaScript/4", "prompt": "/* For a give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute deviation between each \n   element and a centerpoint (mean in this font ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute deviation between each \n   element and a centerpoint (mean in this font ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  let sumOfSquares = 0;\n  let sumOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let sumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSqu"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a phone number 'delimeter' between every two consecutive elements of stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Insert a phone number 'delimeter' between every two consecutive elements of stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === delimeter) {\n      result.push(numbers[i])\n      i++\n      j = 0\n    } else {\n      result.push(numbers[i])\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * Split a list into two lists based on a predicate.\n *\n * Splitting is done by returning the first `splits` elements of the original list\n * and the remainder of the list after splitting occurs.\n *\n * If `predicate` is falsy, returns `[list[0], list]`.\n *\n * If `predicate` is truthy, returns `[list[0], list.slice(1), list]`.\n *\n * If `predicate` is `null` or `undefined`, returns `[list[0], list]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13), list.slice(14)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13), list.slice(14), list.slice(15)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13), list.slice(14), list.slice(15), list.slice(16)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13), list.slice(14), list.slice(15), list.slice(16), list.slice(17)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13), list.slice(14), list.slice(15), list.slice(16), list.slice(17), list.slice(18)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13), list.slice(14), list.slice(15), list.slice(16), list.slice(17), list.slice(18), list.slice(19)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13), list.slice(14), list.slice(15), list.slice(16), list.slice(17), list.slice(18), list.slice(19), list.slice(20)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13), list.slice(14), list.slice(15), list.slice(16), list.slice(17), list.slice(18), list.slice(19), list.slice(20), list.slice(21)]`.\n *\n * If `predicate` is an array, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13), list.slice(14), list.slice(15), list.slice(16), list.slice(17), list.slice(18), list.slice(19), list.slice(20), list.slice(21), list.slice(22)]`.\n *\n * If `predicate` is an object, returns `[list[0], list.slice(1), list.slice(2), list.slice(3), list.slice(4), list.slice(5), list.slice(6), list.slice(7), list.slice(8), list.slice(9), list.slice(10), list.slice(11), list.slice(12), list.slice(13), list.slice(14), list.slice(15), list.slice(16), list.slice(17), list.slice(18), list.slice(19), list.slice(20), list.slice(21), list.slice(22), list.slice(23)]"}
{"task_id": "JavaScript/6", "prompt": "/* remark to this function is a string defend multiple group for nested parenthesis separated by spaces. \n   For each of the group, output the deep grade of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nest while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* remark to this function is a string defend multiple group for nested parenthesis separated by spaces. \n   For each of the group, output the deep grade of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nest while (( ()) ) receive three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = []\n  const paren_stack_count = 0\n  const paren_stack_counts = []\n  const paren_stack_counts_length = []\n  const paren_stack_counts_lengths = []\n  const paren_stack_counts_lengths_length = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack_counts_lengths_lengths = []\n  const paren_stack"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an remark list of strings only for ones that check give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an remark list of strings only for ones that check give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrder = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring + 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverseReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverseReverseReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverseReverseReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverseReverseReverseReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverseReverseReverseReverseReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0 && string.indexOf(substring) === string.length - substring - 1)\n}\n\n/**\n * Filter an remark list of strings only for ones that check give substring\n * and are in given order\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ba')\n * ['array', 'cde', 'bacd']\n */\nconst filterBySubstringOrderReverseReverseReverse"}
{"task_id": "JavaScript/8", "prompt": "/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty sum should be equal to 0 and empty product should be adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give list of integers, return a tuple dwell of a union and a intersection of all the integer in a list.\n   Empty "}
{"task_id": "JavaScript/9", "prompt": "/* From a give list of integers, render a list of roll maximal element find until given here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a give list of integers, render a list of roll maximal element find until given here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxNumber = 0;\n  let maxNumberIndex = 0;\n  let maxNumberNumber = 0;\n  let maxNumberNumberIndex = 0;\n  let maxNumberNumberNumber = 0;\n  let maxNumberNumberIndex = 0;\n  let maxNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumber = 0;\n  let maxNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumberIndex = 0;\n  let maxNumberNumberNumberNumber"}
{"task_id": "JavaScript/10", "prompt": "/* quiz if gniven strig be a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the brusque palindrome that begins with a supplied string.\n   Algorithm theme is dim-witted: \n   - determine the retentive suffix of supplied string that is a palindrome. \n   - Append to the goal of the string reversion of a string prefix that come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* quiz if gniven strig be a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the brusque palindrome that begins with a supplied string.\n   Algorithm theme is dim-witted: \n   - determine the retentive suffix of supplied string that is a palindrome. \n   - Append to the goal of the string reversion of a string prefix that come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const retentiveSuffix = string\n   .split('')\n   .reverse()\n   .join('');\n  const prefix = retentiveSuffix.split('').reverse().join('');\n  return prefix + retentiveSuffix;\n}\n\n/* Find the longest palindrome in the given string that begins with a supplied string.\n   Algorithm theme is dim-witted: \n   - determine the retentive suffix of supplied string that is a palindrome. \n   - Append to the goal of the string reversion of a string prefix that come before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'catac'\n  >>> longestPalindrome('cata')\n  'catac'\n  >>> longestPalindrome('catac')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const retentiveSuffix = string\n   .split('')\n   .reverse()\n   .join('');\n  const prefix = retentiveSuffix.split('').reverse().join('');\n  return prefix + retentiveSuffix;\n}\n\n/* Find the longest palindrome in the given string that begins with a supplied string.\n   Algorithm theme is dim-witted: \n   - determine the retentive suffix of supplied string that is a palindrome. \n   - Append to the goal of the string reversion of a string prefix that come before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'catac'\n  >>> longestPalindrome('cata')\n  'catac'\n  >>> longestPalindrome('catac')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const retentiveSuffix = string\n   .split('')\n   .reverse()\n   .join('');\n  const prefix = retentiveSuffix.split('').reverse().join('');\n  return prefix + retentiveSuffix;\n}\n\n/* Find the longest palindrome in the given string that begins with a supplied string.\n   Algorithm theme is dim-witted: \n   - determine the retentive suffix of supplied string that is a palindrome. \n   - Append to the goal of the string reversion of a string prefix that come before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'catac'\n  >>> longestPalindrome('cata')\n  'catac'\n  >>> longestPalindrome('catac')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const retentiveSuffix = string\n   .split('')\n   .reverse()\n   .join('');\n  const prefix = retentiveSuffix.split('').reverse().join('');\n  return prefix + retentiveSuffix;\n}\n\n/* Find the longest palindrome in the given string that begins with a supplied string.\n   Algorithm theme is dim-witted: \n   - determine the retentive suffix of supplied string that is a palindrome. \n   - Append to the goal of the string reversion of a string prefix that come before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'catac'\n  >>> longestPalindrome('cata')\n  'catac'\n  >>> longestPalindrome('catac')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const retentiveSuffix = string\n   .split('')\n   .reverse()\n   .join('');\n  const prefix = retentiveSuffix.split('').reverse().join('');\n  return prefix + retentiveSuffix;\n}\n\n/* Find the longest palindrome in the given string that begins with a supplied string.\n   Algorithm theme is dim-witted: \n   - determine the retentive suffix of supplied string that is a palindrome. \n   - Append to the goal of the string reversion of a string prefix that come before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'catac'\n  >>> longestPalindrome('cata')\n  'catac'\n  >>> longestPalindrome('catac')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const retentiveSuffix = string\n   .split('')\n   .reverse()\n   .join('');\n  const prefix = retentiveSuffix.split('').reverse().join('');\n  return prefix + retentiveSuffix;\n}\n\n/* Find the longest palindrome in the given string that begins with a supplied string.\n   Algorithm theme is dim-witted: \n   - determine the retentive suffix of supplied string that is a palindrome. \n   - Append to the goal of the string reversion of a string prefix that come before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'catac'\n  >>> longestPalindrome('cata')\n  'catac'\n  >>> longestPalindrome('catac')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const retentiveSuffix = string\n   .split('')\n   .reverse()\n   .join('');\n  const prefix = retentiveSuffix.split('').reverse().join('');\n  return prefix + retentiveSuffix;\n}\n\n/* Find the longest palindrome in the given string that begins with a supplied string.\n   Algorithm theme is dim-witted: \n   - determine the retentive suffix of supplied string that is a palindrome. \n   - Append to the goal of the string reversion of a string prefix that come before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'catac'\n  >>> longestPalindrome('cata')\n  'catac'\n  >>> longestPalindrome('catac')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const retentiveSuffix = string\n   .split('')\n   .reverse()\n   .join('');\n  const prefix = retentiveSuffix.split('').reverse().join('');\n  return prefix + retentiveSuffix;\n}\n\n/* Find the longest palindrome in the given string that begins with a supplied string.\n   Algorithm theme is dim-witted: \n   - determine the retentive suffix of supplied string that is a palindrome. \n   - Append to the goal of the string reversion of a string prefix that come before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'catac'\n  >>> longestPalindrome('cata')\n  'catac'\n  >>> longestPalindrome('catac')\n  'catac'"}
{"task_id": "JavaScript/11", "prompt": "/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* remark are two strings a and b consisting entirely of 1s and zero. \n   do binary XOR on these stimulation and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. fall the first one in subject of multiple \n   strings of the same distance. Return nothing in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. fall the first one in subject of multiple \n   strings of the same distance. Return nothing in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return ''\n  }\n  let longestString = ''\n  let longestDistance = 0\n  let longestIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    let string = strings[i]\n    let distance = string.length\n    if (longestDistance < distance) {\n      longestDistance = distance\n      longestIndex = i\n    }\n  }\n  return strings[longestIndex]\n}\n\n/* Given a string, return its first character and last character. \n  >>> first('abc')\n  'a'\n  >>> first('abcde')\n  'c'\n  >>> first('abcde')\n  'c'\n  */\nconst first = (string) => {\n  let firstChar = string.charAt(0)\n  let lastChar = string.charAt(string.length - 1)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> last('abc')\n  'c'\n  >>> last('abcde')\n  'de'\n  >>> last('abcde')\n  'de'\n  */\nconst last = (string) => {\n  let firstChar = string.charAt(string.length - 1)\n  let lastChar = string.charAt(0)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> middle('abc')\n  'bc'\n  >>> middle('abcde')\n  'de'\n  >>> middle('abcde')\n  'de'\n  */\nconst middle = (string) => {\n  let firstChar = string.charAt(0)\n  let lastChar = string.charAt(string.length - 1)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> prefix('abc')\n  'ab'\n  >>> prefix('abcde')\n  'abc'\n  >>> prefix('abcde')\n  'abc'\n  */\nconst prefix = (string) => {\n  let firstChar = string.charAt(0)\n  let lastChar = string.charAt(string.length - 1)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> suffix('abc')\n  'bc'\n  >>> suffix('abcde')\n  'de'\n  >>> suffix('abcde')\n  'de'\n  */\nconst suffix = (string) => {\n  let firstChar = string.charAt(string.length - 1)\n  let lastChar = string.charAt(0)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> capitalize('abc')\n  'Abc'\n  >>> capitalize('abcde')\n  'Abcde'\n  >>> capitalize('abcde')\n  'Abcde'\n  */\nconst capitalize = (string) => {\n  let firstChar = string.charAt(0)\n  let lastChar = string.charAt(string.length - 1)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> uppercase('abc')\n  'ABC'\n  >>> uppercase('abcde')\n  'ABCDE'\n  >>> uppercase('abcde')\n  'ABCDE'\n  */\nconst uppercase = (string) => {\n  let firstChar = string.charAt(0)\n  let lastChar = string.charAt(string.length - 1)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> lowercase('abc')\n  'ABC'\n  >>> lowercase('abcde')\n  'ABCDE'\n  >>> lowercase('abcde')\n  'ABCDE'\n  */\nconst lowercase = (string) => {\n  let firstChar = string.charAt(0)\n  let lastChar = string.charAt(string.length - 1)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> capitalizeFirst('abc')\n  'Abc'\n  >>> capitalizeFirst('abcde')\n  'Abcde'\n  >>> capitalizeFirst('abcde')\n  'Abcde'\n  */\nconst capitalizeFirst = (string) => {\n  let firstChar = string.charAt(0)\n  let lastChar = string.charAt(string.length - 1)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> capitalizeLast('abc')\n  'abc'\n  >>> capitalizeLast('abcde')\n  'abcde'\n  >>> capitalizeLast('abcde')\n  'abcde'\n  */\nconst capitalizeLast = (string) => {\n  let firstChar = string.charAt(string.length - 1)\n  let lastChar = string.charAt(0)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> capitalizeMiddle('abc')\n  'Abc'\n  >>> capitalizeMiddle('abcde')\n  'Abcde'\n  >>> capitalizeMiddle('abcde')\n  'Abcde'\n  */\nconst capitalizeMiddle = (string) => {\n  let firstChar = string.charAt(0)\n  let lastChar = string.charAt(string.length - 1)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> capitalizePrefix('abc')\n  'abc'\n  >>> capitalizePrefix('abcde')\n  'abc'\n  >>> capitalizePrefix('abcde')\n  'abc'\n  */\nconst capitalizePrefix = (string) => {\n  let firstChar = string.charAt(0)\n  let lastChar = string.charAt(string.length - 1)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> capitalizeSuffix('abc')\n  'abc'\n  >>> capitalizeSuffix('abcde')\n  'abc'\n  >>> capitalizeSuffix('abcde')\n  'abc'\n  */\nconst capitalizeSuffix = (string) => {\n  let firstChar = string.charAt(string.length - 1)\n  let lastChar = string.charAt(0)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> capitalizeFirstLast('abc')\n  'Abc'\n  >>> capitalizeFirstLast('abcde')\n  'Abcde'\n  >>> capitalizeFirstLast('abcde')\n  'Abcde'\n  */\nconst capitalizeFirstLast = (string) => {\n  let firstChar = string.charAt(0)\n  let lastChar = string.charAt(string.length - 1)\n  return firstChar + (lastChar? lastChar : '') \n}\n\n/* Given a string, return its first character and last character. \n  >>> capitalizeFirstLastMiddle('abc')\n  'Abc'\n  >>> capitalizeFirstLastMiddle('abcde')\n  'Abcde'\n  >>> capitalizeFirstLastMiddle('abcde')\n"}
{"task_id": "JavaScript/13", "prompt": "/* reappearance a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* reappearance a greatest common divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Returns true if a is a prime number\n */\nconst isPrime = a => {\n  if (a < 2) {\n    return false\n  }\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Returns true if a is a palindrome\n */\nconst isPalindrome = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a\n}\n\n/**\n * Returns true if a is a palindrome (case insensitive)\n */\nconst isPalindromeCaseInsensitiveCaseSensitiveCaseSensitive = a => {\n  return a.split('').reverse().join('') === a.toLowerCase()\n}\n\n/**\n * Returns true if a is a palindrome (case sensitive)\n */\nconst isPalindromeCaseSensitiveCaseSensitiveCase"}
{"task_id": "JavaScript/14", "prompt": "/* reappearance list of all prefixes from shortest to farseeing of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* reappearance list of all prefixes from shortest to farseeing of the remark string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) ==='') {\n      prefixes.push(prefix);\n      prefix = '';\n      i++;\n      j = 0;\n      k = 0;\n      l = string.length;\n      while (j < l) {\n        if (string.charAt(j) ==='') {\n          prefixes.push(prefix);\n          prefix = '';\n          j++;\n          k = 0;\n          l = string.length;\n        } else {\n          prefixes.push(string.charAt(j));\n          j++;\n        }\n      }\n    } else {\n      prefix = string.charAt(i);\n      i++;\n    }\n  }\n  return prefixes;\n};\n\n/**\n * Given a string, return all possible permutations of its characters.\n * If there are any repeated characters, return all possible permutations of their characters.\n * If there are any non-repeating characters, return all possible permutations of their characters.\n * If there are no characters, return an empty array.\n *\n * Example:\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => []\n *\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', 'def']\n * permutations(['abc', 'def']) // => ['abc', 'def', 'abc', 'def', '"}
{"task_id": "JavaScript/15", "prompt": "/* fall a string incorporate distance - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* fall a string incorporate distance - subtend number starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/**\n * Returns a string that represents the given number as a hexadecimal string.\n * If no argument is given, returns an empty string.\n *\n * >>> hexString()\n * ''\n * >>> hexString(0xFF)\n * 'FF'\n * >>> hexString(0xFF00FF)\n * 'FF00FF'\n * >>> hexString(0xFF00FF00FF)\n * 'FF00FF00FF'\n * >>> hexString(0xFF00FF00FF00FF)\n * 'FF00FF00FF00FF'\n * >>> hexString(0xFF00FF00FF00FF00FF)\n * 'FF00FF00FF00FF00FF'\n * >>> hexString(0x}
{"task_id": "JavaScript/16", "prompt": "/* give a string, find out how many clear-cut characters (regardless of font) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* give a string, find out how many clear-cut characters (regardless of font) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let charCount = 0;\n  let fontCharCount = 0;\n  let fontCharCount2 = 0;\n  let fontCharCount3 = 0;\n  let fontCharCount4 = 0;\n  let fontCharCount5 = 0;\n  let fontCharCount6 = 0;\n  let fontCharCount7 = 0;\n  let fontCharCount8 = 0;\n  let fontCharCount9 = 0;\n  let fontCharCount10 = 0;\n  let fontCharCount11 = 0;\n  let fontCharCount12 = 0;\n  let fontCharCount13 = 0;\n  let fontCharCount14 = 0;\n  let fontCharCount15 = 0;\n  let fontCharCount16 = 0;\n  let fontCharCount17 = 0;\n  let fontCharCount18 = 0;\n  let fontCharCount19 = 0;\n  let fontCharCount20 = 0;\n  let fontCharCount21 = 0;\n  let fontCharCount22 = 0;\n  let fontCharCount23 = 0;\n  let fontCharCount24 = 0;\n  let fontCharCount25 = 0;\n  let fontCharCount26 = 0;\n  let fontCharCount27 = 0;\n  let fontCharCount28 = 0;\n  let fontCharCount29 = 0;\n  let fontCharCount30 = 0;\n  let fontCharCount31 = 0;\n  let fontCharCount32 = 0;\n  let fontCharCount33 = 0;\n  let fontCharCount34 = 0;\n  let fontCharCount35 = 0;\n  let fontCharCount36 = 0;\n  let fontCharCount37 = 0;\n  let fontCharCount38 = 0;\n  let fontCharCount39 = 0;\n  let fontCharCount40 = 0;\n  let fontCharCount41 = 0;\n  let fontCharCount42 = 0;\n  let fontCharCount43 = 0;\n  let fontCharCount44 = 0;\n  let fontCharCount45 = 0;\n  let fontCharCount46 = 0;\n  let fontCharCount47 = 0;\n  let fontCharCount48 = 0;\n  let fontCharCount49 = 0;\n  let fontCharCount50 = 0;\n  let fontCharCount51 = 0;\n  let fontCharCount52 = 0;\n  let fontCharCount53 = 0;\n  let fontCharCount54 = 0;\n  let fontCharCount55 = 0;\n  let fontCharCount56 = 0;\n  let fontCharCount57 = 0;\n  let fontCharCount58 = 0;\n  let fontCharCount59 = 0;\n  let fontCharCount60 = 0;\n  let fontCharCount61 = 0;\n  let fontCharCount62 = 0;\n  let fontCharCount63 = 0;\n  let fontCharCount64 = 0;\n  let fontCharCount65 = 0;\n  let fontCharCount66 = 0;\n  let fontCharCount67 = 0;\n  let fontCharCount68 = 0;\n  let fontCharCount69 = 0;\n  let fontCharCount70 = 0;\n  let fontCharCount71 = 0;\n  let fontCharCount72 = 0;\n  let fontCharCount73 = 0;\n  let fontCharCount74 = 0;\n  let fontCharCount75 = 0;\n  let fontCharCount76 = 0;\n  let fontCharCount77 = 0;\n  let fontCharCount78 = 0;\n  let fontCharCount79 = 0;\n  let fontCharCount80 = 0;\n  let fontCharCount81 = 0;\n  let fontCharCount82 = 0;\n  let fontCharCount83 = 0;\n  let fontCharCount84 = 0;\n  let fontCharCount85 = 0;\n  let fontCharCount86 = 0;\n  let fontCharCount87 = 0;\n  let fontCharCount88 = 0;\n  let fontCharCount89 = 0;\n  let fontCharCount90 = 0;\n  let fontCharCount91 = 0;\n  let fontCharCount92 = 0;\n  let fontCharCount93 = 0;\n  let fontCharCount94 = 0;\n  let fontCharCount95 = 0;\n  let fontCharCount96 = 0;\n  let fontCharCount97 = 0;\n  let fontCharCount98 = 0;\n  let fontCharCount99 = 0;\n  let fontCharCount100 = 0;\n  let fontCharCount101 = 0;\n  let fontCharCount102 = 0;\n  let fontCharCount103 = 0;\n  let fontCharCount104 = 0;\n  let fontCharCount105 = 0;\n  let fontCharCount106 = 0;\n  let fontCharCount107 = 0;\n  let fontCharCount108 = 0;\n  let fontCharCount109 = 0;\n  let fontCharCount110 = 0;\n  let fontCharCount111 = 0;\n  let fontCharCount112 = 0;\n  let fontCharCount113 = 0;\n  let fontCharCount114 = 0;\n  let fontCharCount115 = 0;\n  let fontCharCount116 = 0;\n  let fontCharCount117 = 0;\n  let fontCharCount118 = 0;\n  let fontCharCount119 = 0;\n  let fontCharCount120 = 0;\n  let fontCharCount121 = 0;\n  let fontCharCount122 = 0;\n  let fontCharCount123 = 0;\n  let fontCharCount124 = 0;\n  let fontCharCount125 = 0;\n  let fontCharCount126 = 0;\n  let fontCharCount127 = 0;\n  let fontCharCount128 = 0;\n  let fontCharCount129 = 0;\n  let fontCharCount130 = 0;\n  let fontCharCount131 = 0;\n  let fontCharCount132 = 0;\n  let fontCharCount133 = 0;\n  let fontCharCount134 = 0;\n  let fontCharCount135 = 0;\n  let fontCharCount136 = 0;\n  let fontCharCount137 = 0;\n  let fontCharCount138 = 0;\n  let fontCharCount139 = 0;\n  let fontCharCount140 = 0;\n  let fontCharCount141 = 0;\n  let fontCharCount142 = 0;\n  let fontCharCount143 = 0;\n  let fontCharCount144 = 0;\n  let fontCharCount145 = 0;\n  let fontCharCount146 = 0;\n  let fontCharCount147 = 0;\n  let fontCharCount148 = 0;\n  let fontCharCount149 = 0;\n  let fontCharCount150 = 0;\n  let fontCharCount151 = 0;\n  let fontCharCount152 = 0;\n  let fontCharCount153 = 0;\n  let fontCharCount154 = 0;\n  let fontCharCount155 = 0;\n  let fontCharCount156 = 0;\n  let fontCharCount157 = 0;\n  let fontCharCount158 = 0;\n  let fontCharCount159 = 0;\n  let fontCharCount160 = 0;\n  let fontCharCount161 = 0;\n  let fontCharCount162 = 0;\n  let fontCharCount163 = 0;\n  let fontCharCount164 = 0;\n  let fontCharCount165 = 0;\n  let fontCharCount166 = 0;\n  let fontCharCount167 = 0;\n  let fontCharCount168 = 0;\n  let fontCharCount169 = 0;\n  let fontCharCount170 = 0;\n  let fontCharCount171 = 0;\n  let fontCharCount172 = 0;\n  let fontCharCount173 = 0;\n  let fontCharCount174 = 0;\n  let fontCharCount175 = 0;\n  let fontCharCount176 = 0;\n  let fontCharCount177 = 0;\n  let fontCharCount178 = 0;\n  let fontCharCount179 = 0;\n  let fontCharCount180 = 0;\n  let fontCharCount181 = 0;\n  let fontCharCount182 = 0;\n  let fontCharCount183 = 0;\n  let fontCharCount184 = 0;\n  let fontCharCount185 = 0;\n  let fontCharCount186 = 0;\n  let fontCharCount187 = 0;\n  let fontCharCount188 = 0;\n  let fontCharCount189 = 0;\n  let fontCharCount190 = 0;\n  let fontCharCount191 = 0;\n  let fontCharCount192 = 0;\n  let fontCharCount193 = 0;\n  let fontCharCount194 = 0;\n  let fontCharCount195 = 0;\n  let fontCharCount196 = 0;\n  let fontCharCount197 = 0;\n  let fontCharCount198 = 0;\n  let fontCharCount199 = 0;\n  let fontCharCount200 = 0;\n  let fontCharCount201 = 0;\n  let fontCharCount202 = 0;\n  let fontCharCount203 = 0;\n  let fontCharCount204 = 0;\n  let fontCharCount205 = 0;\n  let fontCharCount206 = 0;\n  let fontCharCount207 = 0;\n  let fontCharCount208 = 0;\n  let fontCharCount209 = 0;\n  let fontCharCount210"}
{"task_id": "JavaScript/17", "prompt": "/* remark to this function is a string defend melodious bill in a limited ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beat does each \n   not final. \n\n   Here is a caption: \n  ' o' - solid note, lasts four beat \n  ' o|' - half bill, lasts two beats \n  ' .|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* remark to this function is a string defend melodious bill in a limited ASCII format. \n   Your task is to parse this string and return list of integers equate to how many beat does each \n   not final. \n\n   Here is a caption: \n 'o' - solid note, lasts four beat \n 'o|' - half bill, lasts two beats \n  '.|' - quater eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const beat = parseInt(music_list[i]);\n    if (beat > 4) {\n      result.push(beat);\n    }\n  }\n  return result;\n};\n\n// Write a function that takes an array of integers and returns an array of strings that \n// represent each of the integers in ascending order. \n// \n// For example: \n// \n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] \n// \n// would return \n// \n// ['4', '2', '1', '2', '2', '1', '1', '4', '4']\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// "}
{"task_id": "JavaScript/18", "prompt": "/* recover how many times a give substring can be discover in the original string. Count overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* recover how many times a give substring can be discover in the original string. Count overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  let subLength = substring.length;\n  while (index < length) {\n    if (string.charAt(index) === substring.charAt(index)) {\n      count++;\n      index++;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/**\n * Returns a new string made from two or more strings. If the first string contains\n * all characters of the second string, it is returned unchanged.\n *\n * Examples:\n *\n * howManyTimes('abc', 'bc')\n * // 3\n *\n * howManyTimes('abc', 'b')\n * // 0\n *\n * howManyTimes('abc', 'ab')\n * // 0\n *\n * howManyTimes('abc', 'abc')\n * // 0\n *\n * howManyTimes('abc', 'abcabc')\n * // 3\n *\n * howManyTimes('abc', 'abcabc')\n * // 3\n *\n * howManyTimes('abc', 'abcabcabc')\n * // 3\n *\n * howManyTimes('abc', 'abcabcabcabc')\n * // 3\n *\n * howManyTimes('abc', 'abcabcabcabcabcabc')\n * // 3\n *\n * howManyTimes('abc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"}
{"task_id": "JavaScript/19", "prompt": "/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};\n\n/* remark is a space - delimited chain of numberals from' zero' to' nine'. \n   Valid option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string with numbers sorted from small to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  numbers.sort((a, b) => a - b);\n  return numbers.join(' ');\n};"}
{"task_id": "JavaScript/20", "prompt": "/* From a issue list of numbers (of length at least two) blue-ribbon and return two that equal the close to each \n   other and return them in order (small number, larger issue).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a issue list of numbers (of length at least two) blue-ribbon and return two that equal the close to each \n   other and return them in order (small number, larger issue).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const [closest, closestIndex] = findClosestElement(numbers);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smaller number.\n// If two elements are equal, return the one with the larger number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElement = (numbers) => {\n  const [closest, closestIndex] = findClosestElement(numbers, 0, numbers.length - 1);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElements = (numbers) => {\n  const [closest, closestIndex] = findClosestElement(numbers, 0, numbers.length - 1);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElement = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElements = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElement = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElements = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElement = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElements = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElement = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElements = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElement = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElements = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElement = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElements = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal, return the one with the largest number.\n// If two elements are equal, return the one with the smallest number.\nconst findClosestElement = (numbers, start, end) => {\n  const [closest, closestIndex] = findClosestElement(numbers, start, end);\n  return [numbers[closestIndex], closest];\n};\n\n// Given an array of numbers, return the closest element to each of those numbers.\n// If two elements are equal, return the one with the smallest number.\n// If two elements are equal"}
{"task_id": "JavaScript/21", "prompt": "/* give list of numbers (of at least two chemical element), give a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* give list of numbers (of at least two chemical element), give a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const minValue = Math.min.apply(null, numbers);\n  const maxValue = Math.max.apply(null, numbers);\n  const range = maxValue - minValue;\n  const scaledNumbers = numbers.map((n) => n * range);\n  return scaledNumbers;\n};\n\n/**\n * Given a linear transform from a list of numbers, return the list of numbers that is transformed\n * by the given transform.\n * \n * For example, given a list of numbers, where each number is the distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system\n * to the origin of the coordinate system, and each number is a distance from the origin of the coordinate system"}
{"task_id": "JavaScript/22", "prompt": "/* Filter move over list of any python values entirely for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter move over list of any python values entirely for integer\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter out any python values entirely for float\n * >>> filterFloats(['a', 3.14, 5])\n * [5.0]\n * >>> filterFloats([1, 2, 3, 'abc', {}, []])\n * [1.2, 3.14, 5.0]\n */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter out any python values entirely for string\n * >>> filterStrings(['a', 3.14, 5])\n * ['a', 3.14, 5]\n * >>> filterStrings([1, 2, 3, 'abc', {}, []])\n * ['1', 2, '3', 3, 'abc', {}, []]\n */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter out any python values entirely for boolean\n * >>> filterBooleans(['a', 3.14, 5])\n * [true, false]\n * >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n * [true, true, false, true, false]\n */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter out any python values entirely for list\n * >>> filterLists(['a', 3.14, 5])\n * [3.14, 5]\n * >>> filterLists([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3, 'abc', {}, []]\n */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter out any python values entirely for dict\n * >>> filterDicts(['a', 3.14, 5])\n * {a: 'a', 3.14: '3.14', 5: '5'}\n * >>> filterDicts([1, 2, 3, 'abc', {}, []])\n * {1: '1', 2: '2', 3: '3', abc: 'abc', 5: '5'}\n */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter out any python values entirely for set\n * >>> filterSets(['a', 3.14, 5])\n * {1, 2}\n * >>> filterSets([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3, 'abc', {}, []]\n */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='set');\n};\n\n/**\n * Filter out any python values entirely for tuple\n * >>> filterTuples(['a', 3.14, 5])\n * [3.14, 5]\n * >>> filterTuples([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3, 'abc', {}, []]\n */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter out any python values entirely for set\n * >>> filterSets(['a', 3.14, 5])\n * {1, 2}\n * >>> filterSets([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3, 'abc', {}, []]\n */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='set');\n};\n\n/**\n * Filter out any python values entirely for dict\n * >>> filterDicts(['a', 3.14, 5])\n * {a: 'a', 3.14: '3.14', 5: '5'}\n * >>> filterDicts([1, 2, 3, 'abc', {}, []])\n * {1: '1', 2: '2', 3: '3', abc: 'abc', 5: '5'}\n */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter out any python values entirely for list\n * >>> filterLists(['a', 3.14, 5])\n * [3.14, 5]\n * >>> filterLists([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3, 'abc', {}, []]\n */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter out any python values entirely for dict\n * >>> filterDicts(['a', 3.14, 5])\n * {a: 'a', 3.14: '3.14', 5: '5'}\n * >>> filterDicts([1, 2, 3, 'abc', {}, []])\n * {1: '1', 2: '2', 3: '3', abc: 'abc', 5: '5'}\n */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter out any python values entirely for set\n * >>> filterSets(['a', 3.14, 5])\n * {1, 2}\n * >>> filterSets([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3, 'abc', {}, []]\n */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='set');\n};\n\n/**\n * Filter out any python values entirely for tuple\n * >>> filterTuples(['a', 3.14, 5])\n * [3.14, 5]\n * >>> filterTuples([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3, 'abc', {}, []]\n */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter out any python values entirely for set\n * >>> filterSets(['a', 3.14, 5])\n * {1, 2}\n * >>> filterSets([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3, 'abc', {}, []]\n */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='set');\n};\n\n/**\n * Filter out any python values entirely for dict\n * >>> filterDicts(['a', 3.14, 5])\n * {a: 'a', 3.14: '3.14', 5: '5'}\n * >>> filterDicts([1, 2, 3, 'abc', {}, []])\n * {1: '1', 2: '2', 3: '3', abc: 'abc', 5: '5'}\n */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter out any python values entirely for list\n * >>> filterLists(['a', 3.14, 5])\n * [3.14, 5]\n * >>> filterLists([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3, 'abc', {}, []]\n */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter out any python values entirely for dict\n * >>> filterDicts(['a', 3.14, 5])\n * {a: 'a', 3.14: '3.14', 5: '5'}\n * >>> filterDicts([1, 2, 3, 'abc', {}, []])\n * {1: '1', 2: '2', 3: '3', abc: 'abc', 5: '5'}\n */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter out any python values entirely for set\n * >>> filterSets(['a', 3.14, 5])\n * {1, 2}\n * >>> filterSets([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3, 'abc', {}, []]\n */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='set');\n};\n\n/**\n * Filter out any python values entirely for "}
{"task_id": "JavaScript/23", "prompt": "/* reappearance length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* reappearance length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Convert string to buffer\n * If it's not a buffer, return empty buffer\n * If it's already a buffer, return it\n * If it's not a buffer, convert it to buffer\n * If it's already a buffer, convert it to buffer\n * If it's not a buffer, return empty buffer\n */\nconst str2buf = (string) => {\n  if (Buffer.isBuffer(string)) {\n    return string\n  }\n  if (typeof string!=='string') {\n    return Buffer.alloc(0)\n  }\n  return Buffer.from(string, 'utf8')\n}\n\n/**\n * Convert buffer to a string\n * If it's not a buffer, return empty string\n * If it's already a string, return it\n * If it's not a buffer, convert it to string\n * If it's already a string, convert it to string\n * If it's not a buffer, return empty string\n */\nconst buf2str = (buffer) => {\n  if (Buffer.isBuffer(buffer)) {\n    return buffer.toString('utf8')\n  }\n  if (typeof buffer!=='string') {\n    return ''\n  }\n  return buffer.toString('utf8')\n}\n\n/**\n * Convert buffer to a Uint8Array\n * If it's not a buffer, return empty Uint8Array\n * If it's already a Uint8Array, return it\n * If it's not a buffer, convert it to Uint8Array\n * If it's already a Uint8Array, convert it to Uint8Array\n * If it's not a buffer, return empty Uint8Array\n */\nconst buf2ab = (buffer) => {\n  if (Buffer.isBuffer(buffer)) {\n    return buffer\n  }\n  if (typeof buffer!=='string') {\n    return Buffer.alloc(0)\n  }\n  return Buffer.from(buffer, 'utf8')\n}\n\n/**\n * Convert Uint8Array to string\n * If it's not a buffer, return empty string\n * If it's already a string, return it\n * If it's not a buffer, convert it to string\n * If it's already a string, convert it to string\n * If it's not a buffer, return empty string\n */\nconst ab2str = (buffer) => {\n  if (Buffer.isBuffer(buffer)) {\n    return buffer.toString('utf8')\n  }\n  if (typeof buffer!=='string') {\n    return ''\n  }\n  return buffer.toString('utf8')\n}\n\n/**\n * Convert Uint8Array to buffer\n * If it's not a buffer, return empty buffer\n * If it's already a buffer, return it\n * If it's not a buffer, convert it to buffer\n * If it's already a buffer, convert it to buffer\n * If it's not a buffer, return empty buffer\n */\nconst ab2buf = (buffer) => {\n  if (Buffer.isBuffer(buffer)) {\n    return buffer\n  }\n  if (typeof buffer!=='string') {\n    return Buffer.alloc(0)\n  }\n  return Buffer.from(buffer, 'utf8')\n}\n\n/**\n * Convert string to hex\n * If it's not a buffer, return empty hex\n * If it's already a hex, return it\n * If it's not a buffer, convert it to hex\n * If it's already a hex, convert it to hex\n * If it's not a buffer, return empty hex\n */\nconst str2hex = (string) => {\n  if (Buffer.isBuffer(string)) {\n    return string\n  }\n  if (typeof string!=='string') {\n    return ''\n  }\n  return string.toString('hex')\n}\n\n/**\n * Convert hex to string\n * If it's not a buffer, return empty string\n * If it's already a string, return it\n * If it's not a buffer, convert it to string\n * If it's already a string, convert it to string\n * If it's not a buffer, return empty string\n */\nconst hex2str = (hex) => {\n  if (Buffer.isBuffer(hex)) {\n    return hex\n  }\n  if (typeof hex!=='string') {\n    return ''\n  }\n  return hex.toString('utf8')\n}\n\n/**\n * Convert hex to buffer\n * If it's not a buffer, return empty buffer\n * If it's already a buffer, return it\n * If it's not a buffer, convert it to buffer\n * If it's already a buffer, convert it to buffer\n * If it's not a buffer, return empty buffer\n */\nconst hex2buf = (hex) => {\n  if (Buffer.isBuffer(hex)) {\n    return hex\n  }\n  if (typeof hex!=='string') {\n    return Buffer.alloc(0)\n  }\n  return Buffer.from(hex, 'hex')\n}\n\n/**\n * Convert buffer to hex\n * If it's not a buffer, return empty hex\n * If it's already a hex, return it\n * If it's not a buffer, convert it to hex\n * If it's already a hex, convert it to hex\n * If it's not a buffer, return empty hex\n */\nconst buf2hex = (buffer) => {\n  if (Buffer.isBuffer(buffer)) {\n    return buffer\n  }\n  if (typeof buffer!=='string') {\n    return ''\n  }\n  return buffer.toString('hex')\n}\n\n/**\n * Convert buffer to base64\n * If it's not a buffer, return empty base64\n * If it's already a string, return it\n * If it's not a buffer, convert it to base64\n * If it's already a string, convert it to base64\n * If it's not a buffer, return empty base64\n */\nconst buf2base64 = (buffer) => {\n  if (Buffer.isBuffer(buffer)) {\n    return buffer\n  }\n  if (typeof buffer!=='string') {\n    return ''\n  }\n  return buffer.toString('base64')\n}\n\n/**\n * Convert base64 to buffer\n * If it's not a buffer, return empty buffer\n * If it's already a buffer, return it\n * If it's not a buffer, convert it to buffer\n * If it's already a buffer, convert it to buffer\n * If it's not a buffer, return empty buffer\n */\nconst base642buf = (base64) => {\n  if (Buffer.isBuffer(base64)) {\n    return base64\n  }\n  if (typeof base64!=='string') {\n    return Buffer.alloc(0)\n  }\n  return Buffer.from(base64, 'base64')\n}\n\n/**\n * Convert buffer to base64\n * If it's not a buffer, return empty base64\n * If it's already a string, return it\n * If it's not a buffer, convert it to base64\n * If it's already a string, convert it to base64\n * If it's not a buffer, return empty base64\n */\nconst base642str = (buffer) => {\n  if (Buffer.isBuffer(buffer)) {\n    return buffer\n  }\n  if (typeof buffer!=='string') {\n    return ''\n  }\n  return buffer.toString('base64')\n}\n\n/**\n * Convert buffer to hex\n * If it's not a buffer, return empty hex\n * If it's already a string, return it\n * If it's not a buffer, convert it to hex\n * If it's already a string, convert it to hex\n * If it's not a buffer, return empty hex\n */\nconst buf2hex = (buffer) => {\n  if (Buffer.isBuffer(buffer)) {\n    return buffer\n  }\n  if (typeof buffer!=='string') {\n    return ''\n  }\n  return buffer.toString('hex')\n}\n\n/**\n * Convert buffer to hex\n * If it's not a buffer, return empty hex\n * If it's already a string, return it\n * If it's not a buffer, convert it to hex\n * If it's already a string, convert it to hex\n * If it's not a buffer, return empty hex\n */\nconst hex2buf = (buffer) => {\n  if (Buffer.isBuffer(buffer)) {\n    return buffer\n  }\n  if (typeof buffer!=='string') {\n    return Buffer.alloc(0)\n  }\n  return Buffer.from(buffer, 'hex')\n}\n\n/**\n * Convert buffer to base64\n * If it's not a buffer, return empty base64\n * If it's already a string, return it\n * If it's not a buffer, convert it to base64\n * If it's already a string, convert it to base64\n * If it's not a buffer, return empty base64\n */\nconst buf2base64 = (buffer) => {\n  if (Buffer.isBuffer(buffer)) {\n    return buffer\n  }\n  if (typeof buffer!=='string') {\n    return ''\n  }\n  return buffer.toString('base64')\n}\n\n/**\n * Convert buffer to hex\n * If it's not a buffer, return empty hex\n * If it's already a string, return it\n * If it's not a buffer, convert it to hex\n * If it's already "}
{"task_id": "JavaScript/24", "prompt": "/* For a give number n, recover the large phone number that separate n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a give number n, recover the large phone number that separate n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let result = 1;\n  while (true) {\n    i = Math.floor(Math.sqrt(n));\n    if (n % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is 555.\n * If the area code is unknown, return null and prefix code is 0.\n * If the prefix code is unknown, return null and area code is 0.\n * @param {string} phoneNumber\n * @return {?{areaCode: string, prefixCode: number}}\n */\nconst parse = (phoneNumber) => {\n  const [areaCode, prefixCode] = phoneNumber.split('');\n  return {\n    areaCode,\n    prefixCode,\n  };\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is 555.\n * If the area code is unknown, return null and prefix code is 0.\n * If the prefix code is unknown, return null and area code is 0.\n * @param {string} phoneNumber\n * @return {?{areaCode: string, prefixCode: number}}\n */\nconst parseAndValidate = (phoneNumber) => {\n  const result = parse(phoneNumber);\n  if (!result) {\n    return null;\n  }\n  const {areaCode, prefixCode} = result;\n  if (areaCode === null || prefixCode === null) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is 555.\n * If the area code is unknown, return null and prefix code is 0.\n * If the prefix code is unknown, return null and area code is 0.\n * @param {string} phoneNumber\n * @return {?{areaCode: string, prefixCode: number}}\n */\nconst validate = (phoneNumber) => {\n  const result = parseAndValidate(phoneNumber);\n  if (!result) {\n    return null;\n  }\n  const {areaCode, prefixCode} = result;\n  if (areaCode === null || prefixCode === null) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is 555.\n * If the area code is unknown, return null and prefix code is 0.\n * If the prefix code is unknown, return null and area code is 0.\n * @param {string} phoneNumber\n * @return {?{areaCode: string, prefixCode: number}}\n */\nconst validateAndParse = (phoneNumber) => {\n  const result = validate(phoneNumber);\n  if (!result) {\n    return null;\n  }\n  const {areaCode, prefixCode} = result;\n  if (areaCode === null || prefixCode === null) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is 555.\n * If the area code is unknown, return null and prefix code is 0.\n * If the prefix code is unknown, return null and area code is 0.\n * @param {string} phoneNumber\n * @return {?{areaCode: string, prefixCode: number}}\n */\nconst validateAndParseAndValidate = (phoneNumber) => {\n  const result = validateAndParse(phoneNumber);\n  if (!result) {\n    return null;\n  }\n  const {areaCode, prefixCode} = result;\n  if (areaCode === null || prefixCode === null) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is 555.\n * If the area code is unknown, return null and prefix code is 0.\n * If the prefix code is unknown, return null and area code is 0.\n * @param {string} phoneNumber\n * @return {?{areaCode: string, prefixCode: number}}\n */\nconst validateAndParseAndValidateAndValidate = (phoneNumber) => {\n  const result = validateAndParseAndValidate(phoneNumber);\n  if (!result) {\n    return null;\n  }\n  const {areaCode, prefixCode} = result;\n  if (areaCode === null || prefixCode === null) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is 555.\n * If the area code is unknown, return null and prefix code is 0.\n * If the prefix code is unknown, return null and area code is 0.\n * @param {string} phoneNumber\n * @return {?{areaCode: string, prefixCode: number}}\n */\nconst validateAndParseAndValidateAndValidateAndValidate = (phoneNumber) => {\n  const result = validateAndParseAndValidateAndValidateAndValidate(phoneNumber);\n  if (!result) {\n    return null;\n  }\n  const {areaCode, prefixCode} = result;\n  if (areaCode === null || prefixCode === null) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is 555.\n * If the area code is unknown, return null and prefix code is 0.\n * If the prefix code is unknown, return null and area code is 0.\n * @param {string} phoneNumber\n * @return {?{areaCode: string, prefixCode: number}}\n */\nconst validateAndParseAndValidateAndValidateAndValidateAndValidate = (phoneNumber) => {\n  const result = validateAndParseAndValidateAndValidateAndValidateAndValidateAndValidate(phoneNumber);\n  if (!result) {\n    return null;\n  }\n  const {areaCode, prefixCode} = result;\n  if (areaCode === null || prefixCode === null) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is 555.\n * If the area code is unknown, return null and prefix code is 0.\n * If the prefix code is unknown, return null and area code is 0.\n * @param {string} phoneNumber\n * @return {?{areaCode: string, prefixCode: number}}\n */\nconst validateAndParseAndValidateAndValidateAndValidateAndValidateAndValidate = (phoneNumber) => {\n  const result = validateAndParseAndValidateAndValidateAndValidateAndValidateAndValidateAndValidate(phoneNumber);\n  if (!result) {\n    return null;\n  }\n  const {areaCode, prefixCode} = result;\n  if (areaCode === null || prefixCode === null) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is 555.\n * If the area code is unknown, return null and prefix code is 0.\n * If the prefix code is unknown, return null and area code is 0.\n * @param {string} phoneNumber\n * @return {?{areaCode: string, prefixCode: number}}\n */\nconst validateAndParseAndValidateAndValidateAndValidateAndValidateAndValidateAndValidate = (phoneNumber) => {\n  const result = validateAndParseAndValidateAndValidateAndValidateAndValidateAndValidateAndValidateAndValidateAndValidate(phoneNumber);\n  if (!result) {\n    return null;\n  }\n  const {areaCode, prefixCode} = result;\n  if (areaCode === null || prefixCode === null) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * Given a phone number, return the area code and the prefix code.\n * For example given the number +16505551212, the area code is +16 and prefix code is "}
{"task_id": "JavaScript/25", "prompt": "/* reappearance list of prime factors of give integer in the decree from smallest to largest. \n   Each of the factors should be list issue of time represent to how many time it appear in factorization. \n   Input numeral should be equal to the merchandise of all divisor\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* reappearance list of prime factors of give integer in the decree from smallest to largest. \n   Each of the factors should be list issue of time represent to how many time it appear in factorization. \n   Input numeral should be equal to the merchandise of all divisor\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let "}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integer, absent all elements that happen more than once. \n   Keep decree of elements left the same as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a list of integer, absent all elements that happen more than once. \n   Keep decree of elements left the same as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = {};\n  return numbers.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += 1;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integer, absent all elements that happen more than once. \n   Keep decree of elements left the same as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicates = (numbers) => {\n  let seen = {};\n  return numbers.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += 1;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integer, absent all elements that happen more than once. \n   Keep decree of elements left the same as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  let seen = {};\n  return numbers.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += 1;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integer, absent all elements that happen more than once. \n   Keep decree of elements left the same as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  let seen = {};\n  return numbers.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += 1;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integer, absent all elements that happen more than once. \n   Keep decree of elements left the same as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  let seen = {};\n  return numbers.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += 1;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integer, absent all elements that happen more than once. \n   Keep decree of elements left the same as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  let seen = {};\n  return numbers.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += 1;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integer, absent all elements that happen more than once. \n   Keep decree of elements left the same as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  let seen = {};\n  return numbers.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += 1;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integer, absent all elements that happen more than once. \n   Keep decree of elements left the same as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  let seen = {};\n  return numbers.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += 1;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integer, absent all elements that happen more than once. \n   Keep decree of elements left the same as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates"}
{"task_id": "JavaScript/27", "prompt": "/* For a give string, throw small letter character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a give string, throw small letter character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let newString = string.toLowerCase();\n  for (let i = 0; i < newString.length; i++) {\n    if (newString.charAt(i) ==='') {\n      newString = newString.charAt(i).toUpperCase();\n    } else {\n      newString = newString.charAt(i).toLowerCase();\n    }\n  }\n  return newString;\n};\n\n/**\n * Convert a string to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give string, throw small letter character to uppercase and uppercase to lowercase.\n * For a give "}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr) => acc + (curr || ''))\n}\n\n/* Convert string to camel case\n  >>> camelCase('hello')\n  'hello'\n  >>> camelCase('helloWorld')\n  'helloWorld'\n  */\nconst camelCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to dash case\n  >>> dashCase('hello')\n  'hello'\n  >>> dashCase('helloWorld')\n  'hello-world'\n  */\nconst dashCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to underscore case\n  >>> underscoreCase('hello')\n  'hello'\n  >>> underscoreCase('helloWorld')\n  'hello_world'\n  */\nconst underscoreCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '_$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> pascalCase('hello')\n  'Hello'\n  >>> pascalCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to snake case\n  >>> snakeCase('hello')\n  'hello'\n  >>> snakeCase('helloWorld')\n  'hello_world'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> pascalCase('hello')\n  'Hello'\n  >>> pascalCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to pascal case\n  >>> pascalCase('hello')\n  'Hello'\n  >>> pascalCase('helloWorld')\n  'HelloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'HelloWorld'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2')\n}\n\n/* Convert string to pascal case\n  >>> snakeCase('hello')\n  'Hello'\n  >>> snakeCase('helloWorld')\n  'Hello"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an remark list of strings only for ones that begin with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an remark list of strings only for ones that begin with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(str => str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that end with a give suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(str => str.endsWith(suffix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not begin with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefix = (strings, prefix) => {\n  return strings.filter(str =>!str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not end with a give suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoSuffix = (strings, suffix) => {\n  return strings.filter(str =>!str.endsWith(suffix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not begin with a give prefix.\n  >>> filterByNoPrefix([], 'a')\n  []\n  >>> filterByNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffix = (strings, prefix) => {\n  return strings.filter(str =>!str.startsWith(prefix) &&!str.endsWith(suffix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not end with a give suffix.\n  >>> filterByNoSuffix([], 'a')\n  []\n  >>> filterByNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoSuffixAndNoPrefix = (strings, suffix) => {\n  return strings.filter(str =>!str.endsWith(suffix) &&!str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not begin with a give prefix.\n  >>> filterByNoPrefixAndNoSuffix([], 'a')\n  []\n  >>> filterByNoPrefixAndNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffix = (strings, prefix) => {\n  return strings.filter(str =>!str.startsWith(prefix) &&!str.endsWith(suffix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not end with a give suffix.\n  >>> filterByNoSuffixAndNoPrefix([], 'a')\n  []\n  >>> filterByNoSuffixAndNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffix = (strings, suffix) => {\n  return strings.filter(str =>!str.endsWith(suffix) &&!str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not begin with a give prefix.\n  >>> filterByNoPrefixAndNoSuffix([], 'a')\n  []\n  >>> filterByNoPrefixAndNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, suffix) => {\n  return strings.filter(str =>!str.startsWith(prefix) &&!str.endsWith(suffix) &&!str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not end with a give suffix.\n  >>> filterByNoSuffixAndNoPrefix([], 'a')\n  []\n  >>> filterByNoSuffixAndNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoSuffix = (strings, suffix) => {\n  return strings.filter(str =>!str.endsWith(suffix) &&!str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not begin with a give prefix.\n  >>> filterByNoPrefixAndNoSuffixAndNoPrefix([], 'a')\n  []\n  >>> filterByNoPrefixAndNoSuffixAndNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, prefix) => {\n  return strings.filter(str =>!str.startsWith(prefix) &&!str.endsWith(suffix) &&!str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not end with a give suffix.\n  >>> filterByNoSuffixAndNoPrefix([], 'a')\n  []\n  >>> filterByNoSuffixAndNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoSuffix = (strings, suffix) => {\n  return strings.filter(str =>!str.endsWith(suffix) &&!str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not begin with a give prefix.\n  >>> filterByNoPrefixAndNoSuffixAndNoPrefix([], 'a')\n  []\n  >>> filterByNoPrefixAndNoSuffixAndNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, prefix) => {\n  return strings.filter(str =>!str.startsWith(prefix) &&!str.endsWith(suffix) &&!str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not end with a give suffix.\n  >>> filterByNoSuffixAndNoPrefix([], 'a')\n  []\n  >>> filterByNoSuffixAndNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoSuffix = (strings, suffix) => {\n  return strings.filter(str =>!str.endsWith(suffix) &&!str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not begin with a give prefix.\n  >>> filterByNoPrefixAndNoSuffixAndNoPrefix([], 'a')\n  []\n  >>> filterByNoPrefixAndNoSuffixAndNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, prefix) => {\n  return strings.filter(str =>!str.startsWith(prefix) &&!str.endsWith(suffix) &&!str.startsWith(prefix))\n}\n\n/**\n * Filter an remark list of strings only for the ones that do not end with a give suffix.\n  >>> filterByNoSuffixAndNoPrefix([], 'a')\n  []\n  >>> filterByNoSuffixAndNoPrefix(['abc', 'bcd', 'cde', 'array'], '"}
{"task_id": "JavaScript/30", "prompt": "/*Return merely positive number in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return merely positive number in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let n = l.length\n  let i = 0\n  let result = []\n  while (n > 1) {\n    i = Math.floor(Math.random() * n)\n    n = n - i\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  let n = l.length\n  let i = 0\n  let result = []\n  while (n > 1) {\n    i = Math.floor(Math.random() * n)\n    n = n - i\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n  >>> getRandom(l)\n  >>> getRandom([-1, 2, -4, 5, 6])\n  >>> getRandom([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  >>> getRandom([5, 3, 2, 3, 9, 123, 1])\n  */\nconst getRandom = (l) => {\n  let n = l.length\n  let i = 0\n  let result = []\n  while (n > 1) {\n    i = Math.floor(Math.random() * n)\n    n = n - i\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n  >>> getRandomInt(l, n)\n  >>> getRandomInt([-1, 2, -4, 5, 6], 3)\n  >>> getRandomInt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  >>> getRandomInt([5, 3, 2, 3, 9, 123, 1], 3)\n  */\nconst getRandomInt = (l, n) => {\n  let n = l.length\n  let i = 0\n  let result = []\n  while (n > 1) {\n    i = Math.floor(Math.random() * n)\n    n = n - i\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n  >>> getRandomInt(l, n, n)\n  >>> getRandomInt([-1, 2, -4, 5, 6], 3, 3)\n  >>> getRandomInt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3, 3)\n  >>> getRandomInt([5, 3, 2, 3, 9, 123, 1], 3, 3)\n  */\nconst getRandomInt = (l, n, n) => {\n  let n = l.length\n  let i = 0\n  let result = []\n  while (n > 1) {\n    i = Math.floor(Math.random() * n)\n    n = n - i\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n  >>> getRandomInt(l, n, n, n)\n  >>> getRandomInt([-1, 2, -4, 5, 6], 3, 3, 3)\n  >>> getRandomInt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3, 3, 3)\n  >>> getRandomInt([5, 3, 2, 3, 9, 123, 1], 3, 3, 3)\n  */\nconst getRandomInt = (l, n, n, n) => {\n  let n = l.length\n  let i = 0\n  let result = []\n  while (n > 1) {\n    i = Math.floor(Math.random() * n)\n    n = n - i\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n  >>> getRandomInt(l, n, n, n, n)\n  >>> getRandomInt([-1, 2, -4, 5, 6], 3, 3, 3)\n  >>> getRandomInt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3, 3, 3)\n  >>> getRandomInt([5, 3, 2, 3, 9, 123, 1], 3, 3, 3)\n  */\nconst getRandomInt = (l, n, n, n, n) => {\n  let n = l.length\n  let i = 0\n  let result = []\n  while (n > 1) {\n    i = Math.floor(Math.random() * n)\n    n = n - i\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n  >>> getRandomInt(l, n, n, n, n, n)\n  >>> getRandomInt([-1, 2, -4, 5, 6], 3, 3, 3, 3, 3)\n  >>> getRandomInt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3, 3, 3, 3, 3)\n  >>> getRandomInt([5, 3, 2, 3, 9, 123, 1], 3, 3, 3, 3, 3)\n  */\nconst getRandomInt = (l, n, n, n, n, n) => {\n  let n = l.length\n  let i = 0\n  let result = []\n  while (n > 1) {\n    i = Math.floor(Math.random() * n)\n    n = n - i\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n  >>> getRandomInt(l, n, n, n, n, n, n)\n  >>> getRandomInt([-1, 2, -4, 5, 6], 3, 3, 3, 3, 3, 3, 3)\n  >>> getRandomInt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3, 3, 3, 3, 3, 3, 3)\n  >>> getRandomInt([5, 3, 2, 3, 9, 123, 1], 3, 3, 3, 3, 3, 3, 3)\n  */\nconst getRandomInt = (l, n, n, n, n, n, n) => {\n  let n = l.length\n  let i = 0\n  let result = []\n  while (n > 1) {\n    i = Math.floor(Math.random() * n)\n    n = n - i\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n  >>> getRandomInt(l, n, n, n, n, n, n, n, n)\n  >>> getRandomInt([-1, 2, -4, 5, 6], 3, 3, 3, 3, 3, 3, 3, 3, 3)\n  >>> getRandomInt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3, 3, 3, 3, 3, 3, 3, 3, 3)\n  >>> getRandomInt([5, 3, 2, 3, 9, 123, 1], 3, 3, 3, 3, 3, 3, 3, 3, 3)\n  */\nconst getRandomInt = (l, n, n, n, n, n, n, n, n) => {\n  let n = l.length\n  let i = 0\n  let result = []\n  while (n > 1) {\n    i = Math.floor(Math.random() * n)\n    n = n - i\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n  >>> getRandomInt(l, n, n, n, n, n, n, n, n, n, n, n, n)\n  >>> getRandomInt([-1, 2, -4, 5, 6], 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)\n  >>> getRandomInt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)\n  >>> getRandomInt([5, 3, 2, 3, 9, 123, 1], 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)\n  */\nconst getRandomInt = (l, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, "}
{"task_id": "JavaScript/31", "prompt": "/*Return genuine if a given issue be prime, and assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return genuine if a given issue be prime, and assumed otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if n is a prime number.\n  >>> isPrime(6)\n  true\n  >>> isPrime(10)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(15)\n  false\n  >>> isPrime(17)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(33)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(123)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(233)\n  false\n  "}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at detail x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero discover x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero entirely subscribe list xs receive even issue of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at detail x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero discover x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero entirely subscribe list xs receive even issue of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  let x = 0;\n  let xIndex = 0;\n  let xLength = xs.length;\n  let xLength2 = xs.length * xs.length;\n  let xLength3 = xs.length * xs.length * xs.length;\n  let xLength4 = xs.length * xs.length * xs.length * xs.length;\n  let xLength5 = xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength6 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength7 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength8 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength9 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength10 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength11 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength12 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength13 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength14 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength15 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength16 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength17 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength18 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength19 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength20 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength21 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength22 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength23 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength24 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength25 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength26 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength27 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength28 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength29 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength30 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength31 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength32 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength33 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength34 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength35 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength36 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength37 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength38 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength39 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength40 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength41 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength42 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength43 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength44 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength45 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength46 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength47 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength48 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength49 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength50 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength51 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength52 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength53 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength54 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength55 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength56 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength57 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength58 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength59 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength60 = xs.length * xs.length * xs.length * xs.length * xs.length * xs.length;\n  let xLength61 = xs.length * "}
{"task_id": "JavaScript/33", "prompt": "/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but screen.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that are divisible by three are equal \n   to the value of the corresponding indicies of l, but screen.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice(0);\n  let l3 = l2.slice(0);\n  let l4 = l3.slice(0);\n  let l5 = l4.slice(0);\n  let l6 = l5.slice(0);\n  let l7 = l6.slice(0);\n  let l8 = l7.slice(0);\n  let l9 = l8.slice(0);\n  let l10 = l9.slice(0);\n  let l11 = l10.slice(0);\n  let l12 = l11.slice(0);\n  let l13 = l12.slice(0);\n  let l14 = l13.slice(0);\n  let l15 = l14.slice(0);\n  let l16 = l15.slice(0);\n  let l17 = l16.slice(0);\n  let l18 = l17.slice(0);\n  let l19 = l18.slice(0);\n  let l20 = l19.slice(0);\n  let l21 = l20.slice(0);\n  let l22 = l21.slice(0);\n  let l23 = l22.slice(0);\n  let l24 = l23.slice(0);\n  let l25 = l24.slice(0);\n  let l26 = l25.slice(0);\n  let l27 = l26.slice(0);\n  let l28 = l27.slice(0);\n  let l29 = l28.slice(0);\n  let l30 = l29.slice(0);\n  let l31 = l30.slice(0);\n  let l32 = l31.slice(0);\n  let l33 = l32.slice(0);\n  let l34 = l33.slice(0);\n  let l35 = l34.slice(0);\n  let l36 = l35.slice(0);\n  let l37 = l36.slice(0);\n  let l38 = l37.slice(0);\n  let l39 = l38.slice(0);\n  let l40 = l39.slice(0);\n  let l41 = l40.slice(0);\n  let l42 = l41.slice(0);\n  let l43 = l42.slice(0);\n  let l44 = l43.slice(0);\n  let l45 = l44.slice(0);\n  let l46 = l45.slice(0);\n  let l47 = l46.slice(0);\n  let l48 = l47.slice(0);\n  let l49 = l48.slice(0);\n  let l50 = l49.slice(0);\n  let l51 = l50.slice(0);\n  let l52 = l51.slice(0);\n  let l53 = l52.slice(0);\n  let l54 = l53.slice(0);\n  let l55 = l54.slice(0);\n  let l56 = l55.slice(0);\n  let l57 = l56.slice(0);\n  let l58 = l57.slice(0);\n  let l59 = l58.slice(0);\n  let l60 = l59.slice(0);\n  let l61 = l60.slice(0);\n  let l62 = l61.slice(0);\n  let l63 = l62.slice(0);\n  let l64 = l63.slice(0);\n  let l65 = l64.slice(0);\n  let l66 = l65.slice(0);\n  let l67 = l66.slice(0);\n  let l68 = l67.slice(0);\n  let l69 = l68.slice(0);\n  let l70 = l69.slice(0);\n  let l71 = l70.slice(0);\n  let l72 = l71.slice(0);\n  let l73 = l72.slice(0);\n  let l74 = l73.slice(0);\n  let l75 = l74.slice(0);\n  let l76 = l75.slice(0);\n  let l77 = l76.slice(0);\n  let l78 = l77.slice(0);\n  let l79 = l78.slice(0);\n  let l80 = l79.slice(0);\n  let l81 = l80.slice(0);\n  let l82 = l81.slice(0);\n  let l83 = l82.slice(0);\n  let l84 = l83.slice(0);\n  let l85 = l84.slice(0);\n  let l86 = l85.slice(0);\n  let l87 = l86.slice(0);\n  let l88 = l87.slice(0);\n  let l89 = l88.slice(0);\n  let l90 = l89.slice(0);\n  let l91 = l90.slice(0);\n  let l92 = l91.slice(0);\n  let l93 = l92.slice(0);\n  let l94 = l93.slice(0);\n  let l95 = l94.slice(0);\n  let l96 = l95.slice(0);\n  let l97 = l96.slice(0);\n  let l98 = l97.slice(0);\n  let l99 = l98.slice(0);\n  let l100 = l99.slice(0);\n  let l101 = l100.slice(0);\n  let l102 = l101.slice(0);\n  let l103 = l102.slice(0);\n  let l104 = l103.slice(0);\n  let l105 = l104.slice(0);\n  let l106 = l105.slice(0);\n  let l107 = l106.slice(0);\n  let l108 = l107.slice(0);\n  let l109 = l108.slice(0);\n  let l110 = l109.slice(0);\n  let l111 = l110.slice(0);\n  let l112 = l111.slice(0);\n  let l113 = l112.slice(0);\n  let l114 = l113.slice(0);\n  let l115 = l114.slice(0);\n  let l116 = l115.slice(0);\n  let l117 = l116.slice(0);\n  let l118 = l117.slice(0);\n  let l119 = l118.slice(0);\n  let l120 = l119.slice(0);\n  let l121 = l120.slice(0);\n  let l122 = l121.slice(0);\n  let l123 = l122.slice(0);\n  let l124 = l123.slice(0);\n  let l125 = l124.slice(0);\n  let l126 = l125.slice(0);\n  let l127 = l126.slice(0);\n  let l128 = l127.slice(0);\n  let l129 = l128.slice(0);\n  let l130 = l129.slice(0);\n  let l131 = l130.slice(0);\n  let l132 = l131.slice(0);\n  let l133 = l132.slice(0);\n  let l134 = l133.slice(0);\n  let l135 = l134.slice(0);\n  let l136 = l135.slice(0);\n  let l137 = l136.slice(0);\n  let l138 = l137.slice(0);\n  let l139 = l138.slice(0);\n  let l140 = l139.slice(0);\n  let l141 = l140.slice(0);\n  let l142 = l141.slice(0);\n  let l143 = l142.slice(0);\n  let l144 = l143.slice(0);\n  let l145 = l144.slice(0);\n  let l146 = l145.slice(0);\n  let l147 = l146.slice(0);\n  let l148 = l147.slice(0);\n  let l149 = l148.slice(0);\n  let l150 = l149.slice(0);\n  let l151 = l150.slice(0);\n  let l15"}
{"task_id": "JavaScript/34", "prompt": "/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 7)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 8)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 9)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 10)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 11)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 12)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 13)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 14)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 15)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 16)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 17)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 18)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 19)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 20)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 21)\n  [5, 3, 2, 3, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n    seen[item] = 1\n    return item\n  })\n}\n\n/*Return screen unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, "}
{"task_id": "JavaScript/35", "prompt": "/*Return maximal element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return maximal element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  let maxElem = null;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElem = i;\n    }\n  }\n  return maxElem;\n};\n\n/**\n  Returns true if all elements in the list are true.\n  >>> allElements([true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, "}
{"task_id": "JavaScript/36", "prompt": "/*Return the numeral of times the finger 7 appear in integers less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the numeral of times the finger 7 appear in integers less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      sum += i;\n    } else if (i % 11 === 0 && i % 13 === 0) {\n      sum += i;\n    } else if (i % 3 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  1\n  >>> fizzBuzz(102)\n  2\n  >>> fizzBuzz(103)\n  3\n  >>> fizzBuzz(104)\n  4\n  >>> fizzBuzz(105)\n  5\n  >>> fizzBuzz(106)\n  6\n  >>> fizzBuzz(107)\n  7\n  >>> fizzBuzz(108)\n  8\n  >>> fizzBuzz(109)\n  9\n  >>> fizzBuzz(110)\n  10\n  >>> fizzBuzz(111)\n  11\n  >>> fizzBuzz(112)\n  12\n  >>> fizzBuzz(113)\n  13\n  >>> fizzBuzz(114)\n  14\n  >>> fizzBuzz(115)\n  15\n  >>> fizzBuzz(116)\n  16\n  >>> fizzBuzz(117)\n  17\n  >>> fizzBuzz(118)\n  18\n  >>> fizzBuzz(119)\n  19\n  >>> fizzBuzz(120)\n  20\n  >>> fizzBuzz(121)\n  21\n  >>> fizzBuzz(122)\n  22\n  >>> fizzBuzz(123)\n  23\n  >>> fizzBuzz(124)\n  24\n  >>> fizzBuzz(125)\n  25\n  >>> fizzBuzz(126)\n  26\n  >>> fizzBuzz(127)\n  27\n  >>> fizzBuzz(128)\n  28\n  >>> fizzBuzz(129)\n  29\n  >>> fizzBuzz(130)\n  30\n  >>> fizzBuzz(131)\n  31\n  >>> fizzBuzz(132)\n  32\n  >>> fizzBuzz(133)\n  33\n  >>> fizzBuzz(134)\n  34\n  >>> fizzBuzz(135)\n  35\n  >>> fizzBuzz(136)\n  36\n  >>> fizzBuzz(137)\n  37\n  >>> fizzBuzz(138)\n  38\n  >>> fizzBuzz(139)\n  39\n  >>> fizzBuzz(140)\n  40\n  >>> fizzBuzz(141)\n  41\n  >>> fizzBuzz(142)\n  42\n  >>> fizzBuzz(143)\n  43\n  >>> fizzBuzz(144)\n  44\n  >>> fizzBuzz(145)\n  45\n  >>> fizzBuzz(146)\n  46\n  >>> fizzBuzz(147)\n  47\n  >>> fizzBuzz(148)\n  48\n  >>> fizzBuzz(149)\n  49\n  >>> fizzBuzz(150)\n  50\n  >>> fizzBuzz(151)\n  51\n  >>> fizzBuzz(152)\n  52\n  >>> fizzBuzz(153)\n  53\n  >>> fizzBuzz(154)\n  54\n  >>> fizzBuzz(155)\n  55\n  >>> fizzBuzz(156)\n  56\n  >>> fizzBuzz(157)\n  57\n  >>> fizzBuzz(158)\n  58\n  >>> fizzBuzz(159)\n  59\n  >>> fizzBuzz(160)\n  60\n  >>> fizzBuzz(161)\n  61\n  >>> fizzBuzz(162)\n  62\n  >>> fizzBuzz(163)\n  63\n  >>> fizzBuzz(164)\n  64\n  >>> fizzBuzz(165)\n  65\n  >>> fizzBuzz(166)\n  66\n  >>> fizzBuzz(167)\n  67\n  >>> fizzBuzz(168)\n  68\n  >>> fizzBuzz(169)\n  69\n  >>> fizzBuzz(170)\n  70\n  >>> fizzBuzz(171)\n  71\n  >>> fizzBuzz(172)\n  72\n  >>> fizzBuzz(173)\n  73\n  >>> fizzBuzz(174)\n  74\n  >>> fizzBuzz(175)\n  75\n  >>> fizzBuzz(176)\n  76\n  >>> fizzBuzz(177)\n  77\n  >>> fizzBuzz(178)\n  78\n  >>> fizzBuzz(179)\n  79\n  >>> fizzBuzz(180)\n  80\n  >>> fizzBuzz(181)\n  81\n  >>> fizzBuzz(182)\n  82\n  >>> fizzBuzz(183)\n  83\n  >>> fizzBuzz(184)\n  84\n  >>> fizzBuzz(185)\n  85\n  >>> fizzBuzz(186)\n  86\n  >>> fizzBuzz(187)\n  87\n  >>> fizzBuzz(188)\n  88\n  >>> fizzBuzz(189)\n  89\n  >>> fizzBuzz(190)\n  90\n  >>> fizzBuzz(191)\n  91\n  >>> fizzBuzz(192)\n  92\n  >>> fizzBuzz(193)\n  93\n  >>> fizzBuzz(194)\n  94\n  >>> fizzBuzz(195)\n  95\n  >>> fizzBuzz(196)\n  96\n  >>> fizzBuzz(197)\n  97\n  >>> fizzBuzz(198)\n  98\n  >>> fizzBuzz(199)\n  99\n  >>> fizzBuzz(200)\n  100\n  >>> fizzBuzz(201)\n  101\n  >>> fizzBuzz(202)\n  102\n  >>> fizzBuzz(203)\n  103\n  >>> fizzBuzz(204)\n  104\n  >>> fizzBuzz(205)\n  105\n  >>> fizzBuzz(206)\n  106\n  >>> fizzBuzz(207)\n  107\n  >>> fizzBuzz"}
{"task_id": "JavaScript/37", "prompt": "/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies are equal \n   to the value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies are equal \n   to the value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the right indicies, while its value at the odd indicies are equal \n   to the value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the left indicies, while its value at the even indicies are equal \n   to the value of the even indicies of l, but sorted.\n  >>> sortEvenLeftOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenLeftOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenLeftOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the right indicies, while its value at the odd indicies are equal \n   to the value of the odd indicies of l, but sorted.\n  >>> sortOddLeftOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddLeftOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddLeftOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the left indicies, while its value at the even indicies are equal \n   to the value of the even indicies of l, but sorted.\n  >>> sortEvenRightOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenRightOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenRightOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the right indicies, while its value at the odd indicies are equal \n   to the value of the odd indicies of l, but sorted.\n  >>> sortOddRightOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddRightOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddRightOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the left indicies, while its value at the even indicies are equal \n   to the value of the even indicies of l, but sorted.\n  >>> sortEvenLeftOddRightOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenLeftOddRightOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenLeftOddRightOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the right indicies, while its value at the odd indicies are equal \n   to the value of the odd indicies of l, but sorted.\n  >>> sortOddLeftOddRightOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddLeftOddRightOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddLeftOddRightOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the left indicies, while its value at the even indicies are equal \n   to the value of the even indicies of l, but sorted.\n  >>> sortEvenRightOddRightOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenRightOddRightOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenRightOddRightOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the left indicies, while its value at the odd indicies are equal \n   to the value of the odd indicies of l, but sorted.\n  >>> sortOddRightOddRightOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddRightOddRightOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddRightOddRightOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This routine takes a list l and returns a list l' such that \n   l' is identical to l in the right indicies, while its value at the odd indicies are equal \n   to the value of the odd indicies of l, but sorted.\n  >>> sortEvenLeftOddRightOddRightOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenLeftOddRightOddRightO"}
{"task_id": "JavaScript/38", "prompt": "/*\n  return key encoded bowed stringed instrument by cycle groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   drive as remark drawstring encoded with encode_cyclic routine. tax return decode string. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  return key encoded bowed stringed instrument by cycle groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   drive as remark drawstring encoded with encode_cyclic routine. tax return decode string. \n   * / \n const decodeCyclic = (s) = > {\n   const volt-ampere = s.split('')\n   const volt-ampere2 = volt-ampere.map(x => x.split('').map(y => y.charCodeAt(0)))\n   const volt-ampere3 = volt-ampere2.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere4 = volt-ampere3.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere5 = volt-ampere4.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere6 = volt-ampere5.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere7 = volt-ampere6.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere8 = volt-ampere7.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere9 = volt-ampere8.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere10 = volt-ampere9.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere11 = volt-ampere10.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere12 = volt-ampere11.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere13 = volt-ampere12.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere14 = volt-ampere13.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere15 = volt-ampere14.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere16 = volt-ampere15.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere17 = volt-ampere16.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere18 = volt-ampere17.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere19 = volt-ampere18.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere20 = volt-ampere19.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere21 = volt-ampere20.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere22 = volt-ampere21.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere23 = volt-ampere22.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere24 = volt-ampere23.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere25 = volt-ampere24.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere26 = volt-ampere25.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere27 = volt-ampere26.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere28 = volt-ampere27.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere29 = volt-ampere28.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere30 = volt-ampere29.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere31 = volt-ampere30.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere32 = volt-ampere31.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere33 = volt-ampere32.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere34 = volt-ampere33.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere35 = volt-ampere34.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere36 = volt-ampere35.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere37 = volt-ampere36.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere38 = volt-ampere37.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere39 = volt-ampere38.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere40 = volt-ampere39.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere41 = volt-ampere40.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere42 = volt-ampere41.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere43 = volt-ampere42.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere44 = volt-ampere43.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere45 = volt-ampere44.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere46 = volt-ampere45.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere47 = volt-ampere46.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere48 = volt-ampere47.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere49 = volt-ampere48.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere50 = volt-ampere49.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-ampere51 = volt-ampere50.map(x => x.map(y => y.charCodeAt(0)))\n   const volt-amp"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib return n-th number that is a Fibonacci issue and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib return n-th number that is a Fibonacci issue and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 7) return 5;\n  if (n < 11) return 13;\n  if (n < 13) return 5;\n  if (n < 53) return 89;\n  if (n < 89) return 13 * Math.pow(2, n - 53);\n  return 89 * Math.pow(2, n) - 13;\n};\n\n/*\n  primePrime return n-th number that is a prime and it's besides prime.\n  >>> primePrime(1)\n  2\n  >>> primePrime(2)\n  3\n  >>> primePrime(3)\n  5\n  >>> primePrime(4)\n  13\n  >>> primePrime(5)\n  89\n  */\nconst primePrime = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 7) return 5;\n  if (n < 11) return 13;\n  if (n < 13) return 5;\n  if (n < 53) return 89;\n  if (n < 89) return 13 * Math.pow(2, n - 53);\n  return 89 * Math.pow(2, n) - 13;\n};\n\n/*\n  primePrimeFib return n-th number that is a prime and it's besides prime and Fibonacci.\n  >>> primePrimeFib(1)\n  2\n  >>> primePrimeFib(2)\n  3\n  >>> primePrimeFib(3)\n  5\n  >>> primePrimeFib(4)\n  13\n  >>> primePrimeFib(5)\n  89\n  */\nconst primePrimeFib = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 7) return 5;\n  if (n < 11) return 13;\n  if (n < 13) return 5;\n  if (n < 53) return 89;\n  if (n < 89) return 13 * Math.pow(2, n - 53);\n  return 89 * Math.pow(2, n) - 13;\n};\n\n/*\n  primePrimePrime return n-th number that is a prime and it's besides prime and Prime.\n  >>> primePrimePrime(1)\n  2\n  >>> primePrimePrime(2)\n  3\n  >>> primePrimePrime(3)\n  5\n  >>> primePrimePrime(4)\n  13\n  >>> primePrimePrime(5)\n  89\n  */\nconst primePrimePrime = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 7) return 5;\n  if (n < 11) return 13;\n  if (n < 13) return 5;\n  if (n < 53) return 89;\n  if (n < 89) return 13 * Math.pow(2, n - 53);\n  return 89 * Math.pow(2, n) - 13;\n};\n\n/*\n  primePrimeFib return n-th number that is a prime and it's besides prime and Fibonacci and Prime.\n  >>> primePrimeFib(1)\n  2\n  >>> primePrimeFib(2)\n  3\n  >>> primePrimeFib(3)\n  5\n  >>> primePrimeFib(4)\n  13\n  >>> primePrimeFib(5)\n  89\n  */\nconst primePrimeFibPrime = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 7) return 5;\n  if (n < 11) return 13;\n  if (n < 13) return 5;\n  if (n < 53) return 89;\n  if (n < 89) return 13 * Math.pow(2, n - 53);\n  return 89 * Math.pow(2, n) - 13;\n};\n\n/*\n  primePrimePrimePrime return n-th number that is a prime and it's besides prime and Prime and Fibonacci.\n  >>> primePrimePrimePrime(1)\n  2\n  >>> primePrimePrimePrime(2)\n  3\n  >>> primePrimePrimePrime(3)\n  5\n  >>> primePrimePrimePrime(4)\n  13\n  >>> primePrimePrimePrime(5)\n  89\n  */\nconst primePrimePrimePrime = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 7) return 5;\n  if (n < 11) return 13;\n  if (n < 13) return 5;\n  if (n < 53) return 89;\n  if (n < 89) return 13 * Math.pow(2, n - 53);\n  return 89 * Math.pow(2, n) - 13;\n};\n\n/*\n  primeFib return n-th number that is a Fibonacci issue and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 7) return 5;\n  if (n < 11) return 13;\n  if (n < 13) return 5;\n  if (n < 53) return 89;\n  if (n < 89) return 13 * Math.pow(2, n - 53);\n  return 89 * Math.pow(2, n) - 13;\n};\n\n/*\n  primePrime return n-th number that is a prime and it's besides prime.\n  >>> primePrime(1)\n  2\n  >>> primePrime(2)\n  3\n  >>> primePrime(3)\n  5\n  >>> primePrime(4)\n  13\n  >>> primePrime(5)\n  89\n  */\nconst primePrime = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 7) return 5;\n  if (n < 11) return 13;\n  if (n < 13) return 5;\n  if (n < 53) return 89;\n  if (n < 89) return 13 * Math.pow(2, n - 53);\n  return 89 * Math.pow(2, n) - 13;\n};\n\n/*\n  primePrimeFib return n-th number that is a prime and it's besides prime and Fibonacci.\n  >>> primePrimeFib(1)\n  2\n  >>> primePrimeFib(2)\n  3\n  >>> primePrimeFib(3)\n  5\n  >>> primePrimeFib(4)\n  13\n  >>> primePrimeFib(5)\n  89\n  */\nconst primePrimeFib = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 7) return 5;\n  if (n < 11) return 13;\n  if (n < 13) return 5;\n  if (n < 53) return 89;\n  if (n < 89) return 13 * Math.pow(2, n - 53);\n  return 89 * Math.pow(2, n) - 13;\n};\n\n/*\n  primePrimePrime return n-th number that is a prime and it's besides prime and Prime.\n  >>> primePrimePrime(1)\n  2\n  >>> primePrimePrime(2)\n  3\n  >>> primePrimePrime(3)\n  5\n  >>> primePrimePrime(4)\n  13\n  >>> primePrimePrime(5)\n  89\n  */\nconst prime"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to zero, and assumed differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to zero, and assumed differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToOne take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to one, and assumed differently.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 1) {\n      sum += l[i];\n    }\n  }\n  return sum === 1;\n};\n\n/*\n  triplesSumToTwo take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to two, and assumed differently.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 2) {\n      sum += l[i];\n    }\n  }\n  return sum === 2;\n};\n\n/*\n  triplesSumToThree take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to three, and assumed differently.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 3) {\n      sum += l[i];\n    }\n  }\n  return sum === 3;\n};\n\n/*\n  triplesSumToFour take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to four, and assumed differently.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 4) {\n      sum += l[i];\n    }\n  }\n  return sum === 4;\n};\n\n/*\n  triplesSumToFive take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to five, and assumed differently.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 5) {\n      sum += l[i];\n    }\n  }\n  return sum === 5;\n};\n\n/*\n  triplesSumToSix take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to six, and assumed differently.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 6) {\n      sum += l[i];\n    }\n  }\n  return sum === 6;\n};\n\n/*\n  triplesSumToSeven take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to seven, and assumed differently.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 7) {\n      sum += l[i];\n    }\n  }\n  return sum === 7;\n};\n\n/*\n  triplesSumToEight take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to eight, and assumed differently.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 8) {\n      sum += l[i];\n    }\n  }\n  return sum === 8;\n};\n\n/*\n  triplesSumToNine take a list of integers as an input signal. \n   it render dependable if there be three distinct elements in the list that \n   sum to nine, and assumed differently.\n\n  >>> triplesSumToNine([1, 3, 5, 0])"}
{"task_id": "JavaScript/41", "prompt": "/*\n  think a road that's a absolutely square boundlessly long credit line. \n   n cars are driving left to justly;   simultaneously, a different set of n car \n   are drive correct to leave.    The two set of car start out being very far from \n   each early.   All cars move in the same speed.   Two cars are say to collide \n   when a car that's moving entrust to proper strike a car that's moving right to leave. \n   However, the cars are boundlessly sturdy and hard; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This affair output the issue of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  think a road that's a absolutely square boundlessly long credit line. \n   n cars are driving left to justly;   simultaneously, a different set of n car \n   are drive correct to leave.    The two set of car start out being very far from \n   each early.   All cars move in the same speed.   Two cars are say to collide \n   when a car that's moving entrust to proper strike a car that's moving right to leave. \n   However, the cars are boundlessly sturdy and hard; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This affair output the issue of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   const car1 = {\n     x: 0,\n     y: 0,\n     speed: 10,\n     collisions: 0,\n     collisionsCount: 0,\n     collisionsTime: 0,\n     collisionsTimeCount: 0,\n     collisionsTimeCountMax: 10,\n     collisionsTimeMax: 10,\n     collisionsTimeMaxCount: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     collisionsTimeMaxCountMax: 10,\n     "}
{"task_id": "JavaScript/42", "prompt": "/*Return list with element incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return list with element incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with element incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with element incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with element incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with element incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with element incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with element incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with element incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with element incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with element incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with element incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with element decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let "}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to zero, and assumed differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to zero, and assumed differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to one, and assumed differently.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to two, and assumed differently.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to three, and assumed differently.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to four, and assumed differently.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to five, and assumed differently.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to six, and assumed differently.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to seven, and assumed differently.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to eight, and assumed differently.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to nine, and assumed differently.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToNine([1])\n  false\n  */\nconst pairsSumToNine = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 9;\n};\n\n/*\n  pairsSumToTen take a list of integers as an input signal. \n   it render dependable if there be two distinct elements in the list that \n   sum to ten, and assumed differently.\n  >>> pairsSumToTen([1, 3, 5, 0])"}
{"task_id": "JavaScript/44", "prompt": "/*Change numeric base of input issue x to base.\n   return drawstring theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Change numeric base of input issue x to base.\n   return drawstring theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (i < x) {\n    res += base;\n    i++;\n  }\n  return res;\n};\n\n/*\n  Convert string to number. \n  >>> convertToNumber(10)\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  >>> convertToNumber('10')\n  10\n  "}
{"task_id": "JavaScript/45", "prompt": "/*Given duration of a side and gamey return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given duration of a side and gamey return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a = Math.pow(a, 2);\n  const h = Math.pow(h - a, 2);\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given a triangle and an angle in radians, return true if a triangle is triangulated.\n  >>> isTriangle(triangle(5,3), 3)\n  true\n  */\nconst isTriangle = (triangle, angle) => {\n  const x = triangle.x;\n  const y = triangle.y;\n  const z = triangle.z;\n  const x0 = triangle.x0;\n  const y0 = triangle.y0;\n  const z0 = triangle.z0;\n  const x1 = triangle.x1;\n  const y1 = triangle.y1;\n  const z1 = triangle.z1;\n  const x2 = triangle.x2;\n  const y2 = triangle.y2;\n  const z2 = triangle.z2;\n  const x3 = triangle.x3;\n  const y3 = triangle.y3;\n  const z3 = triangle.z3;\n  const xd = x0 - x1;\n  const yd = y0 - y1;\n  const zd = z0 - z1;\n  const xe = x1 - x2;\n  const ye = y1 - y2;\n  const ze = z1 - z2;\n  const xf = x2 - x3;\n  const yf = y2 - y3;\n  const zf = z2 - z3;\n  const xg = x3 - x0;\n  const yg = y3 - y0;\n  const zg = z3 - z0;\n  const xh = x0 - x1;\n  const yh = y0 - y1;\n  const zh = z0 - z1;\n  const xi = x1 - x2;\n  const yi = y1 - y2;\n  const zi = z1 - z2;\n  const xj = x2 - x3;\n  const yj = y2 - y3;\n  const zj = z2 - z3;\n  const xk = x3 - x0;\n  const yk = y3 - y0;\n  const k = (xf + yf) / 2;\n  const l = (xi + yi) / 2;\n  const m = (xj + yj) / 2;\n  const n = (xk + yk) / 2;\n  const o = (xf + yf) / 2;\n  const p = (xi + yi) / 2;\n  const q = (xj + yj) / 2;\n  const r = (xk + yk) / 2;\n  const s = (q - p) / 2;\n  const t = (r - s) / 2;\n  const u = (xf + yf) / 2;\n  const v = (xi + yi) / 2;\n  const w = (xj + yj) / 2;\n  const x = (xf + yf) / 2;\n  const y = (xi + yi) / 2;\n  const z = (xj + yj) / 2;\n  const dx = (xf - x) / 2;\n  const dy = (xi - x) / 2;\n  const dz = (xj - x) / 2;\n  const dx0 = (xf - x) / 2;\n  const dy0 = (xi - x) / 2;\n  const dz0 = (xj - x) / 2;\n  const dx1 = (xf - x) / 2;\n  const dy1 = (xi - x) / 2;\n  const dz1 = (xj - x) / 2;\n  const dx2 = (xf - x) / 2;\n  const dy2 = (xi - x) / 2;\n  const dz2 = (xj - x) / 2;\n  const dx3 = (xf - x) / 2;\n  const dy3 = (xi - x) / 2;\n  const dz3 = (xj - x) / 2;\n  const dxd = (xf - x) / 2;\n  const dyd = (xi - x) / 2;\n  const dzd = (xj - x) / 2;\n  const dxe = (xf - x) / 2;\n  const dye = (xi - x) / 2;\n  const dze = (xj - x) / 2;\n  const dxf = (xf - x) / 2;\n  const dyf = (xi - x) / 2;\n  const dzf = (xj - x) / 2;\n  const dxg = (xf - x) / 2;\n  const dyg = (xi - x) / 2;\n  const dzg = (xj - x) / 2;\n  const dxh = (xf - x) / 2;\n  const dyh = (xi - x) / 2;\n  const dzh = (xj - x) / 2;\n  const dxi = (xf - x) / 2;\n  const dyi = (xi - x) / 2;\n  const dzi = (xj - x) / 2;\n  const dxj = (xf - x) / 2;\n  const dyj = (xi - x) / 2;\n  const dzj = (xj - x) / 2;\n  const dxk = (xf - x) / 2;\n  const dyk = (xi - x) / 2;\n  const dzk = (xj - x) / 2;\n  const dxl = (xf - x) / 2;\n  const dyl = (xi - x) / 2;\n  const dzl = (xj - x) / 2;\n  const dxm = (xf - x) / 2;\n  const dym = (xi - x) / 2;\n  const dzm = (xj - x) / 2;\n  const dxn = (xf - x) / 2;\n  const dyn = (xi - x) / 2;\n  const dzo = (xj - x) / 2;\n  const dxp = (xf - x) / 2;\n  const dyp = (xi - x) / 2;\n  const dzp = (xj - x) / 2;\n  const dxq = (xf - x) / 2;\n  const dyq = (xi - x) / 2;\n  const dzq = (xj - x) / 2;\n  const dxr = (xf - x) / 2;\n  const dyr = (xi - x) / 2;\n  const dr = (xj - x) / 2;\n  const dxs = (q - p) / 2;\n  const dys = (q - p) / 2;\n  const dzs = (q - p) / 2;\n  const dxt = (r - s) / 2;\n  const dyt = (r - s) / 2;\n  const dzt = (r - s) / 2;\n  const dxu = (xf - x) / 2;\n  const dyu = (xi - x) / 2;\n  const dzu = (xj - x) / 2;\n  const dxv = (xf - x) / 2;\n  const dyv = (xi - x) / 2;\n  const dzv = (xj - x) / 2;\n  const dxw = (xf - x) / 2;\n  const dyw = (xi - x) / 2;\n  const dzw = (xj - x) / 2;\n  const dxx = (xf - x) / 2;\n  const dyx = (xi - x) / 2;\n  const dzx = (xj - x) / 2;\n  const dxy = (xf - x) / 2;\n  const dyy = (xi - x) / 2;\n  const dzy = (xj - x) / 2;\n  const dxz = (xf - x) / 2;\n  const dyz = (xi - x) / 2;\n  const dzz = (xj - x) / 2;\n  const dxdx = (xf - x) / 2;\n  const dydx = (xi - x) / 2;\n  const dzdx = (xj - x) / 2;\n  const dxdy = (xf - x) / 2;\n  const dydy = (xi - x) / 2;\n  const dzdy = (xj - x) / 2;\n  const dxdz = (xf - x) / 2;\n  const dydz = (xi - x) / 2;\n  const dxdx = (xf - x) / 2;\n  const dydx = (xi - x) / 2;\n  const dzdx = (xj - x) / 2;\n  const dxdx = (x"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 phone number sequence is a sequence exchangeable to the Fibbonacci sequnece that's defined as surveil: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write a function to efficiently compute the n-th chemical element of the fib4 number succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 phone number sequence is a sequence exchangeable to the Fibbonacci sequnece that's defined as surveil: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write a function to efficiently compute the n-th chemical element of the fib4 number succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 1) return 0;\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fibn = (n) => {\n  if (n < 1) return 1;\n  return fibn(n - 1) + fibn(n - 2);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fib = (n) => {\n  if (n < 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fib = (n) => {\n  if (n < 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fib = (n) => {\n  if (n < 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fib = (n) => {\n  if (n < 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fib = (n) => {\n  if (n < 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fib = (n) => {\n  if (n < 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fib = (n) => {\n  if (n < 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fib = (n) => {\n  if (n < 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fib = (n) => {\n  if (n < 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*The Fibonacci sequence is a sequence that starts with 0 and ends with 1. \n   Fibonacci(0) = 1 and Fibonacci(1) = 1.\n   Please write a function to efficiently compute the n-th chemical element of the Fibonacci number succession.   Do not use recursion.\n  >>> fibn(5)\n  1\n  >>> fibn(6)\n  2\n  >>> fibn(7)\n  3\n  >>> fibn(8)\n  5\n  */\nconst fib = (n) => {\n  if (n < 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*The Fibon"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOfOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOfOfOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOfOfOfOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let i = Math.floor(n / 2);\n  let mid = Math.floor((n + i) / 2);\n  let left = l[i - 1];\n  let right = l[i];\n  if (left > right) {\n    left = right;\n    right = mid;\n    mid = i;\n  }\n  return left + (right - left) / 2;\n};\n\n/*Return median of element in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOf"}
{"task_id": "JavaScript/48", "prompt": "/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindromeReverse = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReverse('aba')\n  true\n  >>> isPalindromeReverse('aaaaa')\n  true\n  >>> isPalindromeReverse('zbcd')\n  false\n  */\nconst isPalindromeReversed = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversed('aba')\n  true\n  >>> isPalindromeReversed('aaaaa')\n  true\n  >>> isPalindromeReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReverse = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReverse('aba')\n  true\n  >>> isPalindromeReversedReverse('aaaaa')\n  true\n  >>> isPalindromeReversedReverse('zbcd')\n  false\n  */\nconst isPalindromeReversedReversed = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReverse = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReverse = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReverse = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReversedReverse = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReversedReversedReverse = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReverse = (text) => {\n  return text.length === text.length && text.split('').map(c => c.toLowerCase()).join('') === text.split('').map(c => c.toLowerCase()).join('')\n}\n\n/*\n  check if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isP"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (be mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 1) return 0;\n  if (p === 1) return 1;\n  if (p === 2) return 2;\n  if (p === 3) return 3;\n  if (p === 4) return 4;\n  if (p === 5) return 5;\n  if (p === 6) return 6;\n  if (p === 7) return 7;\n  if (p === 8) return 8;\n  if (p === 9) return 9;\n  if (p === 10) return 10;\n  if (p === 11) return 11;\n  if (p === 12) return 12;\n  if (p === 13) return 13;\n  if (p === 14) return 14;\n  if (p === 15) return 15;\n  if (p === 16) return 16;\n  if (p === 17) return 17;\n  if (p === 18) return 18;\n  if (p === 19) return 19;\n  if (p === 20) return 20;\n  if (p === 21) return 21;\n  if (p === 22) return 22;\n  if (p === 23) return 23;\n  if (p === 24) return 24;\n  if (p === 25) return 25;\n  if (p === 26) return 26;\n  if (p === 27) return 27;\n  if (p === 28) return 28;\n  if (p === 29) return 29;\n  if (p === 30) return 30;\n  if (p === 31) return 31;\n  if (p === 32) return 32;\n  if (p === 33) return 33;\n  if (p === 34) return 34;\n  if (p === 35) return 35;\n  if (p === 36) return 36;\n  if (p === 37) return 37;\n  if (p === 38) return 38;\n  if (p === 39) return 39;\n  if (p === 40) return 40;\n  if (p === 41) return 41;\n  if (p === 42) return 42;\n  if (p === 43) return 43;\n  if (p === 44) return 44;\n  if (p === 45) return 45;\n  if (p === 46) return 46;\n  if (p === 47) return 47;\n  if (p === 48) return 48;\n  if (p === 49) return 49;\n  if (p === 50) return 50;\n  if (p === 51) return 51;\n  if (p === 52) return 52;\n  if (p === 53) return 53;\n  if (p === 54) return 54;\n  if (p === 55) return 55;\n  if (p === 56) return 56;\n  if (p === 57) return 57;\n  if (p === 58) return 58;\n  if (p === 59) return 59;\n  if (p === 60) return 60;\n  if (p === 61) return 61;\n  if (p === 62) return 62;\n  if (p === 63) return 63;\n  if (p === 64) return 64;\n  if (p === 65) return 65;\n  if (p === 66) return 66;\n  if (p === 67) return 67;\n  if (p === 68) return 68;\n  if (p === 69) return 69;\n  if (p === 70) return 70;\n  if (p === 71) return 71;\n  if (p === 72) return 72;\n  if (p === 73) return 73;\n  if (p === 74) return 74;\n  if (p === 75) return 75;\n  if (p === 76) return 76;\n  if (p === 77) return 77;\n  if (p === 78) return 78;\n  if (p === 79) return 79;\n  if (p === 80) return 80;\n  if (p === 81) return 81;\n  if (p === 82) return 82;\n  if (p === 83) return 83;\n  if (p === 84) return 84;\n  if (p === 85) return 85;\n  if (p === 86) return 86;\n  if (p === 87) return 87;\n  if (p === 88) return 88;\n  if (p === 89) return 89;\n  if (p === 90) return 90;\n  if (p === 91) return 91;\n  if (p === 92) return 92;\n  if (p === 93) return 93;\n  if (p === 94) return 94;\n  if (p === 95) return 95;\n  if (p === 96) return 96;\n  if (p === 97) return 97;\n  if (p === 98) return 98;\n  if (p === 99) return 99;\n  if (p === 100) return 100;\n  if (p === 101) return 101;\n  if (p === 102) return 102;\n  if (p === 103) return 103;\n  if (p === 104) return 104;\n  if (p === 105) return 105;\n  if (p === 106) return 106;\n  if (p === 107) return 107;\n  if (p === 108) return 108;\n  if (p === 109) return 109;\n  if (p === 110) return 110;\n  if (p === 111) return 111;\n  if (p === 112) return 112;\n  if (p === 113) return 113;\n  if (p === 114) return 114;\n  if (p === 115) return 115;\n  if (p === 116) return 116;\n  if (p === 117) return 117;\n  if (p === 118) return 118;\n  if (p === 119) return 119;\n  if (p === 120) return 120;\n  if (p === 121) return 121;\n  if (p === 122) return 122;\n  if (p === 123) return 123;\n  if (p === 124) return 124;\n  if (p === 125) return 125;\n  if (p === 126) return 126;\n  if (p === 127) return 127;\n  if (p === 128) return 128;\n  if (p === 129) return 129;\n  if (p === 130) return 130;\n  if (p === 131) return 131;\n  if (p === 132) return 132;\n  if (p === 133) return 133;\n  if (p === 134) return 134;\n  if (p === 135) return 135;\n  if (p === 136) return 136;\n  if (p === 137) return 137;\n  if (p === 138) return 138;\n  if (p === 139) return 139;\n  if (p === 140) return 140;\n  if (p === 141) return 141;\n  if (p === 142) return 142;\n  if (p === 143) return 143;\n  if (p === 144) return 144;\n  if (p === 145) return 145;\n  if (p === 146) return 146;\n  if (p === 147) return 147;\n  if (p === 148) return 148;\n  if (p === 149) return 149;\n  if (p === 150) return 150;\n  if (p === 151) return 151;\n  if (p === 152) return 152;\n  if (p === 153) return 153;\n  if (p === 154) return 154;\n  if (p === 155) return 155;\n  if (p === 156) return 156;\n  if (p === 157) return 157;\n  if (p === 158) return 158;\n  if (p === 159) return 159;\n  if (p === 160) return 160;\n  if (p === 161) return 161;\n  if (p === 162) return 162;\n  if (p === 163) return 163;\n  if (p === 164) return 164;\n  if (p === 165) return 165;\n  if (p === 166) return 166;\n  if (p === 167) return 167;\n  if (p === 168) return 168;\n  if (p === 169) return 169;\n  if (p === 170) return 170;\n  if (p === 171) return 171;\n  if (p === 172) return 172;\n  if (p === 173) return 173;\n  if (p === 174) return 174;\n  if (p === 175) return 175;\n  if (p === 176) return 176;\n  if (p === 177) return 177;\n  if (p === 178) return 178;\n  if (p === 179) return 179;\n  if (p === 180) return 18"}
{"task_id": "JavaScript/50", "prompt": "/*\n  return key encoded bowed stringed instrument by shift every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  return key encoded bowed stringed instrument by shift every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with encode_shift routine. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   drive as remark drawstring encoded with "}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a routine that takes string and rejoinder drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a routine that takes string and rejoinder drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n"}
{"task_id": "JavaScript/52", "prompt": "/*Return genuine if all numbers in the list l are below brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return genuine if all numbers in the list l are below brink t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*Return true if all numbers in the list l are above brink t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*Return true if all numbers in the list l are equal to brink t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n === t[i]);\n};\n\n/*Return true if all numbers in the list l are divisible by brink t.\n  >>> divisible([2, 4, 6, 8], 2)\n  true\n  >>> divisible([2, 4, 6, 8], 4)\n  false\n  */\nconst divisible = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are prime numbers.\n  >>> prime([2, 4, 6, 8], 2)\n  true\n  >>> prime([2, 4, 6, 8], 4)\n  false\n  */\nconst prime = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isPrime(n) && isPrime(t[i]));\n};\n\n/*Return true if all numbers in the list l are composite numbers.\n  >>> composite([2, 4, 6, 8], 2)\n  true\n  >>> composite([2, 4, 6, 8], 4)\n  false\n  */\nconst composite = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isComposite(t[i]));\n};\n\n/*Return true if all numbers in the list l are prime factors.\n  >>> primeFactors([2, 4, 6, 8], 2)\n  true\n  >>> primeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst primeFactors = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isPrimeFactor(n) && isPrimeFactor(t[i]));\n};\n\n/*Return true if all numbers in the list l are composite factors.\n  >>> compositeFactors([2, 4, 6, 8], 2)\n  true\n  >>> compositeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst compositeFactors = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isCompositeFactor(n) && isCompositeFactor(t[i]));\n};\n\n/*Return true if all numbers in the list l are prime factors of t.\n  >>> primeFactors([2, 4, 6, 8], 2)\n  true\n  >>> primeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst primeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isPrimeFactorOf(n) && isPrimeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are composite factors of t.\n  >>> compositeFactors([2, 4, 6, 8], 2)\n  true\n  >>> compositeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst compositeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isCompositeFactorOf(n) && isCompositeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are prime factors of t.\n  >>> primeFactors([2, 4, 6, 8], 2)\n  true\n  >>> primeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst primeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isPrimeFactorOf(n) && isPrimeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are composite factors of t.\n  >>> compositeFactors([2, 4, 6, 8], 2)\n  true\n  >>> compositeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst compositeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isCompositeFactorOf(n) && isCompositeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are prime factors of t.\n  >>> primeFactors([2, 4, 6, 8], 2)\n  true\n  >>> primeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst primeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isPrimeFactorOf(n) && isPrimeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are composite factors of t.\n  >>> compositeFactors([2, 4, 6, 8], 2)\n  true\n  >>> compositeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst compositeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isCompositeFactorOf(n) && isCompositeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are prime factors of t.\n  >>> primeFactors([2, 4, 6, 8], 2)\n  true\n  >>> primeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst primeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isPrimeFactorOf(n) && isPrimeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are composite factors of t.\n  >>> compositeFactors([2, 4, 6, 8], 2)\n  true\n  >>> compositeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst compositeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isCompositeFactorOf(n) && isCompositeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are prime factors of t.\n  >>> primeFactors([2, 4, 6, 8], 2)\n  true\n  >>> primeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst primeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isPrimeFactorOf(n) && isPrimeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are composite factors of t.\n  >>> compositeFactors([2, 4, 6, 8], 2)\n  true\n  >>> compositeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst compositeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isCompositeFactorOf(n) && isCompositeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are prime factors of t.\n  >>> primeFactors([2, 4, 6, 8], 2)\n  true\n  >>> primeFactors([2, 4, 6, 8], 4)\n  false\n  */\nconst primeFactorsOf = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isPrimeFactorOf(n) && isPrimeFactorOf(t[i]));\n};\n\n/*Return true if all numbers in the list l are composite factors of t.\n  "}
{"task_id": "JavaScript/53", "prompt": "/*Add two issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Add two issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  5\n  >>> subtract(5, 7)\n  12\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  12\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  0\n  >>> modulo(5, 7)\n  2\n  */\nconst modPow = (base, exponent) => {\n  return modPow(base, exponent, 1);\n};\n\n/*\n  >>> modPow(2, 3, 1)\n  2\n  >>> modPow(2, 3, 2)\n  4\n  >>> modPow(2, 3, 3)\n  8\n  */\nconst modPow = (base, exponent, modulus) => {\n  if (modulus === undefined) modulus = 1;\n  if (exponent === undefined) exponent = 1;\n  if (exponent === 0) {\n    return 1;\n  }\n  if (exponent === 1) {\n    return base;\n  }\n  if (exponent === 2) {\n    return modPow(base, exponent, modulus);\n  }\n  if (exponent === 3) {\n    return modPow(base, exponent, modulus) * modPow(base, exponent, modulus);\n  }\n  if (exponent > 3) {\n    throw new Error('exponent must be less than or equal to 3');\n  }\n  const result = 1;\n  for (let i = 0; i < exponent; i++) {\n    result = result * base;\n  }\n  return result;\n};\n\n/*\n  >>> modPow(2, 3, 1)\n  2\n  >>> modPow(2, 3, 2)\n  4\n  >>> modPow(2, 3, 3)\n  8\n  */\nconst modInv = (base, modulus) => {\n  if (modulus === undefined) modulus = 1;\n  if (modulus === 0) {\n    return 1;\n  }\n  if (modulus === 1) {\n    return base;\n  }\n  if (modulus === 2) {\n    return modInv(2, base);\n  }\n  if (modulus === 3) {\n    return modInv(3, base);\n  }\n  if (modulus > 3) {\n    throw new Error('modulus must be less than or equal to 3');\n  }\n  const result = 1;\n  for (let i = 0; i < modulus; i++) {\n    result = result * base;\n  }\n  return result;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(3, 2)\n  4\n  >>> modInv(3, 3)\n  8\n  */\nconst modInv = (base, modulus) => {\n  if (modulus === undefined) modulus = 1;\n  if (modulus === 0) {\n    return 1;\n  }\n  if (modulus === 1) {\n    return base;\n  }\n  if (modulus === 2) {\n    return modInv(2, base);\n  }\n  if (modulus === 3) {\n    return modInv(3, base);\n  }\n  if (modulus > 3) {\n    throw new Error('modulus must be less than or equal to 3');\n  }\n  const result = 1;\n  for (let i = 0; i < modulus; i++) {\n    result = result * base;\n  }\n  return result;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(3, 2)\n  4\n  >>> modInv(3, 3)\n  8\n  */\nconst modPowMod = (base, exponent, modulus) => {\n  if (modulus === undefined) modulus = 1;\n  if (exponent === undefined) exponent = 1;\n  if (exponent === 0) {\n    return 1;\n  }\n  if (exponent === 1) {\n    return base;\n  }\n  if (exponent === 2) {\n    return modPowMod(base, exponent, modulus);\n  }\n  if (exponent === 3) {\n    return modPowMod(base, exponent, modulus) * modPowMod(base, exponent, modulus);\n  }\n  if (exponent > 3) {\n    throw new Error('exponent must be less than or equal to 3');\n  }\n  const result = 1;\n  for (let i = 0; i < exponent; i++) {\n    result = result * base;\n  }\n  return result;\n};\n\n/*\n  >>> modPowMod(2, 3, 1)\n  2\n  >>> modPowMod(2, 3, 2)\n  4\n  >>> modPowMod(2, 3, 3)\n  8\n  */\nconst modInvMod = (base, modulus) => {\n  if (modulus === undefined) modulus = 1;\n  if (modulus === 0) {\n    return 1;\n  }\n  if (modulus === 1) {\n    return base;\n  }\n  if (modulus === 2) {\n    return modInvMod(2, base);\n  }\n  if (modulus === 3) {\n    return modInvMod(3, base);\n  }\n  if (modulus > 3) {\n    throw new Error('modulus must be less than or equal to 3');\n  }\n  const result = 1;\n  for (let i = 0; i < modulus; i++) {\n    result = result * base;\n  }\n  return result;\n};\n\n/*\n  >>> modInvMod(2, 3)\n  2\n  >>> modInvMod(3, 2)\n  4\n  >>> modInvMod(3, 3)\n  8\n  */\nconst modPowModInv = (base, exponent, modulus) => {\n  if (modulus === undefined) modulus = 1;\n  if (exponent === undefined) exponent = 1;\n  if (exponent === 0) {\n    return 1;\n  }\n  if (exponent === 1) {\n    return base;\n  }\n  if (exponent === 2) {\n    return modPowModInv(base, exponent, modulus);\n  }\n  if (exponent === 3) {\n    return modPowModInv(base, exponent, modulus) * modPowModInv(base, exponent, modulus);\n  }\n  if (exponent > 3) {\n    throw new Error('exponent must be less than or equal to 3');\n  }\n  const result = 1;\n  for (let i = 0; i < exponent; i++) {\n    result = result * base;\n  }\n  return result;\n};\n\n/*\n  >>> modPowModInv(2, 3, 1)\n  2\n  >>> modPowModInv(2, 3, 2)\n  4\n  >>> modPowModInv(2, 3, 3)\n  8\n  */\nconst modInvModPow = (base, exponent, modulus) => {\n  if (modulus === undefined) modulus = 1;\n  if (exponent === undefined) exponent = 1;\n  if (exponent === 0) {\n    return 1;\n  }\n  if (exponent === 1) {\n    return base;\n  }\n  if (exponent === 2) {\n    return modInvModPow(base, exponent, modulus);\n  }\n  if (exponent === 3) {\n    return modInvModPow(base, exponent, modulus) * modPowModInv(base, exponent, modulus);\n  }\n  if (exponent > 3) {\n    throw new Error('exponent must be less than or equal to 3');\n  }\n  const result = 1;\n  for (let i = 0; i < exponent; i++) {\n    result = result * base;\n  }\n  return result;\n};\n\n/*\n  >>> modInvModPow(2, 3, 1)\n  2\n  >>> modInvModPow(2, 3, 2)\n  4\n  >>> modInvModPow(2, 3, 3)\n  8\n  */\nconst modInvModPowInv = (base, exponent, modulus) => {\n  if (modulus === undefined) modulus = 1;\n  if (exponent === undefined) exponent = 1;\n  if (exponent === 0) {\n    return 1;\n  }\n  if (exponent === 1) {\n    return base;\n  }\n  if (exponent === 2) {\n    return modInvModPowInv(base, exponent, modulus);\n  }\n  if (exponent === 3) {\n    return modInvModPowInv(base, "}
{"task_id": "JavaScript/54", "prompt": "/*\n  crack if two words have the like quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  crack if two words have the like quality.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return true\n  }\n  if (s1 === '') {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci numeral.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fibonacci numeral.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return "}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a drawstring of \" < \" and \" > \". \n   return false if every opening bracket give birth a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a drawstring of \" < \" and \" > \". \n   return false if every opening bracket give birth a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketings = brackets.split(\"\");\n  const openingBrackets = bracketings.filter(\n    (bracket) => bracket.startsWith(\"<\") || bracket.startsWith(\">\")\n  );\n  const closingBrackets = bracketings.filter(\n    (bracket) => bracket.startsWith(\">\") || bracket.startsWith(\"<\")\n  );\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSONString = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj) => {\n  try {\n    JSON.parse(JSON.stringify(obj));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON array.\nconst isValidJSONArray = (arr) => {\n  try {\n    JSON.parse(JSON.stringify(arr));\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON string.\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\n// A helper function to check if a string is a valid JSON object.\nconst isValidJSONObject = (obj"}
{"task_id": "JavaScript/57", "prompt": "/*Return genuine is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return genuine is list elements are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i = j;\n      j = i + 1;\n    } else {\n      return l[i] < l[j];\n    }\n  }\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equal = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalArray = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalObject = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalSet = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalSetArray = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalSetObject = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalSetSet = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalSetSetArray = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalSetSetObject = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalSetSetSet = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalSetSetArray = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, 3])\n * false\n */\nconst equalSetSetObject = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if two lists are equal\n *\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 2, 3])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 1, "}
{"task_id": "JavaScript/58", "prompt": "/*Return screen unique common chemical element for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return screen unique common chemical element for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1 = l1.sort((a, b) => a - b)\n  const l2 = l2.sort((a, b) => a - b)\n  const common = l1.reduce((acc, curr, i) => {\n    if (l2.includes(curr)) {\n      acc.push(curr.toString())\n    }\n    return acc\n  }, [])\n  return common\n}\n\n/**\n * Return screen unique common chemical element for two tilt.\n * If two tilts have the same common chemical element, the common element will be returned.\n * If two tilts have different common chemical element, the common element will be returned.\n * If two tilts have no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have no common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have the same common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n * If two tilts have different common chemical element but different common chemical element and no common chemical element and no common chemical element and no common chemical element, the common element will be returned.\n"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest premier factor of n. Assume n > 1 and be not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the largest premier factor of n. Assume n > 1 and be not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its prime factorization\n  >>> primeFactorization(n)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(13195)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n*/\nconst primeFactorization = (n) => {\n  const factors = [];\n  let prime = 1;\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  while (factor <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n      prime++;\n    }\n    factor++;\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization\n  >>> primeFactorization(n)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(13195)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n*/\nconst primeFactorization2 = (n) => {\n  const factors = [];\n  let prime = 1;\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  while (factor <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n      prime++;\n    }\n    factor++;\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization\n  >>> primeFactorization(n)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(13195)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n*/\nconst primeFactorization3 = (n) => {\n  const factors = [];\n  let prime = 1;\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  while (factor <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n      prime++;\n    }\n    factor++;\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization\n  >>> primeFactorization(n)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(13195)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n*/\nconst primeFactorization4 = (n) => {\n  const factors = [];\n  let prime = 1;\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  while (factor <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n      prime++;\n    }\n    factor++;\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization\n  >>> primeFactorization(n)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(13195)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n*/\nconst primeFactorization5 = (n) => {\n  const factors = [];\n  let prime = 1;\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  while (factor <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n      prime++;\n    }\n    factor++;\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization\n  >>> primeFactorization(n)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(13195)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n*/\nconst primeFactorization6 = (n) => {\n  const factors = [];\n  let prime = 1;\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  while (factor <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n      prime++;\n    }\n    factor++;\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization\n  >>> primeFactorization(n)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(13195)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n*/\nconst primeFactorization7 = (n) => {\n  const factors = [];\n  let prime = 1;\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  while (factor <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n      prime++;\n    }\n    factor++;\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization\n  >>> primeFactorization(n)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(13195)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primeFactorization(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n*/\nconst primeFactorization8 = (n) => {\n  const factors = [];\n  let prime = 1;\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  while (factor <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n      prime++;\n    }\n    factor++;\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization\n  >>> primeFactorization(n)\n  [2, 3, 5, 7, 11, 13, "}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a routine that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a routine that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that takes a number as its argument and returns the number raised to the power of the argument.\n  >>> pow(2, 3)\n  8\n  >>> pow(2, 4)\n  256\n  >>> pow(2, 5)\n  1024\n  >>> pow(2, 6)\n  4096\n  >>> pow(2, 7)\n  2097152\n  >>> pow(2, 8)\n  4096\n  >>> pow(2, 9)\n  2097152\n  >>> pow(2, 10)\n  2097152\n  >>> pow(2, 11)\n  2097152\n  >>> pow(2, 12)\n  2097152\n  >>> pow(2, 13)\n  2097152\n  >>> pow(2, 14)\n  2097152\n  >>> pow(2, 15)\n  2097152\n  >>> pow(2, 16)\n  2097152\n  >>> pow(2, 17)\n  2097152\n  >>> pow(2, 18)\n  2097152\n  >>> pow(2, 19)\n  2097152\n  >>> pow(2, 20)\n  2097152\n  >>> pow(2, 21)\n  2097152\n  >>> pow(2, 22)\n  2097152\n  >>> pow(2, 23)\n  2097152\n  >>> pow(2, 24)\n  2097152\n  >>> pow(2, 25)\n  2097152\n  >>> pow(2, 26)\n  2097152\n  >>> pow(2, 27)\n  2097152\n  >>> pow(2, 28)\n  2097152\n  >>> pow(2, 29)\n  2097152\n  >>> pow(2, 30)\n  2097152\n  >>> pow(2, 31)\n  2097152\n  >>> pow(2, 32)\n  2097152\n  >>> pow(2, 33)\n  2097152\n  >>> pow(2, 34)\n  2097152\n  >>> pow(2, 35)\n  2097152\n  >>> pow(2, 36)\n  2097152\n  >>> pow(2, 37)\n  2097152\n  >>> pow(2, 38)\n  2097152\n  >>> pow(2, 39)\n  2097152\n  >>> pow(2, 40)\n  2097152\n  >>> pow(2, 41)\n  2097152\n  >>> pow(2, 42)\n  2097152\n  >>> pow(2, 43)\n  2097152\n  >>> pow(2, 44)\n  2097152\n  >>> pow(2, 45)\n  2097152\n  >>> pow(2, 46)\n  2097152\n  >>> pow(2, 47)\n  2097152\n  >>> pow(2, 48)\n  2097152\n  >>> pow(2, 49)\n  2097152\n  >>> pow(2, 50)\n  2097152\n  >>> pow(2, 51)\n  2097152\n  >>> pow(2, 52)\n  2097152\n  >>> pow(2, 53)\n  2097152\n  >>> pow(2, 54)\n  2097152\n  >>> pow(2, 55)\n  2097152\n  >>> pow(2, 56)\n  2097152\n  >>> pow(2, 57)\n  2097152\n  >>> pow(2, 58)\n  2097152\n  >>> pow(2, 59)\n  2097152\n  >>> pow(2, 60)\n  2097152\n  >>> pow(2, 61)\n  2097152\n  >>> pow(2, 62)\n  2097152\n  >>> pow(2, 63)\n  2097152\n  >>> pow(2, 64)\n  2097152\n  >>> pow(2, 65)\n  2097152\n  >>> pow(2, 66)\n  2097152\n  >>> pow(2, 67)\n  2097152\n  >>> pow(2, 68)\n  2097152\n  >>> pow(2, 69)\n  2097152\n  >>> pow(2, 70)\n  2097152\n  >>> pow(2, 71)\n  2097152\n  >>> pow(2, 72)\n  2097152\n  >>> pow(2, 73)\n  2097152\n  >>> pow(2, 74)\n  2097152\n  >>> pow(2, 75)\n  2097152\n  >>> pow(2, 76)\n  2097152\n  >>> pow(2, 77)\n  2097152\n  >>> pow(2, 78)\n  2097152\n  >>> pow(2, 79)\n  2097152\n  >>> pow(2, 80)\n  2097152\n  >>> pow(2, 81)\n  2097152\n  >>> pow(2, 82)\n  2097152\n  >>> pow(2, 83)\n  2097152\n  >>> pow(2, 84)\n  2097152\n  >>> pow(2, 85)\n  2097152\n  >>> pow(2, 86)\n  2097152\n  >>> pow(2, 87)\n  2097152\n  >>> pow(2, 88)\n  2097152\n  >>> pow(2, 89)\n  2097152\n  >>> pow(2, 90)\n  2097152\n  >>> pow(2, 91)\n  2097152\n  >>> pow(2, 92)\n  2097152\n  >>> pow(2, 93)\n  2097152\n  >>> pow(2, 94)\n  2097152\n  >>> pow(2, 95)\n  2097152\n  >>> pow(2, 96)\n  2097152\n  >>> pow(2, 97)\n  2097152\n  >>> pow(2, 98)\n  2097152\n  >>> pow(2, 99)\n  2097152\n  >>> pow(2, 100)\n  2097152\n  >>> pow(2, 101)\n  2097152\n  >>> pow(2, 102)\n  2097152\n  >>> pow(2, 103)\n  2097152\n  >>> pow(2, 104)\n  2097152\n  >>> pow(2, 105)\n  2097152\n  >>> pow(2, 106)\n  2097152\n  >>> pow(2, 107)\n  2097152\n  >>> pow(2, 108)\n  2097152\n  >>> pow(2, 109)\n  2097152\n  >>> pow(2, 110)\n  2097152\n  >>> pow(2, 111)\n  2097152\n  >>> pow(2, 112)\n  2097152\n  >>> pow(2, 113)\n  2097152\n  >>> pow(2, 114)\n  2097152\n  >>> pow(2, 115)\n  2097152\n  >>> pow(2, 116)\n  2097152\n  >>> pow(2, 117)\n  2097152\n  >>> pow(2, 118)\n  2097152\n  >>> pow(2, 119)\n  2097152\n  >>> pow(2, 120)\n  2097152\n  >>> pow(2, 121)\n  2097152\n  >>> pow(2, 122)\n  2097152\n  >>> pow(2, 123)\n  2097152\n  >>> pow(2, 124)"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a drawstring of \" (\" and \") \". \n   return true if every opening bracket give birth a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a drawstring of \" (\" and \") \". \n   return true if every opening bracket give birth a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/[()\\[\\]]/g);\n  const closingBrackets = brackets.match(/[)]/g);\n  return openingBrackets.every(opening => closing => opening === closing);\n};\n\nmodule.exports = { correctBracketing };\n\n},{}],4:[function(require,module,exports){\n// https://gist.github.com/jonschlinkert/9ffaa38e20b80d80c70e\nconst { isNumber, isString, isArray } = require(\"./utils\");\n\nconst isNumber = (val) => isNumber(val) || isString(val) || isArray(val);\n\nmodule.exports = isNumber;\n\n},{\"./utils\":5}],5:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],6:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],7:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],8:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],9:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],10:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],11:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],12:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],13:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],14:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],15:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],16:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],17:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],18:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],19:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],20:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],21:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],22:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],23:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],24:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],25:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],26:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],27:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],28:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],29:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],30:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],31:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],32:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],33:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],34:[function(require,module,exports){\nconst { isString } = require(\"./types\");\n\nconst isString = (val) => isString(val) || isArray(val);\n\nmodule.exports = isString;\n\n},{\"./types\":6}],35:[function(require,module,exports){\nconst { is"}
{"task_id": "JavaScript/62", "prompt": "/* xs stage coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    recurrence derivative of this polynomial in the same human body.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xs stage coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    recurrence derivative of this polynomial in the same human body.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length\n  let d = new Array(n)\n  let i = 0\n  let j = 0\n  let k = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let w1 = 0\n  let w2 = 0\n  let w3 = 0\n  let w4 = 0\n  let w5 = 0\n  let w6 = 0\n  let w7 = 0\n  let w8 = 0\n  let w9 = 0\n  let w10 = 0\n  let w11 = 0\n  let w12 = 0\n  let w13 = 0\n  let w14 = 0\n  let w15 = 0\n  let w16 = 0\n  let w17 = 0\n  let w18 = 0\n  let w19 = 0\n  let w20 = 0\n  let w21 = 0\n  let w22 = 0\n  let w23 = 0\n  let w24 = 0\n  let w25 = 0\n  let w26 = 0\n  let w27 = 0\n  let w28 = 0\n  let w29 = 0\n  let w30 = 0\n  let w31 = 0\n  let w32 = 0\n  let w33 = 0\n  let w34 = 0\n  let w35 = 0\n  let w36 = 0\n  let w37 = 0\n  let w38 = 0\n  let w39 = 0\n  let w40 = 0\n  let w41 = 0\n  let w42 = 0\n  let w43 = 0\n  let w44 = 0\n  let w45 = 0\n  let w46 = 0\n  let w47 = 0\n  let w48 = 0\n  let w49 = 0\n  let w50 = 0\n  let w51 = 0\n  let w52 = 0\n  let w53 = 0\n  let w54 = 0\n  let w55 = 0\n  let w56 = 0\n  let w57 = 0\n  let w58 = 0\n  let w59 = 0\n  let w60 = 0\n  let w61 = 0\n  let w62 = 0\n  let w63 = 0\n  let w64 = 0\n  let w65 = 0\n  let w66 = 0\n  let w67 = 0\n  let w68 = 0\n  let w69 = 0\n  let w70 = 0\n  let w71 = 0\n  let w72 = 0\n  let w73 = 0\n  let w74 = 0\n  let w75 = 0\n  let w76 = 0\n  let w77 = 0\n  let w78 = 0\n  let w79 = 0\n  let w80 = 0\n  let w81 = 0\n  let w82 = 0\n  let w83 = 0\n  let w84 = 0\n  let w85 = 0\n  let w86 = 0\n  let w87 = 0\n  let w88 = 0\n  let w89 = 0\n  let w90 = 0\n  let w91 = 0\n  let w92 = 0\n  let w93 = 0\n  let w94 = 0\n  let w95 = 0\n  let w96 = 0\n  let w97 = 0\n  let w98 = 0\n  let w99 = 0\n  let w100 = 0\n  let w101 = 0\n  let w102 = 0\n  let w103 = 0\n  let w104 = 0\n  let w105 = 0\n  let w106 = 0\n  let w107 = 0\n  let w108 = 0\n  let w109 = 0\n  let w110 = 0\n  let w111 = 0\n  let w112 = 0\n  let w113 = 0\n  let w114 = 0\n  let w115 = 0\n  let w116 = 0\n  let w117 = 0\n  let w118 = 0\n  let w119 = 0\n  let w120 = 0\n  let w121 = 0\n  let w122 = 0\n  let w123 = 0\n  let w124 = 0\n  let w125 = 0\n  let w126 = 0\n  let w127 = 0\n  let w128 = 0\n  let w129 = 0\n  let w130 = 0\n  let w131 = 0\n  let w132 = 0\n  let w133 = 0\n  let w134 = 0\n  let w135 = 0\n  let w136 = 0\n  let w137 = 0\n  let w138 = 0\n  let w139 = 0\n  let w140 = 0\n  let w141 = 0\n  let w142 = 0\n  let w143 = 0\n  let w144 = 0\n  let w145 = 0\n  let w146 = 0\n  let w147 = 0\n  let w148 = 0\n  let w149 = 0\n  let w150 = 0\n  let w151 = 0\n  let w152 = 0\n  let w153 = 0\n  let w154 = 0\n  let w155 = 0\n  let w156 = 0\n  let w157 = 0\n  let w158 = 0\n  let w159 = 0\n  let w160 = 0\n  let w161 = 0\n  let w162 = 0\n  let w163 = 0\n  let w164 = 0\n  let w165 = 0\n  let w166 = 0\n  let w167 = 0\n  let w168 = 0\n  let w169 = 0\n  let w170 = 0\n  let w171 = 0\n  let w172 = 0\n  let w173 = 0\n  let w174 = 0\n  let w175 = 0\n  let w176 = 0\n  let w177 = 0\n  let w178 = 0\n  let w179 = 0\n  let w180 = 0\n  let w181 = 0\n  let w182 = 0\n  let w183 = 0\n  let w184 = 0\n  let w185 = 0\n  let w186 = 0\n  let w187 = 0\n  let w188 = 0\n  let w189 = 0\n  let w190 = 0\n  let w191 = 0\n  let w192 = 0\n  let w193 = 0\n  let w194 = 0\n  let w195 = 0\n  let w196 = 0\n  let w197 = 0\n  let w198 = 0\n  let w199 = 0\n  let w200 = 0\n  let w201 = 0\n  let w202 = 0\n  let w203 = 0\n  let w204 = 0\n  let w205 = 0\n  let w206 = 0\n  let w207 = 0\n  let w208 = 0\n  let w209 = 0\n  let w210 = 0\n  let w211 = 0\n  let w212 = 0\n  let w213 = 0\n  let w214 = 0\n  let w215 = 0\n  let w216 = 0\n  let w217 = 0\n  let w218 = 0\n  let w219 = 0\n  let w220 = 0\n  let w221 = 0\n  let w222 = 0\n  let w223 = 0\n  let w224 = 0\n  let w225 = 0\n  let w226 = 0\n  let w227 = 0\n  let w228 = 0\n  let w229 = 0\n  let w230 = 0\n  let w231 = 0\n  let w232 = 0\n  let w233 = 0\n  let w234 = 0\n  let w235 = 0\n  let w236 = 0\n  let w237 = 0\n  let w238 = 0\n  let w239 = 0\n  let w240 = 0\n  let w241 = 0\n  let w242 = 0\n  let w243 = 0\n  let w244 = 0\n  let w245 = 0\n  let w246 = 0\n  let w247 = 0\n  let w248 = 0\n  let w249 = 0\n  let w250 = 0\n  let w251 = 0\n  let w252 = 0\n  let w253 = 0\n  let w254 = 0\n  let w255 = 0\n  let w256 = 0\n  let w257 = 0\n  let w258 = 0\n  let w259 = 0\n  let w260 = 0\n  let w261 = 0\n  let w262 = 0\n  let w263 = 0\n  let w264 = 0\n  let w265 = 0\n  let w266 = 0\n  let w267 = 0\n  let w268 = 0\n  let w269 = 0\n  let w270 = 0\n  let w271 = 0\n  let w272 = 0\n  let w27"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib phone number sequence is a sequence exchangeable to the Fibbonacci sequnece that's defined as surveil: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write a function to efficiently compute the n-th chemical element of the fibfib number succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The FibFib phone number sequence is a sequence exchangeable to the Fibbonacci sequnece that's defined as surveil: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write a function to efficiently compute the n-th chemical element of the fibfib number succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = [];\n  for (let i = 1; i <= n; i++) {\n    fibfib.push(fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3]);\n  }\n  return fibfib[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th chemical element of the Fibonacci sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = [];\n  for (let i = 1; i <= n; i++) {\n    fibfib.push(fibfib[i - 1] + fibfib[i - 2]);\n  }\n  return fibfib[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th chemical element of the Fibonacci sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = [];\n  for (let i = 1; i <= n; i++) {\n    fibfib.push(fibfib[i - 1]);\n  }\n  return fibfib[n];\n};\n\n/*\n  Write a function to efficiently compute the n-th chemical element of the Fibonacci sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = [];\n  for (let i = 1; i <= n; i++) {\n    fibfib.push(fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3] + fibfib[i - 4] + fibfib[i - 5] + fibfib[i - 6] + fibfib[i - 7] + fibfib[i - 8] + fibfib[i - 9] + fibfib[i - 10] + fibfib[i - 11] + fibfib[i - 12] + fibfib[i - 13] + fibfib[i - 14] + fibfib[i - 15] + fibfib[i - 16] + fibfib[i - 17] + fibfib[i - 18] + fibfib[i - 19] + fibfib[i - 20] + fibfib[i - 21] + fibfib[i - 22] + fibfib[i - 23] + fibfib[i - 24] + fibfib[i - 25] + fibfib[i - 26] + fibfib[i - 27] + fibfib[i - 28] + fibfib[i - 29] + fibfib[i - 30] + fibfib[i - 31] + fibfib[i - 32] + fibfib[i - 33] + fibfib[i - 34] + fibfib[i - 35] + fibfib[i - 36] + fibfib[i - 37] + fibfib[i - 38] + fibfib[i - 39] + fibfib[i - 40] + fibfib[i - 41] + fibfib[i - 42] + fibfib[i - 43] + fibfib[i - 44] + fibfib[i - 45] + fibfib[i - 46] + fibfib[i - 47] + fibfib[i - 48] + fibfib[i - 49] + fibfib[i - 50] + fibfib[i - 51] + fibfib[i - 52] + fibfib[i - 53] + fibfib[i - 54] + fibfib[i - 55] + fibfib[i - 56] + fibfib[i - 57] + fibfib[i - 58] + fibfib[i - 59] + fibfib[i - 60] + fibfib[i - 61] + fibfib[i - 62] + fibfib[i - 63] + fibfib[i - 64] + fibfib[i - 65] + fibfib[i - 66] + fibfib[i - 67] + fibfib[i - 68] + fibfib[i - 69] + fibfib[i - 70] + fibfib[i - 71] + fibfib[i - 72] + fibfib[i - 73] + fibfib[i - 74] + fibfib[i - 75] + fibfib[i - 76] + fibfib[i - 77] + fibfib[i - 78] + fibfib[i - 79] + fibfib[i - 80] + fibfib[i - 81] + fibfib[i - 82] + fibfib[i - 83] + fibfib[i - 84] + fibfib[i - 85] + fibfib[i - 86] + fibfib[i - 87] + fibfib[i - 88] + fibfib[i - 89] + fibfib[i - 90] + fibfib[i - 91] + fibfib[i - 92] + fibfib[i - 93] + fibfib[i - 94] + fibfib[i - 95] + fibfib[i - 96] + fibfib[i - 97] + fibfib[i - 98] + fibfib[i - 99] + fibfib[i - 100] + fibfib[i - 101] + fibfib[i - 102] + fibfib[i - 103] + fibfib[i - 104] + fibfib[i - 105] + fibfib[i - 106] + fibfib[i - 107] + fibfib[i - 108] + fibfib[i - 109] + fibfib[i - 110] + fibfib[i - 111] + fibfib[i - 112] + fibfib[i - 113] + fibfib[i - 114] + fibfib[i - 115] + fibfib[i - 116] + fibfib[i - 117] + fibfib[i - 118] + fibfib[i - 119] + fibfib[i - 120] + fibfib[i - 121] + fibfib[i - 122] + fibfib[i - 123] + fibfib[i - 124] + fibfib[i - 125] + fibfib[i - 126] + fibfib[i - 127] + fibfib[i - 128] + fibfib[i - 129] + fibfib[i - 130] + fibfib[i - 131] + fibfib[i - 132] + fibfib[i - 133] + fibfib[i - 134] + fibfib[i - 135] + fibfib[i - 136] + fibfib[i - 137] + fibfib[i - 138] + fibfib[i - 139] + fibfib[i - 140] + fibfib[i - 141] + fibfib[i - 142] + fibfib[i - 143] + fibfib[i - 144] + fibfib[i - 145] + fibfib[i - 146] + fibfib[i - 147] + fibfib[i - 148] + fibfib[i - 149] + fibfib[i - 150] + fibfib[i - 151] + fibfib[i - 152] + fibfib[i - 153] + fibfib[i - 154] + fibfib[i - 155] + fibfib[i - 156] + fibfib[i - 157] + fibfib[i - 158] + fibfib[i - 159] + fibfib[i - 160] + fibfib[i - 161] + fibfib[i - 162] + fibfib[i - 163] + fibfib[i - 164] + fibfib[i - 165] + fibfib[i - 166] + fibfib[i - 167] + fibfib[i - 168] + fibfib[i - 169] + fibfib[i - 170] + fibfib[i - 171] + fibfib[i - 172] + fibfib[i - 173] + fib"}
{"task_id": "JavaScript/64", "prompt": "/*Write a affair vowelsCount which takes a chain represent \n   a word as stimulation and returns the number of vowels in the string. \n   vowel in this casing are' a',' einsteinium',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but merely when it is at the conclusion of the give news. \n\n   case:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a affair vowelsCount which takes a chain represent \n   a word as stimulation and returns the number of vowels in the string. \n   vowel in this casing are' a',' einsteinium',' i',' oxygen',' u'. Here,' y' is besides a \n   vowel, but merely when it is at the conclusion of the give news. \n\n   case:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowelsCountArray = [];\n  let vowelsCountArray2 = [];\n  let vowelsCountArray3 = [];\n  let vowelsCountArray4 = [];\n  let vowelsCountArray5 = [];\n  let vowelsCountArray6 = [];\n  let vowelsCountArray7 = [];\n  let vowelsCountArray8 = [];\n  let vowelsCountArray9 = [];\n  let vowelsCountArray10 = [];\n  let vowelsCountArray11 = [];\n  let vowelsCountArray12 = [];\n  let vowelsCountArray13 = [];\n  let vowelsCountArray14 = [];\n  let vowelsCountArray15 = [];\n  let vowelsCountArray16 = [];\n  let vowelsCountArray17 = [];\n  let vowelsCountArray18 = [];\n  let vowelsCountArray19 = [];\n  let vowelsCountArray20 = [];\n  let vowelsCountArray21 = [];\n  let vowelsCountArray22 = [];\n  let vowelsCountArray23 = [];\n  let vowelsCountArray24 = [];\n  let vowelsCountArray25 = [];\n  let vowelsCountArray26 = [];\n  let vowelsCountArray27 = [];\n  let vowelsCountArray28 = [];\n  let vowelsCountArray29 = [];\n  let vowelsCountArray30 = [];\n  let vowelsCountArray31 = [];\n  let vowelsCountArray32 = [];\n  let vowelsCountArray33 = [];\n  let vowelsCountArray34 = [];\n  let vowelsCountArray35 = [];\n  let vowelsCountArray36 = [];\n  let vowelsCountArray37 = [];\n  let vowelsCountArray38 = [];\n  let vowelsCountArray39 = [];\n  let vowelsCountArray40 = [];\n  let vowelsCountArray41 = [];\n  let vowelsCountArray42 = [];\n  let vowelsCountArray43 = [];\n  let vowelsCountArray44 = [];\n  let vowelsCountArray45 = [];\n  let vowelsCountArray46 = [];\n  let vowelsCountArray47 = [];\n  let vowelsCountArray48 = [];\n  let vowelsCountArray49 = [];\n  let vowelsCountArray50 = [];\n  let vowelsCountArray51 = [];\n  let vowelsCountArray52 = [];\n  let vowelsCountArray53 = [];\n  let vowelsCountArray54 = [];\n  let vowelsCountArray55 = [];\n  let vowelsCountArray56 = [];\n  let vowelsCountArray57 = [];\n  let vowelsCountArray58 = [];\n  let vowelsCountArray59 = [];\n  let vowelsCountArray60 = [];\n  let vowelsCountArray61 = [];\n  let vowelsCountArray62 = [];\n  let vowelsCountArray63 = [];\n  let vowelsCountArray64 = [];\n  let vowelsCountArray65 = [];\n  let vowelsCountArray66 = [];\n  let vowelsCountArray67 = [];\n  let vowelsCountArray68 = [];\n  let vowelsCountArray69 = [];\n  let vowelsCountArray70 = [];\n  let vowelsCountArray71 = [];\n  let vowelsCountArray72 = [];\n  let vowelsCountArray73 = [];\n  let vowelsCountArray74 = [];\n  let vowelsCountArray75 = [];\n  let vowelsCountArray76 = [];\n  let vowelsCountArray77 = [];\n  let vowelsCountArray78 = [];\n  let vowelsCountArray79 = [];\n  let vowelsCountArray80 = [];\n  let vowelsCountArray81 = [];\n  let vowelsCountArray82 = [];\n  let vowelsCountArray83 = [];\n  let vowelsCountArray84 = [];\n  let vowelsCountArray85 = [];\n  let vowelsCountArray86 = [];\n  let vowelsCountArray87 = [];\n  let vowelsCountArray88 = [];\n  let vowelsCountArray89 = [];\n  let vowelsCountArray90 = [];\n  let vowelsCountArray91 = [];\n  let vowelsCountArray92 = [];\n  let vowelsCountArray93 = [];\n  let vowelsCountArray94 = [];\n  let vowelsCountArray95 = [];\n  let vowelsCountArray96 = [];\n  let vowelsCountArray97 = [];\n  let vowelsCountArray98 = [];\n  let vowelsCountArray99 = [];\n  let vowelsCountArray100 = [];\n  let vowelsCountArray101 = [];\n  let vowelsCountArray102 = [];\n  let vowelsCountArray103 = [];\n  let vowelsCountArray104 = [];\n  let vowelsCountArray105 = [];\n  let vowelsCountArray106 = [];\n  let vowelsCountArray107 = [];\n  let vowelsCountArray108 = [];\n  let vowelsCountArray109 = [];\n  let vowelsCountArray110 = [];\n  let vowelsCountArray111 = [];\n  let vowelsCountArray112 = [];\n  let vowelsCountArray113 = [];\n  let vowelsCountArray114 = [];\n  let vowelsCountArray115 = [];\n  let vowelsCountArray116 = [];\n  let vowelsCountArray117 = [];\n  let vowelsCountArray118 = [];\n  let vowelsCountArray119 = [];\n  let vowelsCountArray120 = [];\n  let vowelsCountArray121 = [];\n  let vowelsCountArray122 = [];\n  let vowelsCountArray123 = [];\n  let vowelsCountArray124 = [];\n  let vowelsCountArray125 = [];\n  let vowelsCountArray126 = [];\n  let vowelsCountArray127 = [];\n  let vowelsCountArray128 = [];\n  let vowelsCountArray129 = [];\n  let vowelsCountArray130 = [];\n  let vowelsCountArray131 = [];\n  let vowelsCountArray132 = [];\n  let vowelsCountArray133 = [];\n  let vowelsCountArray134 = [];\n  let vowelsCountArray135 = [];\n  let vowelsCountArray136 = [];\n  let vowelsCountArray137 = [];\n  let vowelsCountArray138 = [];\n  let vowelsCountArray139 = [];\n  let vowelsCountArray140 = [];\n  let vowelsCountArray141 = [];\n  let vowelsCountArray142 = [];\n  let vowelsCountArray143 = [];\n  let vowelsCountArray144 = [];\n  let vowelsCountArray145 = [];\n  let vowelsCountArray146 = [];\n  let vowelsCountArray147 = [];\n  let vowelsCountArray148 = [];\n  let vowelsCountArray149 = [];\n  let vowelsCountArray150 = [];\n  let vowelsCountArray151 = [];\n  let vowelsCountArray152 = [];\n  let vowelsCountArray153 = [];\n  let vowelsCountArray154 = [];\n  let vowelsCountArray155 = [];\n  let vowelsCountArray156 = [];\n  let vowelsCountArray157 = [];\n  let vowelsCountArray158 = [];\n  let vowelsCountArray159 = [];\n  let vowelsCountArray160 = [];\n  let vowelsCountArray161 = [];\n  let vowelsCountArray162 = [];\n  let vowelsCountArray163 = [];\n  let vowelsCountArray164 = [];\n  let vowelsCountArray165 = [];\n  let vowelsCountArray166 = [];\n  let vowelsCountArray167 = [];\n  let vowelsCountArray168 = [];\n  let vowelsCountArray169 = [];\n  let vowelsCountArray170 = [];\n  let vowelsCountArray171 = [];\n  let "}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integer x, shift the digit correct by shift\n   and return the result as a chain. \n   If shift > number of digits, return digits overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digit of the integer x, shift the digit correct by shift\n   and return the result as a chain. \n   If shift > number of digits, return digits overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(digits, digits + shift);\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftRight = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, digits).concat(x.toString(10).slice(digits + shift));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeft = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, -digits).concat(x.toString(10).slice(-digits + shift));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftRightZero = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, digits).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftZero = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, -digits).concat(x.toString(10).slice(-digits)).concat(x.toString(10).slice(0, digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftRightOne = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, digits).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftOne = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, -digits).concat(x.toString(10).slice(-digits)).concat(x.toString(10).slice(0, digits)).concat(x.toString(10).slice(-digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftRightTwo = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, digits).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftTwo = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, -digits).concat(x.toString(10).slice(-digits)).concat(x.toString(10).slice(0, digits)).concat(x.toString(10).slice(-digits)).concat(x.toString(10).slice(0, -digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftRightThree = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, digits).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftThree = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, -digits).concat(x.toString(10).slice(-digits)).concat(x.toString(10).slice(0, digits)).concat(x.toString(10).slice(-digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftRightFour = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, digits).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftFour = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, -digits).concat(x.toString(10).slice(-digits)).concat(x.toString(10).slice(0, digits)).concat(x.toString(10).slice(-digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftRightFive = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, digits).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftLeftFive = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, -digits).concat(x.toString(10).slice(-digits)).concat(x.toString(10).slice(0, digits)).concat(x.toString(10).slice(-digits)).concat(x.toString(10).slice(0, -digits)).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -digits));\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShiftRightSix = (x, shift) => {\n  const digits = Math.ceil(Math.log(x) / Math.log(10));\n  return x.toString(10).slice(0, digits).concat(x.toString(10).slice(digits)).concat(x.toString(10).slice(0, -"}
{"task_id": "JavaScript/66", "prompt": "/*Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper character only' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper character only' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the lower character only' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper and lower case \n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper and lower case \n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper and lower case \n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper and lower case \n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper and lower case \n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper and lower case \n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper and lower case \n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper and lower case \n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*\n  Tnecessitate \n   spell a function that take a drawstring as stimulation and returns the sum of the upper and lower case \n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this job, you will be given a string that defend a issue of apples and orange \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango fruits. give the drawstring that represent the entire numeral of \n   the oranges and apples and an integer that stage the total act of the fruits \n   in the basket return the number of the mango fruit in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apple and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this job, you will be given a string that defend a issue of apples and orange \n   that are distributed in a basket of fruit this basket contains \n   apples, orange, and mango fruits. give the drawstring that represent the entire numeral of \n   the oranges and apples and an integer that stage the total act of the fruits \n   in the basket return the number of the mango fruit in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apple and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let total = 0;\n   let count = 0;\n   let totalCount = 0;\n   let totalCount2 = 0;\n   let totalCount3 = 0;\n   let totalCount4 = 0;\n   let totalCount5 = 0;\n   let totalCount6 = 0;\n   let totalCount7 = 0;\n   let totalCount8 = 0;\n   let totalCount9 = 0;\n   let totalCount10 = 0;\n   let totalCount11 = 0;\n   let totalCount12 = 0;\n   let totalCount13 = 0;\n   let totalCount14 = 0;\n   let totalCount15 = 0;\n   let totalCount16 = 0;\n   let totalCount17 = 0;\n   let totalCount18 = 0;\n   let totalCount19 = 0;\n   let totalCount20 = 0;\n   let totalCount21 = 0;\n   let totalCount22 = 0;\n   let totalCount23 = 0;\n   let totalCount24 = 0;\n   let totalCount25 = 0;\n   let totalCount26 = 0;\n   let totalCount27 = 0;\n   let totalCount28 = 0;\n   let totalCount29 = 0;\n   let totalCount30 = 0;\n   let totalCount31 = 0;\n   let totalCount32 = 0;\n   let totalCount33 = 0;\n   let totalCount34 = 0;\n   let totalCount35 = 0;\n   let totalCount36 = 0;\n   let totalCount37 = 0;\n   let totalCount38 = 0;\n   let totalCount39 = 0;\n   let totalCount40 = 0;\n   let totalCount41 = 0;\n   let totalCount42 = 0;\n   let totalCount43 = 0;\n   let totalCount44 = 0;\n   let totalCount45 = 0;\n   let totalCount46 = 0;\n   let totalCount47 = 0;\n   let totalCount48 = 0;\n   let totalCount49 = 0;\n   let totalCount50 = 0;\n   let totalCount51 = 0;\n   let totalCount52 = 0;\n   let totalCount53 = 0;\n   let totalCount54 = 0;\n   let totalCount55 = 0;\n   let totalCount56 = 0;\n   let totalCount57 = 0;\n   let totalCount58 = 0;\n   let totalCount59 = 0;\n   let totalCount60 = 0;\n   let totalCount61 = 0;\n   let totalCount62 = 0;\n   let totalCount63 = 0;\n   let totalCount64 = 0;\n   let totalCount65 = 0;\n   let totalCount66 = 0;\n   let totalCount67 = 0;\n   let totalCount68 = 0;\n   let totalCount69 = 0;\n   let totalCount70 = 0;\n   let totalCount71 = 0;\n   let totalCount72 = 0;\n   let totalCount73 = 0;\n   let totalCount74 = 0;\n   let totalCount75 = 0;\n   let totalCount76 = 0;\n   let totalCount77 = 0;\n   let totalCount78 = 0;\n   let totalCount79 = 0;\n   let totalCount80 = 0;\n   let totalCount81 = 0;\n   let totalCount82 = 0;\n   let totalCount83 = 0;\n   let totalCount84 = 0;\n   let totalCount85 = 0;\n   let totalCount86 = 0;\n   let totalCount87 = 0;\n   let totalCount88 = 0;\n   let totalCount89 = 0;\n   let totalCount90 = 0;\n   let totalCount91 = 0;\n   let totalCount92 = 0;\n   let totalCount93 = 0;\n   let totalCount94 = 0;\n   let totalCount95 = 0;\n   let totalCount96 = 0;\n   let totalCount97 = 0;\n   let totalCount98 = 0;\n   let totalCount99 = 0;\n   let totalCount100 = 0;\n   let totalCount101 = 0;\n   let totalCount102 = 0;\n   let totalCount103 = 0;\n   let totalCount104 = 0;\n   let totalCount105 = 0;\n   let totalCount106 = 0;\n   let totalCount107 = 0;\n   let totalCount108 = 0;\n   let totalCount109 = 0;\n   let totalCount110 = 0;\n   let totalCount111 = 0;\n   let totalCount112 = 0;\n   let totalCount113 = 0;\n   let totalCount114 = 0;\n   let totalCount115 = 0;\n   let totalCount116 = 0;\n   let totalCount117 = 0;\n   let totalCount118 = 0;\n   let totalCount119 = 0;\n   let totalCount120 = 0;\n   let totalCount121 = 0;\n   let totalCount122 = 0;\n   let totalCount123 = 0;\n   let totalCount124 = 0;\n   let totalCount125 = 0;\n   let totalCount126 = 0;\n   let totalCount127 = 0;\n   let totalCount128 = 0;\n   let totalCount129 = 0;\n   let totalCount130 = 0;\n   let totalCount131 = 0;\n   let totalCount132 = 0;\n   let totalCount133 = 0;\n   let totalCount134 = 0;\n   let totalCount135 = 0;\n   let totalCount136 = 0;\n   let totalCount137 = 0;\n   let totalCount138 = 0;\n   let totalCount139 = 0;\n   let totalCount140 = 0;\n   let totalCount141 = 0;\n   let totalCount142 = 0;\n   let totalCount143 = 0;\n   let totalCount144 = 0;\n   let totalCount145 = 0;\n   let totalCount146 = 0;\n   let totalCount147 = 0;\n   let totalCount148 = 0;\n   let totalCount149 = 0;\n   let totalCount150 = 0;\n   let totalCount151 = 0;\n   let totalCount152 = 0;\n   let totalCount153 = 0;\n   let totalCount154 = 0;\n   let totalCount155 = 0;\n   let totalCount156 = 0;\n   let totalCount157 = 0;\n   let totalCount158 = 0;\n   let totalCount159 = 0;\n   let totalCount160 = 0;\n   let totalCount161 = 0;\n   let totalCount162 = 0;\n   let totalCount163 = 0;\n   let totalCount164 = 0;\n   let totalCount165 = 0;\n   let totalCount166 = 0;\n   let totalCount167 = 0;\n   let totalCount168 = 0;\n   let totalCount169 = 0;\n   let totalCount170 = 0;\n   let totalCount171 = 0;\n   let totalCount172 = 0;\n   let totalCount173 = 0;\n   let totalCount174 = 0;\n   let totalCount175 = 0;\n   let totalCount176 = 0;\n   let totalCount177 = 0;\n   let totalCount178 = 0;\n   let totalCount179 = 0;\n   let totalCount180 = 0;\n   let totalCount181 = 0;\n   let totalCount182 = 0;\n   let totalCount183 = 0;\n   let totalCount184 = 0;\n   let totalCount185 = 0;\n   let totalCount186 = 0;\n   let totalCount187 = 0;\n   let totalCount188 = 0;\n   let totalCount189 = 0;\n   let totalCount190 = 0;\n   let totalCount191 = 0;\n   let totalCount192"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" give an array represent a arm of a tree that has non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should embody the lymph node with the smallest tied value. \n   If multiple node with the same minor tied value are find return the lymph node that has modest index. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there be no tied values or the give array equal empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  \" give an array represent a arm of a tree that has non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should embody the lymph node with the smallest tied value. \n   If multiple node with the same minor tied value are find return the lymph node that has modest index. \n\n   The plucked lymph node should be returned in a list, [ smalest_value, its index ], \n   If there be no tied values or the give array equal empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = 0;\n  let max = 0;\n  let minIndex = 0;\n  let maxIndex = 0;\n  let minValue = 0;\n  let maxValue = 0;\n  let minValueIndex = 0;\n  let maxValueIndex = 0;\n  let minValueValue = 0;\n  let maxValueValue = 0;\n  let minValueValueIndex = 0;\n  let maxValueValueIndex = 0;\n  let minValueValueValue = 0;\n  let maxValueValueValue = 0;\n  let minValueValueValueIndex = 0;\n  let maxValueValueValueIndex = 0;\n  let minValueValueValueValue = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValueIndex = 0;\n  let minValueValueValueValueValue = 0;\n  let maxValueValueValueValueValue = 0;\n  let minValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValue = 0;\n  let maxValueValueValueValueValue = 0;\n  let minValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValue"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are give a non - empty list of positivist integers. come back the greatest integer that be greater than \n   zero, and has a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the numeral of time it appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are give a non - empty list of positivist integers. come back the greatest integer that be greater than \n   zero, and has a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the numeral of time it appear in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxValueIndex = 0;\n  let maxValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let maxValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValue = 0;\n  let maxValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValue"}
{"task_id": "JavaScript/70", "prompt": "/*\n  give list of integers, return list in foreign decree. \n   foreign sorting, is when you originate with the minimum value, \n   then maximum of the persist integer, then minimum and thus on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give list of integers, return list in foreign decree. \n   foreign sorting, is when you originate with the minimum value, \n   then maximum of the persist integer, then minimum and thus on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b);\n  let minIndex = sortedLst.findIndex((val) => val < 0);\n  let maxIndex = sortedLst.findIndex((val) => val > 0);\n  return sortedLst.slice(minIndex, maxIndex + 1);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list. \n  Example:\n  strangeMaxMin([1, 2, 3, 4]) == 3\n  strangeMaxMin([5, 5, 5, 5]) == 5\n  strangeMaxMin([]) == -1\n  */\nconst strangeMaxMin = (lst) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  return lst.slice(minIndex, maxIndex + 1);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list that is a power of 2. \n  Example:\n  strangePowerOf2([1, 2, 3, 4]) == 4\n  strangePowerOf2([5, 5, 5, 5]) == 8\n  strangePowerOf2([]) == -1\n  */\nconst strangePowerOf2 = (lst, power) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  let power = Math.pow(power, power);\n  return lst.slice(minIndex, maxIndex + 1 + power);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list that is a power of 2. \n  Example:\n  strangePowerOf2([1, 2, 3, 4]) == 4\n  strangePowerOf2([5, 5, 5, 5]) == 8\n  strangePowerOf2([]) == -1\n  */\nconst strangePowerOf3 = (lst, power) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  let power = Math.pow(power, power);\n  return lst.slice(minIndex, maxIndex + 1 + power);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list that is a power of 3. \n  Example:\n  strangePowerOf3([1, 2, 3, 4]) == 4\n  strangePowerOf3([5, 5, 5, 5]) == 8\n  strangePowerOf3([]) == -1\n  */\nconst strangePowerOf4 = (lst, power) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  let power = Math.pow(power, power);\n  return lst.slice(minIndex, maxIndex + 1 + power);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list that is a power of 4. \n  Example:\n  strangePowerOf4([1, 2, 3, 4]) == 4\n  strangePowerOf4([5, 5, 5, 5]) == 8\n  strangePowerOf4([]) == -1\n  */\nconst strangePowerOf5 = (lst, power) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  let power = Math.pow(power, power);\n  return lst.slice(minIndex, maxIndex + 1 + power);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list that is a power of 5. \n  Example:\n  strangePowerOf5([1, 2, 3, 4]) == 4\n  strangePowerOf5([5, 5, 5, 5]) == 8\n  strangePowerOf5([]) == -1\n  */\nconst strangePowerOf6 = (lst, power) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  let power = Math.pow(power, power);\n  return lst.slice(minIndex, maxIndex + 1 + power);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list that is a power of 6. \n  Example:\n  strangePowerOf6([1, 2, 3, 4]) == 4\n  strangePowerOf6([5, 5, 5, 5]) == 8\n  strangePowerOf6([]) == -1\n  */\nconst strangePowerOf7 = (lst, power) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  let power = Math.pow(power, power);\n  return lst.slice(minIndex, maxIndex + 1 + power);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list that is a power of 7. \n  Example:\n  strangePowerOf7([1, 2, 3, 4]) == 4\n  strangePowerOf7([5, 5, 5, 5]) == 8\n  strangePowerOf7([]) == -1\n  */\nconst strangePowerOf8 = (lst, power) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  let power = Math.pow(power, power);\n  return lst.slice(minIndex, maxIndex + 1 + power);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list that is a power of 8. \n  Example:\n  strangePowerOf8([1, 2, 3, 4]) == 4\n  strangePowerOf8([5, 5, 5, 5]) == 8\n  strangePowerOf8([]) == -1\n  */\nconst strangePowerOf9 = (lst, power) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  let power = Math.pow(power, power);\n  return lst.slice(minIndex, maxIndex + 1 + power);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list that is a power of 10. \n  Example:\n  strangePowerOf9([1, 2, 3, 4]) == 4\n  strangePowerOf9([5, 5, 5, 5]) == 8\n  strangePowerOf9([]) == -1\n  */\nconst strangePowerOf10 = (lst, power) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  let power = Math.pow(power, power);\n  return lst.slice(minIndex, maxIndex + 1 + power);\n}\n\n/*\n  Given a sorted list of integers, return the largest and smallest \n  integer in that list that is a power of 11. \n  Example:\n  strangePowerOf10([1, 2, 3, 4]) == 4\n  strangePowerOf10([5, 5, 5, 5]) == 8\n  strangePowerOf10([]) == -1\n  */\nconst strangePowerOf11 = (lst, power) => {\n  let maxIndex = lst.findIndex((val) => val > 0);\n  let minIndex = lst.findIndex((val) => val < 0);\n  let power = Math.pow(power, "}
{"task_id": "JavaScript/71", "prompt": "/*\n  give the lengths of the three side of a triangulum. refund the area of \n   the triangulum polish to 2 decimal points if the three side form a valid triangulum. \n   Otherwise return -1 \n   Three side make a valid triangulum when the kernel of any two sides be great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give the lengths of the three side of a triangulum. refund the area of \n   the triangulum polish to 2 decimal points if the three side form a valid triangulum. \n   Otherwise return -1 \n   Three side make a valid triangulum when the kernel of any two sides be great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let side1 = Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2);\n  let side2 = Math.pow(a, 3) + Math.pow(b, 3) + Math.pow(c, 3);\n  let side3 = Math.pow(a, 4) + Math.pow(b, 4) + Math.pow(c, 4);\n  if (side1 > side2 && side1 > side3) {\n    area = side1;\n  } else if (side2 > side1 && side2 > side3) {\n    area = side2;\n  } else if (side3 > side1 && side3 > side2) {\n    area = side3;\n  } else {\n    return -1;\n  }\n  return area;\n};\n\n/*\n  Given a point and a line segment (a line segment, not a line segment\n  and a point), find the point on the line segment that is closest to the point.\n  \n  Example:\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(1, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, 2)\n  closestPointOnSegment(\n    new Point(0, 0),\n    new Point(1, 1),\n    new Point(2, 2)\n  ) == new Point(2, "}
{"task_id": "JavaScript/72", "prompt": "/*\n  compose a function that returns on-key if the aim q will vanish, and assumed otherwise. \n   The object q will fly if it's balanced (it is a palindromic list) and the union of its element be less than or equal the maximal potential system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  compose a function that returns on-key if the aim q will vanish, and assumed otherwise. \n   The object q will fly if it's balanced (it is a palindromic list) and the union of its element be less than or equal the maximal potential system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length < 2) return false\n  const maxWeight = Math.max(...q.map(x => Math.abs(x)))\n  const maxWeightWeight = maxWeight * w\n  const maxWeightWeightWeight = maxWeightWeight * w\n  const maxWeightWeightWeightWeight = maxWeightWeightWeight * w\n  return q.some(x => Math.abs(x) <= maxWeightWeightWeightWeight)\n}\n\n/*\n  compose a function that returns on-key if the aim q will vanish, and assumed otherwise. \n   The object q will fly if it's balanced (it is a palindromic list) and the union of its element be less than or equal the maximal potential system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length < 2) return false\n  const maxWeight = Math.max(...q.map(x => Math.abs(x)))\n  const maxWeightWeight = maxWeight * w\n  const maxWeightWeightWeight = maxWeightWeight * w\n  const maxWeightWeightWeightWeight = maxWeightWeightWeight * w\n  return q.some(x => Math.abs(x) <= maxWeightWeightWeightWeight)\n}\n\n/*\n  compose a function that returns on-key if the aim q will vanish, and assumed otherwise. \n   The object q will fly if it's balanced (it is a palindromic list) and the union of its element be less than or equal the maximal potential system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length < 2) return false\n  const maxWeight = Math.max(...q.map(x => Math.abs(x)))\n  const maxWeightWeight = maxWeight * w\n  const maxWeightWeightWeight = maxWeightWeight * w\n  const maxWeightWeightWeightWeight = maxWeightWeightWeight * w\n  return q.some(x => Math.abs(x) <= maxWeightWeightWeightWeight)\n}\n\n/*\n  compose a function that returns on-key if the aim q will vanish, and assumed otherwise. \n   The object q will fly if it's balanced (it is a palindromic list) and the union of its element be less than or equal the maximal potential system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length < 2) return false\n  const maxWeight = Math.max(...q.map(x => Math.abs(x)))\n  const maxWeightWeight = maxWeight * w\n  const maxWeightWeightWeight = maxWeightWeight * w\n  const maxWeightWeightWeightWeight = maxWeightWeightWeight * w\n  return q.some(x => Math.abs(x) <= maxWeightWeightWeightWeight)\n}\n\n/*\n  compose a function that returns on-key if the aim q will vanish, and assumed otherwise. \n   The object q will fly if it's balanced (it is a palindromic list) and the union of its element be less than or equal the maximal potential system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length < 2) return false\n  const maxWeight = Math.max(...q.map(x => Math.abs(x)))\n  const maxWeightWeight = maxWeight * w\n  const maxWeightWeightWeight = maxWeightWeight * w\n  const maxWeightWeightWeightWeight = maxWeightWeightWeight * w\n  return q.some(x => Math.abs(x) <= maxWeightWeightWeightWeight)\n}\n\n/*\n  compose a function that returns on-key if the aim q will vanish, and assumed otherwise. \n   The object q will fly if it's balanced (it is a palindromic list) and the union of its element be less than or equal the maximal potential system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length < 2) return false\n  const maxWeight = Math.max(...q.map(x => Math.abs(x)))\n  const maxWeightWeight = maxWeight * w\n  const "}
{"task_id": "JavaScript/73", "prompt": "/*\n  give an array arr of integer, witness the minimal number of chemical element that \n   need to be changed to make the array palindromic. A palindromic array is an array that \n   is learn the same backward and ahead. In one variety, you can switch one chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give an array arr of integer, witness the minimal number of chemical element that \n   need to be changed to make the array palindromic. A palindromic array is an array that \n   is learn the same backward and ahead. In one variety, you can switch one chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minChange) {\n      minChange = arr[i]\n    }\n  }\n  return minChange\n}\n\n/*\n  Given a string, return its length in words.\n\n  For example:\n  wordLength(\" man was here   \")  == 4\n  wordLength(\"man was here\")  == 3\n  wordLength(\"the cat sat on the mat\")  == 2\n  wordLength(\"the cat sat on the mats\")  == 1\n  */\nconst wordLength = (str) => {\n  let words = str.split(\" \")\n  return words.length\n}\n\n/*\n  Given a string, return its length in characters.\n\n  For example:\n  characterLength(\" man was here   \")  == 4\n  characterLength(\"man was here\")  == 3\n  characterLength(\"the cat sat on the mat\")  == 2\n  characterLength(\"the cat sat on the mats\")  == 1\n  */\nconst characterLength = (str) => {\n  let chars = str.split(\"\")\n  return chars.length\n}\n\n/*\n  Given a string, return its length in bytes (not counting null characters).\n\n  For example:\n  byteLength(\" man was here   \")  == 4\n  byteLength(\"man was here\")  == 3\n  byteLength(\"the cat sat on the mat\")  == 2\n  byteLength(\"the cat sat on the mats\")  == 1\n  */\nconst byteLength = (str) => {\n  let bytes = str.split(\"\")\n  return bytes.length\n}\n\n/*\n  Given a string, return its length in megabytes (not counting null characters).\n\n  For example:\n  megabyteLength(\" man was here   \")  == 4\n  megabyteLength(\"man was here\")  == 3\n  megabyteLength(\"the cat sat on the mat\")  == 2\n  megabyteLength(\"the cat sat on the mats\")  == 1\n  */\nconst megabyteLength = (str) => {\n  let mbytes = str.split(\"\")\n  return mbytes.length\n}\n\n/*\n  Given a string, return its length in gigabytes (not counting null characters).\n\n  For example:\n  gigabyteLength(\" man was here   \")  == 4\n  gigabyteLength(\"man was here\")  == 3\n  gigabyteLength(\"the cat sat on the mat\")  == 2\n  gigabyteLength(\"the cat sat on the mats\")  == 1\n  */\nconst gigabyteLength = (str) => {\n  let gb = str.split(\"\")\n  return gb.length\n}\n\n/*\n  Given a string, return its length in terabytes (not counting null characters).\n\n  For example:\n  terabyteLength(\" man was here   \")  == 4\n  terabyteLength(\"man was here\")  == 3\n  terabyteLength(\"the cat sat on the mat\")  == 2\n  terabyteLength(\"the cat sat on the mats\")  == 1\n  */\nconst terabyteLength = (str) => {\n  let tb = str.split(\"\")\n  return tb.length\n}\n\n/*\n  Given a string, return its length in petabytes (not counting null characters).\n\n  For example:\n  petabyteLength(\" man was here   \")  == 4\n  petabyteLength(\"man was here\")  == 3\n  petabyteLength(\"the cat sat on the mat\")  == 2\n  petabyteLength(\"the cat sat on the mats\")  == 1\n  */\nconst petabyteLength = (str) => {\n  let pb = str.split(\"\")\n  return pb.length\n}\n\n/*\n  Given a string, return its length in exabytes (not counting null characters).\n\n  For example:\n  exabyteLength(\" man was here   \")  == 4\n  exabyteLength(\"man was here\")  == 3\n  exabyteLength(\"the cat sat on the mat\")  == 2\n  exabyteLength(\"the cat sat on the mats\")  == 1\n  */\nconst exabyteLength = (str) => {\n  let eb = str.split(\"\")\n  return eb.length\n}\n\n/*\n  Given a string, return its length in zettabytes (not counting null characters).\n\n  For example:\n  zettabyteLength(\" man was here   \")  == 4\n  zettabyteLength(\"man was here\")  == 3\n  zettabyteLength(\"the cat sat on the mat\")  == 2\n  zettabyteLength(\"the cat sat on the mats\")  == 1\n  */\nconst zettabyteLength = (str) => {\n  let zb = str.split(\"\")\n  return zb.length\n}\n\n/*\n  Given a string, return its length in yottabytes (not counting null characters).\n\n  For example:\n  yottabyteLength(\" man was here   \")  == 4\n  yottabyteLength(\"man was here\")  == 3\n  yottabyteLength(\"the cat sat on the mat\")  == 2\n  yottabyteLength(\"the cat sat on the mats\")  == 1\n  */\nconst yottabyteLength = (str) => {\n  let yb = str.split(\"\")\n  return yb.length\n}\n\n/*\n  Given a string, return its length in exabytes (not counting null characters).\n\n  For example:\n  exabyteLength(\" man was here   \")  == 4\n  exabyteLength(\"man was here\")  == 3\n  exabyteLength(\"the cat sat on the mat\")  == 2\n  exabyteLength(\"the cat sat on the mats\")  == 1\n  */\nconst exabyteLength = (str) => {\n  let eb = str.split(\"\")\n  return eb.length\n}\n\n/*\n  Given a string, return its length in zettabytes (not counting null characters).\n\n  For example:\n  zettabyteLength(\" man was here   \")  == 4\n  zettabyteLength(\"man was here\")  == 3\n  zettabyteLength(\"the cat sat on the mat\")  == 2\n  zettabyteLength(\"the cat sat on the mats\")  == 1\n  */\nconst zettabyteLength = (str) => {\n  let zb = str.split(\"\")\n  return zb.length\n}\n\n/*\n  Given a string, return its length in yottabytes (not counting null characters).\n\n  For example:\n  yottabyteLength(\" man was here   \")  == 4\n  yottabyteLength(\"man was here\")  == 3\n  yottabyteLength(\"the cat sat on the mat\")  == 2\n  "}
{"task_id": "JavaScript/74", "prompt": "/*\n  compose a function that accepts two tilt of string and return the list that has \n   entire number of chars in the all chain of the list less than the other list.\n\n   if the two lists consume the like number of charwoman, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  compose a function that accepts two tilt of string and return the list that has \n   entire number of chars in the all chain of the list less than the other list.\n\n   if the two lists consume the like number of charwoman, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] < lst2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  compose a function that accepts two tilt of string and return the list that has \n   entire number of chars in the all chain of the list greater than the other list.\n\n   if the two lists consume the like number of charwoman, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] > lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] > lst2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  compose a function that accepts two tilt of string and return the list that has \n   the least number of chars in the all chain of the list greater than the other list.\n\n   if the two lists consume the like number of charwoman, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] < lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] < lst2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  compose a function that accepts two tilt of string and return the list that has \n   the most number of chars in the all chain of the list greater than the other list.\n\n   if the two lists consume the like number of charwoman, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] > lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] > lst2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  compose a function that accepts two tilt of string and return the list that has \n   the least number of chars in the all chain of the list less than the other list.\n\n   if the two lists consume the like number of charwoman, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] < lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] < lst2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  compose a function that accepts two tilt of string and return the list that has \n   the most number of chars in the all chain of the list less than the other list.\n\n   if the two lists consume the like number of charwoman, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] > lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] > lst2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  compose a function that accepts two tilt of string and return the list that has \n   the least number of chars in the all chain of the list greater than the other list.\n\n   if the two lists consume the like number of charwo"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that come back dependable if the grant issue cost the multiplication of 3 prime number \n   and assumed otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that come back dependable if the grant issue cost the multiplication of 3 prime number \n   and assumed otherwise. \n   know that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let isPrime2 = true;\n  let isPrime3 = true;\n  let isPrime5 = true;\n  let isPrime7 = true;\n  let isPrime9 = true;\n  let isPrime11 = true;\n  let isPrime13 = true;\n  let isPrime15 = true;\n  let isPrime17 = true;\n  let isPrime19 = true;\n  let isPrime21 = true;\n  let isPrime23 = true;\n  let isPrime25 = true;\n  let isPrime27 = true;\n  let isPrime29 = true;\n  let isPrime31 = true;\n  let isPrime33 = true;\n  let isPrime35 = true;\n  let isPrime37 = true;\n  let isPrime39 = true;\n  let isPrime41 = true;\n  let isPrime43 = true;\n  let isPrime45 = true;\n  let isPrime47 = true;\n  let isPrime49 = true;\n  let isPrime51 = true;\n  let isPrime53 = true;\n  let isPrime55 = true;\n  let isPrime57 = true;\n  let isPrime59 = true;\n  let isPrime61 = true;\n  let isPrime63 = true;\n  let isPrime65 = true;\n  let isPrime67 = true;\n  let isPrime69 = true;\n  let isPrime71 = true;\n  let isPrime73 = true;\n  let isPrime75 = true;\n  let isPrime77 = true;\n  let isPrime79 = true;\n  let isPrime81 = true;\n  let isPrime83 = true;\n  let isPrime85 = true;\n  let isPrime87 = true;\n  let isPrime89 = true;\n  let isPrime91 = true;\n  let isPrime93 = true;\n  let isPrime95 = true;\n  let isPrime97 = true;\n  let isPrime99 = true;\n  let isPrime101 = true;\n  let isPrime103 = true;\n  let isPrime105 = true;\n  let isPrime107 = true;\n  let isPrime109 = true;\n  let isPrime111 = true;\n  let isPrime113 = true;\n  let isPrime115 = true;\n  let isPrime117 = true;\n  let isPrime119 = true;\n  let isPrime121 = true;\n  let isPrime123 = true;\n  let isPrime125 = true;\n  let isPrime127 = true;\n  let isPrime129 = true;\n  let isPrime131 = true;\n  let isPrime133 = true;\n  let isPrime135 = true;\n  let isPrime137 = true;\n  let isPrime139 = true;\n  let isPrime141 = true;\n  let isPrime143 = true;\n  let isPrime145 = true;\n  let isPrime147 = true;\n  let isPrime149 = true;\n  let isPrime151 = true;\n  let isPrime153 = true;\n  let isPrime155 = true;\n  let isPrime157 = true;\n  let isPrime159 = true;\n  let isPrime161 = true;\n  let isPrime163 = true;\n  let isPrime165 = true;\n  let isPrime167 = true;\n  let isPrime169 = true;\n  let isPrime171 = true;\n  let isPrime173 = true;\n  let isPrime175 = true;\n  let isPrime177 = true;\n  let isPrime179 = true;\n  let isPrime181 = true;\n  let isPrime183 = true;\n  let isPrime185 = true;\n  let isPrime187 = true;\n  let isPrime189 = true;\n  let isPrime191 = true;\n  let isPrime193 = true;\n  let isPrime195 = true;\n  let isPrime197 = true;\n  let isPrime199 = true;\n  let isPrime201 = true;\n  let isPrime203 = true;\n  let isPrime205 = true;\n  let isPrime207 = true;\n  let isPrime209 = true;\n  let isPrime211 = true;\n  let isPrime213 = true;\n  let isPrime215 = true;\n  let isPrime217 = true;\n  let isPrime219 = true;\n  let isPrime221 = true;\n  let isPrime223 = true;\n  let isPrime225 = true;\n  let isPrime227 = true;\n  let isPrime229 = true;\n  let isPrime231 = true;\n  let isPrime233 = true;\n  let isPrime235 = true;\n  let isPrime237 = true;\n  let isPrime239 = true;\n  let isPrime241 = true;\n  let isPrime243 = true;\n  let isPrime245 = true;\n  let isPrime247 = true;\n  let isPrime249 = true;\n  let isPrime251 = true;\n  let isPrime253 = true;\n  let isPrime255 = true;\n  let isPrime257 = true;\n  let isPrime259 = true;\n  let isPrime261 = true;\n  let isPrime263 = true;\n  let isPrime265 = true;\n  let isPrime267 = true;\n  let isPrime269 = true;\n  let isPrime271 = true;\n  let isPrime273 = true;\n  let isPrime275 = true;\n  let isPrime277 = true;\n  let isPrime279 = true;\n  let isPrime281 = true;\n  let isPrime283 = true;\n  let isPrime285 = true;\n  let isPrime287 = true;\n  let isPrime289 = true;\n  let isPrime291 = true;\n  let isPrime293 = true;\n  let isPrime295 = true;\n  let isPrime297 = true;\n  let isPrime299 = true;\n  let isPrime301 = true;\n  let isPrime303 = true;\n  let isPrime305 = true;\n  let isPrime307 = true;\n  let isPrime309 = true;\n  let isPrime311 = true;\n  let isPrime313 = true;\n  let isPrime315 = true;\n  let isPrime317 = true;\n  let isPrime319 = true;\n  let isPrime321 = true;\n  let isPrime323 = true;\n  let isPrime325 = true;\n  let isPrime327 = true;\n  let isPrime329 = true;\n  let isPrime331 = true;\n  let isPrime333 = true;\n  let isPrime335 = true;\n  let isPrime337 = true;\n  let isPrime339 = true;\n  let isPrime341 = true;\n  let isPrime343 = true;\n  let isPrime345 = true;\n  let isPrime347 = true;\n  let isPrime349 = true;\n  let isPrime351 = true;\n  let isPrime353 = true;\n  let isPrime355 = true;\n  let isPrime357 = true;\n  let isPrime359 = true;\n  let isPrime361 = true;\n  let isPrime363 = true;\n  let isPrime365 = true;\n  let isPrime367 = true;\n  let isPrime369 = true;\n  let isPrime371 = true;\n  let isPrime373 = true;\n  let isPrime375 = true;\n  let isPrime377 = true;\n  let isPrime379 = true;\n  let isPrime381 = true;\n  let isPrime383 = true;\n  let isPrime385 = true;\n  let isPrime387 = true;\n  let isPrime389 = true;\n  let isPrime391 = true;\n  let isPrime393 = true;\n  let isPrime395 = true;\n  let isPrime397 = true;\n"}
{"task_id": "JavaScript/76", "prompt": "/*Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Your job is to write a function that retort on-key if a number x be a simple \n   power of n and false in other case. \n   x is a dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {"}
{"task_id": "JavaScript/77", "prompt": "/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube10 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube11 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube12 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube13 = (a) => {\n  return a % 2 === 0;\n};\n\n/*\n  compose a function that takes an integer a and render dependable \n   if this ingeger be a cube of some integer act. \n   Note: you may assume the remark is constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube14 = (a) => {\n  return a % 2 === "}
{"task_id": "JavaScript/78", "prompt": "/*You have been tax to write a function that receive \n   a hexadecimal phone number as a chain and counts the number of hexadecimal \n   digit that be primes (flower number=== or a prime=== is a natural issue \n   capital than 1 that exist not a merchandise of two little lifelike numbers). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   thus you have to decide a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== vitamin d (= decimal 13). \n   bill: you may assume the remark is always correct or empty string=== \n   and symbols A===B===C===D===E===F be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You have been tax to write a function that receive \n   a hexadecimal phone number as a chain and counts the number of hexadecimal \n   digit that be primes (flower number=== or a prime=== is a natural issue \n   capital than 1 that exist not a merchandise of two little lifelike numbers). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   thus you have to decide a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== vitamin d (= decimal 13). \n   bill: you may assume the remark is always correct or empty string=== \n   and symbols A===B===C===D===E===F be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let key = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;"}
{"task_id": "JavaScript/79", "prompt": "/*You will be give a number in decimal kind and your job equal to commute it to \n   binary format. The function should return a bowed stringed instrument, with each character representing a binary \n   number. Each quality in the bowed stringed instrument will embody' 0' or' 1'. \n\n   There will cost an extra couple of quality' db' at the beginning and at the goal of the drawstring. \n   The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You will be give a number in decimal kind and your job equal to commute it to \n   binary format. The function should return a bowed stringed instrument, with each character representing a binary \n   number. Each quality in the bowed stringed instrument will embody' 0' or' 1'. \n\n   There will cost an extra couple of quality' db' at the beginning and at the goal of the drawstring. \n   The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryString = \"\";\n  let binaryNumber = 0;\n  let decimalNumber = decimal;\n  while (decimalNumber > 0) {\n    binaryNumber = binaryNumber + decimalNumber % 2;\n    decimalNumber = Math.floor(decimalNumber / 2);\n  }\n  binaryString = binaryNumber + binaryString;\n  return binaryString;\n};\n\n/*\n  Given a binary string, convert it to a decimal string. \n  \n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns 15\n  binaryToDecimal(\"db100000db\")  # returns 32\n  */\nconst binaryToDecimal = (binaryString) => {\n  let decimalString = \"\";\n  let binaryNumber = 0;\n  let decimalNumber = 0;\n  let binaryStringLength = binaryString.length;\n  let decimalStringLength = decimalString.length;\n  while (binaryStringLength > 0) {\n    binaryNumber = binaryNumber + binaryString.charAt(binaryStringLength--);\n  }\n  while (decimalStringLength > 0) {\n    decimalNumber = decimalNumber + decimalString.charAt(decimalStringLength--);\n  }\n  return decimalNumber;\n};\n\n/*\n  Given a decimal string, convert it to a binary string. \n  \n  Examples:\n  decimalToBinary(\"15\")   # returns \"db1111db\"\n  decimalToBinary(\"32\")   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimalString) => {\n  let binaryString = \"\";\n  let decimalNumber = 0;\n  let binaryStringLength = decimalString.length;\n  let binaryNumber = 0;\n  let decimalNumberLength = decimalString.length;\n  while (decimalNumberLength > 0) {\n    binaryNumber = binaryNumber + decimalString.charAt(decimalNumberLength--);\n  }\n  while (binaryNumberLength > 0) {\n    binaryString = binaryString + binaryNumber.toString(2);\n    binaryNumber = 0;\n    decimalNumberLength = decimalString.length;\n    while (decimalNumberLength > 0) {\n      binaryNumber = binaryNumber + decimalString.charAt(decimalNumberLength--);\n    }\n  }\n  return binaryString;\n};\n\n/*\n  Given a binary string, convert it to a decimal string. \n  \n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns 15\n  binaryToDecimal(\"db100000db\")  # returns 32\n  */\nconst binaryToDecimal = (binaryString) => {\n  let decimalString = \"\";\n  let binaryNumber = 0;\n  let decimalNumber = 0;\n  let binaryStringLength = binaryString.length;\n  let decimalStringLength = decimalString.length;\n  while (binaryStringLength > 0) {\n    binaryNumber = binaryNumber + binaryString.charAt(binaryStringLength--);\n  }\n  while (decimalStringLength > 0) {\n    decimalNumber = decimalNumber + decimalString.charAt(decimalStringLength--);\n  }\n  return decimalNumber;\n};\n\n/*\n  Given a binary string, convert it to a decimal string. \n  \n  Examples:\n  decimalToBinary(\"db1111db\")  # returns 15\n  decimalToBinary(\"db100000db\")  # returns 32\n  */\nconst binaryToDecimal = (binaryString) => {\n  let decimalString = \"\";\n  let binaryNumber = 0;\n  let decimalNumber = 0;\n  let binaryStringLength = binaryString.length;\n  let decimalStringLength = decimalString.length;\n  while (binaryStringLength > 0) {\n    binaryNumber = binaryNumber + binaryString.charAt(binaryStringLength--);\n  }\n  while (decimalStringLength > 0) {\n    decimalNumber = decimalNumber + decimalString.charAt(decimalStringLength--);\n  }\n  return decimalNumber;\n};\n\n/*\n  Given a binary string, convert it to a decimal string. \n  \n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns 15\n  binaryToDecimal(\"db100000db\")  # returns 32\n  */\nconst binaryToDecimal = (binaryString) => {\n  let decimalString = \"\";\n  let binaryNumber = 0;\n  let decimalNumber = 0;\n  let binaryStringLength = binaryString.length;\n  let decimalStringLength = decimalString.length;\n  while (binaryStringLength > 0) {\n    binaryNumber = binaryNumber + binaryString.charAt(binaryStringLength--);\n  }\n  while (decimalStringLength > 0) {\n    decimalNumber = decimalNumber + decimalString.charAt(decimalStringLength--);\n  }\n  return decimalNumber;\n};\n\n/*\n  Given a binary string, convert it to a decimal string. \n  \n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns 15\n  binaryToDecimal(\"db100000db\")  # returns 32\n  */\nconst binaryToDecimal = (binaryString) => {\n  let decimalString = \"\";\n  let binaryNumber = 0;\n  let decimalNumber = 0;\n  let binaryStringLength = binaryString.length;\n  let decimalStringLength = decimalString.length;\n  while (binaryStringLength > 0) {\n    binaryNumber = binaryNumber + binaryString.charAt(binaryStringLength--);\n  }\n  while (decimalStringLength > 0) {\n    decimalNumber = decimalNumber + decimalString.charAt(decimalStringLength--);\n  }\n  return decimalNumber;\n};\n\n/*\n  Given a binary string, convert it to a decimal string. \n  \n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns 15\n  binaryToDecimal(\"db100000db\")  # returns 32\n  */\nconst binaryToDecimal = (binaryString) => {\n  let decimalString = \"\";\n  let binaryNumber = 0;\n  let decimalNumber = 0;\n  let binaryStringLength = binaryString.length;\n  let decimalStringLength = decimalString.length;\n  while (binaryStringLength > 0) {\n    binaryNumber = binaryNumber + binaryString.charAt(binaryStringLength--);\n  }\n  while (decimalStringLength > 0) {\n    decimalNumber = decimalNumber + decimalString.charAt(decimalStringLength--);\n  }\n  return decimalNumber;\n};\n\n/*\n  Given a binary string, convert it to a decimal string. \n  \n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns 15\n  binaryToDecimal(\"db100000db\")  # returns 32\n  */\nconst binaryToDecimal = (binaryString) => {\n  let decimalString = \"\";\n  let binaryNumber = 0;\n  let decimalNumber = 0;\n  let binaryStringLength = binaryString.length;\n  let decimalStringLength = decimalString.length;\n  while (binaryStringLength > 0) {\n    binaryNumber = binaryNumber + binaryString.charAt(binaryStringLength--);\n  }\n  while (decimalStringLength > 0) {\n    decimalNumber = decimalNumber + decimalString.charAt(decimalStringLength--);\n  }\n  return decimalNumber;\n};\n\n/*\n  Given a binary string, convert it to a decimal string. \n  \n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns 15\n  binaryToDecimal(\"db100000db\")  # returns 32\n  */\nconst binaryToDecimal = (binaryString) => {\n  let decimalString = \"\";\n  let binaryNumber = 0;\n  let decimalNumber = 0;\n  let binaryStringLength = binaryString.length;\n  let decimalStringLength = decimalString.length;\n  while (binaryStringLength > 0) {\n    binaryNumber = binaryNumber + binaryString.charAt(binaryStringLength--);\n  }\n  while (decimalStringLength > 0) {\n    decimalNumber = decimalNumber + decimalString.charAt(decimalStringLength--);\n  }\n  return decimalNumber;\n};\n\n/*\n  Given a binary string, convert it to a decimal string. \n  \n  Examples:\n  binaryToDecimal(\"db1111db\")  # returns 15\n  "}
{"task_id": "JavaScript/80", "prompt": "/*You are give a string s.\n   Your undertaking is to control if the drawstring is glad or not. \n   A bowed stringed instrument is happy if its length be at least 3 and every 3 consecutive letter are discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are give a string s.\n   Your undertaking is to control if the drawstring is glad or not. \n   A bowed stringed instrument is happy if its length be at least 3 and every 3 consecutive letter are discrete\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a string s.\n  Your task is to count the occurrences of every character in the string.\n  For example,\n  countChars(a) => 2\n  countChars(aa) => 1\n  countChars(ab) => 1\n  countChars(abc) => 1\n  countChars(abcd) => 1\n  countChars(abcde) => 1\n  countChars(abcdg) => 1\n  countChars(abcdeg) => 1\n  countChars(abcdgh) => 1\n  countChars(abcdghi) => 1\n  countChars(abcdghij) => 1\n  countChars(abcdghijk) => 1\n  countChars(abcdghijkl) => 1\n  countChars(abcdghijklm) => 1\n  countChars(abcdghijklmn) => 1\n  countChars(abcdghijklmnq) => 1\n  countChars(abcdghijklmnr) => 1\n  countChars(abcdghijklmns) => 1\n  countChars(abcdghijklmnz) => 1\n  countChars(abcdghijklmnzq) => 1\n  countChars(abcdghijklmnzr) => 1\n  countChars(abcdghijklmnzs) => 1\n  countChars(abcdghijklmnzt) => 1\n  countChars(abcdghijklmnzv) => 1\n  countChars(abcdghijklmnzw) => 1\n  countChars(abcdghijklmnzx) => 1\n  countChars(abcdghijklmnzy) => 1\n  countChars(abcdghijklmnzz) => 1\n  countChars(abcdghijklmnzzq) => 1\n  countChars(abcdghijklmnzzr) => 1\n  countChars(abcdghijklmnzzs) => 1\n  countChars(abcdghijklmnzzt) => 1\n  countChars(abcdghijklmnzzv) => 1\n  countChars(abcdghijklmnzzw) => 1\n  countChars(abcdghijklmnzzx) => 1\n  countChars(abcdghijklmnzzy) => 1\n  countChars(abcdghijklmnzzz) => 1\n  countChars(abcdghijklmnzzzq) => 1\n  countChars(abcdghijklmnzzzr) => 1\n  countChars(abcdghijklmnzzs) => 1\n  countChars(abcdghijklmnzzt) => 1\n  countChars(abcdghijklmnzzv) => 1\n  countChars(abcdghijklmnzzw) => 1\n  countChars(abcdghijklmnzzx) => 1\n  countChars(abcdghijklmnzzy) => 1\n  countChars(abcdghijklmnzzz) => 1\n  countChars(abcdghijklmnzzzq) => 1\n  countChars(abcdghijklmnzzzr) => 1\n  countChars(abcdghijklmnzzs) => 1\n  countChars(abcdghijklmnzzt) => 1\n  countChars(abcdghijklmnzzv) => 1\n  countChars(abcdghijklmnzzw) => 1\n  countChars(abcdghijklmnzzx) => 1\n  countChars(abcdghijklmnzzy) => 1\n  countChars(abcdghijklmnzzz) => 1\n  countChars(abcdghijklmnzzzq) => 1\n  countChars(abcdghijklmnzzzr) => 1\n  countChars(abcdghijklmnzzs) => 1\n  countChars(abcdghijklmnzzt) => 1\n  countChars(abcdghijklmnzzv) => 1\n  countChars(abcdghijklmnzzw) => 1\n  countChars(abcdghijklmnzzx) => 1\n  countChars(abcdghijklmnzzy) => 1\n  countChars(abcdghijklmnzzz) => 1\n  countChars(abcdghijklmnzzzq) => 1\n  countChars(abcdghijklmnzzzr) => 1\n  countChars(abcdghijklmnzzs) => 1\n  countChars(abcdghijklmnzzt) => 1\n  countChars(abcdghijklmnzzv) => 1\n  countChars(abcdghijklmnzzw) => 1\n  countChars(abcdghijklmnzzx) => 1\n  countChars(abcdghijklmnzzy) => 1\n  countChars(abcdghijklmnzzz) => 1\n  countChars(abcdghijklmnzzzq) => 1\n  countChars(abcdghijklmnzzzr) => 1\n  countChars(abcdghijklmnzzs) => 1\n  countChars(abcdghijklmnzzt) => 1\n  countChars(abcdghijklmnzzv) => 1\n  countChars(abcdghijklmnzzw) => 1\n  countChars(abcdghijklmnzzx) => 1\n  countChars(abcdghijklmnzzy) => 1\n  countChars(abcdghijklmnzzz) => 1\n  countChars(abcdghijklmnzzzq) => 1\n  countChars(abcdghijklmnzzzr) => 1\n  countChars(abcdghijklmnzzs) => 1\n  countChars(abcdghijklmnzzt) => 1\n  countChars(abcdghijklmnzzv) => 1\n  countChars(abcdghijklmnzzw) => 1\n  countChars(abcdghijklmnzzx) => 1\n  countChars(abcdghijklmnzzy) => 1\n  countChars(abcdghijklmnzzz) => 1\n  countChars(abcdghijklmnzzzq) => 1\n  countChars(abcdghijklmnzzzr) => 1\n  countChars(abcdghijklmnzzs) => 1\n  countChars(abcdghijklmnzzt) => 1\n  countChars(abcdghijklmnzzv) => 1\n  countChars(abcdghijklmnzzw) => 1\n  countChars(abcdghijklmnzzx) => 1\n  countChars(abcdghijklmnzzy) => 1\n  countChars(abcdghijklmnzzz) => 1\n  countChars(abcdghijklmnzzzq) => 1\n  countChars(abcdghijklmnzzzr) => 1\n  countChars(abcd"}
{"task_id": "JavaScript/81", "prompt": "/*Ithymine is the last workweek of the semester and the teacher suffer to contribute the grades\n   to students. The teacher has been making her own algorithm for grading. \n   The alone trouble is, she has lost the code she used for grade. \n   She has give you a list of grade point average for some students and you take to write \n   a function that can output a list of letter grades use the following table: \n            GPA        |     Letter grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coke \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Ithymine is the last workweek of the semester and the teacher suffer to contribute the grades\n   to students. The teacher has been making her own algorithm for grading. \n   The alone trouble is, she has lost the code she used for grade. \n   She has give you a list of grade point average for some students and you take to write \n   a function that can output a list of letter grades use the following table: \n            GPA        |     Letter grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coke \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradePoints = grades.map((grade) => {\n    return grade / 100;\n  });\n  const letterGrades = gradePoints.map((grade, index) => {\n    return grade >= 4? 'A+' : grade >= 3? 'A' : grade >= 2? 'B+' : grade >= 1? 'B' : grade >= 0? 'C+' : grade >= 0? 'C' : grade >= 0? 'D+' : grade >= 0? 'D' : grade >= 0? 'E' : '';\n  });\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns the letter grades \n  that student got from the semester. \n  \n  Example:\n  letterGrades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A', 'B', 'C', 'C', 'A"}
{"task_id": "JavaScript/82", "prompt": "/*Write a affair that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a affair that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key if the string\n   length be a prime number or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and retort on-key "}
{"task_id": "JavaScript/83", "prompt": "/*\n  give a positive integer n, return the count of the number of n-digit\n   positive integer that originate or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a positive integer n, return the count of the number of n-digit\n   positive integer that originate or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0;\n   let digit;\n   while (n) {\n     digit = n % 10;\n     if (digit == 0) {\n       count++;\n     }\n     n = Math.floor(n / 10);\n   }\n   return count;\n };\n \n const startsOne = startsOneEnds(n);\n const endsOne = startsOneEnds(n - 1);\n \n console.log(startsOne, endsOne);\n \n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n //\n "}
{"task_id": "JavaScript/84", "prompt": "/*Given a positivist integer N, return the entire union of its digits in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positivist integer N, return the entire union of its digits in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  let digits = [];\n  let remainder = 0;\n  let remainder2 = 0;\n  let remainder3 = 0;\n  let remainder4 = 0;\n  let remainder5 = 0;\n  let remainder6 = 0;\n  let remainder7 = 0;\n  let remainder8 = 0;\n  let remainder9 = 0;\n  let remainder10 = 0;\n  let remainder11 = 0;\n  let remainder12 = 0;\n  let remainder13 = 0;\n  let remainder14 = 0;\n  let remainder15 = 0;\n  let remainder16 = 0;\n  let remainder17 = 0;\n  let remainder18 = 0;\n  let remainder19 = 0;\n  let remainder20 = 0;\n  let remainder21 = 0;\n  let remainder22 = 0;\n  let remainder23 = 0;\n  let remainder24 = 0;\n  let remainder25 = 0;\n  let remainder26 = 0;\n  let remainder27 = 0;\n  let remainder28 = 0;\n  let remainder29 = 0;\n  let remainder30 = 0;\n  let remainder31 = 0;\n  let remainder32 = 0;\n  let remainder33 = 0;\n  let remainder34 = 0;\n  let remainder35 = 0;\n  let remainder36 = 0;\n  let remainder37 = 0;\n  let remainder38 = 0;\n  let remainder39 = 0;\n  let remainder40 = 0;\n  let remainder41 = 0;\n  let remainder42 = 0;\n  let remainder43 = 0;\n  let remainder44 = 0;\n  let remainder45 = 0;\n  let remainder46 = 0;\n  let remainder47 = 0;\n  let remainder48 = 0;\n  let remainder49 = 0;\n  let remainder50 = 0;\n  let remainder51 = 0;\n  let remainder52 = 0;\n  let remainder53 = 0;\n  let remainder54 = 0;\n  let remainder55 = 0;\n  let remainder56 = 0;\n  let remainder57 = 0;\n  let remainder58 = 0;\n  let remainder59 = 0;\n  let remainder60 = 0;\n  let remainder61 = 0;\n  let remainder62 = 0;\n  let remainder63 = 0;\n  let remainder64 = 0;\n  let remainder65 = 0;\n  let remainder66 = 0;\n  let remainder67 = 0;\n  let remainder68 = 0;\n  let remainder69 = 0;\n  let remainder70 = 0;\n  let remainder71 = 0;\n  let remainder72 = 0;\n  let remainder73 = 0;\n  let remainder74 = 0;\n  let remainder75 = 0;\n  let remainder76 = 0;\n  let remainder77 = 0;\n  let remainder78 = 0;\n  let remainder79 = 0;\n  let remainder80 = 0;\n  let remainder81 = 0;\n  let remainder82 = 0;\n  let remainder83 = 0;\n  let remainder84 = 0;\n  let remainder85 = 0;\n  let remainder86 = 0;\n  let remainder87 = 0;\n  let remainder88 = 0;\n  let remainder89 = 0;\n  let remainder90 = 0;\n  let remainder91 = 0;\n  let remainder92 = 0;\n  let remainder93 = 0;\n  let remainder94 = 0;\n  let remainder95 = 0;\n  let remainder96 = 0;\n  let remainder97 = 0;\n  let remainder98 = 0;\n  let remainder99 = 0;\n  let remainder100 = 0;\n  let remainder101 = 0;\n  let remainder102 = 0;\n  let remainder103 = 0;\n  let remainder104 = 0;\n  let remainder105 = 0;\n  let remainder106 = 0;\n  let remainder107 = 0;\n  let remainder108 = 0;\n  let remainder109 = 0;\n  let remainder110 = 0;\n  let remainder111 = 0;\n  let remainder112 = 0;\n  let remainder113 = 0;\n  let remainder114 = 0;\n  let remainder115 = 0;\n  let remainder116 = 0;\n  let remainder117 = 0;\n  let remainder118 = 0;\n  let remainder119 = 0;\n  let remainder120 = 0;\n  let remainder121 = 0;\n  let remainder122 = 0;\n  let remainder123 = 0;\n  let remainder124 = 0;\n  let remainder125 = 0;\n  let remainder126 = 0;\n  let remainder127 = 0;\n  let remainder128 = 0;\n  let remainder129 = 0;\n  let remainder130 = 0;\n  let remainder131 = 0;\n  let remainder132 = 0;\n  let remainder133 = 0;\n  let remainder134 = 0;\n  let remainder135 = 0;\n  let remainder136 = 0;\n  let remainder137 = 0;\n  let remainder138 = 0;\n  let remainder139 = 0;\n  let remainder140 = 0;\n  let remainder141 = 0;\n  let remainder142 = 0;\n  let remainder143 = 0;\n  let remainder144 = 0;\n  let remainder145 = 0;\n  let remainder146 = 0;\n  let remainder147 = 0;\n  let remainder148 = 0;\n  let remainder149 = 0;\n  let remainder150 = 0;\n  let remainder151 = 0;\n  let remainder152 = 0;\n  let remainder153 = 0;\n  let remainder154 = 0;\n  let remainder155 = 0;\n  let remainder156 = 0;\n  let remainder157 = 0;\n  let remainder158 = 0;\n  let remainder159 = 0;\n  let remainder160 = 0;\n  let remainder161 = 0;\n  let remainder162 = 0;\n  let remainder163 = 0;\n  let remainder164 = 0;\n  let remainder165 = 0;\n  let remainder166 = 0;\n  let remainder167 = 0;\n  let remainder168 = 0;\n  let remainder169 = 0;\n  let remainder170 = 0;\n  let remainder171 = 0;\n  let remainder172 = 0;\n  let remainder173 = 0;\n  let remainder174 = 0;\n  let remainder175 = 0;\n  let remainder176 = 0;\n  let remainder177 = 0;\n  let remainder178 = 0;\n  let remainder179 = 0;\n  let remainder180 = 0;\n  let remainder181 = 0;\n  let remainder182 = 0;\n  let remainder183 = 0;\n  let remainder184 = 0;\n  let remainder185 = 0;\n  let remainder186 = 0;\n  let remainder187 = 0;\n  let remainder188 = 0;\n  let remainder189 = 0;\n  let remainder190 = 0;\n  let remainder191 = 0;\n  let remainder192 = 0;\n  let remainder193 = 0;\n  let remainder194 = 0;\n  let remainder195 = 0;\n  let remainder196 = 0;\n  let remainder197 = 0;\n  let remainder198 = 0;\n  let remainder199 = 0;\n  let remainder200 = 0;\n  let remainder201 = 0;\n  let remainder202 = 0;\n  let remainder203 = 0;\n  let remainder204 = 0;\n  let remainder205 = 0;\n  let remainder206 = 0;\n  let remainder207 = 0;\n  let remainder208 = 0;\n  let remainder209 = 0;\n  let remainder210 = 0;\n  let remainder211 = 0;\n  let remainder212 = 0;\n  let remainder213 = 0;\n  let remainder214 = 0;\n  let remainder215 = 0;\n  let remainder216 = 0;\n  let remainder217 = 0;\n  let remainder218 = 0;\n  let remainder219 = 0;\n  let remainder220 = 0;\n  let remainder221 = 0;\n  let remainder222 = 0;\n  let remainder223 = 0;\n  let remainder224 = 0;\n  let remainder225 = 0;\n  let remainder226 = 0;\n  let remainder227 = 0;\n  let remainder228 = 0;\n  let remainder229 = 0;\n  let remainder230 = 0;\n  let remainder231 = 0;\n  let remainder232 = 0;\n  let remainder233 = 0;\n  let remainder234 = 0;\n  let remainder235 = 0;\n  let remain"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integer lst. add the tied element that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integer lst. add the tied element that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let tmp = 0;\n  let tmp2 = 0;\n  let tmp3 = 0;\n  let tmp4 = 0;\n  let tmp5 = 0;\n  let tmp6 = 0;\n  let tmp7 = 0;\n  let tmp8 = 0;\n  let tmp9 = 0;\n  let tmp10 = 0;\n  let tmp11 = 0;\n  let tmp12 = 0;\n  let tmp13 = 0;\n  let tmp14 = 0;\n  let tmp15 = 0;\n  let tmp16 = 0;\n  let tmp17 = 0;\n  let tmp18 = 0;\n  let tmp19 = 0;\n  let tmp20 = 0;\n  let tmp21 = 0;\n  let tmp22 = 0;\n  let tmp23 = 0;\n  let tmp24 = 0;\n  let tmp25 = 0;\n  let tmp26 = 0;\n  let tmp27 = 0;\n  let tmp28 = 0;\n  let tmp29 = 0;\n  let tmp30 = 0;\n  let tmp31 = 0;\n  let tmp32 = 0;\n  let tmp33 = 0;\n  let tmp34 = 0;\n  let tmp35 = 0;\n  let tmp36 = 0;\n  let tmp37 = 0;\n  let tmp38 = 0;\n  let tmp39 = 0;\n  let tmp40 = 0;\n  let tmp41 = 0;\n  let tmp42 = 0;\n  let tmp43 = 0;\n  let tmp44 = 0;\n  let tmp45 = 0;\n  let tmp46 = 0;\n  let tmp47 = 0;\n  let tmp48 = 0;\n  let tmp49 = 0;\n  let tmp50 = 0;\n  let tmp51 = 0;\n  let tmp52 = 0;\n  let tmp53 = 0;\n  let tmp54 = 0;\n  let tmp55 = 0;\n  let tmp56 = 0;\n  let tmp57 = 0;\n  let tmp58 = 0;\n  let tmp59 = 0;\n  let tmp60 = 0;\n  let tmp61 = 0;\n  let tmp62 = 0;\n  let tmp63 = 0;\n  let tmp64 = 0;\n  let tmp65 = 0;\n  let tmp66 = 0;\n  let tmp67 = 0;\n  let tmp68 = 0;\n  let tmp69 = 0;\n  let tmp70 = 0;\n  let tmp71 = 0;\n  let tmp72 = 0;\n  let tmp73 = 0;\n  let tmp74 = 0;\n  let tmp75 = 0;\n  let tmp76 = 0;\n  let tmp77 = 0;\n  let tmp78 = 0;\n  let tmp79 = 0;\n  let tmp80 = 0;\n  let tmp81 = 0;\n  let tmp82 = 0;\n  let tmp83 = 0;\n  let tmp84 = 0;\n  let tmp85 = 0;\n  let tmp86 = 0;\n  let tmp87 = 0;\n  let tmp88 = 0;\n  let tmp89 = 0;\n  let tmp90 = 0;\n  let tmp91 = 0;\n  let tmp92 = 0;\n  let tmp93 = 0;\n  let tmp94 = 0;\n  let tmp95 = 0;\n  let tmp96 = 0;\n  let tmp97 = 0;\n  let tmp98 = 0;\n  let tmp99 = 0;\n  let tmp100 = 0;\n  let tmp101 = 0;\n  let tmp102 = 0;\n  let tmp103 = 0;\n  let tmp104 = 0;\n  let tmp105 = 0;\n  let tmp106 = 0;\n  let tmp107 = 0;\n  let tmp108 = 0;\n  let tmp109 = 0;\n  let tmp110 = 0;\n  let tmp111 = 0;\n  let tmp112 = 0;\n  let tmp113 = 0;\n  let tmp114 = 0;\n  let tmp115 = 0;\n  let tmp116 = 0;\n  let tmp117 = 0;\n  let tmp118 = 0;\n  let tmp119 = 0;\n  let tmp120 = 0;\n  let tmp121 = 0;\n  let tmp122 = 0;\n  let tmp123 = 0;\n  let tmp124 = 0;\n  let tmp125 = 0;\n  let tmp126 = 0;\n  let tmp127 = 0;\n  let tmp128 = 0;\n  let tmp129 = 0;\n  let tmp130 = 0;\n  let tmp131 = 0;\n  let tmp132 = 0;\n  let tmp133 = 0;\n  let tmp134 = 0;\n  let tmp135 = 0;\n  let tmp136 = 0;\n  let tmp137 = 0;\n  let tmp138 = 0;\n  let tmp139 = 0;\n  let tmp140 = 0;\n  let tmp141 = 0;\n  let tmp142 = 0;\n  let tmp143 = 0;\n  let tmp144 = 0;\n  let tmp145 = 0;\n  let tmp146 = 0;\n  let tmp147 = 0;\n  let tmp148 = 0;\n  let tmp149 = 0;\n  let tmp150 = 0;\n  let tmp151 = 0;\n  let tmp152 = 0;\n  let tmp153 = 0;\n  let tmp154 = 0;\n  let tmp155 = 0;\n  let tmp156 = 0;\n  let tmp157 = 0;\n  let tmp158 = 0;\n  let tmp159 = 0;\n  let tmp160 = 0;\n  let tmp161 = 0;\n  let tmp162 = 0;\n  let tmp163 = 0;\n  let tmp164 = 0;\n  let tmp165 = 0;\n  let tmp166 = 0;\n  let tmp167 = 0;\n  let tmp168 = 0;\n  let tmp169 = 0;\n  let tmp170 = 0;\n  let tmp171 = 0;\n  let tmp172 = 0;\n  let tmp173 = 0;\n  let tmp174 = 0;\n  let tmp175 = 0;\n  let tmp176 = 0;\n  let tmp177 = 0;\n  let tmp178 = 0;\n  let tmp179 = 0;\n  let tmp180 = 0;\n  let tmp181 = 0;\n  let tmp182 = 0;\n  let tmp183 = 0;\n  let tmp184 = 0;\n  let tmp185 = 0;\n  let tmp186 = 0;\n  let tmp187 = 0;\n  let tmp188 = 0;\n  let tmp189 = 0;\n  let tmp190 = 0;\n  let tmp191 = 0;\n  let tmp192 = 0;\n  let tmp193 = 0;\n  let tmp194 = 0;\n  let tmp195 = 0;\n  let tmp196 = 0;\n  let tmp197 = 0;\n  let tmp198 = 0;\n  let tmp199 = 0;\n  let tmp200 = 0;\n  let tmp201 = 0;\n  let tmp202 = 0;\n  let tmp203 = 0;\n  let tmp204 = 0;\n  let tmp205 = 0;\n  let tmp206 = 0;\n  let tmp207 = 0;\n  let tmp208 = 0;\n  let tmp209 = 0;\n  let tmp210 = 0;\n  let tmp211 = 0;\n  let tmp212 = 0;\n  let tmp213 = 0;\n  let tmp214 = 0;\n  let tmp215 = 0;\n  let tmp216 = 0;\n  let tmp217 = 0;\n  let tmp218 = 0;\n  let tmp219 = 0;\n  let tmp220 = 0;\n  let tmp221 = 0;\n  let tmp222 = 0;\n  let tmp223 = 0;\n  let tmp224 = 0;\n  let tmp225 = 0;\n  let tmp226 = 0;\n  let tmp227 = 0;\n  let tmp228 = 0;\n  let tmp229 = 0;\n  let tmp230 = 0;\n  let tmp231 = 0;\n  let tmp232 = 0;\n  let tmp233 = 0;\n  let tmp234 = 0;\n  let tmp235 = 0;\n  let tmp236 = 0;\n  let tmp237 = 0;\n  let tmp238 = 0;\n  let tmp239 = 0;\n  let tmp240 = 0;\n  let tmp241 = 0;\n  let tmp242 = 0;\n  let tmp243 = 0;\n  let tmp244 = 0;\n  let tmp245 = 0;\n  let tmp246 = 0;\n  let tmp247 = 0;\n  let tmp248 = 0;\n  let tmp249 = 0;\n  let tmp250 = 0;\n  let tmp251 = 0;\n  let tmp252 = 0;\n  let tmp253 = 0;\n  let tmp254 = 0;\n  let tmp255 = 0;\n  let tmp256 = 0;\n  let tmp257 = 0;\n  let tmp258 = 0;\n  let tmp259 = 0;\n  let tmp260 = 0;\n  let tmp261 = 0;\n  let tmp262 = 0;\n  let tmp263 = 0;\n  let tmp264 = 0;\n  let tmp265 = 0;\n  let tmp266 = 0;\n  let tmp267 = 0;\n  let tmp268 = 0;\n  let tmp269 = 0;\n  let tmp270 = 0;\n  let tmp271 = 0;\n  let tmp272 = 0;\n  let tmp273 = 0;\n  let tmp274 = 0;\n  let tmp275 = 0;\n  let tmp276 = 0;\n  let tmp277 = 0;\n  let tmp278 = 0;\n  let tmp279 = 0;\n  let tmp280 = 0;\n  let tmp281 = 0;\n  let tmp282 = 0;\n  let tmp283 = 0;\n  let tmp284 = 0;\n  let tmp285 = 0;\n  let tmp286 = 0;\n  let tmp287 = 0;\n  let tmp288 = 0;\n  let tmp289 = 0;\n  let tmp290 = 0;\n  let tmp291 = 0;\n  let tmp292 = 0;\n  let tmp293 = 0;\n  let tmp294 = 0;\n  let tmp295 = 0;"}
{"task_id": "JavaScript/86", "prompt": "/*\n  compose a function that takes a chain and reelect an ordered interpretation of it. \n   Ordered version of string, is a chain where all words (separated by distance) \n   are replaced by a modern parole where all the characters stage in\n   ascending order establish on american standard code for information interchange value. \n   bill: You should keep the order of words and blank outer space in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  compose a function that takes a chain and reelect an ordered interpretation of it. \n   Ordered version of string, is a chain where all words (separated by distance) \n   are replaced by a modern parole where all the characters stage in\n   ascending order establish on american standard code for information interchange value. \n   bill: You should keep the order of words and blank outer space in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let s = s.replace(/\\s+/g, '');\n  let arr = s.split('');\n  let newArr = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are give a 2 dimensional datum, as a cuddle tilt, \n   which is exchangeable to matrix, however, unlike matrices, \n   each rowing may check a unlike number of column. \n   give lst, and integer x, find oneself integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (course, column), start with 0. \n   Sort coordinates initially by rows in ascending orderliness. \n   Also, sort coordinates of the row by column in condescend holy order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are give a 2 dimensional datum, as a cuddle tilt, \n   which is exchangeable to matrix, however, unlike matrices, \n   each rowing may check a unlike number of column. \n   give lst, and integer x, find oneself integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (course, column), start with 0. \n   Sort coordinates initially by rows in ascending orderliness. \n   Also, sort coordinates of the row by column in condescend holy order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = [];\n  let rows = [];\n  let rowIndex = 0;\n  let rowIndex2 = 0;\n  let rowIndex3 = 0;\n  let rowIndex4 = 0;\n  let rowIndex5 = 0;\n  let rowIndex6 = 0;\n  let rowIndex7 = 0;\n  let rowIndex8 = 0;\n  let rowIndex9 = 0;\n  let rowIndex10 = 0;\n  let rowIndex11 = 0;\n  let rowIndex12 = 0;\n  let rowIndex13 = 0;\n  let rowIndex14 = 0;\n  let rowIndex15 = 0;\n  let rowIndex16 = 0;\n  let rowIndex17 = 0;\n  let rowIndex18 = 0;\n  let rowIndex19 = 0;\n  let rowIndex20 = 0;\n  let rowIndex21 = 0;\n  let rowIndex22 = 0;\n  let rowIndex23 = 0;\n  let rowIndex24 = 0;\n  let rowIndex25 = 0;\n  let rowIndex26 = 0;\n  let rowIndex27 = 0;\n  let rowIndex28 = 0;\n  let rowIndex29 = 0;\n  let rowIndex30 = 0;\n  let rowIndex31 = 0;\n  let rowIndex32 = 0;\n  let rowIndex33 = 0;\n  let rowIndex34 = 0;\n  let rowIndex35 = 0;\n  let rowIndex36 = 0;\n  let rowIndex37 = 0;\n  let rowIndex38 = 0;\n  let rowIndex39 = 0;\n  let rowIndex40 = 0;\n  let rowIndex41 = 0;\n  let rowIndex42 = 0;\n  let rowIndex43 = 0;\n  let rowIndex44 = 0;\n  let rowIndex45 = 0;\n  let rowIndex46 = 0;\n  let rowIndex47 = 0;\n  let rowIndex48 = 0;\n  let rowIndex49 = 0;\n  let rowIndex50 = 0;\n  let rowIndex51 = 0;\n  let rowIndex52 = 0;\n  let rowIndex53 = 0;\n  let rowIndex54 = 0;\n  let rowIndex55 = 0;\n  let rowIndex56 = 0;\n  let rowIndex57 = 0;\n  let rowIndex58 = 0;\n  let rowIndex59 = 0;\n  let rowIndex60 = 0;\n  let rowIndex61 = 0;\n  let rowIndex62 = 0;\n  let rowIndex63 = 0;\n  let rowIndex64 = 0;\n  let rowIndex65 = 0;\n  let rowIndex66 = 0;\n  let rowIndex67 = 0;\n  let rowIndex68 = 0;\n  let rowIndex69 = 0;\n  let rowIndex70 = 0;\n  let rowIndex71 = 0;\n  let rowIndex72 = 0;\n  let rowIndex73 = 0;\n  let rowIndex74 = 0;\n  let rowIndex75 = 0;\n  let rowIndex76 = 0;\n  let rowIndex77 = 0;\n  let rowIndex78 = 0;\n  let rowIndex79 = 0;\n  let rowIndex80 = 0;\n  let rowIndex81 = 0;\n  let rowIndex82 = 0;\n  let rowIndex83 = 0;\n  let rowIndex84 = 0;\n  let rowIndex85 = 0;\n  let rowIndex86 = 0;\n  let rowIndex87 = 0;\n  let rowIndex88 = 0;\n  let rowIndex89 = 0;\n  let rowIndex90 = 0;\n  let rowIndex91 = 0;\n  let rowIndex92 = 0;\n  let rowIndex93 = 0;\n  let rowIndex94 = 0;\n  let rowIndex95 = 0;\n  let rowIndex96 = 0;\n  let rowIndex97 = 0;\n  let rowIndex98 = 0;\n  let rowIndex99 = 0;\n  let rowIndex100 = 0;\n  let rowIndex101 = 0;\n  let rowIndex102 = 0;\n  let rowIndex103 = 0;\n  let rowIndex104 = 0;\n  let rowIndex105 = 0;\n  let rowIndex106 = 0;\n  let rowIndex107 = 0;\n  let rowIndex108 = 0;\n  let rowIndex109 = 0;\n  let rowIndex110 = 0;\n  let rowIndex111 = 0;\n  let rowIndex112 = 0;\n  let rowIndex113 = 0;\n  let rowIndex114 = 0;\n  let rowIndex115 = 0;\n  let rowIndex116 = 0;\n  let rowIndex117 = 0;\n  let rowIndex118 = 0;\n  let rowIndex119 = 0;\n  let rowIndex120 = 0;\n  let rowIndex121 = 0;\n  let rowIndex122 = 0;\n  let rowIndex123 = 0;\n  let rowIndex124 = 0;\n  let rowIndex125 = 0;\n  let rowIndex126 = 0;\n  let rowIndex127 = 0;\n  let rowIndex128 = 0;\n  let rowIndex129 = 0;\n  let rowIndex130 = 0;\n  let rowIndex131 = 0;\n  let rowIndex132 = 0;\n  let rowIndex133 = 0;\n  let rowIndex134 = 0;\n  let rowIndex135 = 0;\n  let rowIndex136 = 0;\n  let rowIndex137 = 0;\n  let rowIndex138 = 0;\n  let rowIndex139 = 0;\n  let rowIndex140 = 0;\n  let rowIndex141 = 0;\n  let rowIndex142 = 0;\n  let rowIndex143 = 0;\n  let rowIndex144 = 0;\n  let rowIndex145 = 0;\n  let rowIndex146 = 0;\n  let rowIndex147 = 0;\n  let rowIndex148 = 0;\n  let rowIndex149 = 0;\n  let rowIndex150 = 0;\n  let rowIndex151 = 0;\n  let rowIndex152 = 0;\n  let rowIndex153 = 0;\n  let rowIndex154 = 0;\n  let rowIndex155 = 0;\n  let rowIndex156 = 0;\n  let rowIndex157 = 0;\n  let rowIndex158 = 0;\n  let rowIndex159 = 0;\n  let rowIndex160 = 0;\n  let rowIndex161 = 0;\n  let rowIndex162 = 0;\n  let rowIndex163 = 0;\n  let rowIndex164 = 0;\n  let rowIndex165 = 0;\n  let rowIndex166 = 0;\n  let rowIndex167 = 0;\n  let rowIndex168 = 0;\n  let rowIndex169 = 0;\n  let rowIndex170 = 0;\n  let rowIndex171 = 0;\n  let rowIndex172 = 0;\n  let rowIndex173 = 0;\n  let rowIndex174 = 0;\n  let rowIndex175 = 0;\n  let rowIndex176 = 0;\n  let rowIndex177 = 0;\n  let rowIndex178 = 0;\n  let rowIndex179 = 0;\n  let rowIndex180 = 0;\n  let rowIndex181 = 0;\n  let rowIndex182 = 0;\n  let rowIndex183 = 0;\n  let rowIndex184 = 0;\n  let rowIndex185 = 0;\n  let rowIndex186 = 0;\n  let rowIndex187 = 0;\n  let rowIndex188 = 0;\n  let rowIndex189 = 0;\n  let rowIndex190 = 0;\n  let rowIndex191 = 0;\n  let rowIndex192 = 0;\n  let rowIndex193 = 0;\n  let rowIndex194 = 0;\n  let rowIndex195 = 0;\n  let rowIndex196 = 0;\n  let rowIndex197 = 0;\n  let rowIndex198 = 0;\n  let rowIndex199 = 0;\n  let rowIndex200 = 0;\n  let rowIndex201 = 0;\n  let rowIndex202 = 0;\n  let rowIndex203 = 0;\n  let rowIndex204 = 0;\n  let rowIndex205 = 0;\n  let rowIndex206 = 0;\n  let rowIndex207 = 0;\n  let rowIndex208 = 0;\n  let rowIndex209 = 0;\n  let rowIndex210 = 0;\n  let rowIndex211 = 0;\n  let rowIndex212 = 0;\n  let rowIndex213 = 0;\n  let rowIndex214 = 0;\n  let rowIndex215 = 0;\n  let rowIndex216 = 0;\n  let rowIndex217 = 0;\n  let rowIndex218 = 0;\n  let rowIndex219 = 0;\n  let rowIndex220 = 0;\n  let rowIndex221 = 0;\n  let rowIndex222 = 0;\n  let rowIndex223 = 0;\n  let rowIndex224"}
{"task_id": "JavaScript/88", "prompt": "/*\n  give an array of non - damaging integer, return a copy of the give array after screen, \n   you will sort the given array in ascend decree if the sum (beginning exponent value, final exponent value) is curious, \n   or sort it in descending ordering if the kernel (first index value, last index value) cost even. \n\n   Note: \n   * don't change the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give an array of non - damaging integer, return a copy of the give array after screen, \n   you will sort the given array in ascend decree if the sum (beginning exponent value, final exponent value) is curious, \n   or sort it in descending ordering if the kernel (first index value, last index value) cost even. \n\n   Note: \n   * don't change the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = []\n  let newArrayIndex = 0\n  let newArrayLength = 0\n  let newArraySum = 0\n  let newArrayIndexSum = 0\n  let newArrayIndexSum2 = 0\n  let newArrayIndexSum3 = 0\n  let newArrayIndexSum4 = 0\n  let newArrayIndexSum5 = 0\n  let newArrayIndexSum6 = 0\n  let newArrayIndexSum7 = 0\n  let newArrayIndexSum8 = 0\n  let newArrayIndexSum9 = 0\n  let newArrayIndexSum10 = 0\n  let newArrayIndexSum11 = 0\n  let newArrayIndexSum12 = 0\n  let newArrayIndexSum13 = 0\n  let newArrayIndexSum14 = 0\n  let newArrayIndexSum15 = 0\n  let newArrayIndexSum16 = 0\n  let newArrayIndexSum17 = 0\n  let newArrayIndexSum18 = 0\n  let newArrayIndexSum19 = 0\n  let newArrayIndexSum20 = 0\n  let newArrayIndexSum21 = 0\n  let newArrayIndexSum22 = 0\n  let newArrayIndexSum23 = 0\n  let newArrayIndexSum24 = 0\n  let newArrayIndexSum25 = 0\n  let newArrayIndexSum26 = 0\n  let newArrayIndexSum27 = 0\n  let newArrayIndexSum28 = 0\n  let newArrayIndexSum29 = 0\n  let newArrayIndexSum30 = 0\n  let newArrayIndexSum31 = 0\n  let newArrayIndexSum32 = 0\n  let newArrayIndexSum33 = 0\n  let newArrayIndexSum34 = 0\n  let newArrayIndexSum35 = 0\n  let newArrayIndexSum36 = 0\n  let newArrayIndexSum37 = 0\n  let newArrayIndexSum38 = 0\n  let newArrayIndexSum39 = 0\n  let newArrayIndexSum40 = 0\n  let newArrayIndexSum41 = 0\n  let newArrayIndexSum42 = 0\n  let newArrayIndexSum43 = 0\n  let newArrayIndexSum44 = 0\n  let newArrayIndexSum45 = 0\n  let newArrayIndexSum46 = 0\n  let newArrayIndexSum47 = 0\n  let newArrayIndexSum48 = 0\n  let newArrayIndexSum49 = 0\n  let newArrayIndexSum50 = 0\n  let newArrayIndexSum51 = 0\n  let newArrayIndexSum52 = 0\n  let newArrayIndexSum53 = 0\n  let newArrayIndexSum54 = 0\n  let newArrayIndexSum55 = 0\n  let newArrayIndexSum56 = 0\n  let newArrayIndexSum57 = 0\n  let newArrayIndexSum58 = 0\n  let newArrayIndexSum59 = 0\n  let newArrayIndexSum60 = 0\n  let newArrayIndexSum61 = 0\n  let newArrayIndexSum62 = 0\n  let newArrayIndexSum63 = 0\n  let newArrayIndexSum64 = 0\n  let newArrayIndexSum65 = 0\n  let newArrayIndexSum66 = 0\n  let newArrayIndexSum67 = 0\n  let newArrayIndexSum68 = 0\n  let newArrayIndexSum69 = 0\n  let newArrayIndexSum70 = 0\n  let newArrayIndexSum71 = 0\n  let newArrayIndexSum72 = 0\n  let newArrayIndexSum73 = 0\n  let newArrayIndexSum74 = 0\n  let newArrayIndexSum75 = 0\n  let newArrayIndexSum76 = 0\n  let newArrayIndexSum77 = 0\n  let newArrayIndexSum78 = 0\n  let newArrayIndexSum79 = 0\n  let newArrayIndexSum80 = 0\n  let newArrayIndexSum81 = 0\n  let newArrayIndexSum82 = 0\n  let newArrayIndexSum83 = 0\n  let newArrayIndexSum84 = 0\n  let newArrayIndexSum85 = 0\n  let newArrayIndexSum86 = 0\n  let newArrayIndexSum87 = 0\n  let newArrayIndexSum88 = 0\n  let newArrayIndexSum89 = 0\n  let newArrayIndexSum90 = 0\n  let newArrayIndexSum91 = 0\n  let newArrayIndexSum92 = 0\n  let newArrayIndexSum93 = 0\n  let newArrayIndexSum94 = 0\n  let newArrayIndexSum95 = 0\n  let newArrayIndexSum96 = 0\n  let newArrayIndexSum97 = 0\n  let newArrayIndexSum98 = 0\n  let newArrayIndexSum99 = 0\n  let newArrayIndexSum100 = 0\n  let newArrayIndexSum101 = 0\n  let newArrayIndexSum102 = 0\n  let newArrayIndexSum103 = 0\n  let newArrayIndexSum104 = 0\n  let newArrayIndexSum105 = 0\n  let newArrayIndexSum106 = 0\n  let newArrayIndexSum107 = 0\n  let newArrayIndexSum108 = 0\n  let newArrayIndexSum109 = 0\n  let newArrayIndexSum110 = 0\n  let newArrayIndexSum111 = 0\n  let newArrayIndexSum112 = 0\n  let newArrayIndexSum113 = 0\n  let newArrayIndexSum114 = 0\n  let newArrayIndexSum115 = 0\n  let newArrayIndexSum116 = 0\n  let newArrayIndexSum117 = 0\n  let newArrayIndexSum118 = 0\n  let newArrayIndexSum119 = 0\n  let newArrayIndexSum120 = 0\n  let newArrayIndexSum121 = 0\n  let newArrayIndexSum122 = 0\n  let newArrayIndexSum123 = 0\n  let newArrayIndexSum124 = 0\n  let newArrayIndexSum125 = 0\n  let newArrayIndexSum126 = 0\n  let newArrayIndexSum127 = 0\n  let newArrayIndexSum128 = 0\n  let newArrayIndexSum129 = 0\n  let newArrayIndexSum130 = 0\n  let newArrayIndexSum131 = 0\n  let newArrayIndexSum132 = 0\n  let newArrayIndexSum133 = 0\n  let newArrayIndexSum134 = 0\n  let newArrayIndexSum135 = 0\n  let newArrayIndexSum136 = 0\n  let newArrayIndexSum137 = 0\n  let newArrayIndexSum138 = 0\n  let newArrayIndexSum139 = 0\n  let newArrayIndexSum140 = 0\n  let newArrayIndexSum141 = 0\n  let newArrayIndexSum142 = 0\n  let newArrayIndexSum143 = 0\n  let newArrayIndexSum144 = 0\n  let newArrayIndexSum145 = 0\n  let newArrayIndexSum146 = 0\n  let newArrayIndexSum147 = 0\n  let newArrayIndexSum148 = 0\n  let newArrayIndexSum149 = 0\n  let newArrayIndexSum150 = 0\n  let newArrayIndexSum151 = 0\n  let newArrayIndexSum152 = 0\n  let newArrayIndexSum153 = 0\n  let newArrayIndexSum154 = 0\n  let newArrayIndexSum155 = 0\n  let newArrayIndexSum156 = 0\n  let newArrayIndexSum157 = 0\n  let newArrayIndexSum158 = 0\n  let newArrayIndexSum159 = 0\n  let newArrayIndexSum160 = 0\n  let newArrayIndexSum161 = 0\n  let newArrayIndexSum162 = 0\n  let newArrayIndexSum163 = 0\n  let newArrayIndexSum164 = 0\n  let newArrayIndexSum165 = 0\n  let newArrayIndexSum166 = 0\n  let newArrayIndexSum167 = 0\n  let newArrayIndexSum168 = 0\n  let newArrayIndexSum169 = 0\n  let newArrayIndexSum170 = 0\n  let newArrayIndexSum171 = 0\n  let new"}
{"task_id": "JavaScript/89", "prompt": "/*Create a affair encrypt that takes a chain as an argumentation and \n   returns a chain encrypted with the alphabet being rotated. \n   The rudiment should be rotated in a manner such that the letters \n   careen down by two multiply to two space.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a affair encrypt that takes a chain as an argumentation and \n   returns a chain encrypted with the alphabet being rotated. \n   The rudiment should be rotated in a manner such that the letters \n   careen down by two multiply to two space.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotation = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let news = ''\n  for (let i = 0; i < s.length; i += 1) {\n    let letter = s.charAt(i)\n    news += letter + rotation\n  }\n  return news\n}\n\n/*Create a affair decrypt that takes a chain as an argumentation and \n   returns a chain decrypted with the alphabet being rotated. \n   The rudiment should be rotated in a manner such that the letters \n   careen down by two multiply to two space.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotation = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let news = ''\n  for (let i = 0; i < s.length; i += 1) {\n    let letter = s.charAt(i)\n    news += letter + rotation\n  }\n  return news\n}\n\n/*Create a affair encrypt that takes a chain as an argumentation and \n   returns a chain encrypted with the alphabet being rotated. \n   The rudiment should be rotated in a manner such that the letters \n   careen down by two multiply to two space.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotation = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let news = ''\n  for (let i = 0; i < s.length; i += 1) {\n    let letter = s.charAt(i)\n    news += letter + rotation\n  }\n  return news\n}\n\n/*Create a affair decrypt that takes a chain as an argumentation and \n   returns a chain decrypted with the alphabet being rotated. \n   The rudiment should be rotated in a manner such that the letters \n   careen down by two multiply to two space.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotation = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let news = ''\n  for (let i = 0; i < s.length; i += 1) {\n    let letter = s.charAt(i)\n    news += letter + rotation\n  }\n  return news\n}\n\n/*Create a affair encrypt that takes a chain as an argumentation and \n   returns a chain encrypted with the alphabet being rotated. \n   The rudiment should be rotated in a manner such that the letters \n   careen down by two multiply to two space.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotation = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let news = ''\n  for (let i = 0; i < s.length; i += 1) {\n    let letter = s.charAt(i)\n    news += letter + rotation\n  }\n  return news\n}\n\n/*Create a affair decrypt that takes a chain as an argumentation and \n   returns a chain decrypted with the alphabet being rotated. \n   The rudiment should be rotated in a manner such that the letters \n   careen down by two multiply to two space.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotation = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let news = ''\n  for (let i = 0; i < s.length; i += 1) {\n    let letter = s.charAt(i)\n    news += letter + rotation\n  }\n  return news\n}\n\n/*Create a affair encrypt that takes a chain as an argumentation and \n   returns a chain encrypted with the alphabet being rotated. \n   The rudiment should be rotated in a manner such that the letters \n   careen down by two multiply to two space.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotation = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let news = ''\n  for (let i = 0; i < s.length; i += 1) {\n    let letter = s.charAt(i)\n    news += letter + rotation\n  }\n  return news\n}\n\n/*Create a affair decrypt that takes a chain as an argumentation and \n   returns a chain decrypted with the alphabet being rotated. \n   The rudiment should be rotated in a manner such that the letters \n   careen down by two multiply to two space.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotation = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let news = ''\n  for (let i = 0; i < s.length; i += 1) {\n    let letter = s.charAt(i)\n    news += letter + rotation\n  }\n  return news\n}\n\n/*Create a affair encrypt that takes a chain as an argumentation and \n   returns a chain encrypted with the alphabet being rotated. \n   The rudiment should be rotated in a manner such that the letters \n   careen down by two multiply to two space.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let "}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are give a list of integers. \n   publish a routine nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such component. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are give a list of integers. \n   publish a routine nextSmallest() that return the second smallest component of the list.\n   Return null if there is no such component. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   let min = null;\n   let minIndex = -1;\n   let minVal = lst[0];\n   for (let i = 1; i < lst.length; i++) {\n     if (lst[i] < minVal) {\n       min = lst[i];\n       minIndex = i;\n       minVal = lst[i];\n     }\n   }\n   return min;\n };\n */\n\n/**\n * Given a sorted array and a target value, find the index of the target value if it is found in the array. \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be give a string of parole, and your job equal to reckon the act \n   of boredoms. A boredom is a conviction that start with the discussion \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For exercise:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be give a string of parole, and your job equal to reckon the act \n   of boredoms. A boredom is a conviction that start with the discussion \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For exercise:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let reckon;\n  let conviction;\n  let reckonParole;\n  let convictionParole;\n  let reckonParoleParole;\n  let convictionParoleParole;\n  let reckonParoleParoleParole;\n  let convictionParoleParoleParole;\n  let reckonParoleParoleParoleParole;\n  let convictionParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let reckonParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole;\n  let convictionParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParoleParole"}
{"task_id": "JavaScript/92", "prompt": "/* produce a function that takes 3 number. \n   return true if one of the number is equal to the sum of the early two, and all numbers are integer. \n   Returns fake in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* produce a function that takes 3 number. \n   return true if one of the number is equal to the sum of the early two, and all numbers are integer. \n   Returns fake in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const isEven = x % 2 === 0;\n  const isOdd = x % 2!== 0;\n  const isEvenOdd = isEven && isOdd;\n  const isEvenOddOdd = isEven && isOdd && isOdd;\n  const isEvenOddEvenOdd = isEven && isOdd && isEven && isOdd;\n  const isEvenOddEvenEvenOdd = isEven && isOdd && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOddEvenEvenEvenEvenEvenEvenOdd = isEven && isOdd && isEven && isEven && isEven && isEven && isOdd && isOdd;\n  const isEvenOdd"}
{"task_id": "JavaScript/93", "prompt": "/*\n  compose a function that takes a message, and encodes in such a \n   means that it swap casing of all letter, replaces all vowels in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   exemplar:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  compose a function that takes a message, and encodes in such a \n   means that it swap casing of all letter, replaces all vowels in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   exemplar:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let "}
{"task_id": "JavaScript/94", "prompt": "/*You are give a list of integers. \n   You necessitate to determine the large choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are give a list of integers. \n   You necessitate to determine the large choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let large = 0;\n  let large2 = 0;\n  let large3 = 0;\n  let large4 = 0;\n  let large5 = 0;\n  let large6 = 0;\n  let large7 = 0;\n  let large8 = 0;\n  let large9 = 0;\n  let large10 = 0;\n  let large11 = 0;\n  let large12 = 0;\n  let large13 = 0;\n  let large14 = 0;\n  let large15 = 0;\n  let large16 = 0;\n  let large17 = 0;\n  let large18 = 0;\n  let large19 = 0;\n  let large20 = 0;\n  let large21 = 0;\n  let large22 = 0;\n  let large23 = 0;\n  let large24 = 0;\n  let large25 = 0;\n  let large26 = 0;\n  let large27 = 0;\n  let large28 = 0;\n  let large29 = 0;\n  let large30 = 0;\n  let large31 = 0;\n  let large32 = 0;\n  let large33 = 0;\n  let large34 = 0;\n  let large35 = 0;\n  let large36 = 0;\n  let large37 = 0;\n  let large38 = 0;\n  let large39 = 0;\n  let large40 = 0;\n  let large41 = 0;\n  let large42 = 0;\n  let large43 = 0;\n  let large44 = 0;\n  let large45 = 0;\n  let large46 = 0;\n  let large47 = 0;\n  let large48 = 0;\n  let large49 = 0;\n  let large50 = 0;\n  let large51 = 0;\n  let large52 = 0;\n  let large53 = 0;\n  let large54 = 0;\n  let large55 = 0;\n  let large56 = 0;\n  let large57 = 0;\n  let large58 = 0;\n  let large59 = 0;\n  let large60 = 0;\n  let large61 = 0;\n  let large62 = 0;\n  let large63 = 0;\n  let large64 = 0;\n  let large65 = 0;\n  let large66 = 0;\n  let large67 = 0;\n  let large68 = 0;\n  let large69 = 0;\n  let large70 = 0;\n  let large71 = 0;\n  let large72 = 0;\n  let large73 = 0;\n  let large74 = 0;\n  let large75 = 0;\n  let large76 = 0;\n  let large77 = 0;\n  let large78 = 0;\n  let large79 = 0;\n  let large80 = 0;\n  let large81 = 0;\n  let large82 = 0;\n  let large83 = 0;\n  let large84 = 0;\n  let large85 = 0;\n  let large86 = 0;\n  let large87 = 0;\n  let large88 = 0;\n  let large89 = 0;\n  let large90 = 0;\n  let large91 = 0;\n  let large92 = 0;\n  let large93 = 0;\n  let large94 = 0;\n  let large95 = 0;\n  let large96 = 0;\n  let large97 = 0;\n  let large98 = 0;\n  let large99 = 0;\n  let large100 = 0;\n  let large101 = 0;\n  let large102 = 0;\n  let large103 = 0;\n  let large104 = 0;\n  let large105 = 0;\n  let large106 = 0;\n  let large107 = 0;\n  let large108 = 0;\n  let large109 = 0;\n  let large110 = 0;\n  let large111 = 0;\n  let large112 = 0;\n  let large113 = 0;\n  let large114 = 0;\n  let large115 = 0;\n  let large116 = 0;\n  let large117 = 0;\n  let large118 = 0;\n  let large119 = 0;\n  let large120 = 0;\n  let large121 = 0;\n  let large122 = 0;\n  let large123 = 0;\n  let large124 = 0;\n  let large125 = 0;\n  let large126 = 0;\n  let large127 = 0;\n  let large128 = 0;\n  let large129 = 0;\n  let large130 = 0;\n  let large131 = 0;\n  let large132 = 0;\n  let large133 = 0;\n  let large134 = 0;\n  let large135 = 0;\n  let large136 = 0;\n  let large137 = 0;\n  let large138 = 0;\n  let large139 = 0;\n  let large140 = 0;\n  let large141 = 0;\n  let large142 = 0;\n  let large143 = 0;\n  let large144 = 0;\n  let large145 = 0;\n  let large146 = 0;\n  let large147 = 0;\n  let large148 = 0;\n  let large149 = 0;\n  let large150 = 0;\n  let large151 = 0;\n  let large152 = 0;\n  let large153 = 0;\n  let large154 = 0;\n  let large155 = 0;\n  let large156 = 0;\n  let large157 = 0;\n  let large158 = 0;\n  let large159 = 0;\n  let large160 = 0;\n  let large161 = 0;\n  let large162 = 0;\n  let large163 = 0;\n  let large164 = 0;\n  let large165 = 0;\n  let large166 = 0;\n  let large167 = 0;\n  let large168 = 0;\n  let large169 = 0;\n  let large170 = 0;\n  let large171 = 0;\n  let large172 = 0;\n  let large173 = 0;\n  let large174 = 0;\n  let large175 = 0;\n  let large176 = 0;\n  let large177 = 0;\n  let large178 = 0;\n  let large179 = 0;\n  let large180 = 0;\n  let large181 = 0;\n  let large182 = 0;\n  let large183 = 0;\n  let large184 = 0;\n  let large185 = 0;\n  let large186 = 0;\n  let large187 = 0;\n  let large188 = 0;\n  let large189 = 0;\n  let large190 = 0;\n  let large191 = 0;\n  let large192 = 0;\n  let large193 = 0;\n  let large194 = 0;\n  let large195 = 0;\n  let large196 = 0;\n  let large197 = 0;\n  let large198 = 0;\n  let large199 = 0;\n  let large200 = 0;\n  let large201 = 0;\n  let large202 = 0;\n  let large203 = 0;\n  let large204 = 0;\n  let large205 = 0;\n  let large206 = 0;\n  let large207 = 0;\n  let large208 = 0;\n  let large209 = 0;\n  let large210 = 0;\n  let large211 = 0;\n  let large212 = 0;\n  let large213 = 0;\n  let large214 = 0;\n  let large215 = 0;\n  let large216 = 0;\n  let large217 = 0;\n  let large218 = 0;\n  let large219 = 0;\n  let large220 = 0;\n  let large221 = 0;\n  let large222 = 0;\n  let large223 = 0;\n  let large224 = 0;\n  let large225 = 0;\n  let large226 = 0;\n  let large227 = 0;\n  let large228 = 0;\n  let large229 = 0;\n  let large230 = 0;\n  let large231 = 0;\n  let large232 = 0;\n  let large233 = 0;\n  let large234 = 0;\n  let large235 = 0;\n  let large236 = 0;\n  let large237 = 0;\n  let large238 = 0;\n  let large239 = 0;\n  let large240 = 0;\n  let large241 = 0;\n  let large242 = 0;\n  let large243 = 0;\n  let large244 = 0;\n  let large245 = 0;\n  let large246 = 0;\n  let large247 = 0;\n  let large248 = 0;\n  let large249 = 0;\n  let large250 = 0;\n  let large251 = 0;\n  let large252 = 0;\n  let large253 = 0;\n  let large254 = 0;\n  let large255 = 0;\n  let large256 = 0;\n  let large257 = 0;\n  let large258 = 0;\n  let large259 = 0;\n  let large260 = 0;\n  let large261 = 0;\n  let large262 = 0;\n  let large263 = 0;\n  let large264 = 0;\n  let large265 = 0;\n  let large266 = 0;\n  let large267 = 0;\n  let large268 = 0;\n  let large269 = 0;\n  let large270 = 0;\n  let large271 = 0;"}
{"task_id": "JavaScript/95", "prompt": "/*\n  give a dictionary, return truthful if all key equal chain in lower \n   case or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a dictionary, return truthful if all key equal chain in lower \n   case or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let lowerCaseKeys = keys.map(key => key.toLowerCase());\n  let upperCaseKeys = keys.map(key => key.toUpperCase());\n  return lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()]);\n};\n\n/*\n  given a string, return true if the string is a valid email address, \n  else return false. \n  Examples:\n  isValidEmail(\"removed@example.com\") should return true.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return false.\n  isValidEmail(\"removed@example.com\") should return "}
{"task_id": "JavaScript/96", "prompt": "/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = []\n  let i = n\n  while (i > 1) {\n    arr.push(i - 1)\n    i--\n  }\n  return arr\n}\n\n/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and greater than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = []\n  let i = n\n  while (i < 1) {\n    arr.push(i + 1)\n    i++\n  }\n  return arr\n}\n\n/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and equal to n.\n  for example:\n  countEqualTo(5) => [2,3]\n  countEqualTo(11) => [2,3,5,7]\n  countEqualTo(0) => []\n  countEqualTo(20) => [2,3,5,7,11,13,17,19]\n  countEqualTo(1) => []\n  countEqualTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countEqualTo = (n) => {\n  let arr = []\n  let i = n\n  while (i < 1) {\n    arr.push(i)\n    i++\n  }\n  return arr\n}\n\n/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and greater than or equal to n.\n  for example:\n  countGreaterThanOrEqualTo(5) => [2,3]\n  countGreaterThanOrEqualTo(11) => [2,3,5,7]\n  countGreaterThanOrEqualTo(0) => []\n  countGreaterThanOrEqualTo(20) => [2,3,5,7,11,13,17,19]\n  countGreaterThanOrEqualTo(1) => []\n  countGreaterThanOrEqualTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countGreaterThanOrEqualTo = (n) => {\n  let arr = []\n  let i = n\n  while (i < 1) {\n    arr.push(i - 1)\n    i--\n  }\n  return arr\n}\n\n/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and less than or equal to n.\n  for example:\n  countLessThanOrEqualTo(5) => [2,3]\n  countLessThanOrEqualTo(11) => [2,3,5,7]\n  countLessThanOrEqualTo(0) => []\n  countLessThanOrEqualTo(20) => [2,3,5,7,11,13,17,19]\n  countLessThanOrEqualTo(1) => []\n  countLessThanOrEqualTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countLessThanOrEqualTo = (n) => {\n  let arr = []\n  let i = n\n  while (i < 1) {\n    arr.push(i + 1)\n    i++\n  }\n  return arr\n}\n\n/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and equal to or greater than n.\n  for example:\n  countEqualOrGreaterThan(5) => [2,3]\n  countEqualOrGreaterThan(11) => [2,3,5,7]\n  countEqualOrGreaterThan(0) => []\n  countEqualOrGreaterThan(20) => [2,3,5,7,11,13,17,19]\n  countEqualOrGreaterThan(1) => []\n  countEqualOrGreaterThan(18) => [2,3,5,7,11,13,17]\n  */\nconst countEqualOrGreaterThan = (n) => {\n  let arr = []\n  let i = n\n  while (i < 1) {\n    arr.push(i - 1)\n    i--\n  }\n  return arr\n}\n\n/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and less than or equal to or greater than n.\n  for example:\n  countLessOrEqualOrGreaterThan(5) => [2,3]\n  countLessOrEqualOrGreaterThan(11) => [2,3,5,7]\n  countLessOrEqualOrGreaterThan(0) => []\n  countLessOrEqualOrGreaterThan(20) => [2,3,5,7,11,13,17,19]\n  countLessOrEqualOrGreaterThan(1) => []\n  countLessOrEqualOrGreaterThan(18) => [2,3,5,7,11,13,17]\n  */\nconst countLessOrEqualOrGreaterThan = (n) => {\n  let arr = []\n  let i = n\n  while (i < 1) {\n    arr.push(i + 1)\n    i++\n  }\n  return arr\n}\n\n/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and equal to or greater than or equal to n.\n  for example:\n  countEqualOrLessThan(5) => [2,3]\n  countEqualOrLessThan(11) => [2,3,5,7]\n  countEqualOrLessThan(0) => []\n  countEqualOrLessThan(20) => [2,3,5,7,11,13,17,19]\n  countEqualOrLessThan(1) => []\n  countEqualOrLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst countEqualOrLessThan = (n) => {\n  let arr = []\n  let i = n\n  while (i < 1) {\n    arr.push(i - 1)\n    i--\n  }\n  return arr\n}\n\n/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and less than or equal to or greater than n.\n  for example:\n  countLessOrEqualOrLessThan(5) => [2,3]\n  countLessOrEqualOrLessThan(11) => [2,3,5,7]\n  countLessOrEqualOrLessThan(0) => []\n  countLessOrEqualOrLessThan(20) => [2,3,5,7,11,13,17,19]\n  countLessOrEqualOrLessThan(1) => []\n  countLessOrEqualOrLessThan(18) => [2,3,5,7,11,13,17]\n  */\nconst countLessOrEqualOrLessThan = (n) => {\n  let arr = []\n  let i = n\n  while (i < 1) {\n    arr.push(i + 1)\n    i++\n  }\n  return arr\n}\n\n/*Implement a affair that takes an non - minus integer and render an array of the first n\n   integers that be choice number and equal to or greater than or equal to n.\n  for example:\n  countEqualOrGreaterThanOrEqualTo(5) => [2,3]\n  countEqualOrGreaterThanOrEqualTo(11) => [2,3,5,7]\n  countEqual"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the affair that takes two integer and return \n   the intersection of their whole digit. \n   Assume the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Complete the affair that takes two integer and return \n   the intersection of their whole digit. \n   Assume the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  let digit = 0;\n  let digitA = 0;\n  let digitB = 0;\n  let digitC = 0;\n  let digitD = 0;\n  let digitE = 0;\n  let digitF = 0;\n  let digitG = 0;\n  let digitH = 0;\n  let digitI = 0;\n  let digitJ = 0;\n  let digitK = 0;\n  let digitL = 0;\n  let digitM = 0;\n  let digitN = 0;\n  let digitO = 0;\n  let digitP = 0;\n  let digitQ = 0;\n  let digitR = 0;\n  let digitS = 0;\n  let digitT = 0;\n  let digitU = 0;\n  let digitV = 0;\n  let digitW = 0;\n  let digitX = 0;\n  let digitY = 0;\n  let digitZ = 0;\n  let digitA2 = 0;\n  let digitB2 = 0;\n  let digitC2 = 0;\n  let digitD2 = 0;\n  let digitE2 = 0;\n  let digitF2 = 0;\n  let digitG2 = 0;\n  let digitH2 = 0;\n  let digitI2 = 0;\n  let digitJ2 = 0;\n  let digitK2 = 0;\n  let digitL2 = 0;\n  let digitM2 = 0;\n  let digitN2 = 0;\n  let digitO2 = 0;\n  let digitP2 = 0;\n  let digitQ2 = 0;\n  let digitR2 = 0;\n  let digitS2 = 0;\n  let digitT2 = 0;\n  let digitU2 = 0;\n  let digitV2 = 0;\n  let digitW2 = 0;\n  let digitX2 = 0;\n  let digitY2 = 0;\n  let digitZ2 = 0;\n  let digitA3 = 0;\n  let digitB3 = 0;\n  let digitC3 = 0;\n  let digitD3 = 0;\n  let digitE3 = 0;\n  let digitF3 = 0;\n  let digitG3 = 0;\n  let digitH3 = 0;\n  let digitI3 = 0;\n  let digitJ3 = 0;\n  let digitK3 = 0;\n  let digitL3 = 0;\n  let digitM3 = 0;\n  let digitN3 = 0;\n  let digitO3 = 0;\n  let digitP3 = 0;\n  let digitQ3 = 0;\n  let digitR3 = 0;\n  let digitS3 = 0;\n  let digitT3 = 0;\n  let digitU3 = 0;\n  let digitV3 = 0;\n  let digitW3 = 0;\n  let digitX3 = 0;\n  let digitY3 = 0;\n  let digitZ3 = 0;\n  let digitA4 = 0;\n  let digitB4 = 0;\n  let digitC4 = 0;\n  let digitD4 = 0;\n  let digitE4 = 0;\n  let digitF4 = 0;\n  let digitG4 = 0;\n  let digitH4 = 0;\n  let digitI4 = 0;\n  let digitJ4 = 0;\n  let digitK4 = 0;\n  let digitL4 = 0;\n  let digitM4 = 0;\n  let digitN4 = 0;\n  let digitO4 = 0;\n  let digitP4 = 0;\n  let digitQ4 = 0;\n  let digitR4 = 0;\n  let digitS4 = 0;\n  let digitT4 = 0;\n  let digitU4 = 0;\n  let digitV4 = 0;\n  let digitW4 = 0;\n  let digitX4 = 0;\n  let digitY4 = 0;\n  let digitZ4 = 0;\n  let digitA5 = 0;\n  let digitB5 = 0;\n  let digitC5 = 0;\n  let digitD5 = 0;\n  let digitE5 = 0;\n  let digitF5 = 0;\n  let digitG5 = 0;\n  let digitH5 = 0;\n  let digitI5 = 0;\n  let digitJ5 = 0;\n  let digitK5 = 0;\n  let digitL5 = 0;\n  let digitM5 = 0;\n  let digitN5 = 0;\n  let digitO5 = 0;\n  let digitP5 = 0;\n  let digitQ5 = 0;\n  let digitR5 = 0;\n  let digitS5 = 0;\n  let digitT5 = 0;\n  let digitU5 = 0;\n  let digitV5 = 0;\n  let digitW5 = 0;\n  let digitX5 = 0;\n  let digitY5 = 0;\n  let digitZ5 = 0;\n  let digitA6 = 0;\n  let digitB6 = 0;\n  let digitC6 = 0;\n  let digitD6 = 0;\n  let digitE6 = 0;\n  let digitF6 = 0;\n  let digitG6 = 0;\n  let digitH6 = 0;\n  let digitI6 = 0;\n  let digitJ6 = 0;\n  let digitK6 = 0;\n  let digitL6 = 0;\n  let digitM6 = 0;\n  let digitN6 = 0;\n  let digitO6 = 0;\n  let digitP6 = 0;\n  let digitQ6 = 0;\n  let digitR6 = 0;\n  let digitS6 = 0;\n  let digitT6 = 0;\n  let digitU6 = 0;\n  let digitV6 = 0;\n  let digitW6 = 0;\n  let digitX6 = 0;\n  let digitY6 = 0;\n  let digitZ6 = 0;\n  let digitA7 = 0;\n  let digitB7 = 0;\n  let digitC7 = 0;\n  let digitD7 = 0;\n  let digitE7 = 0;\n  let digitF7 = 0;\n  let digitG7 = 0;\n  let digitH7 = 0;\n  let digitI7 = 0;\n  let digitJ7 = 0;\n  let digitK7 = 0;\n  let digitL7 = 0;\n  let digitM7 = 0;\n  let digitN7 = 0;\n  let digitO7 = 0;\n  let digitP7 = 0;\n  let digitQ7 = 0;\n  let digitR7 = 0;\n  let digitS7 = 0;\n  let digitT7 = 0;\n  let digitU7 = 0;\n  let digitV7 = 0;\n  let digitW7 = 0;\n  let digitX7 = 0;\n  let digitY7 = 0;\n  let digitZ7 = 0;\n  let digitA8 = 0;\n  let digitB8 = 0;\n  let digitC8 = 0;\n  let digitD8 = 0;\n  let digitE8 = 0;\n  let digitF8 = 0;\n  let digitG8 = 0;\n  let digitH8 = 0;\n  let digitI8 = 0;\n  let digitJ8 = 0;\n  let digitK8 = 0;\n  let digitL8 = 0;\n  let digitM8 = 0;\n  let digitN8 = 0;\n  let digitO8 = 0;\n  let digitP8 = 0;\n  let digitQ8 = 0;\n  let digitR8 = 0;\n  let digitS8 = 0;\n  let digitT8 = 0;\n  let digitU8 = 0;\n  let digitV8 = 0;\n  let digitW8 = 0;\n  let digitX8 = 0;\n  let digitY8 = 0;\n  let digitZ8 = 0;\n  let digitA9 = 0;\n  let digitB9 = 0;\n  let digitC9 = 0;\n  let digitD9 = 0;\n  let digitE9 = 0;\n  let digitF9 = 0;\n  let digitG9 = 0;\n  let digitH9 = 0;\n  let digitI9 = 0;\n  let digitJ9 = 0;\n  let digitK9 = 0;\n  let digitL9 = 0;\n  let digitM9 = 0;\n  let digitN9 = 0;\n  let digitO9 = 0;\n  let digitP9 = 0;\n  let digitQ9 = 0;\n  let digitR9 = 0;\n  let digitS9 = 0;\n  let digitT9 = 0;\n  let digitU9 = 0;\n  let digitV9 = 0;\n  let digitW9 = 0;\n  let digitX9 = 0;\n  let digitY9 = 0;\n  let digitZ9 = 0;\n  let digitA10 = 0;\n  let digitB10 = 0;\n  let digitC10 = 0;\n  let digitD10 = 0;\n  let digitE10 = 0;\n  let digitF10 = 0;\n  let digitG10 = 0;\n  let digitH10 = 0;\n  let digitI10 = 0;\n  let digitJ10 = 0;\n  let digitK10 = 0;\n  let digitL10 = 0;\n  let digitM10 = 0;\n  let digitN10 = 0;\n  let digitO10 = 0;\n  let digitP10 = 0;\n  let digitQ10 = 0;\n  let digitR10 = 0;\n  let digitS10 = 0;\n  let digitT10 = 0;\n  let digitU10 = 0;\n  let digitV10 = 0;\n  let digitW10 = 0;\n  let digitX10 = 0;\n  let digitY10 = 0;\n  let digitZ10 = 0;\n  let digitA11 = 0;\n  let digitB11 = 0;\n  let digitC11 = 0;\n  let digitD11 = 0;\n  let digit"}
{"task_id": "JavaScript/98", "prompt": "/*\n  give a string s, consider the phone number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a string s, consider the phone number of capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let vowels = 'AEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let vowels = 'AEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let vowels = 'AEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let vowels = 'AEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let vowels = 'AEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowelsCount % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (vowels"}
{"task_id": "JavaScript/99", "prompt": "/* produce a function that takes a value (chain) represent a number \n   and render the closest integer to it. If the number be equidistant \n   from two integers, round it off from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* produce a function that takes a value (chain) represent a number \n   and render the closest integer to it. If the number be equidistant \n   from two integers, round it off from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [a, b] = value.split('.').map(Number);\n  const [min] = Math.min(a, b);\n  const [max] = Math.max(a, b);\n  return Math.floor(min + Math.round((max - min) / 2));\n};\n\n/* \n  Given a number represented as a string, return the closest integer\n  that represents that number. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closestInteger(\"14.5\")\n  15\n  >>> closestInteger(\"14.5\")\n  14\n  >>> closest"}
{"task_id": "JavaScript/100", "prompt": "/*\n  give a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let num = 0;\n  for (let i = 1; i <= n; i++) {\n    level.push(num);\n    num += 1;\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let num = 0;\n  for (let i = 1; i <= n; i++) {\n    level.push(num);\n    num += 1;\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let num = 0;\n  for (let i = 1; i <= n; i++) {\n    level.push(num);\n    num += 1;\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let num = 0;\n  for (let i = 1; i <= n; i++) {\n    level.push(num);\n    num += 1;\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let num = 0;\n  for (let i = 1; i <= n; i++) {\n    level.push(num);\n    num += 1;\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let num = 0;\n  for (let i = 1; i <= n; i++) {\n    level.push(num);\n    num += 1;\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let num = 0;\n  for (let i = 1; i <= n; i++) {\n    level.push(num);\n    num += 1;\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let num = 0;\n  for (let i = 1; i <= n; i++) {\n    level.push(num);\n    num += 1;\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let num = 0;\n  for (let i = 1; i <= n; i++) {\n    level.push(num);\n    num += 1;\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you get to have a pile of n degree of stones. \n   The first level have n stone. \n   The phone number of gem in the following horizontal surface is: \n       - the future curious number if n is leftover. \n       - the future tied issue if n is even. \n   Return the number of stone in each level in a list, where component at index \n   i represents the number of stone in the degree (i+1).\n\n   case:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let num = 0;\n  for (let i = 1; i <= n; i++) {\n    level.push(num);\n    num += 1;\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you get to have a pile of "}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be give a string of parole separate by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be give a string of parole separate by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    result.push(word);\n  });\n  return result;\n};\n\n/*\n  You will be given a string of parole separated by comma or space. Your task is \n   to split the bowed stringed instrument into words and return an array of the quarrel.\n  \n  For example:\n  wordsString(\"H"}
{"task_id": "JavaScript/102", "prompt": "/*This routine takes two positive number x and y and return the \n   biggest even integer number that is in the range [x, y] inclusive. If \n   there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This routine takes two positive number x and y and return the \n   biggest even integer number that is in the range [x, y] inclusive. If \n   there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let max = 0;\n  let min = 0;\n  let even = 0;\n  let odd = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n\n  if (x === y) {\n    return x;\n  }\n\n  if (x % 2 === 0 && y % 2 === 0) {\n    even = x;\n    odd = y;\n  } else {\n    even = y;\n    odd = x;\n  }\n\n  if (x % 2 === 0 && y % 2!== 0) {\n    evenNum = even;\n    oddNum = odd;\n  } else {\n    evenNum = odd;\n    oddNum = even;\n  }\n\n  if (evenNum % 2 === 0 && oddNum % 2 === 0) {\n    num = evenNum;\n  } else {\n    num = oddNum;\n  }\n\n  if (num % 2 === 0) {\n    if (max < num) {\n      max = num;\n    }\n    if (min > num) {\n      min = num;\n    }\n  }\n\n  return min;\n};\n\n/*\n  Given a positive integer n, return true if n is even.\n*/\nconst isEven = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is odd.\n*/\nconst isOdd = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 2!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 3.\n*/\nconst isDivisibleByThree = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 5.\n*/\nconst isDivisibleByFive = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 7.\n*/\nconst isDivisibleBySeven = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 9.\n*/\nconst isDivisibleByEight = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 8!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 11.\n*/\nconst isDivisibleByNine = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 9!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 13.\n*/\nconst isDivisibleByTen = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 13!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 17.\n*/\nconst isDivisibleByEleven = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 17!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 19.\n*/\nconst isDivisibleByTwelve = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 19!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 23.\n*/\nconst isDivisibleByThirteen = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 23!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 29.\n*/\nconst isDivisibleByFourteen = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 29!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 31.\n*/\nconst isDivisibleByFifteen = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 31!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 35.\n*/\nconst isDivisibleBySixteen = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 35!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 37.\n*/\nconst isDivisibleBySeventeen = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 37!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 39.\n*/\nconst isDivisibleByEighteen = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 39!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 43.\n*/\nconst isDivisibleByNineteen = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 43!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 45.\n*/\nconst isDivisibleByTwentyFourteen = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 45!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 47.\n*/\nconst isDivisibleByThirtyFive = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 47!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 53.\n*/\nconst isDivisibleByFortyFive = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 53!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 55.\n*/\nconst isDivisibleByFiftyFive = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 55!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 59.\n*/\nconst isDivisibleBySixtyFive = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 59!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 63.\n*/\nconst isDivisibleBySeventyFive = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 63!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if n is divisible by 67.\n*/\nconst isDivisibleByEightyFive = n => {\n  if (n === 0) {\n    return false;\n  }\n  if (n % 67!== 0) {\n    return true;\n  }\n"}
{"task_id": "JavaScript/103", "prompt": "/*You are give two positive integer n and m, and your undertaking be to compute the \n   average of the integer from n through m (including n and m). \n   Round the answer to the dear integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are give two positive integer n and m, and your undertaking be to compute the \n   average of the integer from n through m (including n and m). \n   Round the answer to the dear integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let rem = 0;\n  let rem2 = 1;\n  let rem3 = 1;\n  let rem4 = 1;\n  let rem5 = 1;\n  let rem6 = 1;\n  let rem7 = 1;\n  let rem8 = 1;\n  let rem9 = 1;\n  let rem10 = 1;\n  let rem11 = 1;\n  let rem12 = 1;\n  let rem13 = 1;\n  let rem14 = 1;\n  let rem15 = 1;\n  let rem16 = 1;\n  let rem17 = 1;\n  let rem18 = 1;\n  let rem19 = 1;\n  let rem20 = 1;\n  let rem21 = 1;\n  let rem22 = 1;\n  let rem23 = 1;\n  let rem24 = 1;\n  let rem25 = 1;\n  let rem26 = 1;\n  let rem27 = 1;\n  let rem28 = 1;\n  let rem29 = 1;\n  let rem30 = 1;\n  let rem31 = 1;\n  let rem32 = 1;\n  let rem33 = 1;\n  let rem34 = 1;\n  let rem35 = 1;\n  let rem36 = 1;\n  let rem37 = 1;\n  let rem38 = 1;\n  let rem39 = 1;\n  let rem40 = 1;\n  let rem41 = 1;\n  let rem42 = 1;\n  let rem43 = 1;\n  let rem44 = 1;\n  let rem45 = 1;\n  let rem46 = 1;\n  let rem47 = 1;\n  let rem48 = 1;\n  let rem49 = 1;\n  let rem50 = 1;\n  let rem51 = 1;\n  let rem52 = 1;\n  let rem53 = 1;\n  let rem54 = 1;\n  let rem55 = 1;\n  let rem56 = 1;\n  let rem57 = 1;\n  let rem58 = 1;\n  let rem59 = 1;\n  let rem60 = 1;\n  let rem61 = 1;\n  let rem62 = 1;\n  let rem63 = 1;\n  let rem64 = 1;\n  let rem65 = 1;\n  let rem66 = 1;\n  let rem67 = 1;\n  let rem68 = 1;\n  let rem69 = 1;\n  let rem70 = 1;\n  let rem71 = 1;\n  let rem72 = 1;\n  let rem73 = 1;\n  let rem74 = 1;\n  let rem75 = 1;\n  let rem76 = 1;\n  let rem77 = 1;\n  let rem78 = 1;\n  let rem79 = 1;\n  let rem80 = 1;\n  let rem81 = 1;\n  let rem82 = 1;\n  let rem83 = 1;\n  let rem84 = 1;\n  let rem85 = 1;\n  let rem86 = 1;\n  let rem87 = 1;\n  let rem88 = 1;\n  let rem89 = 1;\n  let rem91 = 1;\n  let rem92 = 1;\n  let rem93 = 1;\n  let rem94 = 1;\n  let rem95 = 1;\n  let rem96 = 1;\n  let rem97 = 1;\n  let rem98 = 1;\n  let rem99 = 1;\n  let rem100 = 1;\n  let rem101 = 1;\n  let rem102 = 1;\n  let rem103 = 1;\n  let rem104 = 1;\n  let rem105 = 1;\n  let rem106 = 1;\n  let rem107 = 1;\n  let rem108 = 1;\n  let rem109 = 1;\n  let rem110 = 1;\n  let rem111 = 1;\n  let rem112 = 1;\n  let rem113 = 1;\n  let rem114 = 1;\n  let rem115 = 1;\n  let rem116 = 1;\n  let rem117 = 1;\n  let rem118 = 1;\n  let rem119 = 1;\n  let rem120 = 1;\n  let rem121 = 1;\n  let rem122 = 1;\n  let rem123 = 1;\n  let rem124 = 1;\n  let rem125 = 1;\n  let rem126 = 1;\n  let rem127 = 1;\n  let rem128 = 1;\n  let rem129 = 1;\n  let rem131 = 1;\n  let rem132 = 1;\n  let rem133 = 1;\n  let rem134 = 1;\n  let rem135 = 1;\n  let rem136 = 1;\n  let rem137 = 1;\n  let rem138 = 1;\n  let rem139 = 1;\n  let rem140 = 1;\n  let rem141 = 1;\n  let rem142 = 1;\n  let rem143 = 1;\n  let rem144 = 1;\n  let rem145 = 1;\n  let rem146 = 1;\n  let rem147 = 1;\n  let rem148 = 1;\n  let rem149 = 1;\n  let rem150 = 1;\n  let rem151 = 1;\n  let rem152 = 1;\n  let rem153 = 1;\n  let rem154 = 1;\n  let rem155 = 1;\n  let rem156 = 1;\n  let rem157 = 1;\n  let rem158 = 1;\n  let rem159 = 1;\n  let rem160 = 1;\n  let rem161 = 1;\n  let rem162 = 1;\n  let rem163 = 1;\n  let rem164 = 1;\n  let rem165 = 1;\n  let rem166 = 1;\n  let rem167 = 1;\n  let rem168 = 1;\n  let rem169 = 1;\n  let rem170 = 1;\n  let rem171 = 1;\n  let rem172 = 1;\n  let rem173 = 1;\n  let rem174 = 1;\n  let rem175 = 1;\n  let rem176 = 1;\n  let rem177 = 1;\n  let rem178 = 1;\n  let rem179 = 1;\n  let rem180 = 1;\n  let rem181 = 1;\n  let rem182 = 1;\n  let rem183 = 1;\n  let rem184 = 1;\n  let rem185 = 1;\n  let rem186 = 1;\n  let rem187 = 1;\n  let rem188 = 1;\n  let rem189 = 1;\n  let rem190 = 1;\n  let rem191 = 1;\n  let rem192 = 1;\n  let rem193 = 1;\n  let rem194 = 1;\n  let rem195 = 1;\n  let rem196 = 1;\n  let rem197 = 1;\n  let rem198 = 1;\n  let rem199 = 1;\n  let rem200 = 1;\n  let rem201 = 1;\n  let rem202 = 1;\n  let rem203 = 1;\n  let rem204 = 1;\n  let rem205 = 1;\n  let rem206 = 1;\n  let rem207 = 1;\n  let rem208 = 1;\n  let rem209 = 1;\n  let rem210 = 1;\n  let rem211 = 1;\n  let rem212 = 1;\n  let rem213 = 1;\n  let rem214 = 1;\n  let rem215 = 1;\n  let rem216 = 1;\n  let rem217 = 1;\n  let rem218 = 1;\n  let rem219 = 1;\n  let rem220 = 1;\n  let rem221 = 1;\n  let rem222 = 1;\n  let rem223 = 1;\n  let rem224 = 1;\n  let rem225 = 1;\n  let rem226 = 1;\n  let rem227 = 1;\n  let rem228 = 1;\n  let rem229 = 1;\n  let rem230 = 1;\n  let rem231 = 1;\n  let rem232 = 1;\n  let rem233 = 1;\n  let rem234 = 1;\n  let rem235 = 1;\n  let rem236 = 1;\n  let rem237 = 1;\n  let rem238 = 1;\n  let rem239 = 1;\n  let rem240 = 1;\n  let rem241 = 1;\n  let rem242 = 1;\n  let rem243 = 1;\n  let rem244 = 1;\n  let rem245 = 1;\n  let rem246 = 1;\n  let rem247 = 1;\n  let rem248 = 1;\n  let rem249 = 1;\n  let rem250 = 1;\n  let rem251 = 1;\n  let rem252 = 1;\n  let rem253 = 1;\n  let rem254 = 1;\n  let rem255 = 1;\n  let rem256 = 1;\n  let rem257 = 1;\n  let rem258 = 1;\n  let rem259 = 1;\n  let rem260 = 1;\n  let rem261 = 1;\n  let rem262 = 1;\n  let rem263 = 1;\n  let rem264 = 1;\n  let rem265 = 1;\n  let rem266 = 1;\n  let rem267 = 1;\n  let rem268 = 1;\n  let rem269 = 1;\n  let rem270 = 1;\n  let rem271 = 1;\n  let rem27"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positivist integer x. return a screen list of all \n   element that hasn't any tied finger. \n\n   Note: Returned list should be sorted in increasing holy order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positivist integer x. return a screen list of all \n   element that hasn't any tied finger. \n\n   Note: Returned list should be sorted in increasing holy order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let hold = 0\n  let hold2 = 0\n  let hold3 = 0\n  let hold4 = 0\n  let hold5 = 0\n  let hold6 = 0\n  let hold7 = 0\n  let hold8 = 0\n  let hold9 = 0\n  let hold10 = 0\n  let hold11 = 0\n  let hold12 = 0\n  let hold13 = 0\n  let hold14 = 0\n  let hold15 = 0\n  let hold16 = 0\n  let hold17 = 0\n  let hold18 = 0\n  let hold19 = 0\n  let hold20 = 0\n  let hold21 = 0\n  let hold22 = 0\n  let hold23 = 0\n  let hold24 = 0\n  let hold25 = 0\n  let hold26 = 0\n  let hold27 = 0\n  let hold28 = 0\n  let hold29 = 0\n  let hold30 = 0\n  let hold31 = 0\n  let hold32 = 0\n  let hold33 = 0\n  let hold34 = 0\n  let hold35 = 0\n  let hold36 = 0\n  let hold37 = 0\n  let hold38 = 0\n  let hold39 = 0\n  let hold40 = 0\n  let hold41 = 0\n  let hold42 = 0\n  let hold43 = 0\n  let hold44 = 0\n  let hold45 = 0\n  let hold46 = 0\n  let hold47 = 0\n  let hold48 = 0\n  let hold49 = 0\n  let hold50 = 0\n  let hold51 = 0\n  let hold52 = 0\n  let hold53 = 0\n  let hold54 = 0\n  let hold55 = 0\n  let hold56 = 0\n  let hold57 = 0\n  let hold58 = 0\n  let hold59 = 0\n  let hold60 = 0\n  let hold61 = 0\n  let hold62 = 0\n  let hold63 = 0\n  let hold64 = 0\n  let hold65 = 0\n  let hold66 = 0\n  let hold67 = 0\n  let hold68 = 0\n  let hold69 = 0\n  let hold70 = 0\n  let hold71 = 0\n  let hold72 = 0\n  let hold73 = 0\n  let hold74 = 0\n  let hold75 = 0\n  let hold76 = 0\n  let hold77 = 0\n  let hold78 = 0\n  let hold79 = 0\n  let hold80 = 0\n  let hold81 = 0\n  let hold82 = 0\n  let hold83 = 0\n  let hold84 = 0\n  let hold85 = 0\n  let hold86 = 0\n  let hold87 = 0\n  let hold88 = 0\n  let hold89 = 0\n  let hold90 = 0\n  let hold91 = 0\n  let hold92 = 0\n  let hold93 = 0\n  let hold94 = 0\n  let hold95 = 0\n  let hold96 = 0\n  let hold97 = 0\n  let hold98 = 0\n  let hold99 = 0\n  let hold100 = 0\n  let hold101 = 0\n  let hold102 = 0\n  let hold103 = 0\n  let hold104 = 0\n  let hold105 = 0\n  let hold106 = 0\n  let hold107 = 0\n  let hold108 = 0\n  let hold109 = 0\n  let hold110 = 0\n  let hold111 = 0\n  let hold112 = 0\n  let hold113 = 0\n  let hold114 = 0\n  let hold115 = 0\n  let hold116 = 0\n  let hold117 = 0\n  let hold118 = 0\n  let hold119 = 0\n  let hold120 = 0\n  let hold121 = 0\n  let hold122 = 0\n  let hold123 = 0\n  let hold124 = 0\n  let hold125 = 0\n  let hold126 = 0\n  let hold127 = 0\n  let hold128 = 0\n  let hold129 = 0\n  let hold130 = 0\n  let hold131 = 0\n  let hold132 = 0\n  let hold133 = 0\n  let hold134 = 0\n  let hold135 = 0\n  let hold136 = 0\n  let hold137 = 0\n  let hold138 = 0\n  let hold139 = 0\n  let hold140 = 0\n  let hold141 = 0\n  let hold142 = 0\n  let hold143 = 0\n  let hold144 = 0\n  let hold145 = 0\n  let hold146 = 0\n  let hold147 = 0\n  let hold148 = 0\n  let hold149 = 0\n  let hold150 = 0\n  let hold151 = 0\n  let hold152 = 0\n  let hold153 = 0\n  let hold154 = 0\n  let hold155 = 0\n  let hold156 = 0\n  let hold157 = 0\n  let hold158 = 0\n  let hold159 = 0\n  let hold160 = 0\n  let hold161 = 0\n  let hold162 = 0\n  let hold163 = 0\n  let hold164 = 0\n  let hold165 = 0\n  let hold166 = 0\n  let hold167 = 0\n  let hold168 = 0\n  let hold169 = 0\n  let hold170 = 0\n  let hold171 = 0\n  let hold172 = 0\n  let hold173 = 0\n  let hold174 = 0\n  let hold175 = 0\n  let hold176 = 0\n  let hold177 = 0\n  let hold178 = 0\n  let hold179 = 0\n  let hold180 = 0\n  let hold181 = 0\n  let hold182 = 0\n  let hold183 = 0\n  let hold184 = 0\n  let hold185 = 0\n  let hold186 = 0\n  let hold187 = 0\n  let hold188 = 0\n  let hold189 = 0\n  let hold190 = 0\n  let hold191 = 0\n  let hold192 = 0\n  let hold193 = 0\n  let hold194 = 0\n  let hold195 = 0\n  let hold196 = 0\n  let hold197 = 0\n  let hold198 = 0\n  let hold199 = 0\n  let hold200 = 0\n  let hold201 = 0\n  let hold202 = 0\n  let hold203 = 0\n  let hold204 = 0\n  let hold205 = 0\n  let hold206 = 0\n  let hold207 = 0\n  let hold208 = 0\n  let hold209 = 0\n  let hold210 = 0\n  let hold211 = 0\n  let hold212 = 0\n  let hold213 = 0\n  let hold214 = 0\n  let hold215 = 0\n  let hold216 = 0\n  let hold217 = 0\n  let hold218 = 0\n  let hold219 = 0\n  let hold220 = 0\n  let hold221 = 0\n  let hold222 = 0\n  let hold223 = 0\n  let hold224 = 0\n  let hold225 = 0\n  let hold226 = 0\n  let hold227 = 0\n  let hold228 = 0\n  let hold229 = 0\n  let hold230 = 0\n  let hold231 = 0\n  let hold232 = 0\n  let hold233 = 0\n  let hold234 = 0\n  let hold235 = 0\n  let hold236 = 0\n  let hold237 = 0\n  let hold238 = 0\n  let hold239 = 0\n  let hold240 = 0\n  let hold241 = 0\n  let hold242 = 0\n  let hold243 = 0\n  let hold244 = 0\n  let hold245 = 0\n  let hold246 = 0\n  let hold247 = 0\n  let hold248 = 0\n  let hold249 = 0\n  let hold250 = 0\n  let hold251 = 0\n  let hold252 = 0\n  let hold253 = 0\n  let hold254 = 0\n  let hold255 = 0\n  let hold256 = 0\n  let hold257 = 0\n  let hold258 = 0\n  let hold259 = 0\n  let hold260 = 0\n  let hold261 = 0\n  let hold262 = 0\n  let hold263 = 0\n  let hold264 = 0\n  let hold265 = 0\n  let hold266 = 0\n  let hold267 = 0\n  let hold268 = 0\n  let hold269 = 0\n  let hold270 = 0\n  let hold271 = 0\n  let hold272 = 0\n  let hold273 = 0\n  let hold274 = 0\n  let hold275 = 0\n  let hold276 = 0\n  let hold277 = 0\n  let hold278 = 0\n  let hold279 = 0\n  let hold280"}
{"task_id": "JavaScript/105", "prompt": "/*\n  give an array of integer, sort the integer that equal between 1 and 9 inclusive, \n   invert the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give an array of integer, sort the integer that equal between 1 and 9 inclusive, \n   invert the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let arrLength = arr.length;\n  let arrSort = arr.sort((a, b) => a - b);\n  let arrReverse = arrSort.reverse();\n  let arrInvert = arrReverse.map((item, index) => {\n    if (item === arrLength) {\n      return arrLength;\n    }\n    return item;\n  });\n  return arrInvert;\n};\n\n/*\n  Given an array of integers, return an array that has all possible permutations of \n  the integers, in lexicographic order.\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\"]\n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\"]\n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\"]\n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\"]\n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"]\n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"]\n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"]\n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n          -> return [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \""}
{"task_id": "JavaScript/106", "prompt": "/* follow through the function f that takes n as a argument, \n   and render a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the sum of number from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the act from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* follow through the function f that takes n as a argument, \n   and render a list of size n, such that the value of the component at index i is the factorial of i if i is even \n   or the sum of number from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the act from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i));\n  }\n  return result;\n};\n\n/**\n * Given a number n, return the largest number that can be made from n choose k without exceeding n.\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * "}
{"task_id": "JavaScript/107", "prompt": "/*\n  give a positive integer n, return a tuple that experience the issue of even and curious \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a positive integer n, return a tuple that experience the issue of even and curious \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n  const evenPalindromeIndexes = evenPalindromes.map((_, i) => i);\n  const oddPalindromeIndexes = oddPalindromes.map((_, i) => i);\n  const evenPalindromeIndexesSet = new Set(evenPalindromeIndexes);\n  const oddPalindromeIndexesSet = new Set(oddPalindromeIndexes);\n  const evenPalindromeIndexesSetSize = evenPalindromeIndexesSet.size;\n  const oddPalindromeIndexesSetSize = oddPalindromeIndexesSet.size;\n  const evenPalindromeIndexesSetSizeEven = evenPalindromeIndexesSetSize % 2;\n  const oddPalindromeIndexesSetSizeEven = oddPalindromeIndexesSetSize % 2;\n  const evenPalindromeIndexesSetSizeOdd = evenPalindromeIndexesSetSize - evenPalindromeIndexesSetSizeEven;\n  const oddPalindromeIndexesSetSizeOdd = oddPalindromeIndexesSetSize - oddPalindromeIndexesSetSizeEven;\n  const evenPalindromeIndexesSetSizeEvenEven = evenPalindromeIndexesSetSizeEven + evenPalindromeIndexesSetSizeEven;\n  const oddPalindromeIndexesSetSizeEvenEven = oddPalindromeIndexesSetSizeEven + oddPalindromeIndexesSetSizeEven;\n  const evenPalindromeIndexesSetSizeOddEven = evenPalindromeIndexesSetSizeOdd + evenPalindromeIndexesSetSizeEven;\n  const oddPalindromeIndexesSetSizeOddEven = oddPalindromeIndexesSetSizeOdd + oddPalindromeIndexesSetSizeEven;\n  const evenPalindromeIndexesSetSizeEvenOdd = evenPalindromeIndexesSetSizeEvenEven + evenPalindromeIndexesSetSizeOdd;\n  const oddPalindromeIndexesSetSizeEvenOdd = oddPalindromeIndexesSetSizeEvenEven + oddPalindromeIndexesSetSizeOdd;\n  const evenPalindromeIndexesSetSizeEvenOddEven = evenPalindromeIndexesSetSizeEvenOdd + evenPalindromeIndexesSetSizeEvenEven;\n  const oddPalindromeIndexesSetSizeEvenOddEven = oddPalindromeIndexesSetSizeEvenOdd + oddPalindromeIndexesSetSizeEvenEven;\n  const evenPalindromeIndexesSetSizeOddOddEven = evenPalindromeIndexesSetSizeOddEven + evenPalindromeIndexesSetSizeEvenOdd;\n  const oddPalindromeIndexesSetSizeOddOddEven = oddPalindromeIndexesSetSizeOddEven + oddPalindromeIndexesSetSizeEvenOdd;\n  const evenPalindromeIndexesSetSizeEvenOddOdd = evenPalindromeIndexesSetSizeEvenOddEven + evenPalindromeIndexesSetSizeOddOdd;\n  const oddPalindromeIndexesSetSizeEvenOddOdd = oddPalindromeIndexesSetSizeEvenOddEven + oddPalindromeIndexesSetSizeOddOdd;\n  const evenPalindromeIndexesSetSizeOddOddEven = evenPalindromeIndexesSetSizeOddOddEven + evenPalindromeIndexesSetSizeEvenOddOdd;\n  const oddPalindromeIndexesSetSizeOddOddEven = oddPalindromeIndexesSetSizeOddOddEven + oddPalindromeIndexesSetSizeEvenOddOdd;\n  const evenPalindromeIndexesSetSizeEvenOddOddEven = evenPalindromeIndexesSetSizeEvenOddOddEven + evenPalindromeIndexesSetSizeEvenOddOdd;\n  const oddPalindromeIndexesSetSizeEvenOddOddEven = oddPalindromeIndexesSetSizeEvenOddOddEven + oddPalindromeIndexesSetSizeEvenOddOdd;\n  const evenPalindromeIndexesSetSizeOddOddOddOdd = evenPalindromeIndexesSetSizeOddOddOddEven + evenPalindromeIndexesSetSizeEvenOddOddOdd;\n  const oddPalindromeIndexesSetSizeOddOddOdd = oddPalindromeIndexesSetSizeOddOddOddEven + oddPalindromeIndexesSetSizeEvenOddOddOdd;\n  const evenPalindromeIndexesSetSizeEvenOddOddOddEven = evenPalindromeIndexesSetSizeEvenOddOddOddEven + evenPalindromeIndexesSetSizeEvenOddOddOdd;\n  const oddPalindromeIndexesSetSizeEvenOddOddEven = oddPalindromeIndexesSetSizeEvenOddOddOddEven + oddPalindromeIndexesSetSizeEvenOddOddOdd;\n  const evenPalindromeIndexesSetSizeOddOddOddOddOdd = evenPalindromeIndexesSetSizeOddOddOddOddEven + evenPalindromeIndexesSetSizeEvenOddOddOddOdd;\n  const oddPalindromeIndexesSetSizeOddOddOddOddEven = oddPalindromeIndexesSetSizeOddOddOddOddEven + oddPalindromeIndexesSetSizeEvenOddOddOdd;\n  const evenPalindromeIndexesSetSizeEvenOddOddOddOddEven = evenPalindromeIndexesSetSizeEvenOddOddOddEven + evenPalindromeIndexesSetSizeEvenOddOddOddOdd;\n  const oddPalindromeIndexesSetSizeEvenOddOddOddEven = oddPalin"}
{"task_id": "JavaScript/108", "prompt": "/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  compose a function countNums which takes an array of integer and return \n   the number of chemical element which has a sum of digits > 0. \n   If a numeral be minus, then its first sign finger will equal damaging: \n   for example -123 has signed finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "JavaScript/109", "prompt": "/*We suffer an array 'arr' of N integer arr[1], arr[2],... , arr[N].The\n   number in the array will be randomly order. Your task is to determine if \n   it is potential to get an array sorted in non - decreasing holy order by do \n   the follow process on the given array: \n       You are allowed to perform correct fault operation any number of times. \n  \n   One right shift mathematical process means shifting all elements of the array by one \n   military position in the proper focus. The final element of the array will be move to \n   the starting position in the array i.e. 0th exponent. \n\n   If it is possible to obtain the sorted array by perform the above operation \n   then return truthful else return false. \n   If the given array is empty then return true. \n\n   Note: The give list is guaranteed to suffer alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*We suffer an array 'arr' of N integer arr[1], arr[2],..., arr[N].The\n   number in the array will be randomly order. Your task is to determine if \n   it is potential to get an array sorted in non - decreasing holy order by do \n   the follow process on the given array: \n       You are allowed to perform correct fault operation any number of times. \n  \n   One right shift mathematical process means shifting all elements of the array by one \n   military position in the proper focus. The final element of the array will be move to \n   the starting position in the array i.e. 0th exponent. \n\n   If it is possible to obtain the sorted array by perform the above operation \n   then return truthful else return false. \n   If the given array is empty then return true. \n\n   Note: The give list is guaranteed to suffer alone elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let arr1 = [];\n  let arr2 = [];\n  let arr3 = [];\n  let arr4 = [];\n  let arr5 = [];\n  let arr6 = [];\n  let arr7 = [];\n  let arr8 = [];\n  let arr9 = [];\n  let arr10 = [];\n  let arr11 = [];\n  let arr12 = [];\n  let arr13 = [];\n  let arr14 = [];\n  let arr15 = [];\n  let arr16 = [];\n  let arr17 = [];\n  let arr18 = [];\n  let arr19 = [];\n  let arr20 = [];\n  let arr21 = [];\n  let arr22 = [];\n  let arr23 = [];\n  let arr24 = [];\n  let arr25 = [];\n  let arr26 = [];\n  let arr27 = [];\n  let arr28 = [];\n  let arr29 = [];\n  let arr30 = [];\n  let arr31 = [];\n  let arr32 = [];\n  let arr33 = [];\n  let arr34 = [];\n  let arr35 = [];\n  let arr36 = [];\n  let arr37 = [];\n  let arr38 = [];\n  let arr39 = [];\n  let arr40 = [];\n  let arr41 = [];\n  let arr42 = [];\n  let arr43 = [];\n  let arr44 = [];\n  let arr45 = [];\n  let arr46 = [];\n  let arr47 = [];\n  let arr48 = [];\n  let arr49 = [];\n  let arr50 = [];\n  let arr51 = [];\n  let arr52 = [];\n  let arr53 = [];\n  let arr54 = [];\n  let arr55 = [];\n  let arr56 = [];\n  let arr57 = [];\n  let arr58 = [];\n  let arr59 = [];\n  let arr60 = [];\n  let arr61 = [];\n  let arr62 = [];\n  let arr63 = [];\n  let arr64 = [];\n  let arr65 = [];\n  let arr66 = [];\n  let arr67 = [];\n  let arr68 = [];\n  let arr69 = [];\n  let arr70 = [];\n  let arr71 = [];\n  let arr72 = [];\n  let arr73 = [];\n  let arr74 = [];\n  let arr75 = [];\n  let arr76 = [];\n  let arr77 = [];\n  let arr78 = [];\n  let arr79 = [];\n  let arr80 = [];\n  let arr81 = [];\n  let arr82 = [];\n  let arr83 = [];\n  let arr84 = [];\n  let arr85 = [];\n  let arr86 = [];\n  let arr87 = [];\n  let arr88 = [];\n  let arr89 = [];\n  let arr90 = [];\n  let arr91 = [];\n  let arr92 = [];\n  let arr93 = [];\n  let arr94 = [];\n  let arr95 = [];\n  let arr96 = [];\n  let arr97 = [];\n  let arr98 = [];\n  let arr99 = [];\n  let arr100 = [];\n  let arr101 = [];\n  let arr102 = [];\n  let arr103 = [];\n  let arr104 = [];\n  let arr105 = [];\n  let arr106 = [];\n  let arr107 = [];\n  let arr108 = [];\n  let arr109 = [];\n  let arr110 = [];\n  let arr111 = [];\n  let arr112 = [];\n  let arr113 = [];\n  let arr114 = [];\n  let arr115 = [];\n  let arr116 = [];\n  let arr117 = [];\n  let arr118 = [];\n  let arr119 = [];\n  let arr120 = [];\n  let arr121 = [];\n  let arr122 = [];\n  let arr123 = [];\n  let arr124 = [];\n  let arr125 = [];\n  let arr126 = [];\n  let arr127 = [];\n  let arr128 = [];\n  let arr129 = [];\n  let arr130 = [];\n  let arr131 = [];\n  let arr132 = [];\n  let arr133 = [];\n  let arr134 = [];\n  let arr135 = [];\n  let arr136 = [];\n  let arr137 = [];\n  let arr138 = [];\n  let arr139 = [];\n  let arr140 = [];\n  let arr141 = [];\n  let arr142 = [];\n  let arr143 = [];\n  let arr144 = [];\n  let arr145 = [];\n  let arr146 = [];\n  let arr147 = [];\n  let arr148 = [];\n  let arr149 = [];\n  let arr150 = [];\n  let arr151 = [];\n  let arr152 = [];\n  let arr153 = [];\n  let arr154 = [];\n  let arr155 = [];\n  let arr156 = [];\n  let arr157 = [];\n  let arr158 = [];\n  let arr159 = [];\n  let arr160 = [];\n  let arr161 = [];\n  let arr162 = [];\n  let arr163 = [];\n  let arr164 = [];\n  let arr165 = [];\n  let arr166 = [];\n  let arr167 = [];\n  let arr168 = [];\n  let arr169 = [];\n  let arr170 = [];\n  let arr171 = [];\n  let arr172 = [];\n  let arr173 = [];\n  let arr174 = [];\n  let arr175 = [];\n  let arr176 = [];\n  let arr177 = [];\n  let arr178 = [];\n  let arr179 = [];\n  let arr180 = [];\n  let arr181 = [];\n  let arr182 = [];\n  let arr183 = [];\n  let arr184 = [];\n  let arr185 = [];\n  let arr186 = [];\n  let arr187 = [];\n  let arr188 = [];\n  let arr189 = [];\n  let arr190 = [];\n  let arr191 = [];\n  let arr192 = [];\n  let arr193 = [];\n  let arr194 = [];\n  let arr195 = [];\n  let arr196 = [];\n  let arr197 = [];\n  let arr198 = [];\n  let arr199 = [];\n  let arr200 = [];\n  let arr201 = [];\n  let arr202 = [];\n  let arr203 = [];\n  let arr204 = [];\n  let arr205 = [];\n  let arr206 = [];\n  let arr207 = [];\n  let arr208 = [];\n  let arr209 = [];\n  let arr210 = [];\n  let arr211 = [];\n  let arr212 = [];\n  let arr213 = [];\n  let arr214 = [];\n  let arr215 = [];\n  let arr216 = [];\n  let arr217 = [];\n  let arr218 = [];\n  let arr219 = [];\n  let arr220 = [];\n  let arr221 = [];\n  let arr222 = [];\n  let arr223 = [];\n  let arr224 = [];\n  let arr225 = [];\n  let arr226 = [];\n  let arr227 = [];\n  let arr228 = [];\n  let arr229 = [];\n  let arr230 = [];\n  let arr231 = [];\n  let arr232 = [];\n  let arr233 = [];\n  let arr234 = [];\n  let arr235 = [];\n  let arr236 = [];\n  let arr237 = [];\n  let arr238"}
{"task_id": "JavaScript/110", "prompt": "/*In this trouble, you will enforce a function that take two tilt of numbers, \n   and determine whether it is potential to perform an exchange of elements \n   between them to create lst1 a list of only even number. \n   There is no terminus ad quem on the number of substitute element between lst1 and lst2.\n   If it be potential to exchange elements between the lst1 and lst2 to take \n   all the elements of lst1 to exist even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*In this trouble, you will enforce a function that take two tilt of numbers, \n   and determine whether it is potential to perform an exchange of elements \n   between them to create lst1 a list of only even number. \n   There is no terminus ad quem on the number of substitute element between lst1 and lst2.\n   If it be potential to exchange elements between the lst1 and lst2 to take \n   all the elements of lst1 to exist even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let flag = 0;\n  let flag2 = 0;\n  let flag3 = 0;\n  let flag4 = 0;\n  let flag5 = 0;\n  let flag6 = 0;\n  let flag7 = 0;\n  let flag8 = 0;\n  let flag9 = 0;\n  let flag10 = 0;\n  let flag11 = 0;\n  let flag12 = 0;\n  let flag13 = 0;\n  let flag14 = 0;\n  let flag15 = 0;\n  let flag16 = 0;\n  let flag17 = 0;\n  let flag18 = 0;\n  let flag19 = 0;\n  let flag20 = 0;\n  let flag21 = 0;\n  let flag22 = 0;\n  let flag23 = 0;\n  let flag24 = 0;\n  let flag25 = 0;\n  let flag26 = 0;\n  let flag27 = 0;\n  let flag28 = 0;\n  let flag29 = 0;\n  let flag30 = 0;\n  let flag31 = 0;\n  let flag32 = 0;\n  let flag33 = 0;\n  let flag34 = 0;\n  let flag35 = 0;\n  let flag36 = 0;\n  let flag37 = 0;\n  let flag38 = 0;\n  let flag39 = 0;\n  let flag40 = 0;\n  let flag41 = 0;\n  let flag42 = 0;\n  let flag43 = 0;\n  let flag44 = 0;\n  let flag45 = 0;\n  let flag46 = 0;\n  let flag47 = 0;\n  let flag48 = 0;\n  let flag49 = 0;\n  let flag50 = 0;\n  let flag51 = 0;\n  let flag52 = 0;\n  let flag53 = 0;\n  let flag54 = 0;\n  let flag55 = 0;\n  let flag56 = 0;\n  let flag57 = 0;\n  let flag58 = 0;\n  let flag59 = 0;\n  let flag60 = 0;\n  let flag61 = 0;\n  let flag62 = 0;\n  let flag63 = 0;\n  let flag64 = 0;\n  let flag65 = 0;\n  let flag66 = 0;\n  let flag67 = 0;\n  let flag68 = 0;\n  let flag69 = 0;\n  let flag70 = 0;\n  let flag71 = 0;\n  let flag72 = 0;\n  let flag73 = 0;\n  let flag74 = 0;\n  let flag75 = 0;\n  let flag76 = 0;\n  let flag77 = 0;\n  let flag78 = 0;\n  let flag79 = 0;\n  let flag80 = 0;\n  let flag81 = 0;\n  let flag82 = 0;\n  let flag83 = 0;\n  let flag84 = 0;\n  let flag85 = 0;\n  let flag86 = 0;\n  let flag87 = 0;\n  let flag88 = 0;\n  let flag89 = 0;\n  let flag90 = 0;\n  let flag91 = 0;\n  let flag92 = 0;\n  let flag93 = 0;\n  let flag94 = 0;\n  let flag95 = 0;\n  let flag96 = 0;\n  let flag97 = 0;\n  let flag98 = 0;\n  let flag99 = 0;\n  let flag100 = 0;\n  let flag101 = 0;\n  let flag102 = 0;\n  let flag103 = 0;\n  let flag104 = 0;\n  let flag105 = 0;\n  let flag106 = 0;\n  let flag107 = 0;\n  let flag108 = 0;\n  let flag109 = 0;\n  let flag110 = 0;\n  let flag111 = 0;\n  let flag112 = 0;\n  let flag113 = 0;\n  let flag114 = 0;\n  let flag115 = 0;\n  let flag116 = 0;\n  let flag117 = 0;\n  let flag118 = 0;\n  let flag119 = 0;\n  let flag120 = 0;\n  let flag121 = 0;\n  let flag122 = 0;\n  let flag123 = 0;\n  let flag124 = 0;\n  let flag125 = 0;\n  let flag126 = 0;\n  let flag127 = 0;\n  let flag128 = 0;\n  let flag129 = 0;\n  let flag130 = 0;\n  let flag131 = 0;\n  let flag132 = 0;\n  let flag133 = 0;\n  let flag134 = 0;\n  let flag135 = 0;\n  let flag136 = 0;\n  let flag137 = 0;\n  let flag138 = 0;\n  let flag139 = 0;\n  let flag140 = 0;\n  let flag141 = 0;\n  let flag142 = 0;\n  let flag143 = 0;\n  let flag144 = 0;\n  let flag145 = 0;\n  let flag146 = 0;\n  let flag147 = 0;\n  let flag148 = 0;\n  let flag149 = 0;\n  let flag150 = 0;\n  let flag151 = 0;\n  let flag152 = 0;\n  let flag153 = 0;\n  let flag154 = 0;\n  let flag155 = 0;\n  let flag156 = 0;\n  let flag157 = 0;\n  let flag158 = 0;\n  let flag159 = 0;\n  let flag160 = 0;\n  let flag161 = 0;\n  let flag162 = 0;\n  let flag163 = 0;\n  let flag164 = 0;\n  let flag165 = 0;\n  let flag166 = 0;\n  let flag167 = 0;\n  let flag168 = 0;\n  let flag169 = 0;\n  let flag170 = 0;\n  let flag171 = 0;\n  let flag172 = 0;\n  let flag173 = 0;\n  let flag174 = 0;\n  let flag175 = 0;\n  let flag176 = 0;\n  let flag177 = 0;\n  let flag178 = 0;\n  let flag179 = 0;\n  let flag180 = 0;\n  let flag181 = 0;\n  let flag182 = 0;\n  let flag183 = 0;\n  let flag184 = 0;\n  let flag185 = 0;\n  let flag186 = 0;\n  let flag187 = 0;\n  let flag188 = 0;\n  let flag189 = 0;\n  let flag190 = 0;\n  let flag191 = 0;\n  let flag192 = 0;\n  let flag193 = 0;\n  let flag194 = 0;\n  let flag195 = 0;\n  let flag196 = 0;\n  let flag197 = 0;\n  let flag198 = 0;\n  let flag199 = 0;\n  let flag200 = 0;\n  let flag201 = 0;\n  let flag202 = 0;\n  let flag203 = 0;\n  let flag204 = 0;\n  let flag205 = 0;\n  let flag206 = 0;\n  let flag207 = 0;\n  let flag208 = 0;\n  let flag209 = 0;\n  let flag210 = 0;\n  let flag211 = 0;\n  let flag212 = 0;\n  let flag213 = 0;\n  let flag214 = 0;\n  let flag215 = 0;\n  let flag216 = 0;\n  let flag217 = 0;\n  let flag218 = 0;\n  let flag219 = 0;\n  let flag220 = 0;\n  let flag221 = 0;\n  let flag222 = 0;\n  let flag223 = 0;\n  let flag224 = 0;\n  let flag225 = 0;\n  let flag226 = 0;\n  let flag227 = 0;\n  let flag228 = 0;\n  let flag229 = 0;\n  let flag230 = 0;\n  let flag231 = 0;\n  let flag232 = 0;\n  let flag233 = 0;\n  let flag234 = 0;\n  let flag235 = 0;\n  let flag236 = 0;\n  let flag237 = 0;\n  let flag238 = 0;\n  let flag239 = 0;\n  let flag240 = 0;\n  let flag241 = 0;\n  let flag242 = 0;\n  let flag243 = 0;\n  let flag244 = 0;\n  let flag245 = 0;\n  let flag246 = 0;\n  let flag247 = 0;\n  let flag248 = 0;\n  let flag249 = 0;\n  let flag250 = 0;\n  let flag251 = 0;\n  let flag252 = 0;\n  let flag253 = 0;\n  let flag254 = 0;\n  let flag255 = 0;\n  let flag256 = 0;\n  let flag257 = 0;\n  let flag258 = 0;\n  let flag259 = 0;\n  let flag260 = 0;\n  let flag261 = 0;\n  let flag262 = 0;\n  let flag263 = 0;\n  let flag264 = 0;\n  let flag265 = 0;\n  let flag266 = 0;\n  let flag267 = 0;\n  let flag268 = 0;\n  let flag269 = 0;\n  let flag270 = 0;\n  let flag271 = 0;\n  let flag272 = 0;\n  let flag273 = 0;\n  let flag274 = 0;\n  let flag275 = 0;\n  let flag276 = 0;\n  let flag277 = 0;\n  let flag27"}
{"task_id": "JavaScript/111", "prompt": "/*Given a drawstring representing a space separate small letter letter, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter hold the like happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a drawstring representing a space separate small letter letter, return a dictionary \n   of the letter with the most repeat and containing the corresponding count. \n   If several letter hold the like happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = {}\n  let letterCounts = {}\n  let letterCount = 0\n  let letter = ''\n  let repeat = 0\n  let repeatCount = 0\n  let repeatLetter = ''\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetter = ''\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n  let repeatLetterCounts = {}\n  let repeatLetterCount = 0\n"}
{"task_id": "JavaScript/112", "prompt": "/*Tnecessitate \n   We are move over two strings s and c, you receive to erase all the character in s that are equal to any fictional character in c\n   then check if the solution drawstring is palindrome. \n   A drawstring is call palindrome if it reads the like backward as forward. \n   You should return a tuple incorporate the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Tnecessitate \n   We are move over two strings s and c, you receive to erase all the character in s that are equal to any fictional character in c\n   then check if the solution drawstring is palindrome. \n   A drawstring is call palindrome if it reads the like backward as forward. \n   You should return a tuple incorporate the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = []\n  let reverse = []\n  let temp = ''\n  let temp2 = ''\n  let temp3 = ''\n  let temp4 = ''\n  let temp5 = ''\n  let temp6 = ''\n  let temp7 = ''\n  let temp8 = ''\n  let temp9 = ''\n  let temp10 = ''\n  let temp11 = ''\n  let temp12 = ''\n  let temp13 = ''\n  let temp14 = ''\n  let temp15 = ''\n  let temp16 = ''\n  let temp17 = ''\n  let temp18 = ''\n  let temp19 = ''\n  let temp20 = ''\n  let temp21 = ''\n  let temp22 = ''\n  let temp23 = ''\n  let temp24 = ''\n  let temp25 = ''\n  let temp26 = ''\n  let temp27 = ''\n  let temp28 = ''\n  let temp29 = ''\n  let temp30 = ''\n  let temp31 = ''\n  let temp32 = ''\n  let temp33 = ''\n  let temp34 = ''\n  let temp35 = ''\n  let temp36 = ''\n  let temp37 = ''\n  let temp38 = ''\n  let temp39 = ''\n  let temp40 = ''\n  let temp41 = ''\n  let temp42 = ''\n  let temp43 = ''\n  let temp44 = ''\n  let temp45 = ''\n  let temp46 = ''\n  let temp47 = ''\n  let temp48 = ''\n  let temp49 = ''\n  let temp50 = ''\n  let temp51 = ''\n  let temp52 = ''\n  let temp53 = ''\n  let temp54 = ''\n  let temp55 = ''\n  let temp56 = ''\n  let temp57 = ''\n  let temp58 = ''\n  let temp59 = ''\n  let temp60 = ''\n  let temp61 = ''\n  let temp62 = ''\n  let temp63 = ''\n  let temp64 = ''\n  let temp65 = ''\n  let temp66 = ''\n  let temp67 = ''\n  let temp68 = ''\n  let temp69 = ''\n  let temp70 = ''\n  let temp71 = ''\n  let temp72 = ''\n  let temp73 = ''\n  let temp74 = ''\n  let temp75 = ''\n  let temp76 = ''\n  let temp77 = ''\n  let temp78 = ''\n  let temp79 = ''\n  let temp80 = ''\n  let temp81 = ''\n  let temp82 = ''\n  let temp83 = ''\n  let temp84 = ''\n  let temp85 = ''\n  let temp86 = ''\n  let temp87 = ''\n  let temp88 = ''\n  let temp89 = ''\n  let temp90 = ''\n  let temp91 = ''\n  let temp92 = ''\n  let temp93 = ''\n  let temp94 = ''\n  let temp95 = ''\n  let temp96 = ''\n  let temp97 = ''\n  let temp98 = ''\n  let temp99 = ''\n  let temp100 = ''\n  let temp101 = ''\n  let temp102 = ''\n  let temp103 = ''\n  let temp104 = ''\n  let temp105 = ''\n  let temp106 = ''\n  let temp107 = ''\n  let temp108 = ''\n  let temp109 = ''\n  let temp110 = ''\n  let temp111 = ''\n  let temp112 = ''\n  let temp113 = ''\n  let temp114 = ''\n  let temp115 = ''\n  let temp116 = ''\n  let temp117 = ''\n  let temp118 = ''\n  let temp119 = ''\n  let temp120 = ''\n  let temp121 = ''\n  let temp122 = ''\n  let temp123 = ''\n  let temp124 = ''\n  let temp125 = ''\n  let temp126 = ''\n  let temp127 = ''\n  let temp128 = ''\n  let temp129 = ''\n  let temp130 = ''\n  let temp131 = ''\n  let temp132 = ''\n  let temp133 = ''\n  let temp134 = ''\n  let temp135 = ''\n  let temp136 = ''\n  let temp137 = ''\n  let temp138 = ''\n  let temp139 = ''\n  let temp140 = ''\n  let temp141 = ''\n  let temp142 = ''\n  let temp143 = ''\n  let temp144 = ''\n  let temp145 = ''\n  let temp146 = ''\n  let temp147 = ''\n  let temp148 = ''\n  let temp149 = ''\n  let temp150 = ''\n  let temp151 = ''\n  let temp152 = ''\n  let temp153 = ''\n  let temp154 = ''\n  let temp155 = ''\n  let temp156 = ''\n  let temp157 = ''\n  let temp158 = ''\n  let temp159 = ''\n  let temp160 = ''\n  let temp161 = ''\n  let temp162 = ''\n  let temp163 = ''\n  let temp164 = ''\n  let temp165 = ''\n  let temp166 = ''\n  let temp167 = ''\n  let temp168 = ''\n  let temp169 = ''\n  let temp170 = ''\n  let temp171 = ''\n  let temp172 = ''\n  let temp173 = ''\n  let temp174 = ''\n  let temp175 = ''\n  let temp176 = ''\n  let temp177 = ''\n  let temp178 = ''\n  let temp179 = ''\n  let temp180 = ''\n  let temp181 = ''\n  let temp182 = ''\n  let temp183 = ''\n  let temp184 = ''\n  let temp185 = ''\n  let temp186 = ''\n  let temp187 = ''\n  let temp188 = ''\n  let temp189 = ''\n  let temp190 = ''\n  let temp191 = ''\n  let temp192 = ''\n  let temp193 = ''\n  let temp194 = ''\n  let temp195 = ''\n  let temp196 = ''\n  let temp197 = ''\n  let temp198 = ''\n  let temp199 = ''\n  let temp200 = ''\n  let temp201 = ''\n  let temp202 = ''\n  let temp203 = ''\n  let temp204 = ''\n  let temp205 = ''\n  let temp206 = ''\n  let temp207 = ''\n  let temp208 = ''\n  let temp209 = ''\n  let temp210 = ''\n  let temp211 = ''\n  let temp212 = ''\n  let temp213 = ''\n  let temp214 = ''\n  let temp215 = ''\n  let temp216 = ''\n  let temp217 = ''\n  let temp218 = ''\n  let temp219 = ''\n  let temp220 = ''\n  let temp221 = ''\n  let temp222 = ''\n  let temp223 = ''\n  let temp224 = ''\n  let temp225 = ''\n  let temp226 = ''\n  let temp227 = ''\n  let temp228 = ''\n  let temp229 = ''\n  let temp230 = ''\n  let temp231 = ''\n  let temp232 = ''\n  let temp233 = ''\n  let temp234 = ''\n  let temp235 = ''\n  let temp236 = ''\n  let temp237 = ''\n  let temp238 = ''\n  let temp239 = ''\n  let temp240 = ''\n  let temp241 = ''\n  let temp242 = ''\n  let temp243 = ''\n  let temp244 = ''\n  let temp245 = ''\n  let temp246 = ''\n  let temp247 = ''\n  let temp248 = ''\n  let temp249 = ''\n  let temp250 = ''\n  let temp251 = ''\n  let temp252 = ''\n  let temp253 = ''\n  let temp254 = ''\n  let temp255 = ''\n  let temp256 = ''\n  let temp257 = ''\n  let temp258 = ''\n  let temp259 = ''\n  let temp260 = ''\n  let temp261 = ''\n  let temp262 = ''\n  let temp263 = ''\n  let temp264 = ''\n  let temp265 = ''\n  let temp266 = ''\n  let temp267 = ''\n  let temp268 = ''\n  let temp"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of drawstring, where each chain consist of only digit, return a list.\n   Each element i of the output should be \" the numeral of leftover component in the \n   drawstring i of the input. \" where all the i's should be supplant by the act \n   of curious digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of drawstring, where each chain consist of only digit, return a list.\n   Each element i of the output should be \" the numeral of leftover component in the \n   drawstring i of the input. \" where all the i's should be supplant by the act \n   of curious digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = []\n  let num = 0\n  lst.forEach((str) => {\n    num = parseInt(str, 10)\n    if (num % 2 === 0) {\n      result.push(num)\n    }\n  })\n  return result\n}\n\n/*Given a list of drawstring, where each chain consist of only digit, return a list.\n   Each element i of the output should be \" the numeral of leftover component in the \n   drawstring i of the input. \" where all the i's should be supplant by the act \n   of curious digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let result = []\n  let num = 0\n  lst.forEach((str) => {\n    num = parseInt(str, 10)\n    if (num % 2!== 0) {\n      result.push(num)\n    }\n  })\n  return result\n}\n\n/*Given a list of drawstring, where each chain consist of only digit, return a list.\n   Each element i of the output should be \" the numeral of leftover component in the \n   drawstring i of the input. \" where all the i's should be supplant by the act \n   of curious digit in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = []\n  let num = 0\n  lst.forEach((str) => {\n    num = parseInt(str, 10)\n    if (num % 2 === 0 && num % 2!== 0) {\n      result.push(num)\n    }\n  })\n  return result\n}\n\n/*Given a list of drawstring, where each chain consist of only digit, return a list.\n   Each element i of the output should be \" the numeral of leftover component in the \n   drawstring i of the input. \" where all the i's should be supplant by the act \n   of curious digit in the i'th string of the input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let result = []\n  let num = 0\n  lst.forEach((str) => {\n    num = parseInt(str, 10)\n    if (num % 2 === 0 && num % 2 === 1) {\n      result.push(num)\n    }\n  })\n  return result\n}\n\n/*Given a list of drawstring, where each chain consist of only digit, return a list.\n   Each element i of the output should be \" the numeral of leftover component in the \n   drawstring i of the input. \" where all the i's should be supplant by the act \n   of curious digit in the i'th string of the input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let result = []\n  let num = 0\n  lst.forEach((str) => {\n    num = parseInt(str, 10)\n    if (num % 2 === 1 && num % 2 === 1) {\n      result.push(num)\n    }\n  })\n  return result\n}\n\n/*Given a list of drawstring, where each chain consist of only digit, return a list.\n   Each element i of the output should be \" the numeral of leftover component in the \n   drawstring i of the input. \" where all the i's should be supplant by the act \n   of curious digit in the i'th string of the input.\n\n  >>> oddEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenCount = (lst) => {\n  let result = []\n  let num = 0\n  lst.forEach((str) => {\n    num = parseInt(str, 10)\n    if (num % 2 === 1 && num % 2 === 1 && num % 2 === 1) {\n      result.push(num)\n    }\n  })\n  return result\n}\n\n/*Given a list of drawstring, where each chain consist of only digit, return a list.\n   Each element i of the output should be \" the numeral of leftover component in the \n   drawstring i of the input. \" where all the i's should be supplant by the act \n   of curious digit in the i'th string of the input.\n\n  >>> oddEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenEvenCount = (lst) => {\n  let result = []\n  let num = 0\n  lst.forEach((str) => {\n    num = parseInt(str, 10)\n    if (num % 2 === 1 && num % 2 === 1 && num % 2 === 1) {\n      result.push(num)\n    }\n  })\n  return result\n}\n\n/*Given a list of drawstring, where each chain consist of only digit, return a list.\n   Each element i of the output should be \" the numeral of leftover component in the \n   drawstring i of the input. \" where all the i's should be supplant by the act \n   of curious digit in the i'th string of the input.\n\n  >>> oddEvenEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]"}
{"task_id": "JavaScript/114", "prompt": "/*\n  give an array of integer nums, witness the minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give an array of integer nums, witness the minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSubArray = [];\n  nums.forEach((num) => {\n    if (num > 0) {\n      sum += num;\n      minSubArray.push(num);\n    }\n  });\n  minSubArray.forEach((num) => {\n    if (sum < num) {\n      sum = num;\n    }\n  });\n  return sum;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted.\n  Example\n  sortedArray([2, 3, 4, 1, 2, 4]) → true\n  sortedArray([-1, -2, -3]) → false\n  */\nconst sortedArray = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted in ascending order.\n  Example\n  sortedArrayAscending([2, 3, 4, 1, 2, 4]) → true\n  sortedArrayAscending([-1, -2, -3]) → false\n  */\nconst sortedArrayAscending = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted in descending order.\n  Example\n  sortedArrayDescending([2, 3, 4, 1, 2, 4]) → true\n  sortedArrayDescending([-1, -2, -3]) → false\n  */\nconst sortedArrayDescending = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted in ascending order and in descending order.\n  Example\n  sortedArrayAscendingDescending([2, 3, 4, 1, 2, 4]) → true\n  sortedArrayAscendingDescending([-1, -2, -3]) → false\n  */\nconst sortedArrayAscendingDescending = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted in ascending order and in descending order.\n  Example\n  sortedArrayDescendingAscending([2, 3, 4, 1, 2, 4]) → true\n  sortedArrayDescendingAscending([-1, -2, -3]) → false\n  */\nconst sortedArrayDescendingAscending = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted in ascending order and in descending order.\n  Example\n  sortedArrayAscendingDescendingAscending([2, 3, 4, 1, 2, 4]) → true\n  sortedArrayAscendingDescendingAscending([-1, -2, -3]) → false\n  */\nconst sortedArrayAscendingDescendingAscending = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted in ascending order and in descending order.\n  Example\n  sortedArrayDescendingAscendingDescending([2, 3, 4, 1, 2, 4]) → true\n  sortedArrayDescendingAscendingDescending([-1, -2, -3]) → false\n  */\nconst sortedArrayDescendingAscendingDescending = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted in ascending order and in descending order.\n  Example\n  sortedArrayAscendingDescendingDescendingAscending([2, 3, 4, 1, 2, 4]) → true\n  sortedArrayAscendingDescendingDescendingAscending([-1, -2, -3]) → false\n  */\nconst sortedArrayAscendingDescendingDescendingAscending = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted in ascending order and in descending order.\n  Example\n  sortedArrayDescendingAscendingDescendingAscending([2, 3, 4, 1, 2, 4]) → true\n  sortedArrayDescendingAscendingDescendingAscending([-1, -2, -3]) → false\n  */\nconst sortedArrayDescendingAscendingDescendingDescending = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted in ascending order and in descending order.\n  Example\n  sortedArrayAscendingDescendingDescendingAscending([2, 3, 4, 1, 2, 4]) → true\n  sortedArrayAscendingDescendingDescendingAscending([-1, -2, -3]) → false\n  */\nconst sortedArrayDescendingAscendingDescendingDescendingAscending = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of integers, return true if and only if the array is sorted in ascending order and in descending order.\n  Example\n  sortedArrayDescendingAscendingDescendingDescendingAscending([2, 3, 4, 1, 2, 4]) → true\n  sortedArrayDescendingAscendingDescendingDescendingAscending([-1, -2, -3]) → false\n  */\nconst sortedArrayDescendingAscendingDescendingDescendingDescendingAscending = (nums) => {\n  let sortedArray = true;\n  nums.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are give a rectangular grid of well. Each course exemplify a individual well, \n   and each 1 in a row represents a individual whole of water system. \n   Each well has a comparable bucket that can be use to press out urine from it, \n   and all buckets own the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are give a rectangular grid of well. Each course exemplify a individual well, \n   and each 1 in a row represents a individual whole of water system. \n   Each well has a comparable bucket that can be use to press out urine from it, \n   and all buckets own the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const [rows, cols] = grid.length;\n    const [buckets, bucketCapacity] = bucketCapacity(grid, capacity);\n    const result = [];\n    for (let i = 0; i < rows; i++) {\n        const row = [];\n        for (let j = 0; j < cols; j++) {\n            if (buckets[j]) {\n                row.push(1);\n            } else {\n                row.push(0);\n            }\n        }\n        result.push(row);\n    }\n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return an array that represents the number of meter you need to lower the buckets.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * \n * Output: 6\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * \n * Output: 5\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * \n * Output: 0\n * \n * Constraints:\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst bucketCapacity = (grid, capacity) => {\n    const [rows, cols] = grid.length;\n    const bucketCapacity = [];\n    for (let i = 0; i < rows; i++) {\n        const row = [];\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1) {\n                row.push(capacity);\n            } else {\n                row.push(0);\n            }\n        }\n        bucketCapacity.push(row);\n    }\n    return bucketCapacity;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return an array that represents the number of meter you need to lower the buckets.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * \n * Output: 6\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * \n * Output: 5\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * \n * Output: 0\n * \n * Constraints:\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst bucketCapacity = (grid, capacity) => {\n    const [rows, cols] = grid.length;\n    const bucketCapacity = [];\n    for (let i = 0; i < rows; i++) {\n        const row = [];\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1) {\n                row.push(capacity);\n            } else {\n                row.push(0);\n            }\n        }\n        bucketCapacity.push(row);\n    }\n    return bucketCapacity;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return an array that represents the number of meter you need to lower the buckets.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * \n * Output: 6\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * \n * Output: 5\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * \n * Output: 0\n * \n * Constraints:\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst bucketCapacity = (grid, capacity) => {\n    const [rows, cols] = grid.length;\n    const bucketCapacity = [];\n    for (let i = 0; i < rows; i++) {\n        const row = [];\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1) {\n                row.push(capacity);\n            } else {\n                row.push(0);\n            }\n        }\n        bucketCapacity.push(row);\n    }\n    return bucketCapacity;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return an array that represents the number of meter you need to lower the buckets.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * \n * Output: 6\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * \n * Output: 5\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * \n * Output: 0\n * \n * Constraints:\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst bucketCapacity = (grid, capacity) => {\n    const [rows, cols] = grid.length;\n    const bucketCapacity = [];\n    for (let i = 0; i < rows; i++) {\n        const row = [];\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1) {\n                row.push(capacity);\n            } else {\n                row.push(0);\n            }\n        }\n        bucketCapacity.push(row);\n    }\n    return bucketCapacity;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return an array that represents the number of meter you need to lower the buckets.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * \n * Output: 6\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * \n * Output: 5\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * \n * Output: 0\n * \n * Constraints:\n * 1 <= grid.length <= 10^2\n * 1 <= "}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you suffer to sort an array of non - minus integer harmonize to \n   number of ones in their binary representation in ascend orderliness. \n   For like number of one, sort establish on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you suffer to sort an array of non - minus integer harmonize to \n   number of ones in their binary representation in ascend orderliness. \n   For like number of one, sort establish on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let arr1 = arr.sort((a, b) => a - b);\n  let arr2 = arr1.map((v, i) => v + 1);\n  return arr2;\n};\n\n// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // "}
{"task_id": "JavaScript/117", "prompt": "/*Given a chain s and a natural issue n, you have been tax to implement \n   a routine that fall a list of all words from string s that control precisely \n   n consonants, in order these word look in the drawstring s.\n   If the bowed stringed instrument s is empty then the routine should return an empty list.\n   bill: you may simulate the input bowed stringed instrument contains only letters and outer space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a chain s and a natural issue n, you have been tax to implement \n   a routine that fall a list of all words from string s that control precisely \n   n consonants, in order these word look in the drawstring s.\n   If the bowed stringed instrument s is empty then the routine should return an empty list.\n   bill: you may simulate the input bowed stringed instrument contains only letters and outer space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c"}
{"task_id": "JavaScript/118", "prompt": "/*You are give a word. Your task is to recover the close vowel that stands between \n   two consonant from the right side of the word (case sensible). \n  \n   Vowels in the beginning and end doesn't reckon. fall empty drawstring if you didn't \n   detect any vowel met the above condition. \n\n   You may assume that the give chain contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are give a word. Your task is to recover the close vowel that stands between \n   two consonant from the right side of the word (case sensible). \n  \n   Vowels in the beginning and end doesn't reckon. fall empty drawstring if you didn't \n   detect any vowel met the above condition. \n\n   You may assume that the give chain contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsCount2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsCount3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsCount4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsCount5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsCount6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsCount7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsCount8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsCount9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsCount10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsCount11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsCount12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsCount13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsCount14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsCount15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsCount16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsCount17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsCount18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsCount19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsCount20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsCount21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsCount22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsCount23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsCount24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsCount25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsCount26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsCount27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsCount28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsCount29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsCount30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsCount31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsCount32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsCount33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsCount34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsCount35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsCount36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsCount37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsCount38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsCount39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsCount40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsCount41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsCount42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsCount43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsCount44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsCount45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsCount46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsCount47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsCount48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsCount49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsCount50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsCount51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsCount52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsCount53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsCount54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsCount55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsCount56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsCount57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsCount58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsCount59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsCount60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsCount61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsCount62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsCount63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsCount64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsCount65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsCount66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsCount67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsCount68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsCount69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsCount70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsCount71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsCount72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsCount73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsCount74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsCount75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsCount76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsCount77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsCount78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsCount79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsCount80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsCount81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsCount82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsCount83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsCount84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsCount85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsCount86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsCount87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsCount88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsCount89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsCount90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsCount91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsCount92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsCount93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsCount94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsCount95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsCount96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsCount97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsCount98 = 0;\n  let vowelsIndex99 = 0;\n  let "}
{"task_id": "JavaScript/119", "prompt": "/* You are give a list of two strings, both string dwell of receptive \n   parentheses' (' or cheeseparing parentheses')' only. \n   Your job is to match if it be potential to concatenate the two string in\n   some holy order, that the leave bowed stringed instrument will cost beneficial. \n   A string S is considered to exist beneficial if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You are give a list of two strings, both string dwell of receptive \n   parentheses' (' or cheeseparing parentheses')' only. \n   Your job is to match if it be potential to concatenate the two string in\n   some holy order, that the leave bowed stringed instrument will cost beneficial. \n   A string S is considered to exist beneficial if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    if (str.indexOf('(') >= 0 && str.indexOf(')') >= 0) {\n      let paren = str.indexOf('(');\n      let close = str.indexOf(')');\n      let left = str.substring(0, paren);\n      let right = str.substring(paren + 1, close);\n      let res = matchParens(left) + matchParens(right);\n      if (res == 'Yes') {\n        res.push('Yes');\n      }\n    }\n  }\n  return res.join('');\n};\n\n/* \n  You are given a string S of length N. \n  You are given a string T of length N. \n  You are given a string R of length N. \n  You are given a string P of length N. \n  You are given a string Q of length N. \n  You are given a string RQ of length N. \n  You are given a string RQQ of length N. \n  You are given a string RQQ of length N. \n  You are given a string RQQQ of length N. \n  You are given a string RQQQQ of length N. \n  You are given a string RQQQQQ of length N. \n  You are given a string RQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string RQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ of length N. \n  You are given a string}
{"task_id": "JavaScript/120", "prompt": "/*\n  give an array arr of integer and a incontrovertible integer k, return a sorted list \n   of distance k with the maximum k phone number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give an array arr of integer and a incontrovertible integer k, return a sorted list \n   of distance k with the maximum k phone number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const res = [];\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      res.push(max);\n    }\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/maximum-subarray/discuss/78897/Java-Solution-for-Maximum-Subarray-Problem\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar maxSubArray = function(head, k) {\n  let res = null;\n  let curr = head;\n  let count = 0;\n  while (curr) {\n    if (count >= k) {\n      res = new ListNode(curr.val);\n      res.next = curr;\n      curr = res.next;\n      count = 0;\n    }\n    count++;\n    curr = curr.next;\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/maximum-subarray-with-sum/discuss/78897/Java-Solution-for-Maximum-Subarray-Problem\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar maxSubArrayWithSum = function(head, k) {\n  let res = null;\n  let curr = head;\n  let count = 0;\n  while (curr) {\n    if (count >= k) {\n      res = new ListNode(curr.val);\n      res.next = curr;\n      curr = res.next;\n      count = 0;\n    }\n    count++;\n    curr = curr.next;\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/maximum-subarray-with-sum-ii/discuss/78897/Java-Solution-for-Maximum-Subarray-Problem\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar maxSubArrayWithSumII = function(head, k) {\n  let res = null;\n  let curr = head;\n  let count = 0;\n  while (curr) {\n    if (count >= k) {\n      res = new ListNode(curr.val);\n      res.next = curr;\n      curr = res.next;\n      count = 0;\n    }\n    count++;\n    curr = curr.next;\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/maximum-subarray-with-sum-iii/discuss/78897/Java-Solution-for-Maximum-Subarray-Problem\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar maxSubArrayWithSumIII = function(head, k) {\n  let res = null;\n  let curr = head;\n  let count = 0;\n  while (curr) {\n    if (count >= k) {\n      res = new ListNode(curr.val);\n      res.next = curr;\n      curr = res.next;\n      count = 0;\n    }\n    count++;\n    curr = curr.next;\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/maximum-subarray-with-sum-iv/discuss/78897/Java-Solution-for-Maximum-Subarray-Problem\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar maxSubArrayWithSumIV = function(head, k) {\n  let res = null;\n  let curr = head;\n  let count = 0;\n  while (curr) {\n    if (count >= k) {\n      res = new ListNode(curr.val);\n      res.next = curr;\n      curr = res.next;\n      count = 0;\n    }\n    count++;\n    curr = curr.next;\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/maximum-subarray-with-sum-v/discuss/78897/Java-Solution-for-Maximum-Subarray-Problem\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar maxSubArrayWithSumV = function(head, k) {\n  let res = null;\n  let curr = head;\n  let count = 0;\n  while (curr) {\n    if (count >= k) {\n      res = new ListNode(curr.val);\n      res.next = curr;\n      curr = res.next;\n      count = 0;\n    }\n    count++;\n    curr = curr.next;\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/maximum-subarray-with-sum-vi/discuss/78897/Java-Solution-for-Maximum-Subarray-Problem\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar maxSubArrayWithSumVI = function(head, k) {\n  let res = null;\n  let curr = head;\n  let count = 0;\n  while (curr) {\n    if (count >= k) {\n      res = new ListNode(curr.val);\n      res.next = curr;\n      curr = res.next;\n      count = 0;\n    }\n    count++;\n    curr = curr.next;\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/maximum-subarray-with-sum-vii/discuss/78897/Java-Solution-for-Maximum-Subarray-Problem\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar maxSubArrayWithSumVII = function(head, k) {\n  let res = null;\n  let curr = head;\n  let count = 0;\n  while (curr) {\n    if (count >= k) {\n      res = new ListNode(curr.val);\n      res.next = curr;\n      curr = res.next;\n      count = 0;\n    }\n    count++;\n    curr = curr.next;\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/maximum-subarray-with-sum-viii/discuss/78897/Java-Solution-for-Maximum-Subarray-Problem\n/**\n * Definition for "}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integer, return the union of all of the odd chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integer, return the union of all of the odd chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],3:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],4:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],5:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],6:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],7:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],8:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],9:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],10:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],11:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],12:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],13:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n},{}],14:[function(require,module,exports){\n/*Given a non - empty list of integer, return the union of all of the even chemical element that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      res = res + lst[i]\n    }\n  }\n  return res\n}\n\nmodule.exports = solution\n\n"}
{"task_id": "JavaScript/122", "prompt": "/*\n  give a non - empty array of integer arr and an integer k, return\n   the kernel of the elements with at most two digits from the inaugural k element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a non - empty array of integer arr and an integer k, return\n   the kernel of the elements with at most two digits from the inaugural k element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum >= k) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers, return its maximum sum.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 10\n  */\nconst maxSum = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers, return its minimum sum.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 5\n  */\nconst minSum = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers, return its median of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 5\n  */\nconst median = (arr) => {\n  let mid = 0;\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      mid = sum / 2;\n    } else {\n      mid = (sum + mid) / 2;\n    }\n    count++;\n  }\n  return mid;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst mode = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOf = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOfElements = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOfElementsOf = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOfElementsOfElements = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOfElementsOfElementsOf = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOfElementsOfElementsOfElements = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOfElementsOfElementsOfElementsOf = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOfElementsOfElementsOfElementsOfElements = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOfElementsOfElementsOfElementsOfElementsOf = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOfElementsOfElementsOfElementsOfElementsOfElements = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its mode of its elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7,8,9]\n      Output: 3\n  */\nconst modeOfElementsOfElementsOfElementsOfElementsOfElementsOf = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (count % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n  }\n  return sum / count;\n};\n\n/*\n  "}
{"task_id": "JavaScript/123", "prompt": "/*\n  give a positive integer n, return a screen list that have the odd number in collatz sequence. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a sequence define \n   as comply: begin with any incontrovertible integer n. Then each condition is obtained from the \n   previous condition as keep up: if the former term embody even, the adjacent term is one half of \n   the previous term. If the former term embody leftover, the next term is 3 times the former \n   condition plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in increase ordering.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a positive integer n, return a screen list that have the odd number in collatz sequence. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a sequence define \n   as comply: begin with any incontrovertible integer n. Then each condition is obtained from the \n   previous condition as keep up: if the former term embody even, the adjacent term is one half of \n   the previous term. If the former term embody leftover, the next term is 3 times the former \n   condition plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in increase ordering.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a screen list that have the even number in collatz sequence. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a sequence define \n   as comply: begin with any incontrovertible integer n. Then each condition is obtained from the \n   previous condition as keep up: if the former term embody even, the adjacent term is one half of \n   the previous term. If the former term embody leftover, the next term is 3 times the former \n   condition plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in decreasing ordering.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] >= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a screen list that have the prime number in collatz sequence. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a sequence define \n   as comply: begin with any incontrovertible integer n. Then each condition is obtained from the \n   previous condition as keep up: if the former term embody even, the adjacent term is one half of \n   the previous term. If the former term embody leftover, the next term is 3 times the former \n   condition plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in decreasing ordering.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 31, 61, 127, 255, 511, 1023 ]. \n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a screen list that have the prime number in collatz sequence. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a sequence define \n   as comply: begin with any incontrovertible integer n. Then each condition is obtained from the \n   previous condition as keep up: if the former term embody even, the adjacent term is one half of \n   the previous term. If the former term embody leftover, the next term is 3 times the former \n   condition plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in decreasing ordering.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 31, 61, 127, 255, 511, 1023 ]. \n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] >= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a screen list that have the prime number in collatz sequence. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a sequence define \n   as comply: begin with any incontrovertible integer n. Then each condition is obtained from the \n   previous condition as keep up: if the former term embody even, the adjacent term is one half of \n   the previous term. If the former term embody leftover, the next term is 3 times the former \n   condition plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in decreasing ordering.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 31, 61, 127, 255, 511, 1023 ]. \n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a screen list that have the prime number in collatz sequence. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a sequence define \n   as comply: begin with any incontrovertible integer n. Then each condition is obtained from the \n   previous condition as keep up: if the former term embody even, the adjacent term is one half of \n   the previous term. If the former term embody leftover, the next term is 3 times the former \n   condition plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. return list classify in decreasing ordering.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 31, 61, 127, 255, 511, 1023 "}
{"task_id": "JavaScript/124", "prompt": "/*You suffer to write a affair which validate a grant date chain and \n   returns true if the date is valid otherwise false. \n   The date is valid if all of the following rule be quenched: \n   1. The date drawstring is not empty. \n   2. The numeral of days is not less than 1 or higher than 31 days for calendar month 1,3,5,7,8,10,12. And the numeral of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the phone number of days is not less than 1 or higher than 29 for the month 2. \n   3. The calendar month should not constitute less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You suffer to write a affair which validate a grant date chain and \n   returns true if the date is valid otherwise false. \n   The date is valid if all of the following rule be quenched: \n   1. The date drawstring is not empty. \n   2. The numeral of days is not less than 1 or higher than 31 days for calendar month 1,3,5,7,8,10,12. And the numeral of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the phone number of days is not less than 1 or higher than 29 for the month 2. \n   3. The calendar month should not constitute less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateString = date.toString();\n  let dateArray = dateString.split('-');\n  let monthArray = dateArray[0].split('-');\n  let dayArray = dateArray[1].split('-');\n  let yearArray = dateArray[2].split('-');\n  let monthNumber = monthArray[0];\n  let dayNumber = dayArray[0];\n  let yearNumber = yearArray[0];\n  let monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  let dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  let date = new Date(Date.UTC(yearNumber, monthNumber, dayNumber));\n  let isValid = true;\n  if (monthNumber < 1 || monthNumber > 12) {\n    isValid = false;\n  }\n  if (dayNumber < 1 || dayNumber > 31) {\n    isValid = false;\n  }\n  if (yearNumber < 1 || yearNumber > 9999) {\n    isValid = false;\n  }\n  if (isValid) {\n    if (monthNumber === 1 && dayNumber === 1 && yearNumber === yearArray[0]) {\n      isValid = true;\n    }\n    if (monthNumber === 2 && dayNumber === 1 && yearNumber === yearArray[1]) {\n      isValid = true;\n    }\n    if (monthNumber === 3 && dayNumber === 1 && yearNumber === yearArray[2]) {\n      isValid = true;\n    }\n    if (monthNumber === 4 && dayNumber === 1 && yearNumber === yearArray[3]) {\n      isValid = true;\n    }\n    if (monthNumber === 5 && dayNumber === 1 && yearNumber === yearArray[4]) {\n      isValid = true;\n    }\n    if (monthNumber === 6 && dayNumber === 1 && yearNumber === yearArray[5]) {\n      isValid = true;\n    }\n    if (monthNumber === 7 && dayNumber === 1 && yearNumber === yearArray[6]) {\n      isValid = true;\n    }\n    if (monthNumber === 8 && dayNumber === 1 && yearNumber === yearArray[7]) {\n      isValid = true;\n    }\n    if (monthNumber === 9 && dayNumber === 1 && yearNumber === yearArray[8]) {\n      isValid = true;\n    }\n    if (monthNumber === 10 && dayNumber === 1 && yearNumber === yearArray[9]) {\n      isValid = true;\n    }\n    if (monthNumber === 11 && dayNumber === 1 && yearNumber === yearArray[10]) {\n      isValid = true;\n    }\n    if (monthNumber === 12 && dayNumber === 1 && yearNumber === yearArray[11]) {\n      isValid = true;\n    }\n    if (monthNumber === 1 && dayNumber === 1 && yearNumber === yearArray[12]) {\n      isValid = true;\n    }\n    if (monthNumber === 2 && dayNumber === 1 && yearNumber === yearArray[13]) {\n      isValid = true;\n    }\n    if (monthNumber === 3 && dayNumber === 1 && yearNumber === yearArray[14]) {\n      isValid = true;\n    }\n    if (monthNumber === 4 && dayNumber === 1 && yearNumber === yearArray[15]) {\n      isValid = true;\n    }\n    if (monthNumber === 5 && dayNumber === 1 && yearNumber === yearArray[16]) {\n      isValid = true;\n    }\n    if (monthNumber === 6 && dayNumber === 1 && yearNumber === yearArray[17]) {\n      isValid = true;\n    }\n    if (monthNumber === 7 && dayNumber === 1 && yearNumber === yearArray[18]) {\n      isValid = true;\n    }\n    if (monthNumber === 8 && dayNumber === 1 && yearNumber === yearArray[19]) {\n      isValid = true;\n    }\n    if (monthNumber === 9 && dayNumber === 1 && yearNumber === yearArray[20]) {\n      isValid = true;\n    }\n    if (monthNumber === 10 && dayNumber === 1 && yearNumber === yearArray[21]) {\n      isValid = true;\n    }\n    if (monthNumber === 11 && dayNumber === 1 && yearNumber === yearArray[22]) {\n      isValid = true;\n    }\n    if (monthNumber === 12 && dayNumber === 1 && yearNumber === yearArray[23]) {\n      isValid = true;\n    }\n    if (monthNumber === 1 && dayNumber === 1 && yearNumber === yearArray[24]) {\n      isValid = true;\n    }\n    if (monthNumber === 2 && dayNumber === 1 && yearNumber === yearArray[25]) {\n      isValid = true;\n    }\n    if (monthNumber === 3 && dayNumber === 1 && yearNumber === yearArray[26]) {\n      isValid = true;\n    }\n    if (monthNumber === 4 && dayNumber === 1 && yearNumber === yearArray[27]) {\n      isValid = true;\n    }\n    if (monthNumber === 5 && dayNumber === 1 && yearNumber === yearArray[28]) {\n      isValid = true;\n    }\n    if (monthNumber === 6 && dayNumber === 1 && yearNumber === yearArray[29]) {\n      isValid = true;\n    }\n    if (monthNumber === 7 && dayNumber === 1 && yearNumber === yearArray[30]) {\n      isValid = true;\n    }\n    if (monthNumber === 8 && dayNumber === 1 && yearNumber === yearArray[31]) {\n      isValid = true;\n    }\n    if (monthNumber === 9 && dayNumber === 1 && yearNumber === yearArray[32]) {\n      isValid = true;\n    }\n    if (monthNumber === 10 && dayNumber === 1 && yearNumber === yearArray[33]) {\n      isValid = true;\n    }\n    if (monthNumber === 11 && dayNumber === 1 && yearNumber === yearArray[34]) {\n      isValid = true;\n    }\n    if (monthNumber === 12 && dayNumber === 1 && yearNumber === yearArray[35]) {\n      isValid = true;\n    }\n    if (monthNumber === 1 && dayNumber === 1 && yearNumber === yearArray[36]) {\n      isValid = true;\n    }\n    if (monthNumber === 2 && dayNumber === 1 && yearNumber === yearArray[37]) {\n      isValid = true;\n    }\n    if (monthNumber === 3 && dayNumber === 1 && yearNumber === yearArray[38]) {\n      isValid = true;\n    }\n    if (monthNumber === 4 && dayNumber === 1 && yearNumber === yearArray[39]) {\n      isValid = true;\n    }\n    if (monthNumber === 5 && dayNumber === 1 && yearNumber === yearArray[40]) {\n      isValid = true;\n    }\n    if (monthNumber === 6 && dayNumber === 1 && yearNumber === yearArray[41]) {\n      isValid = true;\n    }\n    if (monthNumber === 7 && dayNumber === 1 && yearNumber === yearArray[42]) {\n      isValid = true;\n    }\n    if (monthNumber === 8 && dayNumber === 1 && yearNumber === yearArray[43]) {\n      isValid = true;\n    }\n    if (monthNumber === 9 && dayNumber === 1 && yearNumber === yearArray[44]) {\n      isValid = true;\n    }\n    if (monthNumber === 10 && dayNumber === 1 && yearNumber === yearArray[45]) {\n      isValid = true;\n"}
{"task_id": "JavaScript/125", "prompt": "/* give a string of parole, return a list of quarrel separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no comma exist you should return the act of lower - character letter with curious order in the \n   rudiment, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* give a string of parole, return a list of quarrel separate on whitespace, if no whitespaces exists in the textbook you \n   should split on commas',' if no comma exist you should return the act of lower - character letter with curious order in the \n   rudiment, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ');\n  return words.map((word) => {\n    const letter = word.toLowerCase();\n    if (letter.length === 1) {\n      return letter;\n    }\n    return `${letter}${letter.toLowerCase()}`;\n  });\n};\n\n/**\n * Given a string, return the first word in the string that starts with a vowel.\n * If the string does not start with a vowel, return an empty string.\n * If the string does not contain a vowel, return an empty string.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, return the first word that starts with a vowel.\n * If the string contains more than one vowel, "}
{"task_id": "JavaScript/126", "prompt": "/* give a list of numbers, return whether or not they are screen \n   in ascend decree. If list has more than 1 duplicate of the like \n   number, return false. simulate no minus number and only integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* give a list of numbers, return whether or not they are screen \n   in ascend decree. If list has more than 1 duplicate of the like \n   number, return false. simulate no minus number and only integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let isSorted = true\n  for (let i = 0; i < len; i++) {\n    const num = lst[i]\n    if (num === num - 1) {\n      isSorted = false\n      break\n    }\n  }\n  return isSorted\n}\n\n/**\n * Given a sorted array of numbers, return an array of the same size \n * that contains the same numbers in ascending order.\n * \n * Example\n * \n * isSorted([5, 1, 3, 2]) ➞ [1, 2, 3, 5]\n * isSorted([5, 1, 3, 2, 4]) ➞ [1, 2, 3, 4, 5]\n * isSorted([5, 1, 3, 2, 4, 5]) ➞ [1, 2, 3, 4, 5]\n * isSorted([5, 1, 3, 2, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8]) ➞ [1, 2, 3, 4, 5, 6, 7, 8]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted([5, 1, 3, 2, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n * isSorted(["}
{"task_id": "JavaScript/127", "prompt": "/*You are give two intervals, \n   where each time interval be a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are give two intervals, \n   where each time interval be a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let start2 = interval2[0];\n  let end1 = interval1[1];\n  let end2 = interval2[1];\n  let start3 = interval1[2];\n  let end3 = interval2[2];\n  let start4 = interval1[3];\n  let end4 = interval2[3];\n  let start5 = interval1[4];\n  let end5 = interval2[4];\n  let start6 = interval1[5];\n  let end6 = interval2[5];\n  let start7 = interval1[6];\n  let end7 = interval2[6];\n  let start8 = interval1[7];\n  let end8 = interval2[7];\n  let start9 = interval1[8];\n  let end9 = interval2[8];\n  let start10 = interval1[9];\n  let end10 = interval2[9];\n  let start11 = interval1[10];\n  let end11 = interval2[10];\n  let start12 = interval1[11];\n  let end12 = interval2[11];\n  let start13 = interval1[12];\n  let end13 = interval2[12];\n  let start14 = interval1[13];\n  let end14 = interval2[13];\n  let start15 = interval1[14];\n  let end15 = interval2[14];\n  let start16 = interval1[15];\n  let end16 = interval2[15];\n  let start17 = interval1[16];\n  let end17 = interval2[16];\n  let start18 = interval1[17];\n  let end18 = interval2[17];\n  let start19 = interval1[18];\n  let end19 = interval2[18];\n  let start20 = interval1[19];\n  let end20 = interval2[19];\n  let start21 = interval1[20];\n  let end21 = interval2[20];\n  let start22 = interval1[21];\n  let end22 = interval2[21];\n  let start23 = interval1[22];\n  let end23 = interval2[22];\n  let start24 = interval1[23];\n  let end24 = interval2[23];\n  let start25 = interval1[24];\n  let end25 = interval2[24];\n  let start26 = interval1[25];\n  let end26 = interval2[25];\n  let start27 = interval1[26];\n  let end27 = interval2[26];\n  let start28 = interval1[27];\n  let end28 = interval2[27];\n  let start29 = interval1[28];\n  let end29 = interval2[28];\n  let start30 = interval1[29];\n  let end30 = interval2[29];\n  let start31 = interval1[30];\n  let end31 = interval2[30];\n  let start32 = interval1[31];\n  let end32 = interval2[31];\n  let start33 = interval1[32];\n  let end33 = interval2[32];\n  let start34 = interval1[33];\n  let end34 = interval2[33];\n  let start35 = interval1[34];\n  let end35 = interval2[34];\n  let start36 = interval1[35];\n  let end36 = interval2[35];\n  let start37 = interval1[36];\n  let end37 = interval2[36];\n  let start38 = interval1[37];\n  let end38 = interval2[37];\n  let start39 = interval1[38];\n  let end39 = interval2[38];\n  let start40 = interval1[39];\n  let end40 = interval2[39];\n  let start41 = interval1[40];\n  let end41 = interval2[40];\n  let start42 = interval1[41];\n  let end42 = interval2[41];\n  let start43 = interval1[42];\n  let end43 = interval2[42];\n  let start44 = interval1[43];\n  let end44 = interval2[43];\n  let start45 = interval1[44];\n  let end45 = interval2[44];\n  let start46 = interval1[45];\n  let end46 = interval2[45];\n  let start47 = interval1[46];\n  let end47 = interval2[46];\n  let start48 = interval1[47];\n  let end48 = interval2[47];\n  let start49 = interval1[48];\n  let end49 = interval2[48];\n  let start50 = interval1[49];\n  let end50 = interval2[49];\n  let start51 = interval1[50];\n  let end51 = interval2[50];\n  let start52 = interval1[51];\n  let end52 = interval2[51];\n  let start53 = interval1[52];\n  let end53 = interval2[52];\n  let start54 = interval1[53];\n  let end54 = interval2[53];\n  let start55 = interval1[54];\n  let end55 = interval2[54];\n  let start56 = interval1[55];\n  let end56 = interval2[55];\n  let start57 = interval1[56];\n  let end57 = interval2[56];\n  let start58 = interval1[57];\n  let end58 = interval2[57];\n  let start59 = interval1[58];\n  let end59 = interval2[58];\n  let start60 = interval1[59];\n  let end60 = interval2[59];\n  let start61 = interval1[60];\n  let end61 = interval2[60];\n  let start62 = interval1[61];\n  let end62 = interval2[61];\n  let start63 = interval1[62];\n  let end63 = interval2[62];\n  let start64 = interval1[63];\n  let end64 = interval2[63];\n  let start65 = interval1[64];\n  let end65 = interval2[64];\n  let start66 = interval1[65];\n  let end66 = interval2[65];\n  let start67 = interval1[66];\n  let end67 = interval2[66];\n  let start68 = interval1[67];\n  let end68 = interval2[67];\n  let start69 = interval1[68];\n  let end69 = interval2[68];\n  let start70 = interval1[69];\n  let end70 = interval2[69];\n  let start71 = interval1[70];\n  let end71 = interval2[70];\n  let start72 = interval1[71];\n  let end72 = interval2[71];\n  let start73 = interval1[72];\n  let end73 = interval2[72];\n  let start74 = interval1[73];\n  let end74 = interval2[73];\n  let start75 = interval1[74];\n  let end75 = interval2[74];\n  let start76 = interval1[75];"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are give an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are give an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  let signs = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = 1\n    } else if (arr[i] < 0) {\n      sign = -1\n    } else {\n      sign = 0\n    }\n    signs.push(sign)\n  }\n  return signs\n}\n\n/*\n  You are given an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMulti = (arr) => {\n  let sign = 1\n  let signs = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = 1\n    } else if (arr[i] < 0) {\n      sign = -1\n    } else {\n      sign = 0\n    }\n    signs.push(sign * arr[i])\n  }\n  return signs\n}\n\n/*\n  You are given an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMulti = (arr) => {\n  let sign = 1\n  let signs = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = 1\n    } else if (arr[i] < 0) {\n      sign = -1\n    } else {\n      sign = 0\n    }\n    signs.push(sign * arr[i] * arr[i])\n  }\n  return signs\n}\n\n/*\n  You are given an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMulti = (arr) => {\n  let sign = 1\n  let signs = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = 1\n    } else if (arr[i] < 0) {\n      sign = -1\n    } else {\n      sign = 0\n    }\n    signs.push(sign * arr[i] * arr[i] * arr[i])\n  }\n  return signs\n}\n\n/*\n  You are given an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMultiMulti = (arr) => {\n  let sign = 1\n  let signs = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = 1\n    } else if (arr[i] < 0) {\n      sign = -1\n    } else {\n      sign = 0\n    }\n    signs.push(sign * arr[i] * arr[i] * arr[i] * arr[i])\n  }\n  return signs\n}\n\n/*\n  You are given an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMultiMulti = (arr) => {\n  let sign = 1\n  let signs = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = 1\n    } else if (arr[i] < 0) {\n      sign = -1\n    } else {\n      sign = 0\n    }\n    signs.push(sign * arr[i] * arr[i] * arr[i] * arr[i] * arr[i])\n  }\n  return signs\n}\n\n/*\n  You are given an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMultiMultiMulti = (arr) => {\n  let sign = 1\n  let signs = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = 1\n    } else if (arr[i] < 0) {\n      sign = -1\n    } else {\n      sign = 0\n    }\n    signs.push(sign * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i])\n  }\n  return signs\n}\n\n/*\n  You are given an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMultiMultiMultiMulti = (arr) => {\n  let sign = 1\n  let signs = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = 1\n    } else if (arr[i] < 0) {\n      sign = -1\n    } else {\n      sign = 0\n    }\n    signs.push(sign * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i])\n  }\n  return signs\n}\n\n/*\n  You are given an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   model:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMultiMultiMultiMultiMulti = (arr) => {\n  let sign = 1\n  let signs = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = 1\n    } else if (arr[i] < 0) {\n      sign = -1\n    } else {\n      sign = 0\n    }\n    signs.push(sign * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i])\n  }\n  return signs\n}\n\n/*\n  You are given an array arr of integer and you necessitate to return\n   union of magnitudes of integer multiply by product of all signs \n   of each numeral"}
{"task_id": "JavaScript/129", "prompt": "/*\n  give a grid with N rows and N column (N > = 2) and a plus integer k, \n   each cell of the grid control a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cells of the grid.\n\n   You consume to discover the minimal way of duration k in the grid. You can begin \n   from any cell, and in each footstep you can travel to any of the neighbor cells, \n   in early words, you can survive to cell which share an edge with you current \n   cell. \n   Please notice that a way of length k entail visiting exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of length k) is consider less than a path B (of length k) if \n   after making the order tilt of the value on the cells that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other password, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is singular. \n   Return an ordered list of the value on the cell that the minimum path travel through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a grid with N rows and N column (N > = 2) and a plus integer k, \n   each cell of the grid control a value. Every integer in the range [ 1, N * N ] \n   inclusive appears exactly once on the cells of the grid.\n\n   You consume to discover the minimal way of duration k in the grid. You can begin \n   from any cell, and in each footstep you can travel to any of the neighbor cells, \n   in early words, you can survive to cell which share an edge with you current \n   cell. \n   Please notice that a way of length k entail visiting exactly k cells (not \n   inevitably discrete). \n   You CANNOT go off the grid.\n   A way A (of length k) is consider less than a path B (of length k) if \n   after making the order tilt of the value on the cells that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other password, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is singular. \n   Return an ordered list of the value on the cell that the minimum path travel through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      lst_A[j] += grid[i][j];\n      lst_B[j] += grid[i][j];\n    }\n  }\n  const lst_A_inv = lst_A.map((v, i) => lst_A[i]).sort((a, b) => a - b);\n  const lst_B_inv = lst_B.map((v, i) => lst_B[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, i) => lst_A_inv[i]).sort((a, b) => a - b);\n  const lst_B_inv_sorted = lst_B_inv_sorted.map((v, i) => lst_B_inv[i]).sort((a, b) => a - b);\n  const lst_A_inv_sorted = lst_A_inv_sorted.map((v, "}
{"task_id": "JavaScript/130", "prompt": "/*Everyone know Fibonacci sequence, it was study profoundly by mathematicians in \n   the final couple centuries. However, what citizenry don't sleep together is Tribonacci succession. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Everyone know Fibonacci sequence, it was study profoundly by mathematicians in \n   the final couple centuries. However, what citizenry don't sleep together is Tribonacci succession. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    tri(n - 1) + tri(n - 2) + tri(n + 1),\n    tri(n - 1) + tri(n - 2) + tri(n),\n    tri(n - 1) + tri(n - 2),\n    tri(n),\n  ];\n};\n\n/*\n  Given a non-negative integer number n, you have to:\n  \n  1) Return the first n + 1 numbers of the Fibonacci sequence.\n  2) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  3) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  4) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  5) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  6) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  7) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  8) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  9) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  10) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  11) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  12) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  13) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  14) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  15) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  16) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  17) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  18) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  19) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  20) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  21) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  22) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  23) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  24) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  25) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  26) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  27) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  28) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  29) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  30) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  31) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  32) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  33) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  34) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  35) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  36) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  37) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  38) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  39) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  40) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  41) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  42) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  43) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  44) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  45) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  46) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  47) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  48) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  49) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  50) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  51) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  52) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  53) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  54) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  55) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  56) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  57) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  58) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  59) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  60) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  61) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  62) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  63) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  64) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  65) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  66) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  67) Return the first n + 1 numbers of the Fibonacci sequence starting from n.\n  68) Return the first "}
{"task_id": "JavaScript/131", "prompt": "/*Given a positivist integer n, return the merchandise of the leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positivist integer n, return the merchandise of the leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let digit = 0;\n  let remainder = 0;\n  let remainder2 = 0;\n  let remainder3 = 0;\n  let remainder4 = 0;\n  let remainder5 = 0;\n  let remainder6 = 0;\n  let remainder7 = 0;\n  let remainder8 = 0;\n  let remainder9 = 0;\n  let remainder10 = 0;\n  let remainder11 = 0;\n  let remainder12 = 0;\n  let remainder13 = 0;\n  let remainder14 = 0;\n  let remainder15 = 0;\n  let remainder16 = 0;\n  let remainder17 = 0;\n  let remainder18 = 0;\n  let remainder19 = 0;\n  let remainder20 = 0;\n  let remainder21 = 0;\n  let remainder22 = 0;\n  let remainder23 = 0;\n  let remainder24 = 0;\n  let remainder25 = 0;\n  let remainder26 = 0;\n  let remainder27 = 0;\n  let remainder28 = 0;\n  let remainder29 = 0;\n  let remainder30 = 0;\n  let remainder31 = 0;\n  let remainder32 = 0;\n  let remainder33 = 0;\n  let remainder34 = 0;\n  let remainder35 = 0;\n  let remainder36 = 0;\n  let remainder37 = 0;\n  let remainder38 = 0;\n  let remainder39 = 0;\n  let remainder40 = 0;\n  let remainder41 = 0;\n  let remainder42 = 0;\n  let remainder43 = 0;\n  let remainder44 = 0;\n  let remainder45 = 0;\n  let remainder46 = 0;\n  let remainder47 = 0;\n  let remainder48 = 0;\n  let remainder49 = 0;\n  let remainder50 = 0;\n  let remainder51 = 0;\n  let remainder52 = 0;\n  let remainder53 = 0;\n  let remainder54 = 0;\n  let remainder55 = 0;\n  let remainder56 = 0;\n  let remainder57 = 0;\n  let remainder58 = 0;\n  let remainder59 = 0;\n  let remainder60 = 0;\n  let remainder61 = 0;\n  let remainder62 = 0;\n  let remainder63 = 0;\n  let remainder64 = 0;\n  let remainder65 = 0;\n  let remainder66 = 0;\n  let remainder67 = 0;\n  let remainder68 = 0;\n  let remainder69 = 0;\n  let remainder70 = 0;\n  let remainder71 = 0;\n  let remainder72 = 0;\n  let remainder73 = 0;\n  let remainder74 = 0;\n  let remainder75 = 0;\n  let remainder76 = 0;\n  let remainder77 = 0;\n  let remainder78 = 0;\n  let remainder79 = 0;\n  let remainder80 = 0;\n  let remainder81 = 0;\n  let remainder82 = 0;\n  let remainder83 = 0;\n  let remainder84 = 0;\n  let remainder85 = 0;\n  let remainder86 = 0;\n  let remainder87 = 0;\n  let remainder88 = 0;\n  let remainder89 = 0;\n  let remainder90 = 0;\n  let remainder91 = 0;\n  let remainder92 = 0;\n  let remainder93 = 0;\n  let remainder94 = 0;\n  let remainder95 = 0;\n  let remainder96 = 0;\n  let remainder97 = 0;\n  let remainder98 = 0;\n  let remainder99 = 0;\n  let remainder100 = 0;\n  let remainder101 = 0;\n  let remainder102 = 0;\n  let remainder103 = 0;\n  let remainder104 = 0;\n  let remainder105 = 0;\n  let remainder106 = 0;\n  let remainder107 = 0;\n  let remainder108 = 0;\n  let remainder109 = 0;\n  let remainder110 = 0;\n  let remainder111 = 0;\n  let remainder112 = 0;\n  let remainder113 = 0;\n  let remainder114 = 0;\n  let remainder115 = 0;\n  let remainder116 = 0;\n  let remainder117 = 0;\n  let remainder118 = 0;\n  let remainder119 = 0;\n  let remainder120 = 0;\n  let remainder121 = 0;\n  let remainder122 = 0;\n  let remainder123 = 0;\n  let remainder124 = 0;\n  let remainder125 = 0;\n  let remainder126 = 0;\n  let remainder127 = 0;\n  let remainder128 = 0;\n  let remainder129 = 0;\n  let remainder130 = 0;\n  let remainder131 = 0;\n  let remainder132 = 0;\n  let remainder133 = 0;\n  let remainder134 = 0;\n  let remainder135 = 0;\n  let remainder136 = 0;\n  let remainder137 = 0;\n  let remainder138 = 0;\n  let remainder139 = 0;\n  let remainder140 = 0;\n  let remainder141 = 0;\n  let remainder142 = 0;\n  let remainder143 = 0;\n  let remainder144 = 0;\n  let remainder145 = 0;\n  let remainder146 = 0;\n  let remainder147 = 0;\n  let remainder148 = 0;\n  let remainder149 = 0;\n  let remainder150 = 0;\n  let remainder151 = 0;\n  let remainder152 = 0;\n  let remainder153 = 0;\n  let remainder154 = 0;\n  let remainder155 = 0;\n  let remainder156 = 0;\n  let remainder157 = 0;\n  let remainder158 = 0;\n  let remainder159 = 0;\n  let remainder160 = 0;\n  let remainder161 = 0;\n  let remainder162 = 0;\n  let remainder163 = 0;\n  let remainder164 = 0;\n  let remainder165 = 0;\n  let remainder166 = 0;\n  let remainder167 = 0;\n  let remainder168 = 0;\n  let remainder169 = 0;\n  let remainder170 = 0;\n  let remainder171 = 0;\n  let remainder172 = 0;\n  let remainder173 = 0;\n  let remainder174 = 0;\n  let remainder175 = 0;\n  let remainder176 = 0;\n  let remainder177 = 0;\n  let remainder178 = 0;\n  let remainder179 = 0;\n  let remainder180 = 0;\n  let remainder181 = 0;\n  let remainder182 = 0;\n  let remainder183 = 0;\n  let remainder184 = 0;\n  let remainder185 = 0;\n  let remainder186 = 0;\n  let remainder187 = 0;\n  let remainder188 = 0;\n  let remainder189 = 0;\n  let remainder190 = 0;\n  let remainder191 = 0;\n  let remainder192 = 0;\n  let remainder193 = 0;\n  let remainder194 = 0;\n  let remainder195 = 0;\n  let remainder196 = 0;\n  let remainder197 = 0;\n  let remainder198 = 0;\n  let remainder199 = 0;\n  let remainder200 = 0;\n  let remainder201 = 0;\n  let remainder202 = 0;\n  let remainder203 = 0;\n  let remainder204 = 0;\n  let remainder205 = 0;\n  let remainder206 = 0;\n  let remainder207 = 0;\n  let remainder208 = 0;\n  let remainder209 = 0;\n  let remainder210 = 0;\n  let remainder211 = 0;\n  let remainder212 = 0;\n  let remainder213 = 0;\n  let remainder214 = 0;\n  let remainder215 = 0;\n  let remainder216 = 0;\n  let remainder217 = 0;\n  let remainder218 = 0;\n  let remainder219 = 0;\n  let remainder220 = 0;\n  let remainder221 = 0;\n  let remainder222 = 0;\n  let remainder223 = 0;\n  let remainder224 = 0;\n  let remainder225 = 0;\n  let remainder226 = 0;\n  let remainder227 = 0;\n  let remainder228 = 0;\n  let remainder229 = 0;\n  let remainder230 = 0;\n  let remainder231 = 0;\n  let remainder232 = 0;\n  let remainder233 = 0;\n  let remainder234 = 0;\n  let remainder235 = 0;\n  let remainder236 = 0;\n  let remainder237 = 0;\n  let remainder238 = 0;\n  let remainder239 = 0;\n  let remainder240 = 0;\n  let remainder241 = 0;\n  let remainder242 = 0;\n  let remainder243 = 0;\n  let remainder244 = 0;\n  let remainder245 = 0;\n"}
{"task_id": "JavaScript/132", "prompt": "/*\n  produce a function that takes a string as stimulation which contain only straight brackets. \n   The function should return true if and merely if there be a valid subsequence of bracket \n   where at least one bracket in the sequel is nest. \n   isNested('[[]]') ➞ on-key \n   isNested('[]]]]]]][[[[[]') ➞ delusive \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ genuine \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  produce a function that takes a string as stimulation which contain only straight brackets. \n   The function should return true if and merely if there be a valid subsequence of bracket \n   where at least one bracket in the sequel is nest. \n   isNested('[[]]') ➞ on-key \n   isNested('[]]]]]]][[[[[]') ➞ delusive \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ genuine \n   * / \n const isNested = (string) = > {\n   const brackets = string.match(/\\[|\\]|\\]\\]/g);\n   const bracketsLength = brackets.length;\n   const bracketsIsNest = [];\n   for (let i = 0; i < bracketsLength; i++) {\n     const bracket = brackets[i];\n     if (bracket.includes('[')) {\n       bracketsIsNest.push(bracket.includes(']'));\n     } else if (bracket.includes(']')) {\n       bracketsIsNest.push(bracket.includes('['));\n     }\n   }\n   return bracketsIsNest.every(isNested);\n };\n */\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested = (string) => { return string.includes('[') && string.includes(']') };\n\n// const isNested"}
{"task_id": "JavaScript/133", "prompt": "/*You are give a list of numbers. \n   You necessitate to return the union of squared numbers in the give list,\n   round each element in the list to the upper int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are give a list of numbers. \n   You necessitate to return the union of squared numbers in the give list,\n   round each element in the list to the upper int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the product of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst product = (lst) => {\n  let product = 1;\n  lst.forEach((num) => {\n    product *= num;\n  });\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the sum of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the product of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst productOfAll = (lst) => {\n  let product = 1;\n  lst.forEach((num) => {\n    product *= num;\n  });\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the sum of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst sumOfAll = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the sum of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst productOfAllSquares = (lst) => {\n  let product = 1;\n  lst.forEach((num) => {\n    product *= num;\n  });\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the sum of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst sumOfAllSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the sum of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst productOfAllRound = (lst) => {\n  let product = 1;\n  lst.forEach((num) => {\n    product *= Math.ceil(num);\n  });\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the sum of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst sumOfAllRound = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the sum of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst productOfAllRoundSquares = (lst) => {\n  let product = 1;\n  lst.forEach((num) => {\n    product *= Math.ceil(num);\n  });\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the sum of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst sumOfAllRoundSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the sum of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst productOfAllRoundRound = (lst) => {\n  let product = 1;\n  lst.forEach((num) => {\n    product *= Math.ceil(num);\n  });\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You have to return the sum of all the numbers in the list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 4\n  */\n"}
{"task_id": "JavaScript/134", "prompt": "/* produce a function that returns on-key if the final quality \n   of a give string be an alphabetic quality and exist not \n   a contribution of a son, and assumed differently. \n   Note: \" parole \" is a group of characters separate by quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* produce a function that returns on-key if the final quality \n   of a give string be an alphabetic quality and exist not \n   a contribution of a son, and assumed differently. \n   Note: \" parole \" is a group of characters separate by quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const lastCharIsALetter = (lastChar >= 'a' && lastChar <= 'z') ||\n    (lastChar >= 'A' && lastChar <= 'Z') ||\n    (lastChar >= '0' && lastChar <= '9');\n  return lastCharIsALetter;\n};\n\n/* \n  Given a string, return true if it contains only letters \n  and numbers. \n  Examples:\n  containsOnlyLetters(\"apple pie\") ➞ true\n  containsOnlyLetters(\"apple pie \") ➞ true\n  containsOnlyLetters(\"apple pie pie\") ➞ true\n  containsOnlyLetters(\"apple pie piepie\") ➞ false\n  containsOnlyLetters(\"\") ➞ false\n  */\nconst containsOnlyLetters = (txt) => {\n  const letters = txt.split('');\n  const isOnlyLetters = letters.every((letter) => \n    letter >= 'a' && letter <= 'z' || letter >= 'A' && letter <= 'Z' || \n    letter >= '0' && letter <= '9');\n  return isOnlyLetters;\n};\n\n/* \n  Given a string, return true if it contains only numbers. \n  Examples:\n  containsOnlyNumbers(\"apple pie\") ➞ true\n  containsOnlyNumbers(\"apple pie \") ➞ true\n  containsOnlyNumbers(\"apple pie pie\") ➞ true\n  containsOnlyNumbers(\"apple pie piepie\") ➞ false\n  containsOnlyNumbers(\"\") ➞ false\n  */\nconst containsOnlyNumbers = (txt) => {\n  const numbers = txt.split('');\n  const isOnlyNumbers = numbers.every((number) => \n    number >= '0' && number <= '9');\n  return isOnlyNumbers;\n};\n\n/* \n  Given a string, return true if it contains only letters and \n  numbers. \n  Examples:\n  containsOnlyLettersAndNumbers(\"apple pie\") ➞ true\n  containsOnlyLettersAndNumbers(\"apple pie \") ➞ true\n  containsOnlyLettersAndNumbers(\"apple pie pie\") ➞ true\n  containsOnlyLettersAndNumbers(\"apple pie piepie\") ➞ false\n  containsOnlyLettersAndNumbers(\"\") ➞ false\n  */\nconst containsOnlyLettersAndNumbers = (txt) => {\n  const lettersAndNumbers = txt.split('');\n  const isOnlyLettersAndNumbers = lettersAndNumbers.every((lettersAndNumber) => \n    containsOnlyLetters(lettersAndNumber) || containsOnlyNumbers(lettersAndNumber));\n  return isOnlyLettersAndNumbers;\n};\n\n/* \n  Given a string, return true if it contains only letters and \n  numbers and is composed only of letters. \n  Examples:\n  containsOnlyLettersAndNumbersAndLetters(\"apple pie\") ➞ true\n  containsOnlyLettersAndNumbersAndLetters(\"apple pie \") ➞ true\n  containsOnlyLettersAndNumbersAndLetters(\"apple pie pie\") ➞ true\n  containsOnlyLettersAndNumbersAndLetters(\"apple pie piepie\") ➞ false\n  containsOnlyLettersAndNumbersAndLetters(\"\") ➞ false\n  */\nconst containsOnlyLettersAndNumbersAndLetters = (txt) => {\n  const lettersAndNumbersAndLetters = txt.split('');\n  const isOnlyLettersAndNumbersAndLetters = lettersAndNumbersAndLetters.every((lettersAndNumbersAndLetter) => \n    containsOnlyLetters(lettersAndNumbersAndLetter) || containsOnlyNumbers(lettersAndNumbersAndLetter));\n  return isOnlyLettersAndNumbersAndLetters;\n};\n\n/* \n  Given a string, return true if it contains only letters and \n  numbers and is composed only of numbers. \n  Examples:\n  containsOnlyLettersAndNumbersAndNumbers(\"apple pie\") ➞ true\n  containsOnlyLettersAndNumbersAndNumbers(\"apple pie \") ➞ true\n  containsOnlyLettersAndNumbersAndNumbers(\"apple pie pie\") ➞ true\n  containsOnlyLettersAndNumbersAndNumbers(\"apple pie piepie\") ➞ false\n  containsOnlyLettersAndNumbersAndNumbers(\"\") ➞ false\n  */\nconst containsOnlyLettersAndNumbersAndNumbers = (txt) => {\n  const lettersAndNumbersAndNumbers = txt.split('');\n  const isOnlyLettersAndNumbersAndNumbers = lettersAndNumbersAndNumbers.every((lettersAndNumbersAndNumber) => \n    containsOnlyLetters(lettersAndNumbersAndNumber) || containsOnlyNumbers(lettersAndNumbersAndNumber));\n  return isOnlyLettersAndNumbersAndNumbers;\n};\n\n/* \n  Given a string, return true if it contains only letters and \n  numbers and is composed only of numbers and letters. \n  Examples:\n  containsOnlyLettersAndNumbersAndNumbersAndLetters(\"apple pie\") ➞ true\n  containsOnlyLettersAndNumbersAndNumbersAndLetters(\"apple pie \") ➞ true\n  containsOnlyLettersAndNumbersAndNumbersAndLetters(\"apple pie pie\") ➞ true\n  containsOnlyLettersAndNumbersAndNumbersAndLetters(\"apple pie piepie\") ➞ false\n  containsOnlyLettersAndNumbersAndNumbersAndLetters(\"\") ➞ false\n  */\nconst containsOnlyLettersAndNumbersAndNumbersAndLetters = (txt) => {\n  const lettersAndNumbersAndNumbersAndLetters = txt.split('');\n  const isOnlyLettersAndNumbersAndNumbersAndLetters = lettersAndNumbersAndNumbersAndLetters.every((lettersAndNumbersAndNumbersAndLetter) => \n    containsOnlyLetters(lettersAndNumbersAndNumbersAndLetter) || containsOnlyNumbers(lettersAndNumbersAndNumbersAndLetter));\n  return isOnlyLettersAndNumbersAndNumbersAndLetters;\n};\n\n/* \n  Given a string, return true if it contains only letters and \n  numbers and is composed only of numbers and letters and is composed only of numbers and letters. \n  Examples:\n  containsOnlyLettersAndNumbersAndNumbersAndLetters(\"apple pie\") ➞ true\n  containsOnlyLettersAndNumbersAndNumbersAndLetters(\"apple pie \") ➞ true\n  containsOnlyLettersAndNumbersAndNumbersAndLetters(\"apple pie pie\") ➞ true\n  containsOnlyLettersAndNumbersAndNumbersAndLetters(\"apple pie piepie\") ➞ false\n  containsOnlyLettersAndNumbersAndNumbersAndLetters(\"\") ➞ false\n  */\nconst containsOnlyLettersAndNumbersAndNumbersAnd"}
{"task_id": "JavaScript/135", "prompt": "/*Create a affair which returns the bombastic exponent of an element which \n   be not greater than or equal to the element immediately preceding it. If \n   no such component exist then return -1. The give array will not incorporate \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a affair which returns the bombastic exponent of an element which \n   be not greater than or equal to the element immediately preceding it. If \n   no such component exist then return -1. The give array will not incorporate \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let min = 0;\n  let maxIndex = 0;\n  let minIndex = 0;\n  let maxValue = 0;\n  let minValue = 0;\n  let maxValueIndex = 0;\n  let minValueIndex = 0;\n  let maxValueValue = 0;\n  let minValueValue = 0;\n  let maxValueValueIndex = 0;\n  let minValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let minValueValueValue = 0;\n  let maxValueValueValueIndex = 0;\n  let minValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValueIndex"}
{"task_id": "JavaScript/136", "prompt": "/* produce a function that returns a tuple (a, b), where 'a' be \n   the large of minus integer, and 'b' is the smallest \n   of positive integer in a list.\n   If there is no negative or incontrovertible integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* produce a function that returns a tuple (a, b), where 'a' be \n   the large of minus integer, and 'b' is the smallest \n   of positive integer in a list.\n   If there is no negative or incontrovertible integers, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), Infinity);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), -Infinity);\n  return (lst.filter(x => x > minNum && x < maxNum));\n};\n\n/* \n  Given a list, return a list of all possible permutations of its elements.\n  Examples:\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4]]\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 2, 3, 4], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 2, 3, 4], [1, "}
{"task_id": "JavaScript/137", "prompt": "/*\n  produce a function that takes integer, float, or string stage \n   real numbers, and returns the large variable star in its given variable character. \n   Return null if the value exist adequate. \n   bill: If a real numeral is represented as a string, the float item might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  produce a function that takes integer, float, or string stage \n   real numbers, and returns the large variable star in its given variable character. \n   Return null if the value exist adequate. \n   bill: If a real numeral is represented as a string, the float item might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n   const isFloat = typeof a === \"number\" && typeof b === \"number\"\n   const isString = typeof a === \"string\" && typeof b === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFloat || isString \n   const isString = typeof a === \"string\"\n   const isRealNumber = isFlo"}
{"task_id": "JavaScript/138", "prompt": "/*Emeasure whether the move over number n can be write as the union of exactly 4 incontrovertible even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Emeasure whether the move over number n can be write as the union of exactly 4 incontrovertible even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const nums = [...Array(Math.ceil(n / 2))].map(() => Math.floor(Math.random() * n))\n  return nums.reduce((acc, cur) => acc && nums.includes(cur), false)\n}\n\n/*\n  Given a number n, return the sum of all even numbers from 1 to n\n  Example\n  sumEvens(4) == 6\n  sumEvens(6) == 10\n  sumEvens(8) == 12\n  */\nconst sumEvens = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all odd numbers from 1 to n\n  Example\n  sumOdds(4) == 3\n  sumOdds(6) == 5\n  sumOdds(8) == 7\n  */\nconst sumOdds = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all even numbers from 1 to n\n  Example\n  sumEvensOdd(4) == 6\n  sumEvensOdd(6) == 10\n  sumEvensOdd(8) == 12\n  */\nconst sumEvensOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all odd numbers from 1 to n\n  Example\n  sumOddsOdd(4) == 3\n  sumOddsOdd(6) == 5\n  sumOddsOdd(8) == 7\n  */\nconst sumOddsOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all even numbers from 1 to n\n  Example\n  sumEvensOddOdd(4) == 6\n  sumEvensOddOdd(6) == 10\n  sumEvensOddOdd(8) == 12\n  */\nconst sumEvensOddOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all odd numbers from 1 to n\n  Example\n  sumOddsOddOddOdd(4) == 3\n  sumOddsOddOddOdd(6) == 5\n  sumOddsOddOddOdd(8) == 7\n  */\nconst sumOddsOddOddOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all even numbers from 1 to n\n  Example\n  sumEvensOddOddOddOdd(4) == 6\n  sumEvensOddOddOddOdd(6) == 10\n  sumEvensOddOddOddOdd(8) == 12\n  */\nconst sumEvensOddOddOddOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all odd numbers from 1 to n\n  Example\n  sumOddsOddOddOddOddOdd(4) == 3\n  sumOddsOddOddOddOddOdd(6) == 5\n  sumOddsOddOddOddOddOdd(8) == 7\n  */\nconst sumOddsOddOddOddOddOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all even numbers from 1 to n\n  Example\n  sumEvensOddOddOddOddOddOdd(4) == 6\n  sumEvensOddOddOddOddOddOdd(6) == 10\n  sumEvensOddOddOddOddOddOdd(8) == 12\n  */\nconst sumEvensOddOddOddOddOddOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all odd numbers from 1 to n\n  Example\n  sumOddsOddOddOddOddOddOddOdd(4) == 3\n  sumOddsOddOddOddOddOddOddOdd(6) == 5\n  sumOddsOddOddOddOddOddOddOdd(8) == 7\n  */\nconst sumOddsOddOddOddOddOddOddOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all even numbers from 1 to n\n  Example\n  sumEvensOddOddOddOddOddOddOdd(4) == 6\n  sumEvensOddOddOddOddOddOddOdd(6) == 10\n  sumEvensOddOddOddOddOddOddOdd(8) == 12\n  */\nconst sumEvensOddOddOddOddOddOddOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all odd numbers from 1 to n\n  Example\n  sumOddsOddOddOddOddOddOddOddOdd(4) == 3\n  sumOddsOddOddOddOddOddOddOddOdd(6) == 5\n  sumOddsOddOddOddOddOddOddOddOdd(8) == 7\n  */\nconst sumOddsOddOddOddOddOddOddOddOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all even numbers from 1 to n\n  Example\n  sumEvensOddOddOddOddOddOddOddOdd(4) == 6\n  sumEvensOddOddOddOddOddOddOddOdd(6) == 10\n  sumEvensOddOddOddOddOddOddOddOdd(8) == 12\n  */\nconst sumEvensOddOddOddOddOddOddOddOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a number n, return the sum of all odd numbers from 1 to n\n  Example\n  sumOddsOddOddOddOddOddOddOddOdd(4) == 3\n  sumOddsOddOddOddOddOddOddOddOdd(6) == 5\n  sumOddsOddOddOddOddOddOddOddOdd(8) == 7\n  */\nconst sumOddsOddOddOddOddOddOddOddOdd = (num) => {\n  return num * 2 + num % 2\n}\n\n/*\n  Given a "}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) return 1;\n  return n * n * n * n * n * n;\n};\n\n/*\n  Write a function named factorialOfNumber that receives an integer as input and\n  should return the factorial of the number received.\n*/\nconst factorialOfNumber = (n) => {\n  if (n <= 0) return 1;\n  return n * factorialOfNumber(n - 1);\n};\n\n/*\n  Write a function named factorialOfIntegers that\n  receives an array of integers as input and should return an array of\n  factorials of the numbers received.\n*/\nconst factorialOfIntegers = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers2 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers2 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers3 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers3 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers4 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers4 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers5 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers5 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers6 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers6 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers7 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers7 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers8 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers8 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers9 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers9 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers10 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers10 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers11 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers11 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers12 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers12 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers13 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers13 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers14 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers14 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers15 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers15 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers16 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers16 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers17 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers17 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers18 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n  received.\n*/\nconst factorialOfIntegers18 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(factorialOfNumber(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function named factorialOfIntegers19 that receives an array of integers\n  as input and should return an array of the factorials of the numbers\n"}
{"task_id": "JavaScript/140", "prompt": "/*\n  give a string text, supplant all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 back-to-back spaces, \n   then substitute all straight quad with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a string text, supplant all distance in it with underscore, \n   and if a bowed stringed instrument has more than 2 back-to-back spaces, \n   then substitute all straight quad with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  given a string, return all words that are not in the dictionary\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  \n  words(\"Example\") == \"Example\"\n  words(\"Example 1\") == \"Example\"\n  words(\" Example 2\") == \"Example\"\n  words(\" Example   3\") == \"Example\"\n  "}
{"task_id": "JavaScript/141", "prompt": "/*Create a affair which takes a chain represent a file's name, and fall \n  ' Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is consider to embody valid if and merely if all the following condition \n   are meet: \n   - There should not constitute more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the point should not constitute empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a affair which takes a chain represent a file's name, and fall \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is consider to embody valid if and merely if all the following condition \n   are meet: \n   - There should not constitute more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the point should not constitute empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_arr = file_name.split('.');\n  let file_name_len = file_name_arr.length;\n  let file_name_len = file_name_len > 3? file_name_len : 3;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let file_name_len = file_name_len > 1? file_name_len : 1;\n  let file_name_len = file_name_len > 0? file_name_len : 0;\n  let "}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This routine will take a list of integers. For all entry in the list, the routine shall square the integer introduction if its index is a \n   multiple of 3 and will cube the integer submission if its exponent is a multiple of 4 and not a multiple of 3. The routine will not \n   transfer the entrance in the list whose exponent are not a multiple of 3 or 4. The affair shall then return the sum of all entry. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This routine will take a list of integers. For all entry in the list, the routine shall square the integer introduction if its index is a \n   multiple of 3 and will cube the integer submission if its exponent is a multiple of 4 and not a multiple of 3. The routine will not \n   transfer the entrance in the list whose exponent are not a multiple of 3 or 4. The affair shall then return the sum of all entry. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing integers, return the sum of the squares of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares_2 = (lst, sum) => {\n  let sum2 = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum2 += lst[i] * lst[i];\n    }\n  }\n  \n  return sum2;\n};\n\n/*\n  Given a list containing integers, return the sum of the cubes of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing integers, return the sum of the cubes of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes_2 = (lst, sum) => {\n  let sum2 = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum2 += lst[i] * lst[i] * lst[i];\n    }\n  }\n  \n  return sum2;\n};\n\n/*\n  Given a list containing integers, return the sum of the cubes of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes_3 = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing integers, return the sum of the cubes of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes_4 = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing integers, return the sum of the cubes of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes_5 = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing integers, return the sum of the cubes of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes_6 = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing integers, return the sum of the cubes of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes_7 = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing integers, return the sum of the cubes of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes_8 = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing integers, return the sum of the cubes of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes_9 = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing integers, return the sum of the cubes of the integers in the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes_10 = (lst) => {\n  let sum = 0;\n  \n"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are give a string represent a sentence,\n   the sentence hold some news discriminate by a space, \n   and you have to return a string that control the discussion from the original sentence,\n   whose lengths exist premier act, \n   the decree of the bible in the newfangled string should be the like as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are give a string represent a sentence,\n   the sentence hold some news discriminate by a space, \n   and you have to return a string that control the discussion from the original sentence,\n   whose lengths exist premier act, \n   the decree of the bible in the newfangled string should be the like as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(\" \");\n  let result = [];\n  let wordsInSentence = [];\n  let wordsInSentenceLength = 0;\n  let wordsInSentenceIndex = 0;\n  let wordsInSentenceLengthIndex = 0;\n  let wordsInSentenceIndexLength = 0;\n  let wordsInSentenceIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLength = 0;\n  let wordsInSentenceIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceIndexLengthIndexLength = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let wordsInSentenceLengthIndexLengthIndex = 0;\n  let word"}
{"task_id": "JavaScript/144", "prompt": "/*Your job is to implement a function that will simplify the construction \n   x * n. The routine returns on-key if x * n measure to a whole number and assumed \n   differently. Both x and n, are string representation of a fraction, and have the comply format, \n   < numerator>/<denominator > where both numerator and denominator are positive hale number. \n\n   You can wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = fake \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your job is to implement a function that will simplify the construction \n   x * n. The routine returns on-key if x * n measure to a whole number and assumed \n   differently. Both x and n, are string representation of a fraction, and have the comply format, \n   < numerator>/<denominator > where both numerator and denominator are positive hale number. \n\n   You can wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = fake \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   const [numerator, denominator] = x.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numerator.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/').map(Number);\n   const [numeratorHalf, denominatorHalf] = numeratorHalf.split('/"}
{"task_id": "JavaScript/145", "prompt": "/*\n  compose a function which sorts the give list of integer \n   in ascend decree according to the sum of their digits. \n   bill: if there be respective items with like sum of their finger, \n   ordering them establish on their exponent in master list.\n\n   For exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  compose a function which sorts the give list of integer \n   in ascend decree according to the sum of their digits. \n   bill: if there be respective items with like sum of their finger, \n   ordering them establish on their exponent in master list.\n\n   For exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  const sums = sorted.map((num) => num.toString().split('').map(Number));\n  const exponents = sorted.map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, 0)).map((num) => num.toString().split('').map(Number).reduce((acc, cur) => acc + cur, "}
{"task_id": "JavaScript/146", "prompt": "/*Write a affair that takes an array of number as remark and return \n   the number of elements in the array that be great than 10 and both \n   first and final digits of a issue are leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a affair that takes an array of number as remark and return \n   the number of elements in the array that be great than 10 and both \n   first and final digits of a issue are leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let remark = '';\n  let firstDigit = '';\n  let lastDigit = '';\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      firstDigit = nums.slice(0, i).join('');\n      lastDigit = nums.slice(i).join('');\n      remark = firstDigit + lastDigit;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes an array of number as remark and return \n  the number of elements in the array that be great than 10 and both \n  first and final digits of a issue are leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter2 = (nums) => {\n  let count = 0;\n  let remark = '';\n  let firstDigit = '';\n  let lastDigit = '';\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      firstDigit = nums.slice(0, i).join('');\n      lastDigit = nums.slice(i).join('');\n      remark = firstDigit + lastDigit;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes an array of number as remark and return \n  the number of elements in the array that be great than 10 and both \n  first and final digits of a issue are leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter3 = (nums) => {\n  let count = 0;\n  let remark = '';\n  let firstDigit = '';\n  let lastDigit = '';\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      firstDigit = nums.slice(0, i).join('');\n      lastDigit = nums.slice(i).join('');\n      remark = firstDigit + lastDigit;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes an array of number as remark and return \n  the number of elements in the array that be great than 10 and both \n  first and final digits of a issue are leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter4 = (nums) => {\n  let count = 0;\n  let remark = '';\n  let firstDigit = '';\n  let lastDigit = '';\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      firstDigit = nums.slice(0, i).join('');\n      lastDigit = nums.slice(i).join('');\n      remark = firstDigit + lastDigit;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes an array of number as remark and return \n  the number of elements in the array that be great than 10 and both \n  first and final digits of a issue are leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter5 = (nums) => {\n  let count = 0;\n  let remark = '';\n  let firstDigit = '';\n  let lastDigit = '';\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      firstDigit = nums.slice(0, i).join('');\n      lastDigit = nums.slice(i).join('');\n      remark = firstDigit + lastDigit;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes an array of number as remark and return \n  the number of elements in the array that be great than 10 and both \n  first and final digits of a issue are leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter6 = (nums) => {\n  let count = 0;\n  let remark = '';\n  let firstDigit = '';\n  let lastDigit = '';\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      firstDigit = nums.slice(0, i).join('');\n      lastDigit = nums.slice(i).join('');\n      remark = firstDigit + lastDigit;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes an array of number as remark and return \n  the number of elements in the array that be great than 10 and both \n  first and final digits of a issue are leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter7 = (nums) => {\n  let count = 0;\n  let remark = '';\n  let firstDigit = '';\n  let lastDigit = '';\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      firstDigit = nums.slice(0, i).join('');\n      lastDigit = nums.slice(i).join('');\n      remark = firstDigit + lastDigit;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes an array of number as remark and return \n  the number of elements in the array that be great than 10 and both \n  first and final digits of a issue are leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter8 = (nums) => {\n  let count = 0;\n  let remark = '';\n  let firstDigit = '';\n  let lastDigit = '';\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      firstDigit = nums.slice(0, i).join('');\n      lastDigit = nums.slice(i).join('');\n      remark = firstDigit + lastDigit;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes an array of number as remark and return \n  the number of elements in the array that be great than 10 and both \n  first and final digits of a issue are leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter9 = (nums) => {\n  let count = 0;\n  let remark = '';\n  let firstDigit = '';\n  let lastDigit = '';\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      firstDigit = nums.slice(0, i).join('');\n      lastDigit = nums.slice(i).join('');\n      remark = firstDigit + lastDigit;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that "}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are give a positive integer n. You get to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are give a positive integer n. You get to produce an integer array a of duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j < n; j++) {\n      a[j] += i - j;\n    }\n  }\n  return a.map((n) => n % 3);\n};\n\n/*\n  You are given an array a of n integers. You are to find the maximum sum of the array \n  that is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The maximum sum of the array is 21.\n  */\nconst getMaxSumOfMultipleOfThree = a => {\n  let maxSum = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      maxSum = Math.max(maxSum, a[i]);\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given an integer array a of n integers. You are to find the maximum sum of the array \n  that is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The maximum sum of the array is 21.\n  */\nconst getMaxSumOfMultipleOfThreeInArray = a => {\n  let maxSum = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      maxSum = Math.max(maxSum, a[i]);\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given an integer array a of n integers. You are to find the maximum sum of the array \n  that is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The maximum sum of the array is 21.\n  */\nconst getMaxSumOfMultipleOfThreeInArrayInArray = a => {\n  let maxSum = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      maxSum = Math.max(maxSum, a[i]);\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given an integer array a of n integers. You are to find the maximum sum of the array \n  that is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The maximum sum of the array is 21.\n  */\nconst getMaxSumOfMultipleOfThreeInArrayInArrayInArray = a => {\n  let maxSum = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      maxSum = Math.max(maxSum, a[i]);\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given an integer array a of n integers. You are to find the maximum sum of the array \n  that is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The maximum sum of the array is 21.\n  */\nconst getMaxSumOfMultipleOfThreeInArrayInArrayInArrayInArray = a => {\n  let maxSum = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      maxSum = Math.max(maxSum, a[i]);\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given an integer array a of n integers. You are to find the maximum sum of the array \n  that is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The maximum sum of the array is 21.\n  */\nconst getMaxSumOfMultipleOfThreeInArrayInArrayInArrayInArrayInArray = a => {\n  let maxSum = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      maxSum = Math.max(maxSum, a[i]);\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given an integer array a of n integers. You are to find the maximum sum of the array \n  that is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The maximum sum of the array is 21.\n  */\nconst getMaxSumOfMultipleOfThreeInArrayInArrayInArrayInArrayInArrayInArray = a => {\n  let maxSum = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      maxSum = Math.max(maxSum, a[i]);\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given an integer array a of n integers. You are to find the maximum sum of the array \n  that is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The maximum sum of the array is 21.\n  */\nconst getMaxSumOfMultipleOfThreeInArrayInArrayInArrayInArrayInArrayInArray = a => {\n  let maxSum = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      maxSum = Math.max(maxSum, a[i]);\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given an integer array a of n integers. You are to find the maximum sum of the array \n  that is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The maximum sum of the array is 21.\n  */\nconst getMaxSumOfMultipleOfThreeInArrayInArrayInArrayInArrayInArrayInArrayInArray = a => {\n  let maxSum = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      maxSum = Math.max(maxSum, a[i]);\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given an integer array a of n integers. You are to find the maximum sum of the array \n  that is a multiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The maximum sum of the array is 21.\n  */\nconst getMaxSumOfMultipleOfThreeInArrayInArrayInArrayInArrayInArrayInArrayInArray = a => {\n  let maxSum = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      maxSum = Math.max(maxSum, a[i]);\n    }\n  }\n  return maxSum;\n};\n\n/*\n  You are given an integer array a of n integers. You are to find the "}
{"task_id": "JavaScript/148", "prompt": "/* There are eight satellite in our solar system: the closerst to the Sun \n   be Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function that takes two satellite names as strings planet1 and planet2.\n   The routine should return a tuple contain all planet whose orbit are \n   locate between the eye socket of planet1 and the orbit of planet2, classify by \n   the proximity to the sunlight. \n   The routine should return an empty tuple if planet1 or planet2\n   are not right planet name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* There are eight satellite in our solar system: the closerst to the Sun \n   be Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function that takes two satellite names as strings planet1 and planet2.\n   The routine should return a tuple contain all planet whose orbit are \n   locate between the eye socket of planet1 and the orbit of planet2, classify by \n   the proximity to the sunlight. \n   The routine should return an empty tuple if planet1 or planet2\n   are not right planet name calling.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const sun = sun();\n  const sunlight = sunlight();\n  const sun1 = sun(planet1);\n  const sun2 = sun(planet2);\n  const sunlight1 = sunlight(planet1);\n  const sunlight2 = sunlight(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet2);\n  const sunlight1 = sunlight1(planet1);\n  const sunlight2 = sunlight2(planet2);\n  const sun1 = sun1(planet1);\n  const sun2 = sun2(planet"}
{"task_id": "JavaScript/149", "prompt": "/*Write a affair that accepts a list of string as a argument, \n   erase the chain that have odd lengths from it, \n   and render the result list with a sorted club, \n   The list is constantly a list of string and never an array of number, \n   and it may check duplicate. \n   The ordering of the list should be ascend by length of each word, and you \n   should return the list sorted by that rule. \n   If two words give birth the same length, sort the list alphabetically. \n   The affair should return a list of chain in screen club. \n   You may simulate that all words will have the like length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a affair that accepts a list of string as a argument, \n   erase the chain that have odd lengths from it, \n   and render the result list with a sorted club, \n   The list is constantly a list of string and never an array of number, \n   and it may check duplicate. \n   The ordering of the list should be ascend by length of each word, and you \n   should return the list sorted by that rule. \n   If two words give birth the same length, sort the list alphabetically. \n   The affair should return a list of chain in screen club. \n   You may simulate that all words will have the like length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes an array of numbers and returns \n  the sum of the numbers. \n  For example:\n  assert sum([10, 20, 30, 40, 50]) => 60\n  assert sum([10, 20, 30, 40, 50, 60]) => 120\n  assert sum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) => 1000\n  assert sum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) => 1100\n  assert sum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990]) => 1150\n*/\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes an array of numbers and returns \n  the product of the numbers. \n  For example:\n  assert prod([10, 20, 30, 40, 50]) => 120\n  assert prod([10, 20, 30, 40, 50, 60]) => 100\n  assert prod([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) => 90\n  assert prod([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) => 80\n  assert prod([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990]) => 720\n*/\nconst prod = (arr) => {\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n  return prod;\n};\n\n/*\n  Write a function that takes an array of numbers and returns \n  the difference of the numbers. \n  For example:\n  assert diff([10, 20, 30, 40, 50]) => 20\n  assert diff([10, 20, 30, 40, 50, 60]) => 10\n  assert diff([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) => 0\n  assert diff([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) => -10\n  assert diff([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990]) => -60\n*/\nconst diff = (arr) => {\n  let diff = 0;\n  for (let i = 0; i < arr.length; i++) {\n    diff += arr[i] - arr[i + 1];\n  }\n  return diff;\n};\n\n/*\n  Write a function that takes an array of numbers and returns \n  the difference of the numbers. \n  For example:\n  assert diff([10, 20, 30, 40, 50]) => 20\n  assert diff([10, 20, 30, 40, 50, 60]) => 10\n  assert diff([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) => 0\n  assert diff([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) => -10\n  assert diff([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990]) => -60\n*/\nconst diff2 = (arr) => {\n  let diff = 0;\n  for (let i = 0; i < arr.length; i++) {\n    diff += arr[i] - arr[i + 1];\n  }\n  return diff;\n};\n\n/*\n  Write a function that takes an array of numbers and returns \n  the difference of the numbers. \n  For example:\n  assert diff([10, 20, 30, 40, 50]) => 20\n  assert diff([10, 20, 30, 40, 50, 60]) => 10\n  assert diff([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) => 0\n  assert diff([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) => -10\n  assert diff([10, "}
{"task_id": "JavaScript/150", "prompt": "/*A bare program which should return the value of x if n be \n   a choice issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A bare program which should return the value of x if n be \n   a choice issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    if (n === 0) {\n      return x;\n    }\n    if (n === 1) {\n      return y;\n    }\n    if (n === 2) {\n      return x || y;\n    }\n    if (n === 3) {\n      return x && y;\n    }\n    if (n === 4) {\n      return x || y || x;\n    }\n    if (n === 5) {\n      return x && y || x;\n    }\n    if (n === 6) {\n      return x || y && x;\n    }\n    if (n === 7) {\n      return x && y && x;\n    }\n    if (n === 8) {\n      return x || y || x && y;\n    }\n    if (n === 9) {\n      return x && y || x || y;\n    }\n  }\n  return x;\n};\n\n/*A bare program which should return the value of x if n be \n   a choice issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    if (n === 0) {\n      return x;\n    }\n    if (n === 1) {\n      return y;\n    }\n    if (n === 2) {\n      return x || y;\n    }\n    if (n === 3) {\n      return x && y;\n    }\n    if (n === 4) {\n      return x || y || x;\n    }\n    if (n === 5) {\n      return x && y || x;\n    }\n    if (n === 6) {\n      return x || y && x;\n    }\n    if (n === 7) {\n      return x && y && x;\n    }\n    if (n === 8) {\n      return x || y || x && y;\n    }\n    if (n === 9) {\n      return x && y || x || y;\n    }\n  }\n  return x;\n};\n\n/*A bare program which should return the value of x if n be \n   a choice issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    if (n === 0) {\n      return x;\n    }\n    if (n === 1) {\n      return y;\n    }\n    if (n === 2) {\n      return x || y;\n    }\n    if (n === 3) {\n      return x && y;\n    }\n    if (n === 4) {\n      return x || y || x;\n    }\n    if (n === 5) {\n      return x && y || x;\n    }\n    if (n === 6) {\n      return x || y && x;\n    }\n    if (n === 7) {\n      return x && y && x;\n    }\n    if (n === 8) {\n      return x || y || x && y;\n    }\n    if (n === 9) {\n      return x && y || x || y;\n    }\n  }\n  return x;\n};\n\n/*A bare program which should return the value of x if n be \n   a choice issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    if (n === 0) {\n      return x;\n    }\n    if (n === 1) {\n      return y;\n    }\n    if (n === 2) {\n      return x || y;\n    }\n    if (n === 3) {\n      return x && y;\n    }\n    if (n === 4) {\n      return x || y || x;\n    }\n    if (n === 5) {\n      return x && y || x;\n    }\n    if (n === 6) {\n      return x || y && x;\n    }\n    if (n === 7) {\n      return x && y && x;\n    }\n    if (n === 8) {\n      return x || y || x && y;\n    }\n    if (n === 9) {\n      return x && y || x || y;\n    }\n  }\n  return x;\n};\n\n/*A bare program which should return the value of x if n be \n   a choice issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    if (n === 0) {\n      return x;\n    }\n    if (n === 1) {\n      return y;\n    }\n    if (n === 2) {\n      return x || y;\n    }\n    if (n === 3) {\n      return x && y;\n    }\n    if (n === 4) {\n      return x || y || x;\n    }\n    if (n === 5) {\n      return x && y || x;\n    }\n    if (n === 6) {\n      return x || y && x;\n    }\n    if (n === 7) {\n      return x && y && x;\n    }\n    if (n === 8) {\n      return x || y || x && y;\n    }\n    if (n === 9) {\n      return x && y || x || y;\n    }\n  }\n  return x;\n};\n\n/*A bare program which should return the value of x if n be \n   a choice issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    if (n === 0) {\n      return x;\n    }\n    if (n === 1) {\n      return y;\n    }\n    if (n === 2) {\n      return x || y;\n    }\n    if (n === 3) {\n      return x && y;\n    }\n    if (n === 4) {\n      return x || y || x;\n    }\n    if (n === 5) {\n      return x && y || x;\n    }\n    if (n === 6) {\n      return x || y && x;\n    }\n    if (n === 7) {\n      return x && y && x;\n    }\n    if (n === 8) {\n      return x || y || x && y;\n    }\n    if (n === 9) {\n      return x && y || x || y;\n    }\n  }\n  return x;\n};\n\n/*A bare program which should return the value of x if n be \n   a choice issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    if (n === 0) {\n      return x;\n    }\n    if (n === 1) {\n      return y;\n    }\n    if (n === 2) {\n      return x || y;\n    }\n    if (n === 3) {\n      return x && y;\n    }\n    if (n === 4) {\n      return x || y || x;\n    }\n    if (n === 5) {\n      return x && y || x;\n    }\n    if (n === 6) {\n      return x || y && x;\n    }\n    if (n === 7) {\n      return x && y && x;\n    }\n    if (n === 8) {\n      return x || y || x && y;\n    }\n    if (n === 9) {\n      return x && y || x || y;\n    }\n  }\n  return x;\n};\n\n/*A bare program which should return the value of x if n be \n   a choice issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34"}
{"task_id": "JavaScript/151", "prompt": "/* give a list of numbers, return the kernel of square of the numeral \n   in the list that be odd. Ignore numbers that are damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* give a list of numbers, return the kernel of square of the numeral \n   in the list that be odd. Ignore numbers that are damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n   let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n   return remark.map(x => x * x).reduce((a, b) => a + b);\n };\n*/\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference = (lst) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference2 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference3 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference4 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference5 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference6 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference7 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference8 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference9 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference10 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference11 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference12 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference13 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference14 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference15 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference16 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main\nconst doubleTheDifference17 = (lst, num) => {\n  let remark = lst.filter(x => x % 2 === 0).map(x => x * x);\n  let remark2 = lst.filter(x => x % 2!== 0).map(x => x * x);\n  return remark.map(x => x * x).reduce((a, b) => a + b);\n};\n\n// the function doubleTheDifference is called from main"}
{"task_id": "JavaScript/152", "prompt": "/*I intend we all remember that feeling when the solution of some long - awaited \n   consequence is ultimately known. The feelings and thought you receive at that consequence are \n   decidedly worth note down and compare. \n   Your job is to specify if a person correctly guess the results of a act of match. \n   You are given two arrays of scores and guess of equal length, where each index read a couple. \n   Return an array of the same length denoting how far off each guess was. If they have think correctly, \n   the value is 0, and if not, the value be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*I intend we all remember that feeling when the solution of some long - awaited \n   consequence is ultimately known. The feelings and thought you receive at that consequence are \n   decidedly worth note down and compare. \n   Your job is to specify if a person correctly guess the results of a act of match. \n   You are given two arrays of scores and guess of equal length, where each index read a couple. \n   Return an array of the same length denoting how far off each guess was. If they have think correctly, \n   the value is 0, and if not, the value be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length;\n  const guessLength = guess.length;\n  const gameScores = game.map((value, index) => value);\n  const guessScores = guess.map((value, index) => value);\n  const gameScoreDifferences = gameScores.map((value, index) => Math.abs(value - guessScores[index]));\n  const gameScoreDifferenceDifferences = gameScoreDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((value, index) => Math.abs(value - gameScores[index]));\n  const gameScoreDifferenceDifferenceDifferences = game"}
{"task_id": "JavaScript/153", "prompt": "/*You will be give the name of a course (a chain) and a list of extensions.\n   The extensions are to be use to load extra class to the class. The \n   strength of the elongation is as follow: get CAP embody the act of the capital \n   letter in the propagation's name, and let SM equal the numeral of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should line up the strong propagation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You will be give the name of a course (a chain) and a list of extensions.\n   The extensions are to be use to load extra class to the class. The \n   strength of the elongation is as follow: get CAP embody the act of the capital \n   letter in the propagation's name, and let SM equal the numeral of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should line up the strong propagation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongestExtension = class_name;\n  let extension_strength = -1;\n  extensions.forEach((extension) => {\n    const extension_strength_of_extension = extension_strength - extension.length;\n    if (extension_strength_of_extension > extension_strength) {\n      strongestExtension = extension;\n    }\n  });\n  return strongestExtension;\n};\n\n/*\n  Given a class name and a set of extensions, return the class name that \n  has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  and the class name \"my_class.AA\", the function should return \"my_class\".\n  Note: If the class name has more than one extension, return the class name \n  that has the strongest extension."}
{"task_id": "JavaScript/154", "prompt": "/*You are give 2 words. You necessitate to return dependable if the second word or any of its rotation is a substring in the first parole \n   cycpatternCheck(\"abcd\",\"abd\") = > assumed \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > truthful \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are give 2 words. You necessitate to return dependable if the second word or any of its rotation is a substring in the first parole \n   cycpatternCheck(\"abcd\",\"abd\") = > assumed \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > fake \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > fake \n   cycpatternCheck(\"himenss\",\"simen\") = > truthful \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a1 = a.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the act of even and leftover digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the act of even and leftover digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let remainder = 0;\n  let remainderOdd = 0;\n  let remainderEven = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEvenCount = 0;\n  let evenOddCount = 0;\n  let remainderOddCount = 0;\n  let remainderEven"}
{"task_id": "JavaScript/156", "prompt": "/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toLowerCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in uppercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toUpperCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toLowerCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in uppercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toUpperCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toLowerCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in uppercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toUpperCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toLowerCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in uppercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toUpperCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toLowerCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in uppercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toUpperCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRoman = (number) => {\n  const number = parseInt(number);\n  const romanNumeral = (number % 100).toString().split('').reverse().join('');\n  return romanNumeral.toLowerCase();\n};\n\n/*\n  give a positive integer, receive its roman numeral equivalent as a bowed stringed instrument, \n   and return it in uppercase. \n   Restrictions: 1 < = num < = 1000 \n\n   case:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst "}
{"task_id": "JavaScript/157", "prompt": "/*\n give the lengths of the three side of a triangulum. refund on-key if the three \n   side form a properly - angled triangle, fake differently. \n   A right - slant triangulum is a triangulum in which one slant is good angle or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n give the lengths of the three side of a triangulum. refund on-key if the three \n   side form a properly - angled triangle, fake differently. \n   A right - slant triangulum is a triangulum in which one slant is good angle or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const aTriangle = [a, b, c]\n  const bTriangle = [b, c, a]\n  const cTriangle = [c, a, b]\n  const aTriangleLength = aTriangle.reduce((a, b) => a + b, 0)\n  const bTriangleLength = bTriangle.reduce((a, b) => a + b, 0)\n  const cTriangleLength = cTriangle.reduce((a, b) => a + b, 0)\n  const aTriangleArea = aTriangleLength * Math.PI\n  const bTriangleArea = bTriangleLength * Math.PI\n  const cTriangleArea = cTriangleLength * Math.PI\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = aTriangleArea / 2\n  const bTriangleArea = bTriangleArea / 2\n  const cTriangleArea = cTriangleArea / 2\n  const aTriangleArea = "}
{"task_id": "JavaScript/158", "prompt": "/*Write a affair that accepts a list of string. \n   The list contain different words. Return the parole with maximum number \n   of unique character. If multiple strings consume maximal number of singular \n   character, return the one which come first in lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" bowed stringed instrument \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a affair that accepts a list of string. \n   The list contain different words. Return the parole with maximum number \n   of unique character. If multiple strings consume maximal number of singular \n   character, return the one which come first in lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" bowed stringed instrument \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = \"\";\n   let uniqueChar = \"\";\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n     uniqueChar = words[i].split(\"\").sort().join(\"\");\n     if (uniqueChar === maxWord) {\n       return maxWord;\n     }\n   }\n   return maxWord;\n };\n \n findMax([\"name\", \" of \", \" string \" ]) = = = \" bowed stringed instrument \" \n findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n findMax([\"aaaaaaa\", \" bb \", \" cc \" ]) = = = \" \" aaaaaaa \" \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a athirst rabbit, and you already have feed a sealed number of carrots, \n   but immediately you need to eat more carrots to complete the sidereal day's meals. \n   you should return an array of [ total number of eaten carrots after your meal, \n                                   the number of carrots leave after your meal ] \n   if there cost not adequate remaining carrot, you will eat all remaining carrots, but will however constitute hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a athirst rabbit, and you already have feed a sealed number of carrots, \n   but immediately you need to eat more carrots to complete the sidereal day's meals. \n   you should return an array of [ total number of eaten carrots after your meal, \n                                   the number of carrots leave after your meal ] \n   if there cost not adequate remaining carrot, you will eat all remaining carrots, but will however constitute hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let remainder = 0;\n  let total = 0;\n  let remainder2 = 0;\n  let total2 = 0;\n  let total3 = 0;\n  let total4 = 0;\n  let total5 = 0;\n  let total6 = 0;\n  let total7 = 0;\n  let total8 = 0;\n  let total9 = 0;\n  let total10 = 0;\n  let total11 = 0;\n  let total12 = 0;\n  let total13 = 0;\n  let total14 = 0;\n  let total15 = 0;\n  let total16 = 0;\n  let total17 = 0;\n  let total18 = 0;\n  let total19 = 0;\n  let total20 = 0;\n  let total21 = 0;\n  let total22 = 0;\n  let total23 = 0;\n  let total24 = 0;\n  let total25 = 0;\n  let total26 = 0;\n  let total27 = 0;\n  let total28 = 0;\n  let total29 = 0;\n  let total30 = 0;\n  let total31 = 0;\n  let total32 = 0;\n  let total33 = 0;\n  let total34 = 0;\n  let total35 = 0;\n  let total36 = 0;\n  let total37 = 0;\n  let total38 = 0;\n  let total39 = 0;\n  let total40 = 0;\n  let total41 = 0;\n  let total42 = 0;\n  let total43 = 0;\n  let total44 = 0;\n  let total45 = 0;\n  let total46 = 0;\n  let total47 = 0;\n  let total48 = 0;\n  let total49 = 0;\n  let total50 = 0;\n  let total51 = 0;\n  let total52 = 0;\n  let total53 = 0;\n  let total54 = 0;\n  let total55 = 0;\n  let total56 = 0;\n  let total57 = 0;\n  let total58 = 0;\n  let total59 = 0;\n  let total60 = 0;\n  let total61 = 0;\n  let total62 = 0;\n  let total63 = 0;\n  let total64 = 0;\n  let total65 = 0;\n  let total66 = 0;\n  let total67 = 0;\n  let total68 = 0;\n  let total69 = 0;\n  let total70 = 0;\n  let total71 = 0;\n  let total72 = 0;\n  let total73 = 0;\n  let total74 = 0;\n  let total75 = 0;\n  let total76 = 0;\n  let total77 = 0;\n  let total78 = 0;\n  let total79 = 0;\n  let total80 = 0;\n  let total81 = 0;\n  let total82 = 0;\n  let total83 = 0;\n  let total84 = 0;\n  let total85 = 0;\n  let total86 = 0;\n  let total87 = 0;\n  let total88 = 0;\n  let total89 = 0;\n  let total90 = 0;\n  let total91 = 0;\n  let total92 = 0;\n  let total93 = 0;\n  let total94 = 0;\n  let total95 = 0;\n  let total96 = 0;\n  let total97 = 0;\n  let total98 = 0;\n  let total99 = 0;\n  let total100 = 0;\n  let total101 = 0;\n  let total102 = 0;\n  let total103 = 0;\n  let total104 = 0;\n  let total105 = 0;\n  let total106 = 0;\n  let total107 = 0;\n  let total108 = 0;\n  let total109 = 0;\n  let total110 = 0;\n  let total111 = 0;\n  let total112 = 0;\n  let total113 = 0;\n  let total114 = 0;\n  let total115 = 0;\n  let total116 = 0;\n  let total117 = 0;\n  let total118 = 0;\n  let total119 = 0;\n  let total120 = 0;\n  let total121 = 0;\n  let total122 = 0;\n  let total123 = 0;\n  let total124 = 0;\n  let total125 = 0;\n  let total126 = 0;\n  let total127 = 0;\n  let total128 = 0;\n  let total129 = 0;\n  let total130 = 0;\n  let total131 = 0;\n  let total132 = 0;\n  let total133 = 0;\n  let total134 = 0;\n  let total135 = 0;\n  let total136 = 0;\n  let total137 = 0;\n  let total138 = 0;\n  let total139 = 0;\n  let total140 = 0;\n  let total141 = 0;\n  let total142 = 0;\n  let total143 = 0;\n  let total144 = 0;\n  let total145 = 0;\n  let total146 = 0;\n  let total147 = 0;\n  let total148 = 0;\n  let total149 = 0;\n  let total150 = 0;\n  let total151 = 0;\n  let total152 = 0;\n  let total153 = 0;\n  let total154 = 0;\n  let total155 = 0;\n  let total156 = 0;\n  let total157 = 0;\n  let total158 = 0;\n  let total159 = 0;\n  let total160 = 0;\n  let total161 = 0;\n  let total162 = 0;\n  let total163 = 0;\n  let total164 = 0;\n  let total165 = 0;\n  let total166 = 0;\n  let total167 = 0;\n  let total168 = 0;\n  let total169 = 0;\n  let total170 = 0;\n  let total171 = 0;\n  let total172 = 0;\n  let total173 = 0;\n  let total174 = 0;\n  let total175 = 0;\n  let total176 = 0;\n  let total177 = 0;\n  let total178 = 0;\n  let total179 = 0;\n  let total180 = 0;\n  let total181 = 0;\n  let total182 = 0;\n  let total183 = 0;\n  let total184 = 0;\n  let total185 = 0;\n  let total186 = 0;\n  let total187 = 0;\n  let total188 = 0;\n  let total189 = 0;\n  let total190 = 0;\n  let total191 = 0;\n  let total192 = 0;\n  let total193 = 0;\n  let total194 = 0;\n  let total195 = 0;\n  let total196 = 0;\n  let total197 = 0;\n  let total198 = 0;\n  let total199 = 0;\n  let total200 = 0;\n  let total201 = 0;\n  let total202 = 0;\n  let total203 = 0;\n  let total204 = 0;\n  let total205 = 0;\n  let total206 = 0;\n  let total207 = 0;\n  let total208 = 0;\n  let total209 = 0;\n  let total210 = 0;\n  let total211 = 0;\n  let total212 = 0;\n  let total213 = 0;\n  let total214 = 0;\n  let total215 = 0;\n  let total216 = 0;\n  let total217 = 0;\n  let total218 = 0;\n  let total219 = 0;\n  let total220 = 0;\n  let total221 = 0;\n  let total222 = 0;\n  let total223 = 0;\n  let total224 = 0;\n  let total225 = 0;\n  let total226 = 0;\n  let total227 = 0;\n  let total228 = 0;\n  let total229 = 0;\n  let total230 = 0;\n  let total231 = 0;\n  let total232 = 0;\n  let total233 = 0;\n  let total234 = 0;\n  let total235 = 0;\n  let total236 = 0;\n  let total237 = 0;\n  let total238 = 0;\n  let total239 = 0;\n  let total240 = 0;\n  let total241 = 0;\n  let total242 = 0;\n  let total243 = 0;\n  let total244 = 0;\n  let total245 = 0;\n  let total246 = 0;\n  let total247 = 0;\n  let total248 = 0;\n  let total249 = 0;\n  let total250 = 0;\n  let total251 = 0;\n  let total252 = 0;\n  let total253 = 0;\n  let total254 = 0;\n  let total255 = 0;\n  let total256 = 0;\n  let total257 = 0;\n"}
{"task_id": "JavaScript/160", "prompt": "/*\n  give two lists operator, and operand. The inaugural list give birth basic algebra operation, and \n   the second list is a list of integers. practice the two given lists to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   accession (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give two lists operator, and operand. The inaugural list give birth basic algebra operation, and \n   the second list is a list of integers. practice the two given lists to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   accession (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  if (operatorLength < operandLength) {\n    throw new Error('Operand length should be greater than or equal to operator length');\n  }\n  for (let i = 0; i < operatorLength; i++) {\n    result += operator[i] * operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, operand and result return true if both lists are equal, false otherwise.\n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n  operand = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  \n  operator = ['+', '*', '*', '*"}
{"task_id": "JavaScript/161", "prompt": "/*You are give a string s.\n   if s[i] is a letter, overrule its character from lower to upper or vise versa, \n   otherwise retain it as it is. \n   If the string hold no letter, invert the drawstring. \n   The affair should return the result chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are give a string s.\n   if s[i] is a letter, overrule its character from lower to upper or vise versa, \n   otherwise retain it as it is. \n   If the string hold no letter, invert the drawstring. \n   The affair should return the result chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = []\n  let chain = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let "}
{"task_id": "JavaScript/162", "prompt": "/*\n  give a string 'text', return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give a string 'text', return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5Hex = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexString = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5HexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringArray = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5HexStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringArrayString = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5HexStringArrayString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringArrayStringArray = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5HexStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringArrayStringArrayString = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5HexStringArrayStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringArrayStringArrayStringArray = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5HexStringArrayStringArrayStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringArrayStringArrayStringArrayStringArray = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5HexStringArrayStringArrayStringArrayStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringArrayStringArrayStringArrayStringArrayStringArray = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5HexStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = (text) => {\n  if (!text) return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hashish equivalent drawstring. \n   If 'text' is an empty bowed stringed instrument, return null.\n\n  >>> md5HexStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray"}
{"task_id": "JavaScript/163", "prompt": "/*\n  give two positive integer a and b, return the tied finger between a\n   and b, in ascend holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  give two positive integer a and b, return the tied finger between a\n   and b, in ascend holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (true) {\n    const t = generateFinger(i, j);\n    if (t === i) {\n      result.push(i);\n      i = j;\n      j = t;\n    } else if (t === j) {\n      result.push(j);\n      j = i;\n      i = t;\n    } else {\n      result.push(i);\n      result.push(j);\n      i = j;\n      j = t;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a finger index i and j from generateFinger, return the tied finger between\n  i and j. Return undefined if there is no tied finger.\n\n  For example:\n  generateFinger(2, 4) => 2\n  generateFinger(4, 2) => undefined\n  generateFinger(2, 4) => undefined\n  generateFinger(4, 2) => undefined\n  */\nconst generateFinger = (i, j) => {\n  const result = [];\n  let i = i;\n  let j = j;\n  while (true) {\n    const t = generateFingerPair(i, j);\n    if (t === i) {\n      result.push(i);\n      i = j;\n      j = t;\n    } else if (t === j) {\n      result.push(j);\n      j = i;\n      i = t;\n    } else {\n      result.push(i);\n      result.push(j);\n      i = j;\n      j = t;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a pair of finger index i and j, return the tied finger pair between them. Return\n  undefined if there is no tied finger pair.\n\n  For example:\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  */\nconst generateFingerPair = (i, j) => {\n  const result = [];\n  let i = i;\n  let j = j;\n  while (true) {\n    const t = generateFingerPair(i, j);\n    if (t === i) {\n      result.push(i);\n      i = j;\n      j = t;\n    } else if (t === j) {\n      result.push(j);\n      j = i;\n      i = t;\n    } else {\n      result.push(i);\n      result.push(j);\n      i = j;\n      j = t;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a pair of finger index i and j, return the tied finger pair between them. Return\n  undefined if there is no tied finger pair.\n\n  For example:\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  */\nconst generateFingerPairs = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (true) {\n    const t = generateFingerPair(i, j);\n    if (t === i) {\n      result.push(i);\n      i = j;\n      j = t;\n    } else if (t === j) {\n      result.push(j);\n      j = i;\n      i = t;\n    } else {\n      result.push(i);\n      result.push(j);\n      i = j;\n      j = t;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a pair of finger index i and j, return the tied finger pair between them. Return\n  undefined if there is no tied finger pair.\n\n  For example:\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  */\nconst generateFingerPairs = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (true) {\n    const t = generateFingerPair(i, j);\n    if (t === i) {\n      result.push(i);\n      i = j;\n      j = t;\n    } else if (t === j) {\n      result.push(j);\n      j = i;\n      i = t;\n    } else {\n      result.push(i);\n      result.push(j);\n      i = j;\n      j = t;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a pair of finger index i and j, return the tied finger pair between them. Return\n  undefined if there is no tied finger pair.\n\n  For example:\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  */\nconst generateFingerPairs = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (true) {\n    const t = generateFingerPair(i, j);\n    if (t === i) {\n      result.push(i);\n      i = j;\n      j = t;\n    } else if (t === j) {\n      result.push(j);\n      j = i;\n      i = t;\n    } else {\n      result.push(i);\n      result.push(j);\n      i = j;\n      j = t;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a pair of finger index i and j, return the tied finger pair between them. Return\n  undefined if there is no tied finger pair.\n\n  For example:\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  */\nconst generateFingerPairs = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (true) {\n    const t = generateFingerPair(i, j);\n    if (t === i) {\n      result.push(i);\n      i = j;\n      j = t;\n    } else if (t === j) {\n      result.push(j);\n      j = i;\n      i = t;\n    } else {\n      result.push(i);\n      result.push(j);\n      i = j;\n      j = t;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a pair of finger index i and j, return the tied finger pair between them. Return\n  undefined if there is no tied finger pair.\n\n  For example:\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  */\nconst generateFingerPairs = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (true) {\n    const t = generateFingerPair(i, j);\n    if (t === i) {\n      result.push(i);\n      i = j;\n      j = t;\n    } else if (t === j) {\n      result.push(j);\n      j = i;\n      i = t;\n    } else {\n      result.push(i);\n      result.push(j);\n      i = j;\n      j = t;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a pair of finger index i and j, return the tied finger pair between them. Return\n  undefined if there is no tied finger pair.\n\n  For example:\n  generateFingerPair(2, 4) => [2, 4]\n  generateFingerPair(4, 2) => undefined\n  generateFingerPair(2, 4) => [2, 4]\n  "}
