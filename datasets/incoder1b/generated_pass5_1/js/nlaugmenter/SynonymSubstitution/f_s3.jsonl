{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance < 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZeroOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZeroOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZeroOrZeroOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (numbers, threshold) => {\n  return numbers.some(number => {\n    const distance = Math.abs(number - threshold);\n    return distance <= 0 || distance >= 0.5;\n  });\n};\n\n/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = paren_groups.map(group => group.replace(/\\)/g, ''));\n  return paren_group_strings;\n}\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = paren_groups.map(group => group.replace(/\\)/g, ''));\n  return paren_group_strings;\n}\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces_2 = separateParenGroupsNoSpaces;\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces_3 = separateParenGroupsNoSpaces;\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces_4 = separateParenGroupsNoSpaces;\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces_5 = separateParenGroupsNoSpaces;\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces_6 = separateParenGroupsNoSpaces;\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces_7 = separateParenGroupsNoSpaces;\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces_8 = separateParenGroupsNoSpaces;\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces_9 = separateParenGroupsNoSpaces;\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces_10 = separateParenGroupsNoSpaces;\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces_11 = separateParenGroupsNoSpaces;\n\n/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* discover the short palindrome that begin with a provide string.\n   Algorithm idea is simple: \n   - line up the longest suffix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that derive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* discover the short palindrome that begin with a provide string.\n   Algorithm idea is simple: \n   - line up the longest suffix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that derive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = ''\n  let longestSuffix = ''\n  let longestPrefix = ''\n  let longestSuffixLength = 0\n  let longestPrefixLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let longestPrefixLengthLength = 0\n  let longestSuffixLengthLength = 0\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n degree of stone. \n   The inaugural degree experience n stones. \n   The issue of stones in the adjacent degree is: \n       - the next leftover number if n is odd. \n       - the future even number if n is even. \n   Return the act of stones in each level in a list, where component at index \n   i typify the issue of stone in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n degree of stone. \n   The inaugural degree experience n stones. \n   The issue of stones in the adjacent degree is: \n       - the next leftover number if n is odd. \n       - the future even number if n is even. \n   Return the act of stones in each level in a list, where component at index \n   i typify the issue of stone in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let currentLevel = [];\n  let currentLevelIndex = 0;\n  let currentLevelSize = 0;\n  let currentLevelSizeIndex = 0;\n  let currentLevelSizeSize = 0;\n  let currentLevelSizeSizeIndex = 0;\n  let currentLevelSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSizeSizeIndex = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = 0;\n  let currentLevelSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength2 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength3 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength4 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength5 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength6 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength7 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength8 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength9 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength10 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength11 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength12 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. Your undertaking is \n   to count the number of words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\".length\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\".length\n  */\nconst wordsLength13 = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of lyrics. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two convinced numbers x and y and reelect the \n   big even integer number that embody in the compass [x, y] inclusive. If \n   there's no such issue, then the routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This function takes two convinced numbers x and y and reelect the \n   big even integer number that embody in the compass [x, y] inclusive. If \n   there's no such issue, then the routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integer n and m, and your task is to compute the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and change that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integer n and m, and your task is to compute the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and change that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let temp = 0;\n  let count = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;\n  let temp282 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integer x. return a sorted list of all \n   elements that hasn't any tied finger. \n\n   Note: Returned list should be screen in increasing ordering. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integer x. return a sorted list of all \n   elements that hasn't any tied finger. \n\n   Note: Returned list should be screen in increasing ordering. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let seen = {};\n  \n  x.forEach((x) => {\n    if (seen[x]) {\n      return;\n    }\n    seen[x] = true;\n    result.push(x);\n  });\n  \n  return result;\n};\n\nmodule.exports = uniqueDigits;\n\n},{}],4:[function(require,module,exports){\n/*\n  Given an array of integers, return an array containing all unique \n  elements. \n  \n  Note: \n  >>> unique([1,2,3])\n  [1,2,3]\n  >>> unique([1,2,2,3])\n  [1,2,3]\n  >>> unique([1,2,2,3,3,3])\n  [1,2,2,3,3,3]\n  >>> unique([1,2,2,3,3,3,3])\n  [1,2,2,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n  >>> unique([1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])\n  [1,2,2,3,3,3,3,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integer, sort the integers that are between 1 and 9 inclusive, \n   change by reversal the resulting array, and then supplant each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integer, sort the integers that are between 1 and 9 inclusive, \n   change by reversal the resulting array, and then supplant each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  const rev = arr.reverse();\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const rev = rev.map((e, i) => e + i);\n  const re", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that take n as a parameter, \n   and reelect a list of size n, such that the value of the component at exponent i be the factorial of i if i is even \n   or the sum of act from 1 to i otherwise. \n   i begin from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that take n as a parameter, \n   and reelect a list of size n, such that the value of the component at exponent i be the factorial of i if i is even \n   or the sum of act from 1 to i otherwise. \n   i begin from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let act = []\n  let res = []\n  for (let i = 1; i <= n; i++) {\n    act.push(i)\n  }\n  for (let i = 0; i < act.length; i++) {\n    if (i % 2 === 0) {\n      res.push(act[i] * i)\n    } else {\n      res.push(act[i] + res[res.length - 1])\n    }\n  }\n  return res\n}\n\n/* Implement the function g that take n as a parameter, \n   and reelect a list of size n, such that the value of the component at exponent i be the sum of act from 1 to i \n   if i is even or act from 1 to i otherwise. \n   i begin from 1. \n   the sum of act from 1 to i is the sum of act from 1 to i (1 * 2 + 2 * 3 + 3 * 4 + 4 * 5 + 5 * 6 + 6 * 7 + 7 * 8 + 8 * 9 + 9 * 10 + 10 * 11 + 11 * 12 + 12 * 13 + 13 * 14 + 14 * 15).\n  Example:\n  g(5) == [6, 12, 24, 36, 56, 108, 152]\n  */\nconst g = (n) => {\n  let act = []\n  let res = []\n  for (let i = 1; i <= n; i++) {\n    act.push(i)\n  }\n  for (let i = 0; i < act.length; i++) {\n    if (i % 2 === 0) {\n      res.push(act[i] + res[res.length - 1])\n    } else {\n      res.push(act[i] + res[res.length - 1])\n    }\n  }\n  return res\n}\n\n/* Implement the function h that take n as a parameter, \n   and reelect a list of size n, such that the value of the component at exponent i be the sum of act from 1 to i \n   if i is even or act from 1 to i otherwise. \n   i begin from 1. \n   the sum of act from 1 to i is the sum of act from 1 to in  */\nconst h = (n) => {\n  let act = []\n  let res = []\n  for (let i = 1; i <= n; i++) {\n    act.push(i)\n  }\n  for (let i = 0; i < act.length; i++) {\n    if (i % 2 === 0) {\n      res.push(act[i] + res[res.length - 1])\n    } else {\n      res.push(act[i] + res[res.length - 1])\n    }\n  }\n  return res\n}\n\n/* Implement the function h that take n as a parameter, \n   and reele", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i);\n  const evenPalindromePairs = evenPalindromes.map((_, i) => [evenPalindromes[i], i]);\n  const oddPalindromePairs = oddPalindromes.map((_, i) => [oddPalindromes[i], i]);\n  const evenPalindromePairsMap = evenPalindromePairs.reduce((acc, pair) => {\n    acc[pair[0]] = pair[1];\n    return acc;\n  }, {});\n  const oddPalindromePairsMap = oddPalindromePairs.reduce((acc, pair) => {\n    acc[pair[0]] = pair[1];\n    return acc;\n  }, {});\n  const evenPalindromePairsMapReversed = Object.keys(evenPalindromePairsMap).map(\n    key => [evenPalindromePairsMap[key], key]\n  );\n  const oddPalindromePairsMapReversed = Object.keys(oddPalindromePairsMap).map(\n    key => [oddPalindromePairsMap[key], key]\n  );\n  const evenPalindromePairsMapReversedMap = evenPalindromePairsMapReversed.reduce((acc, pair) => {\n    acc[pair[0]] = pair[1];\n    return acc;\n  }, {});\n  const oddPalindromePairsMapReversedMap = oddPalindromePairsMapReversed.reduce((acc, pair) => {\n    acc[pair[0]] = pair[1];\n    return acc;\n  }, {});\n  const evenPalindromePairsMapReversedMapReversed = Object.keys(evenPalindromePairsMapReversedMap).map(\n    key => [evenPalindromePairsMapReversedMap[key], key]\n  );\n  const oddPalindromePairsMapReversedMapReversed = Object.keys(oddPalindromePairsMapReversedMap).map(\n    key => [oddPalindromePairsMapReversedMap[key], key]\n  );\n  const evenPalindromePairsMapReversedMapReversedMap = evenPalindromePairsMapReversedMapReversed.reduce((acc, pair) => {\n    acc[pair[0]] = pair[1];\n    return acc;\n  }, {});\n  const oddPalindromePairsMapReversedMapReversedMap = oddPalindromePairsMapReversedMapReversed.reduce((acc, pair) => {\n    acc[pair[0]] = pair[1];\n    return acc;\n  }, {});\n  const evenPalindromePairsMapReversedMapReversedMapReversed = Object.keys(evenPalindromePairsMapReversedMapReversedMapReversedMap).map(\n    key => [evenPalindromePairsMapReversedMapReversedMapReversedMap[key], key]\n  );\n  const oddPalindromePairsMapReversedMapReversedMapReversedMap = oddPalindromePairsMapReversedMapReversedMapReversed.reduce((acc, pair) => {\n    acc[pair[0]] = pair[1];\n    return acc;\n  }, {});\n  const evenPalindromePairsMapReversedMapReversedMapReversedMapReversed = Object.keys(evenPalindromePairsMapReversedMapReversedMapReversedMapReversedMap).map(\n    key => [evenPalindromePairsMapReversedMapReversedMapReversedMapReversedMap[key], key]\n  );\n  const oddPalindromePairsMapReversedMapReversedMapReversedMapReversedMap = oddPalindromePairsMapReversedMapReversedMapReversedMapReversed.reduce((acc, pair) => {\n    acc[pair[0]] = pair[1];\n    return acc;\n  }, {});\n  const evenPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversed = Object.keys(evenPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed).map(\n    key => [evenPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMap[key], key]\n  );\n  const oddPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed = Object.keys(oddPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed).map(\n    key => [oddPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap[key], key]\n  );\n  const evenPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed = Object.keys(evenPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed).map(\n    key => [evenPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap[key], key]\n  );\n  const oddPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed = Object.keys(oddPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed).map(\n    key => [oddPalindromePairsMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    if (sign < 0) {\n      num = num * sign + arr[i];\n    } else {\n      num = num + arr[i];\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    if (sign < 0) {\n      num = num * sign + arr[i];\n    } else {\n      num = num + arr[i];\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    if (sign < 0) {\n      num = num * sign + arr[i];\n    } else {\n      num = num + arr[i];\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    if (sign < 0) {\n      num = num * sign + arr[i];\n    } else {\n      num = num + arr[i];\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    if (sign < 0) {\n      num = num * sign + arr[i];\n    } else {\n      num = num + arr[i];\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    if (sign < 0) {\n      num = num * sign + arr[i];\n    } else {\n      num = num + arr[i];\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    if (sign < 0) {\n      num = num * sign + arr[i];\n    } else {\n      num = num + arr[i];\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    if (sign < 0) {\n      num = num * sign + arr[i];\n    } else {\n      num = num + arr[i];\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    if (sign < 0) {\n      num = num * sign + arr[i];\n    } else {\n      num = num + arr[i];\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = -1;\n    }\n    if (sign < 0) {\n      num = num * sign + arr[i];\n    } else {\n      num = num + arr[i];\n    }\n  }\n  return num;\n};\n\n/*\n  Write a function countNums which take an array of integer and return \n   the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integer arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly order. Your undertaking is to determine if \n   it is potential to catch an array classify in non - decreasing decree by performing \n   the trace operation on the given array: \n       You are allow to perform correct shift operation any act of time. \n  \n   One right switch mathematical process mean shifting all component of the array by one \n   position in the right guidance. The concluding chemical element of the array will be affect to \n   the starting position in the array i.e. 0th index. \n\n   If it embody possible to obtain the grouped array by performing the above process \n   then return true else return false. \n   If the give array is empty then return true. \n\n   Note: The given list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integer arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly order. Your undertaking is to determine if \n   it is potential to catch an array classify in non - decreasing decree by performing \n   the trace operation on the given array: \n       You are allow to perform correct shift operation any act of time. \n  \n   One right switch mathematical process mean shifting all component of the array by one \n   position in the right guidance. The concluding chemical element of the array will be affect to \n   the starting position in the array i.e. 0th index. \n\n   If it embody possible to obtain the grouped array by performing the above process \n   then return true else return false. \n   If the give array is empty then return true. \n\n   Note: The given list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let isPossible = arr.reduce((acc, val, index) => {\n    if (index === arr.length - 1) {\n      acc.push(true);\n    } else {\n      acc.push(false);\n    }\n    return acc;\n  }, []);\n  return isPossible;\n};\n\n/*\n  Given an array arr of N integers, return true if it is possible to \n  obtain the grouped array by performing the above process \n  \n  Explanation: \n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBallGroup = (arr) => {\n  let isPossible = arr.reduce((acc, val, index) => {\n    if (index === arr.length - 1) {\n      acc.push(true);\n    } else {\n      acc.push(false);\n    }\n    return acc;\n  }, []);\n  return isPossible;\n};\n\n/*\n  Given an array arr of N integers, return true if it is possible to \n  obtain the grouped array by performing the above process \n  \n  Explanation: \n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBallGroup2 = (arr) => {\n  let isPossible = arr.reduce((acc, val, index) => {\n    if (index === arr.length - 1) {\n      acc.push(true);\n    } else {\n      acc.push(false);\n    }\n    return acc;\n  }, []);\n  return isPossible;\n};\n\n/*\n  Given an array arr of N integers, return true if it is possible to \n  obtain the grouped array by performing the above process \n  \n  Explanation: \n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBallGroup3 = (arr) => {\n  let isPossible = arr.reduce((acc, val, index) => {\n    if (index === arr.length - 1) {\n      acc.push(true);\n    } else {\n      acc.push(false);\n    }\n    return acc;\n  }, []);\n  return isPossible;\n};\n\n/*\n  Given an array arr of N integers, return true if it is possible to \n  obtain the grouped array by performing the above process \n  \n  Explanation: \n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBallGroup4 = (arr) => {\n  let isPossible = arr.reduce((acc, val, index) => {\n    if (index === arr.length - 1) {\n      acc.push(true);\n    } else {\n      acc.push(false);\n    }\n    return acc;\n  }, []);\n  return isPossible;\n};\n\n/*\n  Given an array arr of N integers, return true if it is possible to \n  obtain the grouped array by performing the above process \n  \n  Explanation: \n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBallGroup5 = (arr) => {\n  let isPossible = arr.reduce((acc, val, index) => {\n    if (index === arr.length - 1) {\n      acc.push(true);\n    } else {\n      acc.push(false);\n    }\n    return acc;\n  }, []);\n  return isPossible;\n};\n\n/*\n  Given an array arr of N integers, return true if it is possible to \n  obtain the grouped array by performing the above process \n  \n  Explanation: \n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBallGroup6 = (arr) => {\n  let isPossible = arr.reduce((acc, val, index) => {\n    if (index === arr.length - 1) {\n      acc.push(true);\n    } else {\n      acc.push(false);\n    }\n    return acc;\n  }, []);\n  return isPossible;\n};\n\n/*\n  Given an array arr of N integers, return true if it is possible to \n  obtain the grouped array by performing the above process \n  \n  Explanation: \n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBallGroup7 = (arr) => {\n  let isPossible = arr.reduce((acc, val, index", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = ''\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i)\n  }\n  return result\n}\n\n/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a affair that takes two tilt of number, \n   and settle whether it is potential to do an exchange of component \n   between them to produce lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchange component between lst1 and lst2.\n   If it be possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to exist even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a affair that takes two tilt of number, \n   and settle whether it is potential to do an exchange of component \n   between them to produce lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchange component between lst1 and lst2.\n   If it be possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to exist even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1Copy = lst1.slice();\n  let lst2Copy = lst2.slice();\n  let lst1Length = lst1Copy.length;\n  let lst2Length = lst2Copy.length;\n  let lst1Index = 0;\n  let lst2Index = 0;\n  let lst1Index2 = 0;\n  let lst2Index2 = 0;\n  let lst1Index3 = 0;\n  let lst2Index3 = 0;\n  let lst1Index4 = 0;\n  let lst2Index4 = 0;\n  let lst1Index5 = 0;\n  let lst2Index5 = 0;\n  let lst1Index6 = 0;\n  let lst2Index6 = 0;\n  let lst1Index7 = 0;\n  let lst2Index7 = 0;\n  let lst1Index8 = 0;\n  let lst2Index8 = 0;\n  let lst1Index9 = 0;\n  let lst2Index9 = 0;\n  let lst1Index10 = 0;\n  let lst2Index10 = 0;\n  let lst1Index11 = 0;\n  let lst2Index11 = 0;\n  let lst1Index12 = 0;\n  let lst2Index12 = 0;\n  let lst1Index13 = 0;\n  let lst2Index13 = 0;\n  let lst1Index14 = 0;\n  let lst2Index14 = 0;\n  let lst1Index15 = 0;\n  let lst2Index15 = 0;\n  let lst1Index16 = 0;\n  let lst2Index16 = 0;\n  let lst1Index17 = 0;\n  let lst2Index17 = 0;\n  let lst1Index18 = 0;\n  let lst2Index18 = 0;\n  let lst1Index19 = 0;\n  let lst2Index19 = 0;\n  let lst1Index20 = 0;\n  let lst2Index20 = 0;\n  let lst1Index21 = 1;\n  let lst2Index21 = 1;\n  let lst1Index22 = 1;\n  let lst2Index22 = 1;\n  let lst1Index23 = 1;\n  let lst2Index23 = 1;\n  let lst1Index24 = 1;\n  let lst2Index24 = 1;\n  let lst1Index25 = 1;\n  let lst2Index25 = 1;\n  let lst1Index26 = 1;\n  let lst2Index26 = 1;\n  let lst1Index27 = 1;\n  let lst2Index27 = 1;\n  let lst1Index28 = 1;\n  let lst2Index28 = 1;\n  let lst1Index29 = 1;\n  let lst2Index29 = 1;\n  let lst1Index30 = 1;\n  let lst2Index30 = 1;\n  let lst1Index31 = 1;\n  let lst2Index31 = 1;\n  let lst1Index32 = 1;\n  let lst2Index32 = 1;\n  let lst1Index33 = 1;\n  let lst2Index33 = 1;\n  let lst1Index34 = 1;\n  let lst2Index34 = 1;\n  let lst1Index35 = 1;\n  let lst2Index35 = 1;\n  let lst1Index36 = 1;\n  let lst2Index36 = 1;\n  let lst1Index37 = 1;\n  let lst2Index37 = 1;\n  let lst1Index38 = 1;\n  let lst2Index38 = 1;\n  let lst1Index39 = 1;\n  let lst2Index39 = 1;\n  let lst1Index40 = 1;\n  let lst2Index40 = 1;\n  let lst1Index41 = 1;\n  let lst2Index41 = 1;\n  let lst1Index42 = 1;\n  let lst2Index42 = 1;\n  let lst1Index43 = 1;\n  let lst2Index43 = 1;\n  let lst1Index44 = 1;\n  let lst2Index44 = 1;\n  let lst1Index45 = 1;\n  let lst2Index45 = 1;\n  let lst1Index46 = 1;\n  let lst2Index46 = 1;\n  let lst1Index47 = 1;\n  let lst2Index47 = 1;\n  let lst1Index48 = 1;\n  let lst2Index48 = 1;\n  let lst1Index49 = 1;\n  let lst2Index49 = 1;\n  let lst1Index50 = 1;\n  let lst2Index50 = 1;\n  let lst1Index51 = 1;\n  let lst2Index51 = 1;\n  let lst1Index52 = 1;\n  let lst2Index52 = 1;\n  let lst1Index53 = 1;\n  let lst2Index53 = 1;\n  let lst1Index54 = 1;\n  let lst2Index54 = 1;\n  let lst1Index55 = 1;\n  let lst2Index55 = 1;\n  let lst1Index56 = 1;\n  let lst2Index56 = 1;\n  let lst1Index57 = 1;\n  let lst2Index57 = 1;\n  let lst1Index58 = 1;\n  let lst2Index58 = 1;\n  let lst1Index59 = 1;\n  let lst2Index59 = 1;\n  let lst1Index60 = 1;\n  let lst2Index60 = 1;\n  let lst1Index61 = 1;\n  let lst2Index61 = 1;\n  let lst1Index62 = 1;\n  let lst2Index62 = 1;\n  let lst1Index63 = 1;\n  let lst2Index63 = 1;\n  let lst1Index64 = 1;\n  let lst2Index64 = 1;\n  let lst1Index65 = 1;\n  let lst2Index65 = 1;\n  let lst1Index66 = 1;\n  let lst2Index66 = 1;\n  let lst1Index67 = 1;\n  let lst2Index67 = 1;\n  let lst1Index68 = 1;\n  let lst2Index68 = 1;\n  let lst1Index69 = 1;\n  let lst2Index69 = 1;\n  let lst1Index70 = 1;\n  let lst2Index70 = 1;\n  let lst1Index71 = 1;\n  let lst2Index71 = 1;\n  let lst1Index72 = 1;\n  let lst2Index72 = 1;\n  let lst1Index73 = 1;\n  let lst2Index73 = 1;\n  let lst1Index74 = 1;\n  let lst2Index74 = 1;\n  let lst1Index75 = 1;\n  let lst2Index75 = 1;\n  let lst1Index76 = 1;\n  let lst2Index76 = 1;\n  let lst1Index77 = 1;\n  let lst2Index77 = 1;\n  let lst1Index78 = 1;\n  let lst2Index78 = 1;\n  let lst1Index79 = 1;\n  let lst2Index79 = 1;\n  let lst1Index80 = 1;\n  let lst2Index80 = 1;\n  let lst1Index81 = 1;\n  let lst2Index81 = 1;\n  let lst1Index82 = 1;\n  let lst2Index82 = 1;\n  let lst1Index83 = 1;\n  let lst2Index83 = 1;\n  let lst1Index84 = 1;\n  let lst2Index84 = 1;\n  let lst1Index85 = 1;\n  let lst2Index85 = 1;\n  let lst1Index86 = 1;\n  let lst2Index86 = 1;\n  let lst1Index87 = 1;\n  let lst2Index87 = 1;\n  let lst1Index88 = 1;\n  let lst2Index88 = 1;\n  let lst1Index89 = 1;\n  let lst2Index89 = 1;\n  let lst1Index90 = 1;\n  let lst2Index90 = 1;\n  let lst1Index91 = 1;\n  let lst2Index91 = 1;\n  let lst1Index92 = 1;\n  let lst2Index92 = 1;\n  let lst1Index93 = 1;\n  let lst2Index93 = 1;\n  let lst1Index94 = 1;\n  let lst2Index94 = 1;\n  let lst1Index95 = 1;\n  let lst2Index95 = 1;\n  let lst1Index96 = 1;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a outer space separated small letter letter, return a dictionary \n   of the letter with the most repeat and incorporate the correspond count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a outer space separated small letter letter, return a dictionary \n   of the letter with the most repeat and incorporate the correspond count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let letterMap = {};\n  let letterCountMap = {};\n  let letterCount = 0;\n  let letterCountMapValue = 0;\n  let letterCountMapValue2 = 0;\n  let letterCountMapValue3 = 0;\n  let letterCountMapValue4 = 0;\n  let letterCountMapValue5 = 0;\n  let letterCountMapValue6 = 0;\n  let letterCountMapValue7 = 0;\n  let letterCountMapValue8 = 0;\n  let letterCountMapValue9 = 0;\n  let letterCountMapValue10 = 0;\n  let letterCountMapValue11 = 0;\n  let letterCountMapValue12 = 0;\n  let letterCountMapValue13 = 0;\n  let letterCountMapValue14 = 0;\n  let letterCountMapValue15 = 0;\n  let letterCountMapValue16 = 0;\n  let letterCountMapValue17 = 0;\n  let letterCountMapValue18 = 0;\n  let letterCountMapValue19 = 0;\n  let letterCountMapValue20 = 0;\n  let letterCountMapValue21 = 0;\n  let letterCountMapValue22 = 0;\n  let letterCountMapValue23 = 0;\n  let letterCountMapValue24 = 0;\n  let letterCountMapValue25 = 0;\n  let letterCountMapValue26 = 0;\n  let letterCountMapValue27 = 0;\n  let letterCountMapValue28 = 0;\n  let letterCountMapValue29 = 0;\n  let letterCountMapValue30 = 0;\n  let letterCountMapValue31 = 0;\n  let letterCountMapValue32 = 0;\n  let letterCountMapValue33 = 0;\n  let letterCountMapValue34 = 0;\n  let letterCountMapValue35 = 0;\n  let letterCountMapValue36 = 0;\n  let letterCountMapValue37 = 0;\n  let letterCountMapValue38 = 0;\n  let letterCountMapValue39 = 0;\n  let letterCountMapValue40 = 0;\n  let letterCountMapValue41 = 0;\n  let letterCountMapValue42 = 0;\n  let letterCountMapValue43 = 0;\n  let letterCountMapValue44 = 0;\n  let letterCountMapValue45 = 0;\n  let letterCountMapValue46 = 0;\n  let letterCountMapValue47 = 0;\n  let letterCountMapValue48 = 0;\n  let letterCountMapValue49 = 0;\n  let letterCountMapValue50 = 0;\n  let letterCountMapValue51 = 0;\n  let letterCountMapValue52 = 0;\n  let letterCountMapValue53 = 0;\n  let letterCountMapValue54 = 0;\n  let letterCountMapValue55 = 0;\n  let letterCountMapValue56 = 0;\n  let letterCountMapValue57 = 0;\n  let letterCountMapValue58 = 0;\n  let letterCountMapValue59 = 0;\n  let letterCountMapValue60 = 0;\n  let letterCountMapValue61 = 0;\n  let letterCountMapValue62 = 0;\n  let letterCountMapValue63 = 0;\n  let letterCountMapValue64 = 0;\n  let letterCountMapValue65 = 0;\n  let letterCountMapValue66 = 0;\n  let letterCountMapValue67 = 0;\n  let letterCountMapValue68 = 0;\n  let letterCountMapValue69 = 0;\n  let letterCountMapValue70 = 0;\n  let letterCountMapValue71 = 0;\n  let letterCountMapValue72 = 0;\n  let letterCountMapValue73 = 0;\n  let letterCountMapValue74 = 0;\n  let letterCountMapValue75 = 0;\n  let letterCountMapValue76 = 0;\n  let letterCountMapValue77 = 0;\n  let letterCountMapValue78 = 0;\n  let letterCountMapValue79 = 0;\n  let letterCountMapValue80 = 0;\n  let letterCountMapValue81 = 0;\n  let letterCountMapValue82 = 0;\n  let letterCountMapValue83 = 0;\n  let letterCountMapValue84 = 0;\n  let letterCountMapValue85 = 0;\n  let letterCountMapValue86 = 0;\n  let letterCountMapValue87 = 0;\n  let letterCountMapValue88 = 0;\n  let letterCountMapValue89 = 0;\n  let letterCountMapValue90 = 0;\n  let letterCountMapValue91 = 0;\n  let letterCountMapValue92 = 0;\n  let letterCountMapValue93 = 0;\n  let letterCountMapValue94 = 0;\n  let letterCountMapValue95 = 0;\n  let letterCountMapValue96 = 0;\n  let letterCountMapValue97 = 0;\n  let letterCountMapValue98 = 0;\n  let letterCountMapValue99 = 0;\n  let letterCountMapValue100 = 0;\n  let letterCountMapValue101 = 0;\n  let letterCountMapValue102 = 0;\n  let letterCountMapValue103 = 0;\n  let letterCountMapValue104 = 0;\n  let letterCountMapValue105 = 0;\n  let letterCountMapValue106 = 0;\n  let letterCountMapValue107 = 0;\n  let letterCountMapValue108 = 0;\n  let letterCountMapValue109 = 0;\n  let letterCountMapValue110 = 0;\n  let letterCountMapValue111 = 0;\n  let letterCountMapValue112 = 0;\n  let letterCountMapValue113 = 0;\n  let letterCountMapValue114 = 0;\n  let letterCountMapValue115 = 0;\n  let letterCountMapValue116 = 0;\n  let letterCountMapValue117 = 0;\n  let letterCountMapValue118 = 0;\n  let letterCountMapValue119 = 0;\n  let letterCountMapValue120 = 0;\n  let letterCountMapValue121 = 0;\n  let letterCountMapValue122 = 0;\n  let letterCountMapValue123 = 0;\n  let letterCountMapValue124 = 0;\n  let letterCountMapValue125 = 0;\n  let letterCountMapValue126 = 0;\n  let letterCountMapValue127 = 0;\n  let letterCountMapValue128 = 0;\n  let letterCountMapValue129 = 0;\n  let letterCountMapValue130 = 0;\n  let letterCountMapValue131 = 0;\n  let letterCountMapValue132 = 0;\n  let letterCountMapValue133 = 0;\n  let letterCountMapValue134 = 0;\n  let letterCountMapValue135 = 0;\n  let letterCountMapValue136 = 0;\n  let letterCountMapValue137 = 0;\n  let letterCountMapValue138 = 0;\n  let letterCountMapValue139 = 0;\n  let letterCountMapValue140 = 0;\n  let letterCountMapValue141 = 0;\n  let letterCountMapValue142 = 0;\n  let letterCountMapValue143 = 0;\n  let letterCountMapValue144 = 0;\n  let letterCountMapValue145 = 0;\n  let letterCountMapValue146 = 0;\n  let letterCountMapValue147 = 0;\n  let letterCountMapValue148 = 0;\n  let letterCountMapValue149 = 0;\n  let letterCountMapValue150 = 0;\n  let letterCountMapValue151 = 0;\n  let letterCountMapValue152 = 0;\n  let letterCountMapValue153 = 0;\n  let letterCountMapValue154 = 0;\n  let letterCountMapValue155 = 0;\n  let letterCountMapValue156 = 0;\n  let letterCountMapValue157 = 0;\n  let letterCountMapValue158 = 0;\n  let letterCountMapValue159 = 0;\n  let letterCountMapValue160 = 0;\n  let letterCountMapValue161 = 0;\n  let letterCountMapValue162 = 0;\n  let letterCountMapValue163 = 0;\n  let letterCountMapValue164 = 0;\n  let letterCountMapValue165 = 0;\n  let letterCountMapValue166 = 0;\n  let letterCountMapValue167 = 0;\n  let letterCountMapValue168 = 0;\n  let letterCountMapValue169 = 0;\n  let letterCountMapValue170 = 0;\n  let letterCountMapValue171 = 0;\n  let letterCountMapValue172 = 0;\n  let letterCountMapValue173 = 0;\n  let letterCountMapValue174 = 0;\n  let letterCountMapValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two string section s and c, you have to erase all the character in s that be equal to any fictional character in c\n   then match if the result chain be palindrome. \n   A string is call palindrome if it reads the same backward as forward. \n   You should return a tuple containing the resultant role drawstring and true / delusive for the bridle.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We are given two string section s and c, you have to erase all the character in s that be equal to any fictional character in c\n   then match if the result chain be palindrome. \n   A string is call palindrome if it reads the same backward as forward. \n   You should return a tuple containing the resultant role drawstring and true / delusive for the bridle.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = []\n  let str = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = ''\n  let temp2 = ''\n  let temp3 = ''\n  let temp4 = ''\n  let temp5 = ''\n  let temp6 = ''\n  let temp7 = ''\n  let temp8 = ''\n  let temp9 = ''\n  let temp10 = ''\n  let temp11 = ''\n  let temp12 = ''\n  let temp13 = ''\n  let temp14 = ''\n  let temp15 = ''\n  let temp16 = ''\n  let temp17 = ''\n  let temp18 = ''\n  let temp19 = ''\n  let temp20 = ''\n  let temp21 = ''\n  let temp22 = ''\n  let temp23 = ''\n  let temp24 = ''\n  let temp25 = ''\n  let temp26 = ''\n  let temp27 = ''\n  let temp28 = ''\n  let temp29 = ''\n  let temp30 = ''\n  let temp31 = ''\n  let temp32 = ''\n  let temp33 = ''\n  let temp34 = ''\n  let temp35 = ''\n  let temp36 = ''\n  let temp37 = ''\n  let temp38 = ''\n  let temp39 = ''\n  let temp40 = ''\n  let temp41 = ''\n  let temp42 = ''\n  let temp43 = ''\n  let temp44 = ''\n  let temp45 = ''\n  let temp46 = ''\n  let temp47 = ''\n  let temp48 = ''\n  let temp49 = ''\n  let temp50 = ''\n  let temp51 = ''\n  let temp52 = ''\n  let temp53 = ''\n  let temp54 = ''\n  let temp55 = ''\n  let temp56 = ''\n  let temp57 = ''\n  let temp58 = ''\n  let temp59 = ''\n  let temp60 = ''\n  let temp61 = ''\n  let temp62 = ''\n  let temp63 = ''\n  let temp64 = ''\n  let temp65 = ''\n  let temp66 = ''\n  let temp67 = ''\n  let temp68 = ''\n  let temp69 = ''\n  let temp70 = ''\n  let temp71 = ''\n  let temp72 = ''\n  let temp73 = ''\n  let temp74 = ''\n  let temp75 = ''\n  let temp76 = ''\n  let temp77 = ''\n  let temp78 = ''\n  let temp79 = ''\n  let temp80 = ''\n  let temp81 = ''\n  let temp82 = ''\n  let temp83 = ''\n  let temp84 = ''\n  let temp85 = ''\n  let temp86 = ''\n  let temp87 = ''\n  let temp88 = ''\n  let temp89 = ''\n  let temp90 = ''\n  let temp91 = ''\n  let temp92 = ''\n  let temp93 = ''\n  let temp94 = ''\n  let temp95 = ''\n  let temp96 = ''\n  let temp97 = ''\n  let temp98 = ''\n  let temp99 = ''\n  let temp100 = ''\n  let temp101 = ''\n  let temp102 = ''\n  let temp103 = ''\n  let temp104 = ''\n  let temp105 = ''\n  let temp106 = ''\n  let temp107 = ''\n  let temp108 = ''\n  let temp109 = ''\n  let temp110 = ''\n  let temp111 = ''\n  let temp112 = ''\n  let temp113 = ''\n  let temp114 = ''\n  let temp115 = ''\n  let temp116 = ''\n  let temp117 = ''\n  let temp118 = ''\n  let temp119 = ''\n  let temp120 = ''\n  let temp121 = ''\n  let temp122 = ''\n  let temp123 = ''\n  let temp124 = ''\n  let temp125 = ''\n  let temp126 = ''\n  let temp127 = ''\n  let temp128 = ''\n  let temp129 = ''\n  let temp130 = ''\n  let temp131 = ''\n  let temp132 = ''\n  let temp133 = ''\n  let temp134 = ''\n  let temp135 = ''\n  let temp136 = ''\n  let temp137 = ''\n  let temp138 = ''\n  let temp139 = ''\n  let temp140 = ''\n  let temp141 = ''\n  let temp142 = ''\n  let temp143 = ''\n  let temp144 = ''\n  let temp145 = ''\n  let temp146 = ''\n  let temp147 = ''\n  let temp148 = ''\n  let temp149 = ''\n  let temp150 = ''\n  let temp151 = ''\n  let temp152 = ''\n  let temp153 = ''\n  let temp154 = ''\n  let temp155 = ''\n  let temp156 = ''\n  let temp157 = ''\n  let temp158 = ''\n  let temp159 = ''\n  let temp160 = ''\n  let temp161 = ''\n  let temp162 = ''\n  let temp163 = ''\n  let temp164 = ''\n  let temp165 = ''\n  let temp166 = ''\n  let temp167 = ''\n  let temp168 = ''\n  let temp169 = ''\n  let temp170 = ''\n  let temp171 = ''\n  let temp172 = ''\n  let temp173 = ''\n  let temp174 = ''\n  let temp175 = ''\n  let temp176 = ''\n  let temp177 = ''\n  let temp178 = ''\n  let temp179 = ''\n  let temp180 = ''\n  let temp181 = ''\n  let temp182 = ''\n  let temp183 = ''\n  let temp184 = ''\n  let temp185 = ''\n  let temp186 = ''\n  let temp187 = ''\n  let temp188 = ''\n  let temp189 = ''\n  let temp190 = ''\n  let temp191 = ''\n  let temp192 = ''\n  let temp193 = ''\n  let temp194 = ''\n  let temp195 = ''\n  let temp196 = ''\n  let temp197 = ''\n  let temp198 = ''\n  let temp199 = ''\n  let temp200 = ''\n  let temp201 = ''\n  let temp202 = ''\n  let temp203 = ''\n  let temp204 = ''\n  let temp205 = ''\n  let temp206 = ''\n  let temp207 = ''\n  let temp208 = ''\n  let temp209 = ''\n  let temp210 = ''\n  let temp211 = ''\n  let temp212 = ''\n  let temp213 = ''\n  let temp214 = ''\n  let temp215 = ''\n  let temp216 = ''\n  let temp217 = ''\n  let temp218 = ''\n  let temp219 = ''\n  let temp220 = ''\n  let temp221 = ''\n  let temp222 = ''\n  let temp223 = ''\n  let temp224 = ''\n  let temp225 = ''\n  let temp226 = ''\n  let temp227 = ''\n  let temp228 = ''\n  let temp229 = ''\n  let temp230 = ''\n  let temp231 = ''\n  let temp232 = ''\n  let temp233 = ''\n  let temp234 = ''\n  let temp235 = ''\n  let temp236 = ''\n  let temp237 = ''\n  let temp238 = ''\n  let temp239 = ''\n  let temp240 = ''\n  let temp241 = ''\n  let temp242 = ''\n  let temp243 = ''\n  let temp244 = ''\n  let temp245 = ''\n  let temp246 = ''\n  let temp247 = ''\n  let temp248 = ''\n  let temp249 = ''\n  let temp250 = ''\n  let temp251 = ''\n  let temp252 = ''\n  let temp253 = ''\n  let temp254 = ''\n  let temp255 = ''\n  let temp256 = ''\n  let temp257 = ''\n  let temp258 = ''\n  let temp259 = ''\n  let temp260 = ''\n  let temp261 = ''\n  let temp262 = ''\n  let temp263 = ''\n  let temp264 = ''\n  let temp265 = ''\n  let temp266 = ''\n  let temp267 = ''\n  let temp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digit, return a list.\n   Each chemical element i of the end product should exist \" the numeral of odd elements in the \n   chain i of the stimulation. \" where all the i's should be substitute by the act \n   of leftover digits in the i'th chain of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digit, return a list.\n   Each chemical element i of the end product should exist \" the numeral of odd elements in the \n   chain i of the stimulation. \" where all the i's should be substitute by the act \n   of leftover digits in the i'th chain of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let nOdd = 0\n  let nEven = 0\n  let nOddOdd = 0\n  let nEvenOdd = 0\n  let nOddEven = 0\n  let nEvenEven = 0\n  let nOddOddEven = 0\n  let nEvenOddEven = 0\n  let nOddOddOddEven = 0\n  let nEvenOddOddEven = 0\n  let nOddOddOddOddEven = 0\n  let nEvenOddOddOddOddEven = 0\n  let nOddOddOddOddOddOddEven = 0\n  let nEvenOddOddOddOddOddOddOddEven = 0\n  let nOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddO", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the maximum sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the maximum sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the maximum sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the maximum sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the maximum sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the maximum sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the maximum sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the maximum sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the maximum sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integer nums, find the maximum sum of any non - empty bomber - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of well. Each row represent a individual well, \n   and each 1 in a quarrel defend a individual unit of measurement of body of water. \n   Each well has a comparable bucket that can be use to educe body of water from it, \n   and all bucket have the same capacity.\n   Your job is to use the buckets to empty the well. \n   output signal the number of time you want to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of well. Each row represent a individual well, \n   and each 1 in a quarrel defend a individual unit of measurement of body of water. \n   Each well has a comparable bucket that can be use to educe body of water from it, \n   and all bucket have the same capacity.\n   Your job is to use the buckets to empty the well. \n   output signal the number of time you want to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                const bucket = grid[i][j];\n                const bucketCapacity = capacity - bucket;\n                const bucketIndex = Math.floor(bucketCapacity / 2);\n                const bucketLeft = bucketCapacity - bucketIndex;\n                const bucketRight = bucketCapacity - bucketIndex * 2;\n                const bucketUp = bucketCapacity - bucketIndex * 2;\n                const bucketDown = bucketCapacity - bucketIndex * 2 + 1;\n                const bucketLeftUp = bucketLeft - bucketIndex;\n                const bucketLeftDown = bucketLeft - bucketIndex * 2;\n                const bucketRightUp = bucketRight - bucketIndex;\n                const bucketRightDown = bucketRight - bucketIndex * 2;\n                const bucketUpDown = bucketUp + bucketDown;\n                const bucketLeftUpDown = bucketLeftUp + bucketLeftDown;\n                const bucketRightUpDown = bucketRightUp + bucketRightDown;\n                const bucketUpDownLeft = bucketUpDown + bucketLeftDown;\n                const bucketUpDownRight = bucketUpDown + bucketRightDown;\n                const bucketLeftUpDownLeft = bucketLeftUpDown + bucketLeftDown;\n                const bucketLeftUpDownRight = bucketLeftUpDown + bucketRightDown;\n                const bucketRightUpDownLeft = bucketRightUpDown + bucketLeftDown;\n                const bucketRightUpDownRight = bucketRightUpDown + bucketRightDown;\n                const bucketUpDownLeftUp = bucketUpDownLeft - bucketIndex;\n                const bucketUpDownLeftDown = bucketUpDownLeft - bucketIndex * 2;\n                const bucketUpDownRightUp = bucketUpDownRight - bucketIndex;\n                const bucketUpDownRightDown = bucketUpDownRight - bucketIndex * 2;\n                const bucketLeftUpDownLeftUp = bucketLeftUpDownLeft - bucketIndex;\n                const bucketLeftUpDownLeftDown = bucketLeftUpDownLeft - bucketIndex * 2;\n                const bucketLeftUpDownRightUp = bucketLeftUpDownRight - bucketIndex;\n                const bucketLeftUpDownRightDown = bucketLeftUpDownRight - bucketIndex * 2;\n                const bucketRightUpDownLeftUp = bucketRightUpDownLeft - bucketIndex;\n                const bucketRightUpDownLeftDown = bucketRightUpDownLeft - bucketIndex * 2;\n                const bucketRightUpDownRightUp = bucketRightUpDownRight - bucketIndex;\n                const bucketRightUpDownRightDown = bucketRightUpDownRight - bucketIndex * 2;\n                const bucketUpDownLeftUpDown = bucketUpDownLeftUp + bucketLeftDown;\n                const bucketUpDownLeftDownDown = bucketUpDownLeftDown + bucketLeftDown;\n                const bucketUpDownRightUpDown = bucketUpDownRightUp + bucketRightDown;\n                const bucketUpDownRightDown = bucketUpDownRightDown + bucketRightDown;\n                const bucketLeftUpDownLeftUp = bucketLeftUpDownLeftUp + bucketLeftDown;\n                const bucketLeftUpDownLeftDown = bucketLeftUpDownLeftDown + bucketLeftDown;\n                const bucketLeftUpDownRightUp = bucketLeftUpDownRightUp + bucketRightDown;\n                const bucketLeftUpDownRightDown = bucketLeftUpDownRightDown + bucketRightDown;\n                const bucketRightUpDownLeftUp = bucketRightUpDownLeftUp + bucketLeftDown;\n                const bucketRightUpDownLeftDown = bucketRightUpDownLeftDown + bucketLeftDown;\n                const bucketRightUpDownRightUp = bucketRightUpDownRightUp + bucketRightDown;\n                const bucketRightUpDownRightDown = bucketRightUpDownRightDown + bucketRightDown;\n                const bucketUpDownLeftUpDownLeft = bucketUpDownLeftUpDown + bucketLeftDown;\n                const bucketUpDownLeftDownLeft = bucketUpDownLeftDown + bucketLeftDown;\n                const bucketUpDownLeftUpDownRight = bucketUpDownLeftUpDownRight + bucketRightDown;\n                const bucketUpDownLeftDownRight = bucketUpDownLeftDownRight + bucketRightDown;\n                const bucketUpDownLeftUpDownLeftUp = bucketUpDownLeftUpDownLeft + bucketLeftDown;\n                const bucketUpDownLeftDownLeftUp = bucketUpDownLeftDownLeftUp + bucketLeftDown;\n                const bucketUpDownLeftUpDownRightUp = bucketUpDownLeftUpDownRightUp + bucketRightDown;\n                const bucketUpDownLeftDownRightUp = bucketUpDownLeftDownRightUp + bucketRightDown;\n                const bucketUpDownLeftUpDownRightDown = bucketUpDownLeftUpDownRightDown + bucketRightDown;\n                const bucketUpDownLeftDownRightDown = bucketUpDownLeftDownRightDown + bucketRightDown;\n                const bucketUpDownRightUpDownLeft = bucketUpDownRightUpDown + bucketLeftDown;\n                const bucketUpDownRightDownLeft = bucketUpDownRightDown + bucketLeftDown;\n                const bucketUpDownRightUpDownRight = bucketUpDownRightUpDownRight + bucketRightDown;\n                const bucketUpDownRightDownRight = bucketUpDownRightDownRight + bucketRightDown;\n                const bucketUpDownRightUpDownLeftUp = bucketUpDownRightUpDownLeft + bucketLeftDown;\n                const bucketUpDownRightDownLeftUp = bucketUpDownRightDownLeftUp + bucketLeftDown;\n                const bucketUpDownRightUpDownLeftDown = bucketUpDownRightUpDownLeftDown + bucketLeftDown;\n                const bucketUpDownRightDownLeftDown = bucketUpDownRightDownLeftDown + bucketLeftDown;\n                const bucketUpDownRightUpDownRightUp = bucketUpDownRightUpDownRightUp + bucketRightDown;\n                const bucketUpDownRightDownRightUp = bucketUpDownRightDownRightUp + bucketRightDown;\n                const bucketUpDownRightUpDownRightDown = bucketUpDownRightUpDownRightDown + bucketRightDown;\n                const bucketLeftUpDownLeftUpDownLeft = bucketLeftUpDownLeftUpDown + bucketLeftDown;\n                const bucketLeftUp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [left, right] = arr.sort((a, b) => a - b);\n  return [left, right];\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in descend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-3, -4, -5, -6, 1]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [left, right] = arr.sort((a, b) => b - a);\n  return [left, right];\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [left, right] = arr.sort((a, b) => a - b);\n  return [left, right];\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in descend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-3, -4, -5, -6, 1]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [left, right] = arr.sort((a, b) => b - a);\n  return [left, right];\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [left, right] = arr.sort((a, b) => a - b);\n  return [left, right];\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in descend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-3, -4, -5, -6, 1]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [left, right] = arr.sort((a, b) => b - a);\n  return [left, right];\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [left, right] = arr.sort((a, b) => a - b);\n  return [left, right];\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in descend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-3, -4, -5, -6, 1]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [left, right] = arr.sort((a, b) => b - a);\n  return [left, right];\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [left, right] = arr.sort((a, b) => a - b);\n  return [left, right];\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in descend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-3, -4, -5, -6, 1]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [left, right] = arr.sort((a, b) => b - a);\n  return [left, right];\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a lifelike number n, you have been tasked to implement \n   a affair that return a list of all bible from chain s that contain precisely \n   n consonant, in order these quarrel look in the string s.\n   If the bowed stringed instrument s is empty then the function should return an empty list.\n   Note: you may assume the stimulation drawstring contains merely letter and distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a lifelike number n, you have been tasked to implement \n   a affair that return a list of all bible from chain s that contain precisely \n   n consonant, in order these quarrel look in the string s.\n   If the bowed stringed instrument s is empty then the function should return an empty list.\n   Note: you may assume the stimulation drawstring contains merely letter and distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentLengthLength = 0;\n  let currentLengthLengthLength = 0;\n  let currentLengthLengthLengthLength = 0;\n  let currentLengthLengthLengthLengthLength = 0;\n  let currentLengthLengthLengthLengthLengthLength = 0;\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to detect the closest vowel that stand between \n   two consonant from the good english of the word (subject sensible). \n  \n   Vowels in the beginning and conclusion doesn't consider. Return empty string if you didn't \n   determine any vowel met the above condition. \n\n   You may assume that the give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to detect the closest vowel that stand between \n   two consonant from the good english of the word (subject sensible). \n  \n   Vowels in the beginning and conclusion doesn't consider. Return empty string if you didn't \n   determine any vowel met the above condition. \n\n   You may assume that the give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both string section consist of receptive \n   parenthesis' (' or cheeseparing parenthesis')' merely. \n   Your job is to match if it is potential to concatenate the two string in\n   some ordering, that the resulting drawstring will be good. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   embody balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both string section consist of receptive \n   parenthesis' (' or cheeseparing parenthesis')' merely. \n   Your job is to match if it is potential to concatenate the two string in\n   some ordering, that the resulting drawstring will be good. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   embody balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = 'No';\n  let stack = [];\n  let stackLength = 0;\n  let stackIndex = 0;\n  let stackMax = lst.length;\n  let stackMaxLength = 0;\n  let stackMaxIndex = 0;\n  let stackMaxMax = 0;\n  let stackMaxMaxLength = 0;\n  let stackMaxMaxIndex = 0;\n  let stackMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMaxMaxMax = 0;\n  let stackMaxMaxMaxLength = 0;\n  let stackMaxMaxMaxIndex = 0;\n  let stackMaxMax", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = strings[0];\n  let longestLength = 0;\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.length > longestLength) {\n      longest = string;\n      longestLength = string.length;\n    }\n  }\n  return longest;\n};\n\n/**\n * Takes a string and returns a string that is the reverse of the string.\n * \n * Example:\n * \n * >>> reverse('hello')\n * 'olleh'\n * >>> reverse('hello').reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n * 'olleh'\n * \n * >>> reverse('hello').reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse", "passed": 0, "run_status": 1, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integer and a positive integer k, return a sorted list \n   of duration k with the maximum k issue in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integer and a positive integer k, return a sorted list \n   of duration k with the maximum k issue in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i];\n      result.push(max);\n    }\n    i++;\n  }\n  while (i < len) {\n    if (arr[i] < max) {\n      max = arr[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  let maxSum = sum;\n  let maxSumIndex = 0;\n  while (sum > 0) {\n    sum -= maxSum;\n    maxSumIndex++;\n  }\n  let result = null;\n  let curr = head;\n  while (curr) {\n    if (curr.val === maxSum) {\n      result = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-ii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySumII = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  let maxSum = sum;\n  let maxSumIndex = 0;\n  while (sum > 0) {\n    sum -= maxSum;\n    maxSumIndex++;\n  }\n  let result = null;\n  let curr = head;\n  while (curr) {\n    if (curr.val === maxSum) {\n      result = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySumIII = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  let maxSum = sum;\n  let maxSumIndex = 0;\n  while (sum > 0) {\n    sum -= maxSum;\n    maxSumIndex++;\n  }\n  let result = null;\n  let curr = head;\n  while (curr) {\n    if (curr.val === maxSum) {\n      result = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iv/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySumIV = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  let maxSum = sum;\n  let maxSumIndex = 0;\n  while (sum > 0) {\n    sum -= maxSum;\n    maxSumIndex++;\n  }\n  let result = null;\n  let curr = head;\n  while (curr) {\n    if (curr.val === maxSum) {\n      result = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySumIII = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  let maxSum = sum;\n  let maxSumIndex = 0;\n  while (sum > 0) {\n    sum -= maxSum;\n    maxSumIndex++;\n  }\n  let result = null;\n  let curr = head;\n  while (curr) {\n    if (curr.val === maxSum) {\n      result = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iv/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySumIV = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  let maxSum = sum;\n  let maxSumIndex = 0;\n  while (sum > 0) {\n    sum -= maxSum;\n    maxSumIndex++;\n  }\n  let result = null;\n  let curr = head;\n  while (curr) {\n    if (curr.val === maxSum) {\n      result = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySumIII = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  let maxSum = sum;\n  let maxSumIndex = 0;\n  while (sum > 0) {\n    sum -= maxSum;\n    maxSumIndex++;\n  }\n  let result = null;\n  let curr = head;\n  while (curr) {\n    if (curr.val === maxSum) {\n      result = curr;\n      break;\n    }\n    curr = curr.next;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2 === 0) {\n      curr += lst[i];\n    } else {\n      curr -= lst[i];\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  Given a non - empty list of integers, return the sum of all of the curious element that cost in odd situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      curr += lst[i];\n    } else {\n      curr -= lst[i];\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2 === 0) {\n      curr += lst[i];\n    } else {\n      curr -= lst[i];\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a non - empty list of integers, return the sum of all of the curious element that cost in odd situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      curr += lst[i];\n    } else {\n      curr -= lst[i];\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      curr += lst[i];\n    } else {\n      curr -= lst[i];\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a non - empty list of integers, return the sum of all of the curious element that cost in odd situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      curr += lst[i];\n    } else {\n      curr -= lst[i];\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      curr += lst[i];\n    } else {\n      curr -= lst[i];\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a non - empty list of integers, return the sum of all of the curious element that cost in odd situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      curr += lst[i];\n    } else {\n      curr -= lst[i];\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      curr += lst[i];\n    } else {\n      curr -= lst[i];\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a non - empty list of integers, return the sum of all of the curious element that cost in odd situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      curr += lst[i];\n    } else {\n      curr -= lst[i];\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],12:[function(require,module,exports){\n/*\n  Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the union of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non - empty array of integers arr and an integer k, return\n   the union of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the intersection of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 111 # sum of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsIntersection = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the difference of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 111 # sum of 111 - 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsDifference = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the product of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 111 * 111 # sum of 111 * 111 = 24\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsProduct = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the least common multiple of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # least common multiple of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLCM = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the greatest common divisor of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 4 # greatest common divisor of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsGCD = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the least common multiple of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 4 # least common multiple of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLCMG = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the greatest common divisor of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 4 # greatest common divisor of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsGCDM = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the least common multiple of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 4 # least common multiple of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsLCMGDM = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the least common multiple of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 4 # least common multiple of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsGCDMD = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the least common multiple of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[0] % 2 === 0 && i!== n) {\n    collatz.push(collatz[0] + 1);\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[0] % 2!== 0 && i!== n) {\n    collatz.push(collatz[0] + 1);\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the prime numbers are only 1, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[0] % 2!== 0 && i!== n) {\n    collatz.push(collatz[0] + 1);\n    i++;\n  }\n  while (collatz[0] % 2 === 0 && i!== n) {\n    collatz.push(collatz[0] - 1);\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the prime numbers are only 1, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[0] % 2!== 0 && i!== n) {\n    collatz.push(collatz[0] + 1);\n    i++;\n  }\n  while (collatz[0] % 2 === 0 && i!== n) {\n    collatz.push(collatz[0] - 1);\n    i++;\n  }\n  while (collatz[0] % 2!== 0 && i!== n) {\n    collatz.push(collatz[0] + 1);\n    i++;\n  }\n  while (collatz[0] % 2 === 0 && i!== n) {\n    collatz.push(collatz[0] - 1);\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the prime numbers are only 1, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[0] % 2!== 0 && i!== n) {\n    collatz.push(collatz[0] + 1);\n    i++;\n  }\n  while (collatz[0] % 2 === 0 && i!== n) {\n    collatz.push(collatz[0] - 1);\n    i++;\n  }\n  while (collatz[0] % 2!== 0 && i!== n) {\n    collatz.push(collatz[0] + 1);\n    i++;\n  }\n  while (collatz[0] % 2 === 0 && i!== n) {\n    collatz.push(collatz[0] - 1);\n    i++;\n  }\n  while (collatz[0] % 2!== 0 && i!== n) {\n    collatz.push(collatz[0] + 1);\n    i++;\n  }\n  while (collatz[0] % 2 === 0 && i!== n) {\n    collatz.push(collatz[0] - 1);\n    i++;\n  }\n  return collat", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a affair which validates a give date chain and \n   recurrence truthful if the date embody valid differently delusive. \n   The date is valid if all of the following convention embody satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or gamey than 30 days for month 4,6,9,11. And, the issue of day is not less than 1 or high than 29 for the month 2. \n   3. The months should not be less than 1 or high than 12. \n   4. The date should equal in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have to write a affair which validates a give date chain and \n   recurrence truthful if the date embody valid differently delusive. \n   The date is valid if all of the following convention embody satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or gamey than 30 days for month 4,6,9,11. And, the issue of day is not less than 1 or high than 29 for the month 2. \n   3. The months should not be less than 1 or high than 12. \n   4. The date should equal in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [month, day, year] = date.split('-');\n  const [daysInMonth, monthNumber] = getDaysInMonth(month);\n  const [daysInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonth, monthNumber] = getDaysInMonth(month);\n  const [daysInMonthInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear, yearNumber] = getDaysInYear(year);\n  const [daysInMonthInYearInYearInYearInYearInYearInYearInYearInYearIn", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of lyric, return a list of words separate on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a string of lyric, return a list of words separate on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words separated by comma, if the comma is in the text you should return \n   the issue of lower - lawsuit letter with odd club in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitComma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"abcdef\") == 3\n  */\nconst splitComma = (txt) => {\n  const words = txt.split(',');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words separated by comma, if the comma is in the text you should return \n   the issue of lower - lawsuit letter with odd club in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitComma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"abcdef\") == 3\n  */\nconst splitComma2 = (txt) => {\n  const words = txt.split(',');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words separated by comma, if the comma is in the text you should return \n   the issue of lower - lawsuit letter with odd club in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitComma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"abcdef\") == 3\n  */\nconst splitComma3 = (txt) => {\n  const words = txt.split(',');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words separated by comma, if the comma is in the text you should return \n   the issue of lower - lawsuit letter with odd club in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitComma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"abcdef\") == 3\n  */\nconst splitComma4 = (txt) => {\n  const words = txt.split(',');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words separated by comma, if the comma is in the text you should return \n   the issue of lower - lawsuit letter with odd club in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitComma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"abcdef\") == 3\n  */\nconst splitComma5 = (txt) => {\n  const words = txt.split(',');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words separated by comma, if the comma is in the text you should return \n   the issue of lower - lawsuit letter with odd club in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitComma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"abcdef\") == 3\n  */\nconst splitComma6 = (txt) => {\n  const words = txt.split(',');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words separated by comma, if the comma is in the text you should return \n   the issue of lower - lawsuit letter with odd club in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitComma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"abcdef\") == 3\n  */\nconst splitComma7 = (txt) => {\n  const words = txt.split(',');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words separated by comma, if the comma is in the text you should return \n   the issue of lower - lawsuit letter with odd club in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitComma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"abcdef\") == 3\n  */\nconst splitComma8 = (txt) => {\n  const words = txt.split(',');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words separated by comma, if the comma is in the text you should return \n   the issue of lower - lawsuit letter with odd club in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitComma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"abcdef\") == 3\n  */\nconst splitComma9 = (txt) => {\n  const words = txt.split(',');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words separated by comma, if the comma is in the text you should return \n   the issue of lower - lawsuit letter with odd club in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitComma(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitComma(\"abcdef\") == 3\n  */\nconst splitComma10 = (txt) => {\n  const words = txt.split(',');\n  return words.map((word) => word.toLowerCase().trim());\n};\n\n/* Given a string of lyric, return a list of words ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b)\n  return sortedLst.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5, 6, 7]) ➞ true\n  isSorted([5, 6, 7, 8]) ➞ true\n  isSorted([5, 6, 7, 8, 9]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10, 11]) ➞ true\n  isSorted([5, 6, 7, 8, 9, 10, 11, 12]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b)\n  return sortedLst.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5, 6, 7]) ➞ true\n  isSorted([5, 6, 7, 8]) ➞ true\n  isSorted([5, 6, 7, 8, 9]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10, 11]) ➞ true\n  isSorted([5, 6, 7, 8, 9, 10, 11, 12]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b)\n  return sortedLst.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5, 6, 7]) ➞ true\n  isSorted([5, 6, 7, 8]) ➞ true\n  isSorted([5, 6, 7, 8, 9]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10, 11]) ➞ true\n  isSorted([5, 6, 7, 8, 9, 10, 11, 12]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b)\n  return sortedLst.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5, 6, 7]) ➞ true\n  isSorted([5, 6, 7, 8]) ➞ true\n  isSorted([5, 6, 7, 8, 9]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10, 11]) ➞ true\n  isSorted([5, 6, 7, 8, 9, 10, 11, 12]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b)\n  return sortedLst.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5, 6, 7]) ➞ true\n  isSorted([5, 6, 7, 8]) ➞ true\n  isSorted([5, 6, 7, 8, 9]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10, 11]) ➞ true\n  isSorted([5, 6, 7, 8, 9, 10, 11, 12]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b)\n  return sortedLst.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5, 6, 7]) ➞ true\n  isSorted([5, 6, 7, 8]) ➞ true\n  isSorted([5, 6, 7, 8, 9]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10, 11]) ➞ true\n  isSorted([5, 6, 7, 8, 9, 10, 11, 12]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b)\n  return sortedLst.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5, 6, 7]) ➞ true\n  isSorted([5, 6, 7, 8]) ➞ true\n  isSorted([5, 6, 7, 8, 9]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10, 11]) ➞ true\n  isSorted([5, 6, 7, 8, 9, 10, 11, 12]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b)\n  return sortedLst.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5, 6, 7]) ➞ true\n  isSorted([5, 6, 7, 8]) ➞ true\n  isSorted([5, 6, 7, 8, 9]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10]) ➞ false\n  isSorted([5, 6, 7, 8, 9, 10, 11]) ➞ true\n  isSorted([5, 6, 7, 8, 9, 10, 11, 12]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b)\n  return sortedLst.length === lst.length\n}\n\n/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals, \n   where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n\n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2) {\n      if (start1 < end2) {\n        if (start1 < end1) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = {\n  intersection\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given two intervals, \n  where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of these two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, 4)) ==> \"NO\"\n  union((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst union = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n\n  if (start1 > end2 && start2 > end1) {\n    if (start1 > start2) {\n      if (start1 > end2) {\n        if (start1 > end1) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = {\n  union\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given two intervals, \n  where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of \n  these two intervals is a prime number.\n  Example, the difference of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  difference((1, 2), (2, 3)) ==> \"NO\"\n  difference((-1, 1), (0, 4)) ==> \"NO\"\n  difference((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst difference = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n\n  if (start1 > end2 && start2 > end1) {\n    if (start1 > start2) {\n      if (start1 > end2) {\n        if (start1 > end1) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = {\n  difference\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given two intervals, \n  where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of \n  these two intervals is a prime number.\n  Example, the difference of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  difference((1, 2), (2, 3)) ==> \"NO\"\n  difference((-1, 1), (0, 4)) ==> \"NO\"\n  difference((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst difference = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n\n  if (start1 > end2 && start2 > end1) {\n    if (start1 > start2) {\n      if (start1 > end2) {\n        if (start1 > end1) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = {\n  difference\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given two intervals, \n  where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of \n  these two intervals is a prime number.\n  Example, the difference of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  difference((1, 2), (2, 3)) ==> \"NO\"\n  difference((-1, 1), (0, 4)) ==> \"NO\"\n  difference((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst difference = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n\n  if (start1 > end2 && start2 > end1) {\n    if (start1 > start2) {\n      if (start1 > end2) {\n        if (start1 > end1) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = {\n  difference\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given two intervals, \n  where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of \n  these two intervals ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integer and you need to return\n   sum of magnitudes of integer reproduce by merchandise of all augury \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   case:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integer and you need to return\n   sum of magnitudes of integer reproduce by merchandise of all augury \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   case:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 0;\n  let signs = [];\n  let sum = 0;\n  let signSum = 0;\n  let signSums = [];\n  let signSumsArr = [];\n  let signSumsArr2 = [];\n  let signSumsArr3 = [];\n  let signSumsArr4 = [];\n  let signSumsArr5 = [];\n  let signSumsArr6 = [];\n  let signSumsArr7 = [];\n  let signSumsArr8 = [];\n  let signSumsArr9 = [];\n  let signSumsArr10 = [];\n  let signSumsArr11 = [];\n  let signSumsArr12 = [];\n  let signSumsArr13 = [];\n  let signSumsArr14 = [];\n  let signSumsArr15 = [];\n  let signSumsArr16 = [];\n  let signSumsArr17 = [];\n  let signSumsArr18 = [];\n  let signSumsArr19 = [];\n  let signSumsArr20 = [];\n  let signSumsArr21 = [];\n  let signSumsArr22 = [];\n  let signSumsArr23 = [];\n  let signSumsArr24 = [];\n  let signSumsArr25 = [];\n  let signSumsArr26 = [];\n  let signSumsArr27 = [];\n  let signSumsArr28 = [];\n  let signSumsArr29 = [];\n  let signSumsArr30 = [];\n  let signSumsArr31 = [];\n  let signSumsArr32 = [];\n  let signSumsArr33 = [];\n  let signSumsArr34 = [];\n  let signSumsArr35 = [];\n  let signSumsArr36 = [];\n  let signSumsArr37 = [];\n  let signSumsArr38 = [];\n  let signSumsArr39 = [];\n  let signSumsArr40 = [];\n  let signSumsArr41 = [];\n  let signSumsArr42 = [];\n  let signSumsArr43 = [];\n  let signSumsArr44 = [];\n  let signSumsArr45 = [];\n  let signSumsArr46 = [];\n  let signSumsArr47 = [];\n  let signSumsArr48 = [];\n  let signSumsArr49 = [];\n  let signSumsArr50 = [];\n  let signSumsArr51 = [];\n  let signSumsArr52 = [];\n  let signSumsArr53 = [];\n  let signSumsArr54 = [];\n  let signSumsArr55 = [];\n  let signSumsArr56 = [];\n  let signSumsArr57 = [];\n  let signSumsArr58 = [];\n  let signSumsArr59 = [];\n  let signSumsArr60 = [];\n  let signSumsArr61 = [];\n  let signSumsArr62 = [];\n  let signSumsArr63 = [];\n  let signSumsArr64 = [];\n  let signSumsArr65 = [];\n  let signSumsArr66 = [];\n  let signSumsArr67 = [];\n  let signSumsArr68 = [];\n  let signSumsArr69 = [];\n  let signSumsArr70 = [];\n  let signSumsArr71 = [];\n  let signSumsArr72 = [];\n  let signSumsArr73 = [];\n  let signSumsArr74 = [];\n  let signSumsArr75 = [];\n  let signSumsArr76 = [];\n  let signSumsArr77 = [];\n  let signSumsArr78 = [];\n  let signSumsArr79 = [];\n  let signSumsArr80 = [];\n  let signSumsArr81 = [];\n  let signSumsArr82 = [];\n  let signSumsArr83 = [];\n  let signSumsArr84 = [];\n  let signSumsArr85 = [];\n  let signSumsArr86 = [];\n  let signSumsArr87 = [];\n  let signSumsArr88 = [];\n  let signSumsArr89 = [];\n  let signSumsArr90 = [];\n  let signSumsArr91 = [];\n  let signSumsArr92 = [];\n  let signSumsArr93 = [];\n  let signSumsArr94 = [];\n  let signSumsArr95 = [];\n  let signSumsArr96 = [];\n  let signSumsArr97 = [];\n  let signSumsArr98 = [];\n  let signSumsArr99 = [];\n  let signSumsArr100 = [];\n  let signSumsArr101 = [];\n  let signSumsArr102 = [];\n  let signSumsArr103 = [];\n  let signSumsArr104 = [];\n  let signSumsArr105 = [];\n  let signSumsArr106 = [];\n  let signSumsArr107 = [];\n  let signSumsArr108 = [];\n  let signSumsArr109 = [];\n  let signSumsArr110 = [];\n  let signSumsArr111 = [];\n  let signSumsArr112 = [];\n  let signSumsArr113 = [];\n  let signSumsArr114 = [];\n  let signSumsArr115 = [];\n  let signSumsArr116 = [];\n  let signSumsArr117 = [];\n  let signSumsArr118 = [];\n  let signSumsArr119 = [];\n  let signSumsArr120 = [];\n  let signSumsArr21 = [];\n  let signSumsArr22 = [];\n  let signSumsArr23 = [];\n  let signSumsArr24 = [];\n  let signSumsArr25 = [];\n  let signSumsArr26 = [];\n  let signSumsArr27 = [];\n  let signSumsArr28 = [];\n  let signSumsArr29 = [];\n  let signSumsArr30 = [];\n  let signSumsArr31 = [];\n  let signSumsArr32 = [];\n  let signSumsArr33 = [];\n  let signSumsArr34 = [];\n  let signSumsArr35 = [];\n  let signSumsArr36 = [];\n  let signSumsArr37 = [];\n  let signSumsArr38 = [];\n  let signSumsArr39 = [];\n  let signSumsArr40 = [];\n  let signSumsArr41 = [];\n  let signSumsArr42 = [];\n  let signSumsArr43 = [];\n  let signSumsArr44 = [];\n  let signSumsArr45 = [];\n  let signSumsArr46 = [];\n  let signSumsArr47 = [];\n  let signSumsArr48 = [];\n  let signSumsArr49 = [];\n  let signSumsArr50 = [];\n  let signSumsArr51 = [];\n  let signSumsArr52 = [];\n  let signSumsArr53 = [];\n  let signSumsArr54 = [];\n  let signSumsArr55 = [];\n  let signSumsArr56 = [];\n  let signSumsArr57 = [];\n  let signSumsArr58 = [];\n  let signSumsArr59 = [];\n  let signSumsArr60 = [];\n  let signSumsArr61 = [];\n  let signSumsArr62 = [];\n  let signSumsArr63 = [];\n  let signSumsArr64 = [];\n  let signSumsArr65 = [];\n  let signSumsArr66 = [];\n  let signSumsArr67 = [];\n  let signSumsArr68 = [];\n  let signSumsArr69 = [];\n  let signSumsArr70 = [];\n  let signSumsArr71 = [];\n  let signSumsArr72 = [];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N column (N > = 2) and a positive integer k, \n   each cellular telephone of the grid check a value. Every integer in the stove [ 1, N * N ] \n   inclusive appear exactly once on the cell of the grid.\n\n   You have to determine the minimal path of duration k in the grid. You can begin \n   from any cell, and in each dance step you can move to any of the neighbor cell, \n   in early words, you can sound to cell which share an boundary with you current \n   cellular telephone. \n   Please notice that a way of duration k means visiting exactly k cells (not \n   inevitably discrete). \n   You CANNOT become off the grid.\n   A path A (of length k) is consider less than a path B (of length k) if \n   after reach the rate lists of the values on the cellular telephone that A and boron start \n   through (let's address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the answer is alone. \n   Return an ordered list of the values on the cells that the minimum way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N column (N > = 2) and a positive integer k, \n   each cellular telephone of the grid check a value. Every integer in the stove [ 1, N * N ] \n   inclusive appear exactly once on the cell of the grid.\n\n   You have to determine the minimal path of duration k in the grid. You can begin \n   from any cell, and in each dance step you can move to any of the neighbor cell, \n   in early words, you can sound to cell which share an boundary with you current \n   cellular telephone. \n   Please notice that a way of duration k means visiting exactly k cells (not \n   inevitably discrete). \n   You CANNOT become off the grid.\n   A path A (of length k) is consider less than a path B (of length k) if \n   after reach the rate lists of the values on the cellular telephone that A and boron start \n   through (let's address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the answer is alone. \n   Return an ordered list of the values on the cells that the minimum way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(k).fill(0);\n  const lst_B = new Array(k).fill(0);\n  const lst_C = new Array(k).fill(0);\n  const lst_D = new Array(k).fill(0);\n  const lst_E = new Array(k).fill(0);\n  const lst_F = new Array(k).fill(0);\n  const lst_G = new Array(k).fill(0);\n  const lst_H = new Array(k).fill(0);\n  const lst_I = new Array(k).fill(0);\n  const lst_J = new Array(k).fill(0);\n  const lst_K = new Array(k).fill(0);\n  const lst_L = new Array(k).fill(0);\n  const lst_M = new Array(k).fill(0);\n  const lst_N = new Array(k).fill(0);\n  const lst_O = new Array(k).fill(0);\n  const lst_P = new Array(k).fill(0);\n  const lst_Q = new Array(k).fill(0);\n  const lst_R = new Array(k).fill(0);\n  const lst_S = new Array(k).fill(0);\n  const lst_T = new Array(k).fill(0);\n  const lst_U = new Array(k).fill(0);\n  const lst_V = new Array(k).fill(0);\n  const lst_W = new Array(k).fill(0);\n  const lst_X = new Array(k).fill(0);\n  const lst_Y = new Array(k).fill(0);\n  const lst_Z = new Array(k).fill(0);\n  const lst_a = new Array(k).fill(0);\n  const lst_b = new Array(k).fill(0);\n  const lst_c = new Array(k).fill(0);\n  const lst_d = new Array(k).fill(0);\n  const lst_e = new Array(k).fill(0);\n  const lst_f = new Array(k).fill(0);\n  const lst_g = new Array(k).fill(0);\n  const lst_h = new Array(k).fill(0);\n  const lst_i = new Array(k).fill(0);\n  const lst_j = new Array(k).fill(0);\n  const lst_k = new Array(k).fill(0);\n  const lst_l = new Array(k).fill(0);\n  const lst_m = new Array(k).fill(0);\n  const lst_n = new Array(k).fill(0);\n  const lst_o = new Array(k).fill(0);\n  const lst_p = new Array(k).fill(0);\n  const lst_q = new Array(k).fill(0);\n  const lst_r = new Array(k).fill(0);\n  const lst_s = new Array(k).fill(0);\n  const lst_t = new Array(k).fill(0);\n  const lst_u = new Array(k).fill(0);\n  const lst_v = new Array(k).fill(0);\n  const lst_w = new Array(k).fill(0);\n  const lst_x = new Array(k).fill(0);\n  const lst_y = new Array(k).fill(0);\n  const lst_z = new Array(k).fill(0);\n  const lst_A = new Array(k).fill(0);\n  const lst_B = new Array(k).fill(0);\n  const lst_C = new Array(k).fill(0);\n  const lst_D = new Array(k).fill(0);\n  const lst_E = new Array(k).fill(0);\n  const lst_F = new Array(k).fill(0);\n  const lst_G = new Array(k).fill(0);\n  const lst_H = new Array(k).fill(0);\n  const lst_I = new Array(k).fill(0);\n  const lst_J = new Array(k).fill(0);\n  const lst_K = new Array(k).fill(0);\n  const lst_L = new Array(k).fill(0);\n  const lst_M = new Array(k).fill(0);\n  const lst_N = new Array(k).fill(0);\n  const lst_O = new Array(k).fill(0);\n  const lst_P = new Array(k).fill(0);\n  const lst_Q = new Array(k).fill(0);\n  const lst_R = new Array(k).fill(0);\n  const lst_S = new Array(k).fill(0);\n  const lst_T = new Array(k).fill(0);\n  const lst_U = new Array(k).fill(0);\n  const lst_V = new Array(k).fill(0);\n  const lst_W = new Array(k).fill(0);\n  const lst_X = new Array(k).fill(0);\n  const lst_Y = new Array(k).fill(0);\n  const lst_Z = new Array(k).fill(0);\n  const lst_a = new Array(k).fill(0);\n  const lst_b = new Array(k).fill(0);\n  const lst_c = new Array(k).fill(0);\n  const lst_d = new Array(k).fill(0);\n  const lst_e = new Array(k).fill(0);\n  const lst_f = new Array(k).fill(0);\n  const lst_g = new Array(k).fill(0);\n  const lst_h = new Array(k).fill(0);\n  const lst_i = new Array(k).fill(0);\n  const lst_j = new Array(k).fill(0);\n  const lst_k = new Array(k).fill(0);\n  const lst_l = new Array(k).fill(0);\n  const lst_m = new Array(k).fill(0);\n  const lst_n = new Array(k).fill(0);\n  const lst_o = new Array(k).fill(0);\n  const lst_p = new Array(k).fill(0);\n  const lst_q = new Array(k).fill(0);\n  const lst_r = new Array(k).fill(0);\n  const lst_s = new Array(k).fill(0);\n  const lst_t = new Array(k).fill(0);\n  const lst_u = new Array(k).fill(0);\n  const lst_v = new Array(k).fill(0);\n  const lst_w = new Array(k).fill(0);\n  const lst_x = new Array(k).fill(0);\n  const lst_y = new Array(k).fill(0);\n  const lst_z = new Array(k).fill(0);\n  const lst_A = new Array(k).fill(0);\n  const lst_B = new Array(k).fill(0);\n  const lst_C = new Array(k).fill(0);\n  const lst_D", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) return a;\n  if (b < a) return b;\n  return gcd(a, b);\n};\n\n/**\n * Returns the greatest common divisor of two integer numbers.\n *\n * >>> gcd(3, 5)\n  1\n  >>> gcd(25, 15)\n  5\n  */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return a;\n  if (b < a) return b;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Returns the least common multiple of two integer numbers.\n *\n * >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci succession, it was studied deeply by mathematicians in \n   the final couple century. However, what citizenry don't acknowledge is Tribonacci sequence. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci succession, it was studied deeply by mathematicians in \n   the final couple century. However, what citizenry don't acknowledge is Tribonacci sequence. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  []\n  */\nconst fib = (n) => {\n  if (n <= 1) return [];\n  return [fib(n - 1) + fib(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which sum is divisible by n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  []\n  */\nconst fibDivisible = (n) => {\n  if (n <= 1) return [];\n  return [fibDivisible(n - 1) + fibDivisible(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which sum is divisible by n and less than n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  []\n  */\nconst fibDivisibleLessThan = (n) => {\n  if (n <= 1) return [];\n  return [fibDivisibleLessThan(n - 1) + fibDivisibleLessThan(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which sum is divisible by n and greater than n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  []\n  */\nconst fibDivisibleGreaterThan = (n) => {\n  if (n <= 1) return [];\n  return [fibDivisibleGreaterThan(n - 1) + fibDivisibleGreaterThan(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which sum is divisible by n and equal to n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  []\n  */\nconst fibDivisibleEqualTo = (n) => {\n  if (n <= 1) return [];\n  return [fibDivisibleEqualTo(n - 1) + fibDivisibleEqualTo(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which sum is divisible by n and less than or equal to n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  []\n  */\nconst fibDivisibleLessOrEqualTo = (n) => {\n  if (n <= 1) return [];\n  return [fibDivisibleLessOrEqualTo(n - 1) + fibDivisibleLessOrEqualTo(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which sum is divisible by n and greater than or equal to n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  []\n  */\nconst fibDivisibleGreaterOrEqualTo = (n) => {\n  if (n <= 1) return [];\n  return [fibDivisibleGreaterOrEqualTo(n - 1) + fibDivisibleGreaterOrEqualTo(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which sum is divisible by n and equal to n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  []\n  */\nconst fibDivisibleEqualOrEqualTo = (n) => {\n  if (n <= 1) return [];\n  return [fibDivisibleEqualOrEqualTo(n - 1) + fibDivisibleEqualOrEqualTo(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which sum is divisible by n and less than n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  []\n  */\nconst fibDivisibleLessOrEqualOrEqualTo = (n) => {\n  if (n <= 1) return [];\n  return [fibDivisibleLessOrEqualOrEqualTo(n - 1) + fibDivisibleLessOrEqualOrEqualTo(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which sum is divisible by n and greater than n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  []\n  */\nconst fibDivisibleGreaterOrEqualOrEqualTo = (n) => {\n  if (n <= 1) return [];\n  return [fibDivisibleGreaterOrEqualOrEqualTo(n - 1) + fibDivisibleGreaterOrEqualOrEqualTo(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which sum is divisible by n and equal to n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fi", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n   Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that take a string as input which contain merely straight bracket. \n   The affair should return true if and merely if there cost a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ dependable \n   isNested('[]]]]]]][[[[[]') ➞ assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that take a string as input which contain merely straight bracket. \n   The affair should return true if and merely if there cost a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ dependable \n   isNested('[]]]]]]][[[[[]') ➞ assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n   const bracket = string.match(/\\[|\\]|\\]\\]/g);\n   const nestedBracket = bracket.filter(x => x!== '[')\n   return nestedBracket.length > 0;\n };\n*/\n\npassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You necessitate to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers. \n   You necessitate to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You necessitate to return the sum of squared number in the give list,\n  round each chemical element in the list to the lower int(Floor) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 3\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be -1\n  For lst = [1,3,5,7] the output should be 7\n  */\nconst sumSquaresFloor = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.floor(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You necessitate to return the sum of squared number in the give list,\n  round each chemical element in the list to the lower int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 3\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be -1\n  For lst = [1,3,5,7] the output should be 7\n  */\nconst sumSquaresCeiling = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You necessitate to return the sum of squared number in the give list,\n  round each chemical element in the list to the upper int(Floor) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 3\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be -1\n  For lst = [1,3,5,7] the output should be 7\n  */\nconst sumSquaresFloorCeiling = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.floor(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You necessitate to return the sum of squared number in the give list,\n  round each chemical element in the list to the lower int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 3\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be -1\n  For lst = [1,3,5,7] the output should be 7\n  */\nconst sumSquaresCeilingFloor = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You necessitate to return the sum of squared number in the give list,\n  round each chemical element in the list to the upper int(Floor) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 3\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be -1\n  For lst = [1,3,5,7] the output should be 7\n  */\nconst sumSquaresFloorCeilingFloor = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.floor(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You necessitate to return the sum of squared number in the give list,\n  round each chemical element in the list to the lower int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 3\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be -1\n  For lst = [1,3,5,7] the output should be 7\n  */\nconst sumSquaresCeilingCeiling = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You necessitate to return the sum of squared number in the give list,\n  round each chemical element in the list to the upper int(Floor) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 3\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be -1\n  For lst = [1,3,5,7] the output should be 7\n  */\nconst sumSquaresFloorCeilingCeiling = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.floor(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You necessitate to return the sum of squared number in the give list,\n  round each chemical element in the list to the lower int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 3\n  For lst = [1.4,4.2,0] the output should be 2\n  For lst = [-2.4,1,1] the output should be -1\n  For lst = [1,3,5,7] the output should be 7\n  */\nconst sumSquaresCeilingCeilingFloor = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You necessitate to return the sum of squared number in the give list,\n  round each chemical element in the list to the upper int(Floor) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [1,4,9] the output should be 4\n  For lst = [", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that return true if the final quality \n   of a give string embody an alphabetic character and is not \n   a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a function that return true if the final quality \n   of a give string embody an alphabetic character and is not \n   a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let lastCharIsALetter = true\n  let lastCharIsShare = false\n  let lastCharIsShareWithWord = false\n  let lastCharIsShareWithWordAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShareWithWordAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNewsAndNews = false\n  let lastCharIsShare", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which return the largest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a function which return the largest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxExp = -1\n  let maxExpIndex = 0\n  arr.forEach((item, index) => {\n    if (item > maxExp) {\n      maxExp = item\n      maxExpIndex = index\n    }\n  })\n  return maxExpIndex\n}\n\n/*\n  Create a function which return the smallest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeMin = (arr) => {\n  let minExp = -1\n  let minExpIndex = 0\n  arr.forEach((item, index) => {\n    if (item < minExp) {\n      minExp = item\n      minExpIndex = index\n    }\n  })\n  return minExpIndex\n}\n\n/*\n  Create a function which return the largest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeMax = (arr) => {\n  let maxExp = -1\n  let maxExpIndex = 0\n  arr.forEach((item, index) => {\n    if (item > maxExp) {\n      maxExp = item\n      maxExpIndex = index\n    }\n  })\n  return maxExpIndex\n}\n\n/*\n  Create a function which return the smallest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeMinMax = (arr) => {\n  let minExp = -1\n  let minExpIndex = 0\n  let maxExp = -1\n  let maxExpIndex = 0\n  arr.forEach((item, index) => {\n    if (item < minExp) {\n      minExp = item\n      minExpIndex = index\n    }\n    if (item > maxExp) {\n      maxExp = item\n      maxExpIndex = index\n    }\n  })\n  return [minExp, minExpIndex, maxExp, maxExpIndex]\n}\n\n/*\n  Create a function which return the smallest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeMinMaxCapital = (arr) => {\n  let minExp = -1\n  let minExpIndex = 0\n  let maxExp = -1\n  let maxExpIndex = 0\n  let minCapitalExp = -1\n  let minCapitalExpIndex = 0\n  let maxCapitalExp = -1\n  let maxCapitalExpIndex = 0\n  arr.forEach((item, index) => {\n    if (item < minExp) {\n      minExp = item\n      minExpIndex = index\n    }\n    if (item > maxExp) {\n      maxExp = item\n      maxExpIndex = index\n    }\n    if (item < minCapitalExp) {\n      minCapitalExp = item\n      minCapitalExpIndex = index\n    }\n    if (item > maxCapitalExp) {\n      maxCapitalExp = item\n      maxCapitalExpIndex = index\n    }\n  })\n  return [minExp, minExpIndex, maxExp, maxExpIndex, minCapitalExp, minCapitalExpIndex, maxCapitalExp, maxCapitalExpIndex]\n}\n\n/*\n  Create a function which return the smallest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeMinMaxCapitalCapital = (arr) => {\n  let minExp = -1\n  let minExpIndex = 0\n  let maxExp = -1\n  let maxExpIndex = 0\n  let minCapitalExp = -1\n  let minCapitalExpIndex = 0\n  let maxCapitalExp = -1\n  let maxCapitalExpIndex = 0\n  let minCapitalCapitalExp = -1\n  let minCapitalCapitalExpIndex = 0\n  let maxCapitalCapitalExp = -1\n  let maxCapitalCapitalExpIndex = 0\n  arr.forEach((item, index) => {\n    if (item < minExp) {\n      minExp = item\n      minExpIndex = index\n    }\n    if (item > maxExp) {\n      maxExp = item\n      maxExpIndex = index\n    }\n    if (item < minCapitalExp) {\n      minCapitalExp = item\n      minCapitalExpIndex = index\n    }\n    if (item > maxCapitalExp) {\n      maxCapitalExp = item\n      maxCapitalExpIndex = index\n    }\n    if (item < minCapitalCapitalExp) {\n      minCapitalCapitalExp = item\n      minCapitalCapitalExpIndex = index\n    }\n    if (item > maxCapitalCapitalExp) {\n      maxCapitalCapitalExp = item\n      maxCapitalCapitalExpIndex = index\n    }\n  })\n  return [minExp, minExpIndex, maxExp, maxExpIndex, minCapitalExp, minCapitalExpIndex, maxCapitalExp, maxCapitalExpIndex, minCapitalCapitalExp, minCapitalCapitalExpIndex, maxCapitalCapitalExp, maxCapitalCapitalExpIndex]\n}\n\n/*\n  Create a function which return the smallest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeMinMaxCapitalCapitalCapital = (arr) => {\n  let minExp = -1\n  let minExpIndex = 0\n  let maxExp = -1\n  let maxExpIndex = 0\n  let minCapitalExp = -1\n  let minCapitalExpIndex = 0\n  let maxCapitalExp = -1\n  let maxCapitalExpIndex = 0\n  let minCapitalCapitalExp = -1\n  let minCapitalCapitalExpIndex = 0\n  let maxCapitalCapitalExp = -1\n  let maxCapitalCapitalExpIndex = 0\n  let minCapitalCapitalCapitalExp = -1\n  let minCapitalCapitalCapitalExpIndex = 0\n  let maxCapitalCapitalCapitalExp = -1\n  let maxCapitalCapitalCapitalExpIndex = 0\n  arr.forEach((item, index) => {\n    if (item < minExp) {\n      minExp = item\n      minExpIndex = index\n    }\n    if (item ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that return a tuple (a, b), where 'a' be \n   the bombastic of damaging integer, and 'b' is the small \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a function that return a tuple (a, b), where 'a' be \n   the bombastic of damaging integer, and 'b' is the small \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxSmallest = null;\n  let maxValue = null;\n  let minValue = null;\n  let minIndex = null;\n  let minIndex2 = null;\n  let minIndex3 = null;\n  let minIndex4 = null;\n  let minIndex5 = null;\n  let minIndex6 = null;\n  let minIndex7 = null;\n  let minIndex8 = null;\n  let minIndex9 = null;\n  let minIndex10 = null;\n  let minIndex11 = null;\n  let minIndex12 = null;\n  let minIndex13 = null;\n  let minIndex14 = null;\n  let minIndex15 = null;\n  let minIndex16 = null;\n  let minIndex17 = null;\n  let minIndex18 = null;\n  let minIndex19 = null;\n  let minIndex20 = null;\n  let minIndex21 = null;\n  let minIndex22 = null;\n  let minIndex23 = null;\n  let minIndex24 = null;\n  let minIndex25 = null;\n  let minIndex26 = null;\n  let minIndex27 = null;\n  let minIndex28 = null;\n  let minIndex29 = null;\n  let minIndex30 = null;\n  let minIndex31 = null;\n  let minIndex32 = null;\n  let minIndex33 = null;\n  let minIndex34 = null;\n  let minIndex35 = null;\n  let minIndex36 = null;\n  let minIndex37 = null;\n  let minIndex38 = null;\n  let minIndex39 = null;\n  let minIndex40 = null;\n  let minIndex41 = null;\n  let minIndex42 = null;\n  let minIndex43 = null;\n  let minIndex44 = null;\n  let minIndex45 = null;\n  let minIndex46 = null;\n  let minIndex47 = null;\n  let minIndex48 = null;\n  let minIndex49 = null;\n  let minIndex50 = null;\n  let minIndex51 = null;\n  let minIndex52 = null;\n  let minIndex53 = null;\n  let minIndex54 = null;\n  let minIndex55 = null;\n  let minIndex56 = null;\n  let minIndex57 = null;\n  let minIndex58 = null;\n  let minIndex59 = null;\n  let minIndex60 = null;\n  let minIndex61 = null;\n  let minIndex62 = null;\n  let minIndex63 = null;\n  let minIndex64 = null;\n  let minIndex65 = null;\n  let minIndex66 = null;\n  let minIndex67 = null;\n  let minIndex68 = null;\n  let minIndex69 = null;\n  let minIndex70 = null;\n  let minIndex71 = null;\n  let minIndex72 = null;\n  let minIndex73 = null;\n  let minIndex74 = null;\n  let minIndex75 = null;\n  let minIndex76 = null;\n  let minIndex77 = null;\n  let minIndex78 = null;\n  let minIndex79 = null;\n  let minIndex80 = null;\n  let minIndex81 = null;\n  let minIndex82 = null;\n  let minIndex83 = null;\n  let minIndex84 = null;\n  let minIndex85 = null;\n  let minIndex86 = null;\n  let minIndex87 = null;\n  let minIndex88 = null;\n  let minIndex89 = null;\n  let minIndex90 = null;\n  let minIndex91 = null;\n  let minIndex92 = null;\n  let minIndex93 = null;\n  let minIndex94 = null;\n  let minIndex95 = null;\n  let minIndex96 = null;\n  let minIndex97 = null;\n  let minIndex98 = null;\n  let minIndex99 = null;\n  let minIndex100 = null;\n  let minIndex101 = null;\n  let minIndex102 = null;\n  let minIndex103 = null;\n  let minIndex104 = null;\n  let minIndex105 = null;\n  let minIndex106 = null;\n  let minIndex107 = null;\n  let minIndex108);\n  let minIndex109 = largestSmallestIntegers(lst);\n  let minIndex110 = largestSmallestIntegers(lst);\n  let minIndex111 = largestSmallestIntegers(lst);\n  let minIndex112 = largestSmallestIntegers(lst);\n  let minIndex113 = largestSmallestIntegers(lst);\n  let minIndex114 = largestSmallestIntegers(lst);\n  let minIndex115 = largestSmallestIntegers(lst);\n  let minIndex116 = largestSmallestIntegers(lst);\n  let minIndex117 = largestSmallestIntegers(lst);\n  let minIndex118 = largestSmallestIntegers(lst);\n  let minIndex119 = largestSmallestIntegers(lst);\n  let minIndex120 = largestSmallestIntegers(lst);\n  let minIndex121 = largestSmallestIntegers(lst);\n  let minIndex122 = largestSmallestIntegers(lst);\n  let minIndex123 = largestSmallestIntegers(lst);\n  let minIndex124 = largestSmallestIntegers(lst);\n  let minIndex125 = largestSmallestIntegers(lst);\n  let minIndex126 = largestSmallestIntegers(lst);\n  let minIndex127 = largestSmallestIntegers(lst);\n  let minIndex128 = largestSmallestIntegers(lst);\n  let minIndex129 = largestSmallestIntegers(lst);\n  let minIndex130 = largestSmallestIntegers(lst);\n  let minIndex131 = largestSmallestIntegers(lst);\n  let minIndex132 = largestSmallestIntegers(lst);\n  let minIndex133 = largestSmallestIntegers(lst);\n  let minIndex134 = largestSmallestIntegers(lst);\n  let minIndex135 = largestSmallestIntegers(lst);\n  let minIndex136 = largestSmallestIntegers(lst);\n  let minIndex137 = largestSmallestIntegers(lst);\n  let minIndex138 = largestSmallestIntegers(lst);\n  let minIndex139 = largestSmallestIntegers(lst);\n  let minIndex140 = largestSmallestIntegers(lst);\n  let minIndex141 = largestSmallestIntegers(lst);\n  let minIndex142 = largestSmallestIntegers(lst);\n  let minIndex143 = largestSmallestIntegers(lst);\n  let minIndex144 = largestSmallestIntegers(lst);\n  let minIndex145 = largestSmallestIntegers(lst);\n  let minIndex146 = largestSmallestIntegers(lst);\n  let minIndex147 = largestSmallestIntegers(lst);\n  let minIndex148 = largestSmallestIntegers(lst);\n  let minIndex149 = largestSmallestIntegers(lst);\n  let minIndex150 = largestSmallestIntegers(lst);\n  let minIndex151 = largestSmallestIntegers(lst);\n  let minIndex152 = largestSmallestIntegers(lst);\n  let minIndex153 = largestSmallestIntegers(lst);\n  let minIndex154 = largestSmallestIntegers(lst);\n  let minIndex155 = largestSmallestIntegers(lst);\n  let minIndex156 = largestSmallestIntegers(lst);\n  let minIndex157 = largestSmalle", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that take integers, float, or chain constitute \n   actual number, and render the larger variable in its give varying character. \n   Return nothing if the values embody adequate. \n   Note: If a real phone number is map as a chain, the float decimal point might equal. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that take integers, float, or chain constitute \n   actual number, and render the larger variable in its give varying character. \n   Return nothing if the values embody adequate. \n   Note: If a real phone number is map as a chain, the float decimal point might equal. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   const aNum = parseFloat(a);\n   const bNum = parseFloat(b);\n   const aStr = isNaN(aNum)? \"NaN\" : aNum.toString();\n   const bStr = isNaN(bNum)? \"NaN\" : bNum.toString();\n   const aChar = isNaN(aStr)? \"NaN\" : aStr.charAt(0);\n   const bChar = isNaN(bStr)? \"NaN\" : bStr.charAt(0);\n   const aNumStr = aNum.toString();\n   const bNumStr = bNum.toString();\n   const aNumChar = aNum.charAt(0);\n   const bNumChar = bNum.charAt(0);\n   const aNumNum = aNum.match(/\\d+/);\n   const bNumNum = bNum.match(/\\d+/);\n   const aNumNumStr = aNumNum? aNumNum[0] : \"\";\n   const bNumNumStr = bNumNum? bNumNum[0] : \"\";\n   const aNumNumChar = aNumNum.charAt(0);\n   const bNumNumChar = bNumNum.charAt(0);\n   const aNumNumNumNum = aNumNumNum.match(/\\d+/);\n   const bNumNumNum = bNumNum.match(/\\d+/);\n   const aNumNumNumStr = aNumNumNum? aNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNumNumChar = bNumNumNum.charAt(0);\n   const aNumNumNumNumStr = aNumNumNumNum? aNumNumNumNum[0] : \"\";\n   const bNumNumNumStr = bNumNumNum? bNumNumNum[0] : \"\";\n   const aNumNumNumChar = aNumNumNum.charAt(0);\n   const bNumNum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced odd number\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced odd number\n  Example\n  isEqualToSumOddOdd(4) == true\n  isEqualToSumOddOdd(6) == true\n  isEqualToSumOddOdd(8) == false\n  */\nconst isEqualToSumOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEvenOddOdd(4) == false\n  isEqualToSumEvenOddOdd(6) == false\n  isEqualToSumEvenOddOdd(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumOddEven(4) == false\n  isEqualToSumOddEven(6) == false\n  isEqualToSumOddEven(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced odd number\n  Example\n  isEqualToSumEvenOddEven(4) == false\n  isEqualToSumEvenOddEven(6) == false\n  isEqualToSumEvenOddEven(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumOddOddEven(4) == false\n  isEqualToSumOddOddEven(6) == false\n  isEqualToSumOddOddEven(8) == true\n  */\nconst isEqualToSumOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced odd number\n  Example\n  isEqualToSumEvenOddOddEven(4) == false\n  isEqualToSumEvenOddOddEven(6) == false\n  isEqualToSumEvenOddOddEven(8) == true\n  */\nconst isEqualToSumEvenOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumOddEvenOddEven(4) == false\n  isEqualToSumOddEvenOddEven(6) == false\n  isEqualToSumOddEvenOddEven(8) == true\n  */\nconst isEqualToSumOddEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced odd number\n  Example\n  isEqualToSumEvenOddOddOdd(4) == true\n  isEqualToSumEvenOddOddOdd(6) == true\n  isEqualToSumEvenOddOddOdd(8) == false\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumOddEvenOddOddOdd(4) == false\n  isEqualToSumOddEvenOddOddOdd(6) == false\n  isEqualToSumOddEvenOddOddOdd(8) == true\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced odd number\n  Example\n  isEqualToSumOddOddEvenOddOdd(4) == false\n  isEqualToSumOddOddEvenOddOdd(6) == false\n  isEqualToSumOddOddEvenOddOdd(8) == true\n  */\nconst isEqualToSumOddEvenOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*\n  Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEvenOddOddEvenOdd(4) == false\n  isEqualToSumEvenOddOddEvenOdd(6) == false\n  isEqualToSumEvenOddOddEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOddOddEvenO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * n * n * n * n * n * n;\n};\n\n/*\n  Returns the factorial of a number in base 10\n  \n  Parameters:\n  n (integer) \n  \n  Returns: \n  the factorial of n\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number in base 2\n  \n  Parameters:\n  n (integer) \n  \n  Returns: \n  the factorial of n\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = []\n  let prefix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = []\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    suffix = string.charAt(i)\n    if (suffix) {\n      suffixes.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cac', 'cbc', 'cacb', 'bcac', 'caca', 'cbca']\n  */\nconst allSubstrings = (string) => {\n  let substrings = []\n  let substring = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    substring = string.charAt(i)\n    if (substring) {\n      substrings.push(substring)\n    }\n    i++\n  }\n  return substrings\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    word = string.charAt(i)\n    if (word) {\n      words.push(word)\n    }\n    i++\n  }\n  return words\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText = newText.replace(space, '-');\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpace", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which take a string represent a file's name, and return \n  ' Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a function which take a string represent a file's name, and return \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regExp = /^[a-z0-9]+\\.[a-z0-9]+$/i;\n  return regExp.test(file_name);\n};\n\n/*Create a function which take a string represent a file's name, and return \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regExp = /^[a-z0-9]+\\.[a-z0-9]+$/i;\n  return regExp.test(file_name);\n};\n\n/*Create a function which take a string represent a file's name, and return \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regExp = /^[a-z0-9]+\\.[a-z0-9]+$/i;\n  return regExp.test(file_name);\n};\n\n/*Create a function which take a string represent a file's name, and return \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regExp = /^[a-z0-9]+\\.[a-z0-9]+$/i;\n  return regExp.test(file_name);\n};\n\n/*Create a function which take a string represent a file's name, and return \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regExp = /^[a-z0-9]+\\.[a-z0-9]+$/i;\n  return regExp.test(file_name);\n};\n\n/*Create a function which take a string represent a file's name, and return \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regExp = /^[a-z0-9]+\\.[a-z0-9]+$/i;\n  return regExp.test(file_name);\n};\n\n/*Create a function which take a string represent a file's name, and return \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regExp = /^[a-z0-9]+\\.[a-z0-9]+$/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  \n  if(lst && lst.length){\n    for(let i = 0; i < lst.length; i++){\n      if(lst[i] % 3 === 0){\n        sum += lst[i] * lst[i];\n      }\n      else if(lst[i] % 4 === 0){\n        sum += lst[i] * lst[i] * lst[i];\n      }\n      else if(lst[i] % 3 === 0 && lst[i] % 4 === 0){\n        sum += lst[i] * lst[i] * lst[i] * lst[i];\n      }\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list with integers entrances and a list with integers exits, this function will compute the entrance and exit of a given list. \n  \n  Examples:\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]\n  entrance = [1,2,3,4,5,6,7,8,9,10] and exit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string represent a sentence,\n   the sentence contains some password discriminate by a quad, \n   and you receive to return a chain that control the words from the original sentence,\n   whose lengths be premier numbers, \n   the club of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string represent a sentence,\n   the sentence contains some password discriminate by a quad, \n   and you receive to return a chain that control the words from the original sentence,\n   whose lengths be premier numbers, \n   the club of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let chain = [];\n  let words = [];\n  let wordsInSentence = [];\n  let wordsInSentenceLength = 0;\n  let wordsInSentenceLengthPremier = 0;\n  let wordsInSentenceLengthClub = 0;\n  let wordsInSentenceLengthPremierClub = 0;\n  let wordsInSentenceLengthPremierClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLengthPremierClubClubClubClubClubClubClubClubClubClubClubClubClubClubClub = 0;\n  let wordsInSentenceLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a affair that will simplify the expression \n   x * n. The routine render genuine if x * n measure to a solid number and assumed \n   differently. Both x and n, are string representation of a fraction, and own the follow format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fraction, and do not induce zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = dependable \n   simplify(\"1/6\", \" 2/1 \") = assumed \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a affair that will simplify the expression \n   x * n. The routine render genuine if x * n measure to a solid number and assumed \n   differently. Both x and n, are string representation of a fraction, and own the follow format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fraction, and do not induce zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = dependable \n   simplify(\"1/6\", \" 2/1 \") = assumed \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   const [numerator, denominator] = x.split('/').map(Number);\n   const [numerator2, denominator2] = n.split('/').map(Number);\n   const [numerator3, denominator3] = denominator2.split('/').map(Number);\n   const [numerator4, denominator4] = denominator3.split('/').map(Number);\n   const [numerator5, denominator5] = denominator4.split('/').map(Number);\n   const [numerator6, denominator6] = denominator5.split('/').map(Number);\n   const [numerator7, denominator7] = denominator6.split('/').map(Number);\n   const [numerator8, denominator8] = denominator7.split('/').map(Number);\n   const [numerator9, denominator9] = denominator8.split('/').map(Number);\n   const [numerator10, denominator10] = denominator9.split('/').map(Number);\n   const [numerator11, denominator11] = denominator10.split('/').map(Number);\n   const [numerator12, denominator12] = denominator11.split('/').map(Number);\n   const [numerator13, denominator13] = denominator12.split('/').map(Number);\n   const [numerator14, denominator14] = denominator13.split('/').map(Number);\n   const [numerator15, denominator15] = denominator14.split('/').map(Number);\n   const [numerator16, denominator16] = denominator15.split('/').map(Number);\n   const [numerator17, denominator17] = denominator16.split('/').map(Number);\n   const [numerator18, denominator18] = denominator17.split('/').map(Number);\n   const [numerator19, denominator19] = denominator18.split('/').map(Number);\n   const [numerator20, denominator20] = denominator19.split('/').map(Number);\n   const [numerator21, denominator21] = denominator20.split('/').map(Number);\n   const [numerator22, denominator22] = denominator21.split('/').map(Number);\n   const [numerator23, denominator23] = denominator22.split('/').map(Number);\n   const [numerator24, denominator24] = denominator23.split('/').map(Number);\n   const [numerator25, denominator25] = denominator24.split('/').map(Number);\n   const [numerator26, denominator26] = denominator25.split('/').map(Number);\n   const [numerator27, denominator27] = denominator26.split('/').map(Number);\n   const [numerator28, denominator28] = denominator27.split('/').map(Number);\n   const [numerator29, denominator29] = denominator28.split('/').map(Number);\n   const [numerator30, denominator30] = denominator29.split('/').map(Number);\n   const [numerator31, denominator31] = denominator30.split('/').map(Number);\n   const [numerator32, denominator32] = denominator31.split('/').map(Number);\n   const [numerator33, denominator33] = denominator32.split('/').map(Number);\n   const [numerator34, denominator34] = denominator33.split('/').map(Number);\n   const [numerator35, denominator35] = denominator34.split('/').map(Number);\n   const [numerator36, denominator36] = denominator35.split('/').map(Number);\n   const [numerator37, denominator37] = denominator36.split('/').map(Number);\n   const [numerator38, denominator38] = denominator37.split('/').map(Number);\n   const [numerator39, denominator39] = denominator38.split('/').map(Number);\n   const [numerator40, denominator40] = denominator39.split('/').map(Number);\n   const [numerator41, denominator41] = denominator40.split('/').map(Number);\n   const [numerator42, denominator42] = denominator41.split('/').map(Number);\n   const [numerator43, denominator43] = denominator42.split('/').map(Number);\n   const [numerator44, denominator44] = denominator43.split('/').map(Number);\n   const [numerator45, denominator45] = denominator44.split('/').map(Number);\n   const [numerator46, denominator46] = denominator45.split('/').map(Number);\n   const [numerator47, denominator47] = denominator46.split('/').map(Number);\n   const [numerator48, denominator48] = denominator47.split('/').map(Number);\n   const [numerator49, denominator49] = denominator48.split('/').map(Number);\n   const [numerator50, denominator50] = denominator49.split('/').map(Number);\n   const [numerator51, denominator51] = denominator50.split('/').map(Number);\n   const [numerator52, denominator52] = denominator51.split('/').map(Number);\n   const [numerator53, denominator53] = denominator52.split('/').map(Number);\n   const [numerator54, denominator54] = denominator53.split('/').map(Number);\n   const [numerator55, denominator55] = denominator54.split('/').map(Number);\n   const [numerator56, denominator56] = denominator55.split('/').map(Number);\n   const [numerator57, denominator57] = denominator56.split('/').map(Number);\n   const [numerator58, denominator58] = denominator57.split('/').map(Number);\n   const [numerator59, denominator59] = denominator58.split('/').map(Number);\n   const [numerator60, denominator60] = denominator59.split('/').map(Number);\n   const [numerator61, denominator61] = denominator60.split('/').map(Number);\n   const [numerator62, denominator62] = denominator61.split('/').map(Number);\n   const [numerator63, denominator63] = denominator62.split('/').map(Number);\n   const [numerator64, denominator64] = denominator63.split('/').map(Number);\n   const [numerator65, denominator65] = denominator64.split('/').map(Number);\n   const [numerator66, denominator66] = denominator65.split('/').map(Number);\n   const [numerator67, denominator67] = denominator66.split('/').map(Number);\n   const [numerator68, denominator68] = denominator67.split('/').map(Number);\n   const [numerator69, denominator69] = denominator68.split('/').map(Number);\n   const [numerator70, denominator70] = denominator69.split('/').map(Number);\n   const [numerator71, denominator71] = denominator70.split('/').map(Number);\n   const [numerator72, denominator72] = denominator71.split('/').map(Number);\n   const [numerator73, denominator73] = denominator72.split('/').map(Number);\n   const [numerator74, denominator74] = denominator73.split('/').map(Number);\n   const [numerator75, denominator75] = denominator74.split('/').map(Number);\n   const [numerator76, denominator76] = denominator75.split('/').map(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => b - a)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndex = (nums) => {\n  const sorted = nums.sort((a, b) => b - a)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDesc = (nums) => {\n  const sorted = nums.sort((a, b) => b - a)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndex = (nums) => {\n  const sorted = nums.sort((a, b) => b - a)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndexDescByIndex = (nums) => {\n  const sorted = nums.sort((a, b) => b - a)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndexDescByIndexDescByIndex = (nums) => {\n  const sorted = nums.sort((a, b) => b - a)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndexDescByIndexDescByIndexDescByIndex = (nums) => {\n  const sorted = nums.sort((a, b) => b - a)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndexDescByIndexDescByIndexDescByIndex = (nums) => {\n  const sorted = nums.sort((a, b) => b - a)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndexDescByIndexDescByIndexDescByIndex = (nums) => {\n  const sorted = nums.sort((a, b) => b - a)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndexDescByIndexDescByIndexDescByIndex = (nums) => {\n  const sorted = nums.sort((a, b) => b - a)\n  return sorted.map((num, index) => [num, index])\n}\n\n/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that take an array of number as stimulation and recurrence \n   the act of element in the array that constitute capital than 10 and both \n   first and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function that take an array of number as stimulation and recurrence \n   the act of element in the array that constitute capital than 10 and both \n   first and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = nums.length;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268 = 0;\n  let sum269 = 0;\n  let sum270 = 0;\n  let sum271 = 0;\n  let sum272 = 0;\n  let sum273 = 0;\n  let sum274 = 0;\n  let sum275 = 0;\n  let sum276 = 0;\n  let sum277 = 0;\n  let sum278 = 0;\n  let sum279 = 0;\n  let sum280 = 0;\n  let sum281 = 0;\n  let sum282 = 0;\n  let sum283 = 0;\n  let sum284 = 0;\n  let sum285 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i - j - 1] += i * i - i + 1;\n        a[j - i - 1] += j * j - i + 1;\n        a[k - i - 1] += k * k - i + 1;\n      }\n    }\n  }\n  return a.map(n => n % 3);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i - j - 1] += i * i - i + 1;\n        a[j - i - 1] += j * j - i + 1;\n        a[k - i - 1] += k * k - i + 1;\n      }\n    }\n  }\n  return a.map(n => n % 3);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i - j - 1] += i * i - i + 1;\n        a[j - i - 1] += j * j - i + 1;\n        a[k - i - 1] += k * k - i + 1;\n      }\n    }\n  }\n  return a.map(n => n % 3);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i - j - 1] += i * i - i + 1;\n        a[j - i - 1] += j * j - i + 1;\n        a[k - i - 1] += k * k - i + 1;\n      }\n    }\n  }\n  return a.map(n => n % 3);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i - j - 1] += i * i - i + 1;\n        a[j - i - 1] += j * j - i + 1;\n        a[k - i - 1] += k * k - i + 1;\n      }\n    }\n  }\n  return a.map(n => n % 3);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= i; k++) {\n        a[i - j - 1] += i * i - i + 1;\n        a[j - i - 1] += j * j - i + 1;\n        a[k - i - 1] += k * k - i + 1;\n      }\n    }\n  }\n  return a.map(n => n % 3);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples7 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      for (let k = 1; k <= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar arrangement: the closerst to the Sun \n   be Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a affair that takes two satellite names as strings planet1 and planet2.\n   The routine should return a tuple containing all satellite whose orbit are \n   located between the scope of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not right satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar arrangement: the closerst to the Sun \n   be Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a affair that takes two satellite names as strings planet1 and planet2.\n   The routine should return a tuple containing all satellite whose orbit are \n   located between the scope of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not right satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const satellites1 = [planet1, planet2];\n  const satellites2 = [planet2, planet1];\n  const satellites3 = [];\n  const satellites4 = [];\n  const satellites5 = [];\n  const satellites6 = [];\n  const satellites7 = [];\n  const satellites8 = [];\n  const satellites9 = [];\n  const satellites10 = [];\n  const satellites11 = [];\n  const satellites12 = [];\n  const satellites13 = [];\n  const satellites14 = [];\n  const satellites15 = [];\n  const satellites16 = [];\n  const satellites17 = [];\n  const satellites18 = [];\n  const satellites19 = [];\n  const satellites20 = [];\n  const satellites21 = [];\n  const satellites22 = [];\n  const satellites23 = [];\n  const satellites24 = [];\n  const satellites25 = [];\n  const satellites26 = [];\n  const satellites27 = [];\n  const satellites28 = [];\n  const satellites29 = [];\n  const satellites30 = [];\n  const satellites31 = [];\n  const satellites32 = [];\n  const satellites33 = [];\n  const satellites34 = [];\n  const satellites35 = [];\n  const satellites36 = [];\n  const satellites37 = [];\n  const satellites38 = [];\n  const satellites39 = [];\n  const satellites40 = [];\n  const satellites41 = [];\n  const satellites42 = [];\n  const satellites43 = [];\n  const satellites44 = [];\n  const satellites45 = [];\n  const satellites46 = [];\n  const satellites47 = [];\n  const satellites48 = [];\n  const satellites49 = [];\n  const satellites50 = [];\n  const satellites51 = [];\n  const satellites52 = [];\n  const satellites53 = [];\n  const satellites54 = [];\n  const satellites55 = [];\n  const satellites56 = [];\n  const satellites57 = [];\n  const satellites58 = [];\n  const satellites59 = [];\n  const satellites60 = [];\n  const satellites61 = [];\n  const satellites62 = [];\n  const satellites63 = [];\n  const satellites64 = [];\n  const satellites65 = [];\n  const satellites66 = [];\n  const satellites67 = [];\n  const satellites68 = [];\n  const satellites69 = [];\n  const satellites70 = [];\n  const satellites71 = [];\n  const satellites72 = [];\n  const satellites73 = [];\n  const satellites74 = [];\n  const satellites75 = [];\n  const satellites76 = [];\n  const satellites77 = [];\n  const satellites78 = [];\n  const satellites79 = [];\n  const satellites80 = [];\n  const satellites81 = [];\n  const satellites82 = [];\n  const satellites83 = [];\n  const satellites84 = [];\n  const satellites85 = [];\n  const satellites86 = [];\n  const satellites87 = [];\n  const satellites88 = [];\n  const satellites89 = [];\n  const satellites90 = [];\n  const satellites91 = [];\n  const satellites92 = [];\n  const satellites93 = [];\n  const satellites94 = [];\n  const satellites95 = [];\n  const satellites96 = [];\n  const satellites97 = [];\n  const satellites98 = [];\n  const satellites99 = [];\n  const satellites100 = [];\n  const satellites101 = [];\n  const satellites102 = [];\n  const satellites103 = [];\n  const satellites104 = [];\n  const satellites105 = [];\n  const satellites106 = [];\n  const satellites107 = [];\n  const satellites108 = [];\n  const satellites109 = [];\n  const satellites110 = [];\n  const satellites111 = [];\n  const satellites112 = [];\n  const satellites113 = [];\n  const satellites114 = [];\n  const satellites115 = [];\n  const satellites116 = [];\n  const satellites117 = [];\n  const satellites118 = [];\n  const satellites119 = [];\n  const satellites120 = [];\n  const satellites121 = [];\n  const satellites122 = [];\n  const satellites123 = [];\n  const satellites124 = [];\n  const satellites125 = [];\n  const satellites126 = [];\n  const satellites127 = [];\n  const satellites128 = [];\n  const satellites129 = [];\n  const satellites130 = [];\n  const satellites131 = [];\n  const satellites132 = [];\n  const satellites133 = [];\n  const satellites134 = [];\n  const satellites135 = [];\n  const satellites136 = [];\n  const satellites137 = [];\n  const satellites138 = [];\n  const satellites139 = [];\n  const satellites140 = [];\n  const satellites", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accept a list of strings as a argument, \n   erase the string that hold leftover length from it, \n   and return the result list with a sorted order, \n   The list is constantly a list of string and never an array of number, \n   and it may contain extra. \n   The order of the list should be ascending by distance of each word, and you \n   should return the list sorted by that rule. \n   If two parole induce the same distance, sort the list alphabetically. \n   The function should return a list of strings in classify order. \n   You may assume that all discussion will induce the same duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accept a list of strings as a argument, \n   erase the string that hold leftover length from it, \n   and return the result list with a sorted order, \n   The list is constantly a list of string and never an array of number, \n   and it may contain extra. \n   The order of the list should be ascending by distance of each word, and you \n   should return the list sorted by that rule. \n   If two parole induce the same distance, sort the list alphabetically. \n   The function should return a list of strings in classify order. \n   You may assume that all discussion will induce the same duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a - b)\n   .map(str => str.trim())\n   .filter(str => str.length)\n   .map(str => str.length);\n};\n\n/*\n  Write a function that accept a list of strings as a argument, \n  and return the result list with a sorted order, \n  and return the list sorted by that rule. \n  The order of the list should be ascending by distance of each word, and you \n  should return the list sorted by that rule. \n  If two parole induce the same distance, sort the list alphabetically. \n  The function should return a list of strings in classify order. \n  You may assume that all discussion will induce the same duration.\n  For example:\n  assert sortedListSum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListLength = (lst) => {\n  let len = 0;\n  for (let i = 0; i < lst.length; i++) {\n    len += lst[i];\n  }\n  return [...new Set(len.split(\"\"))]\n   .sort((a, b) => a - b)\n   .map(str => str.trim())\n   .filter(str => str.length)\n   .map(str => str.length);\n};\n\n/*\n  Write a function that accept a list of strings as a argument, \n  and return the result list with a sorted order, \n  and return the list sorted by that rule. \n  The order of the list should be ascending by distance of each word, and you \n  should return the list sorted by that rule. \n  If two parole induce the same distance, sort the list alphabetically. \n  The function should return a list of strings in classify order. \n  You may assume that all discussion will induce the same duration.\n  For example:\n  assert sortedListLength([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListLength([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListDistance = (lst) => {\n  let distance = 0;\n  for (let i = 0; i < lst.length; i++) {\n    distance += Math.pow(lst[i], 2);\n  }\n  return [...new Set(distance.split(\"\"))]\n   .sort((a, b) => a - b)\n   .map(str => str.trim())\n   .filter(str => str.length)\n   .map(str => str.length);\n};\n\n/*\n  Write a function that accept a list of strings as a argument, \n  and return the result list with a sorted order, \n  and return the list sorted by that rule. \n  The order of the list should be ascending by distance of each word, and you \n  should return the list sorted by that rule. \n  If two parole induce the same distance, sort the list alphabetically. \n  The function should return a list of strings in classify order. \n  You may assume that all discussion will induce the same duration.\n  For example:\n  assert sortedListDistance([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListDistance([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListDistanceFromWord = (lst) => {\n  let distance = 0;\n  for (let i = 0; i < lst.length; i++) {\n    distance += Math.pow(lst[i], 2);\n  }\n  return [...new Set(distance.split(\"\"))]\n   .sort((a, b) => a - b)\n   .map(str => str.trim())\n   .filter(str => str.length)\n   .map(str => str.length);\n};\n\n/*\n  Write a function that accept a list of strings as a argument, \n  and return the result list with a sorted order, \n  and return the list sorted by that rule. \n  The order of the list should be ascending by distance of each word, and you \n  should return the list sorted by that rule. \n  If two parole induce the same distance, sort the list alphabetically. \n  The function should return a list of strings in classify order. \n  You may assume that all discussion will induce the same duration.\n  For example:\n  assert sortedListDistanceFromWord([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListDistanceFromWord([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListDistanceFromWordAndWord = (lst) => {\n  let distance = 0;\n  for (let i = 0; i < lst.length; i++) {\n    distance += Math.pow(lst[i], 2);\n  }\n  return [...new Set(distance.split(\"\"))]\n   .sort((a, b) => a - b)\n   .map(str => str.trim())\n   .filter(str => str.length)\n   .map(str => str.length);\n};\n\n/*\n  Write a function that accept a list of strings as a argument, \n  and return the result list with a sorted order, \n  and return the list sorted by that rule. \n  The order of the list should be ascending by distance of each word, and you \n  should return the list sorted by that rule. \n  If two parole induce the same distance, sort the list alphabetically. \n  The function should return a list of strings in classify order. \n  You may assume that all discussion will induce the same duration.\n  For example:\n  assert sortedListDistanceFromWordAndWord([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListDistanceFromWordAndWord([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListDistanceFromWordAndWordAndWord = (lst) => {\n  let distance = 0;\n  for (let i = 0; i < lst.length; i++) {\n    distance += Math.pow(lst[i], 2);\n  }\n  return [...new Set(distance.split(\"\"))]\n   .sort((a, b) => a - b)\n   .map(str => str.trim())\n   .filter(str => str.length)\n   .map(str => str.length);\n};\n\n/*\n  Write a function that accept a list of strings as a argument, \n  and return the result list with a sorted order, \n  and return the list sorted by that rule. \n  The order of the list should be ascending by distance of each word, and you \n  should return the list sorted by that rule. \n  If two parole induce the same distance, sort the list alphabetically. \n  The function should return a list of strings in classify order. \n  You may assume that all discussion will induce the same duration.\n  For example:\n  assert sortedListDistanceFromWordAndWordAndWord([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListDistanceFromWordAndWordAndWord([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListDistanceFromWordAndWordAndWordAndWord = (lst) => {\n  let distance = 0;\n  for (let i = 0; i < lst.length; i++) {\n    distance += Math.pow(lst[i], 2);\n  }\n  return [...new Set(distance.split(\"\"))]\n   .sort((a, b) => a - b)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceUpTo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str.slice(0, n);\n};\n\n/**\n * Return a string incorporate space - subtend numeral get down ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % y === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     sum += lst[i] * lst[i];\n   }\n   return sum;\n };\n \n /* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleThe", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that impression when the solution of some long - expect \n   consequence is finally know. The spirit and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your undertaking is to specify if a person correctly estimate the resultant role of a number of matches. \n   You are given two array of score and guesses of adequate distance, where each index shows a catch. \n   Return an array of the same length denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that impression when the solution of some long - expect \n   consequence is finally know. The spirit and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your undertaking is to specify if a person correctly estimate the resultant role of a number of matches. \n   You are given two array of score and guesses of adequate distance, where each index shows a catch. \n   Return an array of the same length denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [score, guess] = game.map((v, i) => [v, guess[i]]);\n  const [min] = Math.min(...score);\n  const [max] = Math.max(...score);\n  const [min, max] = [min, max].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [min, max].sort((a, b) => a - b);\n  const [minScore, maxScore] = [min, max].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].sort((a, b) => a - b);\n  const [minScore, maxScore] = [minScore, maxScore].sort((a, b) => a - b);\n  const [minGuess, maxGuess] = [minGuess, maxGuess].", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a course (a string) and a list of extensions.\n   The extensions are to be used to load extra class to the course. The \n   strength of the elongation is as follows: lease CAP cost the number of the uppercase \n   letter in the propagation's name, and get SM be the number of small letter letters \n   in the extension's name, the military capability is given by the fraction CAP - SM. \n   You should recover the solid extension and return a drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same military capability, you should \n   choose the one that comes foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a course (a string) and a list of extensions.\n   The extensions are to be used to load extra class to the course. The \n   strength of the elongation is as follows: lease CAP cost the number of the uppercase \n   letter in the propagation's name, and get SM be the number of small letter letters \n   in the extension's name, the military capability is given by the fraction CAP - SM. \n   You should recover the solid extension and return a drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same military capability, you should \n   choose the one that comes foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let strongest_extension = '';\n  let extension_military_capability = -1;\n  let extension_military_capability_index = -1;\n  let extension_military_capability_value = '';\n  let extension_military_capability_value_index = 0;\n  let extension_military_capability_value_count = 0;\n  let extension_military_capability_value_count2 = 0;\n  let extension_military_capability_value_count3 = 0;\n  let extension_military_capability_value_count4 = 0;\n  let extension_military_capability_value_count5 = 0;\n  let extension_military_capability_value_count6 = 0;\n  let extension_military_capability_value_count7 = 0;\n  let extension_military_capability_value_count8 = 0;\n  let extension_military_capability_value_count9 = 0;\n  let extension_military_capability_value_count10 = 0;\n  let extension_military_capability_value_count11 = 0;\n  let extension_military_capability_value_count12 = 0;\n  let extension_military_capability_value_count13 = 0;\n  let extension_military_capability_value_count14 = 0;\n  let extension_military_capability_value_count15 = 0;\n  let extension_military_capability_value_count16 = 0;\n  let extension_military_capability_value_count17 = 0;\n  let extension_military_capability_value_count18 = 0;\n  let extension_military_capability_value_count19 = 0;\n  let extension_military_capability_value_count20 = 0;\n  let extension_military_capability_value_count21 = 0;\n  let extension_military_capability_value_count22 = 0;\n  let extension_military_capability_value_count23 = 0;\n  let extension_military_capability_value_count24 = 0;\n  let extension_military_capability_value_count25 = 0;\n  let extension_military_capability_value_count26 = 0;\n  let extension_military_capability_value_count27 = 0;\n  let extension_military_capability_value_count28 = 0;\n  let extension_military_capability_value_count29 = 0;\n  let extension_military_capability_value_count30 = 0;\n  let extension_military_capability_value_count31 = 0;\n  let extension_military_capability_value_count32 = 0;\n  let extension_military_capability_value_count33 = 0;\n  let extension_military_capability_value_count34 = 0;\n  let extension_military_capability_value_count35 = 0;\n  let extension_military_capability_value_count36 = 0;\n  let extension_military_capability_value_count37 = 0;\n  let extension_military_capability_value_count38 = 0;\n  let extension_military_capability_value_count39 = 0;\n  let extension_military_capability_value_count40 = 0;\n  let extension_military_capability_value_count41 = 0;\n  let extension_military_capability_value_count42 = 0;\n  let extension_military_capability_value_count43 = 0;\n  let extension_military_capability_value_count44 = 0;\n  let extension_military_capability_value_count45 = 0;\n  let extension_military_capability_value_count46 = 0;\n  let extension_military_capability_value_count47 = 0;\n  let extension_military_capability_value_count48 = 0;\n  let extension_military_capability_value_count49 = 0;\n  let extension_military_capability_value_count50 = 0;\n  let extension_military_capability_value_count51 = 0;\n  let extension_military_capability_value_count52 = 0;\n  let extension_military_capability_value_count53 = 0;\n  let extension_military_capability_value_count54 = 0;\n  let extension_military_capability_value_count55 = 0;\n  let extension_military_capability_value_count56 = 0;\n  let extension_military_capability_value_count57 = 0;\n  let extension_military_capability_value_count58 = 0;\n  let extension_military_capability_value_count59 = 0;\n  let extension_military_capability_value_count60 = 0;\n  let extension_military_capability_value_count61 = 0;\n  let extension_military_capability_value_count62 = 0;\n  let extension_military_capability_value_count63 = 0;\n  let extension_military_capability_value_count64 = 0;\n  let extension_military_capability_value_count65 = 0;\n  let extension_military_capability_value_count66 = 0;\n  let extension_military_capability_value_count67 = 0;\n  let extension_military_capability_value_count68 = 0;\n  let extension_military_capability_value_count69 = 0;\n  let extension_military_capability_value_count70 = 0;\n  let extension_military_capability_value_count71 = 0;\n  let extension_military_capability_value_count72 = 0;\n  let extension_military_capability_value_count73 = 0;\n  let extension_military_capability_value_count74 = 0;\n  let extension_military_capability_value_count75 = 0;\n  let extension_military_capability_value_count76 = 0;\n  let extension_military_capability_value_count77 = 0;\n  let extension_military_capability_value_count78 = 0;\n  let extension_military_capability_value_count79 = 0;\n  let extension_military_capability_value_count80 = 0;\n  let extension_military_capability_value_count81 = 0;\n  let extension_military_capability_value_count82 = 0;\n  let extension_military_capability_value_count83 = 0;\n  let extension_military_capability_value_count84 = 0;\n  let extension_military_capability_value_count85 = 0;\n  let extension_military_capability_value_count86 = 0;\n  let extension_military_capability_value_count87 = 0;\n  let extension_military_capability_value_count88", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You necessitate to return true if the second discussion or any of its rotation be a substring in the inaugural parole \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > assumed \n   cycpatternCheck(\"abab\",\"baa\") = > genuine \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > on-key \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You necessitate to return true if the second discussion or any of its rotation be a substring in the inaugural parole \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > assumed \n   cycpatternCheck(\"abab\",\"baa\") = > genuine \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > on-key \n   * / \n const cycpatternCheck = (a, b) = > {\n   let aArray = a.split('');\n   let bArray = b.split('');\n   let aLen = aArray.length;\n   let bLen = bArray.length;\n   let aIndex = 0;\n   let bIndex = 0;\n   let aFound = false;\n   let bFound = false;\n   let aFoundInArray = false;\n   let bFoundInArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubSubArray = false;\n   let bFoundInSubSubArray = false;\n   let aFoundInSubSubSubArray = false;\n   let bFoundInSubSubSubArray = false;\n   let aFoundInSubSubSubArray = false;\n   let bFoundInSubSubSubArray = false;\n   let aFoundInSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubArray = false;\n   let bFoundInSubSubSubSubArray = false;\n   let aFoundInSubSubSubSubArray = false;\n   let bFoundInSubSubSubArray = false;\n   let aFoundInSubSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInArray = false;\n   let bFoundInArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubSubArray = false;\n   let bFoundInSubSubArray = false;\n   let aFoundInSubSubArray = false;\n   let bFoundInSubSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInArray = false;\n   let bFoundInArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubSubArray = false;\n   let bFoundInSubSubArray = false;\n   let aFoundInSubSubArray = false;\n   let bFoundInSubSubArray = false;\n   let aFoundInSubSubArray = false;\n   let bFoundInSubSubArray = false;\n   let aFoundInSubSubArray = false;\n   let bFoundInSubSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInArray = false;\n   let bFoundInArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundInSubArray = false;\n   let aFoundInSubArray = false;\n   let bFoundIn", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let remainder = num % 10;\n  while (remainder > 0) {\n    count += 1;\n    remainder /= 10;\n  }\n  return [count, num % 10];\n};\n\n/*Given a string, return an array that have the number of characters in the string.\n\n   Example:\n      characterCount(\"hello\") ==> [\"h\", \"e\", \"l\", \"l\", \"o\"]\n      characterCount(\"hello12\") ==> [\"h\", \"e\", \"l\", \"12\"]\n  */\nconst characterCount = (str) => {\n  let count = 0;\n  let chars = str.split('');\n  chars.forEach((char) => {\n    count += 1;\n  });\n  return [count, str.length];\n};\n\n/*Given a string, return an array that have the number of words in the string.\n\n   Example:\n      wordCount(\"hello\") ==> [\"hello\", \"hel\", \"lo\", \"hell\", \"o\"]\n      wordCount(\"hello12\") ==> [\"hello\", \"hel\", \"lo\", \"hell\", \"12\"]\n  */\nconst wordCount = (str) => {\n  let count = 0;\n  let words = str.split(' ');\n  words.forEach((word) => {\n    count += 1;\n  });\n  return [count, str.length];\n};\n\n/*Given a string, return an array that have the number of sentences in the string.\n\n   Example:\n      sentenceCount(\"hello\") ==> [\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let chain = '';\n  let remainder = '';\n  let num = (number + '').replace(/^0+/, '');\n  let numDigits = num.length;\n  let numRoman = '';\n  let numRomanDigits = numDigits;\n  let numRomanRoman = '';\n  let numRomanRomanDigits = numRomanDigits;\n  let numRomanRomanRoman = '';\n  let numRomanRomanRomanDigits = numRomanRomanDigits;\n  let numRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanDigits = numRomanRomanRomanRomanDigits;\n  let numRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanDigits = numRomanRomanRomanRomanRomanDigits;\n  let numRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanDigits = numRomanRomanRomanRomanRomanRomanRomanDigits;\n  let numRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanDigits = numRomanRomanRomanRomanRomanRomanRomanRomanDigits;\n  let numRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRomanRomanRomanRomanRoman = '';\n  let numRomanRomanRomanRomanRo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.sqrt(a * a + b * b);\n  const b = Math.sqrt(b * b + c * c);\n  const c = Math.sqrt(c * c + a * a);\n  return a >= b && a >= c && b >= c && b >= a;\n};\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.sqrt(a * a + b * b);\n  const b = Math.sqrt(b * b + c * c);\n  const c = Math.sqrt(c * c + a * a);\n  return a >= b && a >= c && b >= c && b >= a;\n};\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.sqrt(a * a + b * b);\n  const b = Math.sqrt(b * b + c * c);\n  const c = Math.sqrt(c * c + a * a);\n  return a >= b && a >= c && b >= c && b >= a;\n};\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.sqrt(a * a + b * b);\n  const b = Math.sqrt(b * b + c * c);\n  const c = Math.sqrt(c * c + a * a);\n  return a >= b && a >= c && b >= c && b >= a;\n};\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.sqrt(a * a + b * b);\n  const b = Math.sqrt(b * b + c * c);\n  const c = Math.sqrt(c * c + a * a);\n  return a >= b && a >= c && b >= c && b >= a;\n};\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.sqrt(a * a + b * b);\n  const b = Math.sqrt(b * b + c * c);\n  const c = Math.sqrt(c * c + a * a);\n  return a >= b && a >= c && b >= c && b >= a;\n};\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.sqrt(a * a + b * b);\n  const b = Math.sqrt(b * b + c * c);\n  const c = Math.sqrt(c * c + a * a);\n  return a >= b && a >= c && b >= c && b >= a;\n};\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.sqrt(a * a + b * b);\n  const b = Math.sqrt(b * b + c * c);\n  const c = Math.sqrt(c * c + a * a);\n  return a >= b && a >= c && b >= c && b >= a;\n};\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.sqrt(a * a + b * b);\n  const b = Math.sqrt(b * b + c * c);\n  const c = Math.sqrt(c * c + a * a);\n  return a >= b && a >= c && b >= c && b >= a;\n};\n\n/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.sqrt(a * a + b * b);\n  const b = Math.sqrt(b * b + c * c);\n  const c = Math.sqrt(c * c + a * a);\n  return a >= b ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accept a list of strings. \n   The list contain unlike words. Return the news with maximum numeral \n   of unique character. If multiple strings have maximum phone number of alone \n   characters, return the one which fall first in lexicographical orderliness. \n\n   findMax([\"name\", \" of \", \" chain \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accept a list of strings. \n   The list contain unlike words. Return the news with maximum numeral \n   of unique character. If multiple strings have maximum phone number of alone \n   characters, return the one which fall first in lexicographical orderliness. \n\n   findMax([\"name\", \" of \", \" chain \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let maxNum = 0;\n   let maxWord = \"\";\n   let maxNumOfUniqueChar = 0;\n   let maxNumOfUniqueCharOfWord = 0;\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n   }\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n   }\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n   }\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n   }\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n   }\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n   }\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n   }\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n   }\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n   }\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n   }\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > maxNumOfUniqueCharOfWord) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueChar) {\n       maxNumOfUniqueCharOfWord = words[i].length;\n       maxNumOfUniqueChar = words[i].length;\n     }\n     if (words[i].length === maxNumOfUniqueCharOfWord) {\n       max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const totalCarrots = carrots * need;\n  const totalCarrotLeft = totalCarrots - remaining;\n  return [totalCarrots, totalCarrotLeft];\n};\n\n/*\n  You are a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const totalCarrots = carrots * need;\n  const totalCarrotLeft = totalCarrots - remaining;\n  return [totalCarrots, totalCarrotLeft];\n};\n\n/*\n  You are a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const totalCarrots = carrots * need;\n  const totalCarrotLeft = totalCarrots - remaining;\n  return [totalCarrots, totalCarrotLeft];\n};\n\n/*\n  You are a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const totalCarrots = carrots * need;\n  const totalCarrotLeft = totalCarrots - remaining;\n  return [totalCarrots, totalCarrotLeft];\n};\n\n/*\n  You are a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const totalCarrots = carrots * need;\n  const totalCarrotLeft = totalCarrots - remaining;\n  return [totalCarrots, totalCarrotLeft];\n};\n\n/*\n  You are a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].length;\n  }\n  return count;\n};\n\n/* Given a string, find the longest common substring with that string\n  >>> longestCommonSubstring('abc', 'abc')\n  'a'\n  >>> longestCommonSubstring('abc', 'abd')\n  'b'\n  >>> longestCommonSubstring('abc', 'abcd')\n  'c'\n  >>> longestCommonSubstring('abc', 'bc')\n  'b'\n  >>> longestCommonSubstring('abc', 'bcde')\n  'de'\n  */\nconst longestCommonSubstring = (string1, string2) => {\n  let count1 = 0;\n  let count2 = 0;\n  let longestCommonSubstring = '';\n  let chars1 = string1.split('');\n  let chars2 = string2.split('');\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      count2++;\n    }\n  }\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      if (count1 > count2) {\n        longestCommonSubstring = chars1[i];\n        count1 = count2;\n      }\n    }\n  }\n  return longestCommonSubstring;\n};\n\n/* Given a string, find the longest common substring with that string\n  >>> longestCommonSubstring('abc', 'abd')\n  'a'\n  >>> longestCommonSubstring('abc', 'abcd')\n  'b'\n  >>> longestCommonSubstring('abc', 'bc')\n  'b'\n  >>> longestCommonSubstring('abc', 'bcde')\n  'de'\n  */\nconst longestCommonSubstringWith = (string1, string2) => {\n  let count1 = 0;\n  let count2 = 0;\n  let longestCommonSubstring = '';\n  let chars1 = string1.split('');\n  let chars2 = string2.split('');\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      count2++;\n    }\n  }\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      if (count1 > count2) {\n        longestCommonSubstring = chars1[i];\n        count1 = count2;\n      }\n    }\n  }\n  return longestCommonSubstring;\n};\n\n/* Given a string, find the longest common substring with that string\n  >>> longestCommonSubstring('abc', 'abd')\n  'a'\n  >>> longestCommonSubstring('abc', 'abcd')\n  'b'\n  >>> longestCommonSubstring('abc', 'bc')\n  'b'\n  >>> longestCommonSubstring('abc', 'bcde')\n  'de'\n  */\nconst longestCommonSubstringWithCase = (string1, string2) => {\n  let count1 = 0;\n  let count2 = 0;\n  let longestCommonSubstring = '';\n  let chars1 = string1.split('');\n  let chars2 = string2.split('');\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      count2++;\n    }\n  }\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      if (count1 > count2) {\n        longestCommonSubstring = chars1[i];\n        count1 = count2;\n      }\n    }\n  }\n  return longestCommonSubstring;\n};\n\n/* Given a string, find the longest common substring with that string\n  >>> longestCommonSubstring('abc', 'abd')\n  'a'\n  >>> longestCommonSubstring('abc', 'abcd')\n  'b'\n  >>> longestCommonSubstring('abc', 'bc')\n  'b'\n  >>> longestCommonSubstring('abc', 'bcde')\n  'de'\n  */\nconst longestCommonSubstringWithCaseAndLength = (string1, string2) => {\n  let count1 = 0;\n  let count2 = 0;\n  let longestCommonSubstring = '';\n  let chars1 = string1.split('');\n  let chars2 = string2.split('');\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      count2++;\n    }\n  }\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      if (count1 > count2) {\n        longestCommonSubstring = chars1[i];\n        count1 = count2;\n      }\n    }\n  }\n  return longestCommonSubstring;\n};\n\n/* Given a string, find the longest common substring with that string\n  >>> longestCommonSubstring('abc', 'abd')\n  'a'\n  >>> longestCommonSubstring('abc', 'abcd')\n  'b'\n  >>> longestCommonSubstring('abc', 'bc')\n  'b'\n  >>> longestCommonSubstring('abc', 'bcde')\n  'de'\n  */\nconst longestCommonSubstringWithCaseAndLengthAndLength = (string1, string2) => {\n  let count1 = 0;\n  let count2 = 0;\n  let longestCommonSubstring = '';\n  let chars1 = string1.split('');\n  let chars2 = string2.split('');\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      count2++;\n    }\n  }\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      if (count1 > count2) {\n        longestCommonSubstring = chars1[i];\n        count1 = count2;\n      }\n    }\n  }\n  return longestCommonSubstring;\n};\n\n/* Given a string, find the longest common substring with that string\n  >>> longestCommonSubstring('abc', 'abd')\n  'a'\n  >>> longestCommonSubstring('abc', 'abcd')\n  'b'\n  >>> longestCommonSubstring('abc', 'bc')\n  'b'\n  >>> longestCommonSubstring('abc', 'bcde')\n  'de'\n  */\nconst longestCommonSubstringWithCaseAndLengthAndLengthAndLength = (string1, string2) => {\n  let count1 = 0;\n  let count2 = 0;\n  let longestCommonSubstring = '';\n  let chars1 = string1.split('');\n  let chars2 = string2.split('');\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      count2++;\n    }\n  }\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      if (count1 > count2) {\n        longestCommonSubstring = chars1[i];\n        count1 = count2;\n      }\n    }\n  }\n  return longestCommonSubstring;\n};\n\n/* Given a string, find the longest common substring with that string\n  >>> longestCommonSubstring('abc', 'abd')\n  'a'\n  >>> longestCommonSubstring('abc', 'abcd')\n  'b'\n  >>> longestCommonSubstring('abc', 'bc')\n  'b'\n  >>> longestCommonSubstring('abc', 'bcde')\n  'de'\n  */\nconst longestCommonSubstringWithCaseAndLengthAndLengthAndLength = (string1, string2) => {\n  let count1 = 0;\n  let count2 = 0;\n  let longestCommonSubstring = '';\n  let chars1 = string1.split('');\n  let chars2 = string2.split('');\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2[i]) {\n      count1++;\n    } else {\n      count2++;\n    }\n  }\n  for (let i = 0; i < chars1.length; i++) {\n    if (chars1[i] === chars2", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n  const result = operandList.reduce((acc, curr) => {\n    return acc + curr * operatorList[operatorList.length - 1];\n  }, 0);\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n  const result = operandList.reduce((acc, curr) => {\n    return acc + curr * operatorList[operatorList.length - 1];\n  }, 0);\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n  const result = operandList.reduce((acc, curr) => {\n    return acc + curr * operatorList[operatorList.length - 1];\n  }, 0);\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n  const result = operandList.reduce((acc, curr) => {\n    return acc + curr * operatorList[operatorList.length - 1];\n  }, 0);\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n  const result = operandList.reduce((acc, curr) => {\n    return acc + curr * operatorList[operatorList.length - 1];\n  }, 0);\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n  const result = operandList.reduce((acc, curr) => {\n    return acc + curr * operatorList[operatorList.length - 1];\n  }, 0);\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n   differently restrain it as it be. \n   If the chain contain no letters, reverse the drawstring. \n   The affair should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n   differently restrain it as it be. \n   If the chain contain no letters, reverse the drawstring. \n   The affair should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = \"\";\n  let res = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha1('Hello world') == '4cc9ffaf5c608d967d4040f996c13c'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha224('Hello world') == '428a2f98c13f4d9574d76b994e100d4ab22'\n  */\nconst stringToSha224 = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('sha224');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha256('Hello world') == '629a8a391c0f1b6a831c399e2697726614a3bd'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha384('Hello world') == 'cbbb9d5dc1059ed695e2e421f6d69287980e4485b576625e7ec6f44c42e9a6'\n  */\nconst stringToSha384 = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('sha384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha512('Hello world') == '8e959b83086d22c985c795a293faf59c7e34936bbcb6115973b0634f81'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToMd5('Hello world') == '4cc9ffaf5c608d967d4040f996c13c'\n  */\nconst stringToMd5Hash = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha1('Hello world') == '4cc9ffaf5c608d967d4040f996c13c'\n  */\nconst stringToSha1Hash = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha224('Hello world') == '428a2f98c13f4d9574d76b994e100d4ab22'\n  */\nconst stringToSha224Hash = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('sha224');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha256('Hello world') == '629a8a391c0f1b6a831c399e2697726614a3bd'\n  */\nconst stringToSha256Hash = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha384('Hello world') == 'cbbb9d5dc1059ed695e2e421f6d69287980e4485b576625e7ec6f44c42e9a6'\n  */\nconst stringToSha384Hash = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('sha384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha512('Hello world') == '8e959b83086d22c985c795a293faf59c7e34936bbcb6115973b0634f81'\n  */\nconst stringToSha512Hash = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToMd5Hash('Hello world') == '4cc9ffaf5c608d967d4040f996c13c'\n  */\nconst stringToMd5HashHash = (text) => {\n  if (!text) {\n    return '';\n  }\n\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToSha1Hash('Hello world') == '4cc9ffaf5c608", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integer a and b, return the even digits between a\n   and b, in ascending decree.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integer a and b, return the even digits between a\n   and b, in ascending decree.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    if (j % 2 === 0) {\n      result.push(j);\n    }\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/**\n * Given a string, return a string where all characters are lowercase.\n */\nconst lowerCase = str => {\n  return str.toLowerCase().replace(/[^a-z]+/g, '');\n};\n\n/**\n * Given a string, return a string where all characters are uppercase.\n */\nconst upperCase = str => {\n  return str.toUpperCase().replace(/[^A-Z]+/g, '');\n};\n\n/**\n * Given a string, return a string where all characters are capitalized.\n */\nconst capitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are removed.\n */\nconst remove = str => {\n  return str.replace(/[^A-Za-z]+/g, '');\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n */\nconst toLowercase = str => {\n  return str.toLowerCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to uppercase.\n */\nconst toUppercase = str => {\n  return str.toUpperCase();\n};\n\n/**\n * Given a string, return a string where all characters are converted to capitalized.\n */\nconst toCapitalize = str => {\n  return str[0].toUpperCase() + str.substring(1);\n};\n\n/**\n * Given a string, return a string where all characters are converted to lowercase.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a bowed stringed instrument representing melodious bill in a particular ASCII format. \n   Your undertaking is to parse this string and return list of integers represent to how many beats does each \n   not final. \n\n   Here is a caption: \n  ' o' - whole eminence, last four meter \n  ' o|' - half note, last two beatnik \n  ' .|' - quater eminence, survive one pulse\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a bowed stringed instrument representing melodious bill in a particular ASCII format. \n   Your undertaking is to parse this string and return list of integers represent to how many beats does each \n   not final. \n\n   Here is a caption: \n 'o' - whole eminence, last four meter \n 'o|' - half note, last two beatnik \n  '.|' - quater eminence, survive one pulse\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const musicArray = music_string.split('|');\n  const musicArrayLength = musicArray.length;\n  const musicArrayIndex = 0;\n  const musicArrayValues = [];\n  const musicArrayValue = 0;\n  const musicArrayValueIndex = 0;\n  const musicArrayValueLength = 0;\n  const musicArrayValueIndex1 = 0;\n  const musicArrayValueIndex2 = 0;\n  const musicArrayValueIndex3 = 0;\n  const musicArrayValueIndex4 = 0;\n  const musicArrayValueIndex5 = 0;\n  const musicArrayValueIndex6 = 0;\n  const musicArrayValueIndex7 = 0;\n  const musicArrayValueIndex8 = 0;\n  const musicArrayValueIndex9 = 0;\n  const musicArrayValueIndex10 = 0;\n  const musicArrayValueIndex11 = 0;\n  const musicArrayValueIndex12 = 0;\n  const musicArrayValueIndex13 = 0;\n  const musicArrayValueIndex14 = 0;\n  const musicArrayValueIndex15 = 0;\n  const musicArrayValueIndex16 = 0;\n  const musicArrayValueIndex17 = 0;\n  const musicArrayValueIndex18 = 0;\n  const musicArrayValueIndex19 = 0;\n  const musicArrayValueIndex20 = 0;\n  const musicArrayValueIndex21 = 0;\n  const musicArrayValueIndex22 = 0;\n  const musicArrayValueIndex23 = 0;\n  const musicArrayValueIndex24 = 0;\n  const musicArrayValueIndex25 = 0;\n  const musicArrayValueIndex26 = 0;\n  const musicArrayValueIndex27 = 0;\n  const musicArrayValueIndex28 = 0;\n  const musicArrayValueIndex29 = 0;\n  const musicArrayValueIndex30 = 0;\n  const musicArrayValueIndex31 = 0;\n  const musicArrayValueIndex32 = 0;\n  const musicArrayValueIndex33 = 0;\n  const musicArrayValueIndex34 = 0;\n  const musicArrayValueIndex35 = 0;\n  const musicArrayValueIndex36 = 0;\n  const musicArrayValueIndex37 = 0;\n  const musicArrayValueIndex38 = 0;\n  const musicArrayValueIndex39 = 0;\n  const musicArrayValueIndex40 = 0;\n  const musicArrayValueIndex41 = 0;\n  const musicArrayValueIndex42 = 0;\n  const musicArrayValueIndex43 = 0;\n  const musicArrayValueIndex44 = 0;\n  const musicArrayValueIndex45 = 0;\n  const musicArrayValueIndex46 = 0;\n  const musicArrayValueIndex47 = 0;\n  const musicArrayValueIndex48 = 0;\n  const musicArrayValueIndex49 = 0;\n  const musicArrayValueIndex50 = 0;\n  const musicArrayValueIndex51 = 0;\n  const musicArrayValueIndex52 = 0;\n  const musicArrayValueIndex53 = 0;\n  const musicArrayValueIndex54 = 0;\n  const musicArrayValueIndex55 = 0;\n  const musicArrayValueIndex56 = 0;\n  const musicArrayValueIndex57 = 0;\n  const musicArrayValueIndex58 = 0;\n  const musicArrayValueIndex59 = 0;\n  const musicArrayValueIndex60 = 0;\n  const musicArrayValueIndex61 = 0;\n  const musicArrayValueIndex62 = 0;\n  const musicArrayValueIndex63 = 0;\n  const musicArrayValueIndex64 = 0;\n  const musicArrayValueIndex65 = 0;\n  const musicArrayValueIndex66 = 0;\n  const musicArrayValueIndex67 = 0;\n  const musicArrayValueIndex68 = 0;\n  const musicArrayValueIndex69 = 0;\n  const musicArrayValueIndex70 = 0;\n  const musicArrayValueIndex71 = 0;\n  const musicArrayValueIndex72 = 0;\n  const musicArrayValueIndex73 = 0;\n  const musicArrayValueIndex74 = 0;\n  const musicArrayValueIndex75 = 0;\n  const musicArrayValueIndex76 = 0;\n  const musicArrayValueIndex77 = 0;\n  const musicArrayValueIndex78 = 0;\n  const musicArrayValueIndex79 = 0;\n  const musicArrayValueIndex80 = 0;\n  const musicArrayValueIndex81 = 0;\n  const musicArrayValueIndex82 = 0;\n  const musicArrayValueIndex83 = 0;\n  const musicArrayValueIndex84 = 0;\n  const musicArrayValueIndex85 = 0;\n  const musicArrayValueIndex86 = 0;\n  const musicArrayValueIndex87 = 0;\n  const musicArrayValueIndex88 = 0;\n  const musicArrayValueIndex89 = 0;\n  const musicArrayValueIndex90 = 0;\n  const musicArrayValueIndex91 = 0;\n  const musicArrayValueIndex92 = 0;\n  const musicArrayValueIndex93 = 0;\n  const musicArrayValueIndex94 = 0;\n  const musicArrayValueIndex95 = 0;\n  const musicArrayValueIndex96 = 0;\n  const musicArrayValueIndex97 = 0;\n  const musicArrayValueIndex98 = 0;\n  const musicArrayValueIndex99 = 0;\n  const musicArrayValueIndex100 = 0;\n  const musicArrayValueIndex101 = 0;\n  const musicArrayValueIndex102 = 0;\n  const musicArrayValueIndex103 = 0;\n  const musicArrayValueIndex104 = 0;\n  const musicArrayValueIndex105 = 0;\n  const musicArrayValueIndex106 = 0;\n  const musicArrayValueIndex107 = 0;\n  const musicArrayValueIndex108 = 0;\n  const musicArrayValueIndex109 = 0;\n  const musicArrayValueIndex110 = 0;\n  const musicArrayValueIndex111 = 0;\n  const musicArrayValueIndex112 = 0;\n  const musicArrayValueIndex113 = 0;\n  const musicArrayValueIndex114 = 0;\n  const musicArrayValueIndex115 = 0;\n  const musicArrayValueIndex116 = 0;\n  const musicArrayValueIndex117 = 0;\n  const musicArrayValueIndex118 = 0;\n  const musicArrayValueIndex119 = 0;\n  const musicArrayValueIndex120 = 0;\n  const musicArrayValueIndex121 = 0;\n  const musicArrayValueIndex122 = 0;\n  const musicArrayValueIndex123 = 0;\n  const musicArrayValueIndex124 = 0;\n  const musicArrayValueIndex125 = 0;\n  const musicArrayValueIndex126 = 0;\n  const musicArrayValueIndex127 = 0;\n  const musicArrayValueIndex128 = 0;\n  const musicArrayValueIndex129 = 0;\n  const musicArrayValueIndex130 = 0;\n  const musicArrayValueIndex131 = 0;\n  const musicArrayValueIndex132 = 0;\n  const musicArrayValueIndex133 = 0;\n  const musicArrayValueIndex134 = 0;\n  const musicArrayValueIndex135 = 0;\n  const musicArrayValueIndex136 = 0;\n  const musicArrayValueIndex137 = 0;\n  const musicArrayValueIndex138 = 0;\n  const musicArrayValueIndex139 = 0;\n  const musicArrayValueIndex140 = 0;\n  const musicArrayValueIndex141 = 0;\n  const musicArrayValueIndex142 = 0;\n  const musicArrayValueIndex143 = 0;\n  const musicArrayValueIndex144 = 0;\n  const musicArrayValueIndex145 = 0;\n  const musicArrayValueIndex146 = 0;\n  const musicArrayValueIndex147 = 0;\n  const musicArrayValueIndex148 = 0;\n  const musicArrayValueIndex149 = 0;\n  const musicArrayValueIndex150 = 0;\n  const musicArrayValueIndex151 = 0;\n  const musicArrayValueIndex152 = 0;\n  const musicArrayValueIndex153 = 0;\n  const musicArrayValueIndex154 = 0;\n  const musicArrayValueIndex155 = 0;\n  const musicArrayValueIndex156 = 0;\n  const musicArrayValueIndex157 = 0;\n  const musicArrayValueIndex158 = 0;\n  const musicArrayValueIndex159 = 0;\n  const musicArrayValueIndex160 = 0;\n  const musicArrayValueIndex161 = 0;\n  const musicArrayValueIndex162 = 0;\n  const musicArrayValueIndex163 = 0;\n  const musicArrayValueIndex164 = 0;\n  const musicArrayValueIndex165 = 0;\n  const musicArrayValueIndex166 = 0;\n  const musicArrayValueIndex167 = 0;\n  const musicArrayValueIndex168 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring? substring.split('') : [];\n  while (i < l && j < m) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else if (string[i]!== substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return count;\n};\n\n/**\n * Check if a string is a valid email address.\n * See http://stackoverflow.com/a/46155/\n */\nconst isEmail = (email) => {\n  let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isPhone = (phone) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(phone);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobile = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhone = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhoneNumber = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhoneNumberWithCountryCode = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhoneNumberWithCountryCodeAndRegion = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhoneNumberWithCountryCodeAndRegionAndExtension = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhoneNumberWithCountryCodeAndRegionAndExtensionAndExtension = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhoneNumberWithCountryCodeAndRegionAndExtensionAndExtensionAndExtension = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhoneNumberWithCountryCodeAndRegionAndExtensionAndExtensionAndExtensionAndExtension = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhoneNumberWithCountryCodeAndRegionAndExtensionAndExtensionAndExtensionAndExtensionAndExtension = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhoneNumberWithCountryCodeAndRegionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtension = (mobile) => {\n  let re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\-]\\s*)?([0-9]{3,20})$/;\n  return re.test(mobile);\n};\n\n/**\n * Check if a string is a valid phone number.\n * See http://stackoverflow.com/a/46155/\n */\nconst isMobilePhoneNumberWithCountryCodeAndRegionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtensionAndExtension", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - specify string of numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input is a space - specify string of numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace2 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace3 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace4 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace5 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace6 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace7 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace8 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace9 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace10 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersSpace11 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input is a string with numberals from' zero' to' nine'. \n   Valid choice are' zero',' ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3)\n  0\n  */\nconst truncateInteger = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateInteger(3)\n  3\n  */\nconst truncateDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimal(3)\n  3\n  */\nconst truncateIntegerDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateIntegerDecimal(3)\n  3\n  */\nconst truncateDecimalInteger = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimalInteger(3)\n  3\n  */\nconst truncateDecimalIntegerDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimalIntegerDecimal(3)\n  3\n  */\nconst truncateDecimalIntegerDecimalInteger = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimalIntegerDecimalInteger3(3)\n  3\n  */\nconst truncateDecimalIntegerDecimalInteger3 = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimalIntegerDecimalInteger3(3)\n  3\n  */\nconst truncateDecimalIntegerDecimalInteger3Decimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimalIntegerDecimalInteger3Decimal(3)\n  3\n  */\nconst truncateDecimalIntegerDecimalInteger3DecimalInteger = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimalIntegerDecimalInteger3DecimalInteger3(3)\n  3\n  */\nconst truncateDecimalIntegerDecimalInteger3DecimalInteger3 = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimalIntegerDecimalInteger3DecimalInteger3Decimal(3)\n  3\n  */\nconst truncateDecimalIntegerDecimalInteger3DecimalInteger3Decimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimalIntegerDecimalInteger3DecimalInteger3Decimal(3)\n  3\n  */\nconst truncateDecimalIntegerDecimalInteger3DecimalInteger3DecimalInteger3 = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimalIntegerDecimalInteger3DecimalInteger3DecimalInteger3Decimal(3)\n  3\n  */\nconst truncateDecimalIntegerDecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3 = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer + (decimals <= 1? 0 : 1);\n};\n\n/* Given a positive integer number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateDecimalIntegerDecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3Decimal(3)\n  3\n  */\nconst truncateDecimalIntegerDecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3DecimalInteger3Decimal", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let closestElement = numbers[0];\n  let closestElementDistance = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - closestElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      closestElement = numbers[i];\n      closestElementDistance = numbers[i];\n    }\n  }\n  return [closestElement, closestElementDistance];\n};\n\n/**\n * Given a number and a range, return the number that is closest to the number in the range.\n * If the number is in the range, return the number in the range if it is in the range or else the number \n * itself.\n * If the number is outside the range, return undefined.\n * If the range is infinite, return undefined.\n * If the range is zero, return undefined.\n * If the range is negative, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range is equal to the number, return undefined.\n * If the range is greater than the number, return undefined.\n * If the range is less than the number, return undefined.\n * If the range ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n   such that the small number will become 0 and the bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n   such that the small number will become 0 and the bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n  const [min, max] = [min, max]\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [5]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return length of give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return substring from given string\n * >>> substr('abc', '', 1)\n  'b'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Given a number n, return true if n is a prime number, false otherwise\n  >>> isPrime(15)\n  true\n  */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect square, false otherwise\n  >>> isPerfectSquare(15)\n  true\n  */\nconst isPerfectSquare = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false otherwise\n  >>> isPerfectCube(15)\n  true\n  */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a perfect cube, false ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let primes = [];\n  let prime_factors = [];\n  let prime_factors_index = [];\n  let prime_factors_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index = [];\n  let prime_factors_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime_factors_index_index_index = [];\n  let prime", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = {};\n  return numbers.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet = (numbers) => {\n  let seen = {};\n  return numbers.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet2 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet3 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet4 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet5 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet6 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet7 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet8 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet9 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet10 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet11 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet12 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;\n    } else {\n      seen[curr] = true;\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet13 = numberSet => {\n  let seen = {};\n  return numberSet.reduce((acc, curr) => {\n    if (seen[curr]) {\n      acc[acc.length - 1] += curr;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, throw lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given string, throw lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/([a-z])([A-Z])/g, '$1 $2').toUpperCase();\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, else return 'X'.\n * >>> firstLetter('Hello')\n * 'H'\n */\nconst firstLetter = (string) => {\n  return string[0].toLowerCase() === 'a'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a uppercase letter, else return 'X'.\n * >>> firstLetter('HELLO')\n * 'H'\n */\nconst firstLetterUpper = (string) => {\n  return string[0].toUpperCase() === 'A'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit, else return 'X'.\n * >>> firstLetter('123')\n * '1'\n */\nconst firstLetterDigit = (string) => {\n  return string[0] >= '0' && string[0] <= '9'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a letter, else return 'X'.\n * >>> firstLetter('HELLO')\n * 'H'\n */\nconst firstLetterLetter = (string) => {\n  return string[0] >= 'A' && string[0] <= 'Z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecial = (string) => {\n  return string[0] >= 'a' && string[0] <= 'z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialUpper = (string) => {\n  return string[0] >= 'A' && string[0] <= 'Z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialDigit = (string) => {\n  return string[0] >= '0' && string[0] <= '9'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialLetter = (string) => {\n  return string[0] >= 'A' && string[0] <= 'Z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialSpecial = (string) => {\n  return string[0] >= 'a' && string[0] <= 'z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialSpecialUpper = (string) => {\n  return string[0] >= 'A' && string[0] <= 'Z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialSpecialDigit = (string) => {\n  return string[0] >= '0' && string[0] <= '9'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialSpecialLetter = (string) => {\n  return string[0] >= 'A' && string[0] <= 'Z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialSpecialSpecial = (string) => {\n  return string[0] >= 'a' && string[0] <= 'z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialSpecialSpecialUpper = (string) => {\n  return string[0] >= 'A' && string[0] <= 'Z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialSpecialSpecialDigit = (string) => {\n  return string[0] >= '0' && string[0] <= '9'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialSpecialSpecialLetter = (string) => {\n  return string[0] >= 'A' && string[0] <= 'Z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;:\\'\",.<>/?')\n * '!'\n */\nconst firstLetterSpecialSpecialSpecialSpecial = (string) => {\n  return string[0] >= 'a' && string[0] <= 'z'? string.substr(1) : 'X';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a special character, else return 'X'.\n * >>> firstLetter('!@#$%^&*()_+{}[]<>?/|;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single bowed stringed instrument\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a single bowed stringed instrument\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n    if (i < strings.length - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\n/* Convert an instrument to its JSON representation\n  >>> toJSON('instrument')\n  {\n    name: 'instrument',\n    type: 'instrument',\n    parameters: [],\n    parameterTypes: [],\n    parameterNames: [],\n    parameterValues: [],\n    parameterTypeNames: [],\n    parameterTypeValues: [],\n    parameterNameValues: [],\n    parameterValueNames: [],\n    parameterValueValues: [],\n    parameterTypeNameValues: [],\n    parameterTypeValueNames: [],\n    parameterTypeValueValues: [],\n    parameterNameValueNames: [],\n    parameterValueValueNames: [],\n    parameterValueValueValues: [],\n    parameterTypeNameValueNames: [],\n    parameterTypeValueValueNames: [],\n    parameterNameValueNames: [],\n    parameterValueValueNames: [],\n    parameterTypeNameValueNames: [],\n    parameterTypeValueValueNames: [],\n    parameterNameValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeNameValueValueNames: [],\n    parameterTypeValueValueValueNames: [],\n    parameterNameValueValueValueNames: [],\n    parameterValueValueValueNames: [],\n    parameterTypeName", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for one that start with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for one that start with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for one that end with a give suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByString = (strings, string) => {\n  return strings.filter(string => string.includes(string));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStrings([], 'a')\n  []\n  >>> filterByStrings(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStrings = (strings, strings) => {\n  return strings.filter(string => strings.includes(string));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStrings([], 'a')\n  []\n  >>> filterByStrings(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {\n  return strings.filter(string => strings.includes(string.toLowerCase()));\n};\n\n/**\n * Filter an input list of strings only for one that contain only a give list of strings.\n  >>> filterByStringsIgnoreCase([], 'a')\n  []\n  >>> filterByStringsIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringsIgnoreCase = (strings, strings) => {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with \n   zero balance. Your undertaking is to detect if at any period the balance of history fallls below zero, and \n   at that item function should return on-key. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with \n   zero balance. Your undertaking is to detect if at any period the balance of history fallls below zero, and \n   at that item function should return on-key. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let isOnKey = false;\n  operations.forEach((operation) => {\n    balance += operation.amount;\n    if (balance <= 0) {\n      isOnKey = true;\n    }\n  });\n  return isOnKey;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with \n   zero balance. Your undertaking is to detect if at any period the balance of history falls below zero, and \n   at that item function should return on-key. Otherwise it should return false.\n  >>> belowZero([\n  {\n    amount: 10,\n    date: new Date('2020-01-01')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-02')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-03')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-04')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-05')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-06')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-07')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-08')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-09')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-10')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-11')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-12')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-13')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-14')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-15')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-16')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-17')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-18')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-19')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-20')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-21')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-22')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-23')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-24')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-25')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-26')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-27')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-28')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-29')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-01-30')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-01-31')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-01')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-02')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-03')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-04')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-05')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-06')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-07')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-08')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-09')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-10')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-11')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-12')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-13')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-14')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-15')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-16')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-17')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-18')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-19')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-20')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-21')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-22')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-23')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-24')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-25')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-26')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-02-27')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-02-28')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-03-01')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-03-02')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-03-03')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-03-04')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-03-05')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-03-06')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-03-07')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-03-08')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-03-09')\n  },\n  {\n    amount: -20,\n    date: new Date('2020-03-10')\n  },\n  {\n    amount: -10,\n    date: new Date('2020-03-11')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only convinced numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return only convinced numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getZero = (l) => {\n  return l.filter(n => n === 0)\n}\n\n/*Return only zeros in the list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOne = (l) => {\n  return l.filter(n => n === 1)\n}\n\n/*Return only ones in the list.\n  >>> getOne([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOne([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTwo = (l) => {\n  return l.filter(n => n === 2)\n}\n\n/*Return only twos in the list.\n  >>> getTwo([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTwo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getThree = (l) => {\n  return l.filter(n => n === 3)\n}\n\n/*Return only threes in the list.\n  >>> getThree([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getThree([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFour = (l) => {\n  return l.filter(n => n === 4)\n}\n\n/*Return only fours in the list.\n  >>> getFour([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFour([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFive = (l) => {\n  return l.filter(n => n === 5)\n}\n\n/*Return only fives in the list.\n  >>> getFive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSix = (l) => {\n  return l.filter(n => n === 6)\n}\n\n/*Return only six numbers in the list.\n  >>> getSix([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSix([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSeven = (l) => {\n  return l.filter(n => n === 7)\n}\n\n/*Return only seven numbers in the list.\n  >>> getSeven([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSeven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEight = (l) => {\n  return l.filter(n => n === 8)\n}\n\n/*Return only eight numbers in the list.\n  >>> getEight([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getEight([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNine = (l) => {\n  return l.filter(n => n === 9)\n}\n\n/*Return only nine numbers in the list.\n  >>> getNine([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNine([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTen = (l) => {\n  return l.filter(n => n === 10)\n}\n\n/*Return only ten numbers in the list.\n  >>> getTen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEleven = (l) => {\n  return l.filter(n => n === 11)\n}\n\n/*Return only eleven numbers in the list.\n  >>> getEleven([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getEleven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTwelve = (l) => {\n  return l.filter(n => n === 12)\n}\n\n/*Return only twelve numbers in the list.\n  >>> getTwelve([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTwelve([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getThirteen = (l) => {\n  return l.filter(n => n === 13)\n}\n\n/*Return only thirteen numbers in the list.\n  >>> getThirteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getThirteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFourteen = (l) => {\n  return l.filter(n => n === 14)\n}\n\n/*Return only fourteen numbers in the list.\n  >>> getFourteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFourteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFifteen = (l) => {\n  return l.filter(n => n === 15)\n}\n\n/*Return only fifteen numbers in the list.\n  >>> getFifteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFifteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSixteen = (l) => {\n  return l.filter(n => n === 16)\n}\n\n/*Return only sixteen numbers in the list.\n  >>> getSixteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSixteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSeventeen = (l) => {\n  return l.filter(n => n === 17)\n}\n\n/*Return only seventeen numbers in the list.\n  >>> getSeventeen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSeventeen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a give number be premier, and assumed differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true if a give number be premier, and assumed differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isOdd(6)\n  true\n  >>> isOdd(101)\n  false\n  >>> isOdd(11)\n  false\n  >>> isOdd(13441)\n  false\n  >>> isOdd(61)\n  false\n  >>> isOdd(4)\n  false\n  >>> isOdd(1)\n  false\n  */\nconst isOdd = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 1) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isEven(6)\n  true\n  >>> isEven(101)\n  false\n  >>> isEven(11)\n  false\n  >>> isEven(13441)\n  false\n  >>> isEven(61)\n  false\n  >>> isEven(4)\n  false\n  >>> isEven(1)\n  false\n  */\nconst isEven = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isOdd(6)\n  false\n  >>> isOdd(101)\n  true\n  >>> isOdd(11)\n  true\n  >>> isOdd(13441)\n  true\n  >>> isOdd(61)\n  true\n  >>> isOdd(4)\n  true\n  >>> isOdd(1)\n  true\n  */\nconst isOdd = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 1) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> isEven(6)\n  false\n  >>> isEven(101)\n  false\n  >>> isEven(11)\n  false\n  >>> isEven(13441)\n  false\n  >>> isEven(61)\n  false\n  >>> isEven(4)\n  false\n  >>> isEven(1)\n  false\n  */\nconst isEven = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> isOdd(6)\n  false\n  >>> isOdd(101)\n  false\n  >>> isOdd(11)\n  false\n  >>> isOdd(13441)\n  false\n  >>> isOdd(61)\n  false\n  >>> isOdd(4)\n  false\n  >>> isOdd(1)\n  false\n  */\nconst isOdd = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 1) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isEven(6)\n  false\n  >>> isEven(101)\n  false\n  >>> isEven(11)\n  false\n  >>> isEven(13441)\n  false\n  >>> isEven(61)\n  false\n  >>> isEven(4)\n  false\n  >>> isEven(1)\n  false\n  */\nconst isEven = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> isOdd(6)\n  false\n  >>> isOdd(101)\n  false\n  >>> isOdd(11)\n  false\n  >>> isOdd(13441)\n  false\n  >>> isOdd(61)\n  false\n  >>> isOdd(4)\n  false\n  >>> isOdd(1)\n  false\n  */\nconst isOdd = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 1) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isEven(6)\n  false\n  >>> isEven(101)\n  false\n  >>> isEven(11)\n  false\n  >>> isEven(13441)\n  false\n  >>> isEven(61)\n  false\n  >>> isEven(4)\n  false\n  >>> isEven(1)\n  false\n  */\nconst isEven = (n) => {\n  if (n < 2) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero distributor point, even if there are many. \n   Moreover, findZero only take list xs have even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero distributor point, even if there are many. \n   Moreover, findZero only take list xs have even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = { x: 0, y: 0 };\n  const zeros = xs.filter(x => x!== 0);\n  if (zeros.length === 0) {\n    return zero;\n  }\n  const x0 = zeros[0];\n  const y0 = zeros[1];\n  const xs = zeros.slice(2);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const x0 = xs[0];\n  const y0 = ys[0];\n  const xs = xs.slice(1);\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the values of the represent indicies of l, but classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the values of the represent indicies of l, but classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)? false : (seen.add(v), true))\n}\n\n/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)? false : (seen.add(v), true))\n   .sort((a, b) => a[key] > b[key]? 1 : -1)\n}\n\n/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)? false : (seen.add(v), true))\n   .sort((a, b) => a[key] > b[key]? 1 : -1)\n   .filter((v, i, a) => a[key] === b[key])\n}\n\n/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKey = (key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)? false : (seen.add(v), true))\n   .sort((a, b) => a[key] > b[key]? 1 : -1)\n   .filter((v, i, a) => a[key] === b[key])\n   .map((v, i, a) => v[key])\n}\n\n/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeys = (keys) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)? false : (seen.add(v), true))\n   .sort((a, b) => a[key] > b[key]? 1 : -1)\n   .filter((v, i, a) => keys.includes(a[key]))\n   .map((v, i, a) => v[key])\n}\n\n/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysIgnore = (keys) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)? false : (seen.add(v), true))\n   .sort((a, b) => a[key] > b[key]? 1 : -1)\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n}\n\n/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAnd = (keys) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)? false : (seen.add(v), true))\n   .sort((a, b) => a[key] > b[key]? 1 : -1)\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n}\n\n/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndIgnore = (keys) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)? false : (seen.add(v), true))\n   .sort((a, b) => a[key] > b[key]? 1 : -1)\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n}\n\n/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndIgnoreKeys = (keys) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)? false : (seen.add(v), true))\n   .sort((a, b) => a[key] > b[key]? 1 : -1)\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n}\n\n/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndIgnoreKeysAnd = (keys) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)? false : (seen.add(v), true))\n   .sort((a, b) => a[key] > b[key]? 1 : -1)\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .map((v, i, a) => v[key])\n   .filter((v, i, a) => keys.includes(a[key]) &&!keys.includes(b[key]))\n   .filter((v, i, a) => keys.includes(a[key]) && keys.includes(b[key]))\n   .map((v, i, a) => v", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Return minimum component in the list.\n * >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Return sum of all elements in the list.\n * >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegative([1, 2, 3])\n  6\n  >>> sumElementNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElementNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegative([1, 2, 3])\n  6\n  >>> sumElementNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElementNegativeNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegativeNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElementNegativeNegativeNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegativeNegativeNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeNegativeNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElementNegativeNegativeNegativeNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegativeNegativeNegativeNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeNegativeNegativeNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElementNegativeNegativeNegativeNegativeNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegativeNegativeNegativeNegativeNegativeNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeNegativeNegativeNegativeNegativeNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElementNegativeNegativeNegativeNegativeNegativeNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegativeNegativeNegativeNegativeNegativeNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeNegativeNegativeNegativeNegativeNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Return sum of all elements in the list ignoring negative values.\n * >>> sumElementNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of multiplication the digit 7 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return the number of multiplication the digit 7 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 8 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 9 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 10 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 11 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 12 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 13 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 14 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 15 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 16 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 17 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += i;\n      count++;\n    }\n    if (i % 11 === 0 && count > 1) {\n      sum += i;\n      count++;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the number of multiplication the digit 18 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the odd indicies embody adequate \n   to the value of the odd indicies of l, but classify.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 4, 3, 6]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the odd indicies embody adequate \n   to the value of the odd indicies of l, but classify.\n  >>> sortOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the odd indicies embody adequate \n   to the value of the odd indicies of l, but classify.\n  >>> sortOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the odd indicies embody adequate \n   to the value of the odd indicies of l, but classify.\n  >>> sortOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOddOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEvenOddOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the odd indicies embody adequate \n   to the value of the odd indicies of l, but classify.\n  >>> sortOddEvenOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and return a list l' such that \n   l' is identical to l in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input chain encode with encode_cyclic affair. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input chain encode with encode_cyclic affair. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input chain encode with encode_cyclic affair. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primeFib(n-2)+primeFib(n-3);\n};\n\n/**\n * A function that returns true if a number is prime and false otherwise.\n * It uses Euclid's Algorithm to check whether a number is prime or not.\n * It returns true if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns true if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns true if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns true if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns true if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns true if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns true if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns true if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns true if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns true if the number is prime and false otherwise.\n * It returns false if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime and false otherwise.\n * It returns true if the number is prime and true otherwise.\n * It returns false if the number is prime ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map(number => number - number.mean());\n  return numbers.map(number => number.mean() - means.reduce((a, b) => a + b, 0));\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation \n   around the mean of this dataset. \n   Mean Squared Deviation is the square root of the mean squared deviation \n   between each component and a centerpoint (mean in this subject ): \n   MSE = average | x - x_mean |^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const means = numbers.map(number => number - number.mean());\n  return numbers.map(number => number.mean() * number.mean());\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation \n   around the mean of this dataset. \n   Root Mean Squared Deviation is the square root of the mean squared \n   deviation between each component and a centerpoint (mean in this \n   subject ): \n   RMSE = average | x - x_mean |^0.5\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquaredDeviation = (numbers) => {\n  const means = numbers.map(number => number - number.mean());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the square root of the mean squared deviation \n   between each component and a centerpoint (mean in this subject ): \n   SD = average | x - x_mean |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const means = numbers.map(number => number - number.mean());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Variance \n   around the mean of this dataset. \n   Variance is the square root of the mean squared deviation between \n   each component and a centerpoint (mean in this subject ): \n   V = average | x - x_mean |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const means = numbers.map(number => number - number.mean());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the square root of the mean squared deviation \n   between each component and a centerpoint (mean in this subject ): \n   SD = average | x - x_median |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const medians = numbers.map(number => number.median());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Variance \n   around the median of this dataset. \n   Variance is the square root of the mean squared deviation between \n   each component and a centerpoint (mean in this subject ): \n   V = average | x - x_median |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const medians = numbers.map(number => number.median());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the mode of this dataset. \n   Standard Deviation is the square root of the mean squared deviation \n   between each component and a centerpoint (mean in this subject ): \n   SD = average | x - x_mode |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const modes = numbers.map(number => number.mode());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Variance \n   around the mode of this dataset. \n   Variance is the square root of the mean squared deviation between \n   each component and a centerpoint (mean in this subject ): \n   V = average | x - x_mode |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const modes = numbers.map(number => number.mode());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the square root of the mean squared deviation \n   between each component and a centerpoint (mean in this subject ): \n   SD = average | x - x_median |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const medians = numbers.map(number => number.median());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Variance \n   around the median of this dataset. \n   Variance is the square root of the mean squared deviation between \n   each component and a centerpoint (mean in this subject ): \n   V = average | x - x_median |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const medians = numbers.map(number => number.median());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the mode of this dataset. \n   Standard Deviation is the square root of the mean squared deviation \n   between each component and a centerpoint (mean in this subject ): \n   SD = average | x - x_mode |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const modes = numbers.map(number => number.mode());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Variance \n   around the mode of this dataset. \n   Variance is the square root of the mean squared deviation between \n   each component and a centerpoint (mean in this subject ): \n   V = average | x - x_mode |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const modes = numbers.map(number => number.mode());\n  return numbers.map(number => number.mean() * number.mean()).reduce((a, b) => a + b, 0);\n};\n\n/* For a given list of input numbers, calculate Standard De", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToOne takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to one, and false differently.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 1) sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to two, and false differently.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 2) sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  triplesSumToThree takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to three, and false differently.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 3) sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  triplesSumToFour takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to four, and false differently.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 4) sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  triplesSumToFive takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to five, and false differently.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 5) sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  triplesSumToSix takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to six, and false differently.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 6) sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  triplesSumToSeven takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to seven, and false differently.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 7) sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  triplesSumToEight takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to eight, and false differently.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 8) sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  triplesSumToNine takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to nine, and false differently.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely retentive lineage. \n   n cable car are drive left to justly;   simultaneously, a different set of n cars \n   are drive correct to left.    The two set of cars start out be very far from \n   each other.   All cars move in the same focal ratio.   Two car are pronounce to clash \n   when a cable car that's travel left to right hits a car that's move correct to exit. \n   However, the cable car are boundlessly sturdy and impregnable; as a result, they retain affect \n   in their trajectory as if they did not clash. \n\n   This routine output the number of such collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely retentive lineage. \n   n cable car are drive left to justly;   simultaneously, a different set of n cars \n   are drive correct to left.    The two set of cars start out be very far from \n   each other.   All cars move in the same focal ratio.   Two car are pronounce to clash \n   when a cable car that's travel left to right hits a car that's move correct to exit. \n   However, the cable car are boundlessly sturdy and impregnable; as a result, they retain affect \n   in their trajectory as if they did not clash. \n\n   This routine output the number of such collision. \n   * / \n const carRaceCollision = (n) = > {\n   let collision = 0;\n   let car1 = {x: 0, y: 0};\n   let car2 = {x: 0, y: 0};\n   let car3 = {x: 0, y: 0};\n   let car4 = {x: 0, y: 0};\n   let car5 = {x: 0, y: 0};\n   let car6 = {x: 0, y: 0};\n   let car7 = {x: 0, y: 0};\n   let car8 = {x: 0, y: 0};\n   let car9 = {x: 0, y: 0};\n   let car10 = {x: 0, y: 0};\n   let car11 = {x: 0, y: 0};\n   let car12 = {x: 0, y: 0};\n   let car13 = {x: 0, y: 0};\n   let car14 = {x: 0, y: 0};\n   let car15 = {x: 0, y: 0};\n   let car16 = {x: 0, y: 0};\n   let car17 = {x: 0, y: 0};\n   let car18 = {x: 0, y: 0};\n   let car19 = {x: 0, y: 0};\n   let car20 = {x: 0, y: 0};\n   let car21 = {x: 0, y: 0};\n   let car22 = {x: 0, y: 0};\n   let car23 = {x: 0, y: 0};\n   let car24 = {x: 0, y: 0};\n   let car25 = {x: 0, y: 0};\n   let car26 = {x: 0, y: 0};\n   let car27 = {x: 0, y: 0};\n   let car28 = {x: 0, y: 0};\n   let car29 = {x: 0, y: 0};\n   let car30 = {x: 0, y: 0};\n   let car31 = {x: 0, y: 0};\n   let car32 = {x: 0, y: 0};\n   let car33 = {x: 0, y: 0};\n   let car34 = {x: 0, y: 0};\n   let car35 = {x: 0, y: 0};\n   let car36 = {x: 0, y: 0};\n   let car37 = {x: 0, y: 0};\n   let car38 = {x: 0, y: 0};\n   let car39 = {x: 0, y: 0};\n   let car40 = {x: 0, y: 0};\n   let car41 = {x: 0, y: 0};\n   let car42 = {x: 0, y: 0};\n   let car43 = {x: 0, y: 0};\n   let car44 = {x: 0, y: 0};\n   let car45 = {x: 0, y: 0};\n   let car46 = {x: 0, y: 0};\n   let car47 = {x: 0, y: 0};\n   let car48 = {x: 0, y: 0};\n   let car49 = {x: 0, y: 0};\n   let car50 = {x: 0, y: 0};\n   let car51 = {x: 0, y: 0};\n   let car52 = {x: 0, y: 0};\n   let car53 = {x: 0, y: 0};\n   let car54 = {x: 0, y: 0};\n   let car55 = {x: 0, y: 0};\n   let car56 = {x: 0, y: 0};\n   let car57 = {x: 0, y: 0};\n   let car58 = {x: 0, y: 0};\n   let car59 = {x: 0, y: 0};\n   let car60 = {x: 0, y: 0};\n   let car61 = {x: 0, y: 0};\n   let car62 = {x: 0, y: 0};\n   let car63 = {x: 0, y: 0};\n   let car64 = {x: 0, y: 0};\n   let car65 = {x: 0, y: 0};\n   let car66 = {x: 0, y: 0};\n   let car67 = {x: 0, y: 0};\n   let car68 = {x: 0, y: 0};\n   let car69 = {x: 0, y: 0};\n   let car70 = {x: 0, y: 0};\n   let car71 = {x: 0, y: 0};\n   let car72 = {x: 0, y: 0};\n   let car73 = {x: 0, y: 0};\n   let car74 = {x: 0, y: 0};\n   let car75 = {x: 0, y: 0};\n   let car76 = {x: 0, y: 0};\n   let car77 = {x: 0, y: 0};\n   let car78 = {x: 0, y: 0};\n   let car79 = {x: 0, y: 0};\n   let car80 = {x: 0, y: 0};\n   let car81 = {x: 0, y: 0};\n   let car82 = {x: 0, y: 0};\n   let car83 = {x: 0, y: 0};\n   let car84 = {x: 0, y: 0};\n   let car85 = {x: 0, y: 0};\n   let car86 = {x: 0, y: 0};\n   let car87 = {x: 0, y: 0};\n   let car88 = {x: 0, y: 0};\n   let car89 = {x: 0, y: 0};\n   let car90 = {x: 0, y: 0};\n   let car91 = {x: 0, y: 0};\n   let car92 = {x: 0, y: 0};\n   let car93 = {x: 0, y: 0};\n   let car94 = {x: 0, y: 0};\n   let car95 = {x: 0, y: 0};\n   let car96 = {x: 0, y: 0};\n   let car97 = {x: 0, y: 0};\n   let car98 = {x: 0, y: 0};\n   let car99 = {x: 0, y: 0};\n   let car100 = {x: 0, y: 0};\n   let car101 = {x: 0, y: 0};\n   let car102 = {x: 0, y: 0};\n   let car103 = {x: 0, y: 0};\n   let car104 = {x: 0, y: 0};\n   let car105 = {x: 0, y: 0};\n   let car106 = {x: 0, y: 0};\n   let car107 = {x: 0, y: 0};\n   let car108 = {x: 0, y: 0};\n   let car109 = {x: 0, y: 0};\n   let car110 = {x: 0, y: 0};\n   let car111 = {x: 0, y: 0};\n   let car112 = {x: 0, y: 0};\n   let car113 = {x: 0, y: 0};\n   let car114 = {x: 0, y: 0};\n   let car115 = {x: 0, y: 0};\n   let car116 = {x: 0, y: 0};\n   let car117 = {x: 0, y: 0};\n   let car118 = {x: 0, y: 0};\n   let car119 = {x: 0, y: 0};\n   let car120 = {x: 0, y: 0};\n   let car121 = {x: 0, y: 0};\n   let car122 = {x: 0, y: 0};\n   let car123 = {x: 0, y: 0};\n   let car124 = {x: 0, y: 0};\n   let car125 = {x: 0, y: 0};\n   let car126 = {x: 0, y: 0};\n   let car127 = {x: 0, y: 0};\n   let car128 = {x: 0, y: 0};\n   let car129 = {x: 0, y: 0};\n   let car130 = {x: 0, y: 0};\n   let car131 = {x: 0, y: 0};\n   let car132 = {x: 0, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j++;\n    i--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j--;\n    i--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j++;\n    i--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j--;\n    i--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j++;\n    i--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j--;\n    i--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j++;\n    i--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j--;\n    i--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j++;\n    i--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j--;\n    i--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j++;\n    i--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j--;\n    i--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j++;\n    i--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j--;\n    i--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (i > 0) {\n    j++;\n    i--;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to one, and false differently.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 1) {\n      sum += l[i];\n    }\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to two, and false differently.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 2) {\n      sum += l[i];\n    }\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to three, and false differently.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 3) {\n      sum += l[i];\n    }\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to four, and false differently.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 4) {\n      sum += l[i];\n    }\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to five, and false differently.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 5) {\n      sum += l[i];\n    }\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to six, and false differently.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 6) {\n      sum += l[i];\n    }\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to seven, and false differently.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 7) {\n      sum += l[i];\n    }\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to eight, and false differently.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 8) {\n      sum += l[i];\n    }\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to nine, and false differently.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToNine([1])\n  false\n  */\nconst pairsSumToNine = (l) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input signal number x to base.\n   return drawstring theatrical performance after the conversion. \n   base phone number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input signal number x to base.\n   return drawstring theatrical performance after the conversion. \n   base phone number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = '';\n  while (len--) {\n    res = str.charAt(len - 1) + res;\n  }\n  return res;\n};\n\n/**\n * Convert string number to number.\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a = Math.pow(a, 3);\n  const b = Math.pow(a, 2);\n  const c = Math.pow(a, 1);\n  const d = Math.pow(a, 0);\n  const e = Math.pow(a, 1);\n  const f = Math.pow(a, 2);\n  const g = Math.pow(a, 3);\n  const h = Math.pow(a, 4);\n  const i = Math.pow(a, 5);\n  const j = Math.pow(a, 6);\n  const k = Math.pow(a, 7);\n  const l = Math.pow(a, 8);\n  const m = Math.pow(a, 9);\n  const n = Math.pow(a, 10);\n  const o = Math.pow(a, 11);\n  const p = Math.pow(a, 12);\n  const q = Math.pow(a, 13);\n  const r = Math.pow(a, 14);\n  const s = Math.pow(a, 15);\n  const t = Math.pow(a, 16);\n  const u = Math.pow(a, 17);\n  const v = Math.pow(a, 18);\n  const w = Math.pow(a, 19);\n  const x = Math.pow(a, 20);\n  const y = Math.pow(a, 21);\n  const z = Math.pow(a, 22);\n  const A = (a + h) / 2;\n  const B = (a + h) / 2;\n  const C = (a + h) / 2;\n  const D = (a + h) / 2;\n  const E = (a + h) / 2;\n  const F = (a + h) / 2;\n  const G = (a + h) / 2;\n  const H = (a + h) / 2;\n  const I = (a + h) / 2;\n  const J = (a + h) / 2;\n  const K = (a + h) / 2;\n  const L = (a + h) / 2;\n  const M = (a + h) / 2;\n  const N = (a + h) / 2;\n  const O = (a + h) / 2;\n  const P = (a + h) / 2;\n  const Q = (a + h) / 2;\n  const R = (a + h) / 2;\n  const S = (a + h) / 2;\n  const T = (a + h) / 2;\n  const U = (a + h) / 2;\n  const V = (a + h) / 2;\n  const W = (a + h) / 2;\n  const X = (a + h) / 2;\n  const Y = (a + h) / 2;\n  const Z = (a + h) / 2;\n  const A1 = (a + h) / 2;\n  const A2 = (a + h) / 2;\n  const A3 = (a + h) / 2;\n  const A4 = (a + h) / 2;\n  const A5 = (a + h) / 2;\n  const A6 = (a + h) / 2;\n  const A7 = (a + h) / 2;\n  const A8 = (a + h) / 2;\n  const A9 = (a + h) / 2;\n  const A10 = (a + h) / 2;\n  const A11 = (a + h) / 2;\n  const A12 = (a + h) / 2;\n  const A13 = (a + h) / 2;\n  const A14 = (a + h) / 2;\n  const A15 = (a + h) / 2;\n  const A16 = (a + h) / 2;\n  const A17 = (a + h) / 2;\n  const A18 = (a + h) / 2;\n  const A19 = (a + h) / 2;\n  const A20 = (a + h) / 2;\n  const A21 = (a + h) / 2;\n  const A22 = (a + h) / 2;\n  const A23 = (a + h) / 2;\n  const A24 = (a + h) / 2;\n  const A25 = (a + h) / 2;\n  const A26 = (a + h) / 2;\n  const A27 = (a + h) / 2;\n  const A28 = (a + h) / 2;\n  const A29 = (a + h) / 2;\n  const A30 = (a + h) / 2;\n  const A31 = (a + h) / 2;\n  const A32 = (a + h) / 2;\n  const A33 = (a + h) / 2;\n  const A34 = (a + h) / 2;\n  const A35 = (a + h) / 2;\n  const A36 = (a + h) / 2;\n  const A37 = (a + h) / 2;\n  const A38 = (a + h) / 2;\n  const A39 = (a + h) / 2;\n  const A40 = (a + h) / 2;\n  const A41 = (a + h) / 2;\n  const A42 = (a + h) / 2;\n  const A43 = (a + h) / 2;\n  const A44 = (a + h) / 2;\n  const A45 = (a + h) / 2;\n  const A46 = (a + h) / 2;\n  const A47 = (a + h) / 2;\n  const A48 = (a + h) / 2;\n  const A49 = (a + h) / 2;\n  const A50 = (a + h) / 2;\n  const A51 = (a + h) / 2;\n  const A52 = (a + h) / 2;\n  const A53 = (a + h) / 2;\n  const A54 = (a + h) / 2;\n  const A55 = (a + h) / 2;\n  const A56 = (a + h) / 2;\n  const A57 = (a + h) / 2;\n  const A58 = (a + h) / 2;\n  const A59 = (a + h) / 2;\n  const A60 = (a + h) / 2;\n  const A61 = (a + h) / 2;\n  const A62 = (a + h) / 2;\n  const A63 = (a + h) / 2;\n  const A64 = (a + h) / 2;\n  const A65 = (a + h) / 2;\n  const A66 = (a + h) / 2;\n  const A67 = (a + h) / 2;\n  const A68 = (a + h) / 2;\n  const A69 = (a + h) / 2;\n  const A70 = (a + h) / 2;\n  const A71 = (a + h) / 2;\n  const A72 = (a + h) / 2;\n  const A73 = (a + h) / 2;\n  const A74 = (a + h) / 2;\n  const A75 = (a + h) / 2;\n  const A76 = (a + h) / 2;\n  const A77 = (a + h) / 2;\n  const A78 = (a + h) / 2;\n  const A79 = (a + h) / 2;\n  const A80 = (a + h) / 2;\n  const A81 = (a + h) / 2;\n  const A82 = (a + h) / 2;\n  const A83 = (a + h) / 2;\n  const A84 = (a + h) / 2;\n  const A85 = (a + h) / 2;\n  const A86 = (a + h) / 2;\n  const A87 = (a + h) / 2;\n  const A88 = (a + h) / 2;\n  const A89 = (a + h) / 2;\n  const A90 = (a + h) / 2;\n  const A91 = (a + h) / 2;\n  const A92 = (a + h) / 2;\n  const A93 = (a + h) / 2;\n  const A94 = (a + h) / 2;\n  const A95 = (a + h) / 2;\n  const A96 = (a + h) / 2;\n  const A97 = (a + h) / 2;\n  const A98 = (a + h) / 2;\n  const A99 = (a + h) / 2;\n  const A100 = (a + h) / 2;\n  const A101 = (a + h) / 2;\n  const A102 = (a + h) / 2;\n  const A103 = (a + h) / 2;\n  const A104 = (a + h) / 2;\n  const A105 = (a + h) / 2;\n  const A106 = (a + h) / 2;\n  const A107 = (a + h) / 2;\n  const A108 = (a + h) / 2;\n  const A109 = (a + h) / 2;\n  const A110 = (a + h) / 2;\n  const A111 = (a + h) / 2;\n  const A112 = (a + h) / 2;\n  const A113 = (a + h) / 2;\n  const A114 = (a + h) / 2;\n  const A115 = (a + h) / 2;\n  const A116 = (a + h) / 2;\n  const A117 = (a + h) / 2;\n  const A118 = (a + h) / 2;\n  const A119 = (a + h) / 2;\n  const A120 = (a + h) / 2;\n  const A121 = (a + h) / 2;\n  const A122 = (a + h) / 2;\n  const A123 = (a + h", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib4 number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib4 number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib5(0) - > 0 \n   fib5(1) - > 0 \n   fib5(2) - > 2 \n   fib5(3) - > 0 \n   fib5(n) - > fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib5 number sequence.   Do not practice recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  13\n  >>> fib5(7)\n  21\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return 1;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*The Fib6 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib6(0) - > 0 \n   fib6(1) - > 0 \n   fib6(2) - > 2 \n   fib6(3) - > 0 \n   fib6(n) - > fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib6 number sequence.   Do not practice recursion.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  21\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return 1;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*The Fib7 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib7(0) - > 0 \n   fib7(1) - > 0 \n   fib7(2) - > 2 \n   fib7(3) - > 0 \n   fib7(n) - > fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib7 number sequence.   Do not practice recursion.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  27\n  >>> fib7(9)\n  81\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return 1;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*The Fib8 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib8(0) - > 0 \n   fib8(1) - > 0 \n   fib8(2) - > 2 \n   fib8(3) - > 0 \n   fib8(n) - > fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib8 number sequence.   Do not practice recursion.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  27\n  >>> fib8(10)\n  81\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return 1;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*The Fib9 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib9(0) - > 0 \n   fib9(1) - > 0 \n   fib9(2) - > 2 \n   fib9(3) - > 0 \n   fib9(n) - > fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib9 number sequence.   Do not practice recursion.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  27\n  >>> fib9(11)\n  81\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return 1;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9);\n};\n\n/*The Fib10 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib10(0) - > 0 \n   fib10(1) - > 0 \n   fib10(2) - > 2 \n   fib10(3) - > 0 \n   fib10(n) - > fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4) + fib10(n-5) + fib10(n-6) + fib10(n-7) + fib10(n-8) + fib10(n-9) + fib10(n-10).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib10 number sequence.   Do not practice recursion.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  27\n  >>> fib10(12)\n  81\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return 1;\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10);\n};\n\n/*The Fib11 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib11(0) - > 0 \n   fib11(1) - > 0 \n   fib11(2) - > 2 \n   fib", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  const middle = Math.floor(l.length / 2)\n  const left = median(l.slice(0, middle))\n  const right = median(l.slice(middle))\n  return left + right / 2\n}\n\n/*Return sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of elements in the list l that satisfy the predicate p.\n  >>> sum([3, 1, 2, 4, 5], x => x > 0)\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20], x => x > 0)\n  30\n  */\nconst sum = (l, p) => {\n  if (l.length === 0) {\n    return 0\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, 0)\n   .filter(p => p(val))\n   .reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of elements in the list l that satisfy the predicate p with optional initial value.\n  >>> sum([3, 1, 2, 4, 5], x => x > 0, 10)\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20], x => x > 0, 10)\n  30\n  */\nconst sum = (l, p, init) => {\n  if (l.length === 0) {\n    return init\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, init)\n   .filter(p => p(val))\n   .reduce((acc, val) => acc + val, init)\n}\n\n/*Return sum of elements in the list l that satisfy the predicate p with optional initial value and optional initial value.\n  >>> sum([3, 1, 2, 4, 5], x => x > 0, 10, 10)\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20], x => x > 0, 10, 10)\n  30\n  */\nconst sum = (l, p, init, init2) => {\n  if (l.length === 0) {\n    return init2\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, init2)\n   .filter(p => p(val))\n   .reduce((acc, val) => acc + val, init2)\n}\n\n/*Return sum of elements in the list l that satisfy the predicate p with optional initial value and optional initial value.\n  >>> sum([3, 1, 2, 4, 5], x => x > 0, 10, 10, 10)\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20], x => x > 0, 10, 10, 10)\n  30\n  */\nconst sum = (l, p, init, init2, init3) => {\n  if (l.length === 0) {\n    return init3\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, init3)\n   .filter(p => p(val))\n   .reduce((acc, val) => acc + val, init3)\n}\n\n/*Return sum of elements in the list l that satisfy the predicate p with optional initial value and optional initial value.\n  >>> sum([3, 1, 2, 4, 5], x => x > 0, 10, 10, 10, 10)\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20], x => x > 0, 10, 10, 10, 10)\n  30\n  */\nconst sum = (l, p, init, init2, init3, init4) => {\n  if (l.length === 0) {\n    return init4\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, init4)\n   .filter(p => p(val))\n   .reduce((acc, val) => acc + val, init4)\n}\n\n/*Return sum of elements in the list l that satisfy the predicate p with optional initial value and optional initial value.\n  >>> sum([3, 1, 2, 4, 5], x => x > 0, 10, 10, 10, 10, 10)\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20], x => x > 0, 10, 10, 10, 10, 10)\n  30\n  */\nconst sum = (l, p, init, init2, init3, init4, init5) => {\n  if (l.length === 0) {\n    return init5\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, init5)\n   .filter(p => p(val))\n   .reduce((acc, val) => acc + val, init5)\n}\n\n/*Return sum of elements in the list l that satisfy the predicate p with optional initial value and optional initial value.\n  >>> sum([3, 1, 2, 4, 5], x => x > 0, 10, 10, 10, 10, 10, 10)\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20], x => x > 0, 10, 10, 10, 10, 10, 10)\n  30\n  */\nconst sum = (l, p, init, init2, init3, init4, init5, init6) => {\n  if (l.length === 0) {\n    return init6\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, init6)\n   .filter(p => p(val))\n   .reduce((acc, val) => acc + val, init6)\n}\n\n/*Return sum of elements in the list l that satisfy the predicate p with optional initial value and optional initial value.\n  >>> sum([3, 1, 2, 4, 5], x => x > 0, 10, 10, 10, 10, 10, 10, 10)\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20], x => x > 0, 10, 10, 10, 10, 10, 10, 10)\n  30\n  */\nconst sum = (l, p, init, init2, init3, init4, init5, init6, init7) => {\n  if (l.length === 0) {\n    return init7\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, init7)\n   .filter(p => p(val))\n   .reduce((acc, val) => acc + val, init7)\n}\n\n/*Return sum of elements in the list l that satisfy the predicate p with optional initial value and optional initial value.\n  >>> sum([3, 1, 2, 4, 5], x => x > 0, 10, 10, 10, 10, 10, 10, 10)\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20], x => x > 0, 10, 10, 10, 10, 10, 10, 10)\n  30\n  */\nconst sum = (l, p, init, init2, init3, init4, init5, init6, init7, init8) => {\n  if (l.length === 0) {\n    return init8\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, init8)\n   .filter(p => p(val))\n   .reduce((acc, val) => acc + val, init8)\n}\n\n/*Return sum of elements in the list l that satisfy the predicate p with optional initial value and optional initial value.\n  >>> sum([3, 1, 2, 4, 5], x => x > 0, 10, 10, 10, 10, 10, 10, 10)\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20], x => x > 0, 10, 10, 10, 10, 10, 10, 10, 10)\n  30\n  */\nconst sum = (l, p, init, init2, init3, init4, init5, init6, init7, init8, init9) => {\n  if (l.length === 0) {\n    return init9\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  return l.reduce((acc, val) => acc + val, init9)\n   .filter(p => p(val))\n   .re", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const text = text.toLowerCase();\n  const text = text.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let reversedText = '';\n  while (i < text.length) {\n    if (text[i]!== text[j]) {\n      reversedText += text[j];\n      j++;\n    } else {\n      reversedText += text[i];\n      i++;\n    }\n  }\n  return reversedText === text;\n};\n\n/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindromeReversed = (text) => {\n  const text = text.toLowerCase();\n  const text = text.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let reversedText = '';\n  while (i < text.length) {\n    if (text[i]!== text[j]) {\n      reversedText += text[j];\n      j++;\n    } else {\n      reversedText += text[i];\n      i++;\n    }\n  }\n  return reversedText === text;\n};\n\n/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversed('aba')\n  true\n  >>> isPalindromeReversed('aaaaa')\n  true\n  >>> isPalindromeReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversed = (text) => {\n  const text = text.toLowerCase();\n  const text = text.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let reversedText = '';\n  while (i < text.length) {\n    if (text[i]!== text[j]) {\n      reversedText += text[j];\n      j++;\n    } else {\n      reversedText += text[i];\n      i++;\n    }\n  }\n  return reversedText === text;\n};\n\n/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversed = (text) => {\n  const text = text.toLowerCase();\n  const text = text.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let reversedText = '';\n  while (i < text.length) {\n    if (text[i]!== text[j]) {\n      reversedText += text[j];\n      j++;\n    } else {\n      reversedText += text[i];\n      i++;\n    }\n  }\n  return reversedText === text;\n};\n\n/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversed = (text) => {\n  const text = text.toLowerCase();\n  const text = text.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let reversedText = '';\n  while (i < text.length) {\n    if (text[i]!== text[j]) {\n      reversedText += text[j];\n      j++;\n    } else {\n      reversedText += text[i];\n      i++;\n    }\n  }\n  return reversedText === text;\n};\n\n/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReversed = (text) => {\n  const text = text.toLowerCase();\n  const text = text.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let reversedText = '';\n  while (i < text.length) {\n    if (text[i]!== text[j]) {\n      reversedText += text[j];\n      j++;\n    } else {\n      reversedText += text[i];\n      i++;\n    }\n  }\n  return reversedText === text;\n};\n\n/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReversedReversed = (text) => {\n  const text = text.toLowerCase();\n  const text = text.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let reversedText = '';\n  while (i < text.length) {\n    if (text[i]!== text[j]) {\n      reversedText += text[j];\n      j++;\n    } else {\n      reversedText += text[i];\n      i++;\n    }\n  }\n  return reversedText === text;\n};\n\n/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversed = (text) => {\n  const text = text.toLowerCase();\n  const text = text.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let reversedText = '';\n  while (i < text.length) {\n    if (text[i]!== text[j]) {\n      reversedText += text[j];\n      j++;\n    } else {\n      reversedText += text[i];\n      i++;\n    }\n  }\n  return reversedText === text;\n};\n\n/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversed('zbcd')\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (exist aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (exist aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p <= 0) return 0;\n  if (p === 1) return 1;\n  if (p === 2) return 2;\n  if (p === 3) return 3;\n  if (p === 4) return 4;\n  if (p === 5) return 5;\n  if (p === 6) return 6;\n  if (p === 7) return 7;\n  if (p === 8) return 8;\n  if (p === 9) return 9;\n  if (p === 10) return 10;\n  if (p === 11) return 11;\n  if (p === 12) return 12;\n  if (p === 13) return 13;\n  if (p === 14) return 14;\n  if (p === 15) return 15;\n  if (p === 16) return 16;\n  if (p === 17) return 17;\n  if (p === 18) return 18;\n  if (p === 19) return 19;\n  if (p === 20) return 20;\n  if (p === 21) return 21;\n  if (p === 22) return 22;\n  if (p === 23) return 23;\n  if (p === 24) return 24;\n  if (p === 25) return 25;\n  if (p === 26) return 26;\n  if (p === 27) return 27;\n  if (p === 28) return 28;\n  if (p === 29) return 29;\n  if (p === 30) return 30;\n  if (p === 31) return 31;\n  if (p === 32) return 32;\n  if (p === 33) return 33;\n  if (p === 34) return 34;\n  if (p === 35) return 35;\n  if (p === 36) return 36;\n  if (p === 37) return 37;\n  if (p === 38) return 38;\n  if (p === 39) return 39;\n  if (p === 40) return 40;\n  if (p === 41) return 41;\n  if (p === 42) return 42;\n  if (p === 43) return 43;\n  if (p === 44) return 44;\n  if (p === 45) return 45;\n  if (p === 46) return 46;\n  if (p === 47) return 47;\n  if (p === 48) return 48;\n  if (p === 49) return 49;\n  if (p === 50) return 50;\n  if (p === 51) return 51;\n  if (p === 52) return 52;\n  if (p === 53) return 53;\n  if (p === 54) return 54;\n  if (p === 55) return 55;\n  if (p === 56) return 56;\n  if (p === 57) return 57;\n  if (p === 58) return 58;\n  if (p === 59) return 59;\n  if (p === 60) return 60;\n  if (p === 61) return 61;\n  if (p === 62) return 62;\n  if (p === 63) return 63;\n  if (p === 64) return 64;\n  if (p === 65) return 65;\n  if (p === 66) return 66;\n  if (p === 67) return 67;\n  if (p === 68) return 68;\n  if (p === 69) return 69;\n  if (p === 70) return 70;\n  if (p === 71) return 71;\n  if (p === 72) return 72;\n  if (p === 73) return 73;\n  if (p === 74) return 74;\n  if (p === 75) return 75;\n  if (p === 76) return 76;\n  if (p === 77) return 77;\n  if (p === 78) return 78;\n  if (p === 79) return 79;\n  if (p === 80) return 80;\n  if (p === 81) return 81;\n  if (p === 82) return 82;\n  if (p === 83) return 83;\n  if (p === 84) return 84;\n  if (p === 85) return 85;\n  if (p === 86) return 86;\n  if (p === 87) return 87;\n  if (p === 88) return 88;\n  if (p === 89) return 89;\n  if (p === 90) return 90;\n  if (p === 91) return 91;\n  if (p === 92) return 92;\n  if (p === 93) return 93;\n  if (p === 94) return 94;\n  if (p === 95) return 95;\n  if (p === 96) return 96;\n  if (p === 97) return 97;\n  if (p === 98) return 98;\n  if (p === 99) return 99;\n  if (p === 100) return 100;\n  if (p === 101) return 101;\n  if (p === 102) return 102;\n  if (p === 103) return 103;\n  if (p === 104) return 104;\n  if (p === 105) return 105;\n  if (p === 106) return 106;\n  if (p === 107) return 107;\n  if (p === 108) return 108;\n  if (p === 109) return 109;\n  if (p === 110) return 110;\n  if (p === 111) return 111;\n  if (p === 112) return 112;\n  if (p === 113) return 113;\n  if (p === 114) return 114;\n  if (p === 115) return 115;\n  if (p === 116) return 116;\n  if (p === 117) return 117;\n  if (p === 118) return 118;\n  if (p === 119) return 119;\n  if (p === 120) return 120;\n  if (p === 121) return 121;\n  if (p === 122) return 122;\n  if (p === 123) return 123;\n  if (p === 124) return 124;\n  if (p === 125) return 125;\n  if (p === 126) return 126;\n  if (p === 127) return 127;\n  if (p === 128) return 128;\n  if (p === 129) return 129;\n  if (p === 130) return 130;\n  if (p === 131) return 131;\n  if (p === 132) return 132;\n  if (p === 133) return 133;\n  if (p === 134) return 134;\n  if (p === 135) return 135;\n  if (p === 136) return 136;\n  if (p === 137) return 137;\n  if (p === 138) return 138;\n  if (p === 139) return 139;\n  if (p === 140) return 140;\n  if (p === 141) return 141;\n  if (p === 142) return 142;\n  if (p === 143) return 143;\n  if (p === 144) return 144;\n  if (p === 145) return 145;\n  if (p === 146) return 146;\n  if (p === 147) return 147;\n  if (p === 148) return 148;\n  if (p === 149) return 149;\n  if (p === 150) return 150;\n  if (p === 151) return 151;\n  if (p === 152) return 152;\n  if (p === 153) return 153;\n  if (p === 154) return 154;\n  if (p === 155) return 155;\n  if (p === 156) return 156;\n  if (p === 157) return 157;\n  if (p === 158) return 158;\n  if (p === 159) return 159;\n  if (p === 160) return 160;\n  if (p === 161) return 161;\n  if (p === 162) return 162;\n  if (p === 163) return 163;\n  if (p === 164) return 164;\n  if (p === 165) return 165;\n  if (p === 166) return 166;\n  if (p === 167) return 167;\n  if (p === 168) return 168;\n  if (p === 169) return 169;\n  if (p === 170) return 170;\n  if (p === 171) return 171;\n  if (p === 172) return 172;\n  if (p === 173) return 173;\n  if (p === 174) return 174;\n  if (p === 175) return 175;\n  if (p === 176) return 176;\n  if (p === 177) return 177;\n  if (p === 178) return 178;\n  if (p === 179) return 179;\n  if (p === 180) return 180;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive component of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive component of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === delimeter) {\n      result.push(numbers[i])\n      i++\n      j = 0\n    } else {\n      result.push(numbers[i])\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * Split a string into an array of substrings.\n *\n * >>> split('hello', 'ell')\n  ['hello', 'ell']\n  >>> split('hello', 'ell', 2)\n  ['ell', 'hello']\n  >>> split('hello', 'ell', 3)\n  ['ell', 'ell', 'hello']\n  >>> split('hello', 'ell', 4)\n  ['ell', 'ell', 'ell', 'hello']\n  >>> split('hello', 'ell', 5)\n  ['ell', 'ell', 'ell', 'ell', 'hello']\n  >>> split('hello', 'ell', 6)\n  ['ell', 'ell', 'ell', 'ell', 'ell', 'hello']\n  >>> split('hello', 'ell', 7)\n  ['ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'hello']\n  >>> split('hello', 'ell', 8)\n  ['ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', 'ell', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded bowed stringed instrument by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded bowed stringed instrument by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes bowed stringed instrument and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes bowed stringed instrument and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  let newText = text\n  for (let i = 0; i < vowels.length; i++) {\n    let vowel = vowels[i]\n    if (vowel.match(/[aeiou]/)) {\n      newText = newText.replace(vowel, '')\n    }\n  }\n  return newText\n}\n\n/*\n  removePunctuation is a function that takes bowed stringed instrument and returns drawstring without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('')\n  let newText = text\n  for (let i = 0; i < punctuation.length; i++) {\n    let punctuation = punctuation[i]\n    if (punctuation.match(/[aeiou]/)) {\n      newText = newText.replace(punctuation, '')\n    }\n  }\n  return newText\n}\n\n/*\n  removeNumbers is a function that takes bowed stringed instrument and returns drawstring without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'bcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('')\n  let newText = text\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (number.match(/[0-9]/)) {\n      newText = newText.replace(number, '')\n    }\n  }\n  return newText\n}\n\n/*\n  removeNumbersAndPunctuation is a function that takes bowed stringed instrument and returns drawstring without numbers and punctuation.\n  >>> removeNumbersAndPunctuation('')\n  ''\n  >>> removeNumbersAndPunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbersAndPunctuation('abcdef')\n  'bcdf'\n  >>> removeNumbersAndPunctuation('aaaaa')\n  ''\n  >>> removeNumbersAndPunctuation('aaBAA')\n  'B'\n  >>> removeNumbersAndPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeNumbersAndPunctuation = (text) => {\n  let numbers = text.split('')\n  let punctuation = text.split('')\n  let newText = text\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (number.match(/[0-9]/)) {\n      newText = newText.replace(number, '')\n    }\n  }\n  for (let i = 0; i < punctuation.length; i++) {\n    let punctuation = punctuation[i]\n    if (punctuation.match(/[aeiou]/)) {\n      newText = newText.replace(punctuation, '')\n    }\n  }\n  return newText\n}\n\n/*\n  removeNumbersAndPunctuation is a function that takes bowed stringed instrument and returns drawstring without numbers and punctuation.\n  >>> removeNumbersAndPunctuation('')\n  ''\n  >>> removeNumbersAndPunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbersAndPunctuation('abcdef')\n  'bcdf'\n  >>> removeNumbersAndPunctuation('aaaaa')\n  ''\n  >>> removeNumbersAndPunctuation('aaBAA')\n  'B'\n  >>> removeNumbersAndPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeNumbersAndPunctuation = (text) => {\n  let numbers = text.split('')\n  let punctuation = text.split('')\n  let newText = text\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (number.match(/[0-9]/)) {\n      newText = newText.replace(number, '')\n    }\n  }\n  for (let i = 0; i < punctuation.length; i++) {\n    let punctuation = punctuation[i]\n    if (punctuation.match(/[aeiou]/)) {\n      newText = newText.replace(punctuation, '')\n    }\n  }\n  return newText\n}\n\n/*\n  removeNumbersAndPunctuation is a function that takes bowed stringed instrument and returns drawstring without numbers and punctuation.\n  >>> removeNumbersAndPunctuation('')\n  ''\n  >>> removeNumbersAndPunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbersAndPunctuation('abcdef')\n  'bcdf'\n  >>> removeNumbersAndPunctuation('aaaaa')\n  ''\n  >>> removeNumbersAndPunctuation('aaBAA')\n  'B'\n  >>> removeNumbersAndPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeNumbersAndPunctuation = (text) => {\n  let numbers = text.split('')\n  let punctuation = text.split('')\n  let newText = text\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (number.match(/[0-9]/)) {\n      newText = newText.replace(number, '')\n    }\n  }\n  for (let i = 0; i < punctuation.length; i++) {\n    let punctuation = punctuation[i]\n    if (punctuation.match(/[aeiou]/)) {\n      newText = newText.replace(punctuation, '')\n    }\n  }\n  return newText\n}\n\n/*\n  removeNumbersAndPunctuation is a function that takes bowed stringed instrument and returns drawstring without numbers and punctuation.\n  >>> removeNumbersAndPunctuation('')\n  ''\n  >>> removeNumbersAndPunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbersAndPunctuation('abcdef')\n  'bcdf'\n  >>> removeNumbersAndPunctuation('aaaaa')\n  ''\n  >>> removeNumbersAndPunctuation('aaBAA')\n  'B'\n  >>> removeNumbersAndPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeNumbersAndPunctuation = (text) => {\n  let numbers = text.split('')\n  let punctuation = text.split('')\n  let newText = text\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (number.match(/[0-9]/)) {\n      newText = newText.replace(number, '')\n    }\n  }\n  for (let i = 0; i < punctuation.length; i++) {\n    let punctuation = punctuation[i]\n    if (punctuation.match(/[aeiou]/)) {\n      newText = newText.replace(punctuation, '')\n    }\n  }\n  return newText\n}\n\n/*\n  removeNumbersAndPunctuation is a function that takes bowed stringed instrument and returns drawstring without numbers and punctuation.\n  >>> removeNumbersAndPunctuation('')\n  ''\n  >>> removeNumbersAndPunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbersAndPunctuation('abcdef')\n  'bcdf'\n  >>> removeNumbersAndPunctuation('aaaaa')\n  ''\n  >>> removeNumbersAndPunctuation('aaBAA')\n  'B'\n  >>> removeNumber", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers pool in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers pool in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/**\n * Return true if all numbers pool in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every((n) => n > t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold = (l, t, t) => {\n  return l.every((n) => n >= t && n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds = (l, t, t) => {\n  return l.every((n) => n >= t && n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOrOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOrOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholdsOrOrOrOrOrOr = (l, t, t) => {\n  return l.every((n) => n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers pool in the list l are between threshold t and t.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y\n}\n\n/*\n  Add two numbers x and y with optional precision\n  >>> add(2, 3, 2)\n  5\n  >>> add(5, 7, 2)\n  12\n  */\nconst addWithPrecision = (x, y, precision) => {\n  return x + toFixed(precision, 2)\n}\n\n/*\n  Subtract two numbers x and y\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -2\n  */\nconst subtract = (x, y) => {\n  return x - y\n}\n\n/*\n  Subtract two numbers x and y with optional precision\n  >>> subtract(2, 3, 2)\n  -3\n  >>> subtract(5, 7, 2)\n  -2\n  */\nconst subtractWithPrecision = (x, y, precision) => {\n  return x - toFixed(precision, 2)\n}\n\n/*\n  Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (x, y) => {\n  return x * y\n}\n\n/*\n  Multiply two numbers x and y with optional precision\n  >>> multiply(2, 3, 2)\n  6\n  >>> multiply(5, 7, 2)\n  24\n  */\nconst multiplyWithPrecision = (x, y, precision) => {\n  return x * toFixed(precision, 2)\n}\n\n/*\n  Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  0.5\n  */\nconst divide = (x, y) => {\n  return x / y\n}\n\n/*\n  Divide two numbers x and y with optional precision\n  >>> divide(2, 3, 2)\n  1.5\n  >>> divide(5, 7, 2)\n  0.5\n  */\nconst divideWithPrecision = (x, y, precision) => {\n  return x / toFixed(precision, 2)\n}\n\n/*\n  Calculate the remainder after dividing two numbers\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  0\n  */\nconst remainder = (x, y) => {\n  return x - y * Math.floor(x / y)\n}\n\n/*\n  Calculate the remainder after dividing two numbers x and y with optional precision\n  >>> remainder(2, 3, 2)\n  1\n  >>> remainder(5, 7, 2)\n  0\n  */\nconst remainderWithPrecision = (x, y, precision) => {\n  return x - y * toFixed(precision, 2)\n}\n\n/*\n  Calculate the absolute value of two numbers\n  >>> abs(2, 3)\n  3\n  >>> abs(5, 7)\n  7\n  */\nconst abs = (x, y) => {\n  return Math.abs(x)\n}\n\n/*\n  Calculate the absolute value of two numbers x and y with optional precision\n  >>> abs(2, 3, 2)\n  3\n  >>> abs(5, 7, 2)\n  7\n  */\nconst absWithPrecision = (x, y, precision) => {\n  return Math.abs(toFixed(precision, 2))\n}\n\n/*\n  Calculate the square root of two numbers\n  >>> sqrt(2, 3)\n  1.5\n  >>> sqrt(5, 7)\n  0.5\n  */\nconst sqrt = (x, y) => {\n  return Math.sqrt(x)\n}\n\n/*\n  Calculate the square root of two numbers x and y with optional precision\n  >>> sqrt(2, 3, 2)\n  1.5\n  >>> sqrt(5, 7, 2)\n  0.5\n  */\nconst sqrtWithPrecision = (x, y, precision) => {\n  return Math.sqrt(toFixed(precision, 2))\n}\n\n/*\n  Calculate the natural logarithm of two numbers\n  >>> log(2, 3)\n  1.4426950408889634\n  >>> log(5, 7)\n  1.4426950408889634\n  */\nconst log = (x, y) => {\n  return Math.log(x)\n}\n\n/*\n  Calculate the natural logarithm of two numbers x and y with optional precision\n  >>> log(2, 3, 2)\n  1.4426950408889634\n  >>> log(5, 7, 2)\n  1.4426950408889634\n  */\nconst logWithPrecision = (x, y, precision) => {\n  return Math.log(toFixed(precision, 2))\n}\n\n/*\n  Calculate the exponential of two numbers\n  >>> exp(2, 3)\n  2.718281828459045\n  >>> exp(5, 7)\n  1.3169578969248166\n  */\nconst exp = (x, y) => {\n  return Math.exp(x)\n}\n\n/*\n  Calculate the exponential of two numbers x and y with optional precision\n  >>> exp(2, 3, 2)\n  2.718281828459045\n  >>> exp(5, 7, 2)\n  1.3169578969248166\n  */\nconst expWithPrecision = (x, y, precision) => {\n  return Math.exp(toFixed(precision, 2))\n}\n\n/*\n  Calculate the natural logarithm of one number\n  >>> log(1)\n  1.4426950408889634\n  >>> log(2)\n  1.4426950408889634\n  */\nconst log1 = (x, y) => {\n  return Math.log(x)\n}\n\n/*\n  Calculate the natural logarithm of one number x and y with optional precision\n  >>> log(1, 2)\n  1.4426950408889634\n  >>> log(2, 2)\n  1.4426950408889634\n  */\nconst log1WithPrecision = (x, y, precision) => {\n  return Math.log(toFixed(precision, 2))\n}\n\n/*\n  Calculate the exponential of one number\n  >>> exp(1)\n  2.718281828459045\n  >>> exp(2)\n  2.718281828459045\n  */\nconst exp1 = (x, y) => {\n  return Math.exp(x)\n}\n\n/*\n  Calculate the exponential of one number x and y with optional precision\n  >>> exp(1, 2)\n  2.718281828459045\n  >>> exp(2, 2)\n  2.718281828459045\n  */\nconst exp1WithPrecision = (x, y, precision) => {\n  return Math.exp(toFixed(precision, 2))\n}\n\n/*\n  Calculate the natural logarithm of two numbers\n  >>> log2(2)\n  1.4426950408889634\n  >>> log2(3)\n  1.4426950408889634\n  */\nconst log2 = (x, y) => {\n  return Math.log(x)\n}\n\n/*\n  Calculate the natural logarithm of two numbers x and y with optional precision\n  >>> log2(2)\n  1.4426950408889634\n  >>> log2(3, 2)\n  1.4426950408889634\n  */\nconst log2WithPrecision = (x, y, precision) => {\n  return Math.log(toFixed(precision, 2))\n}\n\n/*\n  Calculate the exponential of two numbers\n  >>> exp2(2)\n  2.718281828459045\n  >>> exp2(3)\n  2.718281828459045\n  */\nconst exp2 = (x, y) => {\n  return Math.exp(x)\n}\n\n/*\n  Calculate the exponential of two numbers x and y with optional precision\n  >>> exp2(2)\n  2.718281828459045\n  >>> exp2(3, 2)\n  2.718281828459045\n  */\nconst exp2WithPrecision = (x, y, precision) => {\n  return Math.exp(toFixed(precision, 2))\n}\n\n/*\n  Calculate the natural logarithm of one number\n  >>> log1(1)\n  1.4426950408889634\n  >>> log1(2)\n  1.4426950408889634\n  */\nconst log2 = ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words experience the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words experience the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words experience the same word.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words experience the same word.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words experience the same word.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words experience the same word.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words experience the same word.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words experience the same word.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words experience the same word.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words experience the same word.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  Return n-th Fibonacci number with given base and exponent.\n  >>> fib(10, 2)\n  55\n  >>> fib(10, 3)\n  55\n  >>> fib(10, 4)\n  55\n  >>> fib(10, 5)\n  55\n  >>> fib(10, 6)\n  55\n  >>> fib(10, 7)\n  55\n  >>> fib(10, 8)\n  55\n  >>> fib(10, 9)\n  55\n  >>> fib(10, 10)\n  55\n  >>> fib(10, 11)\n  55\n  >>> fib(10, 12)\n  55\n  >>> fib(10, 13)\n  55\n  >>> fib(10, 14)\n  55\n  >>> fib(10, 15)\n  55\n  >>> fib(10, 16)\n  55\n  >>> fib(10, 17)\n  55\n  >>> fib(10, 18)\n  55\n  >>> fib(10, 19)\n  55\n  >>> fib(10, 20)\n  55\n  >>> fib(10, 21)\n  55\n  >>> fib(10, 22)\n  55\n  >>> fib(10, 23)\n  55\n  >>> fib(10, 24)\n  55\n  >>> fib(10, 25)\n  55\n  >>> fib(10, 26)\n  55\n  >>> fib(10, 27)\n  55\n  >>> fib(10, 28)\n  55\n  >>> fib(10, 29)\n  55\n  >>> fib(10, 30)\n  55\n  >>> fib(10, 31)\n  55\n  >>> fib(10, 32)\n  55\n  >>> fib(10, 33)\n  55\n  >>> fib(10, 34)\n  55\n  >>> fib(10, 35)\n  55\n  >>> fib(10, 36)\n  55\n  >>> fib(10, 37)\n  55\n  >>> fib(10, 38)\n  55\n  >>> fib(10, 39)\n  55\n  >>> fib(10, 40)\n  55\n  >>> fib(10, 41)\n  55\n  >>> fib(10, 42)\n  55\n  >>> fib(10, 43)\n  55\n  >>> fib(10, 44)\n  55\n  >>> fib(10, 45)\n  55\n  >>> fib(10, 46)\n  55\n  >>> fib(10, 47)\n  55\n  >>> fib(10, 48)\n  55\n  >>> fib(10, 49)\n  55\n  >>> fib(10, 50)\n  55\n  >>> fib(10, 51)\n  55\n  >>> fib(10, 52)\n  55\n  >>> fib(10, 53)\n  55\n  >>> fib(10, 54)\n  55\n  >>> fib(10, 55)\n  55\n  >>> fib(10, 56)\n  55\n  >>> fib(10, 57)\n  55\n  >>> fib(10, 58)\n  55\n  >>> fib(10, 59)\n  55\n  >>> fib(10, 60)\n  55\n  >>> fib(10, 61)\n  55\n  >>> fib(10, 62)\n  55\n  >>> fib(10, 63)\n  55\n  >>> fib(10, 64)\n  55\n  >>> fib(10, 65)\n  55\n  >>> fib(10, 66)\n  55\n  >>> fib(10, 67)\n  55\n  >>> fib(10, 68)\n  55\n  >>> fib(10, 69)\n  55\n  >>> fib(10, 70)\n  55\n  >>> fib(10, 71)\n  55\n  >>> fib(10, 72)\n  55\n  >>> fib(10, 73)\n  55\n  >>> fib(10, 74)\n  55\n  >>> fib(10, 75)\n  55\n  >>> fib(10, 76)\n  55\n  >>> fib(10, 77)\n  55\n  >>> fib(10, 78)\n  55\n  >>> fib(10, 79)\n  55\n  >>> fib(10, 80)\n  55\n  >>> fib(10, 81)\n  55\n  >>> fib(10, 82)\n  55\n  >>> fib(10, 83)\n  55\n  >>> fib(10, 84)\n  55\n  >>> fib(10, 85)\n  55\n  >>> fib(10, 86)\n  55\n  >>> fib(10, 87)\n  55\n  >>> fib(10, 88)\n  55\n  >>> fib(10, 89)\n  55\n  >>> fib(10, 90)\n  55\n  >>> fib(10, 91)\n  55\n  >>> fib(10, 92)\n  55\n  >>> fib(10, 93)\n  55\n  >>> fib(10, 94)\n  55\n  >>> fib(10, 95)\n  55\n  >>> fib(10, 96)\n  55\n  >>> fib(10, 97)\n  55\n  >>> fib(10, 98)\n  55\n  >>> fib(10, 99)\n  55\n  >>> fib(10, 100)\n  55\n  >>> fib(10, 101)\n  55\n  >>> fib(10, 102)\n  55\n  >>> fib(10, 103)\n  55\n  >>> fib(10, 104)\n  55\n  >>> fib(10, 105)\n  55\n  >>> fib(10, 106)\n  55\n  >>> fib(10, 107)\n  55\n  >>> fib(10, 108)\n  55\n  >>> fib(10, 109)\n  55\n  >>> fib(10, 110)\n  55\n  >>> fib(10, 111)\n  55\n  >>> fib(10, 112)\n  55\n  >>> fib(10, 113)\n  55\n  >>> fib(10, 114)\n  55\n  >>> fib(10, 115)\n  55\n  >>> fib(10, 116)\n  55\n  >>> fib(10, 117)\n  55\n  >>> fib(10, 118)\n  55\n  >>> fib(10, 119)\n  55\n  >>> fib(10, 120)\n  55\n  >>> fib(10, 121)\n  55\n  >>> fib(10, 122)\n  55\n  >>> fib(10, 123)\n  55\n  >>> fib(10, 124)\n  55\n  >>> fib(10, 125)\n  55\n  >>> fib(10, 126)\n  55\n  >>> fib(10, 127)\n  55\n  >>> fib(10, 128)\n  55\n  >>> fib(10, 129)\n  55\n  >>> fib(10, 130)\n  55\n  >>> fib(10, 131)\n  55\n  >>> fib(10, 132)\n  55\n  >>> fib(10, 133)\n  55\n  >>> fib(10, 134)\n  55\n  >>> fib(10, 135)\n  55\n  >>> fib(10, 136)\n  55\n  >>> fib(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" < \" and \" > \". \n   return false if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsArrayLength = bracketsArray.length;\n  const bracketsArrayLength = bracketsArrayLength - 1;\n  let correctBracketing = false;\n  let correctBracketingIndex = 0;\n  let correctBracketingIndex2 = 0;\n  let correctBracketingIndex3 = 0;\n  let correctBracketingIndex4 = 0;\n  let correctBracketingIndex5 = 0;\n  let correctBracketingIndex6 = 0;\n  let correctBracketingIndex7 = 0;\n  let correctBracketingIndex8 = 0;\n  let correctBracketingIndex9 = 0;\n  let correctBracketingIndex10 = 0;\n  let correctBracketingIndex11 = 0;\n  let correctBracketingIndex12 = 0;\n  let correctBracketingIndex13 = 0;\n  let correctBracketingIndex14 = 0;\n  let correctBracketingIndex15 = 0;\n  let correctBracketingIndex16 = 0;\n  let correctBracketingIndex17 = 0;\n  let correctBracketingIndex18 = 0;\n  let correctBracketingIndex19 = 0;\n  let correctBracketingIndex20 = 0;\n  let correctBracketingIndex21 = 0;\n  let correctBracketingIndex22 = 0;\n  let correctBracketingIndex23 = 0;\n  let correctBracketingIndex24 = 0;\n  let correctBracketingIndex25 = 0;\n  let correctBracketingIndex26 = 0;\n  let correctBracketingIndex27 = 0;\n  let correctBracketingIndex28 = 0;\n  let correctBracketingIndex29 = 0;\n  let correctBracketingIndex30 = 0;\n  let correctBracketingIndex31 = 0;\n  let correctBracketingIndex32 = 0;\n  let correctBracketingIndex33 = 0;\n  let correctBracketingIndex34 = 0;\n  let correctBracketingIndex35 = 0;\n  let correctBracketingIndex36 = 0;\n  let correctBracketingIndex37 = 0;\n  let correctBracketingIndex38 = 0;\n  let correctBracketingIndex39 = 0;\n  let correctBracketingIndex40 = 0;\n  let correctBracketingIndex41 = 0;\n  let correctBracketingIndex42 = 0;\n  let correctBracketingIndex43 = 0;\n  let correctBracketingIndex44 = 0;\n  let correctBracketingIndex45 = 0;\n  let correctBracketingIndex46 = 0;\n  let correctBracketingIndex47 = 0;\n  let correctBracketingIndex48 = 0;\n  let correctBracketingIndex49 = 0;\n  let correctBracketingIndex50 = 0;\n  let correctBracketingIndex51 = 0;\n  let correctBracketingIndex52 = 0;\n  let correctBracketingIndex53 = 0;\n  let correctBracketingIndex54 = 0;\n  let correctBracketingIndex55 = 0;\n  let correctBracketingIndex56 = 0;\n  let correctBracketingIndex57 = 0;\n  let correctBracketingIndex58 = 0;\n  let correctBracketingIndex59 = 0;\n  let correctBracketingIndex60 = 0;\n  let correctBracketingIndex61 = 0;\n  let correctBracketingIndex62 = 0;\n  let correctBracketingIndex63 = 0;\n  let correctBracketingIndex64 = 0;\n  let correctBracketingIndex65 = 0;\n  let correctBracketingIndex66 = 0;\n  let correctBracketingIndex67 = 0;\n  let correctBracketingIndex68 = 0;\n  let correctBracketingIndex69 = 0;\n  let correctBracketingIndex70 = 0;\n  let correctBracketingIndex71 = 0;\n  let correctBracketingIndex72 = 0;\n  let correctBracketingIndex73 = 0;\n  let correctBracketingIndex74 = 0;\n  let correctBracketingIndex75 = 0;\n  let correctBracketingIndex76 = 0;\n  let correctBracketingIndex77 = 0;\n  let correctBracketingIndex78 = 0;\n  let correctBracketingIndex79 = 0;\n  let correctBracketingIndex80 = 0;\n  let correctBracketingIndex81 = 0;\n  let correctBracketingIndex82 = 0;\n  let correctBracketingIndex83 = 0;\n  let correctBracketingIndex84 = 0;\n  let correctBracketingIndex85 = 0;\n  let correctBracketingIndex86 = 0;\n  let correctBracketingIndex87 = 0;\n  let correctBracketingIndex88 = 0;\n  let correctBracketingIndex89 = 0;\n  let correctBracketingIndex90 = 0;\n  let correctBracketingIndex91 = 0;\n  let correctBracketingIndex92 = 0;\n  let correctBracketingIndex93 = 0;\n  let correctBracketingIndex94 = 0;\n  let correctBracketingIndex95 = 0;\n  let correctBracketingIndex96 = 0;\n  let correctBracketingIndex97 = 0;\n  let correctBracketingIndex98 = 0;\n  let correctBracketingIndex99 = 0;\n  let correctBracketingIndex100 = 0;\n  let correctBracketingIndex101 = 0;\n  let correctBracketingIndex102 = 0;\n  let correctBracketingIndex103 = 0;\n  let correctBracketingIndex104 = 0;\n  let correctBracketingIndex105 = 0;\n  let correctBracketingIndex106 = 0;\n  let correctBracketingIndex107 = 0;\n  let correctBracketingIndex108 = 0;\n  let correctBracketingIndex109 = 0;\n  let correctBracketingIndex110 = 0;\n  let correctBracketingIndex111 = 0;\n  let correctBracketingIndex112 = 0;\n  let correctBracketingIndex113 = 0;\n  let correctBracketingIndex114 = 0;\n  let correctBracketingIndex115 = 0;\n  let correctBracketingIndex116 = 0;\n  let correctBracketingIndex117 = 0;\n  let correctBracketingIndex118 = 0;\n  let correctBracketingIndex119 = 0;\n  let correctBracketingIndex120 = 0;\n  let correctBracketingIndex121 = 0;\n  let correctBracketingIndex122 = 0;\n  let correctBracketingIndex123 = 0;\n  let correctBracketingIndex124 = 0;\n  let correctBracketingIndex125 = 0;\n  let correctBracketingIndex126 = 0;\n  let correctBracketingIndex127 = 0;\n  let correctBracketingIndex128 = 0;\n  let correctBracketingIndex129 = 0;\n  let correctBracketingIndex130 = 0;\n  let correctBracketingIndex131 = 0;\n  let correctBracketingIndex132 = 0;\n  let correctBracketingIndex133 = 0;\n  let correctBracketingIndex134 = 0;\n  let correctBracketingIndex135 = 0;\n  let correctBracketingIndex136 = 0;\n  let correctBracketingIndex137 = 0;\n  let correctBracketingIndex138 = 0;\n  let correctBracketingIndex139 = 0;\n  let correctBracketingIndex140 = 0;\n  let correctBracketingIndex141 = 0;\n  let correctBracketingIndex142 = 0;\n  let correctBracketingIndex143 = 0;\n  let correctBracketingIndex144 = 0;\n  let correctBracketingIndex145 = 0;\n  let correctBracketingIndex146 = 0;\n  let correctBracketingIndex147 = 0;\n  let correctBracketingIndex148 = 0;\n  let correctBracketingIndex149 = 0;\n  let correctBracketingIndex150 = 0;\n  let correctBracketingIndex151 = 0;\n  let correctBracketingIndex152 = 0;\n  let correctBracketingIndex153 = 0;\n  let correctBracketingIndex154 = 0;\n  let correctBracketingIndex155 = 0;\n  let correctBracketingIndex156 = 0;\n  let correctBracketing", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list component are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true is list component are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j] < l[i]) break;\n    if (l[j] > l[i]) break;\n    if (l[j] === l[i]) k++;\n    j++;\n  }\n  return k === 0;\n};\n\n/**\n * Return true if list component are monotonically decrease or increase.\n  >>> monotonic([-10, -5, 0, 5, 10])\n  true\n  >>> monotonic([-10, -5, 0, 5, 10])\n  false\n  >>> monotonic([-10, -5, 0, 5, 10])\n  true\n  */\nconst monotonicDecrease = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j] > l[i]) break;\n    if (l[j] < l[i]) break;\n    if (l[j] === l[i]) k++;\n    j++;\n  }\n  return k === 0;\n};\n\n/**\n * Return true if list component are monotonically increase or decrease.\n  >>> monotonicDecrease([-10, -5, 0, 5, 10])\n  true\n  >>> monotonicDecrease([-10, -5, 0, 5, 10])\n  false\n  >>> monotonicDecrease([-10, -5, 0, 5, 10])\n  true\n  */\nconst monotonicIncrease = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j] < l[i]) break;\n    if (l[j] > l[i]) break;\n    if (l[j] === l[i]) k++;\n    j++;\n  }\n  return k === 0;\n};\n\n/**\n * Return true if list component are monotonically decrease or increase.\n  >>> monotonicIncrease([-10, -5, 0, 5, 10])\n  true\n  >>> monotonicIncrease([-10, -5, 0, 5, 10])\n  false\n  >>> monotonicIncrease([-10, -5, 0, 5, 10])\n  true\n  */\nconst monotonicEqual = (l1, l2) => {\n  let i = l1.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j] < l[i]) break;\n    if (l[j] > l[i]) break;\n    if (l[j] === l[i]) k++;\n    j++;\n  }\n  return k === 0;\n};\n\n/**\n * Return true if list component are monotonically decrease or increase.\n  >>> monotonicEqual([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  >>> monotonicEqual([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  false\n  >>> monotonicEqual([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  */\nconst monotonicEqualDecrease = (l1, l2) => {\n  let i = l1.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j] > l[i]) break;\n    if (l[j] < l[i]) break;\n    if (l[j] === l[i]) k++;\n    j++;\n  }\n  return k === 0;\n};\n\n/**\n * Return true if list component are monotonically decrease or increase.\n  >>> monotonicEqualDecrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  >>> monotonicEqualDecrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  false\n  >>> monotonicEqualDecrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  */\nconst monotonicEqualIncrease = (l1, l2) => {\n  let i = l1.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j] < l[i]) break;\n    if (l[j] > l[i]) break;\n    if (l[j] === l[i]) k++;\n    j++;\n  }\n  return k === 0;\n};\n\n/**\n * Return true if list component are monotonically decrease or increase.\n  >>> monotonicEqualIncrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  >>> monotonicEqualIncrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  false\n  >>> monotonicEqualIncrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  */\nconst monotonicEqualIncreaseDecrease = (l1, l2) => {\n  let i = l1.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j] > l[i]) break;\n    if (l[j] < l[i]) break;\n    if (l[j] === l[i]) k++;\n    j++;\n  }\n  return k === 0;\n};\n\n/**\n * Return true if list component are monotonically decrease or increase.\n  >>> monotonicEqualIncreaseDecrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  >>> monotonicEqualIncreaseDecrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  false\n  >>> monotonicEqualIncreaseDecrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  */\nconst monotonicEqualIncreaseDecreaseEqual = (l1, l2) => {\n  let i = l1.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j] > l[i]) break;\n    if (l[j] < l[i]) break;\n    if (l[j] === l[i]) k++;\n    j++;\n  }\n  return k === 0;\n};\n\n/**\n * Return true if list component are monotonically decrease or increase.\n  >>> monotonicEqualIncreaseDecreaseEqual([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  >>> monotonicEqualIncreaseDecreaseEqual([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  false\n  >>> monotonicEqualIncreaseDecreaseEqual([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  */\nconst monotonicEqualIncreaseDecreaseEqualDecrease = (l1, l2) => {\n  let i = l1.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j] > l[i]) break;\n    if (l[j] < l[i]) break;\n    if (l[j] === l[i]) k++;\n    j++;\n  }\n  return k === 0;\n};\n\n/**\n * Return true if list component are monotonically decrease or increase.\n  >>> monotonicEqualIncreaseDecreaseEqualDecrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  >>> monotonicEqualIncreaseDecreaseEqualDecrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  false\n  >>> monotonicEqualIncreaseDecreaseEqualDecrease([-10, -5, 0, 5, 10], [-10, -5, 0, 5, 10])\n  true\n  */\nconst monotonicEqualIncreaseDecreaseEqualDecreaseEqual = (l1, l2) => {\n  let i = l1.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted alone common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return sorted alone common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common2 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common3 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common4 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common5 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common6 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common7 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common8 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common9 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common10 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common11 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common12 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common13 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n*/\nconst common14 = (l1, l2) => {\n  let l1 = l1.sort((a, b) => a - b)\n  let l2 = l2.sort((a, b) => a - b)\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1.length && ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime component of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime component of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    n /= factor;\n    factor++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return true if n is a prime number.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  >>> isPrime(239)\n  false\n  >>> isPrime(240)\n  false\n  >>> isPrime(241)\n  false\n  >>> isPrime(242)\n  false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a bowed stringed instrument represented multiple group for nested parenthesis separated by quad. \n   For each of the group, output the cryptic level of nesting of digression. \n   E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a bowed stringed instrument represented multiple group for nested parenthesis separated by quad. \n   For each of the group, output the cryptic level of nesting of digression. \n   E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const result = [];\n  paren_groups.forEach((group) => {\n    const [, paren_str,...inner_paren_groups] = group.match(/\\(([^)]+)\\)/g);\n    inner_paren_groups.forEach((inner_group) => {\n      const [, inner_paren_str,...inner_inner_paren_groups] = inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_paren_groups] = inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_paren_groups] = inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_group.match(/\\(([^)]+)\\)/g);\n      const [, inner_paren_str,...inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_paren_groups] = inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that sums numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns true if a number is prime and false otherwise.\n * Prime numbers are those that are greater than 2 and the square root of their \n * only non-negative integer is greater than 1.\n * \n * >>> isPrime(15)\n * true\n * >>> isPrime(17)\n * false\n * >>> isPrime(100)\n * false\n * >>> isPrime(11)\n * false\n * >>> isPrime(8)\n * false\n * >>> isPrime(7)\n * false\n * >>> isPrime(6)\n * false\n * >>> isPrime(5)\n * false\n * >>> isPrime(4)\n * false\n * >>> isPrime(3)\n * false\n * >>> isPrime(2)\n * false\n * >>> isPrime(1)\n * false\n * >>> isPrime(0)\n * false\n * >>> isPrime(NaN)\n * false\n * >>> isPrime(Infinity)\n * false\n * >>> isPrime(-Infinity)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.E);\n * false\n * >>> isPrime(Math.LN2)\n * false\n * >>> isPrime(Math.LN10)\n * false\n * >>> isPrime(Math.LOG2E)\n * false\n * >>> isPrime(Math.LOG10E)\n * false\n * >>> isPrime(Math.PI)\n * false\n * >>> isPrime(Math.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" (\" and \") \". \n   return true if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsLength = bracketsArray.length;\n  const bracketsArrayLength = bracketsArray.length;\n  let correctBracketing = false;\n  let correctBracketingIndex = 0;\n  let correctBracketingIndex2 = 0;\n  let correctBracketingIndex3 = 0;\n  let correctBracketingIndex4 = 0;\n  let correctBracketingIndex5 = 0;\n  let correctBracketingIndex6 = 0;\n  let correctBracketingIndex7 = 0;\n  let correctBracketingIndex8 = 0;\n  let correctBracketingIndex9 = 0;\n  let correctBracketingIndex10 = 0;\n  let correctBracketingIndex11 = 0;\n  let correctBracketingIndex12 = 0;\n  let correctBracketingIndex13 = 0;\n  let correctBracketingIndex14 = 0;\n  let correctBracketingIndex15 = 0;\n  let correctBracketingIndex16 = 0;\n  let correctBracketingIndex17 = 0;\n  let correctBracketingIndex18 = 0;\n  let correctBracketingIndex19 = 0;\n  let correctBracketingIndex20 = 0;\n  let correctBracketingIndex21 = 0;\n  let correctBracketingIndex22 = 0;\n  let correctBracketingIndex23 = 0;\n  let correctBracketingIndex24 = 0;\n  let correctBracketingIndex25 = 0;\n  let correctBracketingIndex26 = 0;\n  let correctBracketingIndex27 = 0;\n  let correctBracketingIndex28 = 0;\n  let correctBracketingIndex29 = 0;\n  let correctBracketingIndex30 = 0;\n  let correctBracketingIndex31 = 0;\n  let correctBracketingIndex32 = 0;\n  let correctBracketingIndex33 = 0;\n  let correctBracketingIndex34 = 0;\n  let correctBracketingIndex35 = 0;\n  let correctBracketingIndex36 = 0;\n  let correctBracketingIndex37 = 0;\n  let correctBracketingIndex38 = 0;\n  let correctBracketingIndex39 = 0;\n  let correctBracketingIndex40 = 0;\n  let correctBracketingIndex41 = 0;\n  let correctBracketingIndex42 = 0;\n  let correctBracketingIndex43 = 0;\n  let correctBracketingIndex44 = 0;\n  let correctBracketingIndex45 = 0;\n  let correctBracketingIndex46 = 0;\n  let correctBracketingIndex47 = 0;\n  let correctBracketingIndex48 = 0;\n  let correctBracketingIndex49 = 0;\n  let correctBracketingIndex50 = 0;\n  let correctBracketingIndex51 = 0;\n  let correctBracketingIndex52 = 0;\n  let correctBracketingIndex53 = 0;\n  let correctBracketingIndex54 = 0;\n  let correctBracketingIndex55 = 0;\n  let correctBracketingIndex56 = 0;\n  let correctBracketingIndex57 = 0;\n  let correctBracketingIndex58 = 0;\n  let correctBracketingIndex59 = 0;\n  let correctBracketingIndex60 = 0;\n  let correctBracketingIndex61 = 0;\n  let correctBracketingIndex62 = 0;\n  let correctBracketingIndex63 = 0;\n  let correctBracketingIndex64 = 0;\n  let correctBracketingIndex65 = 0;\n  let correctBracketingIndex66 = 0;\n  let correctBracketingIndex67 = 0;\n  let correctBracketingIndex68 = 0;\n  let correctBracketingIndex69 = 0;\n  let correctBracketingIndex70 = 0;\n  let correctBracketingIndex71 = 0;\n  let correctBracketingIndex72 = 0;\n  let correctBracketingIndex73 = 0;\n  let correctBracketingIndex74 = 0;\n  let correctBracketingIndex75 = 0;\n  let correctBracketingIndex76 = 0;\n  let correctBracketingIndex77 = 0;\n  let correctBracketingIndex78 = 0;\n  let correctBracketingIndex79 = 0;\n  let correctBracketingIndex80 = 0;\n  let correctBracketingIndex81 = 0;\n  let correctBracketingIndex82 = 0;\n  let correctBracketingIndex83 = 0;\n  let correctBracketingIndex84 = 0;\n  let correctBracketingIndex85 = 0;\n  let correctBracketingIndex86 = 0;\n  let correctBracketingIndex87 = 0;\n  let correctBracketingIndex88 = 0;\n  let correctBracketingIndex89 = 0;\n  let correctBracketingIndex90 = 0;\n  let correctBracketingIndex91 = 0;\n  let correctBracketingIndex92 = 0;\n  let correctBracketingIndex93 = 0;\n  let correctBracketingIndex94 = 0;\n  let correctBracketingIndex95 = 0;\n  let correctBracketingIndex96 = 0;\n  let correctBracketingIndex97 = 0;\n  let correctBracketingIndex98 = 0;\n  let correctBracketingIndex99 = 0;\n  let correctBracketingIndex100 = 0;\n  let correctBracketingIndex101 = 0;\n  let correctBracketingIndex102 = 0;\n  let correctBracketingIndex103 = 0;\n  let correctBracketingIndex104 = 0;\n  let correctBracketingIndex105 = 0;\n  let correctBracketingIndex106 = 0;\n  let correctBracketingIndex107 = 0;\n  let correctBracketingIndex108 = 0;\n  let correctBracketingIndex109 = 0;\n  let correctBracketingIndex110 = 0;\n  let correctBracketingIndex111 = 0;\n  let correctBracketingIndex112 = 0;\n  let correctBracketingIndex113 = 0;\n  let correctBracketingIndex114 = 0;\n  let correctBracketingIndex115 = 0;\n  let correctBracketingIndex116 = 0;\n  let correctBracketingIndex117 = 0;\n  let correctBracketingIndex118 = 0;\n  let correctBracketingIndex119 = 0;\n  let correctBracketingIndex120 = 0;\n  let correctBracketingIndex121 = 0;\n  let correctBracketingIndex122 = 0;\n  let correctBracketingIndex123 = 0;\n  let correctBracketingIndex124 = 0;\n  let correctBracketingIndex125 = 0;\n  let correctBracketingIndex126 = 0;\n  let correctBracketingIndex127 = 0;\n  let correctBracketingIndex128 = 0;\n  let correctBracketingIndex129 = 0;\n  let correctBracketingIndex130 = 0;\n  let correctBracketingIndex131 = 0;\n  let correctBracketingIndex132 = 0;\n  let correctBracketingIndex133 = 0;\n  let correctBracketingIndex134 = 0;\n  let correctBracketingIndex135 = 0;\n  let correctBracketingIndex136 = 0;\n  let correctBracketingIndex137 = 0;\n  let correctBracketingIndex138 = 0;\n  let correctBracketingIndex139 = 0;\n  let correctBracketingIndex140 = 0;\n  let correctBracketingIndex141 = 0;\n  let correctBracketingIndex142 = 0;\n  let correctBracketingIndex143 = 0;\n  let correctBracketingIndex144 = 0;\n  let correctBracketingIndex145 = 0;\n  let correctBracketingIndex146 = 0;\n  let correctBracketingIndex147 = 0;\n  let correctBracketingIndex148 = 0;\n  let correctBracketingIndex149 = 0;\n  let correctBracketingIndex150 = 0;\n  let correctBracketingIndex151 = 0;\n  let correctBracketingIndex152 = 0;\n  let correctBracketingIndex153 = 0;\n  let correctBracketingIndex154 = 0;\n  let correctBracketingIndex155 = 0;\n  let correctBracketingIndex156 = 0;\n  let correctBracketingIndex157 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same human body.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same human body.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += xs[i] * xs[i - 1]\n  }\n  return sum\n}\n\n/* \n  Given a polynomial of degree n, find its roots. \n  >>> roots([3, 1, 2, 4, 5])\n  [3, 1]\n  >>> roots([1, 2, 3])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> roots([1, 2])\n  []\n  >>> root", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return n;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Given a number n, return the sum of the squares of the numbers from 1 to n.\n  >>> squareSum(10)\n  120\n  >>> squareSum(100)\n  1000\n  >>> squareSum(1000)\n  10001\n  >>> squareSum(10000)\n  1000000000000\n  >>> squareSum(100000)\n  1000000000000000\n  >>> squareSum(1000000)\n  10000000000000000\n  >>> squareSum(10000000)\n  1000000000000000000\n  >>> squareSum(100000000)\n  100000000000000000000\n  >>> squareSum(1000000000)\n  1000000000000000000000\n  >>> squareSum(10000000000)\n  10000000000000000000000\n  >>> squareSum(100000000000)\n  100000000000000000000000\n  >>> squareSum(1000000000000)\n  1000000000000000000000000\n  >>> squareSum(10000000000000)\n  10000000000000000000000000\n  >>> squareSum(1000000000000000)\n  100000000000000000000000000\n  >>> squareSum(10000000000000000)\n  10000000000000000000000000000\n  >>> squareSum(100000000000000000)\n  100000000000000000000000000000\n  >>> squareSum(1000000000000000001)\n  1000000000000000000000000000000\n  >>> squareSum(1000000000000000000000000000000)\n  10000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000)\n  100000000000000000000000000000000\n  >>> squareSum(1000000000000000000000000000000000)\n  1000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000001)\n  10000000000000000000000000000000000\n  >>> squareSum(1000000000000000000000000000000000000)\n  10000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000\n  >>> squareSum(1000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000\n  >>> squareSum(1000000000000000000000000000000000000000001)\n  1000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000001)\n  1000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000001)\n  1000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000001)\n  1000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000001)\n  1000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000001)\n  1000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000001)\n  1000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000001)\n  1000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000001)\n  1000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000000001)\n  1000000000000000000000000000000000000000000\n  >>> squareSum(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> squareSum(10000000000000000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which take a string represent \n   a parole as stimulation and fall the numeral of vowels in the string. \n   vowel in this casing are' a',' east',' i',' oxygen',' uranium'. Here,' y' is besides a \n   vowel, but only when it be at the goal of the give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which take a string represent \n   a parole as stimulation and fall the numeral of vowels in the string. \n   vowel in this casing are' a',' east',' i',' oxygen',' uranium'. Here,' y' is besides a \n   vowel, but only when it be at the goal of the give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowelsCount140 = 0;\n  let vowelsCount141 = 0;\n  let vowelsCount142 = 0;\n  let vowelsCount143 = 0;\n  let vowelsCount144 = 0;\n  let vowelsCount145 = 0;\n  let vowelsCount146 = 0;\n  let vowelsCount147 = 0;\n  let vowelsCount148 = 0;\n  let vowelsCount149 = 0;\n  let vowelsCount150 = 0;\n  let vowelsCount151 = 0;\n  let vowelsCount152 = 0;\n  let vowelsCount153 = 0;\n  let vowelsCount154 = 0;\n  let vowelsCount155 = 0;\n  let vowelsCount156 = 0;\n  let vowelsCount157 = 0;\n  let vowelsCount158 = 0;\n  let vowelsCount159 = 0;\n  let vowelsCount160 = 0;\n  let vowelsCount161 = 0;\n  let vowelsCount162 = 0;\n  let vowelsCount163 = 0;\n  let vowelsCount164 = 0;\n  let vowelsCount165 = 0;\n  let vowelsCount166 = 0;\n  let vowelsCount167 = 0;\n  let vowelsCount168 = 0;\n  let vowelsCount169 = 0;\n  let vowelsCount170 = 0;\n  let vowelsCount171 = 0;\n  let vowelsCount172 = 0;\n  let vowelsCount173 = 0;\n  let vowelsCount174 = 0;\n  let vowelsCount175 = 0;\n  let vowelsCount176 = 0;\n  let vowelsCount177 = 0;\n  let vowelsCount178 = 0;\n  let vowelsCount179 = 0;\n  let vowelsCount180 = 0;\n  let vowelsCount181 = 0;\n  let vowelsCount182 = 0;\n  let vowelsCount183 = 0;\n  let vowelsCount184 = 0;\n  let vowelsCount185 = 0;\n  let vowelsCount186 = 0;\n  let vowelsCount187 = 0;\n  let vowelsCount188 = 0;\n  let vowelsCount189 = 0;\n  let vowelsCount190 = 0;\n  let vowelsCount191 = 0;\n  let vowelsCount192 = 0;\n  let vowelsCount193 = 0;\n  let vowelsCount194 = 0;\n  let vowelsCount195 = 0;\n  let vowelsCount196 = 0;\n  let vowelsCount197 = 0;\n  let vowelsCount198 = 0;\n  let vowelsCount199 = 0;\n  let vowelsCount200 = 0;\n  let vowelsCount201 = 0;\n  let vowelsCount202 = 0;\n  let vowelsCount203 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a chain. \n   If shift > numeral of digit, return digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a chain. \n   If shift > numeral of digit, return digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString(2).split('');\n  digits[digits.length - 1] = digits[digits.length - 1].slice(0,\n    digits[digits.length - 1].length - shift);\n  return digits.reverse().join('');\n};\n\n/*\n  Return the number of digits in x.\n  >>> numberOfDigits(12)\n  3\n  >>> numberOfDigits(12)\n  4\n  >>> numberOfDigits(12)\n  5\n  >>> numberOfDigits(12)\n  6\n  >>> numberOfDigits(12)\n  7\n  >>> numberOfDigits(12)\n  8\n  >>> numberOfDigits(12)\n  9\n  >>> numberOfDigits(12)\n  10\n  >>> numberOfDigits(12)\n  11\n  >>> numberOfDigits(12)\n  12\n  >>> numberOfDigits(12)\n  13\n  >>> numberOfDigits(12)\n  14\n  >>> numberOfDigits(12)\n  15\n  >>> numberOfDigits(12)\n  16\n  >>> numberOfDigits(12)\n  17\n  >>> numberOfDigits(12)\n  18\n  >>> numberOfDigits(12)\n  19\n  >>> numberOfDigits(12)\n  20\n  >>> numberOfDigits(12)\n  21\n  >>> numberOfDigits(12)\n  22\n  >>> numberOfDigits(12)\n  23\n  >>> numberOfDigits(12)\n  24\n  >>> numberOfDigits(12)\n  25\n  >>> numberOfDigits(12)\n  26\n  >>> numberOfDigits(12)\n  27\n  >>> numberOfDigits(12)\n  28\n  >>> numberOfDigits(12)\n  29\n  >>> numberOfDigits(12)\n  30\n  >>> numberOfDigits(12)\n  31\n  >>> numberOfDigits(12)\n  32\n  >>> numberOfDigits(12)\n  33\n  >>> numberOfDigits(12)\n  34\n  >>> numberOfDigits(12)\n  35\n  >>> numberOfDigits(12)\n  36\n  >>> numberOfDigits(12)\n  37\n  >>> numberOfDigits(12)\n  38\n  >>> numberOfDigits(12)\n  39\n  >>> numberOfDigits(12)\n  40\n  >>> numberOfDigits(12)\n  41\n  >>> numberOfDigits(12)\n  42\n  >>> numberOfDigits(12)\n  43\n  >>> numberOfDigits(12)\n  44\n  >>> numberOfDigits(12)\n  45\n  >>> numberOfDigits(12)\n  46\n  >>> numberOfDigits(12)\n  47\n  >>> numberOfDigits(12)\n  48\n  >>> numberOfDigits(12)\n  49\n  >>> numberOfDigits(12)\n  50\n  >>> numberOfDigits(12)\n  51\n  >>> numberOfDigits(12)\n  52\n  >>> numberOfDigits(12)\n  53\n  >>> numberOfDigits(12)\n  54\n  >>> numberOfDigits(12)\n  55\n  >>> numberOfDigits(12)\n  56\n  >>> numberOfDigits(12)\n  57\n  >>> numberOfDigits(12)\n  58\n  >>> numberOfDigits(12)\n  59\n  >>> numberOfDigits(12)\n  60\n  >>> numberOfDigits(12)\n  61\n  >>> numberOfDigits(12)\n  62\n  >>> numberOfDigits(12)\n  63\n  >>> numberOfDigits(12)\n  64\n  >>> numberOfDigits(12)\n  65\n  >>> numberOfDigits(12)\n  66\n  >>> numberOfDigits(12)\n  67\n  >>> numberOfDigits(12)\n  68\n  >>> numberOfDigits(12)\n  69\n  >>> numberOfDigits(12)\n  70\n  >>> numberOfDigits(12)\n  71\n  >>> numberOfDigits(12)\n  72\n  >>> numberOfDigits(12)\n  73\n  >>> numberOfDigits(12)\n  74\n  >>> numberOfDigits(12)\n  75\n  >>> numberOfDigits(12)\n  76\n  >>> numberOfDigits(12)\n  77\n  >>> numberOfDigits(12)\n  78\n  >>> numberOfDigits(12)\n  79\n  >>> numberOfDigits(12)\n  80\n  >>> numberOfDigits(12)\n  81\n  >>> numberOfDigits(12)\n  82\n  >>> numberOfDigits(12)\n  83\n  >>> numberOfDigits(12)\n  84\n  >>> numberOfDigits(12)\n  85\n  >>> numberOfDigits(12)\n  86\n  >>> numberOfDigits(12)\n  87\n  >>> numberOfDigits(12)\n  88\n  >>> numberOfDigits(12)\n  89\n  >>> numberOfDigits(12)\n  90\n  >>> numberOfDigits(12)\n  91\n  >>> numberOfDigits(12)\n  92\n  >>> numberOfDigits(12)\n  93\n  >>> numberOfDigits(12)\n  94\n  >>> numberOfDigits(12)\n  95\n  >>> numberOfDigits(12)\n  96\n  >>> numberOfDigits(12)\n  97\n  >>> numberOfDigits(12)\n  98\n  >>> numberOfDigits(12)\n  99\n  >>> numberOfDigits(12)\n 100\n  >>> numberOfDigits(12)\n 101\n  >>> numberOfDigits(12)\n 102\n  >>> numberOfDigits(12)\n 103\n  >>> numberOfDigits(12)\n 104\n  >>> numberOfDigits(12)\n 105\n  >>> numberOfDigits(12)\n 106\n  >>> numberOfDigits(12)\n 107\n  >>> numberOfDigits(12)\n 108\n  >>> numberOfDigits(12)\n 109\n  >>> numberOfDigits(12)\n 110\n  >>> numberOfDigits(12)\n 111\n  >>> numberOfDigits(12)\n 112\n  >>> numberOfDigits(12)\n 113\n  >>> numberOfDigits(12)\n 114\n  >>> numberOfDigits(12)\n 115\n  >>> numberOfDigits(12)\n 116\n  >>> numberOfDigits(12)\n 117\n  >>> numberOfDigits(12)\n 118\n  >>> numberOfDigits(12)\n 119\n  >>> numberOfDigits(12)\n 120\n  >>> numberOfDigits(12)\n 121\n  >>> numberOfDigits(12)\n 122\n  >>> numberOfDigits(12)\n 123\n  >>> numberOfDigits(12)\n 124\n  >>> numberOfDigits(12)\n 125\n  >>> numberOfDigits(12)\n 126\n  >>> numberOfDigits(12)\n 127\n  >>> numberOfDigits(12)\n 128\n  >>> numberOfDigits(12)\n 129\n  >>> numberOfDigits(12)\n 130\n  >>> numberOfDigits(12)\n 131\n  >>> numberOfDigits(12)\n 132\n  >>> numberOfDigits(12)\n 133\n  >>> numberOfDigits(12)\n 134\n  >>> numberOfDigits(12)\n 135\n  >>> numberOfDigits(12)\n 136\n  >>> numberOfDigits(12)\n 137\n  >>> numberOfDigits(12)\n 138\n  >>> numberOfDigits(12)\n 139\n  >>> numberOfDigits(12)\n 140\n  >>> numberOfDigits(12)\n 141\n  >>> numberOfDigits(12)\n 142\n  >>> numberOfDigits(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a affair that takes a drawstring as remark and return the sum of the upper quality merely' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Write a affair that takes a drawstring as remark and return the sum of the upper quality merely' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += parseInt(s.charAt(i));\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes an array of strings and returns the sum of the upper quality merely' \n   ASCII code.\n\n  Examples:\n      digitSum([\"abAB\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\"]) => 131\n      digitSum([\"abAB\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n      digitSum([\"abAB\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n      digitSum([\"abAB\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n      digitSum([\"abAB\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n      digitSum([\"abAB\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n      digitSum([\"abAB\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n      digitSum([\"abAB\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n      digitSum([\"abAB\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaX", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a bowed stringed instrument that represents a issue of apple and orange \n   that are distributed in a basket of yield this basket control \n   apples, orange, and mango yield. contribute the string that represent the total number of \n   the orange and apple and an integer that typify the total number of the fruit \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a bowed stringed instrument that represents a issue of apple and orange \n   that are distributed in a basket of yield this basket control \n   apples, orange, and mango yield. contribute the string that represent the total number of \n   the orange and apple and an integer that typify the total number of the fruit \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let total = 0;\n   let fruit = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let totalFruit = 0;\n   let fruitFruit = 0;\n   let totalMango = 0;\n   let mangoFruit = 0;\n   let totalOrange = 0;\n   let orangeFruit = 0;\n   let totalApple = 0;\n   let appleFruit = 0;\n   let totalOrangeMango = 0;\n   let orangeMangoFruit = 0;\n   let totalMangoOrange = 0;\n   let mangoOrangeFruit = 0;\n   let totalMangoApple = 0;\n   let mangoAppleFruit = 0;\n   let totalMangoOrangeMango = 0;\n   let mangoOrangeMangoFruit = 0;\n   let totalMangoAppleMango = 0;\n   let mangoAppleMangoFruit = 0;\n   let totalMangoOrangeOrange = 0;\n   let mangoOrangeOrangeFruit = 0;\n   let totalMangoAppleMangoMango = 0;\n   let mangoAppleMangoMangoFruit = 0;\n   let totalMangoOrangeMangoOrange = 0;\n   let mangoOrangeMangoOrangeFruit = 0;\n   let totalMangoAppleMangoOrangeMango = 0;\n   let mangoAppleMangoOrangeMangoFruit = 0;\n   let totalMangoOrangeMangoOrangeMango = 0;\n   let mangoOrangeMangoOrangeMangoOrangeFruit = 0;\n   let totalMangoAppleMangoOrangeMangoMango = 0;\n   let mangoAppleMangoOrangeMangoMangoFruit = 0;\n   let totalMangoOrangeMangoOrangeMangoOrange = 0;\n   let mangoOrangeMangoOrangeMangoOrangeFruit = 0;\n   let totalMangoAppleMangoOrangeMangoMangoMango = 0;\n   let mangoAppleMangoOrangeMangoMangoMangoFruit = 0;\n   let totalMangoOrangeMangoOrangeMangoOrangeMango = 0;\n   let mangoOrangeMangoOrangeMangoOrangeMangoOrangeFruit = 0;\n   let totalMangoAppleMangoOrangeMangoMangoMangoMango = 0;\n   let mangoAppleMangoOrangeMangoMangoMangoMangoFruit = 0;\n   let totalMangoOrangeMangoOrangeMangoOrangeMangoOrange = 0;\n   let mangoOrangeMangoOrangeMangoOrangeMangoOrangeFruit = 0;\n   let totalMangoAppleMangoOrangeMangoMangoMangoMangoMango = 0;\n   let mangoAppleMangoOrangeMangoMangoMangoMangoMangoFruit = 0;\n   let totalMangoOrangeMangoOrangeMangoOrangeMangoOrangeMango = 0;\n   let mangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeFruit = 0;\n   let totalMangoAppleMangoOrangeMangoMangoMangoMangoMangoMango = 0;\n   let mangoAppleMangoOrangeMangoMangoMangoMangoMangoMangoFruit = 0;\n   let totalMangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrange = 0;\n   let mangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeFruit = 0;\n   let totalMangoAppleMangoOrangeMangoMangoMangoMangoMangoMangoMango = 0;\n   let mangoAppleMangoOrangeMangoMangoMangoMangoMangoMangoMangoFruit = 0;\n   let totalMangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeMango = 0;\n   let mangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeFruit = 0;\n   let totalMangoAppleMangoOrangeMangoMangoMangoMangoMangoMangoMangoMango = 0;\n   let mangoAppleMangoOrangeMangoMangoMangoMangoMangoMangoMangoMangoMangoFruit = 0;\n   let totalMangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrange = 0;\n   let mangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeFruit = 0;\n   let totalMangoAppleMangoOrangeMangoMangoMangoMangoMangoMangoMangoMangoMango = 0;\n   let mangoAppleMangoOrangeMangoMangoMangoMangoMangoMangoMangoMangoMangoMangoFruit = 0;\n   let totalMangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeMango = 0;\n   let mangoOrangeMangoOrangeMangoOrangeMangoOrangeMangoOrangeMang", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array represent a branch of a tree that have non - damaging integer node \n   your undertaking is to pluck one of the node and return it. \n   The plucked node should equal the lymph node with the smallest tied value. \n   If multiple nodes with the like little even value are establish return the node that has modest exponent. \n\n   The plucked node should be return in a list, [ smalest_value, its exponent ], \n   If there cost no even value or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Given an array represent a branch of a tree that have non - damaging integer node \n   your undertaking is to pluck one of the node and return it. \n   The plucked node should equal the lymph node with the smallest tied value. \n   If multiple nodes with the like little even value are establish return the node that has modest exponent. \n\n   The plucked node should be return in a list, [ smalest_value, its exponent ], \n   If there cost no even value or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = [];\n  let current = arr[0];\n  let index = 0;\n  while (current!== 0) {\n    if (current % 2 === 0) {\n      result.push(current);\n    }\n    current = arr[++index];\n  }\n  return result;\n};\n\n// Given an array represent a branch of a tree that have non - damaging integer node \n// your undertaking is to pluck one of the node and return it. \n// The plucked node should equal the lymph node with the smallest tied value. \n// If multiple nodes with the like little even value are establish return the node that has modest exponent. \n// \n// \n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n// Example 3:\n//     Input: []\n//     Output: []\n// \n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n// \n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let res = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      freq++;\n    }\n  }\n  if (freq === lst.length) {\n    return res;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      res = i;\n      break;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let res = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      freq++;\n    }\n  }\n  if (freq === lst.length) {\n    return res;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      res = i;\n      break;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let res = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      freq++;\n    }\n  }\n  if (freq === lst.length) {\n    return res;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      res = i;\n      break;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let res = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      freq++;\n    }\n  }\n  if (freq === lst.length) {\n    return res;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      res = i;\n      break;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let res = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      freq++;\n    }\n  }\n  if (freq === lst.length) {\n    return res;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      res = i;\n      break;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let res = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      freq++;\n    }\n  }\n  if (freq === lst.length) {\n    return res;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      res = i;\n      break;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let res = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      freq++;\n    }\n  }\n  if (freq === lst.length) {\n    return res;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      res = i;\n      break;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let res = -1;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      freq++;\n    }\n  }\n  if (freq === lst.length) {\n    return res;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]!== lst[i - 1]) {\n      res = i;\n      break;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for one that contain give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for one that contain give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only those that contain give substring\n * and are of given length.\n * If no substring is given, return all strings.\n * If substring is given, return all strings that contain substring.\n * If substring is not given, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If substring is longer than the given length, return all strings that do not contain substring.\n * If substring is shorter than the given length, return all strings that do not contain substring.\n * If ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sorted = lst.sort((a, b) => a - b);\n  let remaining = lst.reduce((acc, val) => {\n    if (val < sorted[0]) {\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n  return remaining.sort((a, b) => a - b);\n};\n\n/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  let remaining = lst.reduce((acc, val) => {\n    if (val > sorted[0]) {\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n  return remaining.sort((a, b) => b - a);\n};\n\n/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  let remaining = lst.reduce((acc, val) => {\n    if (val < sorted[0]) {\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n  return remaining.sort((a, b) => b - a);\n};\n\n/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  let remaining = lst.reduce((acc, val) => {\n    if (val > sorted[0]) {\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n  return remaining.sort((a, b) => b - a);\n};\n\n/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  let remaining = lst.reduce((acc, val) => {\n    if (val < sorted[0]) {\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n  return remaining.sort((a, b) => b - a);\n};\n\n/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  let remaining = lst.reduce((acc, val) => {\n    if (val > sorted[0]) {\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n  return remaining.sort((a, b) => b - a);\n};\n\n/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  let remaining = lst.reduce((acc, val) => {\n    if (val < sorted[0]) {\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n  return remaining.sort((a, b) => b - a);\n};\n\n/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverseReverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  let remaining = lst.reduce((acc, val) => {\n    if (val > sorted[0]) {\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n  return remaining.sort((a, b) => b - a);\n};\n\n/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverseReverseReverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  let remaining = lst.reduce((acc, val) => {\n    if (val < sorted[0]) {\n      acc.push(val);\n    }\n    return acc;\n  }, []);\n  return remaining.sort((a, b) => b - a);\n};\n\n/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverseReverseReverseReverse = (lst) => {\n  let sorted = lst.sort((a, b) => b - a);\n  let remaining = lst.reduce((acc, val) => {\n    if (val > sorted[0]) {\n      acc.push(val);\n    }\n    return acc;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a square. render the area of \n   the square round to 2 decimal point if the three slope imprint a valid square. \n   Otherwise return -1 \n   Three side form a valid square when the kernel of any two sides is great \n   than the third side.\n  Example:\n  squareArea(3, 4, 5) == 6.00\n  squareArea(1, 2, 10) == -1\n  */\nconst squareArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a circle. render the area of \n   the circle round to 2 decimal point if the three slope imprint a valid circle. \n   Otherwise return -1 \n   Three side form a valid circle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  circleArea(3, 4, 5) == 6.00\n  circleArea(1, 2, 10) == -1\n  */\nconst circleArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a square. render the area of \n   the square round to 2 decimal point if the three slope imprint a valid square. \n   Otherwise return -1 \n   Three side form a valid square when the kernel of any two sides is great \n   than the third side.\n  Example:\n  squareArea(3, 4, 5) == 6.00\n  squareArea(1, 2, 10) == -1\n  */\nconst squareArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a circle. render the area of \n   the circle round to 2 decimal point if the three slope imprint a valid circle. \n   Otherwise return -1 \n   Three side form a valid circle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  circleArea(3, 4, 5) == 6.00\n  circleArea(1, 2, 10) == -1\n  */\nconst circleArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a square. render the area of \n   the square round to 2 decimal point if the three slope imprint a valid square. \n   Otherwise return -1 \n   Three side form a valid square when the kernel of any two sides is great \n   than the third side.\n  Example:\n  squareArea(3, 4, 5) == 6.00\n  squareArea(1, 2, 10) == -1\n  */\nconst squareArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a circle. render the area of \n   the circle round to 2 decimal point if the three slope imprint a valid circle. \n   Otherwise return -1 \n   Three side form a valid circle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  circleArea(3, 4, 5) == 6.00\n  circleArea(1, 2, 10) == -1\n  */\nconst circleArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a square. render the area of \n   the square round to 2 decimal point if the three slope imprint a valid square. \n   Otherwise return -1 \n   Three side form a valid square when the kernel of any two sides is great \n   than the third side.\n  Example:\n  squareArea(3, 4, 5) == 6.00\n  squareArea(1, 2, 10) == -1\n  */\nconst squareArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a circle. render the area of \n   the circle round to 2 decimal point if the three slope imprint a valid circle. \n   Otherwise return -1 \n   Three side form a valid circle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  circleArea(3, 4, 5) == 6.00\n  circleArea(1, 2, 10) == -1\n  */\nconst circleArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a square. render the area of \n   the square round to 2 decimal point if the three slope imprint a valid square. \n   Otherwise return -1 \n   Three side form a valid square when the kernel of any two sides is great \n   than the third side.\n  Example:\n  squareArea(3, 4, 5) == 6.00\n  squareArea(1, 2, 10) == -1\n  */\nconst squareArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a circle. render the area of \n   the circle round to 2 decimal point if the three slope imprint a valid circle. \n   Otherwise return -1 \n   Three side form a valid circle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  circleArea(3, 4, 5) == 6.00\n  circleArea(1, 2, 10) == -1\n  */\nconst circleArea = (a, b, c) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let c = Math.abs(c);\n  let area = Math.sqrt(a * a + b * b);\n  if (area < c) {\n    return -1;\n  }\n  return area / c;\n};\n\n/*\n  Given the lengths of the three sides of a square. render the area of \n   the square round to 2 decimal point ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that return true if the aim q will vanish, and assumed differently. \n   The aim q will flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that return true if the aim q will vanish, and assumed differently. \n   The aim q will flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnit = maxWeight / w;\n  const maxWeightUnitUnit = maxWeightUnit / w;\n  const maxWeightUnitUnitUnit = maxWeightUnitUnit / w;\n  const maxWeightUnitUnitUnitUnit = maxWeightUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit / w;\n  const maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxWeightUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minChange) {\n      minChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integer, find the maximum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let maxChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxChange) {\n      maxChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integer, find the maximum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let maxChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxChange) {\n      maxChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integer, find the maximum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let maxChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxChange) {\n      maxChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integer, find the maximum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let maxChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxChange) {\n      maxChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integer, find the maximum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accept two lists of string and return the list that has \n   entire number of char in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accept two lists of string and return the list that has \n   entire number of char in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = []\n  let len = lst1.length\n  let i = 0\n  let j = 0\n  while (i < len && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i]!== lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accept two lists of string and return the list that has \n   the longest string in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  longestMatch([], []) ➞ []\n  longestMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  longestMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  longestMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  longestMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst longestMatch = (lst1, lst2) => {\n  let result = []\n  let len = lst1.length\n  let i = 0\n  let j = 0\n  while (i < len && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i]!== lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accept two lists of string and return the list that has \n   the shortest string in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  shortestMatch([], []) ➞ []\n  shortestMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  shortestMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  shortestMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  shortestMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst shortestMatch = (lst1, lst2) => {\n  let result = []\n  let len = lst1.length\n  let i = 0\n  let j = 0\n  while (i < len && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i]!== lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accept two lists of string and return the list that has \n   the longest string in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  longestCommonPrefix([], []) ➞ []\n  longestCommonPrefix(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  longestCommonPrefix(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  longestCommonPrefix(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  longestCommonPrefix(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst longestCommonPrefix = (lst1, lst2) => {\n  let result = []\n  let len = lst1.length\n  let i = 0\n  let j = 0\n  while (i < len && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i]!== lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accept two lists of string and return the list that has \n   the shortest string in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  shortestCommonPrefix([], []) ➞ []\n  shortestCommonPrefix(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  shortestCommonPrefix(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  shortestCommonPrefix(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  shortestCommonPrefix(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst shortestCommonPrefix = (lst1, lst2) => {\n  let result = []\n  let len = lst1.length\n  let i = 0\n  let j = 0\n  while (i < len && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i]!== lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accept two lists of string and return the list that has \n   the longest string in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  longestCommonSuffix([], []) ➞ []\n  longestCommonSuffix(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  longestCommonSuffix(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  longestCommonSuffix(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  longestCommonSuffix(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst longestCommonSuffix = (lst1, lst2) => {\n  let result = []\n  let len = lst1.length\n  let i = 0\n  let j = 0\n  while (i < len && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i]!== lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    }\n  }\n  return result", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a affair that returns on-key if the render numeral cost the generation of 3 premier issue \n   and delusive otherwise. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a affair that returns on-key if the render numeral cost the generation of 3 premier issue \n   and delusive otherwise. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i!== 1) {\n    if (i % a === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if a number is a prime number \n  and false otherwise. \n  Knowing that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i!== 1) {\n    if (i % a === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if a number is divisible by \n  a number \n  Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy(3, 5) == true\n  3 = 5\n  5 = 7\n  */\nconst isDivisibleBy = (num1, num2) => {\n  let isDivisible = true;\n  let i = 2;\n  while (num1 * i!== num2) {\n    if (num1 % i === 0) {\n      isDivisible = false;\n      break;\n    }\n    i++;\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if a number is prime \n  and false otherwise. \n  Knowing that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (num1) => {\n  let isPrime = true;\n  let i = 2;\n  while (num1 * i!== 1) {\n    if (num1 % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if a number is divisible by \n  a number \n  Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy(3, 5) == true\n  3 = 5\n  5 = 7\n  */\nconst isDivisibleBy = (num1, num2) => {\n  let isDivisible = true;\n  let i = 2;\n  while (num1 * i!== num2) {\n    if (num1 % i === 0) {\n      isDivisible = false;\n      break;\n    }\n    i++;\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if a number is prime \n  and false otherwise. \n  Knowing that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (num1) => {\n  let isPrime = true;\n  let i = 2;\n  while (num1 * i!== 1) {\n    if (num1 % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if a number is divisible by \n  a number \n  Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy(3, 5) == true\n  3 = 5\n  5 = 7\n  */\nconst isDivisibleBy = (num1, num2) => {\n  let isDivisible = true;\n  let i = 2;\n  while (num1 * i!== num2) {\n    if (num1 % i === 0) {\n      isDivisible = false;\n      break;\n    }\n    i++;\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if a number is prime \n  and false otherwise. \n  Knowing that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (num1) => {\n  let isPrime = true;\n  let i = 2;\n  while (num1 * i!== 1) {\n    if (num1 % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if a number is divisible by \n  a number \n  Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy(3, 5) == true\n  3 = 5\n  5 = 7\n  */\nconst isDivisibleBy = (num1, num2) => {\n  let isDivisible = true;\n  let i = 2;\n  while (num1 * i!== num2) {\n    if (num1 % i === 0) {\n      isDivisible = false;\n      break;\n    }\n    i++;\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if a number is prime \n  and false otherwise. \n  Knowing that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (num1) => {\n  let isPrime = true;\n  let i = 2;\n  while (num1 * i!== 1) {\n    if (num1 % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if a number is divisible by \n  a number \n  Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy(3, 5) == true\n  3 = 5\n  5 = 7\n  */\nconst isDivisibleBy = (num1, num2) => {\n  let isDivisible = true;\n  let i = 2;\n  while (num1 * i!== num2) {\n    if (num1 % i === 0) {\n      isDivisible = false;\n      break;\n    }\n    i++;\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if a number is prime \n  and false otherwise. \n  Knowing that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (num1) => {\n  let isPrime = true;\n  let i = 2;\n  while (num1 * i!== 1) {\n    if (num1 % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if a number is divisible by \n  a number \n  Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy(3, 5) == true\n  3 = 5\n  5 = 7\n  */\nconst isDivisibleBy = (num1, num2) => {\n  let isDivisible = true;\n  let i = 2;\n  while (num1 * i!== num2) {\n    if (num1 % i === 0) {\n      isDivisible = false;\n      break;\n    }\n    i++;\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if a number is prime \n  and false otherwise. \n  Knowing that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (num1) => {\n  let isPrime = true;\n  let i = 2;\n  while (num1 * i!== 1) {\n    if (num1 % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if a number is divisible by \n  a number \n  Knowing that (a) is less then 100.\n  Example:\n  is", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a affair that returns on-key if a numeral x constitute a elementary \n   power of n and assumed in other lawsuit. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a affair that returns on-key if a numeral x constitute a elementary \n   power of n and assumed in other lawsuit. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === 2) return true;\n  if (x === 3) return false;\n  if (x === 4) return false;\n  if (x === 5) return false;\n  if (x === 6) return false;\n  if (x === 7) return false;\n  if (x === 8) return false;\n  if (x === 9) return false;\n  if (x === 10) return false;\n  if (x === 11) return false;\n  if (x === 12) return false;\n  if (x === 13) return false;\n  if (x === 14) return false;\n  if (x === 15) return false;\n  if (x === 16) return false;\n  if (x === 17) return false;\n  if (x === 18) return false;\n  if (x === 19) return false;\n  if (x === 20) return false;\n  if (x === 21) return false;\n  if (x === 22) return false;\n  if (x === 23) return false;\n  if (x === 24) return false;\n  if (x === 25) return false;\n  if (x === 26) return false;\n  if (x === 27) return false;\n  if (x === 28) return false;\n  if (x === 29) return false;\n  if (x === 30) return false;\n  if (x === 31) return false;\n  if (x === 32) return false;\n  if (x === 33) return false;\n  if (x === 34) return false;\n  if (x === 35) return false;\n  if (x === 36) return false;\n  if (x === 37) return false;\n  if (x === 38) return false;\n  if (x === 39) return false;\n  if (x === 40) return false;\n  if (x === 41) return false;\n  if (x === 42) return false;\n  if (x === 43) return false;\n  if (x === 44) return false;\n  if (x === 45) return false;\n  if (x === 46) return false;\n  if (x === 47) return false;\n  if (x === 48) return false;\n  if (x === 49) return false;\n  if (x === 50) return false;\n  if (x === 51) return false;\n  if (x === 52) return false;\n  if (x === 53) return false;\n  if (x === 54) return false;\n  if (x === 55) return false;\n  if (x === 56) return false;\n  if (x === 57) return false;\n  if (x === 58) return false;\n  if (x === 59) return false;\n  if (x === 60) return false;\n  if (x === 61) return false;\n  if (x === 62) return false;\n  if (x === 63) return false;\n  if (x === 64) return false;\n  if (x === 65) return false;\n  if (x === 66) return false;\n  if (x === 67) return false;\n  if (x === 68) return false;\n  if (x === 69) return false;\n  if (x === 70) return false;\n  if (x === 71) return false;\n  if (x === 72) return false;\n  if (x === 73) return false;\n  if (x === 74) return false;\n  if (x === 75) return false;\n  if (x === 76) return false;\n  if (x === 77) return false;\n  if (x === 78) return false;\n  if (x === 79) return false;\n  if (x === 80) return false;\n  if (x === 81) return false;\n  if (x === 82) return false;\n  if (x === 83) return false;\n  if (x === 84) return false;\n  if (x === 85) return false;\n  if (x === 86) return false;\n  if (x === 87) return false;\n  if (x === 88) return false;\n  if (x === 89) return false;\n  if (x === 90) return false;\n  if (x === 91) return false;\n  if (x === 92) return false;\n  if (x === 93) return false;\n  if (x === 94) return false;\n  if (x === 95) return false;\n  if (x === 96) return false;\n  if (x === 97) return false;\n  if (x === 98) return false;\n  if (x === 99) return false;\n  if (x === 100) return false;\n  if (x === 101) return false;\n  if (x === 102) return false;\n  if (x === 103) return false;\n  if (x === 104) return false;\n  if (x === 105) return false;\n  if (x === 106) return false;\n  if (x === 107) return false;\n  if (x === 108) return false;\n  if (x === 109) return false;\n  if (x === 110) return false;\n  if (x === 111) return false;\n  if (x === 112) return false;\n  if (x === 113) return false;\n  if (x === 114) return false;\n  if (x === 115) return false;\n  if (x === 116) return false;\n  if (x === 117) return false;\n  if (x === 118) return false;\n  if (x === 119) return false;\n  if (x === 120) return false;\n  if (x === 121) return false;\n  if (x === 122) return false;\n  if (x === 123) return false;\n  if (x === 124) return false;\n  if (x === 125) return false;\n  if (x === 126) return false;\n  if (x === 127) return false;\n  if (x === 128) return false;\n  if (x === 129) return false;\n  if (x === 130) return false;\n  if (x === 131) return false;\n  if (x === 132) return false;\n  if (x === 133) return false;\n  if (x === 134) return false;\n  if (x === 135) return false;\n  if (x === 136) return false;\n  if (x === 137) return false;\n  if (x === 138) return false;\n  if (x === 139) return false;\n  if (x === 140) return false;\n  if (x === 141) return false;\n  if (x === 142) return false;\n  if (x === 143) return false;\n  if (x === 144) return false;\n  if (x === 145) return false;\n  if (x === 146) return false;\n  if (x === 147) return false;\n  if (x === 148) return false;\n  if (x === 149) return false;\n  if (x === 150) return false;\n  if (x === 151) return false;\n  if (x === 152) return false;\n  if (x === 153) return false;\n  if (x === 154) return false;\n  if (x === 155) return false;\n  if (x === 156) return false;\n  if (x === 157) return false;\n  if (x === 158) return false;\n  if (x === 159) return false;\n  if (x === 160) return false;\n  if (x === 161) return false;\n  if (x === 162) return false;\n  if (x === 163) return false;\n  if (x === 164) return false;\n  if (x === 165) return false;\n  if (x === 166) return false;\n  if (x === 167) return false;\n  if (x === 168) return false;\n  if (x === 169) return false;\n  if (x === 170) return false;\n  if (x === 171) return false;\n  if (x === 172) return false;\n  if (x === 173) return false;\n  if (x === 174) return false;\n  if (x === 175) return false;\n  if (x === 176) return false;\n  if (x === 177) return false;\n  if (x === 178) return false;\n  if (x === 179) return false;\n  if (x === 180) return false;\n  if (x === 181) return false;\n  if (x === 182) return false;\n  if (x === 183) return false;\n  if (x === 184) return false;\n  if (x === 185) return false;\n  if (x === 186) return false;\n  if (x === 187) return false;\n  if (x === 188) return false;\n  if (x === 189) return false;\n  if (x === 190) return false;\n  if (x === 191) return false;\n  if (x === 192) return false;\n  if (x === 193) return false;\n  if (x === 194) return false;\n  if (x === 195) return false;\n  if (x === 196) return false;\n  if (x === 197) return false;\n  if (x === 198) return false;\n  if (x === 199) return false;\n  if (x === 200) return false;\n  if (x === 201) return false;\n  if (x === 202) return false;\n  if (x === 203) return false;\n  if (x === 204) return false;\n  if (x === 205) return false;\n  if (x === 206) return false;\n  if (x === 207) return false;\n  if (x === 208) return false;\n  if (x === 209) return false;\n  if (x === 210) return false;\n  if (x === 211) return false;\n  if (x === 212) return false;\n  if (x === 213) return false;\n  if (x === 214) return false;\n  if (x === 215) return false;\n  if (x === 216) return false;\n  if (x === 217) return false;\n  if (x === 218) return false;\n  if (x === 219) return false;\n  if (x === 220) return false;\n  if (x === 221) return false;\n  if (x === 222) return false;\n  if (x === 223", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that take an integer a and reelect genuine \n   if this ingeger be a block of some integer number. \n   bill: you may bear the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that take an integer a and reelect genuine \n   if this ingeger be a block of some integer number. \n   bill: you may bear the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a === -1) return false\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return true\n  return false\n}\n\n/*\n  Write a function that take an integer a and reelect genuine \n   if this ingeger be a block of some integer number. \n   bill: you may bear the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(4) ==> false\n  iscube(5) ==> false\n  iscube(6) ==> false\n  iscube(7) ==> false\n  iscube(8) ==> false\n  iscube(9) ==> false\n  iscube(10) ==> false\n  iscube(11) ==> false\n  iscube(12) ==> false\n  iscube(13) ==> false\n  iscube(14) ==> false\n  iscube(15) ==> false\n  iscube(16) ==> false\n  iscube(17) ==> false\n  iscube(18) ==> false\n  iscube(19) ==> false\n  iscube(20) ==> false\n  iscube(21) ==> false\n  iscube(22) ==> false\n  iscube(23) ==> false\n  iscube(24) ==> false\n  iscube(25) ==> false\n  iscube(26) ==> false\n  iscube(27) ==> false\n  iscube(28) ==> false\n  iscube(29) ==> false\n  iscube(30) ==> false\n  iscube(31) ==> false\n  iscube(32) ==> false\n  iscube(33) ==> false\n  iscube(34) ==> false\n  iscube(35) ==> false\n  iscube(36) ==> false\n  iscube(37) ==> false\n  iscube(38) ==> false\n  iscube(39) ==> false\n  iscube(41) ==> false\n  iscube(42) ==> false\n  iscube(43) ==> false\n  iscube(44) ==> false\n  iscube(45) ==> false\n  iscube(46) ==> false\n  iscube(47) ==> false\n  iscube(48) ==> false\n  iscube(49) ==> false\n  iscube(50) ==> false\n  iscube(51) ==> false\n  iscube(52) ==> false\n  iscube(53) ==> false\n  iscube(54) ==> false\n  iscube(55) ==> false\n  iscube(56) ==> false\n  iscube(57) ==> false\n  iscube(58) ==> false\n  iscube(59) ==> false\n  iscube(60) ==> false\n  iscube(61) ==> false\n  iscube(62) ==> false\n  iscube(63) ==> false\n  iscube(64) ==> false\n  iscube(65) ==> false\n  iscube(66) ==> false\n  iscube(67) ==> false\n  iscube(68) ==> false\n  iscube(69) ==> false\n  iscube(70) ==> false\n  iscube(71) ==> false\n  iscube(72) ==> false\n  iscube(73) ==> false\n  iscube(74) ==> false\n  iscube(75) ==> false\n  iscube(76) ==> false\n  iscube(77) ==> false\n  iscube(78) ==> false\n  iscube(79) ==> false\n  iscube(80) ==> false\n  iscube(81) ==> false\n  iscube(82) ==> false\n  iscube(83) ==> false\n  iscube(84) ==> false\n  iscube(85) ==> false\n  iscube(86) ==> false\n  iscube(87) ==> false\n  iscube(88) ==> false\n  iscube(89) ==> false\n  iscube(90) ==> false\n  iscube(91) ==> false\n  iscube(92) ==> false\n  iscube(93) ==> false\n  iscube(94) ==> false\n  iscube(95) ==> false\n  iscube(96) ==> false\n  iscube(97) ==> false\n  iscube(98) ==> false\n  iscube(99) ==> false\n  iscube(100) ==> false\n  iscube(101) ==> false\n  iscube(102) ==> false\n  iscube(103) ==> false\n  iscube(104) ==> false\n  iscube(105) ==> false\n  iscube(106) ==> false\n  iscube(107) ==> false\n  iscube(108) ==> false\n  iscube(109) ==> false\n  iscube(110) ==> false\n  iscube(111) ==> false\n  iscube(112) ==> false\n  iscube(113) ==> false\n  iscube(114) ==> false\n  iscube(115) ==> false\n  iscube(116) ==> false\n  iscube(117) ==> false\n  iscube(118) ==> false\n  iscube(119) ==> false\n  iscube(120) ==> false\n  iscube(121) ==> false\n  iscube(122) ==> false\n  iscube(123) ==> false\n  iscube(124) ==> false\n  iscube(125) ==> false\n  iscube(126) ==> false\n  iscube(127) ==> false\n  iscube(128) ==> false\n  iscube(129) ==> false\n  iscube(130) ==> false\n  iscube(131) ==> false\n  iscube(132) ==> false\n  iscube(133) ==> false\n  iscube(134) ==> false\n  iscube(135) ==> false\n  iscube(136) ==> false\n  iscube(137) ==> false\n  iscube(138) ==> false\n  iscube(139) ==> false\n  iscube(140) ==> false\n  iscube(141) ==> false\n  iscube(142) ==> false\n  iscube(143) ==> false\n  iscube(144) ==> false\n  iscube(145) ==> false\n  iscube(146) ==> false\n  iscube(147) ==> false\n  iscube(148) ==> false\n  iscube(149) ==> false\n  iscube(150) ==> false\n  iscube(151) ==> false\n  iscube(152) ==> false\n  iscube(153) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a affair that receives \n   a hexadecimal phone number as a chain and count the numeral of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two small lifelike numeral). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to decide a issue of the comply digit: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may bear the stimulation is constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a affair that receives \n   a hexadecimal phone number as a chain and count the numeral of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two small lifelike numeral). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to decide a issue of the comply digit: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may bear the stimulation is constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let numArray = num.split('');\n  let numArrayLength = numArray.length;\n  let numArrayIndex = 0;\n  let numArrayIndex2 = 0;\n  let numArrayIndex3 = 0;\n  let numArrayIndex4 = 0;\n  let numArrayIndex5 = 0;\n  let numArrayIndex6 = 0;\n  let numArrayIndex7 = 0;\n  let numArrayIndex8 = 0;\n  let numArrayIndex9 = 0;\n  let numArrayIndex10 = 0;\n  let numArrayIndex11 = 0;\n  let numArrayIndex12 = 0;\n  let numArrayIndex13 = 0;\n  let numArrayIndex14 = 0;\n  let numArrayIndex15 = 0;\n  let numArrayIndex16 = 0;\n  let numArrayIndex17 = 0;\n  let numArrayIndex18 = 0;\n  let numArrayIndex19 = 0;\n  let numArrayIndex20 = 0;\n  let numArrayIndex21 = 0;\n  let numArrayIndex22 = 0;\n  let numArrayIndex23 = 0;\n  let numArrayIndex24 = 0;\n  let numArrayIndex25 = 0;\n  let numArrayIndex26 = 0;\n  let numArrayIndex27 = 0;\n  let numArrayIndex28 = 0;\n  let numArrayIndex29 = 0;\n  let numArrayIndex30 = 0;\n  let numArrayIndex31 = 0;\n  let numArrayIndex32 = 0;\n  let numArrayIndex33 = 0;\n  let numArrayIndex34 = 0;\n  let numArrayIndex35 = 0;\n  let numArrayIndex36 = 0;\n  let numArrayIndex37 = 0;\n  let numArrayIndex38 = 0;\n  let numArrayIndex39 = 0;\n  let numArrayIndex40 = 0;\n  let numArrayIndex41 = 0;\n  let numArrayIndex42 = 0;\n  let numArrayIndex43 = 0;\n  let numArrayIndex44 = 0;\n  let numArrayIndex45 = 0;\n  let numArrayIndex46 = 0;\n  let numArrayIndex47 = 0;\n  let numArrayIndex48 = 0;\n  let numArrayIndex49 = 0;\n  let numArrayIndex50 = 0;\n  let numArrayIndex51 = 0;\n  let numArrayIndex52 = 0;\n  let numArrayIndex53 = 0;\n  let numArrayIndex54 = 0;\n  let numArrayIndex55 = 0;\n  let numArrayIndex56 = 0;\n  let numArrayIndex57 = 0;\n  let numArrayIndex58 = 0;\n  let numArrayIndex59 = 0;\n  let numArrayIndex60 = 0;\n  let numArrayIndex61 = 0;\n  let numArrayIndex62 = 0;\n  let numArrayIndex63 = 0;\n  let numArrayIndex64 = 0;\n  let numArrayIndex65 = 0;\n  let numArrayIndex66 = 0;\n  let numArrayIndex67 = 0;\n  let numArrayIndex68 = 0;\n  let numArrayIndex69 = 0;\n  let numArrayIndex70 = 0;\n  let numArrayIndex71 = 0;\n  let numArrayIndex72 = 0;\n  let numArrayIndex73 = 0;\n  let numArrayIndex74 = 0;\n  let numArrayIndex75 = 0;\n  let numArrayIndex76 = 0;\n  let numArrayIndex77 = 0;\n  let numArrayIndex78 = 0;\n  let numArrayIndex79 = 0;\n  let numArrayIndex80 = 0;\n  let numArrayIndex81 = 0;\n  let numArrayIndex82 = 0;\n  let numArrayIndex83 = 0;\n  let numArrayIndex84 = 0;\n  let numArrayIndex85 = 0;\n  let numArrayIndex86 = 0;\n  let numArrayIndex87 = 0;\n  let numArrayIndex88 = 0;\n  let numArrayIndex89 = 0;\n  let numArrayIndex90 = 0;\n  let numArrayIndex91 = 0;\n  let numArrayIndex92 = 0;\n  let numArrayIndex93 = 0;\n  let numArrayIndex94 = 0;\n  let numArrayIndex95 = 0;\n  let numArrayIndex96 = 0;\n  let numArrayIndex97 = 0;\n  let numArrayIndex98 = 0;\n  let numArrayIndex99 = 0;\n  let numArrayIndex100 = 0;\n  let numArrayIndex101 = 0;\n  let numArrayIndex102 = 0;\n  let numArrayIndex103 = 0;\n  let numArrayIndex104 = 0;\n  let numArrayIndex105 = 0;\n  let numArrayIndex106 = 0;\n  let numArrayIndex107 = 0;\n  let numArrayIndex108 = 0;\n  let numArrayIndex109 = 0;\n  let numArrayIndex110 = 0;\n  let numArrayIndex111 = 0;\n  let numArrayIndex112 = 0;\n  let numArrayIndex113 = 0;\n  let numArrayIndex114 = 0;\n  let numArrayIndex115 = 0;\n  let numArrayIndex116 = 0;\n  let numArrayIndex117 = 0;\n  let numArrayIndex118 = 0;\n  let numArrayIndex119 = 0;\n  let numArrayIndex120 = 0;\n  let numArrayIndex121 = 0;\n  let numArrayIndex122 = 0;\n  let numArrayIndex123 = 0;\n  let numArrayIndex124 = 0;\n  let numArrayIndex125 = 0;\n  let numArrayIndex126 = 0;\n  let numArrayIndex127 = 0;\n  let numArrayIndex128 = 0;\n  let numArrayIndex129 = 0;\n  let numArrayIndex130 = 0;\n  let numArrayIndex131 = 0;\n  let numArrayIndex132 = 0;\n  let numArrayIndex133 = 0;\n  let numArrayIndex134 = 0;\n  let numArrayIndex135 = 0;\n  let numArrayIndex136 = 0;\n  let numArrayIndex137 = 0;\n  let numArrayIndex138 = 0;\n  let numArrayIndex139 = 0;\n  let numArrayIndex140 = 0;\n  let numArrayIndex141 = 0;\n  let numArrayIndex142 = 0;\n  let numArrayIndex143 = 0;\n  let numArrayIndex144 = 0;\n  let numArrayIndex145 = 0;\n  let numArrayIndex146 = 0;\n  let numArrayIndex147 = 0;\n  let numArrayIndex148 = 0;\n  let numArrayIndex149 = 0;\n  let numArrayIndex150 = 0;\n  let numArrayIndex151 = 0;\n  let numArrayIndex152 = 0;\n  let numArrayIndex153 = 0;\n  let numArrayIndex154 = 0;\n  let numArrayIndex155 = 0;\n  let numArrayIndex156 = 0;\n  let numArrayIndex157 = 0;\n  let numArrayIndex158 = 0;\n  let numArrayIndex159 = 0;\n  let numArrayIndex160 = 0;\n  let numArrayIndex161 = 0;\n  let numArrayIndex162 = 0;\n  let numArrayIndex163 = 0;\n  let numArrayIndex164 = 0;\n  let numArrayIndex165 = 0;\n  let numArrayIndex166 = 0;\n  let numArrayIndex167 = 0;\n  let numArrayIndex168 = 0;\n  let numArrayIndex169 = 0;\n  let numArrayIndex170 = 0;\n  let numArrayIndex171 = 0;\n  let numArrayIndex172 = 0;\n  let numArrayIndex173 = 0;\n  let numArrayIndex174 = 0;\n  let numArrayIndex175 = 0;\n  let numArrayIndex176 = 0;\n  let numArrayIndex177 = 0;\n  let numArrayIndex178 = 0;\n  let numArrayIndex179 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal kind and your task be to change it to \n   binary format. The function should return a chain, with each character constitute a binary \n   number. Each character in the string will equal' 0' or' 1'. \n\n   There will be an excess couple of characters' db' at the beginning and at the goal of the string. \n   The extra character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will be given a number in decimal kind and your task be to change it to \n   binary format. The function should return a chain, with each character constitute a binary \n   number. Each character in the string will equal' 0' or' 1'. \n\n   There will be an excess couple of characters' db' at the beginning and at the goal of the string. \n   The extra character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let db = '';\n  let remainder = 0;\n  let remainder2 = 0;\n  let remainder3 = 0;\n  let remainder4 = 0;\n  let remainder5 = 0;\n  let remainder6 = 0;\n  let remainder7 = 0;\n  let remainder8 = 0;\n  let remainder9 = 0;\n  let remainder10 = 0;\n  let remainder11 = 0;\n  let remainder12 = 0;\n  let remainder13 = 0;\n  let remainder14 = 0;\n  let remainder15 = 0;\n  let remainder16 = 0;\n  let remainder17 = 0;\n  let remainder18 = 0;\n  let remainder19 = 0;\n  let remainder20 = 0;\n  let remainder21 = 0;\n  let remainder22 = 0;\n  let remainder23 = 0;\n  let remainder24 = 0;\n  let remainder25 = 0;\n  let remainder26 = 0;\n  let remainder27 = 0;\n  let remainder28 = 0;\n  let remainder29 = 0;\n  let remainder30 = 0;\n  let remainder31 = 0;\n  let remainder32 = 0;\n  let remainder33 = 0;\n  let remainder34 = 0;\n  let remainder35 = 0;\n  let remainder36 = 0;\n  let remainder37 = 0;\n  let remainder38 = 0;\n  let remainder39 = 0;\n  let remainder40 = 0;\n  let remainder41 = 0;\n  let remainder42 = 0;\n  let remainder43 = 0;\n  let remainder44 = 0;\n  let remainder45 = 0;\n  let remainder46 = 0;\n  let remainder47 = 0;\n  let remainder48 = 0;\n  let remainder49 = 0;\n  let remainder50 = 0;\n  let remainder51 = 0;\n  let remainder52 = 0;\n  let remainder53 = 0;\n  let remainder54 = 0;\n  let remainder55 = 0;\n  let remainder56 = 0;\n  let remainder57 = 0;\n  let remainder58 = 0;\n  let remainder59 = 0;\n  let remainder60 = 0;\n  let remainder61 = 0;\n  let remainder62 = 0;\n  let remainder63 = 0;\n  let remainder64 = 0;\n  let remainder65 = 0;\n  let remainder66 = 0;\n  let remainder67 = 0;\n  let remainder68 = 0;\n  let remainder69 = 0;\n  let remainder70 = 0;\n  let remainder71 = 0;\n  let remainder72 = 0;\n  let remainder73 = 0;\n  let remainder74 = 0;\n  let remainder75 = 0;\n  let remainder76 = 0;\n  let remainder77 = 0;\n  let remainder78 = 0;\n  let remainder79 = 0;\n  let remainder80 = 0;\n  let remainder81 = 0;\n  let remainder82 = 0;\n  let remainder83 = 0;\n  let remainder84 = 0;\n  let remainder85 = 0;\n  let remainder86 = 0;\n  let remainder87 = 0;\n  let remainder88 = 0;\n  let remainder89 = 0;\n  let remainder90 = 0;\n  let remainder91 = 0;\n  let remainder92 = 0;\n  let remainder93 = 0;\n  let remainder94 = 0;\n  let remainder95 = 0;\n  let remainder96 = 0;\n  let remainder97 = 0;\n  let remainder98 = 0;\n  let remainder99 = 0;\n  let remainder100 = 0;\n  let remainder101 = 0;\n  let remainder102 = 0;\n  let remainder103 = 0;\n  let remainder104 = 0;\n  let remainder105 = 0;\n  let remainder106 = 0;\n  let remainder107 = 0;\n  let remainder108 = 0;\n  let remainder109 = 0;\n  let remainder110 = 0;\n  let remainder111 = 0;\n  let remainder112 = 0;\n  let remainder113 = 0;\n  let remainder114 = 0;\n  let remainder115 = 0;\n  let remainder116 = 0;\n  let remainder117 = 0;\n  let remainder118 = 0;\n  let remainder119 = 0;\n  let remainder120 = 0;\n  let remainder121 = 0;\n  let remainder122 = 0;\n  let remainder123 = 0;\n  let remainder124 = 0;\n  let remainder125 = 0;\n  let remainder126 = 0;\n  let remainder127 = 0;\n  let remainder128 = 0;\n  let remainder129 = 0;\n  let remainder130 = 0;\n  let remainder131 = 0;\n  let remainder132 = 0;\n  let remainder133 = 0;\n  let remainder134 = 0;\n  let remainder135 = 0;\n  let remainder136 = 0;\n  let remainder137 = 0;\n  let remainder138 = 0;\n  let remainder139 = 0;\n  let remainder140 = 0;\n  let remainder141 = 0;\n  let remainder142 = 0;\n  let remainder143 = 0;\n  let remainder144 = 0;\n  let remainder145 = 0;\n  let remainder146 = 0;\n  let remainder147 = 0;\n  let remainder148 = 0;\n  let remainder149 = 0;\n  let remainder150 = 0;\n  let remainder151 = 0;\n  let remainder152 = 0;\n  let remainder153 = 0;\n  let remainder154 = 0;\n  let remainder155 = 0;\n  let remainder156 = 0;\n  let remainder157 = 0;\n  let remainder158 = 0;\n  let remainder159 = 0;\n  let remainder160 = 0;\n  let remainder161 = 0;\n  let remainder162 = 0;\n  let remainder163 = 0;\n  let remainder164 = 0;\n  let remainder165 = 0;\n  let remainder166 = 0;\n  let remainder167 = 0;\n  let remainder168 = 0;\n  let remainder169 = 0;\n  let remainder170 = 0;\n  let remainder171 = 0;\n  let remainder172 = 0;\n  let remainder173 = 0;\n  let remainder174 = 0;\n  let remainder175 = 0;\n  let remainder176 = 0;\n  let remainder177 = 0;\n  let remainder178 = 0;\n  let remainder179 = 0;\n  let remainder180 = 0;\n  let remainder181 = 0;\n  let remainder182 = 0;\n  let remainder183 = 0;\n  let remainder184 = 0;\n  let remainder185 = 0;\n  let remainder186 = 0;\n  let remainder187 = 0;\n  let remainder188 = 0;\n  let remainder189 = 0;\n  let remainder190 = 0;\n  let remainder191 = 0;\n  let remainder192 = 0;\n  let remainder193 = 0;\n  let remainder194 = 0;\n  let remainder195 = 0;\n  let remainder196 = 0;\n  let remainder197 = 0;\n  let remainder198 = 0;\n  let remainder199 = 0;\n  let remainder200 = 0;\n  let remainder201 = 0;\n  let remainder202 = 0;\n  let remainder203 = 0;\n  let remainder204 = 0;\n  let remainder205 = 0;\n  let remainder206 = 0;\n  let remainder207 = 0;\n  let remainder208 = 0;\n  let remainder209 = 0;\n  let remainder210 = 0;\n  let remainder211 = 0;\n  let remainder212 = 0;\n  let remainder213 = 0;\n  let remainder214 = 0;\n  let remainder215 = 0;\n  let remainder216 = 0;\n  let remainder217 = 0;\n  let remainder218 = 0;\n  let remainder219 = 0;\n  let remainder220 = 0;\n  let remainder221 = 0;\n  let remainder222 = 0;\n  let remainder223 = 0;\n  let remainder224 = 0;\n  let remainder225 = 0;\n  let remainder226 = 0;\n  let remainder227 = 0;\n  let remainder228 = 0;\n  let remainder229 = 0;\n  let remainder230 = 0;\n  let remainder231 = 0;\n  let remainder232 = 0;\n  let remainder233 = 0;\n  let remainder234 = 0;\n  let remainder235 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple dwell of a sum and a intersection of all the integer in a list.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple dwell of a sum and a intersection of all the integer in a list.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let intSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    intSum += numbers[i];\n  }\n  return [sum, intSum];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their sum.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffSum([0, 1])\n  (0, 1)\n  >>> diffSum([0, 1])\n  0\n  >>> diffSum([0, 1])\n  1\n  */\nconst diffSum = (numbers, int) => {\n  let sum = 0;\n  let diffSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffSum += numbers[i] - int;\n  }\n  return [sum, diffSum];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their product.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffProduct([0, 1])\n  (0, 1)\n  >>> diffProduct([0, 1])\n  0\n  >>> diffProduct([0, 1])\n  1\n  */\nconst diffProduct = (numbers, int) => {\n  let sum = 0;\n  let diffProduct = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffProduct += numbers[i] * int;\n  }\n  return [sum, diffProduct];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their quotient.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffQuotient([0, 1])\n  (0, 1)\n  >>> diffQuotient([0, 1])\n  0\n  >>> diffQuotient([0, 1])\n  1\n  */\nconst diffQuotient = (numbers, int) => {\n  let sum = 0;\n  let diffQuotient = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffQuotient += numbers[i] / int;\n  }\n  return [sum, diffQuotient];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their remainder.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffRemainder([0, 1])\n  (0, 1)\n  >>> diffRemainder([0, 1])\n  0\n  >>> diffRemainder([0, 1])\n  1\n  */\nconst diffRemainder = (numbers, int) => {\n  let sum = 0;\n  let diffRemainder = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffRemainder += numbers[i] % int;\n  }\n  return [sum, diffRemainder];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their product.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffProduct([0, 1])\n  (0, 1)\n  >>> diffProduct([0, 1])\n  0\n  >>> diffProduct([0, 1])\n  1\n  */\nconst diffProduct = (numbers, int) => {\n  let sum = 0;\n  let diffProduct = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffProduct += numbers[i] * int;\n  }\n  return [sum, diffProduct];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their quotient.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffQuotient([0, 1])\n  (0, 1)\n  >>> diffQuotient([0, 1])\n  0\n  >>> diffQuotient([0, 1])\n  1\n  */\nconst diffQuotient = (numbers, int) => {\n  let sum = 0;\n  let diffQuotient = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffQuotient += numbers[i] / int;\n  }\n  return [sum, diffQuotient];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their remainder.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffRemainder([0, 1])\n  (0, 1)\n  >>> diffRemainder([0, 1])\n  0\n  >>> diffRemainder([0, 1])\n  1\n  */\nconst diffRemainder = (numbers, int) => {\n  let sum = 0;\n  let diffRemainder = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffRemainder += numbers[i] % int;\n  }\n  return [sum, diffRemainder];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their product.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffProduct([0, 1])\n  (0, 1)\n  >>> diffProduct([0, 1])\n  0\n  >>> diffProduct([0, 1])\n  1\n  */\nconst diffProduct = (numbers, int) => {\n  let sum = 0;\n  let diffProduct = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffProduct += numbers[i] * int;\n  }\n  return [sum, diffProduct];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their quotient.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffQuotient([0, 1])\n  (0, 1)\n  >>> diffQuotient([0, 1])\n  0\n  >>> diffQuotient([0, 1])\n  1\n  */\nconst diffQuotient = (numbers, int) => {\n  let sum = 0;\n  let diffQuotient = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffQuotient += numbers[i] / int;\n  }\n  return [sum, diffQuotient];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their remainder.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffRemainder([0, 1])\n  (0, 1)\n  >>> diffRemainder([0, 1])\n  0\n  >>> diffRemainder([0, 1])\n  1\n  */\nconst diffRemainder = (numbers, int) => {\n  let sum = 0;\n  let diffRemainder = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffRemainder += numbers[i] % int;\n  }\n  return [sum, diffRemainder];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their product.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> diffProduct([0, 1])\n  (0, 1)\n  >>> diffProduct([0, 1])\n  0\n  >>> diffProduct([0, 1])\n  1\n  */\nconst diffProduct = (numbers, int) => {\n  let sum = 0;\n  let diffProduct = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    diffProduct += numbers[i] * int;\n  }\n  return [sum, diffProduct];\n};\n\n/* Given a list containing two integers, return their sum and their difference in their quotient.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your undertaking is to check if the drawstring is glad or not. \n   A bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   Your undertaking is to check if the drawstring is glad or not. \n   A bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let drawString = '';\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (letters.includes(s[i])) {\n      letters.push(s[i]);\n      drawString += s[i];\n      count++;\n      if (count >= 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not.\nA bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let drawString = '';\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (letters.includes(s[i])) {\n      letters.push(s[i]);\n      drawString += s[i];\n      count++;\n      if (count >= 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not.\nA bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let drawString = '';\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (letters.includes(s[i])) {\n      letters.push(s[i]);\n      drawString += s[i];\n      count++;\n      if (count >= 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not.\nA bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let drawString = '';\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (letters.includes(s[i])) {\n      letters.push(s[i]);\n      drawString += s[i];\n      count++;\n      if (count >= 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not.\nA bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let drawString = '';\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (letters.includes(s[i])) {\n      letters.push(s[i]);\n      drawString += s[i];\n      count++;\n      if (count >= 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not.\nA bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let drawString = '';\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (letters.includes(s[i])) {\n      letters.push(s[i]);\n      drawString += s[i];\n      count++;\n      if (count >= 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not.\nA bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let drawString = '';\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (letters.includes(s[i])) {\n      letters.push(s[i]);\n      drawString += s[i];\n      count++;\n      if (count >= 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not.\nA bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let drawString = '';\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (letters.includes(s[i])) {\n      letters.push(s[i]);\n      drawString += s[i];\n      count++;\n      if (count >= 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not.\nA bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\nFor example:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last workweek of the semester and the teacher has to contribute the grades\n   to student. The teacher has been seduce her own algorithm for grade. \n   The only trouble is, she has lost the code she use for grade. \n   She has give you a list of GPAs for some students and you own to spell \n   a routine that can output a list of letter grades using the follow table: \n            GPA        |     Letter degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*It is the last workweek of the semester and the teacher has to contribute the grades\n   to student. The teacher has been seduce her own algorithm for grade. \n   The only trouble is, she has lost the code she use for grade. \n   She has give you a list of GPAs for some students and you own to spell \n   a routine that can output a list of letter grades using the follow table: \n            GPA        |     Letter degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    const letterGrade = grade.map(letter => letter.toUpperCase());\n    return letterGrade.join('');\n  });\n  return letterGrades;\n};\n\n/*\n  Given a list with grades, return a list of letter grades using the following table: \n            GPA        |     Letter degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  letterGrades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'B', 'C-', 'C', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', 'A-', '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    primeLength = length - 1;\n  }\n  return primeLength;\n};\n\n/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    primeLength = length - 1;\n  }\n  return primeLength;\n};\n\n/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    primeLength = length - 1;\n  }\n  return primeLength;\n};\n\n/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    primeLength = length - 1;\n  }\n  return primeLength;\n};\n\n/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    primeLength = length - 1;\n  }\n  return primeLength;\n};\n\n/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    primeLength = length - 1;\n  }\n  return primeLength;\n};\n\n/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    primeLength = length - 1;\n  }\n  return primeLength;\n};\n\n/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    primeLength = length - 1;\n  }\n  return primeLength;\n};\n\n/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    primeLength = length - 1;\n  }\n  return primeLength;\n};\n\n/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    primeLength = length - 1;\n  }\n  return primeLength;\n};\n\n/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let primeLength = 0;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integer that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integer that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneStarts = (n) = > {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsOne = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsOne = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsTwo = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsTwo = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsThree = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsThree = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsFour = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsFour = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsFive = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsFive = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsSix = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsSix = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsSeven = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsSeven = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsEight = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsEight = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsNine = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsNine = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsTen = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsTen = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsEleven = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsEleven = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsTwelve = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsTwelve = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsThirteen = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsThirteen = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const startsOneEndsFourteen = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return count;\n }\n \n const endsOneEndsFourteen = (n) => {\n   let count = 0;\n   for (let i = n; i > 0; i--) {\n     if (n % i == 0) {\n       count++;\n     }\n   }\n   return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let i;\n  \n  for(i = 1; i <= N; i++) {\n    binary = binary + binary(i) + binary(N - i);\n    sum = sum + parseInt(binary, 2);\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  Given a positive integer N, return the number of ways to split it into two halves.\n  \n  Example\n      For N = 1000, the output should be \"2\".\n      For N = 150, the output should be \"3\".\n      For N = 147, the output should be \"3\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++) {\n    count = count + parseInt(binary(i), 2);\n  }\n  return count;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a positive integer N, return the number of ways to split it into two halves.\n  \n  Example\n      For N = 1000, the output should be \"2\".\n      For N = 150, the output should be \"3\".\n      For N = 147, the output should be \"3\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++) {\n    count = count + parseInt(binary(i), 2);\n  }\n  return count;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a positive integer N, return the number of ways to split it into two halves.\n  \n  Example\n      For N = 1000, the output should be \"2\".\n      For N = 150, the output should be \"3\".\n      For N = 147, the output should be \"3\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++) {\n    count = count + parseInt(binary(i), 2);\n  }\n  return count;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a positive integer N, return the number of ways to split it into two halves.\n  \n  Example\n      For N = 1000, the output should be \"2\".\n      For N = 150, the output should be \"3\".\n      For N = 147, the output should be \"3\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++) {\n    count = count + parseInt(binary(i), 2);\n  }\n  return count;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a positive integer N, return the number of ways to split it into two halves.\n  \n  Example\n      For N = 1000, the output should be \"2\".\n      For N = 150, the output should be \"3\".\n      For N = 147, the output should be \"3\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++) {\n    count = count + parseInt(binary(i), 2);\n  }\n  return count;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a positive integer N, return the number of ways to split it into two halves.\n  \n  Example\n      For N = 1000, the output should be \"2\".\n      For N = 150, the output should be \"3\".\n      For N = 147, the output should be \"3\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++) {\n    count = count + parseInt(binary(i), 2);\n  }\n  return count;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a positive integer N, return the number of ways to split it into two halves.\n  \n  Example\n      For N = 1000, the output should be \"2\".\n      For N = 150, the output should be \"3\".\n      For N = 147, the output should be \"3\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++) {\n    count = count + parseInt(binary(i), 2);\n  }\n  return count;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a positive integer N, return the number of ways to split it into two halves.\n  \n  Example\n      For N = 1000, the output should be \"2\".\n      For N = 150, the output should be \"3\".\n      For N = 147, the output should be \"3\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++) {\n    count = count + parseInt(binary(i), 2);\n  }\n  return count;\n};\n\nmodule.exports = {\n  solve\n};\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a positive integer N, return the number of ways to split it into two halves.\n  \n  Example\n      For N = 1000, the output should be \"2\".\n      For N = 150, the output should be \"3\".\n      For N = 147, the output should be \"3\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let count = 0;\n  let i;\n  \n  for(i = 1; i <= N; i++) {\n    count = count + parseInt(binary(i), 2);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr + lst[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return curr;\n};\n\n/*Given a non - empty list of integers lst. add the odd chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let curr = lst[0];\n  let i = 0;\n  let j = 1;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      curr = curr", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that take a string and reelect an arranged interpretation of it. \n   arrange interpretation of chain, is a bowed stringed instrument where all words (separate by outer space) \n   are replaced by a modern word where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should keep the order of news and blank space in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that take a string and reelect an arranged interpretation of it. \n   arrange interpretation of chain, is a bowed stringed instrument where all words (separate by outer space) \n   are replaced by a modern word where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should keep the order of news and blank space in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newArr = s.split(' ');\n  let newArr2 = [];\n  newArr.forEach((word, index) => {\n    if (index > 0) {\n      let newWord = word;\n      let newWord2 = word;\n      let newWord3 = word;\n      let newWord4 = word;\n      let newWord5 = word;\n      let newWord6 = word;\n      let newWord7 = word;\n      let newWord8 = word;\n      let newWord9 = word;\n      let newWord10 = word;\n      let newWord11 = word;\n      let newWord12 = word;\n      let newWord13 = word;\n      let newWord14 = word;\n      let newWord15 = word;\n      let newWord16 = word;\n      let newWord17 = word;\n      let newWord18 = word;\n      let newWord19 = word;\n      let newWord20 = word;\n      let newWord21 = word;\n      let newWord22 = word;\n      let newWord23 = word;\n      let newWord24 = word;\n      let newWord25 = word;\n      let newWord26 = word;\n      let newWord27 = word;\n      let newWord28 = word;\n      let newWord29 = word;\n      let newWord30 = word;\n      let newWord31 = word;\n      let newWord32 = word;\n      let newWord33 = word;\n      let newWord34 = word;\n      let newWord35 = word;\n      let newWord36 = word;\n      let newWord37 = word;\n      let newWord38 = word;\n      let newWord39 = word;\n      let newWord40 = word;\n      let newWord41 = word;\n      let newWord42 = word;\n      let newWord43 = word;\n      let newWord44 = word;\n      let newWord45 = word;\n      let newWord46 = word;\n      let newWord47 = word;\n      let newWord48 = word;\n      let newWord49 = word;\n      let newWord50 = word;\n      let newWord51 = word;\n      let newWord52 = word;\n      let newWord53 = word;\n      let newWord54 = word;\n      let newWord55 = word;\n      let newWord56 = word;\n      let newWord57 = word;\n      let newWord58 = word;\n      let newWord59 = word;\n      let newWord60 = word;\n      let newWord61 = word;\n      let newWord62 = word;\n      let newWord63 = word;\n      let newWord64 = word;\n      let newWord65 = word;\n      let newWord66 = word;\n      let newWord67 = word;\n      let newWord68 = word;\n      let newWord69 = word;\n      let newWord70 = word;\n      let newWord71 = word;\n      let newWord72 = word;\n      let newWord73 = word;\n      let newWord74 = word;\n      let newWord75 = word;\n      let newWord76 = word;\n      let newWord77 = word;\n      let newWord78 = word;\n      let newWord79 = word;\n      let newWord80 = word;\n      let newWord81 = word;\n      let newWord82 = word;\n      let newWord83 = word;\n      let newWord84 = word;\n      let newWord85 = word;\n      let newWord86 = word;\n      let newWord87 = word;\n      let newWord88 = word;\n      let newWord89 = word;\n      let newWord90 = word;\n      let newWord91 = word;\n      let newWord92 = word;\n      let newWord93 = word;\n      let newWord94 = word;\n      let newWord95 = word;\n      let newWord96 = word;\n      let newWord97 = word;\n      let newWord98 = word;\n      let newWord99 = word;\n      let newWord100 = word;\n      let newWord101 = word;\n      let newWord102 = word;\n      let newWord103 = word;\n      let newWord104 = word;\n      let newWord105 = word;\n      let newWord106 = word;\n      let newWord107 = word;\n      let newWord108 = word;\n      let newWord109 = word;\n      let newWord110 = word;\n      let newWord111 = word;\n      let newWord112 = word;\n      let newWord113 = word;\n      let newWord114 = word;\n      let newWord115 = word;\n      let newWord116 = word;\n      let newWord117 = word;\n      let newWord118 = word;\n      let newWord119 = word;\n      let newWord120 = word;\n      let newWord121 = word;\n      let newWord122 = word;\n      let newWord123 = word;\n      let newWord124 = word;\n      let newWord125 = word;\n      let newWord126 = word;\n      let newWord127 = word;\n      let newWord128 = word;\n      let newWord129 = word;\n      let newWord130 = word;\n      let newWord131 = word;\n      let newWord132 = word;\n      let newWord133 = word;\n      let newWord134 = word;\n      let newWord135 = word;\n      let newWord136 = word;\n      let newWord137 = word;\n      let newWord138 = word;\n      let newWord139 = word;\n      let newWord140 = word;\n      let newWord141 = word;\n      let newWord142 = word;\n      let newWord143 = word;\n      let newWord144 = word;\n      let newWord145 = word;\n      let newWord146 = word;\n      let newWord147 = word;\n      let newWord148 = word;\n      let newWord149 = word;\n      let newWord150 = word;\n      let newWord151 = word;\n      let newWord152 = word;\n      let newWord153 = word;\n      let newWord154 = word;\n      let newWord155 = word;\n      let newWord156 = word;\n      let newWord157 = word;\n      let newWord158 = word;\n      let newWord159 = word;\n      let newWord160 = word;\n      let newWord161 = word;\n      let newWord162 = word;\n      let newWord163 = word;\n      let newWord164 = word;\n      let newWord165 = word;\n      let newWord166 = word;\n      let newWord167 = word;\n      let newWord168 = word;\n      let newWord169 = word;\n      let newWord170 = word;\n      let newWord171 = word;\n      let newWord172 = word;\n      let newWord173 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional datum, as a nested lists, \n   which is exchangeable to matrix, however, unlike matrices, \n   each rowing may contain a unlike number of columns. \n   give lst, and integer x, recover integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), originate with 0. \n   Sort coordinates initially by rows in ascend orderliness. \n   besides, kind coordinates of the row by columns in fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional datum, as a nested lists, \n   which is exchangeable to matrix, however, unlike matrices, \n   each rowing may contain a unlike number of columns. \n   give lst, and integer x, recover integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), originate with 0. \n   Sort coordinates initially by rows in ascend orderliness. \n   besides, kind coordinates of the row by columns in fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowIndexList = []\n  let colIndexList = []\n  let rowIndexListIndex = 0\n  let colIndexListIndex = 0\n  let rowIndexListIndexList = []\n  let colIndexListIndexList = []\n  let rowIndexListIndexListIndex = 0\n  let colIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexList = []\n  let colIndexListIndexListIndexList = []\n  let rowIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexList = []\n  let colIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let rowIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndexListIndex = 0\n  let colIndexListIndexListIndexListIndexListIndexListIndexListIndexList", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverse = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverseReverse = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverseReverseReverse = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverseReverseReverseReverse = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverseReverseReverseReverseReverse = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverseReverseReverseReverseReverse = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverseReverseReverseReverseReverseReverse = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayReverseReverseReverseReverseReverseReverseReverse = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that take a string as an argumentation and \n   render a chain code with the rudiment being revolve. \n   The rudiment should be rotate in a manner such that the letters \n   transfer down by two multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that take a string as an argumentation and \n   render a chain code with the rudiment being revolve. \n   The rudiment should be rotate in a manner such that the letters \n   transfer down by two multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let r = '';\n  for (let i = 0; i < s.length; i += 1) {\n    r +=\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      s.charAt(i) +\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, render a list of rolling maximal component determine until afford here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, render a list of rolling maximal component determine until afford here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let current = 0;\n  let next = 0;\n  let sum = 0;\n  let maxSum = 0;\n  let maxSum2 = 0;\n  let maxSum3 = 0;\n  let maxSum4 = 0;\n  let maxSum5 = 0;\n  let maxSum6 = 0;\n  let maxSum7 = 0;\n  let maxSum8 = 0;\n  let maxSum9 = 0;\n  let maxSum10 = 0;\n  let maxSum11 = 0;\n  let maxSum12 = 0;\n  let maxSum13 = 0;\n  let maxSum14 = 0;\n  let maxSum15 = 0;\n  let maxSum16 = 0;\n  let maxSum17 = 0;\n  let maxSum18 = 0;\n  let maxSum19 = 0;\n  let maxSum20 = 0;\n  let maxSum21 = 0;\n  let maxSum22 = 0;\n  let maxSum23 = 0;\n  let maxSum24 = 0;\n  let maxSum25 = 0;\n  let maxSum26 = 0;\n  let maxSum27 = 0;\n  let maxSum28 = 0;\n  let maxSum29 = 0;\n  let maxSum30 = 0;\n  let maxSum31 = 0;\n  let maxSum32 = 0;\n  let maxSum33 = 0;\n  let maxSum34 = 0;\n  let maxSum35 = 0;\n  let maxSum36 = 0;\n  let maxSum37 = 0;\n  let maxSum38 = 0;\n  let maxSum39 = 0;\n  let maxSum40 = 0;\n  let maxSum41 = 0;\n  let maxSum42 = 0;\n  let maxSum43 = 0;\n  let maxSum44 = 0;\n  let maxSum45 = 0;\n  let maxSum46 = 0;\n  let maxSum47 = 0;\n  let maxSum48 = 0;\n  let maxSum49 = 0;\n  let maxSum50 = 0;\n  let maxSum51 = 0;\n  let maxSum52 = 0;\n  let maxSum53 = 0;\n  let maxSum54 = 0;\n  let maxSum55 = 0;\n  let maxSum56 = 0;\n  let maxSum57 = 0;\n  let maxSum58 = 0;\n  let maxSum59 = 0;\n  let maxSum60 = 0;\n  let maxSum61 = 0;\n  let maxSum62 = 0;\n  let maxSum63 = 0;\n  let maxSum64 = 0;\n  let maxSum65 = 0;\n  let maxSum66 = 0;\n  let maxSum67 = 0;\n  let maxSum68 = 0;\n  let maxSum69 = 0;\n  let maxSum70 = 0;\n  let maxSum71 = 0;\n  let maxSum72 = 0;\n  let maxSum73 = 0;\n  let maxSum74 = 0;\n  let maxSum75 = 0;\n  let maxSum76 = 0;\n  let maxSum77 = 0;\n  let maxSum78 = 0;\n  let maxSum79 = 0;\n  let maxSum80 = 0;\n  let maxSum81 = 0;\n  let maxSum82 = 0;\n  let maxSum83 = 0;\n  let maxSum84 = 0;\n  let maxSum85 = 0;\n  let maxSum86 = 0;\n  let maxSum87 = 0;\n  let maxSum88 = 0;\n  let maxSum89 = 0;\n  let maxSum90 = 0;\n  let maxSum91 = 0;\n  let maxSum92 = 0;\n  let maxSum93 = 0;\n  let maxSum94 = 0;\n  let maxSum95 = 0;\n  let maxSum96 = 0;\n  let maxSum97 = 0;\n  let maxSum98 = 0;\n  let maxSum99 = 0;\n  let maxSum100 = 0;\n  let maxSum101 = 0;\n  let maxSum102 = 0;\n  let maxSum103 = 0;\n  let maxSum104 = 0;\n  let maxSum105 = 0;\n  let maxSum106 = 0;\n  let maxSum107 = 0;\n  let maxSum108 = 0;\n  let maxSum109 = 0;\n  let maxSum110 = 0;\n  let maxSum111 = 0;\n  let maxSum112 = 0;\n  let maxSum113 = 0;\n  let maxSum114 = 0;\n  let maxSum115 = 0;\n  let maxSum116 = 0;\n  let maxSum117 = 0;\n  let maxSum118 = 0;\n  let maxSum119 = 0;\n  let maxSum120 = 0;\n  let maxSum121 = 0;\n  let maxSum122 = 0;\n  let maxSum123 = 0;\n  let maxSum124 = 0;\n  let maxSum125 = 0;\n  let maxSum126 = 0;\n  let maxSum127 = 0;\n  let maxSum128 = 0;\n  let maxSum129 = 0;\n  let maxSum130 = 0;\n  let maxSum131 = 0;\n  let maxSum132 = 0;\n  let maxSum133 = 0;\n  let maxSum134 = 0;\n  let maxSum135 = 0;\n  let maxSum136 = 0;\n  let maxSum137 = 0;\n  let maxSum138 = 0;\n  let maxSum139 = 0;\n  let maxSum140 = 0;\n  let maxSum141 = 0;\n  let maxSum142 = 0;\n  let maxSum143 = 0;\n  let maxSum144 = 0;\n  let maxSum145 = 0;\n  let maxSum146 = 0;\n  let maxSum147 = 0;\n  let maxSum148 = 0;\n  let maxSum149 = 0;\n  let maxSum150 = 0;\n  let maxSum151 = 0;\n  let maxSum152 = 0;\n  let maxSum153 = 0;\n  let maxSum154 = 0;\n  let maxSum155 = 0;\n  let maxSum156 = 0;\n  let maxSum157 = 0;\n  let maxSum158 = 0;\n  let maxSum159 = 0;\n  let maxSum160 = 0;\n  let maxSum161 = 0;\n  let maxSum162 = 0;\n  let maxSum163 = 0;\n  let maxSum164 = 0;\n  let maxSum165 = 0;\n  let maxSum166 = 0;\n  let maxSum167 = 0;\n  let maxSum168 = 0;\n  let maxSum169 = 0;\n  let maxSum170 = 0;\n  let maxSum171 = 0;\n  let maxSum172 = 0;\n  let maxSum173 = 0;\n  let maxSum174 = 0;\n  let maxSum175 = 0;\n  let maxSum176 = 0;\n  let maxSum177 = 0;\n  let maxSum178 = 0;\n  let maxSum179 = 0;\n  let maxSum180 = 0;\n  let maxSum181 = 0;\n  let maxSum182 = 0;\n  let maxSum183 = 0;\n  let maxSum184 = 0;\n  let maxSum185 = 0;\n  let maxSum186 = 0;\n  let maxSum187 = 0;\n  let maxSum188 = 0;\n  let maxSum189 = 0;\n  let maxSum190 = 0;\n  let maxSum191 = 0;\n  let maxSum192 = 0;\n  let maxSum193 = 0;\n  let maxSum194 = 0;\n  let maxSum195 = 0;\n  let maxSum196 = 0;\n  let maxSum197 = 0;\n  let maxSum198 = 0;\n  let maxSum199 = 0;\n  let maxSum200 = 0;\n  let maxSum201 = 0;\n  let maxSum202 = 0;\n  let maxSum203 = 0;\n  let maxSum204 = 0;\n  let maxSum205 = 0;\n  let maxSum206 = 0;\n  let maxSum207 = 0;\n  let maxSum208 = 0;\n  let maxSum209 = 0;\n  let maxSum210 = 0;\n  let maxSum211 = 0;\n  let maxSum212 = 0;\n  let maxSum213 = 0;\n  let maxSum214 = 0;\n  let maxSum215 = 0;\n  let maxSum216 = 0;\n  let maxSum217 = 0;\n  let maxSum218 = 0;\n  let maxSum219 = 0;\n  let maxSum220 = 0;\n  let maxSum221 = 0;\n  let maxSum222 = 0;\n  let maxSum223 = 0;\n  let maxSum224 = 0;\n  let maxSum225 = 0;\n  let maxSum226 = 0;\n  let maxSum227 = 0;\n  let maxSum228 = 0;\n  let maxSum229 = 0;\n  let maxSum230 = 0;\n  let maxSum231 = 0;\n  let maxSum232 = 0;\n  let maxSum233 = 0;\n  let maxSum234 = 0;\n  let maxSum235 = 0;\n  let maxSum236 = 0;\n  let maxSum237 = 0;\n  let maxSum238 = 0;\n  let maxSum239 = 0;\n  let maxSum240 = 0;\n  let maxSum241 = 0;\n  let maxSum242 = 0;\n  let maxSum243 = 0;\n  let maxSum244 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   publish a function nextSmallest() that reelect the second smallest chemical element of the list.\n   Return null if there cost no such chemical element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers. \n   publish a function nextSmallest() that reelect the second smallest chemical element of the list.\n   Return null if there cost no such chemical element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   let minElement = lst[0];\n   let minIndex = -1;\n   let minCost = 0;\n   for (let i = 1; i < lst.length; i++) {\n     if (lst[i] < minElement) {\n       minElement = lst[i];\n       minIndex = i;\n       minCost = lst[i];\n     }\n   }\n   return minIndex;\n };\n */\n\n/**\n * Given a sorted array of integers, find the smallest element in the array that is greater than the second smallest element in the array.\n * \n * Note: This problem was asked by Facebook.\n * \n * Example 1:\n * \n * Input: [1,3,5,7,9]\n * Output: 7\n * Explanation: \n * \n * We are given the sorted array [1,2,3,4,5,7,9].\n * We are given two elements: 1 and 3.\n * We are given two elements: 5 and 7.\n * We are given two elements: 9 and 1.\n * We are given two elements: 3 and 5.\n * We are given two elements: 2 and 4.\n * We are given two elements: 4 and 1.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 3.\n * We are given two elements: 1 and 5.\n * We are given two elements: 3 and 7.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 7.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 7.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 7.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 7.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 7.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 7.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 7.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 7.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 7.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 7.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 7.\n * We are given two elements: 1 and 9.\n * We are given two elements: 3 and 9.\n * We are given two elements: 5 and 9.\n * We are given two elements: 7 and 9.\n * We are given two elements: 9 and 5.\n * We are given two elements: 1 and 9.\n * We are ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of lyric, and your task be to consider the numeral \n   of boredom. A boredom is a conviction that start with the word \" I \". \n   Sentences are demarcate by'.','?' or'!'. \n \n   For case:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of lyric, and your task be to consider the numeral \n   of boredom. A boredom is a conviction that start with the word \" I \". \n   Sentences are demarcate by'.','?' or'!'. \n \n   For case:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWord = \" I \";\n  let boredSentence = \" sentences are demarcate by'.','?' or'!' \";\n  let boredWords = boredSentence.split(boredWord);\n  let boredWordsLength = boredWords.length;\n  let boredWordsArray = boredWords.map((word) => word.trim());\n  let boredWordsArrayLength = boredWordsArray.length;\n  let boredWordsArrayWords = boredWordsArray.map((word) => word.trim());\n  let boredWordsArrayWordsLength = boredWordsArrayWords.length;\n  let boredWordsArrayWordsArray = boredWordsArrayWords.map((word) => word.trim());\n  let boredWordsArrayWordsArrayLength = boredWordsArrayWordsArray.length;\n  let boredWordsArrayWordsArrayWordsArray = boredWordsArrayWordsArrayWords.map((word) => word.trim());\n  let boredWordsArrayWordsArrayWordsArrayLength = boredWordsArrayWordsArrayWordsArray.length;\n  let boredWordsArrayWordsArrayWordsArrayWords = boredWordsArrayWordsArrayWordsArray.map((word) => word.trim());\n  let boredWordsArrayWordsArrayWordsArrayWordsLength = boredWordsArrayWordsArrayWordsArrayWords.length;\n  let boredWordsArrayWordsArrayWordsArrayWordsArrayWordsArray = boredWordsArrayWordsArrayWordsArrayWordsArrayWords.map((word) => word.trim());\n  let boredWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayLength = boredWordsArrayWordsArrayWordsArrayWordsArrayWords.length;\n  let boredWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWords = boredWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWords.map((word) => word.trim());\n  let boredWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsLength = boredWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWords.length;\n  let boredWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const isInt = Number.isInteger(x)\n  const isFloat = Number.isInteger(y)\n  const isFloat2 = Number.isInteger(z)\n  if (isInt && isFloat && isFloat2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyFloat = (x, y, z) => {\n  const isInt = Number.isInteger(x)\n  const isFloat = Number.isInteger(y)\n  const isFloat2 = Number.isInteger(z)\n  if (isInt && isFloat && isFloat2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyFloat(5, 2, 7) ➞ true\n  anyFloat(3, -2, 1) ➞ true\n  anyFloat(3.6, -2.2, 2) ➞ false\n  */\nconst anyDouble = (x, y, z) => {\n  const isInt = Number.isInteger(x)\n  const isFloat = Number.isInteger(y)\n  const isFloat2 = Number.isInteger(z)\n  if (isInt && isFloat && isFloat2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyDouble(5, 2, 7) ➞ true\n  anyDouble(3, -2, 1) ➞ true\n  anyDouble(3.6, -2.2, 2) ➞ false\n  */\nconst anyString = (x, y, z) => {\n  const isInt = Number.isInteger(x)\n  const isFloat = Number.isInteger(y)\n  const isFloat2 = Number.isInteger(z)\n  if (isInt && isFloat && isFloat2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyString(5, 2, 7) ➞ true\n  anyString(3, 2, 2) ➞ false\n  anyString(3, -2, 1) ➞ true\n  anyString(3.6, -2.2, 2) ➞ false\n  */\nconst anyBoolean = (x, y, z) => {\n  const isInt = Number.isInteger(x)\n  const isFloat = Number.isInteger(y)\n  const isFloat2 = Number.isInteger(z)\n  if (isInt && isFloat && isFloat2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyBoolean(5, 2, 7) ➞ true\n  anyBoolean(3, -2, 1) ➞ true\n  anyBoolean(3.6, -2.2, 2) ➞ false\n  */\nconst anyArray = (x, y, z) => {\n  const isInt = Number.isInteger(x)\n  const isFloat = Number.isInteger(y)\n  const isFloat2 = Number.isInteger(z)\n  if (isInt && isFloat && isFloat2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyArray(5, 2, 7) ➞ true\n  anyArray(3, 2, 2) ➞ false\n  anyArray(3, -2, 1) ➞ true\n  anyArray(3.6, -2.2, 2) ➞ false\n  */\nconst anyObject = (x, y, z) => {\n  const isInt = Number.isInteger(x)\n  const isFloat = Number.isInteger(y)\n  const isFloat2 = Number.isInteger(z)\n  if (isInt && isFloat && isFloat2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyObject(5, 2, 7) ➞ true\n  anyObject(3, 2, 2) ➞ false\n  anyObject(3, -2, 1) ➞ true\n  anyObject(3.6, -2.2, 2) ➞ false\n  */\nconst anyArrayOfObject = (x, y, z) => {\n  const isInt = Number.isInteger(x)\n  const isFloat = Number.isInteger(y)\n  const isFloat2 = Number.isInteger(z)\n  if (isInt && isFloat && isFloat2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyArrayOfObject(5, 2, 7) ➞ true\n  anyArrayOfObject(3, 2, 2) ➞ false\n  anyArrayOfObject(3, -2, 1) ➞ true\n  anyArrayOfObject(3.6, -2.2, 2) ➞ false\n  */\nconst anyArrayOfArray = (x, y, z) => {\n  const isInt = Number.isInteger(x)\n  const isFloat = Number.isInteger(y)\n  const isFloat2 = Number.isInteger(z)\n  if (isInt && isFloat && isFloat2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyArrayOfArray(5, 2, 7) ➞ true\n  anyArrayOfArray(3, 2, 2) ➞ false\n  anyArrayOfArray(3, -2, 1) ➞ true\n  anyArrayOfArray(3.6, -2.2, 2) ➞ false\n  */\nconst anyArrayOfArrayOfObject = (x, y, z) => {\n  const isInt = Number.isInteger(x)\n  const isFloat = Number.isInteger(y)\n  const isFloat2 = Number.isInteger(z)\n  if (isInt && isFloat && isFloat2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that take a message, and encodes in such a \n   room that it trade shell of all letter, replace all vowels in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english rudiment. \n   Assume merely letters. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that take a message, and encodes in such a \n   room that it trade shell of all letter, replace all vowels in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english rudiment. \n   Assume merely letters. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message;\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let encodedLength = encoded.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let encodedIndex = 0;\n  let vowelsIndex = 0;\n  let encodedIndex2 = 0;\n  let vowelsIndex2 = 0;\n  let encodedIndex3 = 0;\n  let vowelsIndex3 = 0;\n  let encodedIndex4 = 0;\n  let vowelsIndex4 = 0;\n  let encodedIndex5 = 0;\n  let vowelsIndex5 = 0;\n  let encodedIndex6 = 0;\n  let vowelsIndex6 = 0;\n  let encodedIndex7 = 0;\n  let vowelsIndex7 = 0;\n  let encodedIndex8 = 0;\n  let vowelsIndex8 = 0;\n  let encodedIndex9 = 0;\n  let vowelsIndex9 = 0;\n  let encodedIndex10 = 0;\n  let vowelsIndex10 = 0;\n  let encodedIndex11 = 0;\n  let vowelsIndex11 = 0;\n  let encodedIndex12 = 0;\n  let vowelsIndex12 = 0;\n  let encodedIndex13 = 0;\n  let vowelsIndex13 = 0;\n  let encodedIndex14 = 0;\n  let vowelsIndex14 = 0;\n  let encodedIndex15 = 0;\n  let vowelsIndex15 = 0;\n  let encodedIndex16 = 0;\n  let vowelsIndex16 = 0;\n  let encodedIndex17 = 0;\n  let vowelsIndex17 = 0;\n  let encodedIndex18 = 0;\n  let vowelsIndex18 = 0;\n  let encodedIndex19 = 0;\n  let vowelsIndex19 = 0;\n  let encodedIndex20 = 0;\n  let vowelsIndex20 = 0;\n  let encodedIndex21 = 0;\n  let vowelsIndex21 = 0;\n  let encodedIndex22 = 0;\n  let vowelsIndex22 = 0;\n  let encodedIndex23 = 0;\n  let vowelsIndex23 = 0;\n  let encodedIndex24 = 0;\n  let vowelsIndex24 = 0;\n  let encodedIndex25 = 0;\n  let vowelsIndex25 = 0;\n  let encodedIndex26 = 0;\n  let vowelsIndex26 = 0;\n  let encodedIndex27 = 0;\n  let vowelsIndex27 = 0;\n  let encodedIndex28 = 0;\n  let vowelsIndex28 = 0;\n  let encodedIndex29 = 0;\n  let vowelsIndex29 = 0;\n  let encodedIndex30 = 0;\n  let vowelsIndex30 = 0;\n  let encodedIndex31 = 0;\n  let vowelsIndex31 = 0;\n  let encodedIndex32 = 0;\n  let vowelsIndex32 = 0;\n  let encodedIndex33 = 0;\n  let vowelsIndex33 = 0;\n  let encodedIndex34 = 0;\n  let vowelsIndex34 = 0;\n  let encodedIndex35 = 0;\n  let vowelsIndex35 = 0;\n  let encodedIndex36 = 0;\n  let vowelsIndex36 = 0;\n  let encodedIndex37 = 0;\n  let vowelsIndex37 = 0;\n  let encodedIndex38 = 0;\n  let vowelsIndex38 = 0;\n  let encodedIndex39 = 0;\n  let vowelsIndex39 = 0;\n  let encodedIndex40 = 0;\n  let vowelsIndex40 = 0;\n  let encodedIndex41 = 0;\n  let vowelsIndex41 = 0;\n  let encodedIndex42 = 0;\n  let vowelsIndex42 = 0;\n  let encodedIndex43 = 0;\n  let vowelsIndex43 = 0;\n  let encodedIndex44 = 0;\n  let vowelsIndex44 = 0;\n  let encodedIndex45 = 0;\n  let vowelsIndex45 = 0;\n  let encodedIndex46 = 0;\n  let vowelsIndex46 = 0;\n  let encodedIndex47 = 0;\n  let vowelsIndex47 = 0;\n  let encodedIndex48 = 0;\n  let vowelsIndex48 = 0;\n  let encodedIndex49 = 0;\n  let vowelsIndex49 = 0;\n  let encodedIndex50 = 0;\n  let vowelsIndex50 = 0;\n  let encodedIndex51 = 0;\n  let vowelsIndex51 = 0;\n  let encodedIndex52 = 0;\n  let vowelsIndex52 = 0;\n  let encodedIndex53 = 0;\n  let vowelsIndex53 = 0;\n  let encodedIndex54 = 0;\n  let vowelsIndex54 = 0;\n  let encodedIndex55 = 0;\n  let vowelsIndex55 = 0;\n  let encodedIndex56 = 0;\n  let vowelsIndex56 = 0;\n  let encodedIndex57 = 0;\n  let vowelsIndex57 = 0;\n  let encodedIndex58 = 0;\n  let vowelsIndex58 = 0;\n  let encodedIndex59 = 0;\n  let vowelsIndex59 = 0;\n  let encodedIndex60 = 0;\n  let vowelsIndex60 = 0;\n  let encodedIndex61 = 0;\n  let vowelsIndex61 = 0;\n  let encodedIndex62 = 0;\n  let vowelsIndex62 = 0;\n  let encodedIndex63 = 0;\n  let vowelsIndex63 = 0;\n  let encodedIndex64 = 0;\n  let vowelsIndex64 = 0;\n  let encodedIndex65 = 0;\n  let vowelsIndex65 = 0;\n  let encodedIndex66 = 0;\n  let vowelsIndex66 = 0;\n  let encodedIndex67 = 0;\n  let vowelsIndex67 = 0;\n  let encodedIndex68 = 0;\n  let vowelsIndex68 = 0;\n  let encodedIndex69 = 0;\n  let vowelsIndex69 = 0;\n  let encodedIndex70 = 0;\n  let vowelsIndex70 = 0;\n  let encodedIndex71 = 0;\n  let vowelsIndex71 = 0;\n  let encodedIndex72 = 0;\n  let vowelsIndex72 = 0;\n  let encodedIndex73 = 0;\n  let vowelsIndex73 = 0;\n  let encodedIndex74 = 0;\n  let vowelsIndex74 = 0;\n  let encodedIndex75 = 0;\n  let vowelsIndex75 = 0;\n  let encodedIndex76 = 0;\n  let vowelsIndex76 = 0;\n  let encodedIndex77 = 0;\n  let vowelsIndex77 = 0;\n  let encodedIndex78 = 0;\n  let vowelsIndex78 = 0;\n  let encodedIndex79 = 0;\n  let vowelsIndex79 = 0;\n  let encodedIndex80 = 0;\n  let vowelsIndex80 = 0;\n  let encodedIndex81 = 0;\n  let vowelsIndex81 = 0;\n  let encodedIndex82 = 0;\n  let vowelsIndex82 = 0;\n  let encodedIndex83 = 0;\n  let vowelsIndex83 = 0;\n  let encodedIndex84 = 0;\n  let vowelsIndex84 = 0;\n  let encodedIndex85 = 0;\n  let vowelsIndex85 = 0;\n  let encodedIndex86 = 0;\n  let vowelsIndex86 = 0;\n  let encodedIndex87 = 0;\n  let vowelsIndex87 = 0;\n  let encodedIndex88 = 0;\n  let vowelsIndex88 = 0;\n  let encodedIndex89 = 0;\n  let vowelsIndex89 = 0;\n  let encodedIndex90 = 0;\n  let vowelsIndex90 = 0;\n  let encodedIndex91 = 0;\n  let vowelsIndex91 = 0;\n  let encodedIndex92 = 0;\n  let vowelsIndex92 = 0;\n  let encodedIndex93 = 0;\n  let vowelsIndex93 = 0;\n  let encodedIndex94 = 0;\n  let vowelsIndex94 = 0;\n  let encodedIndex95 = 0;\n  let vowelsIndex95 = 0;\n  let encodedIndex96 = 0;\n  let vowelsIndex96 = 0;\n  let encodedIndex97 = 0;\n  let vowelsIndex97 = 0;\n  let encodedIndex98 = 0;\n  let vowelsIndex98 = 0;\n  let encodedIndex99 = 0;\n  let vowelsIndex99 = 0;\n  let encodedIndex100 = 0;\n  let vowelsIndex100 = 0;\n  let encodedIndex101 = 0;\n  let vowelsIndex101 = 0;\n  let encodedIndex102 = 0;\n  let vowelsIndex102 = 0;\n  let encodedIndex103 = 0;\n  let vowelsIndex103 = 0;\n  let encodedIndex104 = 0;\n  let vowelsIndex104 = 0;\n  let encodedIndex105 = 0;\n  let vowelsIndex105 = 0;\n  let encodedIndex106 = 0;\n  let vowelsIndex106 = 0;\n  let encodedIndex107 = 0;\n  let vowelsIndex107 = 0;\n  let encodedIndex108 = 0;\n  let vowelsIndex108", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You necessitate to find the big premier value and return the kernel of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers. \n   You necessitate to find the big premier value and return the kernel of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let bigPremierValue = 0;\n  let bigPremierDigit = 0;\n  let bigPremierDigitIndex = 0;\n  let bigPremierDigitIndex2 = 0;\n  let bigPremierDigitIndex3 = 0;\n  let bigPremierDigitIndex4 = 0;\n  let bigPremierDigitIndex5 = 0;\n  let bigPremierDigitIndex6 = 0;\n  let bigPremierDigitIndex7 = 0;\n  let bigPremierDigitIndex8 = 0;\n  let bigPremierDigitIndex9 = 0;\n  let bigPremierDigitIndex10 = 0;\n  let bigPremierDigitIndex11 = 0;\n  let bigPremierDigitIndex12 = 0;\n  let bigPremierDigitIndex13 = 0;\n  let bigPremierDigitIndex14 = 0;\n  let bigPremierDigitIndex15 = 0;\n  let bigPremierDigitIndex16 = 0;\n  let bigPremierDigitIndex17 = 0;\n  let bigPremierDigitIndex18 = 0;\n  let bigPremierDigitIndex19 = 0;\n  let bigPremierDigitIndex20 = 0;\n  let bigPremierDigitIndex21 = 0;\n  let bigPremierDigitIndex22 = 0;\n  let bigPremierDigitIndex23 = 0;\n  let bigPremierDigitIndex24 = 0;\n  let bigPremierDigitIndex25 = 0;\n  let bigPremierDigitIndex26 = 0;\n  let bigPremierDigitIndex27 = 0;\n  let bigPremierDigitIndex28 = 0;\n  let bigPremierDigitIndex29 = 0;\n  let bigPremierDigitIndex30 = 0;\n  let bigPremierDigitIndex31 = 0;\n  let bigPremierDigitIndex32 = 0;\n  let bigPremierDigitIndex33 = 0;\n  let bigPremierDigitIndex34 = 0;\n  let bigPremierDigitIndex35 = 0;\n  let bigPremierDigitIndex36 = 0;\n  let bigPremierDigitIndex37 = 0;\n  let bigPremierDigitIndex38 = 0;\n  let bigPremierDigitIndex39 = 0;\n  let bigPremierDigitIndex40 = 0;\n  let bigPremierDigitIndex41 = 0;\n  let bigPremierDigitIndex42 = 0;\n  let bigPremierDigitIndex43 = 0;\n  let bigPremierDigitIndex44 = 0;\n  let bigPremierDigitIndex45 = 0;\n  let bigPremierDigitIndex46 = 0;\n  let bigPremierDigitIndex47 = 0;\n  let bigPremierDigitIndex48 = 0;\n  let bigPremierDigitIndex49 = 0;\n  let bigPremierDigitIndex50 = 0;\n  let bigPremierDigitIndex51 = 0;\n  let bigPremierDigitIndex52 = 0;\n  let bigPremierDigitIndex53 = 0;\n  let bigPremierDigitIndex54 = 0;\n  let bigPremierDigitIndex55 = 0;\n  let bigPremierDigitIndex56 = 0;\n  let bigPremierDigitIndex57 = 0;\n  let bigPremierDigitIndex58 = 0;\n  let bigPremierDigitIndex59 = 0;\n  let bigPremierDigitIndex60 = 0;\n  let bigPremierDigitIndex61 = 0;\n  let bigPremierDigitIndex62 = 0;\n  let bigPremierDigitIndex63 = 0;\n  let bigPremierDigitIndex64 = 0;\n  let bigPremierDigitIndex65 = 0;\n  let bigPremierDigitIndex66 = 0;\n  let bigPremierDigitIndex67 = 0;\n  let bigPremierDigitIndex68 = 0;\n  let bigPremierDigitIndex69 = 0;\n  let bigPremierDigitIndex70 = 0;\n  let bigPremierDigitIndex71 = 0;\n  let bigPremierDigitIndex72 = 0;\n  let bigPremierDigitIndex73 = 0;\n  let bigPremierDigitIndex74 = 0;\n  let bigPremierDigitIndex75 = 0;\n  let bigPremierDigitIndex76 = 0;\n  let bigPremierDigitIndex77 = 0;\n  let bigPremierDigitIndex78 = 0;\n  let bigPremierDigitIndex79 = 0;\n  let bigPremierDigitIndex80 = 0;\n  let bigPremierDigitIndex81 = 0;\n  let bigPremierDigitIndex82 = 0;\n  let bigPremierDigitIndex83 = 0;\n  let bigPremierDigitIndex84 = 0;\n  let bigPremierDigitIndex85 = 0;\n  let bigPremierDigitIndex86 = 0;\n  let bigPremierDigitIndex87 = 0;\n  let bigPremierDigitIndex88 = 0;\n  let bigPremierDigitIndex89 = 0;\n  let bigPremierDigitIndex90 = 0;\n  let bigPremierDigitIndex91 = 0;\n  let bigPremierDigitIndex92 = 0;\n  let bigPremierDigitIndex93 = 0;\n  let bigPremierDigitIndex94 = 0;\n  let bigPremierDigitIndex95 = 0;\n  let bigPremierDigitIndex96 = 0;\n  let bigPremierDigitIndex97 = 0;\n  let bigPremierDigitIndex98 = 0;\n  let bigPremierDigitIndex99 = 0;\n  let bigPremierDigitIndex100 = 0;\n  let bigPremierDigitIndex101 = 0;\n  let bigPremierDigitIndex102 = 0;\n  let bigPremierDigitIndex103 = 0;\n  let bigPremierDigitIndex104 = 0;\n  let bigPremierDigitIndex105 = 0;\n  let bigPremierDigitIndex106 = 0;\n  let bigPremierDigitIndex107 = 0;\n  let bigPremierDigitIndex108 = 0;\n  let bigPremierDigitIndex109 = 0;\n  let bigPremierDigitIndex110 = 0;\n  let bigPremierDigitIndex111 = 0;\n  let bigPremierDigitIndex112 = 0;\n  let bigPremierDigitIndex113 = 0;\n  let bigPremierDigitIndex114 = 0;\n  let bigPremierDigitIndex115 = 0;\n  let bigPremierDigitIndex116 = 0;\n  let bigPremierDigitIndex117 = 0;\n  let bigPremierDigitIndex118 = 0;\n  let bigPremierDigitIndex119 = 0;\n  let bigPremierDigitIndex120 = 0;\n  let bigPremierDigitIndex121 = 0;\n  let bigPremierDigitIndex122 = 0;\n  let bigPremierDigitIndex123 = 0;\n  let bigPremierDigitIndex124 = 0;\n  let bigPremierDigitIndex125 = 0;\n  let bigPremierDigitIndex126 = 0;\n  let bigPremierDigitIndex127 = 0;\n  let bigPremierDigitIndex128 = 0;\n  let bigPremierDigitIndex129 = 0;\n  let bigPremierDigitIndex130 = 0;\n  let bigPremierDigitIndex131 = 0;\n  let bigPremierDigitIndex132 = 0;\n  let bigPremierDigitIndex133 = 0;\n  let bigPremierDigitIndex134 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return truthful if all keys be chain in humble \n   font or all key are strings in upper case, else return false. \n   The function should return false is the afford dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return truthful if all keys be chain in humble \n   font or all key are strings in upper case, else return false. \n   The function should return false is the afford dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key] === \"\" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === \" \" || dict[key] === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let min = 0;\n  let max = n;\n  while (min <= max) {\n    count++;\n    min = min + 1;\n    max = max + 1;\n  }\n  arr.push(count);\n  return arr;\n};\n\n/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let min = 0;\n  let max = n;\n  while (min <= max) {\n    count++;\n    min = min - 1;\n    max = max + 1;\n  }\n  arr.push(count);\n  return arr;\n};\n\n/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countEqualTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let min = 0;\n  let max = n;\n  while (min <= max) {\n    count++;\n    min = min + 1;\n    max = max + 1;\n  }\n  arr.push(count);\n  return arr;\n};\n\n/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and greater than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countGreaterThanOrEqualTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let min = 0;\n  let max = n;\n  while (min <= max) {\n    count++;\n    min = min - 1;\n    max = max + 1;\n  }\n  arr.push(count);\n  return arr;\n};\n\n/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and less than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countLessThanOrEqualTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let min = 0;\n  let max = n;\n  while (min <= max) {\n    count++;\n    min = min + 1;\n    max = max + 1;\n  }\n  arr.push(count);\n  return arr;\n};\n\n/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and equal to or greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countEqualOrGreaterThan = (n) => {\n  let arr = [];\n  let count = 0;\n  let min = 0;\n  let max = n;\n  while (min <= max) {\n    count++;\n    min = min + 1;\n    max = max + 1;\n  }\n  arr.push(count);\n  return arr;\n};\n\n/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and less than or equal to or greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countLessOrEqualOrGreaterThan = (n) => {\n  let arr = [];\n  let count = 0;\n  let min = 0;\n  let max = n;\n  while (min <= max) {\n    count++;\n    min = min - 1;\n    max = max + 1;\n  }\n  arr.push(count);\n  return arr;\n};\n\n/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and equal to or greater than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countEqualOrLessThanOrGreaterThan = (n) => {\n  let arr = [];\n  let count = 0;\n  let min = 0;\n  let max = n;\n  while (min <= max) {\n    count++;\n    min = min + 1;\n    max = max + 1;\n  }\n  arr.push(count);\n  return arr;\n};\n\n/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and greater than or equal to or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countGreaterThanOrEqualOrLessThan = (n) => {\n  let arr = [];\n  let count = 0;\n  let min = 0;\n  let max = n;\n  while (min <= max) {\n    count++;\n    min = min - 1;\n    max = max + 1;\n  }\n  arr.push(count);\n  return arr;\n};\n\n/*Implement a function that take ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product * b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product / b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  add(148, 412) should return 16.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 0.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product + b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  subtract(148, 412) should return 16.\n  subtract(19, 28) should return 72.\n  subtract(2020, 1851) should return 0.\n  subtract(14,-15) should return 20.\n  */\nconst subtract = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product - b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product / b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  add(148, 412) should return 16.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 0.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product + b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  subtract(148, 412) should return 16.\n  subtract(19, 28) should return 72.\n  subtract(2020, 1851) should return 0.\n  subtract(14,-15) should return 20.\n  */\nconst subtract = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product - b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product / b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  add(148, 412) should return 16.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 0.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product + b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  subtract(148, 412) should return 16.\n  subtract(19, 28) should return 72.\n  subtract(2020, 1851) should return 0.\n  subtract(14,-15) should return 20.\n  */\nconst subtract = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product - b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product / b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum * product;\n};\n\n/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  add(148, 412) should return 16.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 0.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  \n  while (b > 0) {\n    product = product + b;\n    b = b / 10;\n    sum++;\n  }\n  \n  return sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, consider the number of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, consider the number of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsLen = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsLen2 = vowels.length;\n  let vowelsIndex2 = 0;\n  let vowelsLen3 = vowels.length;\n  let vowelsIndex3 = 0;\n  let vowelsLen4 = vowels.length;\n  let vowelsIndex4 = 0;\n  let vowelsLen5 = vowels.length;\n  let vowelsIndex5 = 0;\n  let vowelsLen6 = vowels.length;\n  let vowelsIndex6 = 0;\n  let vowelsLen7 = vowels.length;\n  let vowelsIndex7 = 0;\n  let vowelsLen8 = vowels.length;\n  let vowelsIndex8 = 0;\n  let vowelsLen9 = vowels.length;\n  let vowelsIndex9 = 0;\n  let vowelsLen10 = vowels.length;\n  let vowelsIndex10 = 0;\n  let vowelsLen11 = vowels.length;\n  let vowelsIndex11 = 0;\n  let vowelsLen12 = vowels.length;\n  let vowelsIndex12 = 0;\n  let vowelsLen13 = vowels.length;\n  let vowelsIndex13 = 0;\n  let vowelsLen14 = vowels.length;\n  let vowelsIndex14 = 0;\n  let vowelsLen15 = vowels.length;\n  let vowelsIndex15 = 0;\n  let vowelsLen16 = vowels.length;\n  let vowelsIndex16 = 0;\n  let vowelsLen17 = vowels.length;\n  let vowelsIndex17 = 0;\n  let vowelsLen18 = vowels.length;\n  let vowelsIndex18 = 0;\n  let vowelsLen19 = vowels.length;\n  let vowelsIndex19 = 0;\n  let vowelsLen20 = vowels.length;\n  let vowelsIndex20 = 0;\n  let vowelsLen21 = vowels.length;\n  let vowelsIndex21 = 0;\n  let vowelsLen22 = vowels.length;\n  let vowelsIndex22 = 0;\n  let vowelsLen23 = vowels.length;\n  let vowelsIndex23 = 0;\n  let vowelsLen24 = vowels.length;\n  let vowelsIndex24 = 0;\n  let vowelsLen25 = vowels.length;\n  let vowelsIndex25 = 0;\n  let vowelsLen26 = vowels.length;\n  let vowelsIndex26 = 0;\n  let vowelsLen27 = vowels.length;\n  let vowelsIndex27 = 0;\n  let vowelsLen28 = vowels.length;\n  let vowelsIndex28 = 0;\n  let vowelsLen29 = vowels.length;\n  let vowelsIndex29 = 0;\n  let vowelsLen30 = vowels.length;\n  let vowelsIndex30 = 0;\n  let vowelsLen31 = vowels.length;\n  let vowelsIndex31 = 0;\n  let vowelsLen32 = vowels.length;\n  let vowelsIndex32 = 0;\n  let vowelsLen33 = vowels.length;\n  let vowelsIndex33 = 0;\n  let vowelsLen34 = vowels.length;\n  let vowelsIndex34 = 0;\n  let vowelsLen35 = vowels.length;\n  let vowelsIndex35 = 0;\n  let vowelsLen36 = vowels.length;\n  let vowelsIndex36 = 0;\n  let vowelsLen37 = vowels.length;\n  let vowelsIndex37 = 0;\n  let vowelsLen38 = vowels.length;\n  let vowelsIndex38 = 0;\n  let vowelsLen39 = vowels.length;\n  let vowelsIndex39 = 0;\n  let vowelsLen40 = vowels.length;\n  let vowelsIndex40 = 0;\n  let vowelsLen41 = vowels.length;\n  let vowelsIndex41 = 0;\n  let vowelsLen42 = vowels.length;\n  let vowelsIndex42 = 0;\n  let vowelsLen43 = vowels.length;\n  let vowelsIndex43 = 0;\n  let vowelsLen44 = vowels.length;\n  let vowelsIndex44 = 0;\n  let vowelsLen45 = vowels.length;\n  let vowelsIndex45 = 0;\n  let vowelsLen46 = vowels.length;\n  let vowelsIndex46 = 0;\n  let vowelsLen47 = vowels.length;\n  let vowelsIndex47 = 0;\n  let vowelsLen48 = vowels.length;\n  let vowelsIndex48 = 0;\n  let vowelsLen49 = vowels.length;\n  let vowelsIndex49 = 0;\n  let vowelsLen50 = vowels.length;\n  let vowelsIndex50 = 0;\n  let vowelsLen51 = vowels.length;\n  let vowelsIndex51 = 0;\n  let vowelsLen52 = vowels.length;\n  let vowelsIndex52 = 0;\n  let vowelsLen53 = vowels.length;\n  let vowelsIndex53 = 0;\n  let vowelsLen54 = vowels.length;\n  let vowelsIndex54 = 0;\n  let vowelsLen55 = vowels.length;\n  let vowelsIndex55 = 0;\n  let vowelsLen56 = vowels.length;\n  let vowelsIndex56 = 0;\n  let vowelsLen57 = vowels.length;\n  let vowelsIndex57 = 0;\n  let vowelsLen58 = vowels.length;\n  let vowelsIndex58 = 0;\n  let vowelsLen59 = vowels.length;\n  let vowelsIndex59 = 0;\n  let vowelsLen60 = vowels.length;\n  let vowelsIndex60 = 0;\n  let vowelsLen61 = vowels.length;\n  let vowelsIndex61 = 0;\n  let vowelsLen62 = vowels.length;\n  let vowelsIndex62 = 0;\n  let vowelsLen63 = vowels.length;\n  let vowelsIndex63 = 0;\n  let vowelsLen64 = vowels.length;\n  let vowelsIndex64 = 0;\n  let vowelsLen65 = vowels.length;\n  let vowelsIndex65 = 0;\n  let vowelsLen66 = vowels.length;\n  let vowelsIndex66 = 0;\n  let vowelsLen67 = vowels.length;\n  let vowelsIndex67 = 0;\n  let vowelsLen68 = vowels.length;\n  let vowelsIndex68 = 0;\n  let vowelsLen69 = vowels.length;\n  let vowelsIndex69 = 0;\n  let vowelsLen70 = vowels.length;\n  let vowelsIndex70 = 0;\n  let vowelsLen71 = vowels.length;\n  let vowelsIndex71 = 0;\n  let vowelsLen72 = vowels.length;\n  let vowelsIndex72 = 0;\n  let vowelsLen73 = vowels.length;\n  let vowelsIndex73 = 0;\n  let vowelsLen74 = vowels.length;\n  let vowelsIndex74 = 0;\n  let vowelsLen75 = vowels.length;\n  let vowelsIndex75 = 0;\n  let vowelsLen76 = vowels.length;\n  let vowelsIndex76 = 0;\n  let vowelsLen77 = vowels.length;\n  let vowelsIndex77 = 0;\n  let vowelsLen78 = vowels.length;\n  let vowelsIndex78 = 0;\n  let vowelsLen79 = vowels.length;\n  let vowelsIndex79 = 0;\n  let vowelsLen80 = vowels.length;\n  let vowelsIndex80 = 0;\n  let vowelsLen81 = vowels.length;\n  let vowelsIndex81 = 0;\n  let vowelsLen82 = vowels.length;\n  let vowelsIndex82 = 0;\n  let vowelsLen83 = vowels.length;\n  let vowelsIndex83 = 0;\n  let vowelsLen84 = vowels.length;\n  let vowelsIndex84 = 0;\n  let vowelsLen85 = vowels.length;\n  let vowelsIndex85 = 0;\n  let vowelsLen86 = vowels.length;\n  let vowelsIndex86 = 0;\n  let vowelsLen87 = vowels.length;\n  let vowelsIndex87 = 0;\n  let vowelsLen88 = vowels.length;\n  let vowelsIndex88 = 0;\n  let vowelsLen89 = vowels.length;\n  let vowelsIndex89 = 0;\n  let vowelsLen90 = vowels.length;\n  let vowelsIndex90 = 0;\n  let vowelsLen91 = vowels.length;\n  let vowelsIndex91 = 0;\n  let vowelsLen92 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that take a value (string) represent a numeral \n   and return the close integer to it. If the numeral constitute equidistant \n   from two integers, round it away from zero. \n   model\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a function that take a value (string) represent a numeral \n   and return the close integer to it. If the numeral constitute equidistant \n   from two integers, round it away from zero. \n   model\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  return Math.ceil(parseInt(integer, 10) + fraction * Math.pow(10, Math.floor(Math.log10(Math.abs(integer))));\n};\n\n/* Create a function that take a value (string) represent a numeral \n   and return the closest power of 10 to the given number. \n   model\n  >>> closestPowerOf10(\"10\")\n  10\n  >>> closestPowerOf10(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOf10(\"14.5\") should\n  return 15 and closestPowerOf10(\"-14.5\") should return -15.\n  */\nconst closestPowerOf10 = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  return Math.ceil(parseInt(integer, 10) * Math.pow(10, Math.floor(Math.log10(Math.abs(integer))));\n};\n\n/* Create a function that take a value (string) represent a numeral \n   and return the closest power of 10 to the given number. \n   model\n  >>> closestPowerOfTen(\"10\")\n  10\n  >>> closestPowerOfTen(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOfTen(\"14.5\") should\n  return 15 and closestPowerOfTen(\"-14.5\") should return -15.\n  */\nconst closestPowerOfTen = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  return Math.ceil(parseInt(integer, 10) * Math.pow(10, Math.floor(Math.log10(Math.abs(integer))));\n};\n\n/* Create a function that take a value (string) represent a numeral \n   and return the closest power of 10 to the given number. \n   model\n  >>> closestPowerOfTen(\"10\")\n  10\n  >>> closestPowerOfTen(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOfTen(\"14.5\") should\n  return 15 and closestPowerOfTen(\"-14.5\") should return -15.\n  */\nconst closestPowerOfTenOrZero = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  return Math.ceil(parseInt(integer, 10) * Math.pow(10, Math.floor(Math.log10(Math.abs(integer))));\n};\n\n/* Create a function that take a value (string) represent a numeral \n   and return the closest power of 10 to the given number. \n   model\n  >>> closestPowerOfTenOrZero(\"10\")\n  10\n  >>> closestPowerOfTenOrZero(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOfTenOrZero(\"14.5\") should\n  return 15 and closestPowerOfTenOrZero(\"-14.5\") should return -15.\n  */\nconst closestPowerOfTenOrZero = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  return Math.ceil(parseInt(integer, 10) * Math.pow(10, Math.floor(Math.log10(Math.abs(integer))));\n};\n\n/* Create a function that take a value (string) represent a numeral \n   and return the closest power of 10 to the given number. \n   model\n  >>> closestPowerOfTenOrZero(\"10\")\n  10\n  >>> closestPowerOfTenOrZero(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOfTenOrZero(\"14.5\") should\n  return 15 and closestPowerOfTenOrZero(\"-14.5\") should return -15.\n  */\nconst closestPowerOfTenOrZeroOrZero = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  return Math.ceil(parseInt(integer, 10) * Math.pow(10, Math.floor(Math.log10(Math.abs(integer))));\n};\n\n/* Create a function that take a value (string) represent a numeral \n   and return the closest power of 10 to the given number. \n   model\n  >>> closestPowerOfTenOrZeroOrZero(\"10\")\n  10\n  >>> closestPowerOfTenOrZeroOrZero(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOfTenOrZeroOrZero(\"14.5\") should\n  return 15 and closestPowerOfTenOrZeroOrZero(\"-14.5\") should return -15.\n  */\nconst closestPowerOfTenOrZeroOrZero = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  return Math.ceil(parseInt(integer, 10) * Math.pow(10, Math.floor(Math.log10(Math.abs(integer))));\n};\n\n/* Create a function that take a value (string) represent a numeral \n   and return the closest power of 10 to the given number. \n   model\n  >>> closestPowerOfTenOrZeroOrZero(\"10\")\n  10\n  >>> closestPowerOfTenOrZeroOrZero(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOfTenOrZeroOrZero(\"14.5\") should\n  return 15 and closestPowerOfTenOrZeroOrZero(\"-14.5\") should return -15.\n  */\nconst closestPowerOfTenOrZeroOrZeroOrZero = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  return Math.ceil(parseInt(integer, 10) * Math.pow(10, Math.floor(Math.log10(Math.abs(integer))));\n};\n\n/* Create a function that take a value (string) represent a numeral \n   and return the closest power of 10 to the given number. \n   model\n  >>> closestPowerOfTenOrZeroOrZero(\"10\")\n  10\n  >>> closestPowerOfTenOrZeroOrZero(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOfTenOrZeroOrZero(\"14.5\") should\n  return 15 and closestPowerOfTenOrZeroOrZero(\"-14.5\") should return -15.\n  */\nconst closestPowerOfTenOrZeroOrZeroOrZero = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  return Math.ceil(parseInt(integer, 10) * Math.pow(10, Math.floor(Math.log10(Math.abs(integer))));", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
