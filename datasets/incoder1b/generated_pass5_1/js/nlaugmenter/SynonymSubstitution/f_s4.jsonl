{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements > threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZero = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZero = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZero = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZero = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZero = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZero = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZero = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZeroOrZero = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZeroOrZero = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrZeroOrZeroOrZeroOrZero = (numbers, threshold) => {\n  let closeElements = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - threshold) < Math.abs(numbers[i] - closeElements)) {\n      closeElements = numbers[i];\n    }\n  }\n  return closeElements === threshold;\n};\n\n/* Check if given list of numbers, are any two numbers closer to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple group of nest parentheses. Your goal is to \n   freestanding those group into separate string and return the list of those. \n   Separate groups are balanced (each open brace is by rights shut) and not nested within each early \n   dismiss any spaces in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string containing multiple group of nest parentheses. Your goal is to \n   freestanding those group into separate string and return the list of those. \n   Separate groups are balanced (each open brace is by rights shut) and not nested within each early \n   dismiss any spaces in the stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = group;\n    const paren_group_parens = paren_group_string.match(/\\(([^)]+)\\)/gi);\n    if (paren_group_parens) {\n      paren_group_parens.forEach((paren_group_paren) => {\n        paren_group_paren = paren_group_paren.replace(/\\s/g, '');\n        paren_group_paren = paren_group_paren.trim();\n        if (paren_group_paren) {\n          paren_group_strings.push([paren_group_paren]);\n        }\n      });\n    }\n  });\n  return paren_group_strings;\n};\n\n/**\n * Given a string, return the first and last character of the string.\n * \n * Examples:\n * \n * 'abc' -> 'cba'\n * 'abc'-> 'abc '\n * 'abc'-> 'abc'\n * 'abc' -> 'abc'\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the light palindrome that begins with a provide string.\n   Algorithm idea is simple: \n   - discover the longest postfix of provide string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromeLength2 = 0; \n  let palindromeLength3 = 0; \n  let palindromeLength4 = 0; \n  let palindromeLength5 = 0; \n  let palindromeLength6 = 0; \n  let palindromeLength7 = 0; \n  let palindromeLength8 = 0; \n  let palindromeLength9 = 0; \n  let palindromeLength10 = 0; \n  let palindromeLength11 = 0; \n  let palindromeLength12 = 0; \n  let palindromeLength13 = 0; \n  let palindromeLength14 = 0; \n  let palindromeLength15 = 0; \n  let palindromeLength16 = 0; \n  let palindromeLength17 = 0; \n  let palindromeLength18 = 0; \n  let palindromeLength19 = 0; \n  let palindromeLength20 = 0; \n  let palindromeLength21 = 0; \n  let palindromeLength22 = 0; \n  let palindromeLength23 = 0; \n  let palindromeLength24 = 0; \n  let palindromeLength25 = 0; \n  let palindromeLength26 = 0; \n  let palindromeLength27 = 0; \n  let palindromeLength28 = 0; \n  let palindromeLength29 = 0; \n  let palindromeLength30 = 0; \n  let palindromeLength31 = 0; \n  let palindromeLength32 = 0; \n  let palindromeLength33 = 0; \n  let palindromeLength34 = 0; \n  let palindromeLength35 = 0; \n  let palindromeLength36 = 0; \n  let palindromeLength37 = 0; \n  let palindromeLength38 = 0; \n  let palindromeLength39 = 0; \n  let palindromeLength40 = 0; \n  let palindromeLength41 = 0; \n  let palindromeLength42 = 0; \n  let palindromeLength43 = 0; \n  let palindromeLength44 = 0; \n  let palindromeLength45 = 0; \n  let palindromeLength46 = 0; \n  let palindromeLength47 = 0; \n  let palindromeLength48 = 0; \n  let palindromeLength49 = 0; \n  let palindromeLength50 = 0; \n  let palindromeLength51 = 0; \n  let palindromeLength52 = 0; \n  let palindromeLength53 = 0; \n  let palindromeLength54 = 0; \n  let palindromeLength55 = 0; \n  let palindromeLength56 = 0; \n  let palindromeLength57 = 0; \n  let palindromeLength58 = 0; \n  let palindromeLength59 = 0; \n  let palindromeLength60 = 0; \n  let palindromeLength61 = 0; \n  let palindromeLength62 = 0; \n  let palindromeLength63 = 0; \n  let palindromeLength64 = 0; \n  let palindromeLength65 = 0; \n  let palindromeLength66 = 0; \n  let palindromeLength67 = 0; \n  let palindromeLength68 = 0; \n  let palindromeLength69 = 0; \n  let palindromeLength70 = 0; \n  let palindromeLength71 = 0; \n  let palindromeLength72 = 0; \n  let palindromeLength73 = 0; \n  let palindromeLength74 = 0; \n  let palindromeLength75 = 0; \n  let palindromeLength76 = 0; \n  let palindromeLength77 = 0; \n  let palindromeLength78 = 0; \n  let palindromeLength79 = 0; \n  let palindromeLength80 = 0; \n  let palindromeLength81 = 0; \n  let palindromeLength82 = 0; \n  let palindromeLength83 = 0; \n  let palindromeLength84 = 0; \n  let palindromeLength85 = 0; \n  let palindromeLength86 = 0; \n  let palindromeLength87 = 0; \n  let palindromeLength88 = 0; \n  let palindromeLength89 = 0; \n  let palindromeLength90 = 0; \n  let palindromeLength91 = 0; \n  let palindromeLength92 = 0; \n  let palindromeLength93 = 0; \n  let palindromeLength94 = 0; \n  let palindromeLength95 = 0; \n  let palindromeLength96 = 0; \n  let palindromeLength97 = 0; \n  let palindromeLength98 = 0; \n  let palindromeLength99 = 0; \n  let palindromeLength100 = 0; \n  let palindromeLength101 = 0; \n  let palindromeLength102 = 0; \n  let palindromeLength103 = 0; \n  let palindromeLength104 = 0; \n  let palindromeLength105 = 0; \n  let palindromeLength106 = 0; \n  let palindromeLength107 = 0; \n  let palindromeLength108 = 0; \n  let palindromeLength109 = 0; \n  let palindromeLength110 = 0; \n  let palindromeLength111 = 0; \n  let palindromeLength112 = 0; \n  let palindromeLength113 = 0; \n  let palindromeLength114 = 0; \n  let palindromeLength115 = 0; \n  let palindromeLength116 = 0; \n  let palindromeLength117 = 0; \n  let palindromeLength118 = 0; \n  let palindromeLength119 = 0; \n  let palindromeLength120 = 0; \n  let palindromeLength121 = 0; \n  let palindromeLength122 = 0; \n  let palindromeLength123 = 0; \n  let palindromeLength124 = 0; \n  let palindromeLength125 = 0; \n  let palindromeLength126 = 0; \n  let palindromeLength127 = 0; \n  let palindromeLength128 = 0; \n  let palindromeLength129 = 0; \n  let palindromeLength130 = 0; \n  let palindromeLength131 = 0; \n  let palindromeLength132 = 0; \n  let palindromeLength133 = 0; \n  let palindromeLength134 = 0; \n  let palindromeLength135 = 0; \n  let palindromeLength136 = 0; \n  let palindromeLength137 = 0; \n  let palindromeLength138 = 0; \n  let palindromeLength139 = 0; \n  let palindromeLength140 = 0; \n  let palindromeLength141 = 0; \n  let palindromeLength142 = 0; \n  let palindromeLength143 = 0; \n  let palindromeLength144 = 0; \n  let palindromeLength145 = 0; \n  let palindromeLength146 = 0; \n  let palindromeLength147 = 0; \n  let palindromeLength148 = 0; \n  let palindromeLength149 = 0; \n  let palindromeLength150 = 0; \n  let palindromeLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let curious =  0;\n  let adjacent = 0;\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nums = [];\n  while(i < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[i] = num;\n    i++;\n  }\n  while(j < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[j] = num;\n    j++;\n  }\n  while(k < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[k] = num;\n    k++;\n  }\n  while(i < n) {\n    num = level[i];\n    adjacent = level[j];\n    curious = level[k];\n    num = num + adjacent;\n    num = num + curious;\n    nums.push(num);\n    i++;\n    j++;\n    k++;\n  }\n  return nums;\n}\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let curious =  0;\n  let adjacent = 0;\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nums = [];\n  while(i < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[i] = num;\n    i++;\n  }\n  while(j < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[j] = num;\n    j++;\n  }\n  while(k < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[k] = num;\n    k++;\n  }\n  while(i < n) {\n    num = level[i];\n    adjacent = level[j];\n    curious = level[k];\n    num = num + adjacent;\n    num = num + curious;\n    nums.push(num);\n    i++;\n    j++;\n    k++;\n  }\n  return nums;\n}\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let curious =  0;\n  let adjacent = 0;\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nums = [];\n  while(i < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[i] = num;\n    i++;\n  }\n  while(j < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[j] = num;\n    j++;\n  }\n  while(k < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[k] = num;\n    k++;\n  }\n  while(i < n) {\n    num = level[i];\n    adjacent = level[j];\n    curious = level[k];\n    num = num + adjacent;\n    num = num + curious;\n    nums.push(num);\n    i++;\n    j++;\n    k++;\n  }\n  return nums;\n}\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let curious =  0;\n  let adjacent = 0;\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nums = [];\n  while(i < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[i] = num;\n    i++;\n  }\n  while(j < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[j] = num;\n    j++;\n  }\n  while(k < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[k] = num;\n    k++;\n  }\n  while(i < n) {\n    num = level[i];\n    adjacent = level[j];\n    curious = level[k];\n    num = num + adjacent;\n    num = num + curious;\n    nums.push(num);\n    i++;\n    j++;\n    k++;\n  }\n  return nums;\n}\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the adjacent tied number if n is even. \n   Return the number of stones in each level in a list, where component at exponent \n   i constitute the numeral of stone in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let curious =  0;\n  let adjacent = 0;\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nums = [];\n  while(i < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[i] = num;\n    i++;\n  }\n  while(j < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[j] = num;\n    j++;\n  }\n  while(k < n) {\n    num = Math.floor(Math.random() * n) + 1;\n    level[k] = num;\n    k++;\n  }\n  while(i < n) {\n    num = level[i];\n    adjacent = level[j];\n    curious = level[k];\n    num = num + adjacent;\n    num = num + curious;\n    nums.push(num);\n    i++;\n    j++;\n    k++;\n  }\n  return nums;\n}\n\n/*\n  Given a positive integer n, you have to make a atomic pile of n floor of stone. \n   The first degree have n stone. \n   The number of stones in the future level is: \n       - the future curious number if n is leftover. \n       - the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by commas or space. Your job is \n   to divide the string into son and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((w) => {\n    result.push(w.trim());\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated by ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the \n   big even integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 0) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 1) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOdd = (x, y) => {\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 0) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 1) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddOdd = (x, y) => {\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 0) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddOddOdd = (x, y) => {\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 0) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddOddOddOdd = (x, y) => {\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 0) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddOddOddOddOdd = (x, y) => {\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 0) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 1) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 1 && y % 2 === 0) {\n    return -1;\n  }\n  if (x % 2 === 0 && y % 2 === 1) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n   big odd integer number that is in the compass [x, y] inclusive. If \n   there's no such phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to calculate the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and convert that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = '';\n  let remainder = 0;\n  let remainder2 = 0;\n  let remainder3 = 0;\n  let remainder4 = 0;\n  let remainder5 = 0;\n  let remainder6 = 0;\n  let remainder7 = 0;\n  let remainder8 = 0;\n  let remainder9 = 0;\n  let remainder10 = 0;\n  let remainder11 = 0;\n  let remainder12 = 0;\n  let remainder13 = 0;\n  let remainder14 = 0;\n  let remainder15 = 0;\n  let remainder16 = 0;\n  let remainder17 = 0;\n  let remainder18 = 0;\n  let remainder19 = 0;\n  let remainder20 = 0;\n  let remainder21 = 0;\n  let remainder22 = 0;\n  let remainder23 = 0;\n  let remainder24 = 0;\n  let remainder25 = 0;\n  let remainder26 = 0;\n  let remainder27 = 0;\n  let remainder28 = 0;\n  let remainder29 = 0;\n  let remainder30 = 0;\n  let remainder31 = 0;\n  let remainder32 = 0;\n  let remainder33 = 0;\n  let remainder34 = 0;\n  let remainder35 = 0;\n  let remainder36 = 0;\n  let remainder37 = 0;\n  let remainder38 = 0;\n  let remainder39 = 0;\n  let remainder40 = 0;\n  let remainder41 = 0;\n  let remainder42 = 0;\n  let remainder43 = 0;\n  let remainder44 = 0;\n  let remainder45 = 0;\n  let remainder46 = 0;\n  let remainder47 = 0;\n  let remainder48 = 0;\n  let remainder49 = 0;\n  let remainder50 = 0;\n  let remainder51 = 0;\n  let remainder52 = 0;\n  let remainder53 = 0;\n  let remainder54 = 0;\n  let remainder55 = 0;\n  let remainder56 = 0;\n  let remainder57 = 0;\n  let remainder58 = 0;\n  let remainder59 = 0;\n  let remainder60 = 0;\n  let remainder61 = 0;\n  let remainder62 = 0;\n  let remainder63 = 0;\n  let remainder64 = 0;\n  let remainder65 = 0;\n  let remainder66 = 0;\n  let remainder67 = 0;\n  let remainder68 = 0;\n  let remainder69 = 0;\n  let remainder70 = 0;\n  let remainder71 = 0;\n  let remainder72 = 0;\n  let remainder73 = 0;\n  let remainder74 = 0;\n  let remainder75 = 0;\n  let remainder76 = 0;\n  let remainder77 = 0;\n  let remainder78 = 0;\n  let remainder79 = 0;\n  let remainder80 = 0;\n  let remainder81 = 0;\n  let remainder82 = 0;\n  let remainder83 = 0;\n  let remainder84 = 0;\n  let remainder85 = 0;\n  let remainder86 = 0;\n  let remainder87 = 0;\n  let remainder88 = 0;\n  let remainder89 = 0;\n  let remainder90 = 0;\n  let remainder91 = 0;\n  let remainder92 = 0;\n  let remainder93 = 0;\n  let remainder94 = 0;\n  let remainder95 = 0;\n  let remainder96 = 0;\n  let remainder97 = 0;\n  let remainder98 = 0;\n  let remainder99 = 0;\n  let remainder100 = 0;\n  let remainder101 = 0;\n  let remainder102 = 0;\n  let remainder103 = 0;\n  let remainder104 = 0;\n  let remainder105 = 0;\n  let remainder106 = 0;\n  let remainder107 = 0;\n  let remainder108 = 0;\n  let remainder109 = 0;\n  let remainder110 = 0;\n  let remainder111 = 0;\n  let remainder112 = 0;\n  let remainder113 = 0;\n  let remainder114 = 0;\n  let remainder115 = 0;\n  let remainder116 = 0;\n  let remainder117 = 0;\n  let remainder118 = 0;\n  let remainder119 = 0;\n  let remainder120 = 0;\n  let remainder121 = 0;\n  let remainder122 = 0;\n  let remainder123 = 0;\n  let remainder124 = 0;\n  let remainder125 = 0;\n  let remainder126 = 0;\n  let remainder127 = 0;\n  let remainder128 = 0;\n  let remainder129 = 0;\n  let remainder130 = 0;\n  let remainder131 = 0;\n  let remainder132 = 0;\n  let remainder133 = 0;\n  let remainder134 = 0;\n  let remainder135 = 0;\n  let remainder136 = 0;\n  let remainder137 = 0;\n  let remainder138 = 0;\n  let remainder139 = 0;\n  let remainder140 = 0;\n  let remainder141 = 0;\n  let remainder142 = 0;\n  let remainder143 = 0;\n  let remainder144 = 0;\n  let remainder145 = 0;\n  let remainder146 = 0;\n  let remainder147 = 0;\n  let remainder148 = 0;\n  let remainder149 = 0;\n  let remainder150 = 0;\n  let remainder151 = 0;\n  let remainder152 = 0;\n  let remainder153 = 0;\n  let remainder154 = 0;\n  let remainder155 = 0;\n  let remainder156 = 0;\n  let remainder157 = 0;\n  let remainder158 = 0;\n  let remainder159 = 0;\n  let remainder160 = 0;\n  let remainder161 = 0;\n  let remainder162 = 0;\n  let remainder163 = 0;\n  let remainder164 = 0;\n  let remainder165 = 0;\n  let remainder166 = 0;\n  let remainder167 = 0;\n  let remainder168 = 0;\n  let remainder169 = 0;\n  let remainder170 = 0;\n  let remainder171 = 0;\n  let remainder172 = 0;\n  let remainder173 = 0;\n  let remainder174 = 0;\n  let remainder175 = 0;\n  let remainder176 = 0;\n  let remainder177 = 0;\n  let remainder178 = 0;\n  let remainder179 = 0;\n  let remainder180 = 0;\n  let remainder181 = 0;\n  let remainder182 = 0;\n  let remainder183 = 0;\n  let remainder184 = 0;\n  let remainder185 = 0;\n  let remainder186 = 0;\n  let remainder187 = 0;\n  let remainder188 = 0;\n  let remainder189 = 0;\n  let remainder190 = 0;\n  let remainder191 = 0;\n  let remainder192 = 0;\n  let remainder193 = 0;\n  let remainder194 = 0;\n  let remainder195 = 0;\n  let remainder196 = 0;\n  let remainder197 = 0;\n  let remainder198 = 0;\n  let remainder199 = 0;\n  let remainder200 = 0;\n  let remainder201 = 0;\n  let remainder202 = 0;\n  let remainder203 = 0;\n  let remainder204 = 0;\n  let remainder205 = 0;\n  let remainder206 = 0;\n  let remainder207 = 0;\n  let remainder208 = 0;\n  let remainder209 = 0;\n  let remainder210 = 0;\n  let remainder211 = 0;\n  let remainder212 = 0;\n  let remainder213 = 0;\n  let remainder214 = 0;\n  let remainder215 = 0;\n  let remainder216 = 0;\n  let remainder217 = 0;\n  let remainder218 = 0;\n  let remainder219 = 0;\n  let remainder220 = 0;\n  let remainder221 = 0;\n  let remainder222 = 0;\n  let remainder223 = 0;\n  let remainder224 = 0;\n  let remainder225 = 0;\n  let remainder226 = 0;\n  let remainder227 = 0;\n  let remainder228 = 0;\n  let remainder229 = 0;\n  let remainder230 = 0;\n  let remainder231 = 0;\n  let remainder232 = 0;\n  let remainder233 = 0;\n  let remainder234 = 0;\n  let remainder235 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = []\n  \n  x.sort((a, b) => a - b)\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === x[i + 1]) {\n      res.push(x[i])\n    }\n  }\n  \n  return res\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that holdn't any tied digit. \n\n   Note: Returned list should be sorted in increasing decree. \n  \n   For model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.map(item => item > 9? item - 9 : item);\n  return reversedArr;\n}\n\n/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReversed = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.map(item => item > 9? item - 9 : item);\n  return reversedArr;\n}\n\n/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReversedReversed = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.map(item => item > 9? item - 9 : item);\n  return reversedArr;\n}\n\n/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReversedReversedReversed = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.map(item => item > 9? item - 9 : item);\n  return reversedArr;\n}\n\n/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReversedReversedReversedReversed = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.map(item => item > 9? item - 9 : item);\n  return reversedArr;\n}\n\n/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReversedReversedReversedReversedReversed = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = sortedArr.map(item => item > 9? item - 9 : item);\n  return reversedArr;\n}\n\n/*\n  Given an array of integers, sort the integers that be between 1 and 9 inclusive, \n   reverse the resulting array, and then replace each finger by its corresponding name from \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the factorial of i if i is even \n   or the union of issue from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the generation of the numbers pool from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the factorial of i if i is even \n   or the union of issue from 1 to i differently. \n   i starts from 1. \n   the factorial of i is the generation of the numbers pool from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let factor = Math.floor((i + 1) * Math.sqrt(i));\n    let remainder = i % factor;\n    if (remainder === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the sum of all numbers \n   in the interval [1, n) such that i is even. \n   i starts from 1. \n   the sum of all numbers in the interval [1, n) such that i is even is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 17. \n  Example:\n  g(5) == [5, 10, 15, 20, 25]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = i; j <= n; j++) {\n      sum += j;\n    }\n    if (i % 2 === 0) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the sum of all numbers \n   in the interval [1, n) such that i is odd. \n   i starts from 1. \n   the sum of all numbers in the interval [1, n) such that i is odd is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 11. \n  Example:\n  h(5) == [5, 10, 15, 20, 25]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = i; j <= n; j++) {\n      sum += j;\n    }\n    if (i % 2 === 1) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the sum of all numbers \n   in the interval [1, n) such that i is divisible by 3. \n   i starts from 1. \n   the sum of all numbers in the interval [1, n) such that i is divisible by 3 is 1 + 2 + 3 + 4 + 5 + 6 = 9. \n  Example:\n  i(5) == [5, 10, 15, 20, 25]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = i; j <= n; j++) {\n      sum += j;\n    }\n    if (i % 3 === 0) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the sum of all numbers \n   in the interval [1, n) such that i is divisible by 5 and is divisible by 3. \n   i starts from 1. \n   the sum of all numbers in the interval [1, n) such that i is divisible by 5 and is divisible by 3 is 1 + 2 + 3 + 4 + 5 + 6 = 15. \n  Example:\n  j(5) == [5, 10, 15, 20, 25]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = i; j <= n; j++) {\n      sum += j;\n    }\n    if (i % 5 === 0 && i % 3 === 0) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the sum of all numbers \n   in the interval [1, n) such that i is divisible by 7 and is divisible by 3. \n   i starts from 1. \n   the sum of all numbers in the interval [1, n) such that i is divisible by 7 and is divisible by 3 is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 21. \n  Example:\n  k(5) == [5, 10, 15, 20, 25]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = i; j <= n; j++) {\n      sum += j;\n    }\n    if (i % 7 === 0 && i % 3 === 0) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the sum of all numbers \n   in the interval [1, n) such that i is divisible by 11 and is divisible by 3. \n   i starts from 1. \n   the sum of all numbers in the interval [1, n) such that i is divisible by 11 and is divisible by 3 is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 29. \n  Example:\n  l(5) == [5, 10, 15, 20, 25]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = i; j <= n; j++) {\n      sum += j;\n    }\n    if (i % 11 === 0 && i % 3 === 0) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the sum of all numbers \n   in the interval [1, n) such that i is divisible by 13 and is divisible by 3. \n   i starts from 1. \n   the sum of all numbers in the interval [1, n) such that i is divisible by 13 and is divisible by 3 is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 49. \n  Example:\n  m(5) == [5, 10, 15, 20, 25]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = i; j <= n; j++) {\n      sum += j;\n    }\n    if (i % 13 === 0 && i % 3 === 0) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the sum of all numbers \n   in the interval [1, n) such that i is divisible by 17 and is divisible by 3. \n   i starts from 1. \n   the sum of all numbers in the interval [1, n) such that i is divisible by 17 and is divisible by 3 is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 69. \n  Example:\n  n(5) == [5, 10, 15, 20, 25]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = i; j <= n; j++) {\n      sum += j;\n    }\n    if (i % 17 === 0 && i % 3 === 0) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter, \n   and returns a list of size n, such that the value of the component at index i be the sum of all numbers \n   in the interval [1, n) such that i is divisible by 19 and is divisible by 3. \n   i starts from 1. \n   the sum of all numbers in the interval [1, n) such that i is divisible ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd \n   integer palindrome that decrease within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evenOddPalindrome = n;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindrome = 1;\n  let odd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      arr[i] = -arr[i];\n    }\n    result += sign * Math.floor(Math.abs(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      arr[i] = -arr[i];\n    }\n    result += sign * Math.floor(Math.abs(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      arr[i] = -arr[i];\n    }\n    result += sign * Math.floor(Math.abs(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      arr[i] = -arr[i];\n    }\n    result += sign * Math.floor(Math.abs(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      arr[i] = -arr[i];\n    }\n    result += sign * Math.floor(Math.abs(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      arr[i] = -arr[i];\n    }\n    result += sign * Math.floor(Math.abs(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      arr[i] = -arr[i];\n    }\n    result += sign * Math.floor(Math.abs(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      arr[i] = -arr[i];\n    }\n    result += sign * Math.floor(Math.abs(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      arr[i] = -arr[i];\n    }\n    result += sign * Math.floor(Math.abs(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be negative: \n   e.g. -123 has sign finger -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      arr[i] = -arr[i];\n    }\n    result += sign * Math.floor(Math.abs(arr[i]));\n  }\n  return result;\n};\n\n/*\n  Write a function countNums which takes an array of integers and rejoinder \n   the issue of component which has a kernel of digits > 0. \n   If a number equal negative, then its inaugural signed finger will be ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered. Your job is to determine if \n   it is possible to make an array sorted in non - decreasing ordering by perform \n   the following operation on the give array: \n       You are allow to perform correct shift operation any phone number of clock time. \n  \n   One correct shift key process think of shift all element of the array by one \n   side in the right direction. The final element of the array will be travel to \n   the starting military position in the array i.e. 0th exponent. \n\n   If it is potential to obtain the sorted array by performing the above mathematical process \n   then return true else return false. \n   If the sacrifice array is empty then return true. \n\n   Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered. Your job is to determine if \n   it is possible to make an array sorted in non - decreasing ordering by perform \n   the following operation on the give array: \n       You are allow to perform correct shift operation any phone number of clock time. \n  \n   One correct shift key process think of shift all element of the array by one \n   side in the right direction. The final element of the array will be travel to \n   the starting military position in the array i.e. 0th exponent. \n\n   If it is potential to obtain the sorted array by performing the above mathematical process \n   then return true else return false. \n   If the sacrifice array is empty then return true. \n\n   Note: The sacrifice list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let tempArr = [];\n  let tempArrIndex = 0;\n  let tempArrLength = 0;\n  let tempArrLength1 = 0;\n  let tempArrLength2 = 0;\n  let tempArrLength3 = 0;\n  let tempArrLength4 = 0;\n  let tempArrLength5 = 0;\n  let tempArrLength6 = 0;\n  let tempArrLength7 = 0;\n  let tempArrLength8 = 0;\n  let tempArrLength9 = 0;\n  let tempArrLength10 = 0;\n  let tempArrLength11 = 0;\n  let tempArrLength12 = 0;\n  let tempArrLength13 = 0;\n  let tempArrLength14 = 0;\n  let tempArrLength15 = 0;\n  let tempArrLength16 = 0;\n  let tempArrLength17 = 0;\n  let tempArrLength18 = 0;\n  let tempArrLength19 = 0;\n  let tempArrLength20 = 0;\n  let tempArrLength21 = 0;\n  let tempArrLength22 = 0;\n  let tempArrLength23 = 0;\n  let tempArrLength24 = 0;\n  let tempArrLength25 = 0;\n  let tempArrLength26 = 0;\n  let tempArrLength27 = 0;\n  let tempArrLength28 = 0;\n  let tempArrLength29 = 0;\n  let tempArrLength30 = 0;\n  let tempArrLength31 = 0;\n  let tempArrLength32 = 0;\n  let tempArrLength33 = 0;\n  let tempArrLength34 = 0;\n  let tempArrLength35 = 0;\n  let tempArrLength36 = 0;\n  let tempArrLength37 = 0;\n  let tempArrLength38 = 0;\n  let tempArrLength39 = 0;\n  let tempArrLength40 = 0;\n  let tempArrLength41 = 0;\n  let tempArrLength42 = 0;\n  let tempArrLength43 = 0;\n  let tempArrLength44 = 0;\n  let tempArrLength45 = 0;\n  let tempArrLength46 = 0;\n  let tempArrLength47 = 0;\n  let tempArrLength48 = 0;\n  let tempArrLength49 = 0;\n  let tempArrLength50 = 0;\n  let tempArrLength51 = 0;\n  let tempArrLength52 = 0;\n  let tempArrLength53 = 0;\n  let tempArrLength54 = 0;\n  let tempArrLength55 = 0;\n  let tempArrLength56 = 0;\n  let tempArrLength57 = 0;\n  let tempArrLength58 = 0;\n  let tempArrLength59 = 0;\n  let tempArrLength60 = 0;\n  let tempArrLength61 = 0;\n  let tempArrLength62 = 0;\n  let tempArrLength63 = 0;\n  let tempArrLength64 = 0;\n  let tempArrLength65 = 0;\n  let tempArrLength66 = 0;\n  let tempArrLength67 = 0;\n  let tempArrLength68 = 0;\n  let tempArrLength69 = 0;\n  let tempArrLength70 = 0;\n  let tempArrLength71 = 0;\n  let tempArrLength72 = 0;\n  let tempArrLength73 = 0;\n  let tempArrLength74 = 0;\n  let tempArrLength75 = 0;\n  let tempArrLength76 = 0;\n  let tempArrLength77 = 0;\n  let tempArrLength78 = 0;\n  let tempArrLength79 = 0;\n  let tempArrLength80 = 0;\n  let tempArrLength81 = 0;\n  let tempArrLength82 = 0;\n  let tempArrLength83 = 0;\n  let tempArrLength84 = 0;\n  let tempArrLength85 = 0;\n  let tempArrLength86 = 0;\n  let tempArrLength87 = 0;\n  let tempArrLength88 = 0;\n  let tempArrLength89 = 0;\n  let tempArrLength90 = 0;\n  let tempArrLength91 = 0;\n  let tempArrLength92 = 0;\n  let tempArrLength93 = 0;\n  let tempArrLength94 = 0;\n  let tempArrLength95 = 0;\n  let tempArrLength96 = 0;\n  let tempArrLength97 = 0;\n  let tempArrLength98 = 0;\n  let tempArrLength99 = 0;\n  let tempArrLength100 = 0;\n  let tempArrLength101 = 0;\n  let tempArrLength102 = 0;\n  let tempArrLength103 = 0;\n  let tempArrLength104 = 0;\n  let tempArrLength105 = 0;\n  let tempArrLength106 = 0;\n  let tempArrLength107 = 0;\n  let tempArrLength108 = 0;\n  let tempArrLength109 = 0;\n  let tempArrLength110 = 0;\n  let tempArrLength111 = 0;\n  let tempArrLength112 = 0;\n  let tempArrLength113 = 0;\n  let tempArrLength114 = 0;\n  let tempArrLength115 = 0;\n  let tempArrLength116 = 0;\n  let tempArrLength117 = 0;\n  let tempArrLength118 = 0;\n  let tempArrLength119 = 0;\n  let tempArrLength120 = 0;\n  let tempArrLength121 = 0;\n  let tempArrLength122 = 0;\n  let tempArrLength123 = 0;\n  let tempArrLength124 = 0;\n  let tempArrLength125 = 0;\n  let tempArrLength126 = 0;\n  let tempArrLength127 = 0;\n  let tempArrLength128 = 0;\n  let tempArrLength129 = 0;\n  let tempArrLength130 = 0;\n  let tempArrLength131 = 0;\n  let tempArrLength132 = 0;\n  let tempArrLength133 = 0;\n  let tempArrLength134 = 0;\n  let tempArrLength135 = 0;\n  let tempArrLength136 = 0;\n  let tempArrLength137 = 0;\n  let tempArrLength138 = 0;\n  let tempArrLength139 = 0;\n  let tempArrLength140 = 0;\n  let tempArrLength141 = 0;\n  let tempArrLength142 = 0;\n  let tempArrLength143 = 0;\n  let tempArrLength144 = 0;\n  let tempArrLength145 = 0;\n  let tempArrLength146 = 0;\n  let tempArrLength147 = 0;\n  let tempArrLength148 = 0;\n  let tempArrLength149 = 0;\n  let tempArrLength150 = 0;\n  let tempArrLength151 = 0;\n  let tempArrLength152 = 0;\n  let tempArrLength153 = 0;\n  let tempArrLength154 = 0;\n  let tempArrLength155 = 0;\n  let tempArrLength156 = 0;\n  let tempArrLength157 = 0;\n  let tempArrLength158 = 0;\n  let tempArrLength159 = 0;\n  let tempArrLength160 = 0;\n  let tempArrLength161 = 0;\n  let tempArrLength162 = 0;\n  let tempArrLength163 = 0;\n  let tempArrLength164 = 0;\n  let tempArrLength165 = 0;\n  let tempArrLength166 = 0;\n  let tempArrLength167 = 0;\n  let tempArrLength168 = 0;\n  let tempArrLength169 = 0;\n  let tempArrLength170 = 0;\n  let tempArrLength171 = 0;\n  let tempArrLength172 = 0;\n  let tempArrLength173 = 0;\n  let tempArrLength174 = 0;\n  let tempArrLength175 = 0;\n  let tempArrLength176 = 0;\n  let tempArrLength177 = 0;\n  let tempArrLength178 = 0;\n  let tempArrLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary AND on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary OR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringOrXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary AND on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXorOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary OR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringOrXorOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary AND on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXorXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary OR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringOrXorXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorXorOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary AND on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXorXorOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary OR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringOrXorXorOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorXorXorXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary AND on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXorXorXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary OR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringOrXorXorXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary XOR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorXorXorOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary AND on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringAndXorXorXorOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s. \n   do binary OR on these input and return result also as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringOrXorXorXorOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of number, \n   and determine whether it is potential to do an exchange of elements \n   between them to name lst1 a list of merely even numbers. \n   There is no terminus ad quem on the numeral of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to cause \n   all the element of lst1 to constitute even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of number, \n   and determine whether it is potential to do an exchange of elements \n   between them to name lst1 a list of merely even numbers. \n   There is no terminus ad quem on the numeral of exchanged elements between lst1 and lst2.\n   If it be possible to exchange elements between the lst1 and lst2 to cause \n   all the element of lst1 to constitute even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let flag = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      flag = false;\n      break;\n    }\n  }\n  return flag? \"YES\" : \"NO\";\n};\n\n/*\n  Write a function that takes an array of numbers and returns \n  the sum of the numbers in the array. \n  For example:\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letter, return a dictionary \n   of the letter with the most repetition and containing the equate count. \n   If several letter take the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letterCounts = {};\n  let letterCount = 0;\n  let letter;\n  let letters;\n  let testString;\n  let testStringLength;\n  let testStringLengthLength;\n  let testStringLengthLengthLength;\n  let testStringLengthLengthLengthLengthLength;\n  let testStringLengthLengthLengthLengthLengthLengthLength;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings s and c, you have to deleted all the character in s that be adequate to any fictional character in c\n   then check if the consequence drawstring is palindrome. \n   A chain is called palindrome if it reads the same backward as ahead. \n   You should return a tuple check the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We are given two strings s and c, you have to deleted all the character in s that be adequate to any fictional character in c\n   then check if the consequence drawstring is palindrome. \n   A chain is called palindrome if it reads the same backward as ahead. \n   You should return a tuple check the resultant role string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = []\n  let reversed = s.split(\"\").reverse().join(\"\")\n  let reversedChars = reversed.split(\"\")\n  let reversedCharsLength = reversedChars.length\n  let deleteChars = c.split(\"\")\n  let deleteCharsLength = deleteChars.length\n  let deleteCharsIndex = 0\n  let deleteCharsIndex2 = 0\n  let deleteCharsIndex3 = 0\n  let deleteCharsIndex4 = 0\n  let deleteCharsIndex5 = 0\n  let deleteCharsIndex6 = 0\n  let deleteCharsIndex7 = 0\n  let deleteCharsIndex8 = 0\n  let deleteCharsIndex9 = 0\n  let deleteCharsIndex10 = 0\n  let deleteCharsIndex11 = 0\n  let deleteCharsIndex12 = 0\n  let deleteCharsIndex13 = 0\n  let deleteCharsIndex14 = 0\n  let deleteCharsIndex15 = 0\n  let deleteCharsIndex16 = 0\n  let deleteCharsIndex17 = 0\n  let deleteCharsIndex18 = 0\n  let deleteCharsIndex19 = 0\n  let deleteCharsIndex20 = 0\n  let deleteCharsIndex21 = 0\n  let deleteCharsIndex22 = 0\n  let deleteCharsIndex23 = 0\n  let deleteCharsIndex24 = 0\n  let deleteCharsIndex25 = 0\n  let deleteCharsIndex26 = 0\n  let deleteCharsIndex27 = 0\n  let deleteCharsIndex28 = 0\n  let deleteCharsIndex29 = 0\n  let deleteCharsIndex30 = 0\n  let deleteCharsIndex31 = 0\n  let deleteCharsIndex32 = 0\n  let deleteCharsIndex33 = 0\n  let deleteCharsIndex34 = 0\n  let deleteCharsIndex35 = 0\n  let deleteCharsIndex36 = 0\n  let deleteCharsIndex37 = 0\n  let deleteCharsIndex38 = 0\n  let deleteCharsIndex39 = 0\n  let deleteCharsIndex40 = 0\n  let deleteCharsIndex41 = 0\n  let deleteCharsIndex42 = 0\n  let deleteCharsIndex43 = 0\n  let deleteCharsIndex44 = 0\n  let deleteCharsIndex45 = 0\n  let deleteCharsIndex46 = 0\n  let deleteCharsIndex47 = 0\n  let deleteCharsIndex48 = 0\n  let deleteCharsIndex49 = 0\n  let deleteCharsIndex50 = 0\n  let deleteCharsIndex51 = 0\n  let deleteCharsIndex52 = 0\n  let deleteCharsIndex53 = 0\n  let deleteCharsIndex54 = 0\n  let deleteCharsIndex55 = 0\n  let deleteCharsIndex56 = 0\n  let deleteCharsIndex57 = 0\n  let deleteCharsIndex58 = 0\n  let deleteCharsIndex59 = 0\n  let deleteCharsIndex60 = 0\n  let deleteCharsIndex61 = 0\n  let deleteCharsIndex62 = 0\n  let deleteCharsIndex63 = 0\n  let deleteCharsIndex64 = 0\n  let deleteCharsIndex65 = 0\n  let deleteCharsIndex66 = 0\n  let deleteCharsIndex67 = 0\n  let deleteCharsIndex68 = 0\n  let deleteCharsIndex69 = 0\n  let deleteCharsIndex70 = 0\n  let deleteCharsIndex71 = 0\n  let deleteCharsIndex72 = 0\n  let deleteCharsIndex73 = 0\n  let deleteCharsIndex74 = 0\n  let deleteCharsIndex75 = 0\n  let deleteCharsIndex76 = 0\n  let deleteCharsIndex77 = 0\n  let deleteCharsIndex78 = 0\n  let deleteCharsIndex79 = 0\n  let deleteCharsIndex80 = 0\n  let deleteCharsIndex81 = 0\n  let deleteCharsIndex82 = 0\n  let deleteCharsIndex83 = 0\n  let deleteCharsIndex84 = 0\n  let deleteCharsIndex85 = 0\n  let deleteCharsIndex86 = 0\n  let deleteCharsIndex87 = 0\n  let deleteCharsIndex88 = 0\n  let deleteCharsIndex89 = 0\n  let deleteCharsIndex90 = 0\n  let deleteCharsIndex91 = 0\n  let deleteCharsIndex92 = 0\n  let deleteCharsIndex93 = 0\n  let deleteCharsIndex94 = 0\n  let deleteCharsIndex95 = 0\n  let deleteCharsIndex96 = 0\n  let deleteCharsIndex97 = 0\n  let deleteCharsIndex98 = 0\n  let deleteCharsIndex99 = 0\n  let deleteCharsIndex100 = 0\n  let deleteCharsIndex101 = 0\n  let deleteCharsIndex102 = 0\n  let deleteCharsIndex103 = 0\n  let deleteCharsIndex104 = 0\n  let deleteCharsIndex105 = 0\n  let deleteCharsIndex106 = 0\n  let deleteCharsIndex107 = 0\n  let deleteCharsIndex108 = 0\n  let deleteCharsIndex109 = 0\n  let deleteCharsIndex110 = 0\n  let deleteCharsIndex111 = 0\n  let deleteCharsIndex112 = 0\n  let deleteCharsIndex113 = 0\n  let deleteCharsIndex114 = 0\n  let deleteCharsIndex115 = 0\n  let deleteCharsIndex116 = 0\n  let deleteCharsIndex117 = 0\n  let deleteCharsIndex118 = 0\n  let deleteCharsIndex119 = 0\n  let deleteCharsIndex120 = 0\n  let deleteCharsIndex121 = 0\n  let deleteCharsIndex122 = 0\n  let deleteCharsIndex123 = 0\n  let deleteCharsIndex124 = 0\n  let deleteCharsIndex125 = 0\n  let deleteCharsIndex126 = 0\n  let deleteCharsIndex127 = 0\n  let deleteCharsIndex128 = 0\n  let deleteCharsIndex129 = 0\n  let deleteCharsIndex130 = 0\n  let deleteCharsIndex131 = 0\n  let deleteCharsIndex132 = 0\n  let deleteCharsIndex133 = 0\n  let deleteCharsIndex134 = 0\n  let deleteCharsIndex135 = 0\n  let deleteCharsIndex136 = 0\n  let deleteCharsIndex137 = 0\n  let deleteCharsIndex138 = 0\n  let deleteCharsIndex139 = 0\n  let deleteCharsIndex140 = 0\n  let deleteCharsIndex141 = 0\n  let deleteCharsIndex142 = 0\n  let deleteCharsIndex143 = 0\n  let deleteCharsIndex144 = 0\n  let deleteCharsIndex145 = 0\n  let deleteCharsIndex146 = 0\n  let deleteCharsIndex147 = 0\n  let deleteCharsIndex148 = 0\n  let deleteCharsIndex149 = 0\n  let deleteCharsIndex150 = 0\n  let deleteCharsIndex151 = 0\n  let deleteCharsIndex152 = 0\n  let deleteCharsIndex153 = 0\n  let deleteCharsIndex154 = 0\n  let deleteCharsIndex155 = 0\n  let deleteCharsIndex156 = 0\n  let deleteCharsIndex157 = 0\n  let deleteCharsIndex158 = 0\n  let deleteCharsIndex159 = 0\n  let deleteCharsIndex160 = 0\n  let deleteCharsIndex161 = 0\n  let deleteCharsIndex162 = 0\n  let deleteCharsIndex163 = 0\n  let deleteCharsIndex164 = 0\n  let deleteCharsIndex165 = 0\n  let deleteCharsIndex166", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = [];\n  let str = '';\n  let i = 0;\n  \n  for(let j = 0; j < lst.length; j++) {\n    str += lst[j];\n    \n    if(str.length % 2 === 0) {\n      result.push(str);\n      str = '';\n    }\n    \n    i++;\n  }\n  \n  if(str.length % 2!== 0) {\n    result.push(str);\n  }\n  \n  return result;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of even finger in the i'th drawstring of the stimulation.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  let str = '';\n  let i = 0;\n  \n  for(let j = 0; j < lst.length; j++) {\n    str += lst[j];\n    \n    if(str.length % 2!== 0) {\n      result.push(str);\n      str = '';\n    }\n    \n    i++;\n  }\n  \n  if(str.length % 2!== 0) {\n    result.push(str);\n  }\n  \n  return result;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  let str = '';\n  let i = 0;\n  \n  for(let j = 0; j < lst.length; j++) {\n    str += lst[j];\n    \n    if(str.length % 2 === 0) {\n      result.push(str);\n      str = '';\n    }\n    \n    i++;\n  }\n  \n  if(str.length % 2!== 0) {\n    result.push(str);\n  }\n  \n  return result;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let result = [];\n  let str = '';\n  let i = 0;\n  \n  for(let j = 0; j < lst.length; j++) {\n    str += lst[j];\n    \n    if(str.length % 2 === 0) {\n      result.push(str);\n      str = '';\n    }\n    \n    i++;\n  }\n  \n  if(str.length % 2!== 0) {\n    result.push(str);\n  }\n  \n  return result;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let result = [];\n  let str = '';\n  let i = 0;\n  \n  for(let j = 0; j < lst.length; j++) {\n    str += lst[j];\n    \n    if(str.length % 2 === 0) {\n      result.push(str);\n      str = '';\n    }\n    \n    i++;\n  }\n  \n  if(str.length % 2!== 0) {\n    result.push(str);\n  }\n  \n  return result;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenEvenCount = (lst) => {\n  let result = [];\n  let str = '';\n  let i = 0;\n  \n  for(let j = 0; j < lst.length; j++) {\n    str += lst[j];\n    \n    if(str.length % 2 === 0) {\n      result.push(str);\n      str = '';\n    }\n    \n    i++;\n  }\n  \n  if(str.length % 2!== 0) {\n    result.push(str);\n  }\n  \n  return result;\n};\n\n/*Given a list of strings, where each string consists of alone finger, return a list.\n   Each chemical element i of the end product should be \" the number of leftover elements in the \n   string i of the stimulation. \" where all the i's should be replace by the act \n   of odd finger in the i'th drawstring of the stimulation.\n\n  >>> oddEvenEvenEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum union of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum union of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum union of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum union of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum union of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum union of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum union of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum union of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum union of any non - empty sub - array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum union of any non - empty sub - array \n   of nums.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a unmarried well, \n   and each 1 in a quarrel represents a individual unit of water. \n   Each well has a comparable bucket that can be use to extract urine from it, \n   and all buckets have the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you necessitate to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a unmarried well, \n   and each 1 in a quarrel represents a individual unit of water. \n   Each well has a comparable bucket that can be use to extract urine from it, \n   and all buckets have the like capacity.\n   Your undertaking is to practice the buckets to empty the wells. \n   Output the number of meter you necessitate to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const len = grid.length;\n    const capacity_per_row = capacity / len;\n    const capacity_per_col = capacity / len;\n    const capacity_per_row = Math.max(capacity_per_row, 1);\n    const capacity_per_col = Math.max(capacity_per_col, 1);\n    const capacity_per_row_inv = 1 / capacity_per_row;\n    const capacity_per_col_inv = 1 / capacity_per_col;\n    const capacity_per_row_inv_square = 1 / capacity_per_row * capacity_per_row;\n    const capacity_per_col_inv_square = 1 / capacity_per_col * capacity_per_col;\n    const capacity_per_row_inv_square_2 = 1 / capacity_per_row * capacity_per_row * capacity_per_row;\n    const capacity_per_col_inv_square_2 = 1 / capacity_per_col * capacity_per_col * capacity_per_col;\n    const capacity_per_row_inv_square_3 = 1 / capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row;\n    const capacity_per_col_inv_square_3 = 1 / capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col;\n    const capacity_per_row_inv_square_4 = 1 / capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row;\n    const capacity_per_col_inv_square_4 = 1 / capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col;\n    const capacity_per_row_inv_square_5 = 1 / capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row;\n    const capacity_per_col_inv_square_5 = 1 / capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col;\n    const capacity_per_row_inv_square_6 = 1 / capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row;\n    const capacity_per_col_inv_square_6 = 1 / capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col;\n    const capacity_per_row_inv_square_7 = 1 / capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row;\n    const capacity_per_col_inv_square_7 = 1 / capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col;\n    const capacity_per_row_inv_square_8 = 1 / capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row;\n    const capacity_per_col_inv_square_8 = 1 / capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col;\n    const capacity_per_row_inv_square_9 = 1 / capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row;\n    const capacity_per_col_inv_square_9 = 1 / capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col * capacity_per_col;\n    const capacity_per_row_inv_square_10 = 1 / capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_per_row * capacity_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in descend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-2, -3, -4, -5, -6]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in descend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-2, -3, -4, -5, -6]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in descend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-2, -3, -4, -5, -6]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in descend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-2, -3, -4, -5, -6]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-2, -3, -4, -5, -6]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in descend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-2, -3, -4, -5, -6]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an array of non - minus integer according to \n   number of ones in their binary representation in ascend orderliness. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be enforce like this:\n  >>> sortArray([-6, -5, -4, -3, -2]) == [-2, -3, -4, -5, -6]\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to follow through \n   a routine that come back a list of all words from chain s that contain exactly \n   n consonant, in order these news appear in the chain s.\n   If the string s is empty then the affair should return an empty list.\n   Note: you may assume the input string contains entirely letter and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let j = 0\n  let count = 0\n  let wordCount = 0\n  let wordCountMax = 0\n  let wordCountMin = 0\n  let wordCountMaxMin = 0\n  let wordCountMinMax = 0\n  let wordCountMaxMinMax = 0\n  let wordCountMinMaxMin = 0\n  let wordCountMaxMinMaxMin = 0\n  let wordCountMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMin = 0\n  let wordCountMaxMinMaxMinMaxMin = 0\n  let wordCountMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMin = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMin = 0\n  let wordCountMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMin = 0\n  let wordCountMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let wordCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let word", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stand between \n   two consonant from the correct side of the word (shell sensitive). \n  \n   Vowels in the beginning and ending doesn't consider. refund empty chain if you didn't \n   find any vowel meet the above circumstance. \n\n   You may assume that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stand between \n   two consonant from the correct side of the word (shell sensitive). \n  \n   Vowels in the beginning and ending doesn't consider. refund empty chain if you didn't \n   find any vowel meet the above circumstance. \n\n   You may assume that the given string contains English letter entirely.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsCount2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsCount3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsCount4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsCount5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsCount6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsCount7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsCount8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsCount9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsCount10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsCount11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsCount12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsCount13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsCount14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsCount15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsCount16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsCount17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsCount18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsCount19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsCount20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsCount21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsCount22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsCount23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsCount24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsCount25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsCount26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsCount27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsCount28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsCount29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsCount30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsCount31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsCount32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsCount33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsCount34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsCount35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsCount36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsCount37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsCount38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsCount39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsCount40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsCount41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsCount42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsCount43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsCount44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsCount45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsCount46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsCount47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsCount48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsCount49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsCount50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsCount51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsCount52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsCount53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsCount54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsCount55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsCount56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsCount57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsCount58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsCount59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsCount60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsCount61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsCount62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsCount63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsCount64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsCount65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsCount66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsCount67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsCount68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsCount69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsCount70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsCount71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsCount72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsCount73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsCount74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsCount75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsCount76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsCount77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsCount78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsCount79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsCount80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsCount81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsCount82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsCount83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsCount84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsCount85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsCount86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsCount87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsCount88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsCount89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsCount90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsCount91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsCount92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsCount93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsCount94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsCount95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsCount96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsCount97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsCount98 = 0;\n  let vowelsIndex99 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open \n   digression' (' or airless parenthesis')' merely. \n   Your job is to check if it equal possible to concatenate the two string in\n   some order, that the result string will be estimable. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open \n   digression' (' or airless parenthesis')' merely. \n   Your job is to check if it equal possible to concatenate the two string in\n   some order, that the result string will be estimable. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = []\n  let curr = lst[0]\n  let next = lst[1]\n  let stack = []\n  let stackLen = lst.length\n  let stackIndex = 0\n  let isMatch = false\n  \n  while (stackIndex < stackLen) {\n    if (curr === '(') {\n      stack.push(curr)\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')') {\n      curr = stack.pop()\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(') {\n      isMatch = true\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === ')') {\n      isMatch = true\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === ')' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === ')' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === ')' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = next\n      next = curr\n      stackIndex++\n    } else if (curr === '(' && next === '(' && isMatch) {\n      isMatch = false\n      curr = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the like length. Return nothing in event the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  const maxLength = 0\n  let longestString = ''\n  for (let i = 0; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length > maxLength) {\n      maxLength = currentString.length\n      longestString = currentString\n    }\n  }\n  return longestString\n}\n\n/* Given a string, return the number of characters that make up the string.\n  >>> count('a')\n  3\n  >>> count('aa')\n  2\n  >>> count('aaa')\n  1\n  >>> count('aaaa')\n  0\n  */\nconst count = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) ==='') {\n      count++\n    }\n  }\n  return count\n}\n\n/* Given a string, return the first character that is a vowel.\n  >>> vowel('a')\n  'a'\n  >>> vowel('aa')\n  'a'\n  >>> vowel('aaa')\n  'a'\n  >>> vowel('aaaa')\n  'a'\n  */\nconst vowel = (string) => {\n  let vowel = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      vowel = string.charAt(i)\n    }\n  }\n  return vowel\n}\n\n/* Given a string, return the first character that is a consonant.\n  >>> consonant('a')\n  'a'\n  >>> consonant('aa')\n  'a'\n  >>> consonant('aaa')\n  'a'\n  >>> consonant('aaaa')\n  'a'\n  */\nconst consonant = (string) => {\n  let consonant = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      consonant = string.charAt(i)\n    }\n  }\n  return consonant\n}\n\n/* Given a string, return the first character that is a vowel or consonant.\n  >>> vowelOrConsonant('a')\n  'a'\n  >>> vowelOrConsonant('aa')\n  'a'\n  >>> vowelOrConsonant('aaa')\n  'a'\n  >>> vowelOrConsonant('aaaa')\n  'a'\n  */\nconst vowelOrConsonant = (string) => {\n  let vowelOrConsonant = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      vowelOrConsonant = string.charAt(i)\n    }\n  }\n  return vowelOrConsonant\n}\n\n/* Given a string, return the first character that is a vowel or consonant or \n   a space. Return nothing in event the input string is empty.\n  >>> vowelOrConsonantOrSpace('a')\n  ''\n  >>> vowelOrConsonantOrSpace('aa')\n  ''\n  >>> vowelOrConsonantOrSpace('aaa')\n  ''\n  >>> vowelOrConsonantOrSpace('aaaa')\n  ''\n  */\nconst vowelOrConsonantOrSpace = (string) => {\n  let vowelOrConsonantOrSpace = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      vowelOrConsonantOrSpace = string.charAt(i)\n    }\n  }\n  return vowelOrConsonantOrSpace\n}\n\n/* Given a string, return the first character that is a vowel or consonant or \n   a space or an apostrophe. Return nothing in event the input string is empty.\n  >>> vowelOrConsonantOrSpaceOrApostrophe('a')\n  ''\n  >>> vowelOrConsonantOrSpaceOrApostrophe('aa')\n  ''\n  >>> vowelOrConsonantOrSpaceOrApostrophe('aaa')\n  ''\n  >>> vowelOrConsonantOrSpaceOrApostrophe('aaaa')\n  ''\n  */\nconst vowelOrConsonantOrSpaceOrApostrophe = (string) => {\n  let vowelOrConsonantOrSpaceOrApostrophe = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      vowelOrConsonantOrSpaceOrApostrophe = string.charAt(i)\n    }\n  }\n  return vowelOrConsonantOrSpaceOrApostrophe\n}\n\n/* Given a string, return the first character that is a vowel or consonant or \n   a space or an apostrophe or an apostrophe. Return nothing in event the input string is empty.\n  >>> vowelOrConsonantOrSpaceOrApostropheOrApostrophe('a')\n  ''\n  >>> vowelOrConsonantOrSpaceOrApostropheOrApostrophe('aa')\n  ''\n  >>> vowelOrConsonantOrSpaceOrApostropheOrApostrophe('aaa')\n  ''\n  >>> vowelOrConsonantOrSpaceOrApostropheOrApostrophe('aaaa')\n  ''\n  */\nconst vowelOrConsonantOrSpaceOrApostropheOrApostrophe = (string) => {\n  let vowelOrConsonantOrSpaceOrApostropheOrApostrophe = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      vowelOrConsonantOrSpaceOrApostropheOrApostrophe = string.charAt(i)\n    }\n  }\n  return vowelOrConsonantOrSpaceOrApostropheOrApostrophe\n}\n\n/* Given a string, return the first character that is a vowel or consonant or \n   a space or an apostrophe or an apostrophe or an apostrophe. Return nothing in event the input string is empty.\n  >>> vowelOrConsonantOrSpaceOrApostropheOrApostropheOrApostrophe('a')\n  ''\n  >>> vowelOrConsonantOrSpaceOrApostropheOrApostropheOrApostrophe('aa')\n  ''\n  >>> vowelOrConsonantOrSpaceOrApostropheOrApostropheOrApostrophe('aaa')\n  ''\n  >>> vowelOrConsonantOrSpaceOrApostropheOrApostropheOrApostrophe('aaaa')\n  ''\n  */\nconst vowelOrConsonantOrSpaceOrApostropheOrApostropheOrApostrophe = (string) => {\n  let vowelOrConsonantOrSpaceOrApostropheOrApostropheOrApostrophe = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      vowelOrConsonantOrSpaceOrApostropheOrApostropheOrApostrophe = string.charAt(i)\n    }\n  }\n  return vowelOrConsonantOrSpaceOrApostropheOrApostropheOrApostrophe\n}\n\n/* Given a string, return the first character that is a vowel or consonant or \n   a space or an apostrophe or an apostrophe or an apostrophe or an apostrophe. Return nothing in event the input string is empty.\n  >>> vowelOrConsonantOrSpaceOrApostropheOrApostrop", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a classify list \n   of distance k with the maximum k number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let maxDistance = Number.POSITIVE_INFINITY;\n  let maxIndex = -1;\n  let maxElement = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxElement) {\n      maxDistance = maxDistance;\n      maxIndex = i;\n      maxElement = arr[i];\n    }\n  }\n  return [maxIndex, maxDistance];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  let result = [];\n  let stack = [];\n  let maxSum = Number.POSITIVE_INFINITY;\n  let maxIndex = -1;\n  let maxElement = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxElement) {\n      maxSum = maxSum + nums[i];\n      maxIndex = i;\n      maxElement = nums[i];\n    }\n    if (stack.length >= k) {\n      stack.push(maxIndex);\n    }\n  }\n  stack.push(maxIndex);\n  while (stack.length) {\n    let index = stack.pop();\n    let sum = nums[index] + maxSum;\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxIndex = index;\n    }\n  }\n  result.push(maxIndex);\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  let result = [];\n  let stack = [];\n  let maxSum = Number.POSITIVE_INFINITY;\n  let maxIndex = -1;\n  let maxElement = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxElement) {\n      maxSum = maxSum + nums[i];\n      maxIndex = i;\n      maxElement = nums[i];\n    }\n    if (stack.length >= k) {\n      stack.push(maxIndex);\n    }\n    if (nums[i] < maxElement) {\n      stack.push(maxIndex);\n    }\n  }\n  stack.push(maxIndex);\n  while (stack.length) {\n    let index = stack.pop();\n    let sum = nums[index] + maxSum;\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxIndex = index;\n    }\n  }\n  result.push(maxIndex);\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  let result = [];\n  let stack = [];\n  let maxSum = Number.POSITIVE_INFINITY;\n  let maxIndex = -1;\n  let maxElement = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxElement) {\n      maxSum = maxSum + nums[i];\n      maxIndex = i;\n      maxElement = nums[i];\n    }\n    if (stack.length >= k) {\n      stack.push(maxIndex);\n    }\n    if (nums[i] < maxElement) {\n      stack.push(maxIndex);\n    }\n    if (nums[i] === maxElement) {\n      result.push(maxIndex);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  let result = [];\n  let stack = [];\n  let maxSum = Number.POSITIVE_INFINITY;\n  let maxIndex = -1;\n  let maxElement = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxElement) {\n      maxSum = maxSum + nums[i];\n      maxIndex = i;\n      maxElement = nums[i];\n    }\n    if (stack.length >= k) {\n      stack.push(maxIndex);\n    }\n    if (nums[i] < maxElement) {\n      stack.push(maxIndex);\n    }\n    if (nums[i] === maxElement) {\n      result.push(maxIndex);\n    }\n    if (nums[i] === maxElement && stack.length >= k) {\n      result.push(maxIndex);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  let result = [];\n  let stack = [];\n  let maxSum = Number.POSITIVE_INFINITY;\n  let maxIndex = -1;\n  let maxElement = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxElement) {\n      maxSum = maxSum + nums[i];\n      maxIndex = i;\n      maxElement = nums[i];\n    }\n    if (stack.length >= k) {\n      stack.push(maxIndex);\n    }\n    if (nums[i] < maxElement) {\n      stack.push(maxIndex);\n    }\n    if (nums[i] === maxElement) {\n      result.push(maxIndex);\n    }\n    if (nums[i] === maxElement && stack.length >= k) {\n      result.push(maxIndex);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(nums, k) {\n  let result = [];\n  let stack = [];\n  let maxSum = Number.POSITIVE_INFINITY;\n  let maxIndex = -1;\n  let maxElement = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxElement) {\n      maxSum = maxSum + nums[i];\n      maxIndex = i;\n      maxElement = nums[i];\n    }\n    if (stack.length >= k) {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res = Math.max(res, lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non - empty list of integers, return the union of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solutionOdd = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      res = Math.max(res, lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solutionEven = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res = Math.max(res, lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non - empty list of integers, return the union of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solutionOddEven = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      res = Math.max(res, lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non - empty list of integers, return the union of all of the leftover component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solutionEvenOdd = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      res = Math.max(res, lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non - empty list of integers, return the union of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solutionOddEvenOdd = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      res = Math.max(res, lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non - empty list of integers, return the union of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solutionEvenOddEvenOdd = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      res = Math.max(res, lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non - empty list of integers, return the union of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solutionOddEvenOddEvenOdd = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      res = Math.max(res, lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non - empty list of integers, return the union of all of the leftover component that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solutionOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non - empty array of integer arr and an integer k, return\n   the union of the elements with at most two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElements(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsO = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsO(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsP = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsP(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsQ = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsQ(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsR = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsR(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsS = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsS(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsT = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsT(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsU = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsU(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsV = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsV(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsW = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsW(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsX = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsX(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsY = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsY(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElementsZ = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElementsZ(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElements$ = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElements$(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElements% = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElements%(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElements^ = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElements^(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElements& = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElements&(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElements<< = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElements<<(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElements>> = (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElements>>(arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElements>>= (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      result += arr[i];\n    }\n  }\n  if (k > 0 && result >= 10) {\n    result = result + addElements>>= (arr.slice(0, k), k);\n  }\n  return result;\n};\n\nconst addElements<<= (arr, k) => {\n  let result = 0;\n  for (let i = 0; i < arr.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the leftover number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the leftover number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that concerns a succession defined \n   as follows: begin with any positive integer n. Then each term is obtained from the \n   former condition as follow: if the previous terminus is even, the adjacent condition is one one-half of \n   the former condition. If the previous condition be odd, the adjacent term is 3 time the previous \n   term plus 1. The guess is that no matter what value of n, the sequence will always achieve 1. \n\n   eminence: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  let oddCollatz = [1, 1];\n  let oddCollatzIndex = 0;\n  let oddCollatzIndex2 = 0;\n  let oddCollatzIndex3 = 0;\n  let oddCollatzIndex4 = 0;\n  let oddCollatzIndex5 = 0;\n  let oddCollatzIndex6 = 0;\n  let oddCollatzIndex7 = 0;\n  let oddCollatzIndex8 = 0;\n  let oddCollatzIndex9 = 0;\n  let oddCollatzIndex10 = 0;\n  let oddCollatzIndex11 = 0;\n  let oddCollatzIndex12 = 0;\n  let oddCollatzIndex13 = 0;\n  let oddCollatzIndex14 = 0;\n  let oddCollatzIndex15 = 0;\n  let oddCollatzIndex16 = 0;\n  let oddCollatzIndex17 = 0;\n  let oddCollatzIndex18 = 0;\n  let oddCollatzIndex19 = 0;\n  let oddCollatzIndex20 = 0;\n  let oddCollatzIndex21 = 1;\n  let oddCollatzIndex22 = 0;\n  let oddCollatzIndex23 = 0;\n  let oddCollatzIndex24 = 0;\n  let oddCollatzIndex25 = 0;\n  let oddCollatzIndex26 = 0;\n  let oddCollatzIndex27 = 0;\n  let oddCollatzIndex28 = 0;\n  let oddCollatzIndex29 = 0;\n  let oddCollatzIndex30 = 0;\n  let oddCollatzIndex31 = 1;\n  let oddCollatzIndex32 = 0;\n  let oddCollatzIndex33 = 0;\n  let oddCollatzIndex34 = 0;\n  let oddCollatzIndex35 = 0;\n  let oddCollatzIndex36 = 0;\n  let oddCollatzIndex37 = 0;\n  let oddCollatzIndex38 = 0;\n  let oddCollatzIndex39 = 0;\n  let oddCollatzIndex40 = 0;\n  let oddCollatzIndex41 = 1;\n  let oddCollatzIndex42 = 1;\n  let oddCollatzIndex43 = 0;\n  let oddCollatzIndex44 = 0;\n  let oddCollatzIndex45 = 0;\n  let oddCollatzIndex46 = 0;\n  let oddCollatzIndex47 = 0;\n  let oddCollatzIndex48 = 0;\n  let oddCollatzIndex49 = 0;\n  let oddCollatzIndex50 = 0;\n  let oddCollatzIndex51 = 1;\n  let oddCollatzIndex52 = 1;\n  let oddCollatzIndex53 = 0;\n  let oddCollatzIndex54 = 0;\n  let oddCollatzIndex55 = 0;\n  let oddCollatzIndex56 = 0;\n  let oddCollatzIndex57 = 0;\n  let oddCollatzIndex58 = 0;\n  let oddCollatzIndex59 = 0;\n  let oddCollatzIndex60 = 0;\n  let oddCollatzIndex61 = 1;\n  let oddCollatzIndex62 = 1;\n  let oddCollatzIndex63 = 0;\n  let oddCollatzIndex64 = 0;\n  let oddCollatzIndex65 = 0;\n  let oddCollatzIndex66 = 0;\n  let oddCollatzIndex67 = 0;\n  let oddCollatzIndex68 = 0;\n  let oddCollatzIndex69 = 0;\n  let oddCollatzIndex70 = 0;\n  let oddCollatzIndex71 = 1;\n  let oddCollatzIndex72 = 1;\n  let oddCollatzIndex73 = 0;\n  let oddCollatzIndex74 = 0;\n  let oddCollatzIndex75 = 0;\n  let oddCollatzIndex76 = 0;\n  let oddCollatzIndex77 = 0;\n  let oddCollatzIndex78 = 0;\n  let oddCollatzIndex79 = 0;\n  let oddCollatzIndex80 = 0;\n  let oddCollatzIndex81 = 1;\n  let oddCollatzIndex82 = 1;\n  let oddCollatzIndex83 = 0;\n  let oddCollatzIndex84 = 0;\n  let oddCollatzIndex85 = 0;\n  let oddCollatzIndex86 = 0;\n  let oddCollatzIndex87 = 0;\n  let oddCollatzIndex88 = 0;\n  let oddCollatzIndex89 = 0;\n  let oddCollatzIndex90 = 0;\n  let oddCollatzIndex91 = 1;\n  let oddCollatzIndex92 = 1;\n  let oddCollatzIndex93 = 0;\n  let oddCollatzIndex94 = 0;\n  let oddCollatzIndex95 = 0;\n  let oddCollatzIndex96 = 0;\n  let oddCollatzIndex97 = 0;\n  let oddCollatzIndex98 = 0;\n  let oddCollatzIndex99 = 0;\n  let oddCollatzIndex100 = 0;\n  let oddCollatzIndex101 = 1;\n  let oddCollatzIndex102 = 1;\n  let oddCollatzIndex103 = 0;\n  let oddCollatzIndex104 = 0;\n  let oddCollatzIndex105 = 0;\n  let oddCollatzIndex106 = 1;\n  let oddCollatzIndex107 = 1;\n  let oddCollatzIndex108 = 1;\n  let oddCollatzIndex109 = 0;\n  let oddCollatzIndex110 = 0;\n  let oddCollatzIndex111 = 1;\n  let oddCollatzIndex112 = 1;\n  let oddCollatzIndex113 = 0;\n  let oddCollatzIndex114 = 0;\n  let oddCollatzIndex115 = 0;\n  let oddCollatzIndex116 = 0;\n  let oddCollatzIndex117 = 0;\n  let oddCollatzIndex118 = 0;\n  let oddCollatzIndex119 = 0;\n  let oddCollatzIndex120 = 0;\n  let oddCollatzIndex121 = 0;\n  let oddCollatzIndex122 = 0;\n  let oddCollatzIndex123 = 0;\n  let oddCollatzIndex124 = 0;\n  let oddCollatzIndex125 = 0;\n  let oddCollatzIndex126 = 0;\n  let oddCollatzIndex127 = 0;\n  let oddCollatzIndex128 = 0;\n  let oddCollatzIndex129 = 0;\n  let oddCollatzIndex130 = 0;\n  let oddCollatzIndex131 = 0;\n  let oddCollatzIndex132 = 0;\n  let oddCollatzIndex133 = 0;\n  let oddCollatzIndex134 = 0;\n  let oddCollatzIndex135 = 0;\n  let oddCollatzIndex136 = 0;\n  let oddCollatzIndex137 = 0;\n  let oddCollatzIndex138 = 0;\n  let oddCollatzIndex139 = 0;\n  let oddCollatzIndex140 = 0;\n  let oddCollatzIndex141 = 0;\n  let oddCollatzIndex142 = 0;\n  let oddCollatzIndex143 = 0;\n  let oddCollatzIndex144 = 0;\n  let oddCollatzIndex145 = 0;\n  let oddCollat", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date drawstring and \n   rejoinder true if the date is valid otherwise delusive. \n   The date is valid if all of the following dominion equal satisfied: \n   1. The date chain is not empty. \n   2. The number of day is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for months 4,6,9,11. And, the number of sidereal day is not less than 1 or gamey than 29 for the calendar month 2. \n   3. The month should not exist less than 1 or higher than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which validates a given date drawstring and \n   rejoinder true if the date is valid otherwise delusive. \n   The date is valid if all of the following dominion equal satisfied: \n   1. The date chain is not empty. \n   2. The number of day is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for months 4,6,9,11. And, the number of sidereal day is not less than 1 or gamey than 29 for the calendar month 2. \n   3. The month should not exist less than 1 or higher than 12. \n   4. The date should be in the format: mm - doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('-').map(Number);\n  const [dom, div, year] = date.split('", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splitWordsArr = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      splitWordsArr.push(word);\n    }\n  });\n  return splitWordsArr;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArr = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splitWordsArr = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      splitWordsArr.push(word);\n    }\n  });\n  return splitWordsArr;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArr2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splitWordsArr = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      splitWordsArr.push(word);\n    }\n  });\n  return splitWordsArr;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArr3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splitWordsArr = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      splitWordsArr.push(word);\n    }\n  });\n  return splitWordsArr;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArr4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splitWordsArr = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      splitWordsArr.push(word);\n    }\n  });\n  return splitWordsArr;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArr5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splitWordsArr = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      splitWordsArr.push(word);\n    }\n  });\n  return splitWordsArr;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArr6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splitWordsArr = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      splitWordsArr.push(word);\n    }\n  });\n  return splitWordsArr;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArr7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splitWordsArr = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      splitWordsArr.push(word);\n    }\n  });\n  return splitWordsArr;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you \n   should split on comma',' if no commas exists you should return the phone number of lower - case letter with curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArr8 = (txt", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted \n   in ascending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  lst.sort((a, b) => a - b)\n  sorted = true\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in descending order. If list hold more than 1 duplicate of the same \n   number, return false. Assume no damaging numeral and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isDescending = (lst) => {\n  let sorted = false\n  lst.sort((a, b) => b - a)\n  sorted = true\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order and in descending order. If list hold more than 1 \n   duplicate of the same number, return false. Assume no damaging \n   numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedAndDescending = (lst) => {\n  let sorted = false\n  lst.sort((a, b) => b - a)\n  sorted = true\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order and in descending order. If list hold more than 1 \n   duplicate of the same number, return false. Assume no damaging \n   numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedAndDescendingAndAscending = (lst) => {\n  let sorted = false\n  lst.sort((a, b) => b - a)\n  sorted = true\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order and in descending order. If list hold more than 1 \n   duplicate of the same number, return false. Assume no damaging \n   numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedAndDescendingAndDescendingAscending = (lst) => {\n  let sorted = false\n  lst.sort((a, b) => b - a)\n  sorted = true\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order and in descending order. If list hold more than 1 \n   duplicate of the same number, return false. Assume no damaging \n   numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedAndDescendingAndDescendingDescendingAscending = (lst) => {\n  let sorted = false\n  lst.sort((a, b) => b - a)\n  sorted = true\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order and in descending order. If list hold more than 1 \n   duplicate of the same number, return false. Assume no damaging \n   numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedAndDescendingAndDescendingDescendingAscending = (lst) => {\n  let sorted = false\n  lst.sort((a, b) => b - a)\n  sorted = true\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted \n   in ascending order and in descending order. If list hold more than 1 \n   duplicate of the same number, return false. Assume no damaging \n   numeral and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval is a couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals, \n   where each interval is a couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let start3 = Math.min(start1, end1);\n  let end3 = Math.min(start2, end2);\n  let start4 = Math.min(start3, end3);\n  let end4 = Math.min(start4, end4);\n  let start5 = Math.min(start4, end4);\n  let end5 = Math.min(start5, end5);\n  let start6 = Math.min(start5, end5);\n  let end6 = Math.min(start6, end6);\n  let start7 = Math.min(start6, end6);\n  let end7 = Math.min(start7, end7);\n  let start8 = Math.min(start7, end7);\n  let end8 = Math.min(start8, end8);\n  let start9 = Math.max(start1, end1);\n  let end9 = Math.max(start2, end2);\n  let start10 = Math.max(start3, end3);\n  let end10 = Math.max(start4, end4);\n  let start11 = Math.max(start5, end5);\n  let end11 = Math.max(start6, end6);\n  let start12 = Math.max(start7, end7);\n  let end12 = Math.max(start8, end8);\n  let start13 = Math.max(start9, end9);\n  let end13 = Math.max(start10, end10);\n  let start14 = Math.max(start11, end11);\n  let end14 = Math.max(start12, end12);\n  let start15 = Math.max(start13, end13);\n  let end15 = Math.max(start14, end14);\n  let start16 = Math.max(start15, end15);\n  let end16 = Math.max(start16, end16);\n  let start17 = Math.max(start16, end16);\n  let end17 = Math.max(start17, end17);\n  let start18 = Math.max(start17, end17);\n  let end18 = Math.max(start18, end18);\n  let start19 = Math.max(start18, end18);\n  let end19 = Math.max(start19, end19);\n  let start20 = Math.max(start19, end19);\n  let end20 = Math.max(start20, end20);\n  let start21 = Math.min(start1, end1);\n  let end21 = Math.min(start2, end2);\n  let start22 = Math.min(start3, end3);\n  let end22 = Math.min(start4, end4);\n  let start23 = Math.min(start5, end5);\n  let end23 = Math.min(start6, end6);\n  let start24 = Math.min(start7, end7);\n  let end24 = Math.min(start8, end8);\n  let start25 = Math.min(start9, end9);\n  let end25 = Math.min(start10, end10);\n  let start26 = Math.min(start11, end11);\n  let end26 = Math.min(start12, end12);\n  let start27 = Math.min(start13, end13);\n  let end27 = Math.min(start14, end14);\n  let start28 = Math.min(start15, end15);\n  let end28 = Math.min(start16, end16);\n  let start29 = Math.min(start16, end16);\n  let end29 = Math.min(start17, end17);\n  let start30 = Math.min(start17, end17);\n  let end30 = Math.min(start18, end18);\n  let start31 = Math.min(start18, end18);\n  let end31 = Math.min(start19, end19);\n  let start32 = Math.min(start19, end19);\n  let end32 = Math.min(start20, end20);\n  let start33 = Math.min(start20, end20);\n  let end33 = Math.min(start21, end21);\n  let start34 = Math.min(start21, end21);\n  let end34 = Math.min(start22, end22);\n  let start35 = Math.min(start22, end22);\n  let end35 = Math.min(start23, end23);\n  let start36 = Math.min(start23, end23);\n  let end36 = Math.min(start24, end24);\n  let start37 = Math.min(start24, end24);\n  let end37 = Math.min(start25, end25);\n  let start38 = Math.min(start25, end25);\n  let end38 = Math.min(start26, end26);\n  let start39 = Math.min(start26, end26);\n  let end39 = Math.min(start27, end27);\n  let start40 = Math.min(start27, end27);\n  let end40 = Math.min(start28, end28);\n  let start41 = Math.min(start28, end28);\n  let end41 = Math.min(start29, end29);\n  let start42 = Math.min(start29, end29);\n  let end42 = Math.min(start30, end30);\n  let start43 = Math.min(start30, end30);\n  let end43 = Math.min(start31, end31);\n  let start44 = Math.min(start31, end31);\n  let end44 = Math.min(start32, end32);\n  let start45 = Math.min(start32, end32);\n  let end45 = Math.min(start33, end33);\n  let start46 = Math.min(start33, end33);\n  let end46 = Math.min(start34, end34);\n  let start47 = Math.min(start34, end34);\n  let end47 = Math.min(start35, end35);\n  let start48 = Math.min(start35, end35);\n  let end48 = Math.min(start36, end36);\n  let start49 = Math.min(start36, end36);\n  let end49 = Math.min(start37, end37);\n  let start50 = Math.min(start37, end37);\n  let end50 = Math.min(start38, end38);\n  let start51 = Math.min(start38, end38);\n  let end51 = Math.min(start39, end39);\n  let start52 = Math.min(start39, end39);\n  let end52 = Math.min(start40, end40);\n  let start53 = Math.min(start40, end40);\n  let end53 = Math.min(start41, end41);\n  let start54 = Math.min(start41, end41);\n  let end54 = Math.min(start42, end42);\n  let start55 = Math.min(start42, end42);\n  let end55 = Math.min(start43, end43);\n  let start56 = Math.min(start43, end43);\n  let end56 = Math.min(start44, end44);\n  let start57 = Math.min(start44, end44);\n  let end57 = Math.min(start45, end45);\n  let start58 = Math.min(start45, end45);\n  let end58 = Math.min(start46, end46);\n  let start59 = Math.min(start46, end46);\n  let end59 = Math.min(start47, end47);\n  let start60 = Math.min(start47, end47);\n  let end60 = Math.min(start48, end48);\n  let start61 = Math.min(start48, end48);\n  let end61 = Math.min(start49, end49);\n  let start62 = Math.min(start49, end49);\n  let end62 = Math.min(start50, end50);\n  let start63 = Math.min(start50, end50);\n  let end63 = Math.min(start51, end51);\n  let start64 = Math.min(start51, end51);\n  let end64 = Math.min(start52, end52);\n  let start65 = Math.min(start", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 or 0. \n   bill: return nothing for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    sign *= arr[i];\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n   sum of order of magnitude of integer multiply by product of all sign \n   of each act in the array, represented by 1, -1 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cellular telephone of the grid contains a value. Every integer in the compass [ 1, N * N ] \n   inclusive appears precisely once on the cells of the grid.\n\n   You accept to discover the minimum way of duration k in the grid. You can start \n   from any cellular telephone, and in each dance step you can act to any of the neighbor cell, \n   in other words, you can survive to cellular telephone which share an edge with you current \n   cell. \n   Please notice that a path of length k entail chew the fat exactly k cellular telephone (not \n   necessarily distinct). \n   You CANNOT sound off the grid.\n   A path A (of duration k) is consider less than a path b-complex vitamin (of distance k) if \n   after induce the ordered lists of the value on the cell that A and B go \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the value on the cells that the minimal way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N > = 2) and a positive integer k, \n   each cellular telephone of the grid contains a value. Every integer in the compass [ 1, N * N ] \n   inclusive appears precisely once on the cells of the grid.\n\n   You accept to discover the minimum way of duration k in the grid. You can start \n   from any cellular telephone, and in each dance step you can act to any of the neighbor cell, \n   in other words, you can survive to cellular telephone which share an edge with you current \n   cell. \n   Please notice that a path of length k entail chew the fat exactly k cellular telephone (not \n   necessarily distinct). \n   You CANNOT sound off the grid.\n   A path A (of duration k) is consider less than a path b-complex vitamin (of distance k) if \n   after induce the ordered lists of the value on the cell that A and B go \n   through (let's predict them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the value on the cells that the minimal way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  let lst_C = new Array(grid.length).fill(0);\n  let lst_D = new Array(grid.length).fill(0);\n  let lst_E = new Array(grid.length).fill(0);\n  let lst_F = new Array(grid.length).fill(0);\n  let lst_G = new Array(grid.length).fill(0);\n  let lst_H = new Array(grid.length).fill(0);\n  let lst_I = new Array(grid.length).fill(0);\n  let lst_J = new Array(grid.length).fill(0);\n  let lst_K = new Array(grid.length).fill(0);\n  let lst_L = new Array(grid.length).fill(0);\n  let lst_M = new Array(grid.length).fill(0);\n  let lst_N = new Array(grid.length).fill(0);\n  let lst_O = new Array(grid.length).fill(0);\n  let lst_P = new Array(grid.length).fill(0);\n  let lst_Q = new Array(grid.length).fill(0);\n  let lst_R = new Array(grid.length).fill(0);\n  let lst_S = new Array(grid.length).fill(0);\n  let lst_T = new Array(grid.length).fill(0);\n  let lst_U = new Array(grid.length).fill(0);\n  let lst_V = new Array(grid.length).fill(0);\n  let lst_W = new Array(grid.length).fill(0);\n  let lst_X = new Array(grid.length).fill(0);\n  let lst_Y = new Array(grid.length).fill(0);\n  let lst_Z = new Array(grid.length).fill(0);\n  let lst_a = new Array(grid.length).fill(0);\n  let lst_b = new Array(grid.length).fill(0);\n  let lst_c = new Array(grid.length).fill(0);\n  let lst_d = new Array(grid.length).fill(0);\n  let lst_e = new Array(grid.length).fill(0);\n  let lst_f = new Array(grid.length).fill(0);\n  let lst_g = new Array(grid.length).fill(0);\n  let lst_h = new Array(grid.length).fill(0);\n  let lst_i = new Array(grid.length).fill(0);\n  let lst_j = new Array(grid.length).fill(0);\n  let lst_k = new Array(grid.length).fill(0);\n  let lst_l = new Array(grid.length).fill(0);\n  let lst_m = new Array(grid.length).fill(0);\n  let lst_n = new Array(grid.length).fill(0);\n  let lst_o = new Array(grid.length).fill(0);\n  let lst_p = new Array(grid.length).fill(0);\n  let lst_q = new Array(grid.length).fill(0);\n  let lst_r = new Array(grid.length).fill(0);\n  let lst_s = new Array(grid.length).fill(0);\n  let lst_t = new Array(grid.length).fill(0);\n  let lst_u = new Array(grid.length).fill(0);\n  let lst_v = new Array(grid.length).fill(0);\n  let lst_w = new Array(grid.length).fill(0);\n  let lst_x = new Array(grid.length).fill(0);\n  let lst_y = new Array(grid.length).fill(0);\n  let lst_z = new Array(grid.length).fill(0);\n  let lst_A = new Array(grid.length).fill(0);\n  let lst_B = new Array(grid.length).fill(0);\n  let lst_C = new Array(grid.length).fill(0);\n  let lst_D = new Array(grid.length).fill(0);\n  let lst_E = new Array(grid.length).fill(0);\n  let lst_F = new Array(grid.length).fill(0);\n  let lst_G = new Array(grid.length).fill(0);\n  let lst_H = new Array(grid.length).fill(0);\n  let lst_I = new Array(grid.length).fill(0);\n  let lst_J = new Array(grid.length).fill(0);\n  let lst_K = new Array(grid.length).fill(0);\n  let lst_L = new Array(grid.length).fill(0);\n  let lst_M = new Array(grid.length).fill(0);\n  let lst_N = new Array(grid.length).fill(0);\n  let lst_O = new Array(grid.length).fill(0);\n  let lst_P = new Array(grid.length).fill(0);\n  let lst_Q = new Array(grid.length).fill(0);\n  let lst_R = new Array(grid.length).fill(0);\n  let lst_S = new Array(grid.length).fill(0);\n  let lst_T = new Array(grid.length).fill(0);\n  let lst_U = new Array(grid.length).fill(0);\n  let lst_V = new Array(grid.length).fill(0);\n  let lst_W = new Array(grid.length).fill(0);\n  let lst_X = new Array(grid.length).fill(0);\n  let lst_Y = new Array(grid.length).fill(0);\n  let lst_Z = new Array(grid.length).fill(0);\n  let lst_a = new Array(grid.length).fill(0);\n  let lst_b = new Array(grid.length).fill(0);\n  let lst_c = new Array(grid.length).fill(0);\n  let lst_d = new Array(grid.length).fill(0);\n  let lst_e = new Array(grid.length).fill(0);\n  let lst_f = new Array(grid.length).fill(0);\n  let lst_g = new Array(grid.length).fill(0);\n  let lst_h = new Array(grid.length).fill(0);\n  let lst_i = new Array(grid.length).fill(0);\n  let lst_j = new Array(grid.length).fill(0);\n  let lst_k = new Array(grid.length).fill(0);\n  let lst_l = new Array(grid.length).fill(0);\n  let lst_m = new Array(grid.length).fill(0);\n  let lst_n = new Array(grid.length).fill(0);\n  let lst_o = new Array(grid.length).fill(0);\n  let lst_p = new Array(grid.length).fill(0);\n  let lst_q = new Array(grid.length).fill(0);\n  let lst_r = new Array(grid.length).fill(0);\n  let lst_s = new Array(grid.length).fill(0);\n  let lst_t = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return gcd(a, b)\n}\n\n/**\n * Return a new integer that is the sum of the two given integers\n * >>> add(1, 3)\n  4\n  >>> add(3, 1)\n  5\n  >>> add(3, 2)\n  6\n  >>> add(3, 3)\n  7\n  >>> add(3, 4)\n  8\n  >>> add(3, 5)\n  9\n  >>> add(3, 6)\n  10\n  >>> add(3, 7)\n  11\n  >>> add(3, 8)\n  12\n  >>> add(3, 9)\n  13\n  >>> add(3, 10)\n  14\n  >>> add(3, 11)\n  15\n  >>> add(3, 12)\n  16\n  >>> add(3, 13)\n  17\n  >>> add(3, 14)\n  18\n  >>> add(3, 15)\n  19\n  >>> add(3, 16)\n  20\n  >>> add(3, 17)\n  21\n  >>> add(3, 18)\n  22\n  >>> add(3, 19)\n  23\n  >>> add(3, 20)\n  24\n  >>> add(3, 21)\n  25\n  >>> add(3, 22)\n  26\n  >>> add(3, 23)\n  27\n  >>> add(3, 24)\n  28\n  >>> add(3, 25)\n  29\n  >>> add(3, 26)\n  30\n  >>> add(3, 27)\n  31\n  >>> add(3, 28)\n  32\n  >>> add(3, 29)\n  33\n  >>> add(3, 30)\n  34\n  >>> add(3, 31)\n  35\n  >>> add(3, 32)\n  36\n  >>> add(3, 33)\n  37\n  >>> add(3, 34)\n  38\n  >>> add(3, 35)\n  39\n  >>> add(3, 36)\n  40\n  >>> add(3, 37)\n  41\n  >>> add(3, 38)\n  42\n  >>> add(3, 39)\n  43\n  >>> add(3, 40)\n  44\n  >>> add(3, 41)\n  45\n  >>> add(3, 42)\n  46\n  >>> add(3, 43)\n  47\n  >>> add(3, 44)\n  48\n  >>> add(3, 45)\n  49\n  >>> add(3, 46)\n  50\n  >>> add(3, 47)\n  51\n  >>> add(3, 48)\n  52\n  >>> add(3, 49)\n  53\n  >>> add(3, 50)\n  54\n  >>> add(3, 51)\n  55\n  >>> add(3, 52)\n  56\n  >>> add(3, 53)\n  57\n  >>> add(3, 54)\n  58\n  >>> add(3, 55)\n  59\n  >>> add(3, 56)\n  60\n  >>> add(3, 57)\n  61\n  >>> add(3, 58)\n  62\n  >>> add(3, 59)\n  63\n  >>> add(3, 60)\n  64\n  >>> add(3, 61)\n  65\n  >>> add(3, 62)\n  66\n  >>> add(3, 63)\n  67\n  >>> add(3, 64)\n  68\n  >>> add(3, 65)\n  69\n  >>> add(3, 66)\n  70\n  >>> add(3, 67)\n  71\n  >>> add(3, 68)\n  72\n  >>> add(3, 69)\n  73\n  >>> add(3, 70)\n  74\n  >>> add(3, 71)\n  75\n  >>> add(3, 72)\n  76\n  >>> add(3, 73)\n  77\n  >>> add(3, 74)\n  78\n  >>> add(3, 75)\n  79\n  >>> add(3, 76)\n  80\n  >>> add(3, 77)\n  81\n  >>> add(3, 78)\n  82\n  >>> add(3, 79)\n  83\n  >>> add(3, 80)\n  84\n  >>> add(3, 81)\n  85\n  >>> add(3, 82)\n  86\n  >>> add(3, 83)\n  87\n  >>> add(3, 84)\n  88\n  >>> add(3, 85)\n  89\n  >>> add(3, 86)\n  90\n  >>> add(3, 87)\n  91\n  >>> add(3, 88)\n  92\n  >>> add(3, 89)\n  93\n  >>> add(3, 90)\n  94\n  >>> add(3, 91)\n  95\n  >>> add(3, 92)\n  96\n  >>> add(3, 93)\n  97\n  >>> add(3, 94)\n  98\n  >>> add(3, 95)\n  99\n  >>> add(3, 96)\n  100\n  >>> add(3, 97)\n  101\n  >>> add(3, 98)\n  102\n  >>> add(3, 99)\n  103\n  >>> add(3, 100)\n  104\n  >>> add(3, 101)\n  105\n  >>> add(3, 102)\n  106\n  >>> add(3, 103)\n  107\n  >>> add(3, 104)\n  108\n  >>> add(3, 105)\n  109\n  >>> add(3, 106)\n  110\n  >>> add(3, 107)\n  111\n  >>> add(3, 108)\n  112\n  >>> add(3, 109)\n  113\n  >>> add(3, 110)\n  114\n  >>> add(3, 111)\n  115\n  >>> add(3, 112)\n  116\n  >>> add(3, 113)\n  117\n  >>> add(3, 114)\n  118\n  >>> add(3, 115)\n  119\n  >>> add(3, 116)\n  120\n  >>> add(3, 117)\n  121\n  >>> add(3, 118)\n  122\n  >>> add(3, 119)\n  123\n  >>> add(3, 120)\n  124\n  >>> add(3, 121)\n  125\n  >>> add(3, 122)\n  126\n  >>> add(3, 123)\n  127\n  >>> add(3, 124)\n  128\n  >>> add(3, 125)\n  129\n  >>> add(3, 126)\n  130\n  >>> add(3, 127)\n  131\n  >>> add(3, 128)\n  132\n  >>> add(3, 129)\n  133\n  >>> add(3, 130)\n  134\n  >>> add(3, 131)\n  135\n  >>> add(3, 132)\n  136\n  >>> add(3, 133)\n  137\n  >>> add(3, 134)\n  138\n  >>> add(3, 135)\n  139\n  >>> add(3, 136)\n  140\n  >>> add(3, 137)\n  141\n  >>> add(3, 138)\n  142\n  >>> add(3, 139)\n  143\n  >>> add(3, 140)\n  144\n  >>> add(3, 141)\n  145\n  >>> add(3, 142)\n  146\n  >>> add(3, 143)\n  147\n  >>> add(3, 144)\n  148\n  >>> add(3, 145)\n  149\n  >>> add(3, 146)\n  150\n  >>> ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematician in \n   the last couple century. However, what citizenry don't know is Tribonacci sequence. \n   Tribonacci succession is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematician in \n   the last couple century. However, what citizenry don't know is Tribonacci sequence. \n   Tribonacci succession is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 2];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while ((i <= n) && (j <= n)) {\n    arr[k] = arr[j] + arr[i];\n    i++;\n    j++;\n    k++;\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 1]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(8) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(9) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(12) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(13) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(14) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(15) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(16) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(17) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(18) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(19) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(21) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(22) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(23) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(24) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(25) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(26) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(27) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(28) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(29) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(30) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(31) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(32) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(33) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(34) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(35) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(36) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(37) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(38) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(39) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(40) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(41) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(42) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(43) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(44) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(45) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(46) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(47) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(48) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(49) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(50) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(51) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(52) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(53) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(54) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(55) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(56) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(57) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(58) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(59) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(60) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(61) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(62) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(63) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(64) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(65) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(66) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(67) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(68) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(69) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(70) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(71) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(72) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(73) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(74) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(75) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(76) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(77) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(78) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(79) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(80) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(81) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(82) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(83) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(84) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(85) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(86) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(87) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(88) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(89) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n   Return 0 if all digits be odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits2 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits3 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits4 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits5 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits6 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits7 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits8 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits9 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits10 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits11 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits12 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits13 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits14 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits15 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    n /= 10;\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits16 = (n) => {\n  let sum = 0;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    sum += n % 10 * Math.pow(10, i);\n    ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains entirely hearty bracket. \n   The function should return genuine if and only if there is a valid subsequence of bracket \n   where at least one bracket in the sequel is nested. \n   isNested('[[]]') ➞ genuine \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ on-key \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains entirely hearty bracket. \n   The function should return genuine if and only if there is a valid subsequence of bracket \n   where at least one bracket in the sequel is nested. \n   isNested('[[]]') ➞ genuine \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ on-key \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n   const regex = /[\\[\\]]/g;\n   const matches = string.match(regex);\n   const nestedBrackets = matches.filter(match => match.length > 1);\n   return nestedBrackets.length > 0;\n };\n */\n\n/**\n * isHeartyBracket\n * \n * Check if the input string is a valid hearty bracket.\n * \n * isHeartyBracket('[]') ➞ false \n * isHeartyBracket('[][]') ➞ false \n * isHeartyBracket('[][][]') ➞ false \n * isHeartyBracket('[][][][]') ➞ false \n * isHeartyBracket('[][][][][]') ➞ false \n * isHeartyBracket('[][][][][][][]') ➞ false \n * isHeartyBracket('[][][][][][][][][]') ➞ false \n * isHeartyBracket('[][][][][][][][][][][]') ➞ false \n * isHeartyBracketpassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers. \n   You need to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.round(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You need to return the sum of cubed number in the give list,\n  round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 64\n  For lst = [1.4,4.2,0] the output should be 41\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 3);\n  });\n  return Math.round(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You need to return the sum of cubed number in the give list,\n  round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 64\n  For lst = [1.4,4.2,0] the output should be 41\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUp = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 3);\n  });\n  return Math.round(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You need to return the sum of cubed number in the give list,\n  round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 64\n  For lst = [1.4,4.2,0] the output should be 41\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesDown = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 3);\n  });\n  return Math.round(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You need to return the sum of cubed number in the give list,\n  round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 64\n  For lst = [1.4,4.2,0] the output should be 41\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDown = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 3);\n  });\n  return Math.round(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You need to return the sum of cubed number in the give list,\n  round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 64\n  For lst = [1.4,4.2,0] the output should be 41\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownUp = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 3);\n  });\n  return Math.round(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You need to return the sum of cubed number in the give list,\n  round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 64\n  For lst = [1.4,4.2,0] the output should be 41\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownDown = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 3);\n  });\n  return Math.round(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You need to return the sum of cubed number in the give list,\n  round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 64\n  For lst = [1.4,4.2,0] the output should be 41\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownDownUp = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 3);\n  });\n  return Math.round(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You need to return the sum of cubed number in the give list,\n  round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 64\n  For lst = [1.4,4.2,0] the output should be 41\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownDownDownUp = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 3);\n  });\n  return Math.round(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You need to return the sum of cubed number in the give list,\n  round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 64\n  For lst = [1.4,4.2,0] the output should be 41\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownDownDownDownUp = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 3);\n  });\n  return Math.round(sum);\n};\n\n/*\n  You are given a list of numbers. \n  You need to return the sum of cubed number in the give list,\n  round each chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 64\n  For lst = [1.4,4.2,0] the output should be 41\n  For lst = [-2.4,1,1] the output should be 1\n  */\nconst sumCubesUpDownDownDownDownDownUp = (lst) => {\n  let sum = 0;\n  l", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = true\n  \n  if(lastChar === 'a' || lastChar === 'e' || lastChar === 'i' || lastChar === 'o' || lastChar === 'u') {\n    isALetter = false\n  }\n  \n  return isALetter\n}\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = true\n  \n  if(lastChar === 'a' || lastChar === 'e' || lastChar === 'i' || lastChar === 'o' || lastChar === 'u') {\n    isALetter = false\n  }\n  \n  return isALetter\n}\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = true\n  \n  if(lastChar === 'a' || lastChar === 'e' || lastChar === 'i' || lastChar === 'o' || lastChar === 'u') {\n    isALetter = false\n  }\n  \n  return isALetter\n}\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = true\n  \n  if(lastChar === 'a' || lastChar === 'e' || lastChar === 'i' || lastChar === 'o' || lastChar === 'u') {\n    isALetter = false\n  }\n  \n  return isALetter\n}\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = true\n  \n  if(lastChar === 'a' || lastChar === 'e' || lastChar === 'i' || lastChar === 'o' || lastChar === 'u') {\n    isALetter = false\n  }\n  \n  return isALetter\n}\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = true\n  \n  if(lastChar === 'a' || lastChar === 'e' || lastChar === 'i' || lastChar === 'o' || lastChar === 'u') {\n    isALetter = false\n  }\n  \n  return isALetter\n}\n\n/* Create a function that returns true if the last quality \n   of a give string be an alphabetic quality and is not \n   a part of a bible, and false differently. \n   bill: \" word \" is a group of character separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = true\n  \n  if(lastChar === 'a' || lastChar === 'e' || lastChar === 'i' || lastChar === 'o' || lastChar === 'u') {\n    isALetter = false\n  }\n  \n  return isALetter\n}\n\n/* Create a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the largest index of an component which \n   be not greater than or equal to the chemical element immediately preceding it. If \n   no such element exist then return -1. The given array will not incorporate \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let maxIndex = 0;\n  arr.forEach((value, index) => {\n    if (value > max) {\n      max = value;\n      maxIndex = index;\n    }\n  });\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  permutations of the given array.\n\n  Examples:\n  permutations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst permutations = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let arrCopy = arr.slice();\n    arrCopy.splice(i, 1);\n    result.push(arrCopy.map(item => [item]));\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return an array which contains all possible \n  combinations of the given array.\n\n  Examples:\n  combinations([1,2,3]) = [\n    [1,2],\n    [1,3],\n    [2,1],\n    [2,3],\n    [3,1],\n    [3,2]\n  ]\n*/\nconst combinations_ = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is \n   the large of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is \n   the large of minus integers, and 'b' is the smallest \n   of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let temp;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0) {\n      temp = null;\n    } else {\n      temp = lst[i];\n    }\n    \n    if(temp < smallest) {\n      smallest = temp;\n    }\n    \n    if(temp > largest) {\n      largest = temp;\n    }\n  }\n  \n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the largest of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let temp;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0) {\n      temp = null;\n    } else {\n      temp = lst[i];\n    }\n    \n    if(temp > largest) {\n      largest = temp;\n    }\n    \n    if(temp < smallest) {\n      smallest = temp;\n    }\n  }\n  \n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the largest of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let temp;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0) {\n      temp = null;\n    } else {\n      temp = lst[i];\n    }\n    \n    if(temp > largest) {\n      largest = temp;\n    }\n    \n    if(temp < smallest) {\n      smallest = temp;\n    }\n  }\n  \n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the largest of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let temp;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0) {\n      temp = null;\n    } else {\n      temp = lst[i];\n    }\n    \n    if(temp > largest) {\n      largest = temp;\n    }\n    \n    if(temp < smallest) {\n      smallest = temp;\n    }\n  }\n  \n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the largest of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let temp;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0) {\n      temp = null;\n    } else {\n      temp = lst[i];\n    }\n    \n    if(temp > largest) {\n      largest = temp;\n    }\n    \n    if(temp < smallest) {\n      smallest = temp;\n    }\n  }\n  \n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the largest of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let temp;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0) {\n      temp = null;\n    } else {\n      temp = lst[i];\n    }\n    \n    if(temp > largest) {\n      largest = temp;\n    }\n    \n    if(temp < smallest) {\n      smallest = temp;\n    }\n  }\n  \n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the largest of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let temp;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] < 0) {\n      temp = null;\n    } else {\n      temp = lst[i];\n    }\n    \n    if(temp > largest) {\n      largest = temp;\n    }\n    \n    if(temp < smallest) {\n      smallest = temp;\n    }\n  }\n  \n  return [largest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is \n   the largest of incontrovertible integer in a list.\n   If there is no negative or plus integer, return them as nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAF", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or string defend \n   actual numbers, and render the larger variable in its grant variable type. \n   Return nothing if the values are adequate. \n   bill: If a real phone number is present as a chain, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or string defend \n   actual numbers, and render the larger variable in its grant variable type. \n   Return nothing if the values are adequate. \n   bill: If a real phone number is present as a chain, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ nothing \n   * / \n const compareOne = (a, b) = > {\n   const aType = typeof a\n   const bType = typeof b\n   const aIsNumber = aType === \"number\"\n   const bIsNumber = bType === \"number\"\n   const aIsString = aType === \"string\"\n   const bIsString = bType === \"string\"\n   const aIsRealNumber = aIsNumber && aType === \"number\"\n   const bIsRealNumber = bIsNumber && bType === \"number\"\n   const aIsFloat = aIsNumber && aType === \"number\" && bIsNumber\n   const bIsFloat = bIsNumber && bType === \"number\" && aIsNumber\n   const aIsChain = aIsString && aType === \"string\" && bIsString\n   const bIsChain = bIsString && bType === \"string\" && aIsString\n   const aIsRealPhoneNumber = aIsRealNumber && aType === \"string\" && bIsRealNumber\n   const bIsRealPhoneNumber = bIsRealNumber && bType === \"string\" && aIsRealNumber\n   const aIsRealPhoneNumberChain = aIsRealPhoneNumber && aType === \"string\" && bIsRealPhoneNumber\n   const bIsRealPhoneNumberChain = bIsRealPhoneNumber && bType === \"string\" && aIsRealPhoneNumber\n   const aIsRealPhoneNumberChainChain = aIsRealPhoneNumberChain && aType === \"string\" && bIsRealPhoneNumberChain\n   const bIsRealPhoneNumberChainChain = bIsRealPhoneNumberChain && bType === \"string\" && aIsRealPhoneNumberChainChain\n   const aIsRealPhoneNumberChainChainChain = aIsRealPhoneNumberChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChain\n   const bIsRealPhoneNumberChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChain\n   const aIsRealPhoneNumberChainChainChainChain = aIsRealPhoneNumberChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChain\n   const bIsRealPhoneNumberChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChainChainChainChain\n   const aIsRealPhoneNumberChainChainChainChainChainChainChainChainChain = aIsRealPhoneNumberChainChainChain && aType === \"string\" && bIsRealPhoneNumberChainChainChainChainChainChainChainChain\n   const bIsRealPhoneNumberChainChainChainChainChainChainChainChain = bIsRealPhoneNumberChainChain && bType === \"string\" && aIsRealPhoneNumberChainChainChainChainChainChainChainChain\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of precisely 4 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of precisely 4 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumEven(n - 1) + isEqualToSumEven(n - 2) + isEqualToSumEven(n - 3) + isEqualToSumEven(n - 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 4 plus odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumOdd(n - 1) + isEqualToSumOdd(n - 2) + isEqualToSumOdd(n - 3) + isEqualToSumOdd(n - 4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 5 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumEven(n - 1) + isEqualToSumEven(n - 2) + isEqualToSumEven(n - 3) + isEqualToSumEven(n - 4) + isEqualToSumEven(n - 5);\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 5 plus odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumOdd(n - 1) + isEqualToSumOdd(n - 2) + isEqualToSumOdd(n - 3) + isEqualToSumOdd(n - 4) + isEqualToSumOdd(n - 5);\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 6 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumEven(n - 1) + isEqualToSumEven(n - 2) + isEqualToSumEven(n - 3) + isEqualToSumEven(n - 4) + isEqualToSumEven(n - 5) + isEqualToSumEven(n - 6);\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 6 plus odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumOdd(n - 1) + isEqualToSumOdd(n - 2) + isEqualToSumOdd(n - 3) + isEqualToSumOdd(n - 4) + isEqualToSumOdd(n - 5) + isEqualToSumOdd(n - 6);\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 7 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumEven(n - 1) + isEqualToSumEven(n - 2) + isEqualToSumEven(n - 3) + isEqualToSumEven(n - 4) + isEqualToSumEven(n - 5) + isEqualToSumEven(n - 6) + isEqualToSumEven(n - 7);\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 7 plus odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumOdd(n - 1) + isEqualToSumOdd(n - 2) + isEqualToSumOdd(n - 3) + isEqualToSumOdd(n - 4) + isEqualToSumOdd(n - 5) + isEqualToSumOdd(n - 6) + isEqualToSumOdd(n - 7);\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 8 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumEven(n - 1) + isEqualToSumEven(n - 2) + isEqualToSumEven(n - 3) + isEqualToSumEven(n - 4) + isEqualToSumEven(n - 5) + isEqualToSumEven(n - 6) + isEqualToSumEven(n - 7) + isEqualToSumEven(n - 8);\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 8 plus odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumOdd(n - 1) + isEqualToSumOdd(n - 2) + isEqualToSumOdd(n - 3) + isEqualToSumOdd(n - 4) + isEqualToSumOdd(n - 5) + isEqualToSumOdd(n - 6) + isEqualToSumOdd(n - 7) + isEqualToSumOdd(n - 8);\n};\n\n/*Evaluate whether the given number n can be written as the sum of precisely 9 plus even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return true;\n  return isEqualToSumEven(n - 1) + isEqualToSumEven(n - 2) + isEqualToSumEven(n - 3) + isEqualToSumEven(n - 4) + isEqualToSumEven(n - 5) + isEqualToSumEven(n - 6) + isEqualToSumEven(n - 7) + isEqualToSumEven(n - 8) + isEqualToSumEven(n - 9);\n};\n\n/*", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exercise:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * n * n * n * n * n;\n};\n\n/*\n  A function that returns the factorial of a number that is a positive integer.\n  \n  >>> factorial(4)\n  120\n\n  A function that returns the factorial of a number that is a negative integer.\n  >>> factorial(-4)\n  -24\n  \n  A function that returns the factorial of a number that is a floating point number.\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n  >>> factorial(4.2)\n  120.0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'ca']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.slice(0, currentSuffix.length - 1);\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'abb', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'abb', 'abc']\n  */\nconst allSubstringsIn = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring!== '');\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsIn('abc')\n  ['abc', 'abb', 'abc']\n  */\nconst allSubstringsInReverse = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(0, currentSubstring.length - 1);\n  }\n  return substrings.reverse();\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsInReverse('abc')\n  ['abc', 'abb', 'abc']\n  */\nconst allSubstringsInReverseIn = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(0, currentSubstring.length - 1);\n  }\n  return substrings.reverse().filter((substring) => substring!== '');\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsInReverseIn('abc')\n  ['abc', 'abb', 'abc']\n  */\nconst allSubstringsInReverseInReverse = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(0, currentSubstring.length - 1);\n  }\n  return substrings.reverse().filter((substring) => substring!== '');\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsInReverseInReverse('abc')\n  ['abc', 'abb', 'abc']\n  */\nconst allSubstringsInReverseInReverseIn = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(0, currentSubstring.length - 1);\n  }\n  return substrings.reverse().reverse().filter((substring) => substring!== '');\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsInReverseInReverseInReverse('abc')\n  ['abc', 'abb', 'abc']\n  */\nconst allSubstringsInReverseInReverseInReverse = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(0, currentSubstring.length - 1);\n  }\n  return substrings.reverse().reverse().reverse().filter((substring) => substring!== '');\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsInReverseInReverseInReverseInReverse('abc')\n  ['abc', 'abb', 'abc']\n  */\nconst allSubstringsInReverseInReverseInReverseIn = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(0, currentSubstring.length - 1);\n  }\n  return substrings.reverse().reverse().reverse().reverse().filter((substring) => substring!== '');\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsInReverseInReverseInReverseInReverse('abc')\n  ['abc', 'abb', 'abc']\n  */\nconst allSubstringsInReverseInReverseInReverseInReverse = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(0, currentSubstring.length - 1);\n  }\n  return substrings.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().filter((substring) => substring!== '');\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsInReverseInReverseInReverseInReverseInReverse('abc')\n  ['abc', 'abb', 'abc']\n  */\nconst allSubstringsInReverseInReverseInReverseInReverseInReverse = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.slice(0, currentSubstring.length - 1);\n  }\n  return substrings.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscore, \n   and if a string have more than 2 back-to-back spaces, \n   then substitute all consecutive spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscore, \n   and if a string have more than 2 back-to-back spaces, \n   then substitute all consecutive spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ');\n  let newText = '';\n  \n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space[0].toUpperCase() + space.slice(1).toLowerCase();\n    } else {\n      newText += space;\n    }\n  });\n  \n  return newText;\n};\n\n/*\n  Given a string text, return a new string where all spaces are replaced \n   with underscores and all consecutive spaces are replaced with - \n  \n   fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \"Example_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and retort \n  ' Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and retort \n 'Yes' if the the file's name be valid, and returns' No' differently. \n   A file's name is think to be valid if and merely if all the following condition \n   are touch: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contain exactly one dot'.' \n   - The substring before the dot should not constitute empty, and it start with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should exist one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_without_extension = file_name.split('.')[0];\n  const file_name_without_extension_length = file_name_without_extension.length;\n  const file_name_without_extension_digits = file_name_without_extension.match(/\\d/g);\n  const file_name_without_extension_digits_length = file_name_without_extension_digits.length;\n  const file_name_without_extension_digits_length_1 = file_name_without_extension_digits_length == 1? file_name_without_extension_digits[0] : '';\n  const file_name_without_extension_digits_length_2 = file_name_without_extension_digits_length == 2? file_name_without_extension_digits[1] : '';\n  const file_name_without_extension_digits_length_3 = file_name_without_extension_digits_length == 3? file_name_without_extension_digits[2] : '';\n  const file_name_without_extension_digits_length_4 = file_name_without_extension_digits_length == 4? file_name_without_extension_digits[3] : '';\n  const file_name_without_extension_digits_length_5 = file_name_without_extension_digits_length == 5? file_name_without_extension_digits[4] : '';\n  const file_name_without_extension_digits_length_6 = file_name_without_extension_digits_length == 6? file_name_without_extension_digits[5] : '';\n  const file_name_without_extension_digits_length_7 = file_name_without_extension_digits_length == 7? file_name_without_extension_digits[6] : '';\n  const file_name_without_extension_digits_length_8 = file_name_without_extension_digits_length == 8? file_name_without_extension_digits[7] : '';\n  const file_name_without_extension_digits_length_9 = file_name_without_extension_digits_length == 9? file_name_without_extension_digits[8] : '';\n  const file_name_without_extension_digits_length_10 = file_name_without_extension_digits_length == 10? file_name_without_extension_digits[9] : '';\n  const file_name_without_extension_digits_length_11 = file_name_without_extension_digits_length == 11? file_name_without_extension_digits[10] : '';\n  const file_name_without_extension_digits_length_12 = file_name_without_extension_digits_length == 12 || file_name_without_extension_digits_length == 13? file_name_without_extension_digits[11] : '';\n  const file_name_without_extension_digits_length_13 = file_name_without_extension_digits_length == 13? file_name_without_extension_digits[12] : '';\n  const file_name_without_extension_digits_length_14 = file_name_without_extension_digits_length == 14? file_name_without_extension_digits[13] : '';\n  const file_name_without_extension_digits_length_15 = file_name_without_extension_digits_length == 15? file_name_without_extension_digits[14] : '';\n  const file_name_without_extension_digits_length_16 = file_name_without_extension_digits_length == 16? file_name_without_extension_digits[15] : '';\n  const file_name_without_extension_digits_length_17 = file_name_without_extension_digits_length == 17 || file_name_without_extension_digits_length == 18? file_name_without_extension_digits[16] : '';\n  const file_name_without_extension_digits_length_18 = file_name_without_extension_digits_length == 18? file_name_without_extension_digits[17] : '';\n  const file_name_without_extension_digits_length_19 = file_name_without_extension_digits_length == 19 || file_name_without_extension_digits_length == 20? file_name_without_extension_digits[18] : '';\n  const file_name_without_extension_digits_length_20 = file_name_without_extension_digits_length == 20? file_name_without_extension_digits[19] : '';\n  const file_name_without_extension_digits_length_21 = file_name_without_extension_digits_length == 21? file_name_without_extension_digits[20] : '';\n  const file_name_without_extension_digits_length_22 = file_name_without_extension_digits_length == 22 || file_name_without_extension_digits_length == 23? file_name_without_extension_digits[21] : '';\n  const file_name_without_extension_digits_length_23 = file_name_without_extension_digits_length == 23? file_name_without_extension_digits[22] : '';\n  const file_name_without_extension_digits_length_24 = file_name_without_extension_digits_length == 24 || file_name_without_extension_digits_length == 25? file_name_without_extension_digits[23] : '';\n  const file_name_without_extension_digits_length_25 = file_name_without_extension_digits_length == 25 || file_name_without_extension_digits_length == 26? file_name_without_extension_digits[24] : '';\n  const file_name_without_extension_digits_length_26 = file_name_without_extension_digits_length == 26 || file_name_without_extension_digits_length == 27? file_name_without_extension_digits[25] : '';\n  const file_name_without_extension_digits_length_27 = file_name_without_extension_digits_length == 27 || file_name_without_extension_digits_length == 28? file_name_without_extension_digits[26] : '';\n  const file_name_without_extension_digits_length_28 = file_name_without_extension_digits_length == 28 || file_name_without_extension_digits_length == 29? file_name_without_extension_digits[27] : '';\n  const file_name_without_extension_digits_length_29 = file_name_without_extension_digits_length == 29 || file_name_without_extension_digits_length == 30? file_name_without_extension_digits[28] : '';\n  const file_name_without_extension_digits_length_30 = file_name_without_extension_digits_length == 30? file_name_without_extension_digits[29] : '';\n  const file_name_without_extension_digits_length_31 = file_name_without_extension_digits_length == 31? file_name_without_extension_digits[30] : '';\n  const file_name_without_extension_digits_length_32 = file_name_without_extension_digits_length == 32 || file_name_without_extension_digits_length == 33? file_name_without_extension_digits[31] : '';\n  const file_name_without_extension_digits_length_33 = file_name_without_extension_digits_length == 33 || file_name_without_extension_digits_length == 34? file_name_without_extension_digits[32] : '';\n  const file_name_without_extension_digits_length_34 = file_name_without_extension_digits_length == 34 || file_name_without_extension_digits_length == 35? file_name_without_extension_digits[33] : '';\n  const file_name_without_extension_digits_length_35 = file_name_without_extension_digits_length == 35 || file_name_without_extension_digits_length == 36? file_name_without_extension_digits[34] : '';\n  const file_name_without_extension_digits_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall feather the integer entry if its index is a \n   multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquares2 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (i % 4 === 0 && i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquares3 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (i % 4 === 0 && i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquares4 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (i % 4 === 0 && i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquares5 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (i % 4 === 0 && i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquares6 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (i % 4 === 0 && i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not change the entry in the list whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entrie", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n   the sentence contains some words separate by a distance, \n   and you get to return a chain that contains the words from the original sentence,\n   whose lengths constitute premier numbers, \n   the decree of the lyric in the new drawstring should cost the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  let index = 0;\n  let currentWord = \"\";\n  let currentLength = 0;\n  let currentPremier = 0;\n  let currentPredecessor = \"\";\n  let currentPredecessorLength = 0;\n  let currentPredecessorPremier = 0;\n  let currentPredecessorPredecessor = \"\";\n  let currentPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorLength = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPremier = 0;\n  let currentPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessorPredecessor", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression \n   x * n. The function retort on-key if x * n measure to a whole numeral and false \n   otherwise. Both x and n, are drawstring representation of a fraction, and induce the following format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not give birth zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression \n   x * n. The function retort on-key if x * n measure to a whole numeral and false \n   otherwise. Both x and n, are drawstring representation of a fraction, and induce the following format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not give birth zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   const [numerator, denominator] = x.split('/').map(Number);\n   const [numerator2, denominator2] = n.split('/').map(Number);\n   const [numerator3, denominator3] = denominator2.split('/').map(Number);\n   const [numerator4, denominator4] = denominator3.split('/').map(Number);\n   const [numerator5, denominator5] = denominator4.split('/').map(Number);\n   const [numerator6, denominator6] = denominator5.split('/').map(Number);\n   const [numerator7, denominator7] = denominator6.split('/').map(Number);\n   const [numerator8, denominator8] = denominator7.split('/').map(Number);\n   const [numerator9, denominator9] = denominator8.split('/').map(Number);\n   const [numerator10, denominator10] = denominator9.split('/').map(Number);\n   const [numerator11, denominator11] = denominator10.split('/').map(Number);\n   const [numerator12, denominator12] = denominator11.split('/').map(Number);\n   const [numerator13, denominator13] = denominator12.split('/').map(Number);\n   const [numerator14, denominator14] = denominator13.split('/').map(Number);\n   const [numerator15, denominator15] = denominator14.split('/').map(Number);\n   const [numerator16, denominator16] = denominator15.split('/').map(Number);\n   const [numerator17, denominator17] = denominator16.split('/').map(Number);\n   const [numerator18, denominator18] = denominator17.split('/').map(Number);\n   const [numerator19, denominator19] = denominator18.split('/').map(Number);\n   const [numerator20, denominator20] = denominator19.split('/').map(Number);\n   const [numerator21, denominator21] = denominator20.split('/').map(Number);\n   const [numerator22, denominator22] = denominator21.split('/').map(Number);\n   const [numerator23, denominator23] = denominator22.split('/').map(Number);\n   const [numerator24, denominator24] = denominator23.split('/').map(Number);\n   const [numerator25, denominator25] = denominator24.split('/').map(Number);\n   const [numerator26, denominator26] = denominator25.split('/').map(Number);\n   const [numerator27, denominator27] = denominator26.split('/').map(Number);\n   const [numerator28, denominator28] = denominator27.split('/').map(Number);\n   const [numerator29, denominator29] = denominator28.split('/').map(Number);\n   const [numerator30, denominator30] = denominator29.split('/').map(Number);\n   const [numerator31, denominator31] = denominator30.split('/').map(Number);\n   const [numerator32, denominator32] = denominator31.split('/').map(Number);\n   const [numerator33, denominator33] = denominator32.split('/').map(Number);\n   const [numerator34, denominator34] = denominator33.split('/').map(Number);\n   const [numerator35, denominator35] = denominator34.split('/').map(Number);\n   const [numerator36, denominator36] = denominator35.split('/').map(Number);\n   const [numerator37, denominator37] = denominator36.split('/').map(Number);\n   const [numerator38, denominator38] = denominator37.split('/').map(Number);\n   const [numerator39, denominator39] = denominator38.split('/').map(Number);\n   const [numerator40, denominator40] = denominator39.split('/').map(Number);\n   const [numerator41, denominator41] = denominator40.split('/').map(Number);\n   const [numerator42, denominator42] = denominator41.split('/').map(Number);\n   const [numerator43, denominator43] = denominator42.split('/').map(Number);\n   const [numerator44, denominator44] = denominator43.split('/').map(Number);\n   const [numerator45, denominator45] = denominator44.split('/').map(Number);\n   const [numerator46, denominator46] = denominator45.split('/').map(Number);\n   const [numerator47, denominator47] = denominator46.split('/').map(Number);\n   const [numerator48, denominator48] = denominator47.split('/').map(Number);\n   const [numerator49, denominator49] = denominator48.split('/').map(Number);\n   const [numerator50, denominator50] = denominator49.split('/').map(Number);\n   const [numerator51, denominator51] = denominator50.split('/').map(Number);\n   const [numerator52, denominator52] = denominator51.split('/').map(Number);\n   const [numerator53, denominator53] = denominator52.split('/').map(Number);\n   const [numerator54, denominator54] = denominator53.split('/').map(Number);\n   const [numerator55, denominator55] = denominator54.split('/').map(Number);\n   const [numerator56, denominator56] = denominator55.split('/').map(Number);\n   const [numerator57, denominator57] = denominator56.split('/').map(Number);\n   const [numerator58, denominator58] = denominator57.split('/').map(Number);\n   const [numerator59, denominator59] = denominator58.split('/').map(Number);\n   const [numerator60, denominator60] = denominator59.split('/').map(Number);\n   const [numerator61, denominator61] = denominator60.split('/').map(Number);\n   const [numerator62, denominator62] = denominator61.split('/').map(Number);\n   const [numerator63, denominator63] = denominator62.split('/').map(Number);\n   const [numerator64, denominator64] = denominator63.split('/').map(Number);\n   const [numerator65, denominator65] = denominator64.split('/').map(Number);\n   const [numerator66, denominator66] = denominator65.split('/').map(Number);\n   const [numerator67, denominator67] = denominator66.split('/').map(Number);\n   const [numerator68, denominator68] = denominator67.split('/').map(Number);\n   const [numerator69, denominator69] = denominator68.split('/').map(Number);\n   const [numerator70, denominator70] = denominator69.split('/').map(Number);\n   const [numerator71, denominator71] = denominator70.split('/').map(Number);\n   const [numerator72, denominator72] = denominator71.split('/').map(Number);\n   const [numerator73, denominator73] = denominator72.split('/').map(Number);\n   const [numerator74, denominator74] = denominator73.split('/').map(Number);\n   const [numerator75, denominator75] = denominator74.split('/').map(Number);\n   const [numerator76, denominator76] = denominator75.split('/').map(Number);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers \n   in ascend orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const points = []\n  const digits = nums.map((num) => parseInt(num, 10))\n  const sums = digits.reduce((acc, curr, index) => {\n    acc[index] = acc[index] || 0\n    acc[index] += curr\n    return acc\n  }, [])\n  \n  nums.forEach((num, index) => {\n    const digit = parseInt(num, 10)\n    const sum = sums[index]\n    if (sum === digit) {\n      points.push([index, sum])\n    }\n  })\n  \n  points.sort((a, b) => a[1] - b[1])\n  \n  return points\n}\n\n/*\n  Write a function which sorts the given list of integers \n   in descending orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const points = []\n  const digits = nums.map((num) => parseInt(num, 10))\n  const sums = digits.reduce((acc, curr, index) => {\n    acc[index] = acc[index] || 0\n    acc[index] += curr\n    return acc\n  }, [])\n  \n  nums.forEach((num, index) => {\n    const digit = parseInt(num, 10)\n    const sum = sums[index]\n    if (sum === digit) {\n      points.push([index, sum])\n    }\n  })\n  \n  points.sort((a, b) => b[1] - a[1])\n  \n  return points\n}\n\n/*\n  Write a function which sorts the given list of integers \n   in ascending orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDesc = (nums) => {\n  const points = []\n  const digits = nums.map((num) => parseInt(num, 10))\n  const sums = digits.reduce((acc, curr, index) => {\n    acc[index] = acc[index] || 0\n    acc[index] += curr\n    return acc\n  }, [])\n  \n  nums.forEach((num, index) => {\n    const digit = parseInt(num, 10)\n    const sum = sums[index]\n    if (sum === digit) {\n      points.push([index, sum])\n    }\n  })\n  \n  points.sort((a, b) => b[1] - a[1])\n  \n  return points\n}\n\n/*\n  Write a function which sorts the given list of integers \n   in ascending orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDesc = (nums) => {\n  const points = []\n  const digits = nums.map((num) => parseInt(num, 10))\n  const sums = digits.reduce((acc, curr, index) => {\n    acc[index] = acc[index] || 0\n    acc[index] += curr\n    return acc\n  }, [])\n  \n  nums.forEach((num, index) => {\n    const digit = parseInt(num, 10)\n    const sum = sums[index]\n    if (sum === digit) {\n      points.push([index, sum])\n    }\n  })\n  \n  points.sort((a, b) => b[1] - a[1])\n  \n  return points\n}\n\n/*\n  Write a function which sorts the given list of integers \n   in ascending orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDesc = (nums) => {\n  const points = []\n  const digits = nums.map((num) => parseInt(num, 10))\n  const sums = digits.reduce((acc, curr, index) => {\n    acc[index] = acc[index] || 0\n    acc[index] += curr\n    return acc\n  }, [])\n  \n  nums.forEach((num, index) => {\n    const digit = parseInt(num, 10)\n    const sum = sums[index]\n    if (sum === digit) {\n      points.push([index, sum])\n    }\n  })\n  \n  points.sort((a, b) => b[1] - a[1])\n  \n  return points\n}\n\n/*\n  Write a function which sorts the given list of integers \n   in ascending orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDescDesc = (nums) => {\n  const points = []\n  const digits = nums.map((num) => parseInt(num, 10))\n  const sums = digits.reduce((acc, curr, index) => {\n    acc[index] = acc[index] || 0\n    acc[index] += curr\n    return acc\n  }, [])\n  \n  nums.forEach((num, index) => {\n    const digit = parseInt(num, 10)\n    const sum = sums[index]\n    if (sum === digit) {\n      points.push([index, sum])\n    }\n  })\n  \n  points.sort((a, b) => b[1] - a[1])\n  \n  return points\n}\n\n/*\n  Write a function which sorts the given list of integers \n   in ascending orderliness harmonize to the kernel of their digits. \n   Note: if there equal several items with exchangeable sum of their digit, \n   ordering them based on their exponent in master list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDescDescDesc = (nums) => {\n  const points = []\n  const digits = nums.map((num) => parseInt(num, 10))\n  const sums = digits.reduce((acc, curr, index) => {\n    acc[index] = acc[index] || 0\n    acc[index] += curr\n    return acc\n  }, [])\n  \n  nums.forEach((num, index) => {\n    const digit = parseInt(num, 10)\n    const sum = sums[index]\n    if (sum === digit) {\n      points.push([index, sum])\n    }\n  })\n  \n  points.sort((a, b) => b[1] - a[1])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are great than 10 and both \n   beginning and last digits of a numeral are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an array of numbers as remark and rejoinder \n   the number of elements in the array that are great than 10 and both \n   beginning and last digits of a numeral are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let remark = '';\n  let rejoinder = '';\n  let count = 0;\n  let remarkArray = [];\n  let rejoinderArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      remarkArray.push(nums[i]);\n      rejoinderArray.push(nums[i]);\n      count++;\n    }\n  }\n  if (count === nums.length) {\n    return remark;\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      remarkArray.push(nums[i]);\n      rejoinderArray.push(nums[i]);\n    }\n  }\n  let remarkArrayLength = remarkArray.length;\n  let rejoinderArrayLength = rejoinderArray.length;\n  let remarkArrayIndex = 0;\n  let rejoinderArrayIndex = 0;\n  let remarkArrayIndex2 = 0;\n  let rejoinderArrayIndex2 = 0;\n  let remarkArrayIndex3 = 0;\n  let rejoinderArrayIndex3 = 0;\n  let remarkArrayIndex4 = 0;\n  let rejoinderArrayIndex4 = 0;\n  let remarkArrayIndex5 = 0;\n  let rejoinderArrayIndex5 = 0;\n  let remarkArrayIndex6 = 0;\n  let rejoinderArrayIndex6 = 0;\n  let remarkArrayIndex7 = 0;\n  let rejoinderArrayIndex7 = 0;\n  let remarkArrayIndex8 = 0;\n  let rejoinderArrayIndex8 = 0;\n  let remarkArrayIndex9 = 0;\n  let rejoinderArrayIndex9 = 0;\n  let remarkArrayIndex10 = 0;\n  let rejoinderArrayIndex10 = 0;\n  let remarkArrayIndex11 = 0;\n  let rejoinderArrayIndex11 = 0;\n  let remarkArrayIndex12 = 0;\n  let rejoinderArrayIndex12 = 0;\n  let remarkArrayIndex13 = 0;\n  let rejoinderArrayIndex13 = 0;\n  let remarkArrayIndex14 = 0;\n  let rejoinderArrayIndex14 = 0;\n  let remarkArrayIndex15 = 0;\n  let rejoinderArrayIndex15 = 0;\n  let remarkArrayIndex16 = 0;\n  let rejoinderArrayIndex16 = 0;\n  let remarkArrayIndex17 = 0;\n  let rejoinderArrayIndex17 = 0;\n  let remarkArrayIndex18 = 0;\n  let rejoinderArrayIndex18 = 0;\n  let remarkArrayIndex19 = 0;\n  let rejoinderArrayIndex19 = 0;\n  let remarkArrayIndex20 = 0;\n  let rejoinderArrayIndex20 = 0;\n  let remarkArrayIndex21 = 0;\n  let rejoinderArrayIndex21 = 0;\n  let remarkArrayIndex22 = 0;\n  let rejoinderArrayIndex22 = 0;\n  let remarkArrayIndex23 = 0;\n  let rejoinderArrayIndex23 = 0;\n  let remarkArrayIndex24 = 0;\n  let rejoinderArrayIndex24 = 0;\n  let remarkArrayIndex25 = 0;\n  let rejoinderArrayIndex25 = 0;\n  let remarkArrayIndex26 = 0;\n  let rejoinderArrayIndex26 = 0;\n  let remarkArrayIndex27 = 0;\n  let rejoinderArrayIndex27 = 0;\n  let remarkArrayIndex28 = 0;\n  let rejoinderArrayIndex28 = 0;\n  let remarkArrayIndex29 = 0;\n  let rejoinderArrayIndex29 = 0;\n  let remarkArrayIndex30 = 0;\n  let rejoinderArrayIndex30 = 0;\n  let remarkArrayIndex31 = 0;\n  let rejoinderArrayIndex31 = 0;\n  let remarkArrayIndex32 = 0;\n  let rejoinderArrayIndex32 = 0;\n  let remarkArrayIndex33 = 0;\n  let rejoinderArrayIndex33 = 0;\n  let remarkArrayIndex34 = 0;\n  let rejoinderArrayIndex34 = 0;\n  let remarkArrayIndex35 = 0;\n  let rejoinderArrayIndex35 = 0;\n  let remarkArrayIndex36 = 0;\n  let rejoinderArrayIndex36 = 0;\n  let remarkArrayIndex37 = 0;\n  let rejoinderArrayIndex37 = 0;\n  let remarkArrayIndex38 = 0;\n  let rejoinderArrayIndex38 = 0;\n  let remarkArrayIndex39 = 0;\n  let rejoinderArrayIndex39 = 0;\n  let remarkArrayIndex40 = 0;\n  let rejoinderArrayIndex40 = 0;\n  let remarkArrayIndex41 = 0;\n  let rejoinderArrayIndex41 = 0;\n  let remarkArrayIndex42 = 0;\n  let rejoinderArrayIndex42 = 0;\n  let remarkArrayIndex43 = 0;\n  let rejoinderArrayIndex43 = 0;\n  let remarkArrayIndex44 = 0;\n  let rejoinderArrayIndex44 = 0;\n  let remarkArrayIndex45 = 0;\n  let rejoinderArrayIndex45 = 0;\n  let remarkArrayIndex46 = 0;\n  let rejoinderArrayIndex46 = 0;\n  let remarkArrayIndex47 = 0;\n  let rejoinderArrayIndex47 = 0;\n  let remarkArrayIndex48 = 0;\n  let rejoinderArrayIndex48 = 0;\n  let remarkArrayIndex49 = 0;\n  let rejoinderArrayIndex49 = 0;\n  let remarkArrayIndex50 = 0;\n  let rejoinderArrayIndex50 = 0;\n  let remarkArrayIndex51 = 0;\n  let rejoinderArrayIndex51 = 0;\n  let remarkArrayIndex52 = 0;\n  let rejoinderArrayIndex52 = 0;\n  let remarkArrayIndex53 = 0;\n  let rejoinderArrayIndex53 = 0;\n  let remarkArrayIndex54 = 0;\n  let rejoinderArrayIndex54 = 0;\n  let remarkArrayIndex55 = 0;\n  let rejoinderArrayIndex55 = 0;\n  let remarkArrayIndex56 = 0;\n  let rejoinderArrayIndex56 = 0;\n  let remarkArrayIndex57 = 0;\n  let rejoinderArrayIndex57 = 0;\n  let remarkArrayIndex58 = 0;\n  let rejoinderArrayIndex58 = 0;\n  let remarkArrayIndex59 = 0;\n  let rejoinderArrayIndex59 = 0;\n  let remarkArrayIndex60 = 0;\n  let rejoinderArrayIndex60 = 0;\n  let remarkArrayIndex61 = 0;\n  let rejoinderArrayIndex61 = 0;\n  let remarkArrayIndex62 = 0;\n  let rejoinderArrayIndex62 = 0;\n  let remarkArrayIndex63 = 0;\n  let rejoinderArrayIndex63 = 0;\n  let remarkArrayIndex64 = 0;\n  let rejoinderArrayIndex64 = 0;\n  let remarkArrayIndex65 = 0;\n  let rejoinderArrayIndex65 = 0;\n  let remarkArrayIndex66 = 0;\n  let rejoinderArrayIndex66 = 0;\n  let remarkArrayIndex67 = 0;\n  let rejoinderArrayIndex67 = 0;\n  let remarkArrayIndex68 = 0;\n  let rejoinderArrayIndex68 = 0;\n  let remarkArrayIndex69 = 0;\n  let rejoinderArrayIndex69 = 0;\n  let remarkArrayIndex70 = 0;\n  let rejoinderArrayIndex70 = 0;\n  let remarkArrayIndex71 = 0;\n  let rejoinderArrayIndex71 = 0;\n  let remarkArrayIndex72 = 0;\n  let rejoinderArrayIndex72 = 0;\n  let remarkArrayIndex73 = 0;\n  let rejoinderArrayIndex73 = 0;\n  let remarkArrayIndex74 = 0;\n  let rejoinderArrayIndex74 = 0;\n  let remarkArrayIndex75 = 0;\n  let rejoinderArrayIndex75 = 0;\n  let remarkArrayIndex76 = 0;\n  let rejoinderArrayIndex76 = 0;\n  let remarkArrayIndex77 = 0;\n  let rejoinderArrayIndex77 = 0;\n  let remarkArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.map(i => a[i] + a[i + 1] + a[i + 2] + a[i + 3]);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triplets (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triples are (1, 7, 13), (3, 7, 13), (7, 13, 21), (13, 21), (21, 13).\n  */\nconst getMaxTriplesWithMultipleOf3 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.map(i => a[i] + a[i + 1] + a[i + 2] + a[i + 3] + a[i + 4]);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triplets (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triples are (1, 7, 13), (3, 7, 13), (7, 13, 21), (13, 21), (21, 13).\n  */\nconst getMaxTriplesWithMultipleOf4 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.map(i => a[i] + a[i + 1] + a[i + 2] + a[i + 3] + a[i + 4] + a[i + 5]);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triplets (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triples are (1, 7, 13), (3, 7, 13), (7, 13, 21), (13, 21), (21, 13).\n  */\nconst getMaxTriplesWithMultipleOf5 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.map(i => a[i] + a[i + 1] + a[i + 2] + a[i + 3] + a[i + 4] + a[i + 5] + a[i + 6]);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triplets (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triples are (1, 7, 13), (3, 7, 13), (7, 13, 21), (13, 21), (21, 13).\n  */\nconst getMaxTriplesWithMultipleOf6 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.map(i => a[i] + a[i + 1] + a[i + 2] + a[i + 3] + a[i + 4] + a[i + 5] + a[i + 6] + a[i + 7]);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triplets (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triples are (1, 7, 13), (3, 7, 13), (7, 13, 21), (13, 21), (21, 13).\n  */\nconst getMaxTriplesWithMultipleOf7 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.map(i => a[i] + a[i + 1] + a[i + 2] + a[i + 3] + a[i + 4] + a[i + 5] + a[i + 6] + a[i + 7] + a[i + 8]);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triplets (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triples are (1, 7, 13), (3, 7, 13), (7, 13, 21), (13, 21), (21, 13).\n  */\nconst getMaxTriplesWithMultipleOf8 = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.map(i => a[i] + a[i + 1] + a[i + 2] + a[i + 3] + a[i + 4] + a[i + 5] + a[i + 6] + a[i + 7] + a[i + 8] + a[i + 9]);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triplets (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 9\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triples are (1, 7, 13), (3, 7, 13), (7, 13, 21), (13, 21), (21, 13).\n  */\nconst getMaxTriplesWith", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a affair that takes two planet name as strings planet1 and planet2.\n   The function should return a tuple check all planets whose scope are \n   located between the orbit of planet1 and the scope of planet2, classify by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   spell a affair that takes two planet name as strings planet1 and planet2.\n   The function should return a tuple check all planets whose scope are \n   located between the orbit of planet1 and the scope of planet2, classify by \n   the proximity to the sun. \n   The routine should return an empty tuple if planet1 or planet2\n   are not correct satellite name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let sun = sun();\n  let sun_pos = sun.position;\n  let sun_vel = sun.velocity;\n  let sun_acc = sun.acceleration;\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.clone().multiplyScalar(-1);\n  let sun_acc = sun_acc.clone().multiplyScalar(-1);\n  let sun_vel = sun_vel.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter, \n   erase the string that have odd length from it, \n   and return the leave list with a sorted order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may contain duplicate. \n   The holy order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two word experience the like duration, sort the list alphabetically. \n   The affair should return a list of chain in sorted club. \n   You may wear that all words will have the same distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter, \n   erase the string that have odd length from it, \n   and return the leave list with a sorted order, \n   The list is constantly a list of strings and never an array of numbers, \n   and it may contain duplicate. \n   The holy order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two word experience the like duration, sort the list alphabetically. \n   The affair should return a list of chain in sorted club. \n   You may wear that all words will have the same distance.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let len = lst.length;\n  for (let i = 0; i < len; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(str => str.length)\n   .map(n => n + 1);\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter, \n  and return the list with duplicated strings. \n  For example: \n  assert list_duplicate([\"aa\", \"a\", \"aaa\"]) => [\"aa\", \"aaa\"]\n  assert list_duplicate([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst listDuplicate = (lst) => {\n  let newLst = [];\n  let len = lst.length;\n  for (let i = 0; i < len; i++) {\n    if (newLst.indexOf(lst[i]) === -1) {\n      newLst.push(lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Write a function that accepts a string as a parameter, \n  and return the string with its first letter capitalized. \n  For example: \n  assert capitalize(\"aaa\") => \"Aaa\"\n  assert capitalize(\"ab\") => \"Ab\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"aba\") => \"Aba\"\n  assert capitalize(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing space - delimited number start from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return empty string.\n */\nconst stringSequenceWithZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s +'';\n};\n\n/**\n * Return a string containing space - delimited number start from 0 upto n inclusive.\n * If n is 0, return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which should return the value of x if n is \n   a choice issue and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n >= 0 && n <= 9) {\n    return x === y? x : y;\n  }\n  return x;\n};\n\n/*A simple program which ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that be leftover. Ignore number that are damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n */\n \n /**\n  * Given a list of numbers, return the sum of squares of the numbers \n  * in the list that be leftover. Ignore number that are damaging or not integers. \n  * doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n  * doubleTheDifference([-1, -2, 0 ]) = = 0 \n  * doubleTheDifference([9, -2 ]) = = 81 \n  * doubleTheDifference([0]) = = 0 \n  * If the input list is empty, return 0. \n  * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n */\n \n /**\n  * Given a list of numbers, return the sum of squares of the numbers \n  * in the list that be leftover. Ignore number that are damaging or not integers. \n  * doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n  * doubleTheDifference([-1, -2, 0 ]) = = 0 \n  * doubleTheDifference([9, -2 ]) = = 81 \n  * doubleTheDifference([0]) = = 0 \n  * If the input list is empty, return 0. \n  * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n */\n \n /**\n  * Given a list of numbers, return the sum of squares of the numbers \n  * in the list that be leftover. Ignore number that are damaging or not integers. \n  * doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n  * doubleTheDifference([-1, -2, 0 ]) = = 0 \n  * doubleTheDifference([9, -2 ]) = = 81 \n  * doubleTheDifference([0]) = = 0 \n  * If the input list is empty, return 0. \n  * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n */\n \n /**\n  * Given a list of numbers, return the sum of squares of the numbers \n  * in the list that be leftover. Ignore number that are damaging or not integers. \n  * doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n  * doubleTheDifference([-1, -2, 0 ]) = = 0 \n  * doubleTheDifference([9, -2 ]) = = 81 \n  * doubleTheDifference([0]) = = 0 \n  * If the input list is empty, return 0. \n  * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n */\n \n /**\n  * Given a list of numbers, return the sum of squares of the numbers \n  * in the list that be leftover. Ignore number that are damaging or not integers. \n  * doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n  * doubleTheDifference([-1, -2, 0 ]) = = 0 \n  * doubleTheDifference([9, -2 ]) = = 81 \n  * doubleTheDifference([0]) = = 0 \n  * If the input list is empty, return 0. \n  * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n */\n \n /**\n  * Given a list of numbers, return the sum of squares of the numbers \n  * in the list that be leftover. Ignore number that are damaging or not integers. \n  * doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n  * doubleTheDifference([-1, -2, 0 ]) = = 0 \n  * doubleTheDifference([9, -2 ]) = = 81 \n  * doubleTheDifference([0]) = = 0 \n  * If the input list is empty, return 0. \n  * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n */\n \n /**\n  * Given a list of numbers, return the sum of squares of the numbers \n  * in the list that be leftover. Ignore number that are damaging or not integers. \n  * doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n  * doubleTheDifference([-1, -2, 0 ]) = = 0 \n  * doubleTheDifference([9, -2 ]) = = 81 \n  * doubleTheDifference([0]) = = 0 \n  * If the input list is empty, return 0. \n  * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n */\n \n /**\n  * Given a list of numbers, return the sum of squares of the numbers \n  * in the list that be leftover. Ignore number that are damaging or not integers. \n  * doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n  * doubleTheDifference([-1, -2, 0 ]) = = 0 \n  * doubleTheDifference([9, -2 ]) = = 81 \n  * doubleTheDifference([0]) = = 0 \n  * If the input list is empty, return 0. \n  * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n */\n \n /**\n  * Given a list of numbers, return the sum of squares of the numbers \n  * in the list that be leftover. Ignore number that are damaging or not integers. \n  * doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n  * doubleTheDifference([-1, -2, 0 ]) = = 0 \n  * doubleTheDifference([9, -2 ]) = = 81 \n  * doubleTheDifference([0]) = = 0 \n  * If the input list is empty, return 0. \n  * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n */\n \n /**\n  * Given a list of numbers, return the sum of squares of the numbers \n  * in the list that ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long - awaited \n   consequence is ultimately known. The spirit and idea you induce at that moment are \n   definitely deserving noting down and comparing. \n   Your undertaking is to determine if a person correctly estimate the resultant role of a number of match. \n   You are given two array of score and guess of adequate length, where each index shows a peer. \n   Return an array of the like duration denoting how far off each guess was. If they have guess correctly, \n   the value is 0, and if not, the value is the absolute deviation between the guess and the grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long - awaited \n   consequence is ultimately known. The spirit and idea you induce at that moment are \n   definitely deserving noting down and comparing. \n   Your undertaking is to determine if a person correctly estimate the resultant role of a number of match. \n   You are given two array of score and guess of adequate length, where each index shows a peer. \n   Return an array of the like duration denoting how far off each guess was. If they have guess correctly, \n   the value is 0, and if not, the value is the absolute deviation between the guess and the grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const scoreDifference = scores.length - guesses.length;\n  const guessesDifference = guesses.length - scores.length;\n  const scoreDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = guessesDifferenceDifference * -1;\n  const scoreDifferenceDifferenceDifference = scoreDifferenceDifference * -1;\n  const guessesDifferenceDifferenceDifference = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n   The extensions are to be used to load additional class to the class. The \n   strength of the elongation is as follows: Let CAP equal the numeral of the capital \n   letters in the extension's name, and permit SM be the phone number of small letter letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find oneself the hard elongation and return a chain in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the like strength, you should \n   choose the one that come foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_strength = extensions.reduce((acc, curr) => {\n    const [name, phone] = curr.split('.');\n    const cap = name[0].toUpperCase();\n    const sm = phone.substr(1);\n    return acc + (cap - sm);\n  }, 0);\n  return `${class_name}.${extension_strength}`;\n};\n\n/*\n  Given a class name, a phone number, and a list of extensions, return the \n  name of the class with the highest strength.\n  Example:\n  highestStrength('my_class', '123456789', ['AA', 'Be', 'CC']) =='my_class'\n  */\nconst highestStrength = (class_name, phone_number, extensions) => {\n  const extension_strength = extensions.reduce((acc, curr) => {\n    const [name, phone] = curr.split('.');\n    const cap = name[0].toUpperCase();\n    const sm = phone.substr(1);\n    return acc + (cap - sm);\n  }, 0);\n  return `${class_name}.${extension_strength}`;\n};\n\n/*\n  Given a class name, a phone number, and a list of extensions, return the \n  name of the class with the lowest strength.\n  Example:\n  lowestStrength('my_class', '123456789', ['AA', 'Be', 'CC']) =='my_class'\n  */\nconst lowestStrength = (class_name, phone_number, extensions) => {\n  const extension_strength = extensions.reduce((acc, curr) => {\n    const [name, phone] = curr.split('.');\n    const cap = name[0].toUpperCase();\n    const sm = phone.substr(1);\n    return acc + (cap - sm);\n  }, 0);\n  return `${class_name}.${extension_strength}`;\n};\n\n/*\n  Given a class name, a phone number, and a list of extensions, return the \n  name of the class with the highest strength and lowest strength.\n  Example:\n  highestStrengthAndLowestStrength('my_class', '123456789', ['AA', 'Be', 'CC']) =='my_class'\n  */\nconst highestStrengthAndLowestStrength = (class_name, phone_number, extensions) => {\n  const extension_strength = extensions.reduce((acc, curr) => {\n    const [name, phone] = curr.split('.');\n    const cap = name[0].toUpperCase();\n    const sm = phone.substr(1);\n    return acc + (cap - sm);\n  }, 0);\n  return `${class_name}.${extension_strength}.${lowestStrength(class_name, phone_number, extensions)}`;\n};\n\n/*\n  Given a class name, a phone number, and a list of extensions, return the \n  name of the class with the highest strength and lowest strength.\n  Example:\n  highestStrengthAndLowestStrengthAndLowestStrength('my_class', '123456789', ['AA', 'Be', 'CC']) =='my_class'\n  */\nconst highestStrengthAndLowestStrengthAndLowestStrength = (class_name, phone_number, extensions) => {\n  const extension_strength = extensions.reduce((acc, curr) => {\n    const [name, phone] = curr.split('.');\n    const cap = name[0].toUpperCase();\n    const sm = phone.substr(1);\n    return acc + (cap - sm);\n  }, 0);\n  return `${class_name}.${extension_strength}.${highestStrengthAndLowestStrength(class_name, phone_number, extensions)}`;\n};\n\n/*\n  Given a class name, a phone number, and a list of extensions, return the \n  name of the class with the highest strength and lowest strength.\n  Example:\n  highestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrength('my_class', '123456789', ['AA', 'Be', 'CC']) =='my_class'\n  */\nconst highestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrength = (class_name, phone_number, extensions) => {\n  const extension_strength = extensions.reduce((acc, curr) => {\n    const [name, phone] = curr.split('.');\n    const cap = name[0].toUpperCase();\n    const sm = phone.substr(1);\n    return acc + (cap - sm);\n  }, 0);\n  return `${class_name}.${extension_strength}.${lowestStrengthAndLowestStrengthAndLowestStrength(class_name, phone_number, extensions)}`;\n};\n\n/*\n  Given a class name, a phone number, and a list of extensions, return the \n  name of the class with the highest strength and lowest strength.\n  Example:\n  highestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrength('my_class', '123456789', ['AA', 'Be', 'CC']) =='my_class'\n  */\nconst highestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrength = (class_name, phone_number, extensions) => {\n  const extension_strength = extensions.reduce((acc, curr) => {\n    const [name, phone] = curr.split('.');\n    const cap = name[0].toUpperCase();\n    const sm = phone.substr(1);\n    return acc + (cap - sm);\n  }, 0);\n  return `${class_name}.${extension_strength}.${highestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrength(class_name, phone_number, extensions)}`;\n};\n\n/*\n  Given a class name, a phone number, and a list of extensions, return the \n  name of the class with the highest strength and lowest strength.\n  Example:\n  highestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestStrengthAndLowestSt", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second bible or any of its rotation is a substring in the inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > dependable \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > assumed \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a1 = a.split('')\n   let b1 = b.split('')\n   let a2 = a1.map((v, i) => v + i)\n   let b2 = b1.map((v, i) => v + i)\n   let a3 = a2.filter((v, i) => v === a[i])\n   let b3 = b2.filter((v, i) => v === b[i])\n   let a4 = a3.filter((v, i) => v === a[i])\n   let b4 = b3.filter((v, i) => v === b[i])\n   let a5 = a4.filter((v, i) => v === a[i])\n   let b5 = b4.filter((v, i) => v === b[i])\n   let a6 = a5.filter((v, i) => v === a[i])\n   let b6 = b5.filter((v, i) => v === b[i])\n   let a7 = a6.filter((v, i) => v === a[i])\n   let b7 = b6.filter((v, i) => v === b[i])\n   let a8 = a7.filter((v, i) => v === a[i])\n   let b8 = b7.filter((v, i) => v === b[i])\n   let a9 = a8.filter((v, i) => v === a[i])\n   let b9 = b8.filter((v, i) => v === b[i])\n   let a10 = a9.filter((v, i) => v === a[i])\n   let b10 = b9.filter((v, i) => v === b[i])\n   let a11 = a10.filter((v, i) => v === a[i])\n   let b11 = b10.filter((v, i) => v === b[i])\n   let a12 = a11.filter((v, i) => v === a[i])\n   let b12 = b11.filter((v, i) => v === b[i])\n   let a13 = a12.filter((v, i) => v === a[i])\n   let b13 = b12.filter((v, i) => v === b[i])\n   let a14 = a13.filter((v, i) => v === a[i])\n   let b14 = b13.filter((v, i) => v === b[i])\n   let a15 = a14.filter((v, i) => v === a[i])\n   let b15 = b14.filter((v, i) => v === b[i])\n   let a16 = a15.filter((v, i) => v === a[i])\n   let b16 = b15.filter((v, i) => v === b[i])\n   let a17 = a16.filter((v, i) => v === a[i])\n   let b17 = b16.filter((v, i) => v === b[i])\n   let a18 = a17.filter((v, i) => v === a[i])\n   let b18 = b17.filter((v, i) => v === b[i])\n   let a19 = a18.filter((v, i) => v === a[i])\n   let b19 = b18.filter((v, i) => v === b[i])\n   let a20 = a19.filter((v, i) => v === a[i])\n   let b20 = b19.filter((v, i) => v === b[i])\n   let a21 = a20.filter((v, i) => v === a[i])\n   let b21= b20.filter((v, i) => v === b[i])\n   let a22 = a21.filter((v, i) => v === a[i])\n   let b22 = b21.filter((v, i) => v === b[i])\n   let a23 = a22.filter((v, i) => v === a[i])\n   let b23 = b22.filter((v, i) => v === b[i])\n   let a24 = a23.filter((v, i) => v === a[i])\n   let b24 = b23.filter((v, i) => v === b[i])\n   let a25 = a24.filter((v, i) => v === a[i])\n   let b25 = b24.filter((v, i) => v === b[i])\n   let a26 = a25.filter((v, i) => v === a[i])\n   let b26 = b25.filter((v, i) => v === b[i])\n   let a27 = a26.filter((v, i) => v === a[i])\n   let b27 = b26.filter((v, i) => v === b[i])\n   let a28 = a27.filter((v, i) => v === a[i])\n   let b28 = b27.filter((v, i) => v === b[i])\n   let a29 = a28.filter((v, i) => v === a[i])\n   let b29 = b28.filter((v, i) => v === b[i])\n   let a30 = a29.filter((v, i) => v === a[i])\n   let b30 = b29.filter((v, i) => v === b[i])\n   let a31 = a30.filter((v, i) => v === a[i])\n   let b31= b30.filter((v, i) => v === b[i])\n   let a32 = a31.filter((v, i) => v === a[i])\n   let b32 = b31.filter((v, i) => v === b[i])\n   let a33 = a32.filter((v, i) => v === a[i])\n   let b33 = b32.filter((v, i) => v === b[i])\n   let a34 = a33.filter((v, i) => v === a[i])\n   let b34 = b33.filter((v, i) => v === b[i])\n   let a35 = a34.filter((v, i) => v === a[i])\n   let b35 = b34.filter((v, i) => v === b[i])\n   let a36 = a35.filter((v, i) => v === a[i])\n   let b36 = b35.filter((v, i) => v === b[i])\n   let a37 = a36.filter((v, i) => v === a[i])\n   let b37 = b36.filter((v, i) => v === b[i])\n   let a38 = a37.filter((v, i) => v === a[i])\n   let b38 = b37.filter((v, i) => v === b[i])\n   let a39 = a38.filter((v, i) => v === a[i])\n   let b39 = b38.filter((v, i) => v === b[i])\n   let a40 = a39.filter((v, i) => v === a[i])\n   let b40 = b39.filter((v, i) => v === b[i])\n   let a41 = a40.filter((v, i) => v === a[i])\n   let b41 = b40.filter((v, i) => v === b[i])\n   let a42 = a41.filter((v, i) => v === a[i])\n   let b42 = b41.filter((v, i) => v === b[i])\n   let a43 = a42.filter((v, i) => v === a[i])\n   let b43= b42.filter((v, i) => v === b[i])\n   let a44 = a43.filter((v, i) => v === a[i])\n   let b44 = b43.filter((v, i) => v === b[i])\n   let a45 = a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and leftover finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and leftover finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let leftCount = 0;\n  let numToCheck = num;\n  while (numToCheck) {\n    if (numToCheck & 1) {\n      evenCount++;\n    }\n    numToCheck = numToCheck >> 1;\n  }\n  while (numToCheck) {\n    if (numToCheck & 1) {\n      leftCount++;\n    }\n    numToCheck = numToCheck >> 1;\n  }\n  return [evenCount, leftCount];\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArray = (str) => {\n  let arr = [];\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverseReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverseReverseReverseReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      stringToArray('helloworld') ==> ['h', 'e', 'l', 'l', 'o', 'd']\n  */\nconst stringToArrayReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  return arr;\n};\n\n/*Given a string, return an array that has all the characters in that string in order.\n\n   Example:\n      stringToArray('hello') ==> ['h', 'e', 'l', 'l", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a drawstring, \n   and return it in small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   exemplar:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = \"\";\n  let num = (number + \"\").replace(/[^0-9]/g, \"\");\n  let numArr = num.split(\"\");\n  let numStr = \"\";\n  let numStrArr = [];\n  let numStrArrLen = numArr.length;\n  let numStrArrLen2 = numStrArrLen;\n  let numStrArrLen3 = numStrArrLen;\n  let numStrArrLen4 = numStrArrLen;\n  let numStrArrLen5 = numStrArrLen;\n  let numStrArrLen6 = numStrArrLen;\n  let numStrArrLen7 = numStrArrLen;\n  let numStrArrLen8 = numStrArrLen;\n  let numStrArrLen9 = numStrArrLen;\n  let numStrArrLen10 = numStrArrLen;\n  let numStrArrLen11 = numStrArrLen;\n  let numStrArrLen12 = numStrArrLen;\n  let numStrArrLen13 = numStrArrLen;\n  let numStrArrLen14 = numStrArrLen;\n  let numStrArrLen15 = numStrArrLen;\n  let numStrArrLen16 = numStrArrLen;\n  let numStrArrLen17 = numStrArrLen;\n  let numStrArrLen18 = numStrArrLen;\n  let numStrArrLen19 = numStrArrLen;\n  let numStrArrLen20 = numStrArrLen;\n  let numStrArrLen21 = numStrArrLen;\n  let numStrArrLen22 = numStrArrLen;\n  let numStrArrLen23 = numStrArrLen;\n  let numStrArrLen24 = numStrArrLen;\n  let numStrArrLen25 = numStrArrLen;\n  let numStrArrLen26 = numStrArrLen;\n  let numStrArrLen27 = numStrArrLen;\n  let numStrArrLen28 = numStrArrLen;\n  let numStrArrLen29 = numStrArrLen;\n  let numStrArrLen30 = numStrArrLen;\n  let numStrArrLen31 = numStrArrLen;\n  let numStrArrLen32 = numStrArrLen;\n  let numStrArrLen33 = numStrArrLen;\n  let numStrArrLen34 = numStrArrLen;\n  let numStrArrLen35 = numStrArrLen;\n  let numStrArrLen36 = numStrArrLen;\n  let numStrArrLen37 = numStrArrLen;\n  let numStrArrLen38 = numStrArrLen;\n  let numStrArrLen39 = numStrArrLen;\n  let numStrArrLen40 = numStrArrLen;\n  let numStrArrLen41 = numStrArrLen;\n  let numStrArrLen42 = numStrArrLen;\n  let numStrArrLen43 = numStrArrLen;\n  let numStrArrLen44 = numStrArrLen;\n  let numStrArrLen45 = numStrArrLen;\n  let numStrArrLen46 = numStrArrLen;\n  let numStrArrLen47 = numStrArrLen;\n  let numStrArrLen48 = numStrArrLen;\n  let numStrArrLen49 = numStrArrLen;\n  let numStrArrLen50 = numStrArrLen;\n  let numStrArrLen51 = numStrArrLen;\n  let numStrArrLen52 = numStrArrLen;\n  let numStrArrLen53 = numStrArrLen;\n  let numStrArrLen54 = numStrArrLen;\n  let numStrArrLen55 = numStrArrLen;\n  let numStrArrLen56 = numStrArrLen;\n  let numStrArrLen57 = numStrArrLen;\n  let numStrArrLen58 = numStrArrLen;\n  let numStrArrLen59 = numStrArrLen;\n  let numStrArrLen60 = numStrArrLen;\n  let numStrArrLen61 = numStrArrLen;\n  let numStrArrLen62 = numStrArrLen;\n  let numStrArrLen63 = numStrArrLen;\n  let numStrArrLen64 = numStrArrLen;\n  let numStrArrLen65 = numStrArrLen;\n  let numStrArrLen66 = numStrArrLen;\n  let numStrArrLen67 = numStrArrLen;\n  let numStrArrLen68 = numStrArrLen;\n  let numStrArrLen69 = numStrArrLen;\n  let numStrArrLen70 = numStrArrLen;\n  let numStrArrLen71 = numStrArrLen;\n  let numStrArrLen72 = numStrArrLen;\n  let numStrArrLen73 = numStrArrLen;\n  let numStrArrLen74 = numStrArrLen;\n  let numStrArrLen75 = numStrArrLen;\n  let numStrArrLen76 = numStrArrLen;\n  let numStrArrLen77 = numStrArrLen;\n  let numStrArrLen78 = numStrArrLen;\n  let numStrArrLen79 = numStrArrLen;\n  let numStrArrLen80 = numStrArrLen;\n  let numStrArrLen81 = numStrArrLen;\n  let numStrArrLen82 = numStrArrLen;\n  let numStrArrLen83 = numStrArrLen;\n  let numStrArrLen84 = numStrArrLen;\n  let numStrArrLen85 = numStrArrLen;\n  let numStrArrLen86 = numStrArrLen;\n  let numStrArrLen87 = numStrArrLen;\n  let numStrArrLen88 = numStrArrLen;\n  let numStrArrLen89 = numStrArrLen;\n  let numStrArrLen90 = numStrArrLen;\n  let numStrArrLen91 = numStrArrLen;\n  let numStrArrLen92 = numStrArrLen;\n  let numStrArrLen93 = numStrArrLen;\n  let numStrArrLen94 = numStrArrLen;\n  let numStrArrLen95 = numStrArrLen;\n  let numStrArrLen96 = numStrArrLen;\n  let numStrArrLen97 = numStrArrLen;\n  let numStrArrLen98 = numStrArrLen;\n  let numStrArrLen99 = numStrArrLen;\n  let numStrArrLen100 = numStrArrLen;\n  let numStrArrLen101 = numStrArrLen;\n  let numStrArrLen102 = numStrArrLen;\n  let numStrArrLen103 = numStrArrLen;\n  let numStrArrLen104 = numStrArrLen;\n  let numStrArrLen105 = numStrArrLen;\n  let numStrArrLen106 = numStrArrLen;\n  let numStrArrLen107 = numStrArrLen;\n  let numStrArrLen108 = numStrArrLen;\n  let numStrArrLen109 = numStrArr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - fish triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const aLength = Math.sqrt(a * a + b * b);\n  const bLength = Math.sqrt(b * b + c * c);\n  const cLength = Math.sqrt(c * c + a * a);\n  if (aLength * bLength * cLength < 1) {\n    return false;\n  }\n  const aAngle = Math.atan2(b, a);\n  const bAngle = Math.atan2(c, c);\n  const cAngle = Math.atan2(a, c);\n  if (aAngle > bAngle && bAngle > cAngle) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a left - fish triangulum, false differently. \n   A left - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const aLength = Math.sqrt(a * a + b * b);\n  const bLength = Math.sqrt(b * b + c * c);\n  const cLength = Math.sqrt(c * c + a * a);\n  if (aLength * bLength * cLength < 1) {\n    return false;\n  }\n  const aAngle = Math.atan2(b, a);\n  const bAngle = Math.atan2(c, c);\n  const cAngle = Math.atan2(a, c);\n  if (aAngle < bAngle && bAngle < cAngle) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a top - fish triangulum, false differently. \n   A top - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  topAngleTriangle(3, 4, 5) == true\n  topAngleTriangle(1, 2, 3) == false\n  */\nconst topAngleTriangle = (a, b, c) => {\n  const aLength = Math.sqrt(a * a + b * b);\n  const bLength = Math.sqrt(b * b + c * c);\n  const cLength = Math.sqrt(c * c + a * a);\n  if (aLength * bLength * cLength < 1) {\n    return false;\n  }\n  const aAngle = Math.atan2(b, a);\n  const bAngle = Math.atan2(c, c);\n  const cAngle = Math.atan2(a, c);\n  if (aAngle < bAngle && bAngle < cAngle) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a bottom - fish triangulum, false differently. \n   A bottom - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  bottomAngleTriangle(3, 4, 5) == true\n  bottomAngleTriangle(1, 2, 3) == false\n  */\nconst bottomAngleTriangle = (a, b, c) => {\n  const aLength = Math.sqrt(a * a + b * b);\n  const bLength = Math.sqrt(b * b + c * c);\n  const cLength = Math.sqrt(c * c + a * a);\n  if (aLength * bLength * cLength < 1) {\n    return false;\n  }\n  const aAngle = Math.atan2(b, a);\n  const bAngle = Math.atan2(c, c);\n  const cAngle = Math.atan2(a, c);\n  if (aAngle > bAngle && bAngle > cAngle) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a left - angled triangulum, false differently. \n   A left - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  leftAngleAngleTriangle(3, 4, 5) == true\n  leftAngleAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleAngleTriangle = (a, b, c) => {\n  const aLength = Math.sqrt(a * a + b * b);\n  const bLength = Math.sqrt(b * b + c * c);\n  const cLength = Math.sqrt(c * c + a * a);\n  if (aLength * bLength * cLength < 1) {\n    return false;\n  }\n  const aAngle = Math.atan2(b, a);\n  const bAngle = Math.atan2(c, c);\n  const cAngle = Math.atan2(a, c);\n  if (aAngle < bAngle && bAngle < cAngle) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a right - angled triangulum, false differently. \n   A right - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  rightAngleAngleTriangle(3, 4, 5) == true\n  rightAngleAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleAngleTriangle = (a, b, c) => {\n  const aLength = Math.sqrt(a * a + b * b);\n  const bLength = Math.sqrt(b * b + c * c);\n  const cLength = Math.sqrt(c * c + a * a);\n  if (aLength * bLength * cLength < 1) {\n    return false;\n  }\n  const aAngle = Math.atan2(b, a);\n  const bAngle = Math.atan2(c, c);\n  const cAngle = Math.atan2(a, c);\n  if (aAngle > bAngle && bAngle > cAngle) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a top - angled triangulum, false differently. \n   A top - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  topAngleAngleTriangle(3, 4, 5) == true\n  topAngleAngleTriangle(1, 2, 3) == false\n  */\nconst topAngleAngleTriangle = (a, b, c) => {\n  const aLength = Math.sqrt(a * a + b * b);\n  const bLength = Math.sqrt(b * b + c * c);\n  const cLength = Math.sqrt(c * c + a * a);\n  if (aLength * bLength * cLength < 1) {\n    return false;\n  }\n  const aAngle = Math.atan2(b, a);\n  const bAngle = Math.atan2(c, c);\n  const cAngle = Math.atan2(a, c);\n  if (aAngle < bAngle && bAngle < cAngle) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return on-key if the three \n   side shape a bottom - angled triangulum, false differently. \n   A bottom - angled triangulum is a triangle in which one angle is proper angle or \n   90 degree.\n  Example:\n  bottomAngleAngleTriangle(3, 4, 5) == true\n  bottomAngleAngleTriangle(1, 2, 3) == false\n  */\nconst bottomAngleAngleTriangle = (a, b, c) => {\n  const aLength = Math.sqrt(a * a + b * b);\n  const bLength = Math.sqrt(b * b + c * c);\n  const c", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = words[0];\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n */\n\n/**\n * Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = words[0];\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n */\n\n/**\n * Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = words[0];\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n */\n\n/**\n * Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = words[0];\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n */\n\n/**\n * Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = words[0];\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n */\n\n/**\n * Write a function that accepts a list of strings. \n   The list contains unlike words. Return the word with maximal act \n   of unique character. If multiple string have maximum numeral of unique \n   character, return the one which come first in lexicographic holy order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = words[0];\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaa", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a sealed number of carrots, \n   but immediately you need to eat more carrots to dispatch the day's meal. \n   you should return an array of [ total number of eaten carrot after your meal, \n                                   the number of carrots leave after your meal ] \n   if there are not adequate remaining carrot, you will eat all remaining carrot, but will still equal hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need);\n  const remainingCarrots = Math.ceil(remaining * need);\n  const totalCarrotRemaining = Math.ceil(totalCarrots - remainingCarrots);\n  const carrotRemaining = [totalCarrotRemaining, remainingCarrots];\n  const carrotRemainingArray = carrotRemaining.map((carrotRemaining, index) => [carrotRemaining, index]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArray.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], carrotRemaining[1]]);\n  const carrotRemainingArrayWithTotalCarrots = carrotRemainingArrayWithTotalCarrots.map((carrotRemaining, index) => [carrotRemaining[0], car", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many distinct character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of a given string.\n * https://leetcode.com/problems/longest-common-subsequence/\n * \n * Example 1:\n * \n * Input: \"abacaba\"\n * Output: \"aba\"\n * Explanation: The longest common subsequence is \"aba\".\n * \n * Example 2:\n * \n * Input: \"aba\"\n * Output: \"a\"\n * Explanation: The longest common subsequence is \"a\".\n * \n * Example 3:\n * \n * Input: \"ab\"\n * Output: \"ab\"\n * Explanation: The longest common subsequence is \"ab\".\n * \n * Example 4:\n * \n * Input: \"a\"\n * Output: \"a\"\n * Explanation: The longest common subsequence is \"a\".\n * \n * Note:\n * \n * The given string will only contain lowercase English letters.\n * \n * Follow up:\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n * Could you solve it without using extra memory?\n * \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result * operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result + operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result - operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result + operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result - operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result + operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n   the second list embody a list of integers. practice the two given list to build up the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   if s[i] is a letter, reverse its case from depleted to upper or vise versa, \n   otherwise retain it as it is. \n   If the drawstring contains no letters, change by reversal the chain. \n   The function should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let res = '';\n  let len = s.length;\n  let i;\n  let ch;\n  let ch2;\n  let ch3;\n  let ch4;\n  let ch5;\n  let ch6;\n  let ch7;\n  let ch8;\n  let ch9;\n  let ch10;\n  let ch11;\n  let ch12;\n  let ch13;\n  let ch14;\n  let ch15;\n  let ch16;\n  let ch17;\n  let ch18;\n  let ch19;\n  let ch20;\n  let ch21;\n  let ch22;\n  let ch23;\n  let ch24;\n  let ch25;\n  let ch26;\n  let ch27;\n  let ch28;\n  let ch29;\n  let ch30;\n  let ch31;\n  let ch32;\n  let ch33;\n  let ch34;\n  let ch35;\n  let ch36;\n  let ch37;\n  let ch38;\n  let ch39;\n  let ch40;\n  let ch41;\n  let ch42;\n  let ch43;\n  let ch44;\n  let ch45;\n  let ch46;\n  let ch47;\n  let ch48;\n  let ch49;\n  let ch50;\n  let ch51;\n  let ch52;\n  let ch53;\n  let ch54;\n  let ch55;\n  let ch56;\n  let ch57;\n  let ch58;\n  let ch59;\n  let ch60;\n  let ch61;\n  let ch62;\n  let ch63;\n  let ch64;\n  let ch65;\n  let ch66;\n  let ch67;\n  let ch68;\n  let ch69;\n  let ch70;\n  let ch71;\n  let ch72;\n  let ch73;\n  let ch74;\n  let ch75;\n  let ch76;\n  let ch77;\n  let ch78;\n  let ch79;\n  let ch80;\n  let ch81;\n  let ch82;\n  let ch83;\n  let ch84;\n  let ch85;\n  let ch86;\n  let ch87;\n  let ch88;\n  let ch89;\n  let ch90;\n  let ch91;\n  let ch92;\n  let ch93;\n  let ch94;\n  let ch95;\n  let ch96;\n  let ch97;\n  let ch98;\n  let ch99;\n  let ch100;\n  let ch101;\n  let ch102;\n  let ch103;\n  let ch104;\n  let ch105;\n  let ch106;\n  let ch107;\n  let ch108;\n  let ch109;\n  let ch110;\n  let ch111;\n  let ch112;\n  let ch113;\n  let ch114;\n  let ch115;\n  let ch116;\n  let ch117;\n  let ch118;\n  let ch119;\n  let ch120;\n  let ch121;\n  let ch122;\n  let ch123;\n  let ch124;\n  let ch125;\n  let ch126;\n  let ch127;\n  let ch128;\n  let ch129;\n  let ch130;\n  let ch131;\n  let ch132;\n  let ch133;\n  let ch134;\n  let ch135;\n  let ch136;\n  let ch137;\n  let ch138;\n  let ch139;\n  let ch140;\n  let ch141;\n  let ch142;\n  let ch143;\n  let ch144;\n  let ch145;\n  let ch146;\n  let ch147;\n  let ch148;\n  let ch149;\n  let ch150;\n  let ch151;\n  let ch152;\n  let ch153;\n  let ch154;\n  let ch155;\n  let ch156;\n  let ch157;\n  let ch158;\n  let ch159;\n  let ch160;\n  let ch161;\n  let ch162;\n  let ch163;\n  let ch164;\n  let ch165;\n  let ch166;\n  let ch167;\n  let ch168;\n  let ch169;\n  let ch170;\n  let ch171;\n  let ch172;\n  let ch173;\n  let ch174;\n  let ch175;\n  let ch176;\n  let ch177;\n  let ch178;\n  let ch179;\n  let ch180;\n  let ch181;\n  let ch182;\n  let ch183;\n  let ch184;\n  let ch185;\n  let ch186;\n  let ch187;\n  let ch188;\n  let ch189;\n  let ch190;\n  let ch191;\n  let ch192;\n  let ch193;\n  let ch194;\n  let ch195;\n  let ch196;\n  let ch197;\n  let ch198;\n  let ch199;\n  let ch200;\n  let ch201;\n  let ch202;\n  let ch203;\n  let ch204;\n  let ch205;\n  let ch206;\n  let ch207;\n  let ch208;\n  let ch209;\n  let ch210;\n  let ch211;\n  let ch212;\n  let ch213;\n  let ch214;\n  let ch215;\n  let ch216;\n  let ch217;\n  let ch218;\n  let ch219;\n  let ch220;\n  let ch221;\n  let ch222;\n  let ch223;\n  let ch224;\n  let ch225;\n  let ch226;\n  let ch227;\n  let ch228;\n  let ch229;\n  let ch230;\n  let ch231;\n  let ch232;\n  let ch233;\n  let ch234;\n  let ch235;\n  let ch236;\n  let ch237;\n  let ch238;\n  let ch239;\n  let ch240;\n  let ch241;\n  let ch242;\n  let ch243;\n  let ch244;\n  let ch245;\n  let ch246;\n  let ch247;\n  let ch248;\n  let ch249;\n  let ch250;\n  let ch251;\n  let ch252;\n  let ch253;\n  let ch254;\n  let ch255;\n  let ch256;\n  let ch257;\n  let ch258;\n  let ch259;\n  let ch260;\n  let ch261;\n  let ch262;\n  let ch263;\n  let ch264;\n  let ch265;\n  let ch266;\n  let ch267;\n  let ch268;\n  let ch269;\n  let ch270;\n  let ch271;\n  let ch272;\n  let ch273;\n  let ch274;\n  let ch275;\n  let ch276;\n  let ch277;\n  let ch278;\n  let ch279;\n  let ch280;\n  let ch281;\n  let ch282;\n  let ch283;\n  let ch284;\n  let ch285;\n  let ch286;\n  let ch287;\n  let ch288;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return '';\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha1('Hello world') == '9a8e9d44f59b17f1b4ea9d46e34efa9d27'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return '';\n  }\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha224('Hello world') == 'f3bcc9c44c8a8a2e416d09a86e3b0c449'\n  */\nconst stringToSha224 = (text) => {\n  if (!text) {\n    return '';\n  }\n  return crypto.createHash('sha224').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' is an empty string, return nothing.\n\n  >>> stringToSha256('Hello world') == 'f86e4e4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4be4", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascend orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = 0;\n  while (i < b) {\n    if (i % 2 === 0) {\n      result.push(j);\n    }\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverse('abc') => 'cba'\n  reverse('ab') => 'ba'\n  reverse('') => 'a'\n  */\nconst reverse = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverse('abc') => 'cba'\n  reverse('ab') => 'ba'\n  reverse('') => 'a'\n  */\nconst reverseCase = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseCase('abc') => 'ABC'\n  reverseCase('ab') => 'Abc'\n  reverseCase('') => 'a'\n  */\nconst reverseCaseLetters = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseCaseLetters('abc') => 'ABC'\n  reverseCaseLetters('ab') => 'Abc'\n  reverseCaseLetters('') => 'a'\n  */\nconst reverseWord = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWord('abc') => 'abc'\n  reverseWord('ab') => 'ba'\n  reverseWord('') => 'a'\n  */\nconst reverseWordCase = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCase('abc') => 'ABC'\n  reverseWordCase('ab') => 'Abc'\n  reverseWordCase('') => 'a'\n  */\nconst reverseWordCaseLetters = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseLetters('abc') => 'ABC'\n  reverseWordCaseLetters('ab') => 'Abc'\n  reverseWordCaseLetters('') => 'a'\n  */\nconst reverseWordCaseWord = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseWord('abc') => 'ABC'\n  reverseWordCaseWord('ab') => 'Abc'\n  reverseWordCaseWord('') => 'a'\n  */\nconst reverseWordCaseWordLetters = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseWordLetters('abc') => 'ABC'\n  reverseWordCaseWordLetters('ab') => 'Abc'\n  reverseWordCaseWordLetters('') => 'a'\n  */\nconst reverseWordCaseWordWord = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseWordWord('abc') => 'ABC'\n  reverseWordCaseWordWord('ab') => 'Abc'\n  reverseWordCaseWordWord('') => 'a'\n  */\nconst reverseWordCaseWordWordLetters = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseWordWordWord('abc') => 'ABC'\n  reverseWordCaseWordWordWord('ab') => 'Abc'\n  reverseWordCaseWordWordWord('') => 'a'\n  */\nconst reverseWordCaseWordWordWord = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseWordWordWordWord('abc') => 'ABC'\n  reverseWordCaseWordWordWordWord('ab') => 'Abc'\n  reverseWordCaseWordWordWordWord('') => 'a'\n  */\nconst reverseWordCaseWordWordWordWordLetters = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseWordWordWordWord('abc') => 'ABC'\n  reverseWordCaseWordWordWordWordWord('ab') => 'Abc'\n  reverseWordCaseWordWordWordWordWord('') => 'a'\n  */\nconst reverseWordCaseWordWordWordWordWord = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseWordWordWordWordWord('abc') => 'ABC'\n  reverseWordCaseWordWordWordWordWordWord('ab') => 'Abc'\n  reverseWordCaseWordWordWordWordWordWord('') => 'a'\n  */\nconst reverseWordCaseWordWordWordWordWordLetters = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseWordWordWordWordWordWord('abc') => 'ABC'\n  reverseWordCaseWordWordWordWordWordWordWord('ab') => 'Abc'\n  reverseWordCaseWordWordWordWordWordWordWord('') => 'a'\n  */\nconst reverseWordCaseWordWordWordWordWordWord = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseWordWordWordWordWordWordWord('abc') => 'ABC'\n  reverseWordCaseWordWordWordWordWordWordWord('ab') => 'Abc'\n  reverseWordCaseWordWordWordWordWordWordWordWord('') => 'a'\n  */\nconst reverseWordCaseWordWordWordWordWordWordWordWord = str => {\n  if (str === '') {\n    return '';\n  }\n  return str.split('').reverse().join('');\n};\n\n/**\n  Given a string, return the string in reverse order.\n\n  For example:\n  reverseWordCaseWordWordWordWordWordWordWordWord('abc') => 'ABC'\n  reverseWordCase", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n  ' o' - hale bill, survive four beats \n  ' o|' - half note, lasts two beat \n  ' .|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = music_string.split('|');\n  let music_list_length = music_list.length;\n  let music_list_array = [];\n  for (let i = 0; i < music_list_length; i++) {\n    let music_list_item = music_list[i].split(' ');\n    music_list_array[i] = parseInt(music_list_item[0]);\n  }\n  return music_list_array;\n};\n\n/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = music_string.split('|');\n  let music_list_length = music_list.length;\n  let music_list_array = [];\n  for (let i = 0; i < music_list_length; i++) {\n    let music_list_item = music_list[i].split(' ');\n    music_list_array[i] = parseInt(music_list_item[0]);\n  }\n  return music_list_array;\n};\n\n/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = music_string.split('|');\n  let music_list_length = music_list.length;\n  let music_list_array = [];\n  for (let i = 0; i < music_list_length; i++) {\n    let music_list_item = music_list[i].split(' ');\n    music_list_array[i] = parseInt(music_list_item[0]);\n  }\n  return music_list_array;\n};\n\n/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = music_string.split('|');\n  let music_list_length = music_list.length;\n  let music_list_array = [];\n  for (let i = 0; i < music_list_length; i++) {\n    let music_list_item = music_list[i].split(' ');\n    music_list_array[i] = parseInt(music_list_item[0]);\n  }\n  return music_list_array;\n};\n\n/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = music_string.split('|');\n  let music_list_length = music_list.length;\n  let music_list_array = [];\n  for (let i = 0; i < music_list_length; i++) {\n    let music_list_item = music_list[i].split(' ');\n    music_list_array[i] = parseInt(music_list_item[0]);\n  }\n  return music_list_array;\n};\n\n/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = music_string.split('|');\n  let music_list_length = music_list.length;\n  let music_list_array = [];\n  for (let i = 0; i < music_list_length; i++) {\n    let music_list_item = music_list[i].split(' ');\n    music_list_array[i] = parseInt(music_list_item[0]);\n  }\n  return music_list_array;\n};\n\n/* Input to this function is a string representing musical eminence in a especial american standard code for information interchange format. \n   Your undertaking is to parse this string and return list of integer corresponding to how many beats does each \n   not last. \n\n   Here is a caption: \n 'o' - hale bill, survive four beats \n 'o|' - half note, lasts two beat \n  '.|' - quater bill, lasts one beatnik\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = music_string.split('|');\n  let music_list_length = music_list.length;\n  let music_list_array = [];\n  for (let i = 0; i < music_list_length; i++) {\n    let music_list_item = music_list[i].split(' ');\n    music_list_array[i] = parseInt(music_list_item[0]);\n  }\n  return music_list_array;\n};\n\n/* Input ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input is a space - delimited string of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   reelect the string with numbers sorted from humble to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = [];\n  const numberMap = {};\n  const numberMapReverse = {};\n  const numberMapReverseReverse = {};\n  const numberMapReverseReverseReverse = {};\n  const numberMapReverseReverseReverseReverse = {};\n  const numberMapReverseReverseReverseReverseReverse = {};\n  const numberMapReverseReverseReverseReverseReverseReverse = {};\n  const numberMapReverseReverseReverseReverseReverseReverseReverse = {};\n  const numberMapReverseReverseReverseReverseReverseReverseReverseReverse = {};\n  const numberMapReverseReverseReverseReverseReverseReverseReverseReverseReverse = {};\n  const numberMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = {};\n  const numberMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = {};\n  const numberMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = {};\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateNumber(3.5)\n  1\n  */\nconst truncateDecimal = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimalWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRounding(3.5)\n  3\n  */\nconst truncateDecimalWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRounding(3.5)\n  3\n  */\nconst truncateDecimalWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRoundingWithRounding(3.5)\n  3\n  */\nconst truncateDecimalWithRoundingWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(3.5)\n  3\n  */\nconst truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding(3.5)\n  3\n  */\nconst truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer part (large integer smaller than give number) and decimal fraction \n   (leftover part constantly little than 1). \n\n   Return the decimal region of the number.\n  >>> truncateDecimalWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRoundingWithRounding = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return integer > 0? integer : integer + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into \n   and integer ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that be the airless to each \n   early and return them in order (humble number, big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that be the airless to each \n   early and return them in order (humble number, big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minAirless = Number.MAX_VALUE;\n  let minBigNumber = Number.MAX_VALUE;\n  let minHumbleNumber = Number.MAX_VALUE;\n  let minHumbleNumberToReturn = Number.MAX_VALUE;\n  let minBigNumberToReturn = Number.MAX_VALUE;\n  let minAirlessToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn = Number.MAX_VALUE;\n  let minAirlessToReturnToReturnToReturnToReturnToReturnToReturnToReturn", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a analogue transform to that list,\n   such that the modest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const maxValue = Math.max.apply(null, numbers);\n  const minValue = Math.min.apply(null, numbers);\n  const range = maxValue - minValue;\n  const scaledNumbers = numbers.map((number) => {\n    return number / range;\n  });\n  return scaledNumbers;\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomFloat = (min, max) => {\n  return Math.random() * (max - min) + min;\n};\n\nconst getRandomBoolean = () => {\n  return Math.random() > 0.5;\n};\n\nconst getRandomColor = (min, max) => {\n  const colors = [\n    '#F5A623',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n    '#F7A5A6',\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNone([])\n  []\n  >>> filterNone([None])\n  [None]\n  >>> filterNone([None, 1])\n  [None, 1]\n  >>> filterNone([None, 1, 2])\n  [None, 1, 2]\n  >>> filterNone([None, 1, None, 2])\n  [None, 1, None, 2]\n  >>> filterNone([None, 1, None, 2, 3])\n  [None, 1, None, 2, 3]\n  >>> filterNone([None, 1, None, 2, None, 3])\n  [None, 1, None, 2, None, 3]\n  >>> filterNone([None, 1, None, 2, None, 3, None])\n  [None, 1, None, 2, None, 3, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4])\n  [None, 1, None, 2, None, 3, None, 4]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None])\n  [None, 1, None, 2, None, 3, None, 4, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5])\n  [None, 1, None, 2, None, 3, None, 4, None, 5]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None, 15])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None, 15]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None, 15, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return substring from given string\n * >>> substr('abc', '', 1)\n  'b'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'\n  >>> substr('abc', '', 1)\n  'c'", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the largest number that separate n evenly, modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = [];\n  let divisor = 1;\n  while (divisor <= n) {\n    divisors.push(divisor);\n    divisor *= 2;\n  }\n  return Math.max(...divisors);\n};\n\n/* Given a number n, return true if the number is divisible by any number divisible by n\n  >>> isDivisibleByAnyDivisor(15)\n  true\n  */\nconst isDivisibleByAnyDivisor = (n) => {\n  return n % largestDivisor(n) === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN(15)\n  true\n  */\nconst isDivisibleByN = (n) => {\n  return n % n === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN(15)\n  false\n  */\nconst isDivisibleByN2 = (n) => {\n  return n % 2 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN2(15)\n  true\n  */\nconst isDivisibleByN3 = (n) => {\n  return n % 3 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN3(15)\n  false\n  */\nconst isDivisibleByN4 = (n) => {\n  return n % 4 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN4(15)\n  true\n  */\nconst isDivisibleByN5 = (n) => {\n  return n % 5 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN5(15)\n  false\n  */\nconst isDivisibleByN6 = (n) => {\n  return n % 6 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN6(15)\n  true\n  */\nconst isDivisibleByN7 = (n) => {\n  return n % 7 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN7(15)\n  false\n  */\nconst isDivisibleByN8 = (n) => {\n  return n % 8 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN8(15)\n  true\n  */\nconst isDivisibleByN9 = (n) => {\n  return n % 9 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN9(15)\n  false\n  */\nconst isDivisibleByN10 = (n) => {\n  return n % 10 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN10(15)\n  true\n  */\nconst isDivisibleByN11 = (n) => {\n  return n % 11 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN11(15)\n  false\n  */\nconst isDivisibleByN12 = (n) => {\n  return n % 12 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN12(15)\n  true\n  */\nconst isDivisibleByN13 = (n) => {\n  return n % 13 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN13(15)\n  false\n  */\nconst isDivisibleByN14 = (n) => {\n  return n % 14 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN14(15)\n  true\n  */\nconst isDivisibleByN15 = (n) => {\n  return n % 15 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN15(15)\n  false\n  */\nconst isDivisibleByN16 = (n) => {\n  return n % 16 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN16(15)\n  true\n  */\nconst isDivisibleByN17 = (n) => {\n  return n % 17 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN17(15)\n  false\n  */\nconst isDivisibleByN18 = (n) => {\n  return n % 18 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN18(15)\n  true\n  */\nconst isDivisibleByN19 = (n) => {\n  return n % 19 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN19(15)\n  false\n  */\nconst isDivisibleByN20 = (n) => {\n  return n % 20 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN20(15)\n  true\n  */\nconst isDivisibleByN21 = (n) => {\n  return n % 21 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN21(15)\n  false\n  */\nconst isDivisibleByN22 = (n) => {\n  return n % 22 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN22(15)\n  true\n  */\nconst isDivisibleByN23 = (n) => {\n  return n % 23 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN23(15)\n  false\n  */\nconst isDivisibleByN24 = (n) => {\n  return n % 24 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN24(15)\n  true\n  */\nconst isDivisibleByN25 = (n) => {\n  return n % 25 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN25(15)\n  false\n  */\nconst isDivisibleByN26 = (n) => {\n  return n % 26 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN26(15)\n  true\n  */\nconst isDivisibleByN27 = (n) => {\n  return n % 27 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN27(15)\n  false\n  */\nconst isDivisibleByN28 = (n) => {\n  return n % 28 === 0;\n};\n\n/* Given a number n, return true if the number is divisible by n\n  >>> isDivisibleByN28(15)\n  true\n  */\nconst isDivisibleByN29", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of given integer in the orderliness from little to big. \n   Each of the factors should be listed phone number of times corresponding to how many times it appear in factorization. \n   Input phone number should cost equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlinesOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlinesOrderlinesOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once. \n   Keep orderliness of chemical element leave the like as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesOrderlinesWithOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlinesOrderlines = (numbers) => {\n  let seen = {};\n  let result = [];\n  numbers.forEach((number) => {\n    if (seen[number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\nmodule.exports = { flipCase, getRandomString };\n\n},{\"./random-string\":5}],5:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],6:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],7:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],8:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],9:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],10:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],11:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],12:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],13:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],14:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],15:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],16:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],17:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],18:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],19:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],20:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],21:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],22:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(length);\n};\n\nmodule.exports = randomString;\n\n},{}],23:[function(require,module,exports){\nconst randomString = (length) => {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const randomChar = chars[Math.floor(Math.random() * chars.length)];\n  return randomChar + randomString(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr) => acc += curr, \"\");\n};\n\n/* Convert string to number\n  >>> convertToNumber(\"\")\n  0\n  >>> convertToNumber(\"1\")\n  1\n  >>> convertToNumber(\"1.2\")\n  1.2\n  >>> convertToNumber(\"1.23\")\n  1.23\n  >>> convertToNumber(\"1.234\")\n  1.234\n  >>> convertToNumber(\"1.23456789\")\n  1.23456789\n  >>> convertToNumber(\"1.2345678901\")\n  1.2345678901\n  >>> convertToNumber(\"1.23456789012\")\n  1.23456789012\n  >>> convertToNumber(\"1.234567890123\")\n  1.234567890123\n  >>> convertToNumber(\"1.2345678901234\")\n  1.2345678901234\n  >>> convertToNumber(\"1.23456789012345\")\n  1.23456789012345\n  >>> convertToNumber(\"1.234567890123456\")\n  1.234567890123456\n  >>> convertToNumber(\"1.2345678901234567\")\n  1.2345678901234567\n  >>> convertToNumber(\"1.23456789012345678\")\n  1.23456789012345678\n  >>> convertToNumber(\"1.23456789012345679\")\n  1.23456789012345679\n  >>> convertToNumber(\"1.23456789012345680\")\n  1.23456789012345680\n  >>> convertToNumber(\"1.234567890123456801\")\n  1.234567890123456801\n  >>> convertToNumber(\"1.234567890123456802\")\n  1.234567890123456802\n  >>> convertToNumber(\"1.234567890123456803\")\n  1.234567890123456803\n  >>> convertToNumber(\"1.234567890123456804\")\n  1.234567890123456804\n  >>> convertToNumber(\"1.234567890123456805\")\n  1.234567890123456805\n  >>> convertToNumber(\"1.234567890123456806\")\n  1.234567890123456806\n  >>> convertToNumber(\"1.234567890123456807\")\n  1.234567890123456807\n  >>> convertToNumber(\"1.234567890123456808\")\n  1.234567890123456808\n  >>> convertToNumber(\"1.234567890123456809\")\n  1.234567890123456809\n  >>> convertToNumber(\"1.234567890123456810\")\n  1.234567890123456810\n  >>> convertToNumber(\"1.234567890123456811\")\n  1.234567890123456811\n  >>> convertToNumber(\"1.234567890123456812\")\n  1.234567890123456812\n  >>> convertToNumber(\"1.234567890123456813\")\n  1.234567890123456813\n  >>> convertToNumber(\"1.234567890123456814\")\n  1.234567890123456814\n  >>> convertToNumber(\"1.234567890123456815\")\n  1.234567890123456815\n  >>> convertToNumber(\"1.234567890123456816\")\n  1.234567890123456816\n  >>> convertToNumber(\"1.234567890123456817\")\n  1.234567890123456817\n  >>> convertToNumber(\"1.234567890123456818\")\n  1.234567890123456818\n  >>> convertToNumber(\"1.234567890123456819\")\n  1.234567890123456819\n  >>> convertToNumber(\"1.234567890123456820\")\n  1.234567890123456820\n  >>> convertToNumber(\"1.234567890123456821\")\n  1.234567890123456821\n  >>> convertToNumber(\"1.234567890123456822\")\n  1.234567890123456822\n  >>> convertToNumber(\"1.234567890123456823\")\n  1.234567890123456823\n  >>> convertToNumber(\"1.234567890123456824\")\n  1.234567890123456824\n  >>> convertToNumber(\"1.234567890123456825\")\n  1.234567890123456825\n  >>> convertToNumber(\"1.234567890123456826\")\n  1.234567890123456826\n  >>> convertToNumber(\"1.234567890123456827\")\n  1.234567890123456827\n  >>> convertToNumber(\"1.234567890123456828\")\n  1.234567890123456828\n  >>> convertToNumber(\"1.234567890123456829\")\n  1.234567890123456829\n  >>> convertToNumber(\"1.234567890123456830\")\n  1.234567890123456830\n  >>> convertToNumber(\"1.234567890123456831\")\n  1.234567890123456831\n  >>> convertToNumber(\"1.234567890123456832\")\n  1.234567890123456832\n  >>> convertToNumber(\"1.234567890123456833\")\n  1.234567890123456833\n  >>> convertToNumber(\"1.234567890123456834\")\n  1.234567890123456834\n  >>> convertToNumber(\"1.234567890123456835\")\n  1.234567890123456835\n  >>> convertToNumber(\"1.234567890123456836\")\n  1.234567890123456836\n  >>> convertToNumber(\"1.234567890123456837\")\n  1.234567890123456837\n  >>> convertToNumber(\"1.234567890123456838\")\n  1.234567890123456838\n  >>> convertToNumber(\"1.234567890123456839\")\n  1.234567890123456839\n  >>> convertToNumber(\"1.234567890123456840\")\n  1.234567890123456840\n  >>> convertToNumber(\"1.234567890123456841\")\n  1.234567890123456841\n  >>> convertToNumber(\"1.234567890123456842\")\n  1.234567890123456842\n  >>> convertToNumber(\"1.234567890123456843\")\n  1.234567890123456843\n  >>> convertToNumber(\"1.234567890123456844\")\n  1.234567890123456844\n  >>> convertToNumber(\"1.234567890123456845\")\n  1.234567890123456845\n  >>> convertToNumber(\"1.234567890123456846\")", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde', 'array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filterBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixNot([], 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterByPrefixNot('abc', 'cde')\n  ['abc', 'cde']\n  */\nconst filterByPrefixNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffixNot([], 'a')\n  []\n  >>> filterBySuffixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterBySuffixNot('abc', 'cde')\n  ['abc', 'cde']\n  */\nconst filterBySuffixNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that end with a given prefix and start with a given suffix.\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filterByPrefixAndSuffixNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filterByPrefixAndSuffixNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNotNot(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filterByPrefixAndSuffixNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNotNot(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filterByPrefixAndSuffixNotNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNotNot(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filterByPrefixAndSuffixNotNotNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNotNotNotNot(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filterByPrefixAndSuffixNotNotNotNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNot", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    }\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],3:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    }\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],4:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    }\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],5:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    }\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],6:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    }\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],7:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    }\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],8:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    }\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],9:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    }\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],10:[function(require,module,exports){\n/**\n * You are given a list of deposit and withdrawal operations on a bank account that start with \n   zero balance. Your job is to detect if at any item the balance of explanation fallls below zero, and \n   at that point routine should return genuine. differently it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -12, -13, -", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0).map(n => +n)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0).map(n => -n)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible5 = (l) => {\n  return l.filter(n => n % 5 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible7 = (l) => {\n  return l.filter(n => n % 7 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 9.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible9 = (l) => {\n  return l.filter(n => n % 9 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible11 = (l) => {\n  return l.filter(n => n % 11 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible13 = (l) => {\n  return l.filter(n => n % 13 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 15.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible15 = (l) => {\n  return l.filter(n => n % 15 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible17 = (l) => {\n  return l.filter(n => n % 17 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible19 = (l) => {\n  return l.filter(n => n % 19 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible23 = (l) => {\n  return l.filter(n => n % 23 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible25 = (l) => {\n  return l.filter(n => n % 25 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible29 = (l) => {\n  return l.filter(n => n % 29 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible31 = (l) => {\n  return l.filter(n => n % 31 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible35 = (l) => {\n  return l.filter(n => n % 35 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 37.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible37 = (l) => {\n  return l.filter(n => n % 37 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 39.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 4]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible39 = (l) => {\n  return l.filter(n => n % 39 === 0).map(n => +n)\n}\n\n/*Return only numbers in the list that are divisible by 42.\n  >>> getDivisible([-1, 2, -4, 5, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is choice, and fake differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number is choice, and fake differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return true;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(6)\n  [2, 3, 5]\n  >>> primeFactors(101)\n  [2, 3, 5, 7]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(13441)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(61)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(4)\n  [2, 3, 5]\n  >>> primeFactors(1)\n  [2, 3, 5]\n  */\nconst primeFactors = (n) => {\n  const factors = [];\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(6)\n  [2, 3, 5]\n  >>> primeFactors(101)\n  [2, 3, 5, 7]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(13441)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(61)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(4)\n  [2, 3, 5]\n  >>> primeFactors(1)\n  [2, 3, 5]\n  */\nconst primeFactorsFast = (n) => {\n  const factors = [];\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(6)\n  [2, 3, 5]\n  >>> primeFactors(101)\n  [2, 3, 5, 7]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(13441)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(61)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(4)\n  [2, 3, 5]\n  >>> primeFactors(1)\n  [2, 3, 5]\n  */\nconst primeFactorsFast2 = (n) => {\n  const factors = [];\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(6)\n  [2, 3, 5]\n  >>> primeFactors(101)\n  [2, 3, 5, 7]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(13441)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(61)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(4)\n  [2, 3, 5]\n  >>> primeFactors(1)\n  [2, 3, 5]\n  */\nconst primeFactorsFast3 = (n) => {\n  const factors = [];\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(6)\n  [2, 3, 5]\n  >>> primeFactors(101)\n  [2, 3, 5, 7]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(13441)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(61)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(4)\n  [2, 3, 5]\n  >>> primeFactors(1)\n  [2, 3, 5]\n  */\nconst primeFactorsFast4 = (n) => {\n  const factors = [];\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(6)\n  [2, 3, 5]\n  >>> primeFactors(101)\n  [2, 3, 5, 7]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(13441)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(61)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(4)\n  [2, 3, 5]\n  >>> primeFactors(1)\n  [2, 3, 5]\n  */\nconst primeFactorsFast5 = (n) => {\n  const factors = [];\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(6)\n  [2, 3, 5]\n  >>> primeFactors(101)\n  [2, 3, 5, 7]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(13441)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(61)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(4)\n  [2, 3, 5]\n  >>> primeFactors(1)\n  [2, 3, 5]\n  */\nconst primeFactorsFast6 = (n) => {\n  const factors = [];\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(6)\n  [2, 3, 5]\n  >>> primeFactors(101)\n  [2, 3, 5, 7]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(13441)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(61)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(4)\n  [2, 3, 5]\n  >>> primeFactors(1)\n  [2, 3, 5]\n  */\nconst primeFactorsFast7 = (n) => {\n  const factors = [];\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(6)\n  [2, 3, 5]\n  >>> primeFactors(101)\n  [2, 3, 5, 7]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(13441)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(61)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(4)\n  [2, 3, 5]\n  >>> primeFactors(1)\n  [2, 3, 5]\n  */\nconst primeFactorsFast8 = (n) => {\n  const factors = [];\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(6)\n  [2, 3, 5]\n  >>> primeFactors(101)\n  [2, 3, 5, 7]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11]\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficient of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero point, even if there are many. \n   furthermore, findZero only lead list xs have even phone number of coefficient \n   and big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  let lastZero = 0;\n  let lastZeroIndex = 0;\n  let lastZeroIndex2 = 0;\n  let lastZeroIndex3 = 0;\n  let lastZeroIndex4 = 0;\n  let lastZeroIndex5 = 0;\n  let lastZeroIndex6 = 0;\n  let lastZeroIndex7 = 0;\n  let lastZeroIndex8 = 0;\n  let lastZeroIndex9 = 0;\n  let lastZeroIndex10 = 0;\n  let lastZeroIndex11 = 0;\n  let lastZeroIndex12 = 0;\n  let lastZeroIndex13 = 0;\n  let lastZeroIndex14 = 0;\n  let lastZeroIndex15 = 0;\n  let lastZeroIndex16 = 0;\n  let lastZeroIndex17 = 0;\n  let lastZeroIndex18 = 0;\n  let lastZeroIndex19 = 0;\n  let lastZeroIndex20 = 0;\n  let lastZeroIndex21 = 0;\n  let lastZeroIndex22 = 0;\n  let lastZeroIndex23 = 0;\n  let lastZeroIndex24 = 0;\n  let lastZeroIndex25 = 0;\n  let lastZeroIndex26 = 0;\n  let lastZeroIndex27 = 0;\n  let lastZeroIndex28 = 0;\n  let lastZeroIndex29 = 0;\n  let lastZeroIndex30 = 0;\n  let lastZeroIndex31 = 0;\n  let lastZeroIndex32 = 0;\n  let lastZeroIndex33 = 0;\n  let lastZeroIndex34 = 0;\n  let lastZeroIndex35 = 0;\n  let lastZeroIndex36 = 0;\n  let lastZeroIndex37 = 0;\n  let lastZeroIndex38 = 0;\n  let lastZeroIndex39 = 0;\n  let lastZeroIndex40 = 0;\n  let lastZeroIndex41 = 0;\n  let lastZeroIndex42 = 0;\n  let lastZeroIndex43 = 0;\n  let lastZeroIndex44 = 0;\n  let lastZeroIndex45 = 0;\n  let lastZeroIndex46 = 0;\n  let lastZeroIndex47 = 0;\n  let lastZeroIndex48 = 0;\n  let lastZeroIndex49 = 0;\n  let lastZeroIndex50 = 0;\n  let lastZeroIndex51 = 0;\n  let lastZeroIndex52 = 0;\n  let lastZeroIndex53 = 0;\n  let lastZeroIndex54 = 0;\n  let lastZeroIndex55 = 0;\n  let lastZeroIndex56 = 0;\n  let lastZeroIndex57 = 0;\n  let lastZeroIndex58 = 0;\n  let lastZeroIndex59 = 0;\n  let lastZeroIndex60 = 0;\n  let lastZeroIndex61 = 0;\n  let lastZeroIndex62 = 0;\n  let lastZeroIndex63 = 0;\n  let lastZeroIndex64 = 0;\n  let lastZeroIndex65 = 0;\n  let lastZeroIndex66 = 0;\n  let lastZeroIndex67 = 0;\n  let lastZeroIndex68 = 0;\n  let lastZeroIndex69 = 0;\n  let lastZeroIndex70 = 0;\n  let lastZeroIndex71 = 0;\n  let lastZeroIndex72 = 0;\n  let lastZeroIndex73 = 0;\n  let lastZeroIndex74 = 0;\n  let lastZeroIndex75 = 0;\n  let lastZeroIndex76 = 0;\n  let lastZeroIndex77 = 0;\n  let lastZeroIndex78 = 0;\n  let lastZeroIndex79 = 0;\n  let lastZeroIndex80 = 0;\n  let lastZeroIndex81 = 0;\n  let lastZeroIndex82 = 0;\n  let lastZeroIndex83 = 0;\n  let lastZeroIndex84 = 0;\n  let lastZeroIndex85 = 0;\n  let lastZeroIndex86 = 0;\n  let lastZeroIndex87 = 0;\n  let lastZeroIndex88 = 0;\n  let lastZeroIndex89 = 0;\n  let lastZeroIndex90 = 0;\n  let lastZeroIndex91 = 0;\n  let lastZeroIndex92 = 0;\n  let lastZeroIndex93 = 0;\n  let lastZeroIndex94 = 0;\n  let lastZeroIndex95 = 0;\n  let lastZeroIndex96 = 0;\n  let lastZeroIndex97 = 0;\n  let lastZeroIndex98 = 0;\n  let lastZeroIndex99 = 0;\n  let lastZeroIndex100 = 0;\n  let lastZeroIndex101 = 0;\n  let lastZeroIndex102 = 0;\n  let lastZeroIndex103 = 0;\n  let lastZeroIndex104 = 0;\n  let lastZeroIndex105 = 0;\n  let lastZeroIndex106 = 0;\n  let lastZeroIndex107 = 0;\n  let lastZeroIndex108 = 0;\n  let lastZeroIndex109 = 0;\n  let lastZeroIndex110 = 0;\n  let lastZeroIndex111 = 0;\n  let lastZeroIndex112 = 0;\n  let lastZeroIndex113 = 0;\n  let lastZeroIndex114 = 0;\n  let lastZeroIndex115 = 0;\n  let lastZeroIndex116 = 0;\n  let lastZeroIndex117 = 0;\n  let lastZeroIndex118 = 0;\n  let lastZeroIndex119 = 0;\n  let lastZeroIndex120 = 0;\n  let lastZeroIndex121 = 0;\n  let lastZeroIndex122 = 0;\n  let lastZeroIndex123 = 0;\n  let lastZeroIndex124 = 0;\n  let lastZeroIndex125 = 0;\n  let lastZeroIndex126 = 0;\n  let lastZeroIndex127 = 0;\n  let lastZeroIndex128 = 0;\n  let lastZeroIndex129 = 0;\n  let lastZeroIndex130 = 0;\n  let lastZeroIndex131 = 0;\n  let lastZeroIndex132 = 0;\n  let lastZeroIndex133 = 0;\n  let lastZeroIndex134 = 0;\n  let lastZeroIndex135 = 0;\n  let lastZeroIndex136 = 0;\n  let lastZeroIndex137 = 0;\n  let lastZeroIndex138 = 0;\n  let lastZeroIndex139 = 0;\n  let lastZeroIndex140 = 0;\n  let lastZeroIndex141 = 0;\n  let lastZeroIndex142 = 0;\n  let lastZeroIndex143 = 0;\n  let lastZeroIndex144 = 0;\n  let lastZeroIndex145 = 0;\n  let lastZeroIndex146 = 0;\n  let lastZeroIndex147 = 0;\n  let lastZeroIndex148 = 0;\n  let lastZeroIndex149 = 0;\n  let lastZeroIndex150 = 0;\n  let lastZeroIndex151 = 0;\n  let lastZeroIndex152 = 0;\n  let lastZeroIndex153 = 0;\n  let lastZeroIndex154 = 0;\n  let lastZeroIndex155 = 0;\n  let lastZeroIndex156 = 0;\n  let lastZeroIndex157 = 0;\n  let lastZeroIndex158 = 0;\n  let lastZeroIndex159 = 0;\n  let lastZeroIndex160 = 0;\n  let lastZeroIndex161 = 0;\n  let lastZeroIndex162 = 0;\n  let lastZeroIndex163 = 0;\n  let lastZeroIndex164 = 0;\n  let lastZeroIndex165 = 0;\n  let lastZeroIndex166 = 0;\n  let lastZeroIndex167 = 0;\n  let lastZeroIndex168 = 0;\n  let lastZeroIndex169 = 0;\n  let lastZeroIndex170 = 0;\n  let lastZeroIndex171 = 0;\n  let lastZeroIndex172 = 0;\n  let lastZeroIndex173 = 0;\n  let lastZeroIndex174 = 0;\n  let lastZeroIndex175 = 0;\n  let lastZeroIndex176 = 0;\n  let lastZeroIndex177 = 0;\n  let lastZeroIndex178 = 0;\n  let lastZeroIndex179 = 0;\n  let lastZeroIndex180 = 0;\n  let lastZeroIndex181 = 0;\n  let lastZeroIndex182 = 0;\n  let lastZeroIndex183 = 0;\n  let lastZeroIndex184 = 0;\n  let lastZeroIndex185 = 0;\n  let lastZeroIndex186 = 0;\n  let lastZeroIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the value of the correspond indicies of l, but sorted.\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sort", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set()\n  return l.filter((x) => {\n    if (seen.has(x)) {\n      return false\n    }\n    seen.add(l)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy = (key) => {\n  const seen = new Set()\n  return l.filter((x) => {\n    if (seen.has(x[key])) {\n      return false\n    }\n    seen.add(l[key])\n    return true\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a > b? a : b, Infinity) : Infinity;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  return l.length > 0? l.reduce((a, b) => a < b? a : b, -Infinity) : -Infinity;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtIndex = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAt = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElse = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElseIf = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElseIfNot = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElseIfNotNull = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElseIfNull = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElseIfNotEmpty = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElseIfEmpty = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElseIfNotEmptyOrNull = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElseIfEmptyOrNull = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElseIfEmptyOrNullOrEmpty = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  */\nconst elementAtOrElseIfEmptyOrNullOrEmptyOrNull = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at specified index.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which embody divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 3.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has three digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 3 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 5.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has five digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 5 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 7.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has seven digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 7 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 9.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has nine digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 9 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 10.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has ten digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 10 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 11.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has eleven digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 11 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 13.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has twelve digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 13 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 17.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has nine digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 17 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 19.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has twenty digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 19 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 23.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has twenty digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 23 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 25.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has twenty digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 25 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 27.\n  For example, 31 + 2 + 7 + 8 + 9 = 65 has twenty digits, 1 + 2 + 7 + 8 = 15, and 15 + 7 = 25.\n  >>> isMultipleOf(15)\n  true\n  >>> isMultipleOf(25)\n  false\n  */\nconst isMultipleOf = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % i;\n  }\n  return sum % 27 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits (starting from right-to-left) is a multiple of 29.\n  For example, 31 + 2 + 7 + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortOddOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortOddOddOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the odd indicies are adequate \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOddOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOddOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortEvenOddOddOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that \n   l' is identical to l in the leftover indicies, while its values at the even indicies are ade", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (get i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   take as input drawstring encode with encode_cyclic routine. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlpha = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNum = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscore = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const isAlphaNumUnderscoreOnly = (s) = > { \n   const re = /[^a-zA-Z0-9_]/g; \n   return re.test(s);\n}\n\n/*\n  returns true if string contains only letters, digits and underscore. \n   * / \n const is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 2;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let prime = 1;\n  while ((a <= n) && (b <= n)) {\n    if (a % b === 0) {\n      prime = a + b;\n      a = b;\n      b = prime;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibPrime = (n) => {\n  let i = 2;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let prime = 1;\n  while ((a <= n) && (b <= n)) {\n    if (a % b === 0) {\n      prime = primeFib(a) + primeFib(b);\n      a = b;\n      b = prime;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFibPrime(1)\n  2\n  >>> primeFibPrime(2)\n  3\n  >>> primeFibPrime(3)\n  5\n  >>> primeFibPrime(4)\n  13\n  >>> primeFibPrime(5)\n  89\n  */\nconst primeFibPrimePrime = (n) => {\n  let i = 2;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let prime = 1;\n  while ((a <= n) && (b <= n)) {\n    if (a % b === 0) {\n      prime = primeFibPrime(a) + primeFibPrime(b);\n      a = b;\n      b = prime;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFibPrimePrime(1)\n  2\n  >>> primeFibPrimePrime(2)\n  3\n  >>> primeFibPrimePrime(3)\n  5\n  >>> primeFibPrimePrime(4)\n  13\n  >>> primeFibPrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrime = (n) => {\n  let i = 2;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let prime = 1;\n  while ((a <= n) && (b <= n)) {\n    if (a % b === 0) {\n      prime = primeFibPrimePrime(a) + primeFibPrimePrime(b);\n      a = b;\n      b = prime;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFibPrimePrimePrime(1)\n  2\n  >>> primeFibPrimePrimePrime(2)\n  3\n  >>> primeFibPrimePrimePrime(3)\n  5\n  >>> primeFibPrimePrimePrime(4)\n  13\n  >>> primeFibPrimePrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrimePrime = (n) => {\n  let i = 2;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let prime = 1;\n  while ((a <= n) && (b <= n)) {\n    if (a % b === 0) {\n      prime = primeFibPrimePrimePrime(a) + primeFibPrimePrimePrime(b);\n      a = b;\n      b = prime;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFibPrimePrimePrimePrime(1)\n  2\n  >>> primeFibPrimePrimePrimePrime(2)\n  3\n  >>> primeFibPrimePrimePrimePrime(3)\n  5\n  >>> primeFibPrimePrimePrimePrime(4)\n  13\n  >>> primeFibPrimePrimePrimePrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrimePrimePrime = (n) => {\n  let i = 2;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let prime = 1;\n  while ((a <= n) && (b <= n)) {\n    if (a % b === 0) {\n      prime = primeFibPrimePrimePrimePrime(a) + primeFibPrimePrimePrimePrime(b);\n      a = b;\n      b = prime;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFibPrimePrimePrimePrimePrime(1)\n  2\n  >>> primeFibPrimePrimePrimePrimePrime(2)\n  3\n  >>> primeFibPrimePrimePrimePrimePrime(3)\n  5\n  >>> primeFibPrimePrimePrimePrimePrime(4)\n  13\n  >>> primeFibPrimePrimePrimePrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrimePrimePrime = (n) => {\n  let i = 2;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let prime = 1;\n  while ((a <= n) && (b <= n)) {\n    if (a % b === 0) {\n      prime = primeFibPrimePrimePrimePrimePrime(a) + primeFibPrimePrimePrimePrimePrime(b);\n      a = b;\n      b = prime;\n    }\n  }\n  return prime;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's besides prime.\n  >>> primeFibPrimePrimePrimePrimePrimePrime(1)\n  2\n  >>> primeFibPrimePrimePrimePrimePrimePrime(2)\n  3\n  >>> primeFibPrimePrimePrimePrimePrimePrime(3)\n  5\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrime(4)\n  13\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrimePrimePrimePrime = (n) => {\n  let i = 2;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let prime = 1;\n  while ((a <= n) && (b <= n)) {\n    if (a % b === 0) {\n      prime = primeFibPrimePrimePrimePrimePrimePrime(a) + primeFibPri", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the median absolute difference between each \n   element and a centerpoint (mean in this shell ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.abs(n - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation \n   around the mean of this dataset. \n   Mean Squared Deviation is the median squared difference between each \n   element and a centerpoint (mean in this shell ): \n   MSE = average | x - x_mean |^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation \n   around the mean of this dataset. \n   Root Mean Squared Deviation is the square root of the median squared \n   difference between each element and a centerpoint (mean in this shell ): \n   RMSE = average | x - x_mean |^2\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the square root of the median squared \n   difference between each element and a centerpoint (mean in this shell ): \n   SD = average | x - x_mean |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Variance \n   around the mean of this dataset. \n   Variance is the square root of the median squared difference between each \n   element and a centerpoint (mean in this shell ): \n   V = average | x - x_mean |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the square root of the median squared \n   difference between each element and a centerpoint (mean in this shell ): \n   SD = median | x - x_median |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Variance \n   around the median of this dataset. \n   Variance is the square root of the median squared difference between each \n   element and a centerpoint (mean in this shell ): \n   V = median | x - x_median |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the square root of the median squared \n   difference between each element and a centerpoint (mean in this shell ): \n   SD = median | x - x_median |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the square root of the median squared \n   difference between each element and a centerpoint (mean in this shell ): \n   SD = median | x - x_median |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the square root of the median squared \n   difference between each element and a centerpoint (mean in this shell ): \n   SD = median | x - x_median |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the square root of the median squared \n   difference between each element and a centerpoint (mean in this shell ): \n   SD = median | x - x_median |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the square root of the median squared \n   difference between each element and a centerpoint (mean in this shell ): \n   SD = median | x - x_median |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the square root of the median squared \n   difference between each element and a centerpoint (mean in this shell ): \n   SD = median | x - x_median |^2\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length;\n  return numbers.map((n) => Math.pow(n - mean, 2));\n};\n\n/* For a given list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation is the square root ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input. \n   it returns true if there be three clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = triplesSumToZero;\n\n},{}],7:[function(require,module,exports){\nconst { isInteger } = require('../../utils/number');\n\nconst isZero = (n) => {\n  return isInteger(n) && n <= 0;\n};\n\nconst isOne = (n) => {\n  return isInteger(n) && n >= 1;\n};\n\nconst isNegativeZero = (n) => {\n  return isInteger(n) && n <= 0 && n >= -1;\n};\n\nconst isPositiveZero = (n) => {\n  return isInteger(n) && n >= 0 && n <= 1;\n};\n\nconst isNegativeOne = (n) => {\n  return isInteger(n) && n >= -1 && n <= 1;\n};\n\nconst isPositiveOne = (n) => {\n  return isInteger(n) && n >= 1 && n <= -1;\n};\n\nconst isNegativeOneOrZero = (n) => {\n  return isNegativeOne(n) || isZero(n);\n};\n\nconst isPositiveOneOrZero = (n) => {\n  return isPositiveOne(n) || isZero(n);\n};\n\nconst isPositiveOneOrNegativeZero = (n) => {\n  return isPositiveOneOrZero(n) && isNegativeZero(n);\n};\n\nconst isPositiveOneOrNegativeOne = (n) => {\n  return isPositiveOneOrZero(n) && isNegativeOne(n);\n};\n\nconst isPositiveOneOrOne = (n) => {\n  return isPositiveOneOrZero(n) && isOne(n);\n};\n\nconst isPositiveOneOrNegativeOneOrZero = (n) => {\n  return isPositiveOneOrNegativeZero(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrNegativeOneOrOne = (n) => {\n  return isPositiveOneOrNegativeOne(n) || isPositiveOneOrOne(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrZero = (n) => {\n  return isPositiveOneOrNegativeOneOrZero(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOne(n) || isPositiveOneOrOne(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrZero = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrZero(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrOne(n) || isPositiveOneOrOne(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrNegativeOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOneOrNegativeOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrNegativeOneOrNegativeOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOneOrNegativeOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOneOrNegativeOneOrNegativeOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOneOrNegativeOneOrNegativeOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne = (n) => {\n  return isPositiveOneOrNegativeOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOne(n) || isPositiveOneOrZero(n);\n};\n\nconst isPositiveOneOrOneOrNegativeOneOrOneOrOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOrNegativeOneOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight boundlessly long occupation. \n   n cars are driving leave to properly;   simultaneously, a different hardening of n car \n   are drive right to leave.    The two set of cars start out being very far from \n   each early.   All car move in the same speed.   Two car are suppose to clash \n   when a car that's be active left to good hits a car that's be active right to leave. \n   However, the cars are boundlessly sturdy and potent; as a solution, they stay moving \n   in their trajectory as if they did not collide. \n\n   This function output the phone number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight boundlessly long occupation. \n   n cars are driving leave to properly;   simultaneously, a different hardening of n car \n   are drive right to leave.    The two set of cars start out being very far from \n   each early.   All car move in the same speed.   Two car are suppose to clash \n   when a car that's be active left to good hits a car that's be active right to leave. \n   However, the cars are boundlessly sturdy and potent; as a solution, they stay moving \n   in their trajectory as if they did not collide. \n\n   This function output the phone number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   let collisions = 0;\n   let collisionsCount = 0;\n   let collisionsCount2 = 0;\n   let collisionsCount3 = 0;\n   let collisionsCount4 = 0;\n   let collisionsCount5 = 0;\n   let collisionsCount6 = 0;\n   let collisionsCount7 = 0;\n   let collisionsCount8 = 0;\n   let collisionsCount9 = 0;\n   let collisionsCount10 = 0;\n   let collisionsCount11 = 0;\n   let collisionsCount12 = 0;\n   let collisionsCount13 = 0;\n   let collisionsCount14 = 0;\n   let collisionsCount15 = 0;\n   let collisionsCount16 = 0;\n   let collisionsCount17 = 0;\n   let collisionsCount18 = 0;\n   let collisionsCount19 = 0;\n   let collisionsCount20 = 0;\n   let collisionsCount21 = 0;\n   let collisionsCount22 = 0;\n   let collisionsCount23 = 0;\n   let collisionsCount24 = 0;\n   let collisionsCount25 = 0;\n   let collisionsCount26 = 0;\n   let collisionsCount27 = 0;\n   let collisionsCount28 = 0;\n   let collisionsCount29 = 0;\n   let collisionsCount30 = 0;\n   let collisionsCount31 = 0;\n   let collisionsCount32 = 0;\n   let collisionsCount33 = 0;\n   let collisionsCount34 = 0;\n   let collisionsCount35 = 0;\n   let collisionsCount36 = 0;\n   let collisionsCount37 = 0;\n   let collisionsCount38 = 0;\n   let collisionsCount39 = 0;\n   let collisionsCount40 = 0;\n   let collisionsCount41 = 0;\n   let collisionsCount42 = 0;\n   let collisionsCount43 = 0;\n   let collisionsCount44 = 0;\n   let collisionsCount45 = 0;\n   let collisionsCount46 = 0;\n   let collisionsCount47 = 0;\n   let collisionsCount48 = 0;\n   let collisionsCount49 = 0;\n   let collisionsCount50 = 0;\n   let collisionsCount51 = 0;\n   let collisionsCount52 = 0;\n   let collisionsCount53 = 0;\n   let collisionsCount54 = 0;\n   let collisionsCount55 = 0;\n   let collisionsCount56 = 0;\n   let collisionsCount57 = 0;\n   let collisionsCount58 = 0;\n   let collisionsCount59 = 0;\n   let collisionsCount60 = 0;\n   let collisionsCount61 = 0;\n   let collisionsCount62 = 0;\n   let collisionsCount63 = 0;\n   let collisionsCount64 = 0;\n   let collisionsCount65 = 0;\n   let collisionsCount66 = 0;\n   let collisionsCount67 = 0;\n   let collisionsCount68 = 0;\n   let collisionsCount69 = 0;\n   let collisionsCount70 = 0;\n   let collisionsCount71 = 0;\n   let collisionsCount72 = 0;\n   let collisionsCount73 = 0;\n   let collisionsCount74 = 0;\n   let collisionsCount75 = 0;\n   let collisionsCount76 = 0;\n   let collisionsCount77 = 0;\n   let collisionsCount78 = 0;\n   let collisionsCount79 = 0;\n   let collisionsCount80 = 0;\n   let collisionsCount81 = 0;\n   let collisionsCount82 = 0;\n   let collisionsCount83 = 0;\n   let collisionsCount84 = 0;\n   let collisionsCount85 = 0;\n   let collisionsCount86 = 0;\n   let collisionsCount87 = 0;\n   let collisionsCount88 = 0;\n   let collisionsCount89 = 0;\n   let collisionsCount90 = 0;\n   let collisionsCount91 = 0;\n   let collisionsCount92 = 0;\n   let collisionsCount93 = 0;\n   let collisionsCount94 = 0;\n   let collisionsCount95 = 0;\n   let collisionsCount96 = 0;\n   let collisionsCount97 = 0;\n   let collisionsCount98 = 0;\n   let collisionsCount99 = 0;\n   let collisionsCount100 = 0;\n   let collisionsCount101 = 0;\n   let collisionsCount102 = 0;\n   let collisionsCount103 = 0;\n   let collisionsCount104 = 0;\n   let collisionsCount105 = 0;\n   let collisionsCount106 = 0;\n   let collisionsCount107 = 0;\n   let collisionsCount108 = 0;\n   let collisionsCount109 = 0;\n   let collisionsCount110 = 0;\n   let collisionsCount111 = 0;\n   let collisionsCount112 = 0;\n   let collisionsCount113 = 0;\n   let collisionsCount114 = 0;\n   let collisionsCount115 = 0;\n   let collisionsCount116 = 0;\n   let collisionsCount117 = 0;\n   let collisionsCount118 = 0;\n   let collisionsCount119 = 0;\n   let collisionsCount120 = 0;\n   let collisionsCount121 = 0;\n   let collisionsCount122 = 0;\n   let collisionsCount123 = 0;\n   let collisionsCount124 = 0;\n   let collisionsCount125 = 0;\n   let collisionsCount126 = 0;\n   let collisionsCount127 = 0;\n   let collisionsCount128 = 0;\n   let collisionsCount129 = 0;\n   let collisionsCount130 = 0;\n   let collisionsCount131 = 0;\n   let collisionsCount132 = 0;\n   let collisionsCount133 = 0;\n   let collisionsCount134 = 0;\n   let collisionsCount135 = 0;\n   let collisionsCount136 = 0;\n   let collisionsCount137 = 0;\n   let collisionsCount138 = 0;\n   let collisionsCount139 = 0;\n   let collisionsCount140 = 0;\n   let collisionsCount141 = 0;\n   let collisionsCount142 = 0;\n   let collisionsCount143 = 0;\n   let collisionsCount144 = 0;\n   let collisionsCount145 = 0;\n   let collisionsCount146 = 0;\n   let collisionsCount147 = 0;\n   let collisionsCount148 = 0;\n   let collisionsCount149 = 0;\n   let collisionsCount150 = 0;\n   let collisionsCount151 = 0;\n   let collisionsCount152 = 0;\n   let collisionsCount153 = 0;\n   let collisionsCount154 = 0;\n   let collisionsCount155 = 0;\n   let collisionsCount156 = 0;\n   let collisionsCount157 = 0;\n   let collisionsCount158 = 0;\n   let collisionsCount159 = 0;\n   let collisionsCount160 = 0;\n   let collisionsCount161 = 0;\n   let collisionsCount162 = 0;\n   let collisionsCount163 = 0;\n   let collisionsCount164 = 0;\n   let collisionsCount165 = 0;\n   let collisionsCount166 = 0;\n   let collisionsCount167 = 0;\n   let collisionsCount168 = 0;\n   let collisionsCount169 = 0;\n   let collisionsCount170 = 0;\n   let collisionsCount17", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input. \n   it returns true if there be two clear-cut component in the list that \n   sum to zero, and assumed otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  countPairs takes a list of integers as an input. \n  it returns an integer that represents the number of pairs in the list.\n  >>> countPairs([1, 3, 5, 0])\n  2\n  >>> countPairs([1, 3, -2, 1])\n  1\n  >>> countPairs([1, 2, 3, 7])\n  3\n  >>> countPairs([2, 4, -5, 3, 5, 7])\n  2\n  >>> countPairs([1])\n  0\n  */\nconst countPairs = (l) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countPairsSum takes a list of integers as an input. \n  it returns an integer that represents the number of pairs in the list.\n  >>> countPairsSum([1, 3, 5, 0])\n  2\n  >>> countPairsSum([1, 3, -2, 1])\n  1\n  >>> countPairsSum([1, 2, 3, 7])\n  3\n  >>> countPairsSum([2, 4, -5, 3, 5, 7])\n  2\n  >>> countPairsSum([1])\n  0\n  */\nconst countPairsSum = (l) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  countPairsSumToZero takes a list of integers as an input. \n  it returns true if there be two clear-cut component in the list that \n  sum to zero, and assumed otherwise.\n  >>> countPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> countPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> countPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> countPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> countPairsSumToZero([1])\n  false\n  */\nconst countPairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  countPairsSumToZero takes a list of integers as an input. \n  it returns true if there be two clear-cut component in the list that \n  sum to zero, and assumed otherwise.\n  >>> countPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> countPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> countPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> countPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> countPairsSumToZero([1])\n  false\n  */\nconst countPairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  countPairsSumToZero takes a list of integers as an input. \n  it returns true if there be two clear-cut component in the list that \n  sum to zero, and assumed otherwise.\n  >>> countPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> countPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> countPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> countPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> countPairsSumToZero([1])\n  false\n  */\nconst countPairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  countPairsSumToZero takes a list of integers as an input. \n  it returns true if there be two clear-cut component in the list that \n  sum to zero, and assumed otherwise.\n  >>> countPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> countPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> countPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> countPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> countPairsSumToZero([1])\n  false\n  */\nconst countPairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  countPairsSumToZero takes a list of integers as an input. \n  it returns true if there be two clear-cut component in the list that \n  sum to zero, and assumed otherwise.\n  >>> countPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> countPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> countPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> countPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> countPairsSumToZero([1])\n  false\n  */\nconst countPairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  countPairsSumToZero takes a list of integers as an input. \n  it returns true if there be two clear-cut component in the list that \n  sum to zero, and assumed otherwise.\n  >>> countPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> countPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> countPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> countPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> countPairsSumToZero([1])\n  false\n  */\nconst countPairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  countPairsSumToZero takes a list of integers as an input. \n  it returns true if there be two clear-cut component in the list that \n  sum to zero, and assumed otherwise.\n  >>> countPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> countPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> countPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> countPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> countPairsSumToZero([1])\n  false\n  */\nconst countPairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n   return string theatrical performance after the conversion. \n   base number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let remainder;\n  let remainder2;\n  let remainder3;\n  let remainder4;\n  let remainder5;\n  let remainder6;\n  let remainder7;\n  let remainder8;\n  let remainder9;\n  let remainder10;\n  let remainder11;\n  let remainder12;\n  let remainder13;\n  let remainder14;\n  let remainder15;\n  let remainder16;\n  let remainder17;\n  let remainder18;\n  let remainder19;\n  let remainder20;\n  let remainder21;\n  let remainder22;\n  let remainder23;\n  let remainder24;\n  let remainder25;\n  let remainder26;\n  let remainder27;\n  let remainder28;\n  let remainder29;\n  let remainder30;\n  let remainder31;\n  let remainder32;\n  let remainder33;\n  let remainder34;\n  let remainder35;\n  let remainder36;\n  let remainder37;\n  let remainder38;\n  let remainder39;\n  let remainder40;\n  let remainder41;\n  let remainder42;\n  let remainder43;\n  let remainder44;\n  let remainder45;\n  let remainder46;\n  let remainder47;\n  let remainder48;\n  let remainder49;\n  let remainder50;\n  let remainder51;\n  let remainder52;\n  let remainder53;\n  let remainder54;\n  let remainder55;\n  let remainder56;\n  let remainder57;\n  let remainder58;\n  let remainder59;\n  let remainder60;\n  let remainder61;\n  let remainder62;\n  let remainder63;\n  let remainder64;\n  let remainder65;\n  let remainder66;\n  let remainder67;\n  let remainder68;\n  let remainder69;\n  let remainder70;\n  let remainder71;\n  let remainder72;\n  let remainder73;\n  let remainder74;\n  let remainder75;\n  let remainder76;\n  let remainder77;\n  let remainder78;\n  let remainder79;\n  let remainder80;\n  let remainder81;\n  let remainder82;\n  let remainder83;\n  let remainder84;\n  let remainder85;\n  let remainder86;\n  let remainder87;\n  let remainder88;\n  let remainder89;\n  let remainder90;\n  let remainder91;\n  let remainder92;\n  let remainder93;\n  let remainder94;\n  let remainder95;\n  let remainder96;\n  let remainder97;\n  let remainder98;\n  let remainder99;\n  let remainder100;\n  let remainder101;\n  let remainder102;\n  let remainder103;\n  let remainder104;\n  let remainder105;\n  let remainder106;\n  let remainder107;\n  let remainder108;\n  let remainder109;\n  let remainder110;\n  let remainder111;\n  let remainder112;\n  let remainder113;\n  let remainder114;\n  let remainder115;\n  let remainder116;\n  let remainder117;\n  let remainder118;\n  let remainder119;\n  let remainder120;\n  let remainder121;\n  let remainder122;\n  let remainder123;\n  let remainder124;\n  let remainder125;\n  let remainder126;\n  let remainder127;\n  let remainder128;\n  let remainder129;\n  let remainder130;\n  let remainder131;\n  let remainder132;\n  let remainder133;\n  let remainder134;\n  let remainder135;\n  let remainder136;\n  let remainder137;\n  let remainder138;\n  let remainder139;\n  let remainder140;\n  let remainder141;\n  let remainder142;\n  let remainder143;\n  let remainder144;\n  let remainder145;\n  let remainder146;\n  let remainder147;\n  let remainder148;\n  let remainder149;\n  let remainder150;\n  let remainder151;\n  let remainder152;\n  let remainder153;\n  let remainder154;\n  let remainder155;\n  let remainder156;\n  let remainder157;\n  let remainder158;\n  let remainder159;\n  let remainder160;\n  let remainder161;\n  let remainder162;\n  let remainder163;\n  let remainder164;\n  let remainder165;\n  let remainder166;\n  let remainder167;\n  let remainder168;\n  let remainder169;\n  let remainder170;\n  let remainder171;\n  let remainder172;\n  let remainder173;\n  let remainder174;\n  let remainder175;\n  let remainder176;\n  let remainder177;\n  let remainder178;\n  let remainder179;\n  let remainder180;\n  let remainder181;\n  let remainder182;\n  let remainder183;\n  let remainder184;\n  let remainder185;\n  let remainder186;\n  let remainder187;\n  let remainder188;\n  let remainder189;\n  let remainder190;\n  let remainder191;\n  let remainder192;\n  let remainder193;\n  let remainder194;\n  let remainder195;\n  let remainder196;\n  let remainder197;\n  let remainder198;\n  let remainder199;\n  let remainder200;\n  let remainder201;\n  let remainder202;\n  let remainder203;\n  let remainder204;\n  let remainder205;\n  let remainder206;\n  let remainder207;\n  let remainder208;\n  let remainder209;\n  let remainder210;\n  let remainder211;\n  let remainder212;\n  let remainder213;\n  let remainder214;\n  let remainder215;\n  let remainder216;\n  let remainder217;\n  let remainder218;\n  let remainder219;\n  let remainder220;\n  let remainder221;\n  let remainder222;\n  let remainder223;\n  let remainder224;\n  let remainder225;\n  let remainder226;\n  let remainder227;\n  let remainder228;\n  let remainder229;\n  let remainder230;\n  let remainder231;\n  let remainder232;\n  let remainder233;\n  let remainder234;\n  let remainder235;\n  let remainder236;\n  let remainder237;\n  let remainder238;\n  let remainder239;\n  let remainder240;\n  let remainder241;\n  let remainder242;\n  let remainder243;\n  let remainder244;\n  let remainder245;\n  let remainder246;\n  let remainder247;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangulum.\n  >>> triangleArea(5, 0)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 3)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (b * b - 4 * a * l) / 2;\n  return area;\n};\n\n/*Given length of a side and high return area for a triangulum.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a function to efficiently calculate the n-th element of the fib4 numeral succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a function to efficiently calculate the n-th element of the fib4 numeral succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib5(0) - > 0 \n   fib5(1) - > 0 \n   fib5(2) - > 1 \n   fib5(3) - > 0 \n   fib5(n) - > fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n   Please spell a function to efficiently calculate the n-th element of the fib5 numeral succession.   Do not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  13\n  >>> fib5(7)\n  21\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return 1;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib6(0) - > 0 \n   fib6(1) - > 0 \n   fib6(2) - > 1 \n   fib6(3) - > 0 \n   fib6(n) - > fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n   Please spell a function to efficiently calculate the n-th element of the fib6 numeral succession.   Do not use recursion.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  21\n  >>> fib6(8)\n  34\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return 1;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*The Fib7 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib7(0) - > 0 \n   fib7(1) - > 0 \n   fib7(2) - > 1 \n   fib7(3) - > 0 \n   fib7(n) - > fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n   Please spell a function to efficiently calculate the n-th element of the fib7 numeral succession.   Do not use recursion.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  21\n  >>> fib7(9)\n  34\n  >>> fib7(10)\n  55\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return 1;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*The Fib8 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib8(0) - > 0 \n   fib8(1) - > 0 \n   fib8(2) - > 1 \n   fib8(3) - > 0 \n   fib8(n) - > fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n   Please spell a function to efficiently calculate the n-th element of the fib8 numeral succession.   Do not use recursion.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  21\n  >>> fib8(10)\n  34\n  >>> fib8(11)\n  55\n  >>> fib8(12)\n  89\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return 1;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*The Fib9 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib9(0) - > 0 \n   fib9(1) - > 0 \n   fib9(2) - > 1 \n   fib9(3) - > 0 \n   fib9(n) - > fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9).\n   Please spell a function to efficiently calculate the n-th element of the fib9 numeral succession.   Do not use recursion.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  21\n  >>> fib9(11)\n  34\n  >>> fib9(12)\n  55\n  >>> fib9(13)\n  89\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return 1;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9);\n};\n\n/*The Fib10 number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fib10(0) - > 0 \n   fib10(1) - > 0 \n   fib10(2) - > 1 \n   fib10(3) - > 0 \n   fib10(n) - > fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4) + fib10(n-5) + fib10(n-6) + fib10(n-7) + fib10(n-8) + fib10(n-9) + fib10(n-10).\n   Please spell a function to efficiently calculate the n-th element of the fib10 numeral succession.   Do not use recursion.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  21\n  >>> fib10(12)\n  34\n  >>> fib10(13)\n  55\n  >>> fib10(14)\n  89\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return 1;\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10);\n};\n\n/*The Fib11 number sequence is a sequence similar to the ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = median(l.slice(0, mid))\n  let right = median(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfList(l.slice(0, mid))\n  let right = medianOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfList([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfListOf(l.slice(0, mid))\n  let right = medianOfListOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfList([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfListOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOfListOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfListOfListOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOfList([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfListOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfListOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListOfListOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfListOfListOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListOfListOfListOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfListOfListOfListOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfListOfListOfList(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListOfListOfListOfListOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOfListOfListOfListOfListOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfList", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false\n  >>> isPalindromeOfLength('aba', 0)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 2)\n  false\n  >>> isPalindromeOfLength('aba', 1)\n  false", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 1) return 0\n  let rem = n\n  let d = 1\n  while (p % 2 === 0) {\n    rem = (rem + 1) / 2\n    d = d * 2\n  }\n  return ((rem * d) % p)\n}\n\n/*\n  >>> modp(1, 3)\n  1\n  >>> modp(3, 1)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 11)\n  8\n  >>> modp(3, 100)\n  1\n  >>> modp(3, 101)\n  2\n  >>> modp(3, 102)\n  3\n  >>> modp(3, 103)\n  8\n  >>> modp(3, 104)\n  1\n  >>> modp(3, 105)\n  2\n  >>> modp(3, 106)\n  3\n  >>> modp(3, 107)\n  8\n  >>> modp(3, 108)\n  1\n  >>> modp(3, 109)\n  2\n  >>> modp(3, 110)\n  3\n  >>> modp(3, 111)\n  8\n  >>> modp(3, 112)\n  1\n  >>> modp(3, 113)\n  2\n  >>> modp(3, 114)\n  3\n  >>> modp(3, 115)\n  8\n  >>> modp(3, 116)\n  1\n  >>> modp(3, 117)\n  2\n  >>> modp(3, 118)\n  3\n  >>> modp(3, 119)\n  8\n  >>> modp(3, 120)\n  1\n  >>> modp(3, 121)\n  2\n  >>> modp(3, 122)\n  3\n  >>> modp(3, 123)\n  8\n  >>> modp(3, 124)\n  1\n  >>> modp(3, 125)\n  2\n  >>> modp(3, 126)\n  3\n  >>> modp(3, 127)\n  8\n  >>> modp(3, 128)\n  1\n  >>> modp(3, 129)\n  2\n  >>> modp(3, 130)\n  3\n  >>> modp(3, 131)\n  8\n  >>> modp(3, 132)\n  1\n  >>> modp(3, 133)\n  2\n  >>> modp(3, 134)\n  3\n  >>> modp(3, 135)\n  8\n  >>> modp(3, 136)\n  1\n  >>> modp(3, 137)\n  2\n  >>> modp(3, 138)\n  3\n  >>> modp(3, 139)\n  8\n  >>> modp(3, 140)\n  1\n  >>> modp(3, 141)\n  2\n  >>> modp(3, 142)\n  3\n  >>> modp(3, 143)\n  8\n  >>> modp(3, 144)\n  1\n  >>> modp(3, 145)\n  2\n  >>> modp(3, 146)\n  3\n  >>> modp(3, 147)\n  8\n  >>> modp(3, 148)\n  1\n  >>> modp(3, 149)\n  2\n  >>> modp(3, 150)\n  3\n  >>> modp(3, 151)\n  8\n  >>> modp(3, 152)\n  1\n  >>> modp(3, 153)\n  2\n  >>> modp(3, 154)\n  3\n  >>> modp(3, 155)\n  8\n  >>> modp(3, 156)\n  1\n  >>> modp(3, 157)\n  2\n  >>> modp(3, 158)\n  3\n  >>> modp(3, 159)\n  8\n  >>> modp(3, 160)\n  1\n  >>> modp(3, 161)\n  2\n  >>> modp(3, 162)\n  3\n  >>> modp(3, 163)\n  8\n  >>> modp(3, 164)\n  1\n  >>> modp(3, 165)\n  2\n  >>> modp(3, 166)\n  3\n  >>> modp(3, 167)\n  8\n  >>> modp(3, 168)\n  1\n  >>> modp(3, 169)\n  2\n  >>> modp(3, 170)\n  3\n  >>> modp(3, 171)\n  8\n  >>> modp(3, 172)\n  1\n  >>> modp(3, 173)\n  2\n  >>> modp(3, 174)\n  3\n  >>> modp(3, 175)\n  8\n  >>> modp(3, 176)\n  1\n  >>> modp(3, 177)\n  2\n  >>> modp(3, 178)\n  3\n  >>> modp(3, 179)\n  8\n  >>> modp(3, 180)\n  1\n  >>> modp(3, 181)\n  2\n  >>> modp(3, 182)\n  3\n  >>> modp(3, 183)\n  8\n  >>> modp(3, 184)\n  1\n  >>> modp(3, 185)\n  2\n  >>> modp(3, 186)\n  3\n  >>> modp(3, 187)\n  8\n  >>> modp(3, 188)\n  1\n  >>> modp(3, 189)\n  2\n  >>> modp(3, 190)\n  3\n  >>> modp(3, 191)\n  8\n  >>> modp(3, 192)\n  1\n  >>> modp(3, 193)\n  2\n  >>> modp(3, 194)\n  3\n  >>> modp(3, 195)\n  8\n  >>> modp(3, 196)\n  1\n  >>> modp(3, 197)\n  2\n  >>> modp(3, 198)\n  3\n  >>> modp(3, 199)\n  8\n  >>> modp(3, 200)\n  1\n  >>> modp(3, 201)\n  2\n  >>> modp(3, 202)\n  3\n  >>> modp(3, 203)\n  8\n  >>> modp(3, 204)\n  1\n  >>> modp(3, 205)\n  2\n  >>> modp(3, 206)\n  3\n  >>> modp(3, 207)\n  8\n  >>> modp(3, 208)\n  1\n  >>> modp(3, 209)\n  2\n  >>> modp(3, 210)\n  3\n  >>> modp(3, 211)\n  8\n  >>> modp(3, 212)\n  1\n  >>> modp(3, 213)\n  2\n  >>> modp(3, 214)\n  3\n  >>> modp(3, 215)\n  8\n  >>> modp(3, 216)\n  1\n  >>> modp(3, 217)\n  2\n  >>> modp(3, 218)\n  3\n  >>> modp(3, 219)\n  8\n  >>> modp(3, 220)\n  1\n  >>> modp(3, 221)\n  2\n  >>> modp(3, 222)\n  3\n  >>> modp(3, 223)\n  8\n  >>> modp(3, 224)\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < numbers.length) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument encode with encode_shift function. recurrence decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode_shift function. \n   * / \n const decode = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decode = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes as stimulation bowed stringed instrument decode with decode function. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('');\n  let newText = '';\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('');\n  let newText = '';\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '-' || punctuation[i] === '_' || punctuation[i] === '\"' || punctuation[i] === '(' || punctuation[i] === ')' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '*' || punctuation[i] === '&' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '|' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctu", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/**\n * Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or above threshold t.\n  >>> equalOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAbove([1, 2, 4, 10], 5)\n  false\n  */\nconst equalOrAbove = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or below threshold t.\n  >>> equalOrBelow([1, 2, 4, 10], 100)\n  true\n  >>> equalOrBelow([1, 2, 4, 10], 5)\n  false\n  */\nconst equalOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  false\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal below threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  false\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal below threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal below threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal below threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal below threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal or equal above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 100)\n  true\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  return l.every(n => n === t);\n};\n\n/**\n * Return true if all numbers in the list l are equal ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  1\n  */\nconst mod = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst power = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  1\n  */\nconst modPower = (a, b) => {\n  return mod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPower = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod = (a, b) => {\n  return powMod(a, modPow(b, 2));\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst powModPowModPowModPowModPowMod", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = s1.length\n  const chars = s0.split('')\n  let i = 0\n  let j = 0\n  let k = 0\n  let count = 0\n  let result = ''\n  while (i < len) {\n    if (chars[i] === chars[j]) {\n      count++\n      j++\n      i++\n    } else {\n      if (count === len) {\n        result = s1\n        break\n      }\n      count = 1\n      k++\n    }\n  }\n  return result\n}\n\n/*\n  Check if two words have the same letters.\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetters('abcd', 'dddddddabc')\n  true\n  >>> sameLetters('dddddddabc', 'abcd')\n  true\n  >>> sameLetters('eabcd', 'dddddddabc')\n  false\n  >>> sameLetters('abcd', 'dddddddabce')\n  false\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetters = (s0, s1) => {\n  const len = s1.length\n  const chars = s0.split('')\n  let i = 0\n  let j = 0\n  let k = 0\n  let count = 0\n  let result = ''\n  while (i < len) {\n    if (chars[i] === chars[j]) {\n      count++\n      j++\n      i++\n    } else {\n      if (count === len) {\n        result = s1\n        break\n      }\n      count = 1\n      k++\n    }\n  }\n  return result\n}\n\n/*\n  Check if two words have the same numbers of letters.\n  >>> sameNumbers('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameNumbers('abcd', 'dddddddabc')\n  true\n  >>> sameNumbers('dddddddabc', 'abcd')\n  true\n  >>> sameNumbers('eabcd', 'dddddddabc')\n  false\n  >>> sameNumbers('abcd', 'dddddddabce')\n  false\n  >>> sameNumbers('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameNumbers = (s0, s1) => {\n  const len = s1.length\n  const chars = s0.split('')\n  let i = 0\n  let j = 0\n  let k = 0\n  let count = 0\n  let result = ''\n  while (i < len) {\n    if (chars[i] === chars[j]) {\n      count++\n      j++\n      i++\n    } else {\n      if (count === len) {\n        result = s1\n        break\n      }\n      count = 1\n      k++\n    }\n  }\n  return result\n}\n\n/*\n  Check if two words have the same numbers of digits.\n  >>> sameNumbers('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameNumbers('abcd', 'dddddddabc')\n  true\n  >>> sameNumbers('dddddddabc', 'abcd')\n  true\n  >>> sameNumbers('eabcd', 'dddddddabc')\n  false\n  >>> sameNumbers('abcd', 'dddddddabce')\n  false\n  >>> sameNumbers('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameNumbers = (s0, s1) => {\n  const len = s1.length\n  const chars = s0.split('')\n  let i = 0\n  let j = 0\n  let k = 0\n  let count = 0\n  let result = ''\n  while (i < len) {\n    if (chars[i] === chars[j]) {\n      count++\n      j++\n      i++\n    } else {\n      if (count === len) {\n        result = s1\n        break\n      }\n      count = 1\n      k++\n    }\n  }\n  return result\n}\n\n/*\n  Check if two words have the same capitalization.\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCaps('abcd', 'dddddddabc')\n  true\n  >>> sameCaps('dddddddabc', 'abcd')\n  true\n  >>> sameCaps('eabcd', 'dddddddabc')\n  false\n  >>> sameCaps('abcd', 'dddddddabce')\n  false\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCaps = (s0, s1) => {\n  const len = s1.length\n  const chars = s0.split('')\n  let i = 0\n  let j = 0\n  let k = 0\n  let count = 0\n  let result = ''\n  while (i < len) {\n    if (chars[i] === chars[j]) {\n      count++\n      j++\n      i++\n    } else {\n      if (count === len) {\n        result = s1\n        break\n      }\n      count = 1\n      k++\n    }\n  }\n  return result\n}\n\n/*\n  Check if two words have the same lowercase.\n  >>> sameLowers('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLowers('abcd', 'dddddddabc')\n  true\n  >>> sameLowers('dddddddabc', 'abcd')\n  true\n  >>> sameLowers('eabcd', 'dddddddabc')\n  false\n  >>> sameLowers('abcd', 'dddddddabce')\n  false\n  >>> sameLowers('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLowers = (s0, s1) => {\n  const len = s1.length\n  const chars = s0.split('')\n  let i = 0\n  let j = 0\n  let k = 0\n  let count = 0\n  let result = ''\n  while (i < len) {\n    if (chars[i] === chars[j]) {\n      count++\n      j++\n      i++\n    } else {\n      if (count === len) {\n        result = s1\n        break\n      }\n      count = 1\n      k++\n    }\n  }\n  return result\n}\n\n/*\n  Check if two words have the same uppercase.\n  >>> sameUppers('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameUppers('abcd', 'dddddddabc')\n  true\n  >>> sameUppers('dddddddabc', 'abcd')\n  true\n  >>> sameUppers('eabcd', 'dddddddabc')\n  false\n  >>> sameUppers('abcd', 'dddddddabce')\n  false\n  >>> sameUppers('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameUppers = (s0, s1) => {\n  const len = s1.length\n  const chars = s0.split('')\n  let i = 0\n  let j = 0\n  let k = 0\n  let count = 0\n  let result = ''\n  while (i < len) {\n    if (chars[i] === chars[j]) {\n      count++\n      j++\n      i++\n    } else {\n      if (count === len) {\n        result = s1\n        break\n      }\n      count = 1\n      k++\n    }\n  }\n  return result\n}\n\n/*\n  Check if two word", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)\n  5025\n  >>> fib(6)\n  34\n  >>> fib(5)\n  55\n  >>> fib(4)\n  34\n  >>> fib(3)\n  89\n  >>> fib(2)\n  55\n  >>> fib(7)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" < \" and \" > \". \n   return false if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  const openingBracketsLength = openingBrackets.length;\n  const closingBracketsLength = closingBrackets.length;\n  let correctBracketing = true;\n  for (let i = 0; i < openingBracketsLength; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      correctBracketing = false;\n    }\n  }\n  return correctBracketing;\n};\n\n/**\n * Returns true if a string is a valid CSS selector. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separated by commas \n * and are separated by whitespace or semicolons. \n * \n * Valid CSS selectors consist of one or more valid CSS selectors separate", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let l = l.reverse();\n  while (true) {\n    if (l[j] < l[i]) break;\n    if (l[j] > l[i]) i = j;\n    j++;\n  }\n  while (true) {\n    if (l[k] < l[i]) break;\n    if (l[k] > l[i]) j = k;\n    k++;\n  }\n  return j === i;\n};\n\n/**\n * Return true is list elements are monotonically increasing or decrease.\n * If list elements are non-monotonically increasing, return false.\n * If list elements are non-monotonically decreasing, return true.\n * If list elements are equal, return false.\n * If list elements are unequal, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return false.\n * If list elements are unordered, return true.\n * If list elements are unordered, return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i])\n      i++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i])\n      i++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> uniqueBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i])\n      i++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> uniqueBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i])\n      i++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> uniqueBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i])\n      i++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> uniqueBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i])\n      i++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> uniqueBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i])\n      i++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> uniqueBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i])\n      i++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> uniqueBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1.indexOf(l2[i]) === -1) {\n      result.push(l1[i])\n      i++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653, 121]\n  >>> uniqueBy([5, 3, 2, 8], [3, 2])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (true) {\n    if (n % i === 0) {\n      n = n / i;\n      factor++;\n    } else {\n      return factor;\n    }\n    i++;\n  }\n};\n\n/*\n  Given a positive integer n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (true) {\n    if (n % i === 0) {\n      n = n / i;\n      factor++;\n    } else {\n      return false;\n    }\n    i++;\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactors(13195)\n  29\n  >>> sumPrimeFactors(2048)\n  2\n  */\nconst sumPrimeFactors = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactors(13195)\n  29\n  >>> sumPrimeFactors(2048)\n  2\n  */\nconst sumPrimeFactorsFast = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast(13195)\n  29\n  >>> sumPrimeFactorsFast(2048)\n  2\n  */\nconst sumPrimeFactorsFast2 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast2(13195)\n  29\n  >>> sumPrimeFactorsFast2(2048)\n  2\n  */\nconst sumPrimeFactorsFast3 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast3(13195)\n  29\n  >>> sumPrimeFactorsFast3(2048)\n  2\n  */\nconst sumPrimeFactorsFast4 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast4(13195)\n  29\n  >>> sumPrimeFactorsFast4(2048)\n  2\n  */\nconst sumPrimeFactorsFast5 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast5(13195)\n  29\n  >>> sumPrimeFactorsFast5(2048)\n  2\n  */\nconst sumPrimeFactorsFast6 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast6(13195)\n  29\n  >>> sumPrimeFactorsFast6(2048)\n  2\n  */\nconst sumPrimeFactorsFast7 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast7(13195)\n  29\n  >>> sumPrimeFactorsFast7(2048)\n  2\n  */\nconst sumPrimeFactorsFast8 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast8(13195)\n  29\n  >>> sumPrimeFactorsFast8(2048)\n  2\n  */\nconst sumPrimeFactorsFast9 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast9(13195)\n  29\n  >>> sumPrimeFactorsFast9(2048)\n  2\n  */\nconst sumPrimeFactorsFast10 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast10(13195)\n  29\n  >>> sumPrimeFactorsFast10(2048)\n  2\n  */\nconst sumPrimeFactorsFast11 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast11(13195)\n  29\n  >>> sumPrimeFactorsFast11(2048)\n  2\n  */\nconst sumPrimeFactorsFast12 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast12(13195)\n  29\n  >>> sumPrimeFactorsFast12(2048)\n  2\n  */\nconst sumPrimeFactorsFast13 = (n) => {\n  let factor = 1;\n  while (true) {\n    if (n % factor === 0) {\n      n = n / factor;\n      factor++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return the sum of its prime factors.\n  >>> sumPrimeFactorsFast", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple group for nested parenthesis separated by space. \n   For each of the group, output the deepest degree of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string represented multiple group for nested parenthesis separated by space. \n   For each of the group, output the deepest degree of nesting of parentheses. \n   E.g. (() ()) has maximal two levels of nesting while (( ()) ) have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)|\\(|\\)|\\s+/);\n  const max_nesting_level = 0;\n  const max_nesting_levels = [];\n  const nesting_levels = [];\n  const nesting_level = 0;\n  const nesting_level_count = 0;\n  const nesting_levels_count = paren_groups.length;\n  for (let i = 0; i < nesting_levels_count; i++) {\n    const group = paren_groups[i];\n    if (group === '') {\n      continue;\n    }\n    const group_nesting_level = nesting_level;\n    if (group === '(') {\n      nesting_level++;\n    } else if (group === ')') {\n      nesting_level--;\n    } else if (group === '(' || group === ')') {\n      nesting_levels[nesting_level] = nesting_level;\n      nesting_level_count++;\n      if (nesting_level > max_nesting_level) {\n        max_nesting_level = nesting_level;\n      }\n    }\n  }\n  const result = [];\n  for (let i = 0; i < nesting_levels_count; i++) {\n    const level = nesting_levels[i];\n    if (level > max_nesting_level) {\n      max_nesting_level = level;\n    }\n    const nesting_level_group = nesting_levels[level];\n    if (nesting_level_group > max_nesting_level) {\n      max_nesting_level = nesting_level_group;\n    }\n    const group_nesting_level = nesting_levels[level];\n    if (group_nesting_level > max_nesting_level) {\n      max_nesting_level = group_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[group_nesting_level]) {\n      max_nesting_levels[group_nesting_level] = max_nesting_level;\n    }\n    if (max_nesting_level > max_nesting_levels[level]) {\n      max_nesting_levels[level", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that takes an array and returns the sum of the elements.\n  >>> sumElements([1,2,3,4,5,6])\n  10\n  >>> sumElements([1,2,3,4,5,6,7])\n  15\n  >>> sumElements([1,2,3,4,5,6,7,8])\n  45\n  >>> sumElements([1,2,3,4,5,6,7,8,9])\n  90\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10])\n  225\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11])\n  450\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12])\n  950\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13])\n  1550\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n  22550\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n  45050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n  95050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n  155050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n  2255050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n  4505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n  9505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n  15505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n  225505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n  450505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n  950505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n  1550505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n  22550505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n  45050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n  95050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n  155050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\n  22550505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])\n  45050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])\n  95050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])\n  155050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34])\n  22550505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35])\n  45050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36])\n  95050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37])\n  155050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38])\n  22550505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39])\n  45050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40])\n  95050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41])\n  155050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42])\n  22550505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43])\n  45050505050\n  >>> sumElements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44])\n  95050505050\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" (\" and \") \". \n   return true if every opening bracket has a comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.every(\n    (bracket) => bracket.startsWith(\"(\") && bracket.endsWith(\")\")\n  );\n};\n\n/**\n * Returns true if a character is a valid unicode character.\n *\n * Valid characters are letters, digits, underscores and dashes.\n *\n * Note: This function is case-sensitive.\n *\n * >>> isValidUnicodeCharacter(\"a\")\n * true\n * >>> isValidUnicodeCharacter(\"A\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"-\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")\n * false\n * >>> isValidUnicodeCharacter(\"_\")", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the like form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = new Array(xs.length);\n  \n  for (let i = 0; i < xs.length; i++) {\n    d[i] = xs[i] - xs[0] * xs[i] + xs[1] * xs[i] * xs[i] + xs[2] * xs[i] * xs[i] * xs[i];\n  }\n  return d;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  \n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  \n  return sum / xs.length * x + y;\n}\n\n/* \n  Given a polynomial and a point on the line, find the point on the \n  line that passes through the point. \n  >>> findPointOnLine([3, 1, 2, 4, 5], 2)\n  2\n  */\nconst findPointOnLine = (xs, p) => {\n  let x = p[0];\n  let y = p[1];\n  let sum = 0;\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's define as follow: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a function to efficiently calculate the n-th element of the fibfib numeral succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string representing \n   a bible as remark and revert the numeral of vowels in the string. \n   Vowels in this sheath are' a',' e',' i',' o',' uracil'. Here,' yttrium' is also a \n   vowel, but only when it cost at the end of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  let vowelCountArray = [];\n  let vowelArray = [];\n  let vowelArray2 = [];\n  let vowelArray3 = [];\n  let vowelArray4 = [];\n  let vowelArray5 = [];\n  let vowelArray6 = [];\n  let vowelArray7 = [];\n  let vowelArray8 = [];\n  let vowelArray9 = [];\n  let vowelArray10 = [];\n  let vowelArray11 = [];\n  let vowelArray12 = [];\n  let vowelArray13 = [];\n  let vowelArray14 = [];\n  let vowelArray15 = [];\n  let vowelArray16 = [];\n  let vowelArray17 = [];\n  let vowelArray18 = [];\n  let vowelArray19 = [];\n  let vowelArray20 = [];\n  let vowelArray21 = [];\n  let vowelArray22 = [];\n  let vowelArray23 = [];\n  let vowelArray24 = [];\n  let vowelArray25 = [];\n  let vowelArray26 = [];\n  let vowelArray27 = [];\n  let vowelArray28 = [];\n  let vowelArray29 = [];\n  let vowelArray30 = [];\n  let vowelArray31 = [];\n  let vowelArray32 = [];\n  let vowelArray33 = [];\n  let vowelArray34 = [];\n  let vowelArray35 = [];\n  let vowelArray36 = [];\n  let vowelArray37 = [];\n  let vowelArray38 = [];\n  let vowelArray39 = [];\n  let vowelArray40 = [];\n  let vowelArray41 = [];\n  let vowelArray42 = [];\n  let vowelArray43 = [];\n  let vowelArray44 = [];\n  let vowelArray45 = [];\n  let vowelArray46 = [];\n  let vowelArray47 = [];\n  let vowelArray48 = [];\n  let vowelArray49 = [];\n  let vowelArray50 = [];\n  let vowelArray51 = [];\n  let vowelArray52 = [];\n  let vowelArray53 = [];\n  let vowelArray54 = [];\n  let vowelArray55 = [];\n  let vowelArray56 = [];\n  let vowelArray57 = [];\n  let vowelArray58 = [];\n  let vowelArray59 = [];\n  let vowelArray60 = [];\n  let vowelArray61 = [];\n  let vowelArray62 = [];\n  let vowelArray63 = [];\n  let vowelArray64 = [];\n  let vowelArray65 = [];\n  let vowelArray66 = [];\n  let vowelArray67 = [];\n  let vowelArray68 = [];\n  let vowelArray69 = [];\n  let vowelArray70 = [];\n  let vowelArray71 = [];\n  let vowelArray72 = [];\n  let vowelArray73 = [];\n  let vowelArray74 = [];\n  let vowelArray75 = [];\n  let vowelArray76 = [];\n  let vowelArray77 = [];\n  let vowelArray78 = [];\n  let vowelArray79 = [];\n  let vowelArray80 = [];\n  let vowelArray81 = [];\n  let vowelArray82 = [];\n  let vowelArray83 = [];\n  let vowelArray84 = [];\n  let vowelArray85 = [];\n  let vowelArray86 = [];\n  let vowelArray87 = [];\n  let vowelArray88 = [];\n  let vowelArray89 = [];\n  let vowelArray90 = [];\n  let vowelArray91 = [];\n  let vowelArray92 = [];\n  let vowelArray93 = [];\n  let vowelArray94 = [];\n  let vowelArray95 = [];\n  let vowelArray96 = [];\n  let vowelArray97 = [];\n  let vowelArray98 = [];\n  let vowelArray99 = [];\n  let vowelArray100 = [];\n  let vowelArray101 = [];\n  let vowelArray102 = [];\n  let vowelArray103 = [];\n  let vowelArray104 = [];\n  let vowelArray105 = [];\n  let vowelArray106 = [];\n  let vowelArray107 = [];\n  let vowelArray108 = [];\n  let vowelArray109 = [];\n  let vowelArray110 = [];\n  let vowelArray111 = [];\n  let vowelArray112 = [];\n  let vowelArray113 = [];\n  let vowelArray114 = [];\n  let vowelArray115 = [];\n  let vowelArray116 = [];\n  let vowelArray117 = [];\n  let vowelArray118 = [];\n  let vowelArray119 = [];\n  let vowelArray120 = [];\n  let vowelArray121 = [];\n  let vowelArray122 = [];\n  let vowelArray123 = [];\n  let vowelArray124 = [];\n  let vowelArray125 = [];\n  let vowelArray126 = [];\n  let vowelArray127 = [];\n  let vowelArray128 = [];\n  let vowelArray129 = [];\n  let vowelArray130 = [];\n  let vowelArray131 = [];\n  let vowelArray132 = [];\n  let vowelArray133 = [];\n  let vowelArray134 = [];\n  let vowelArray135 = [];\n  let vowelArray136 = [];\n  let vowelArray137 = [];\n  let vowelArray138 = [];\n  let vowelArray139 = [];\n  let vowelArray140 = [];\n  let vowelArray141 = [];\n  let vowelArray142 = [];\n  let vowelArray143 = [];\n  let vowelArray144 = [];\n  let vowelArray145 = [];\n  let vowelArray146 = [];\n  let vowelArray147 = [];\n  let vowelArray148 = [];\n  let vowelArray149 = [];\n  let vowelArray150 = [];\n  let vowelArray151 = [];\n  let vowelArray152 = [];\n  let vowelArray153 = [];\n  let vowelArray154 = [];\n  let vowelArray155 = [];\n  let vowelArray156 = [];\n  let vowelArray157 = [];\n  let vowelArray158 = [];\n  let vowelArray159 = [];\n  let vowelArray160 = [];\n  let vowelArray161 = [];\n  let vowelArray162 = [];\n  let vowelArray163 = [];\n  let vowelArray164 = [];\n  let vowelArray165 = [];\n  let vowelArray166 = [];\n  let vowelArray167 = [];\n  let vowelArray168 = [];\n  let vowelArray169 = [];\n  let vowelArray170 = [];\n  let vowelArray171 = [];\n  let vowelArray172 = [];\n  let vowelArray173 = [];\n  let vowelArray174 = [];\n  let vowelArray175 = [];\n  let vowelArray176 = [];\n  let vowelArray177 = [];\n  let vowelArray178 = [];\n  let vowelArray179 = [];\n  let vowelArray180 = [];\n  let vowelArray181 = [];\n  let vowelArray182 = [];\n  let vowelArray183 = [];\n  let vowelArray184 = [];\n  let vowelArray185 = [];\n  let vowelArray186 = [];\n  let vowelArray187 = [];\n  let vowelArray188 = [];\n  let vowelArray189 = [];\n  let vowelArray190 = [];\n  let vowelArray191 = [];\n  let vowelArray192 = [];\n  let vowelArray193 = [];\n  let vowelArray194 = [];\n  let vowelArray195 = [];\n  let vowelArray196 = [];\n  let vowelArray197 = [];\n  let vowelArray198 = [];\n  let vowelArray199 = [];\n  let vowelArray200 = [];\n  let vowelArray201 = [];\n  let vowelArray202 = [];\n  let vowelArray203 = [];\n  let vowelArray204 = [];\n  let vowelArray205 = [];\n  let vowelArray206 = [];\n  let vowelArray207 = [];\n  let vowelArray208 = [];\n  let vowelArray209 = [];\n  let vowelArray210 = [];\n  let vowelArray211 = [];\n  let vowelArray212 = [];\n  let vowelArray213 = [];\n  let vowelArray214 = [];\n  let vowelArray215 = [];\n  let vowelArray216 = [];\n  let vowelArray217 = [];\n  let vowelArray218 = [];\n  let vowelArray219 = [];\n  let vowelArray220 = [];\n  let vowelArray221 = [];\n  let vowelArray222 = [];\n  let vowelArray223 = [];\n  let vowelArray224 = [];\n  let vowelArray225", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the solution as a drawstring. \n   If shift > numeral of digit, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the solution as a drawstring. \n   If shift > numeral of digit, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('');\n  let reversed = digits.reverse();\n  let reversedDigits = reversed.slice(digits.length - shift);\n  return reversedDigits.join('');\n};\n\n/*\n  Return a string that is the sum of digits of x.\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sumDigits(12)\n  \"11\"\n  >>> sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function that takes a string as remark and retort the sum of the upper character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Write a function that takes a string as remark and retort the sum of the upper character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the lower character only' \n   american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the upper and lower case \n   characters' american standard code for information interchange codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the upper and lower case \n   characters' american standard code for information interchange codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the upper and lower case \n   characters' american standard code for information interchange codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the upper and lower case \n   characters' american standard code for information interchange codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the upper and lower case \n   characters' american standard code for information interchange codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the upper and lower case \n   characters' american standard code for information interchange codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the upper and lower case \n   characters' american standard code for information interchange codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the upper and lower case \n   characters' american standard code for information interchange codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as remark and retort the sum of the upper and lower case \n   characters' american standard code for information interchange codes.\n\n  Examples:\n      digitSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apple and orange \n   that are distribute in a basket of fruit this basket contains \n   apple, orange, and mango fruits. give the bowed stringed instrument that represents the full phone number of \n   the orange and apples and an integer that represent the total phone number of the fruit \n   in the basket return the numeral of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apple and orange \n   that are distribute in a basket of fruit this basket contains \n   apple, orange, and mango fruits. give the bowed stringed instrument that represents the full phone number of \n   the orange and apples and an integer that represent the total phone number of the fruit \n   in the basket return the numeral of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let total = 0;\n   let apple = 0;\n   let orange = 0;\n   let mango = 0;\n   let fruits = [];\n   let num = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let sum = 0;\n   let sum2 = 0;\n   let sum3 = 0;\n   let sum4 = 0;\n   let sum5 = 0;\n   let sum6 = 0;\n   let sum7 = 0;\n   let sum8 = 0;\n   let sum9 = 0;\n   let sum10 = 0;\n   let sum11 = 0;\n   let sum12 = 0;\n   let sum13 = 0;\n   let sum14 = 0;\n   let sum15 = 0;\n   let sum16 = 0;\n   let sum17 = 0;\n   let sum18 = 0;\n   let sum19 = 0;\n   let sum20 = 0;\n   let sum21 = 0;\n   let sum22 = 0;\n   let sum23 = 0;\n   let sum24 = 0;\n   let sum25 = 0;\n   let sum26 = 0;\n   let sum27 = 0;\n   let sum28 = 0;\n   let sum29 = 0;\n   let sum30 = 0;\n   let sum31 = 0;\n   let sum32 = 0;\n   let sum33 = 0;\n   let sum34 = 0;\n   let sum35 = 0;\n   let sum36 = 0;\n   let sum37 = 0;\n   let sum38 = 0;\n   let sum39 = 0;\n   let sum40 = 0;\n   let sum41 = 0;\n   let sum42 = 0;\n   let sum43 = 0;\n   let sum44 = 0;\n   let sum45 = 0;\n   let sum46 = 0;\n   let sum47 = 0;\n   let sum48 = 0;\n   let sum49 = 0;\n   let sum50 = 0;\n   let sum51 = 0;\n   let sum52 = 0;\n   let sum53 = 0;\n   let sum54 = 0;\n   let sum55 = 0;\n   let sum56 = 0;\n   let sum57 = 0;\n   let sum58 = 0;\n   let sum59 = 0;\n   let sum60 = 0;\n   let sum61 = 0;\n   let sum62 = 0;\n   let sum63 = 0;\n   let sum64 = 0;\n   let sum65 = 0;\n   let sum66 = 0;\n   let sum67 = 0;\n   let sum68 = 0;\n   let sum69 = 0;\n   let sum70 = 0;\n   let sum71 = 0;\n   let sum72 = 0;\n   let sum73 = 0;\n   let sum74 = 0;\n   let sum75 = 0;\n   let sum76 = 0;\n   let sum77 = 0;\n   let sum78 = 0;\n   let sum79 = 0;\n   let sum80 = 0;\n   let sum81 = 0;\n   let sum82 = 0;\n   let sum83 = 0;\n   let sum84 = 0;\n   let sum85 = 0;\n   let sum86 = 0;\n   let sum87 = 0;\n   let sum88 = 0;\n   let sum89 = 0;\n   let sum90 = 0;\n   let sum91 = 0;\n   let sum92 = 0;\n   let sum93 = 0;\n   let sum94 = 0;\n   let sum95 = 0;\n   let sum96 = 0;\n   let sum97 = 0;\n   let sum98 = 0;\n   let sum99 = 0;\n   let sum100 = 0;\n   let sum101 = 0;\n   let sum102 = 0;\n   let sum103 = 0;\n   let sum104 = 0;\n   let sum105 = 0;\n   let sum106 = 0;\n   let sum107 = 0;\n   let sum108 = 0;\n   let sum109 = 0;\n   let sum110 = 0;\n   let sum111 = 0;\n   let sum112 = 0;\n   let sum113 = 0;\n   let sum114 = 0;\n   let sum115 = 0;\n   let sum116 = 0;\n   let sum117 = 0;\n   let sum118 = 0;\n   let sum119 = 0;\n   let sum120 = 0;\n   let sum121 = 0;\n   let sum122 = 0;\n   let sum123 = 0;\n   let sum124 = 0;\n   let sum125 = 0;\n   let sum126 = 0;\n   let sum127 = 0;\n   let sum128 = 0;\n   let sum129 = 0;\n   let sum130 = 0;\n   let sum131 = 0;\n   let sum132 = 0;\n   let sum133 = 0;\n   let sum134 = 0;\n   let sum135 = 0;\n   let sum136 = 0;\n   let sum137 = 0;\n   let sum138 = 0;\n   let sum139 = 0;\n   let sum140 = 0;\n   let sum141 = 0;\n   let sum142 = 0;\n   let sum143 = 0;\n   let sum144 = 0;\n   let sum145 = 0;\n   let sum146 = 0;\n   let sum147 = 0;\n   let sum148 = 0;\n   let sum149 = 0;\n   let sum150 = 0;\n   let sum151 = 0;\n   let sum152 = 0;\n   let sum153 = 0;\n   let sum154 = 0;\n   let sum155 = 0;\n   let sum156 = 0;\n   let sum157 = 0;\n   let sum158 = 0;\n   let sum159 = 0;\n   let sum160 = 0;\n   let sum161 = 0;\n   let sum162 = 0;\n   let sum163 = 0;\n   let sum164 = 0;\n   let sum165 = 0;\n   let sum166 = 0;\n   let sum167 = 0;\n   let sum168 = 0;\n   let sum169 = 0;\n   let sum170 = 0;\n   let sum171 = 0;\n   let sum172 = 0;\n   let sum173 = 0;\n   let sum174 = 0;\n   let sum175 = 0;\n   let sum176 = 0;\n   let sum177 = 0;\n   let sum178 = 0;\n   let sum179 = 0;\n   let sum180 = 0;\n   let sum181 = 0;\n   let sum182 = 0;\n   let sum183 = 0;\n   let sum184 = 0;\n   let sum185 = 0;\n   let sum186 = 0;\n   let sum187 = 0;\n   let sum188 = 0;\n   let sum189 = 0;\n   let sum190 = 0;\n   let sum191 = 0;\n   let sum192 = 0;\n   let sum193 = 0;\n   let sum194 = 0;\n   let sum195 = 0;\n   let sum196 = 0;\n   let sum197 = 0;\n   let sum198 = 0;\n   let sum199 = 0;\n   let sum200 = 0;\n   let sum201 = 0;\n   let sum202 = 0;\n   let sum203 = 0;\n   let sum204 = 0;\n   let sum205 = 0;\n   let sum206 = 0;\n   let sum207 = 0;\n   let sum208 = 0;\n   let sum209 = 0;\n   let sum210 = 0;\n   let sum211 = 0;\n   let sum212 = 0;\n   let sum213 = 0;\n   let sum214 = 0;\n   let sum215 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Given an array representing a branch of a tree that hold non - negative integer node \n   your task is to pluck one of the nodes and return it. \n   The plucked node should exist the lymph node with the smallest tied value. \n   If multiple nodes with the like small even value are found return the node that has belittled exponent. \n\n   The plucked lymph node should be render in a list, [ smalest_value, its index ], \n   If there be no tied value or the grant array be empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [min, max] = arr.sort((a, b) => a - b);\n  const [index, value] = arr.findIndex((n) => n % 2 === 0);\n  return [value, index];\n};\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n/**\n * Given an array representing a branch of a tree that hold non - negative integer node \n * your task is to pluck one of the nodes and return it. \n * The plucked node should exist the lymph node with the smallest tied value. \n * If multiple nodes with the like small even value are found return the node that has belittled exponent. \n * \n * The plucked lymph node should be render in a list, [ smalest_value, its index ], \n * If there be no tied value or the grant array be empty, return [ ].\n * \n * Example 1:\n *     Input: [4,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * \n * Example 2:\n *     Input: [1,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * \n * Example 3:\n *     Input: []\n *     Output: []\n * \n * Example 4:\n *     Input: [5, 0, 3, 0, 4, 2]\n *     Output: [0, 1]\n *     Explanation: 0 is the smallest value, but  there are two zeros,\n *     so we will choose the first zero, which has the smallest index.\n * \n * Constraints:\n *     * 1 <= nodes.length <= 10000\n *     * 0 <= node.value\n */\nconst pluck = (arr) => {\n  const [min, max] = arr.sort((a, b) => a - b);\n  const [index, value] = arr.findIndex((n) => n % 2 === 0);\n  return [value, index];\n};\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n/**\n * Given an array representing a branch of a tree that hold non - negative integer node \n * your task is to pluck one of the nodes and return it. \n * The plucked node should exist the lymph node with the smallest tied value. \n * If multiple nodes with the like small even value are found return the node that has belittled exponent. \n * \n * The plucked lymph node should be render in a list, [ smalest_value, its index ], \n * If there be no tied value or the grant array be empty, return [ ].\n * \n * Example 1:\n *     Input: [4,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * \n * Example 2:\n *     Input: [1,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * \n * Example 3:\n *     Input: []\n *     Output: []\n * \n * Example 4:\n *     Input: [5, 0, 3, 0, 4, 2]\n *     Output: [0, 1]\n *     Explanation: 0 is the smallest value, but  there are two zeros,\n *     so we will choose the first zero, which has the smallest index.\n * \n * Constraints:\n *     * 1 <= nodes.length <= 10000\n *     * 0 <= node.value\n */\nconst pluck = (arr) => {\n  const [min, max] = arr.sort((a, b) => a - b);\n  const [index, value] = arr.findIndex((n) => n % 2 === 0);\n  return [value, index];\n};\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n/**\n * Given an array representing a branch of a tree that hold non - negative integer node \n * your task is to pluck one of the nodes and return it. \n * The plucked node should exist the lymph node with the smallest tied value. \n * If multiple nodes with the like small even value are found return the node that has belittled exponent. \n * \n * The plucked lymph node should be render in a list, [ smalest_value, its index ], \n * If there be no tied value or the grant array be empty, return [ ].\n * \n * Example 1:\n *     Input: [4,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * \n * Example 2:\n *     Input: [1,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * \n * Example 3:\n *     Input: []\n *     Output: []\n * \n * Example 4:\n *     Input: [5, 0, 3, 0, 4, 2]\n *     Output: [0, 1]\n *     Explanation: 0 is the smallest value, but  there are two zeros,\n *     so we will choose the first zero, which has the smallest index.\n * \n * Constraints:\n *     * 1 <= nodes.length <= 10000\n *     * 0 <= node.value\n */\nconst pluck = (arr) => {\n  const [min, max] = arr.sort((a, b) => a - b);\n  const [index, value] = arr.findIndex((n) => n % 2 === 0);\n  return [value, index];\n};\n\n// console.log(pluck([4, 2, 3]));\n// console.log(pluck([1, 2, 3]));\n// console.log(pluck([]));\n// console.log(pluck([5, 0, 3, 0, 4, 2]));\n\n/**\n * Given an array representing a branch of a tree that hold non - negative integer node \n * your task is to pluck one of the nodes and return it. \n * The plucked node should exist the lymph node with the smallest tied value. \n * If multiple nodes with the like small even value are found return the node that has belittled exponent. \n * \n * The plucked lymph node should be render in a list, [ smalest_value, its index ], \n * If there be no tied value or the grant array be empty, return [ ].\n * \n * Example 1:\n *     Input: [4,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * \n * Example 2:\n *     Input: [1,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * \n * Example 3:\n *     Input: []\n *     Output: []\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integer. Return the great integer that is great than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non - empty list of positive integer. Return the great integer that is great than \n   zero, and have a frequency greater than or adequate to the value of the integer itself. \n   The frequency of an integer is the number of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxValueIndex = 0;\n  let maxValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let maxValueValueValueIndex = 0;\n  let maxValueValueValueValue = 0;\n  let maxValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValue = 0;\n  let maxValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValue = 0;\n  let maxValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n * 'array'\n */\nconst getRandomElement = (list) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n/**\n * Get a random element from a list\n * >>> getRandomElement(['abc', 'bacd', 'cde', 'array'])\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order. \n   Strange classification, is when you start with the minimum value, \n   then maximum of the stay integer, then minimum and therefore on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  let minStay = 0;\n  let maxStay = 0;\n  let minStayIndex = 0;\n  let maxStayIndex = 0;\n  let minStayIndex2 = 0;\n  let maxStayIndex2 = 0;\n  let minStayIndex3 = 0;\n  let maxStayIndex3 = 0;\n  let minStayIndex4 = 0;\n  let maxStayIndex4 = 0;\n  let minStayIndex5 = 0;\n  let maxStayIndex5 = 0;\n  let minStayIndex6 = 0;\n  let maxStayIndex6 = 0;\n  let minStayIndex7 = 0;\n  let maxStayIndex7 = 0;\n  let minStayIndex8 = 0;\n  let maxStayIndex8 = 0;\n  let minStayIndex9 = 0;\n  let maxStayIndex9 = 0;\n  let minStayIndex10 = 0;\n  let maxStayIndex10 = 0;\n  let minStayIndex11 = 0;\n  let maxStayIndex11 = 0;\n  let minStayIndex12 = 0;\n  let maxStayIndex12 = 0;\n  let minStayIndex13 = 0;\n  let maxStayIndex13 = 0;\n  let minStayIndex14 = 0;\n  let maxStayIndex14 = 0;\n  let minStayIndex15 = 0;\n  let maxStayIndex15 = 0;\n  let minStayIndex16 = 0;\n  let maxStayIndex16 = 0;\n  let minStayIndex17 = 0;\n  let maxStayIndex17 = 0;\n  let minStayIndex18 = 0;\n  let maxStayIndex18 = 0;\n  let minStayIndex19 = 0;\n  let maxStayIndex19 = 0;\n  let minStayIndex20 = 0;\n  let maxStayIndex20 = 0;\n  let minStayIndex21 = 1;\n  let maxStayIndex21 = 1;\n  let minStayIndex22 = 0;\n  let maxStayIndex22 = 0;\n  let minStayIndex23 = 0;\n  let maxStayIndex23 = 0;\n  let minStayIndex24 = 0;\n  let maxStayIndex24 = 0;\n  let minStayIndex25 = 0;\n  let maxStayIndex25 = 0;\n  let minStayIndex26 = 0;\n  let maxStayIndex26 = 0;\n  let minStayIndex27 = 0;\n  let maxStayIndex27 = 0;\n  let minStayIndex28 = 0;\n  let maxStayIndex28 = 0;\n  let minStayIndex29 = 0;\n  let maxStayIndex29 = 0;\n  let minStayIndex30 = 0;\n  let maxStayIndex30 = 0;\n  let minStayIndex31 = 1;\n  let maxStayIndex31 = 1;\n  let minStayIndex32 = 0;\n  let maxStayIndex32 = 0;\n  let minStayIndex33 = 0;\n  let maxStayIndex33 = 0;\n  let minStayIndex34 = 0;\n  let maxStayIndex34 = 0;\n  let minStayIndex35 = 0;\n  let maxStayIndex35 = 0;\n  let minStayIndex36 = 0;\n  let maxStayIndex36 = 0;\n  let minStayIndex37 = 0;\n  let maxStayIndex37 = 0;\n  let minStayIndex38 = 0;\n  let maxStayIndex38 = 0;\n  let minStayIndex39 = 0;\n  let maxStayIndex39 = 0;\n  let minStayIndex40 = 0;\n  let maxStayIndex40 = 0;\n  let minStayIndex41 = 1;\n  let maxStayIndex41 = 1;\n  let minStayIndex42 = 1;\n  let maxStayIndex42 = 1;\n  let minStayIndex43 = 1;\n  let maxStayIndex43 = 1;\n  let minStayIndex44 = 1;\n  let maxStayIndex44 = 1;\n  let minStayIndex45 = 1;\n  let maxStayIndex45 = 1;\n  let minStayIndex46 = 1;\n  let maxStayIndex46 = 1;\n  let minStayIndex47 = 1;\n  let maxStayIndex47 = 1;\n  let minStayIndex48 = 1;\n  let maxStayIndex48 = 1;\n  let minStayIndex49 = 1;\n  let maxStayIndex49 = 1;\n  let minStayIndex50 = 1;\n  let maxStayIndex50 = 1;\n  let minStayIndex51 = 1;\n  let maxStayIndex51 = 1;\n  let minStayIndex52 = 1;\n  let maxStayIndex52 = 1;\n  let minStayIndex53 = 1;\n  let maxStayIndex53 = 1;\n  let minStayIndex54 = 1;\n  let maxStayIndex54 = 1;\n  let minStayIndex55 = 1;\n  let maxStayIndex55 = 1;\n  let minStayIndex56 = 1;\n  let maxStayIndex56 = 1;\n  let minStayIndex57 = 1;\n  let maxStayIndex57 = 1;\n  let minStayIndex58 = 1;\n  let maxStayIndex58 = 1;\n  let minStayIndex59 = 1;\n  let maxStayIndex59 = 1;\n  let minStayIndex60 = 1;\n  let maxStayIndex60 = 1;\n  let minStayIndex61 = 1;\n  let maxStayIndex61 = 1;\n  let minStayIndex62 = 1;\n  let maxStayIndex62 = 1;\n  let minStayIndex63 = 1;\n  let maxStayIndex63 = 1;\n  let minStayIndex64 = 1;\n  let maxStayIndex64 = 1;\n  let minStayIndex65 = 1;\n  let maxStayIndex65 = 1;\n  let minStayIndex66 = 1;\n  let maxStayIndex66 = 1;\n  let minStayIndex67 = 1;\n  let maxStayIndex67 = 1;\n  let minStayIndex68 = 1;\n  let maxStayIndex68 = 1;\n  let minStayIndex69 = 1;\n  let maxStayIndex69 = 1;\n  let minStayIndex70 = 1;\n  let maxStayIndex70 = 1;\n  let minStayIndex71 = 1;\n  let maxStayIndex71 = 1;\n  let minStayIndex72 = 1;\n  let maxStayIndex72 = 1;\n  let minStayIndex73 = 1;\n  let maxStayIndex73 = 1;\n  let minStayIndex74 = 1;\n  let maxStayIndex74 = 1;\n  let minStayIndex75 = 1;\n  let maxStayIndex75 = 1;\n  let minStayIndex76 = 1;\n  let maxStayIndex76 = 1;\n  let minStayIndex77 = 1;\n  let maxStayIndex77 = 1;\n  let minStayIndex78 = 1;\n  let maxStayIndex78 = 1;\n  let minStayIndex79 = 1;\n  let maxStayIndex79 = 1;\n  let minStayIndex80 = 1;\n  let maxStayIndex80 = 1;\n  let minStayIndex81 = 1;\n  let maxStayIndex81 = 1;\n  let minStayIndex82 = 1;\n  let maxStayIndex82 = 1;\n  let minStayIndex83 = 1;\n  let maxStayIndex83 = 1;\n  let minStayIndex84 = 1;\n  let maxStayIndex84 = 1;\n  let minStayIndex85 = 1;\n  let maxStayIndex85 = 1;\n  let minStayIndex86 = 1;\n  let maxStayIndex86 = 1;\n  let minStayIndex87 = 1;\n  let maxStayIndex87 = 1;\n  let minStayIndex88 = 1;\n  let maxStayIndex88 = 1;\n  let minStayIndex89", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of \n   the triangulum rounded to 2 decimal point if the three sides imprint a valid triangle. \n   differently return -1 \n   Three side hold a valid triangulum when the sum of any two sides be big \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + c;\n  const sumH = b + c;\n  const sumI = b + c;\n  const sumJ = b + c;\n  const sumK = b + c;\n  const sumL = b + c;\n  const sumM = b + c;\n  const sumN = c + b;\n  const sumO = c + b;\n  const sumP = c + b;\n  const sumQ = c + b;\n  const sumR = c + b;\n  const sumS = c + b;\n  const sumT = c + b;\n  const sumU = c + b;\n  const sumV = c + b;\n  const sumW = c + b;\n  const sumX = c + b;\n  const sumY = c + b;\n  const sumZ = c + b;\n  const sumA = a + sumA;\n  const sumB = a + sumB;\n  const sumC = a + sumC;\n  const sumD = a + sumD;\n  const sumE = a + sumE;\n  const sumF = a + sumF;\n  const sumG = a + sumG;\n  const sumH = a + sumH;\n  const sumI = a + sumI;\n  const sumJ = a + sumJ;\n  const sumK = a + sumK;\n  const sumL = a + sumL;\n  const sumM = a + sumM;\n  const sumN = a + sumN;\n  const sumO = a + sumO;\n  const sumP = a + sumP;\n  const sumQ = a + sumQ;\n  const sumR = a + sumR;\n  const sumS = a + sumS;\n  const sumT = a + sumT;\n  const sumU = a + sumU;\n  const sumV = a + sumV;\n  const sumW = a + sumW;\n  const sumX = a + sumX;\n  const sumY = a + sumY;\n  const sumZ = a + sumZ;\n  const sumA = b + sumA;\n  const sumB = b + sumB;\n  const sumC = b + sumC;\n  const sumD = b + sumD;\n  const sumE = b + sumE;\n  const sumF = b + sumF;\n  const sumG = b + sumG;\n  const sumH = b + sumH;\n  const sumI = b + sumI;\n  const sumJ = b + sumJ;\n  const sumK = b + sumK;\n  const sumL = b + sumL;\n  const sumM = b + sumM;\n  const sumN = b + sumN;\n  const sumO = b + sumO;\n  const sumP = b + sumP;\n  const sumQ = b + sumQ;\n  const sumR = b + sumR;\n  const sumS = b + sumS;\n  const sumT = b + sumT;\n  const sumU = b + sumU;\n  const sumV = b + sumV;\n  const sumW = b + sumW;\n  const sumX = b + sumX;\n  const sumY = b + sumY;\n  const sumZ = b + sumZ;\n  const sumA = c + sumA;\n  const sumB = c + sumB;\n  const sumC = c + sumC;\n  const sumD = c + sumD;\n  const sumE = c + sumE;\n  const sumF = c + sumF;\n  const sumG = c + sumG;\n  const sumH = c + sumH;\n  const sumI = c + sumI;\n  const sumJ = c + sumJ;\n  const sumK = c + sumK;\n  const sumL = c + sumL;\n  const sumM = c + sumM;\n  const sumN = c + sumN;\n  const sumO = c + sumO;\n  const sumP = c + sumP;\n  const sumQ = c + sumQ;\n  const sumR = c + sumR;\n  const sumS = c + sumS;\n  const sumT = c + sumT;\n  const sumU = c + sumU;\n  const sumV = c + sumV;\n  const sumW = c + sumW;\n  const sumX = c + sumX;\n  const sumY = c + sumY;\n  const sumZ = c + sumZ;\n  const area = (sumA + sumB + sumC + sumD + sumE + sumF + sumG + sumH + sumI + sumJ + sumK + sumL + sumM + sumN + sumO + sumP + sumQ + sumR + sumS + sumT + sumU + sumV + sumW + sumX + sumY + sumZ) / 6;\n  return area;\n}\n\n/*\n  Given the lengths of the four sides of a rectangle. Return the area of \n   the rectangle rounded to 2 decimal point if the four sides imprint a valid rectangle. \n   differently return -1 \n   Three side hold a valid rectangle when the sum of any two sides be big \n   than the third side.\n  Example:\n  rectangleArea(3, 4, 5) == 12.00\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + c;\n  const sumH = b + c;\n  const sumI = b + c;\n  const sumJ = b + c;\n  const sumK = b + c;\n  const sumL = b + c;\n  const sumM = b + c;\n  const sumN = c + b;\n  const sumO = c + b;\n  const sumP = c + b;\n  const sumQ = c + b;\n  const sumR = c + b;\n  const sumS = c + b;\n  const sumT = c + b;\n  const sumU = c + b;\n  const sumV = c + b;\n  const sumW = c + b;\n  const sumX = c + b;\n  const sumY = c + b;\n  const sumZ = c + b;\n  const area = (sumA + sumB + sumC + sumD + sumE + sumF + sumG + sumH + sumI + sumJ + sumK + sumL + sumM + sumN + sumO + sumP + sumQ + sumR + sumS + sumT + sumU + sumV + sumW + sumX + sumY + sumZ) / 6;\n  return area;\n}\n\n/*\n  Given the lengths of the five sides of a pentagon. Return the area of \n   the pentagon rounded to 2 decimal point if the five sides imprint a valid pentagon. \n   differently return -1 \n   Three side hold a valid pentagon when the sum of any two sides be big \n   than the third side.\n  Example:\n  pentagonArea(3, 4, 5) == 12.00\n  pentagonArea(1, 2, 10) == -1\n  */\nconst pentagonArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + c;\n  const sumH = b + ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will vanish, and fake differently. \n   The object q will flee if it's balanced (it is a palindromic list) and the sum of its elements equal less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will vanish, and fake differently. \n   The object q will flee if it's balanced (it is a palindromic list) and the sum of its elements equal less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnit = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightUnitWeightWeightWeightWeightWeightWeight", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  arr.forEach((val, index) => {\n    if (val < minChange) {\n      minChange = val;\n      minIndex = index;\n    }\n  });\n  return minIndex;\n};\n\n/*\n  Given an array arr of integers, find the maximum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 3\n  */\nconst largestChange = (arr) => {\n  let maxChange = Number.MIN_SAFE_INTEGER;\n  let maxIndex = -1;\n  arr.forEach((val, index) => {\n    if (val > maxChange) {\n      maxChange = val;\n      maxIndex = index;\n    }\n  });\n  return maxIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst smallestChangeInReverse = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  arr.forEach((val, index) => {\n    if (val < minChange) {\n      minChange = val;\n      minIndex = index;\n    }\n  });\n  return minIndex;\n};\n\n/*\n  Given an array arr of integers, find the maximum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChangeInReverse = (arr) => {\n  let maxChange = Number.MIN_SAFE_INTEGER;\n  let maxIndex = -1;\n  arr.forEach((val, index) => {\n    if (val > maxChange) {\n      maxChange = val;\n      maxIndex = index;\n    }\n  });\n  return maxIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst smallestChangeInReverseInReverse = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  arr.forEach((val, index) => {\n    if (val < minChange) {\n      minChange = val;\n      minIndex = index;\n    }\n  });\n  return minIndex;\n};\n\n/*\n  Given an array arr of integers, find the maximum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChangeInReverseInReverse = (arr) => {\n  let maxChange = Number.MIN_SAFE_INTEGER;\n  let maxIndex = -1;\n  arr.forEach((val, index) => {\n    if (val > maxChange) {\n      maxChange = val;\n      maxIndex = index;\n    }\n  });\n  return maxIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst smallestChangeInReverseInReverseInReverse = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  arr.forEach((val, index) => {\n    if (val < minChange) {\n      minChange = val;\n      minIndex = index;\n    }\n  });\n  return minIndex;\n};\n\n/*\n  Given an array arr of integers, find the maximum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChangeInReverseInReverseInReverse = (arr) => {\n  let maxChange = Number.MIN_SAFE_INTEGER;\n  let maxIndex = -1;\n  arr.forEach((val, index) => {\n    if (val > maxChange) {\n      maxChange = val;\n      maxIndex = index;\n    }\n  });\n  return maxIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum issue of component that \n   necessitate to be change to make the array palindromic. A palindromic array is an array that \n   is read the like backwards and forwards. In one change, you can exchange one component to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst smallestChangeInReverseInReverseInReverseInReverse = (arr) => {\n  let minChange = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  arr.forEach((val, index) => {\n    if (val < minChange) {\n      minChange = val;\n      minIndex = index;\n    }\n  });\n  return minIndex;\n};\n\n/*\n  Given an array arr of integers, find the maximum issue of component that \n   necessitate to be change to make the array palin", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] === lst2[j + 1]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] === lst2[j - 1]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchAll = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] === lst2[j + 1]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] === lst2[j - 1]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatchAll(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatchAll(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatchAll(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatchAll(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchAllAll = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] === lst2[j + 1]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] === lst2[j - 1]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatchAll(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatchAll(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatchAll(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatchAll(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchAllAllAll = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] === lst2[j + 1]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] === lst2[j - 1]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatchAllAll(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatchAllAll(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatchAllAll(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatchAllAll(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchAllAllAll = (lst1, lst2) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] === lst2[j + 1]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else if (lst1[i] === lst2[j - 1]) {\n      result.push(lst1[i])\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and retort the list that has \n   full act of chars in the all chain of the list less than the other list.\n\n   if the two tilt accept the like number of chars, return the inaugural list.\n\n  Examples\n  totalMatchAllAll(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatchAllAll(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the give issue embody the multiplication of 3 premier numbers \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returns true if the give issue embody the multiplication of 3 premier numbers \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is divisible by 3 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy3(20) == true\n  20 = 2 % 3 = 1\n  */\nconst isDivisibleBy3 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 5 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy5(10) == true\n  10 = 5 % 5 = 1\n  */\nconst isDivisibleBy5 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 7 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy7(10) == true\n  10 = 7 % 7 = 1\n  */\nconst isDivisibleBy7 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 11 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy11(10) == true\n  10 = 11 % 11 = 1\n  */\nconst isDivisibleBy11 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 13 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy13(10) == true\n  10 = 13 % 13 = 1\n  */\nconst isDivisibleBy13 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 17 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy17(10) == true\n  10 = 17 % 17 = 1\n  */\nconst isDivisibleBy17 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 19 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy19(10) == true\n  10 = 19 % 19 = 1\n  */\nconst isDivisibleBy19 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 23 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy23(10) == true\n  10 = 23 % 23 = 1\n  */\nconst isDivisibleBy23 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 29 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy29(10) == true\n  10 = 29 % 29 = 1\n  */\nconst isDivisibleBy29 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 31 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy31(10) == true\n  10 = 31 % 31 = 1\n  */\nconst isDivisibleBy31 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 37 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy37(10) == true\n  10 = 37 % 37 = 1\n  */\nconst isDivisibleBy37 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 41 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy41(10) == true\n  10 = 41 % 41 = 1\n  */\nconst isDivisibleBy41 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 43 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy43(10) == true\n  10 = 43 % 43 = 1\n  */\nconst isDivisibleBy43 = (a) => {\n  let isDivisible = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that returns true if the given number is divisible by 47 \n   and false differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isDivisibleBy47(10) == true\n  10 = 47 % 47 = 1\n  */\nconst isDivisibleBy47 = (a) => {\n  let is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function that returns true if a issue x be a elementary \n   power of n and false in early cases. \n   x is a elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false\n  }\n  return true\n}\n\n/*Your task is to write a function that returns true if a issue x be a \n   composite power of n and false in early cases. \n   x is a composite power of n if n**int=x\n  For example:\n  isCompositePower(1, 4) => true\n  isCompositePower(2, 2) => true\n  isCompositePower(8, 2) => true\n  isCompositePower(3, 2) => false\n  isCompositePower(3, 1) => false\n  isCompositePower(5, 3) => false\n  */\nconst isCompositePower = (x, n) => {\n  if (n % x === 0) {\n    return false\n  }\n  if (n % n % x === 0) {\n    return false\n  }\n  return true\n}\n\n/*Your task is to write a function that returns true if a issue x be a \n   composite power of n and false in early cases. \n   x is a composite power of n if n**int=x\n  For example:\n  isCompositePower(1, 4) => true\n  isCompositePower(2, 2) => true\n  isCompositePower(8, 2) => true\n  isCompositePower(3, 2) => false\n  isCompositePower(3, 1) => false\n  isCompositePower(5, 3) => false\n  */\nconst isCompositePowerOfTwo = (x, n) => {\n  if (n % x === 0) {\n    return false\n  }\n  if (n % n % x === 0) {\n    return false\n  }\n  return true\n}\n\n/*Your task is to write a function that returns true if a issue x be a \n   composite power of n and false in early cases. \n   x is a composite power of n if n**int=x\n  For example:\n  isCompositePower(1, 4) => true\n  isCompositePower(2, 2) => true\n  isCompositePower(8, 2) => true\n  isCompositePower(3, 2) => false\n  isCompositePower(3, 1) => false\n  isCompositePower(5, 3) => false\n  */\nconst isCompositePowerOfThree = (x, n) => {\n  if (n % x === 0) {\n    return false\n  }\n  if (n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % x === 0) {\n    return false\n  }\n  return true\n}\n\n/*Your task is to write a function that returns true if a issue x be a \n   composite power of n and false in early cases. \n   x is a composite power of n if n**int=x\n  For example:\n  isCompositePower(1, 4) => true\n  isCompositePower(2, 2) => true\n  isCompositePower(8, 2) => true\n  isCompositePower(3, 2) => false\n  isCompositePower(3, 1) => false\n  isCompositePower(5, 3) => false\n  */\nconst isCompositePowerOfFour = (x, n) => {\n  if (n % x === 0) {\n    return false\n  }\n  if (n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % x === 0) {\n    return false\n  }\n  return true\n}\n\n/*Your task is to write a function that returns true if a issue x be a \n   composite power of n and false in early cases. \n   x is a composite power of n if n**int=x\n  For example:\n  isCompositePower(1, 4) => true\n  isCompositePower(2, 2) => true\n  isCompositePower(8, 2) => true\n  isCompositePower(3, 2) => false\n  isCompositePower(3, 1) => false\n  isCompositePower(5, 3) => false\n  */\nconst isCompositePowerOfFive = (x, n) => {\n  if (n % x === 0) {\n    return false\n  }\n  if (n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % n % x === 0) {\n    return false\n  }\n  return true\n}\n\n/*Your task is to write a function that returns true if a issue x be a \n   composite power of n and false in early cases. \n   x is a composite power of n if n**int=x\n  For example:\n  isCompositePower(1, 4) => true\n  isCompositePower(2, 2) => true\n  isCompositePower(8, 2) => true\n  isCompositePower(3, 2) => false\n  isCompositePower(3, 1) => false\n  isCompositePower(5, 3) => false\n  */\nconst isCompositePowerOfSix = (x, n) => {\n  if (n % x === 0) {\n    return false\n  }\n  if (n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % n % x === 0) {\n    return false\n  }\n  return true\n}\n\n/*Your task is to write a function that returns true if a issue x be a \n   composite power of n and false in early cases. \n   x is a composite power of n if n**int=x\n  For example:\n  isCompositePower(1, 4) => true\n  isCompositePower(2, 2) => true\n  isCompositePower(8, 2) => true\n  isCompositePower(3, 2) => false\n  isCompositePower(3, 1) => false\n  isCompositePower(5, 3) => false\n  */\nconst isCompositePowerOfSeven = (x, n) => {\n  if (n % x === 0) {\n    return false\n  }\n  if (n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % n % x === 0) {\n    return false\n  }\n  return true\n}\n\n/*Your task is to write a function that returns true if a issue x be a \n   composite power of n and false in early cases. \n   x is a composite power of n if n**int=x\n  For example:\n  isCompositePower(1, 4) => true\n  isCompositePower(2, 2) => true\n  isCompositePower(8, 2) => true\n  isCompositePower(3, 2) => false\n  isCompositePower(3, 1) => false\n  isCompositePower(5, 3) => false\n  */\nconst isCompositePowerOfEight = (x, n) => {\n  if (n % x === 0) {\n    return false\n  }\n  if (n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % n % x === 0) {\n    return false\n  }\n  return true\n}\n\n/*Your task is to write a function that returns true if a issue x be a \n   composite power of n and false in early cases. \n   x is a composite power of n if n**int=x\n  For example:\n  isCompositePower(1, 4) => true\n  isCompositePower(2, 2) => true\n  isCompositePower(8, 2) => true\n  isCompositePower(3, 2) => false\n  isCompositePower(3, 1) => false\n  isCompositePower(5, 3) => false\n  */\nconst isCompositePowerOfNine = (x, n) => {\n  if (n % x === 0) {\n    return false\n  }\n  if (n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % x === 0) {\n    return false\n  }\n  if (n % n % n % n % x === 0) {\n    return false\n  }\n  return true\n}\n\n/*Your task is to write a function that returns true if a issue x be a \n   composite power of n and false in early cases. \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return true\n  return iscube(a / 3)\n}\n\n/*\n  Write a function that takes an integer a and returns on-key \n   if this ingeger is a cube of some integer numeral. \n   Note: you may assume the remark is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(4) ==> true\n  iscube(5) ==> false\n  iscube(6) ==> false\n  iscube(7) ==> false\n  iscube(8) ==> false\n  iscube(9) ==> false\n  iscube(10) ==> false\n  iscube(11) ==> false\n  iscube(12) ==> false\n  iscube(13) ==> false\n  iscube(14) ==> false\n  iscube(15) ==> false\n  iscube(16) ==> false\n  iscube(17) ==> false\n  iscube(18) ==> false\n  iscube(19) ==> false\n  iscube(20) ==> false\n  iscube(21) ==> false\n  iscube(22) ==> false\n  iscube(23) ==> false\n  iscube(24) ==> false\n  iscube(25) ==> false\n  iscube(26) ==> false\n  iscube(27) ==> false\n  iscube(28) ==> false\n  iscube(29) ==> false\n  iscube(30) ==> false\n  iscube(31) ==> false\n  iscube(32) ==> false\n  iscube(33) ==> false\n  iscube(34) ==> false\n  iscube(35) ==> false\n  iscube(36) ==> false\n  iscube(37) ==> false\n  iscube(38) ==> false\n  iscube(39) ==> false\n  iscube(40) ==> false\n  iscube(41) ==> false\n  iscube(42) ==> false\n  iscube(43) ==> false\n  iscube(44) ==> false\n  iscube(45) ==> false\n  iscube(46) ==> false\n  iscube(47) ==> false\n  iscube(48) ==> false\n  iscube(49) ==> false\n  iscube(50) ==> false\n  iscube(51) ==> false\n  iscube(52) ==> false\n  iscube(53) ==> false\n  iscube(54) ==> false\n  iscube(55) ==> false\n  iscube(56) ==> false\n  iscube(57) ==> false\n  iscube(58) ==> false\n  iscube(59) ==> false\n  iscube(60) ==> false\n  iscube(61) ==> false\n  iscube(62) ==> false\n  iscube(63) ==> false\n  iscube(64) ==> false\n  iscube(65) ==> false\n  iscube(66) ==> false\n  iscube(67) ==> false\n  iscube(68) ==> false\n  iscube(69) ==> false\n  iscube(70) ==> false\n  iscube(71) ==> false\n  iscube(72) ==> false\n  iscube(73) ==> false\n  iscube(74) ==> false\n  iscube(75) ==> false\n  iscube(76) ==> false\n  iscube(77) ==> false\n  iscube(78) ==> false\n  iscube(79) ==> false\n  iscube(80) ==> false\n  iscube(81) ==> false\n  iscube(82) ==> false\n  iscube(83) ==> false\n  iscube(84) ==> false\n  iscube(85) ==> false\n  iscube(86) ==> false\n  iscube(87) ==> false\n  iscube(88) ==> false\n  iscube(89) ==> false\n  iscube(90) ==> false\n  iscube(91) ==> false\n  iscube(92) ==> false\n  iscube(93) ==> false\n  iscube(94) ==> false\n  iscube(95) ==> false\n  iscube(96) ==> false\n  iscube(97) ==> false\n  iscube(98) ==> false\n  iscube(99) ==> false\n  iscube(100) ==> false\n  iscube(101) ==> false\n  iscube(102) ==> false\n  iscube(103) ==> false\n  iscube(104) ==> false\n  iscube(105) ==> false\n  iscube(106) ==> false\n  iscube(107) ==> false\n  iscube(108) ==> false\n  iscube(109) ==> false\n  iscube(110) ==> false\n  iscube(111) ==> false\n  iscube(112) ==> false\n  iscube(113) ==> false\n  iscube(114) ==> false\n  iscube(115) ==> false\n  iscube(116) ==> false\n  iscube(117) ==> false\n  iscube(118) ==> false\n  iscube(119) ==> false\n  iscube(120) ==> false\n  iscube(121) ==> false\n  iscube(122) ==> false\n  iscube(123) ==> false\n  iscube(124) ==> false\n  iscube(125) ==> false\n  iscube(126) ==> false\n  iscube(127) ==> false\n  iscube(128) ==> false\n  iscube(129) ==> false\n  iscube(130) ==> false\n  iscube(131) ==> false\n  iscube(132) ==> false\n  iscube(133) ==> false\n  iscube(134) ==> false\n  iscube(135) ==> false\n  iscube(136) ==> false\n  iscube(137) ==> false\n  iscube(138) ==> false\n  iscube(139) ==> false\n  iscube(140) ==> false\n  iscube(141) ==> false\n  iscube(142) ==> false\n  iscube(143) ==> false\n  iscube(144) ==> false\n  iscube(145) ==> false\n  iscube(146) ==> false\n  iscube(147) ==> false\n  iscube(148) ==> false\n  iscube(149) ==> false\n  iscube(150) ==> false\n  iscube(151) ==> false\n  iscube(152) ==> false\n  is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives \n   a hexadecimal issue as a drawstring and consider the numeral of hexadecimal \n   digits that equal primes (prime number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two smaller lifelike act). \n   Hexadecimal finger are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers pool are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you have to settle a act of the following digits: 2=== 3=== 5=== 7=== \n   b-complex vitamin (= decimal 11)=== vitamin d (= decimal 13). \n   Note: you may simulate the input is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a function that receives \n   a hexadecimal issue as a drawstring and consider the numeral of hexadecimal \n   digits that equal primes (prime number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two smaller lifelike act). \n   Hexadecimal finger are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers pool are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   therefore you have to settle a act of the following digits: 2=== 3=== 5=== 7=== \n   b-complex vitamin (= decimal 11)=== vitamin d (= decimal 13). \n   Note: you may simulate the input is constantly right or empty string=== \n   and symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let key = 0;\n  let numStr = \"\";\n  let numStrLen = num.length;\n  let numStrLen2 = numStr.length;\n  let numStrLen3 = numStrLen2;\n  let numStrLen4 = numStrLen3;\n  let numStrLen5 = numStrLen4;\n  let numStrLen6 = numStrLen5;\n  let numStrLen7 = numStrLen6;\n  let numStrLen8 = numStrLen7;\n  let numStrLen9 = numStrLen8;\n  let numStrLen10 = numStrLen9;\n  let numStrLen11 = numStrLen10;\n  let numStrLen12 = numStrLen11;\n  let numStrLen13 = numStrLen12;\n  let numStrLen14 = numStrLen13;\n  let numStrLen15 = numStrLen14;\n  let numStrLen16 = numStrLen15;\n  let numStrLen17 = numStrLen16;\n  let numStrLen18 = numStrLen17;\n  let numStrLen19 = numStrLen18;\n  let numStrLen20 = numStrLen19;\n  let numStrLen21 = numStrLen20;\n  let numStrLen22 = numStrLen21;\n  let numStrLen23 = numStrLen22;\n  let numStrLen24 = numStrLen23;\n  let numStrLen25 = numStrLen24;\n  let numStrLen26 = numStrLen25;\n  let numStrLen27 = numStrLen26;\n  let numStrLen28 = numStrLen27;\n  let numStrLen29 = numStrLen28;\n  let numStrLen30 = numStrLen29;\n  let numStrLen31 = numStrLen30;\n  let numStrLen32 = numStrLen31;\n  let numStrLen33 = numStrLen32;\n  let numStrLen34 = numStrLen33;\n  let numStrLen35 = numStrLen34;\n  let numStrLen36 = numStrLen35;\n  let numStrLen37 = numStrLen36;\n  let numStrLen38 = numStrLen37;\n  let numStrLen39 = numStrLen38;\n  let numStrLen40 = numStrLen39;\n  let numStrLen41 = numStrLen40;\n  let numStrLen42 = numStrLen41;\n  let numStrLen43 = numStrLen42;\n  let numStrLen44 = numStrLen43;\n  let numStrLen45 = numStrLen44;\n  let numStrLen46 = numStrLen45;\n  let numStrLen47 = numStrLen46;\n  let numStrLen48 = numStrLen47;\n  let numStrLen49 = numStrLen48;\n  let numStrLen50 = numStrLen49;\n  let numStrLen51 = numStrLen50;\n  let numStrLen52 = numStrLen51;\n  let numStrLen53 = numStrLen52;\n  let numStrLen54 = numStrLen53;\n  let numStrLen55 = numStrLen54;\n  let numStrLen56 = numStrLen55;\n  let numStrLen57 = numStrLen56;\n  let numStrLen58 = numStrLen57;\n  let numStrLen59 = numStrLen58;\n  let numStrLen60 = numStrLen59;\n  let numStrLen61 = numStrLen60;\n  let numStrLen62 = numStrLen61;\n  let numStrLen63 = numStrLen62;\n  let numStrLen64 = numStrLen63;\n  let numStrLen65 = numStrLen64;\n  let numStrLen66 = numStrLen65;\n  let numStrLen67 = numStrLen66;\n  let numStrLen68 = numStrLen67;\n  let numStrLen69 = numStrLen68;\n  let numStrLen70 = numStrLen69;\n  let numStrLen71 = numStrLen70;\n  let numStrLen72 = numStrLen71;\n  let numStrLen73 = numStrLen72;\n  let numStrLen74 = numStrLen73;\n  let numStrLen75 = numStrLen74;\n  let numStrLen76 = numStrLen75;\n  let numStrLen77 = numStrLen76;\n  let numStrLen78 = numStrLen77;\n  let numStrLen79 = numStrLen78;\n  let numStrLen80 = numStrLen79;\n  let numStrLen81 = numStrLen80;\n  let numStrLen82 = numStrLen81;\n  let numStrLen83 = numStrLen82;\n  let numStrLen84 = numStrLen83;\n  let numStrLen85 = numStrLen84;\n  let numStrLen86 = numStrLen85;\n  let numStrLen87 = numStrLen86;\n  let numStrLen88 = numStrLen87;\n  let numStrLen89 = numStrLen88;\n  let numStrLen90 = numStrLen89;\n  let numStrLen91 = numStrLen90;\n  let numStrLen92 = numStrLen91;\n  let numStrLen93 = numStrLen92;\n  let numStrLen94 = numStrLen93;\n  let numStrLen95 = numStrLen94;\n  let numStrLen96 = numStrLen95;\n  let numStrLen97 = numStrLen96;\n  let numStrLen98 = numStrLen97;\n  let numStrLen99 = numStrLen98;\n  let numStrLen100 = numStrLen99;\n  let numStrLen101 = numStrLen100;\n  let numStrLen102 = numStrLen101;\n  let numStrLen103 = numStrLen102;\n  let numStrLen104 = numStrLen103;\n  let numStrLen105 = numStrLen104;\n  let numStrLen106 = numStrLen105;\n  let numStrLen107 = numStrLen106;\n  let numStrLen108 = numStr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to commute it to \n   binary format. The function should return a string, with each fictional character representing a binary \n   phone number. Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to commute it to \n   binary format. The function should return a string, with each fictional character representing a binary \n   phone number. Each character in the string will exist' 0' or' 1'. \n\n   There will exist an extra couple of character' db' at the beginning and at the conclusion of the string. \n   The extra fictional character are there to avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let num = 0;\n  let numString = \"\";\n  let numStringLength = 0;\n  let numStringLength2 = 0;\n  let numStringLength3 = 0;\n  let numStringLength4 = 0;\n  let numStringLength5 = 0;\n  let numStringLength6 = 0;\n  let numStringLength7 = 0;\n  let numStringLength8 = 0;\n  let numStringLength9 = 0;\n  let numStringLength10 = 0;\n  let numStringLength11 = 0;\n  let numStringLength12 = 0;\n  let numStringLength13 = 0;\n  let numStringLength14 = 0;\n  let numStringLength15 = 0;\n  let numStringLength16 = 0;\n  let numStringLength17 = 0;\n  let numStringLength18 = 0;\n  let numStringLength19 = 0;\n  let numStringLength20 = 0;\n  let numStringLength21 = 0;\n  let numStringLength22 = 0;\n  let numStringLength23 = 0;\n  let numStringLength24 = 0;\n  let numStringLength25 = 0;\n  let numStringLength26 = 0;\n  let numStringLength27 = 0;\n  let numStringLength28 = 0;\n  let numStringLength29 = 0;\n  let numStringLength30 = 0;\n  let numStringLength31 = 0;\n  let numStringLength32 = 0;\n  let numStringLength33 = 0;\n  let numStringLength34 = 0;\n  let numStringLength35 = 0;\n  let numStringLength36 = 0;\n  let numStringLength37 = 0;\n  let numStringLength38 = 0;\n  let numStringLength39 = 0;\n  let numStringLength40 = 0;\n  let numStringLength41 = 0;\n  let numStringLength42 = 0;\n  let numStringLength43 = 0;\n  let numStringLength44 = 0;\n  let numStringLength45 = 0;\n  let numStringLength46 = 0;\n  let numStringLength47 = 0;\n  let numStringLength48 = 0;\n  let numStringLength49 = 0;\n  let numStringLength50 = 0;\n  let numStringLength51 = 0;\n  let numStringLength52 = 0;\n  let numStringLength53 = 0;\n  let numStringLength54 = 0;\n  let numStringLength55 = 0;\n  let numStringLength56 = 0;\n  let numStringLength57 = 0;\n  let numStringLength58 = 0;\n  let numStringLength59 = 0;\n  let numStringLength60 = 0;\n  let numStringLength61 = 0;\n  let numStringLength62 = 0;\n  let numStringLength63 = 0;\n  let numStringLength64 = 0;\n  let numStringLength65 = 0;\n  let numStringLength66 = 0;\n  let numStringLength67 = 0;\n  let numStringLength68 = 0;\n  let numStringLength69 = 0;\n  let numStringLength70 = 0;\n  let numStringLength71 = 0;\n  let numStringLength72 = 0;\n  let numStringLength73 = 0;\n  let numStringLength74 = 0;\n  let numStringLength75 = 0;\n  let numStringLength76 = 0;\n  let numStringLength77 = 0;\n  let numStringLength78 = 0;\n  let numStringLength79 = 0;\n  let numStringLength80 = 0;\n  let numStringLength81 = 0;\n  let numStringLength82 = 0;\n  let numStringLength83 = 0;\n  let numStringLength84 = 0;\n  let numStringLength85 = 0;\n  let numStringLength86 = 0;\n  let numStringLength87 = 0;\n  let numStringLength88 = 0;\n  let numStringLength89 = 0;\n  let numStringLength90 = 0;\n  let numStringLength91 = 0;\n  let numStringLength92 = 0;\n  let numStringLength93 = 0;\n  let numStringLength94 = 0;\n  let numStringLength95 = 0;\n  let numStringLength96 = 0;\n  let numStringLength97 = 0;\n  let numStringLength98 = 0;\n  let numStringLength99 = 0;\n  let numStringLength100 = 0;\n  let numStringLength101 = 0;\n  let numStringLength102 = 0;\n  let numStringLength103 = 0;\n  let numStringLength104 = 0;\n  let numStringLength105 = 0;\n  let numStringLength106 = 0;\n  let numStringLength107 = 0;\n  let numStringLength108 = 0;\n  let numStringLength109 = 0;\n  let numStringLength110 = 0;\n  let numStringLength111 = 0;\n  let numStringLength112 = 0;\n  let numStringLength113 = 0;\n  let numStringLength114 = 0;\n  let numStringLength115 = 0;\n  let numStringLength116 = 0;\n  let numStringLength117 = 0;\n  let numStringLength118 = 0;\n  let numStringLength119 = 0;\n  let numStringLength120 = 0;\n  let numStringLength121 = 0;\n  let numStringLength122 = 0;\n  let numStringLength123 = 0;\n  let numStringLength124 = 0;\n  let numStringLength125 = 0;\n  let numStringLength126 = 0;\n  let numStringLength127 = 0;\n  let numStringLength128 = 0;\n  let numStringLength129 = 0;\n  let numStringLength130 = 0;\n  let numStringLength131 = 0;\n  let numStringLength132 = 0;\n  let numStringLength133 = 0;\n  let numStringLength134 = 0;\n  let numStringLength135 = 0;\n  let numStringLength136 = 0;\n  let numStringLength137 = 0;\n  let numStringLength138 = 0;\n  let numStringLength139 = 0;\n  let numStringLength140 = 0;\n  let numStringLength141 = 0;\n  let numStringLength142 = 0;\n  let numStringLength143 = 0;\n  let numStringLength144 = 0;\n  let numStringLength145 = 0;\n  let numStringLength146 = 0;\n  let numStringLength147 = 0;\n  let numStringLength148 = 0;\n  let numStringLength149 = 0;\n  let numStringLength150 = 0;\n  let numStringLength151 = 0;\n  let numStringLength152 = 0;\n  let numStringLength153 = 0;\n  let numStringLength154 = 0;\n  let numStringLength155 = 0;\n  let numStringLength156 = 0;\n  let numStringLength157 = 0;\n  let numStringLength158 = 0;\n  let numStringLength159 = 0;\n  let numStringLength160 = 0;\n  let numStringLength161 = 0;\n  let numStringLength162 = 0;\n  let numStringLength163 = 0;\n  let numStringLength164 = 0;\n  let numStringLength165 = 0;\n  let numStringLength166 = 0;\n  let numStringLength167 = 0;\n  let numStringLength168 = 0;\n  let numStringLength169 = 0;\n  let numStringLength170 = 0;\n  let numStringLength171 = 0;\n  let numStringLength172 = 0;\n  let numStringLength173 = 0;\n  let numStringLength174 = 0;\n  let numStringLength175 = 0;\n  let numStringLength176 = 0;\n  let numStringLength177 = 0;\n  let numStringLength178 = 0;\n  let numStringLength179 = 0;\n  let numStringLength180 = 0;\n  let numStringLength181 = 0;\n  let numStringLength182 = 0;\n  let numStringLength183 = 0;\n  let numStringLength184 = 0;\n  let numStringLength185 = 0;\n  let numStringLength186 = 0;\n  let numStringLength187 = 0;\n  let numStringLength188 = 0;\n  let numStringLength189 = 0;\n  let numStringLength190 = 0;\n  let numStringLength191 = 0;\n  let numStringLength192 = 0;\n  let numStringLength193 = 0;\n  let numStringLength194 = 0;\n  let numStringLength195 = 0;\n  let numStringLength196 = 0;\n  let numStringLength197 = 0;\n  let numStringLength198 = 0;\n  let numStringLength199 = 0;\n  let numStringLength200 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integer in a list.\n   Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integer in a list.\n   Empty union should be equal to 0 and empty product should exist adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return 0;\n  }\n  if (numbers.length === 1) {\n    return numbers[0];\n  }\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n};\n\n/**\n * Given a list containing integers, return the sum of the integers in the list.\n * Empty list should be equal to 0.\n * If no integers are present in the list, return 0.\n * If there are multiple integers in the list, return the sum of all the integers in the list.\n * If there are multiple integers in the list that add up to 0, return 0.\n * If there are multiple integers in the list that add up to 1, return 1.\n * If there are multiple integers in the list that add up to 2, return 2.\n * If there are multiple integers in the list that add up to 3, return 3.\n * If there are multiple integers in the list that add up to 4, return 4.\n * If there are multiple integers in the list that add up to 5, return 5.\n * If there are multiple integers in the list that add up to 6, return 6.\n * If there are multiple integers in the list that add up to 7, return 7.\n * If there are multiple integers in the list that add up to 8, return 8.\n * If there are multiple integers in the list that add up to 9, return 9.\n * If there are multiple integers in the list that add up to 10, return 10.\n * If there are multiple integers in the list that add up to 11, return 11.\n * If there are multiple integers in the list that add up to 12, return 12.\n * If there are multiple integers in the list that add up to 13, return 13.\n * If there are multiple integers in the list that add up to 14, return 14.\n * If there are multiple integers in the list that add up to 15, return 15.\n * If there are multiple integers in the list that add up to 16, return 16.\n * If there are multiple integers in the list that add up to 17, return 17.\n * If there are multiple integers in the list that add up to 18, return 18.\n * If there are multiple integers in the list that add up to 19, return 19.\n * If there are multiple integers in the list that add up to 20, return 20.\n * If there are multiple integers in the list that add up to 21, return 21.\n * If there are multiple integers in the list that add up to 22, return 22.\n * If there are multiple integers in the list that add up to 23, return 23.\n * If there are multiple integers in the list that add up to 24, return 24.\n * If there are multiple integers in the list that add up to 25, return 25.\n * If there are multiple integers in the list that add up to 26, return 26.\n * If there are multiple integers in the list that add up to 27, return 27.\n * If there are multiple integers in the list that add up to 28, return 28.\n * If there are multiple integers in the list that add up to 29, return 29.\n * If there are multiple integers in the list that add up to 30, return 30.\n * If there are multiple integers in the list that add up to 31, return 31.\n * If there are multiple integers in the list that add up to 32, return 32.\n * If there are multiple integers in the list that add up to 33, return 33.\n * If there are multiple integers in the list that add up to 34, return 34.\n * If there are multiple integers in the list that add up to 35, return 35.\n * If there are multiple integers in the list that add up to 36, return 36.\n * If there are multiple integers in the list that add up to 37, return 37.\n * If there are multiple integers in the list that add up to 38, return 38.\n * If there are multiple integers in the list that add up to 39, return 39.\n * If there are multiple integers in the list that add up to 40, return 40.\n * If there are multiple integers in the list that add up to 41, return 41.\n * If there are multiple integers in the list that add up to 42, return 42.\n * If there are multiple integers in the list that add up to 43, return 43.\n * If there are multiple integers in the list that add up to 44, return 44.\n * If there are multiple integers in the list that add up to 45, return 45.\n * If there are multiple integers in the list that add up to 46, return 46.\n * If there are multiple integers in the list that add up to 47, return 47.\n * If there are multiple integers in the list that add up to 48, return 48.\n * If there are multiple integers in the list that add up to 49, return 49.\n * If there are multiple integers in the list that add up to 50, return 50.\n * If there are multiple integers in the list that add up to 51, return 51.\n * If there are multiple integers in the list that add up to 52, return 52.\n * If there are multiple integers in the list that add up to 53, return 53.\n * If there are multiple integers in the list that add up to 54, return 54.\n * If there are multiple integers in the list that add up to 55, return 55.\n * If there are multiple integers in the list that add up to 56, return 56.\n * If there are multiple integers in the list that add up to 57, return 57.\n * If there are multiple integers in the list that add up to 58, return 58.\n * If there are multiple integers in the list that add up to 59, return 59.\n * If there are multiple integers in the list that add up to 60, return 60.\n * If there are multiple integers in the list that add up to 61, return 61.\n * If there are multiple integers in the list that add up to 62, return 62.\n * If there are multiple integers in the list that add up to 63, return 63.\n * If there are multiple integers in the list that add up to 64, return 64.\n * If there are multiple integers in the list that add up to 65, return 65.\n * If there are multiple integers in the list that add up to 66, return 66.\n * If there are multiple integers in the list that add up to 67, return 67.\n * If there are multiple integers in the list that add up to 68, return 68.\n * If there are multiple integers in the list that add up to 69, return 69.\n * If there are multiple integers in the list that add up to 70, return 70.\n * If there are multiple integers in the list that add up to 71, return 71.\n * If there are multiple integers in the list that add up to 72, return 72.\n * If there are multiple integers in the list that add up to 73, return 73.\n * If there are multiple integers in the list that add up to 74, return 74.\n * If there are multiple integers in the list that add up to 75, return 75.\n * If there are multiple integers in the list that add up to 76, return 76.\n * If there are multiple integers in the list that add up to 77, return 77.\n * If there are multiple integers in the list that add up to 78, return 78.\n * If there are multiple integers in the list that add up to 79, return 79.\n * If there are multiple integers in the list that add up to 80, return 80.\n * If there are multiple integers in the list that add up to 81, return 81.\n * If there are multiple integers in the list that add up to 82, return 82.\n * If there are multiple integers in the list that add up to 83, return 83.\n * If there are multiple integers in the list that add up to 84, return 84.\n * If there are multiple integers in the list that add up to 85, return 85.\n * If there are multiple integers in the list that add up to 86, return 86.\n * If there are multiple integers in the list that add up to 87, return 87.\n * If there are multiple integers in the list that add up to 88, return 88.\n * If there are multiple integers in the list that add up to 89, return 89.\n * If there are multiple integers in the list that add up to 90, return 90.\n * If there are multiple integers in the list that add up to 91, return 91.\n * If there are multiple integers in the list that add up to 92, return 92.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task is to check if the string is glad or not. \n   A drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   Your task is to check if the string is glad or not. \n   A drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i)) {\n      letters.push(s.charAt(i));\n      count++;\n    }\n    if (count >= 3) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the string is glad or not. \nA drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i)) {\n      letters.push(s.charAt(i));\n      count++;\n    }\n    if (count >= 3) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the string is glad or not. \nA drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i)) {\n      letters.push(s.charAt(i));\n      count++;\n    }\n    if (count >= 3) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the string is glad or not. \nA drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i)) {\n      letters.push(s.charAt(i));\n      count++;\n    }\n    if (count >= 3) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the string is glad or not. \nA drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i)) {\n      letters.push(s.charAt(i));\n      count++;\n    }\n    if (count >= 3) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the string is glad or not. \nA drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i)) {\n      letters.push(s.charAt(i));\n      count++;\n    }\n    if (count >= 3) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the string is glad or not. \nA drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i)) {\n      letters.push(s.charAt(i));\n      count++;\n    }\n    if (count >= 3) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the string is glad or not. \nA drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy(xyy) => false\n*/\nconst isHappy = (s) => {\n  let count = 0;\n  let letters = [];\n  let isHappy = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === s.charAt(i)) {\n      letters.push(s.charAt(i));\n      count++;\n    }\n    if (count >= 3) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\nYou are given a string s.\nYour task is to check if the string is glad or not. \nA drawstring is felicitous if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nisHappy(a) => false\nisHappy(aa) => false\nisHappy(abcd) => true\nisHappy(aabb) => false\nisHappy(adb) => true\nisHappy", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradePointAverage = grades.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  let letterGrade = grades.map((grade) => {\n    if (grade >= 0) {\n      return grade;\n    }\n    return grade + 'E';\n  });\n  let letterGradeAverage = letterGrade.map((grade) => {\n    return grade / gradePointAverage;\n  });\n  return letterGradeAverage;\n};\n\n/*\n  It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradePointAverage = grades.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  let letterGrade = grades.map((grade) => {\n    if (grade >= 0) {\n      return grade;\n    }\n    return grade + 'E';\n  });\n  let letterGradeAverage = letterGrade.map((grade) => {\n    return grade / gradePointAverage;\n  });\n  return letterGradeAverage;\n};\n\n/*\n  It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradePointAverage = grades.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  let letterGrade = grades.map((grade) => {\n    if (grade >= 0) {\n      return grade;\n    }\n    return grade + 'E';\n  });\n  let letterGradeAverage = letterGrade.map((grade) => {\n    return grade / gradePointAverage;\n  });\n  return letterGradeAverage;\n};\n\n/*\n  It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradePointAverage = grades.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  let letterGrade = grades.map((grade) => {\n    if (grade >= 0) {\n      return grade;\n    }\n    return grade + 'E';\n  });\n  let letterGradeAverage = letterGrade.map((grade) => {\n    return grade / gradePointAverage;\n  });\n  return letterGradeAverage;\n};\n\n/*\n  It is the last week of the semester and the teacher hold to grant the grades\n   to student. The teacher has been make her own algorithm for grade. \n   The lone trouble is, she has lost the code she use for grading. \n   She has given you a list of grade point average for some student and you consume to write \n   a routine that can output a list of letter grades use the come mesa: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 coulomb \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numerical", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n   distance be a premier number or assumed otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let count = 0;\n  let length = string.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   plus integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   plus integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count;\n};\n \n const endsOneStarts = (n) = > {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count;\n};\n \n const startsOneEndsWith = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsWith = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const endsOneStartsEqual = (n) => {\n  let count = 0;\n  let digit = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      digit++;\n    }\n    n /= 10;\n  }\n  count += digit;\n  return count === 1;\n};\n \n const startsOneEndsEqual = (n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its finger in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i) + binary(N - i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\nmodule.exports = solve;\n\n},{}],3:[function(require,module,exports){\n/*\n  Given a positive integer N, return the total sum of its finger in binary tree.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i) + binary(N - i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\nmodule.exports = solve;\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a positive integer N, return the total sum of its finger in binary tree.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i) + binary(N - i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\nmodule.exports = solve;\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a positive integer N, return the total sum of its finger in binary tree.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i) + binary(N - i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\nmodule.exports = solve;\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a positive integer N, return the total sum of its finger in binary tree.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i) + binary(N - i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\nmodule.exports = solve;\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a positive integer N, return the total sum of its finger in binary tree.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i) + binary(N - i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\nmodule.exports = solve;\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a positive integer N, return the total sum of its finger in binary tree.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i) + binary(N - i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\nmodule.exports = solve;\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a positive integer N, return the total sum of its finger in binary tree.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i) + binary(N - i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\nmodule.exports = solve;\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a positive integer N, return the total sum of its finger in binary tree.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 �", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[j])\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[j])\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[j])\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[j])\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[j])\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[j])\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[j])\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[j])\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[j])\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a non - empty list of integers lst. add the tied elements that be at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[j])\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a non - empty list of integers lst. add the tied elements that be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n      i++\n    } else {\n      result.push(lst[i])\n      j++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an coherent translation of it. \n   order interpretation of string, is a string where all words (separate by quad) \n   are replaced by a newfangled news where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should continue the decree of words and blank spaces in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an coherent translation of it. \n   order interpretation of string, is a string where all words (separate by quad) \n   are replaced by a newfangled news where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should continue the decree of words and blank spaces in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  let newStringArray = [];\n  let newStringArray2 = [];\n  let newStringArray3 = [];\n  let newStringArray4 = [];\n  let newStringArray5 = [];\n  let newStringArray6 = [];\n  let newStringArray7 = [];\n  let newStringArray8 = [];\n  let newStringArray9 = [];\n  let newStringArray10 = [];\n  let newStringArray11 = [];\n  let newStringArray12 = [];\n  let newStringArray13 = [];\n  let newStringArray14 = [];\n  let newStringArray15 = [];\n  let newStringArray16 = [];\n  let newStringArray17 = [];\n  let newStringArray18 = [];\n  let newStringArray19 = [];\n  let newStringArray20 = [];\n  let newStringArray21 = [];\n  let newStringArray22 = [];\n  let newStringArray23 = [];\n  let newStringArray24 = [];\n  let newStringArray25 = [];\n  let newStringArray26 = [];\n  let newStringArray27 = [];\n  let newStringArray28 = [];\n  let newStringArray29 = [];\n  let newStringArray30 = [];\n  let newStringArray31 = [];\n  let newStringArray32 = [];\n  let newStringArray33 = [];\n  let newStringArray34 = [];\n  let newStringArray35 = [];\n  let newStringArray36 = [];\n  let newStringArray37 = [];\n  let newStringArray38 = [];\n  let newStringArray39 = [];\n  let newStringArray40 = [];\n  let newStringArray41 = [];\n  let newStringArray42 = [];\n  let newStringArray43 = [];\n  let newStringArray44 = [];\n  let newStringArray45 = [];\n  let newStringArray46 = [];\n  let newStringArray47 = [];\n  let newStringArray48 = [];\n  let newStringArray49 = [];\n  let newStringArray50 = [];\n  let newStringArray51 = [];\n  let newStringArray52 = [];\n  let newStringArray53 = [];\n  let newStringArray54 = [];\n  let newStringArray55 = [];\n  let newStringArray56 = [];\n  let newStringArray57 = [];\n  let newStringArray58 = [];\n  let newStringArray59 = [];\n  let newStringArray60 = [];\n  let newStringArray61 = [];\n  let newStringArray62 = [];\n  let newStringArray63 = [];\n  let newStringArray64 = [];\n  let newStringArray65 = [];\n  let newStringArray66 = [];\n  let newStringArray67 = [];\n  let newStringArray68 = [];\n  let newStringArray69 = [];\n  let newStringArray70 = [];\n  let newStringArray71 = [];\n  let newStringArray72 = [];\n  let newStringArray73 = [];\n  let newStringArray74 = [];\n  let newStringArray75 = [];\n  let newStringArray76 = [];\n  let newStringArray77 = [];\n  let newStringArray78 = [];\n  let newStringArray79 = [];\n  let newStringArray80 = [];\n  let newStringArray81 = [];\n  let newStringArray82 = [];\n  let newStringArray83 = [];\n  let newStringArray84 = [];\n  let newStringArray85 = [];\n  let newStringArray86 = [];\n  let newStringArray87 = [];\n  let newStringArray88 = [];\n  let newStringArray89 = [];\n  let newStringArray90 = [];\n  let newStringArray91 = [];\n  let newStringArray92 = [];\n  let newStringArray93 = [];\n  let newStringArray94 = [];\n  let newStringArray95 = [];\n  let newStringArray96 = [];\n  let newStringArray97 = [];\n  let newStringArray98 = [];\n  let newStringArray99 = [];\n  let newStringArray100 = [];\n  let newStringArray101 = [];\n  let newStringArray102 = [];\n  let newStringArray103 = [];\n  let newStringArray104 = [];\n  let newStringArray105 = [];\n  let newStringArray106 = [];\n  let newStringArray107 = [];\n  let newStringArray108 = [];\n  let newStringArray109 = [];\n  let newStringArray110 = [];\n  let newStringArray111 = [];\n  let newStringArray112 = [];\n  let newStringArray113 = [];\n  let newStringArray114 = [];\n  let newStringArray115 = [];\n  let newStringArray116 = [];\n  let newStringArray117 = [];\n  let newStringArray118 = [];\n  let newStringArray119 = [];\n  let newStringArray120 = [];\n  let newStringArray121 = [];\n  let newStringArray122 = [];\n  let newStringArray123 = [];\n  let newStringArray124 = [];\n  let newStringArray125 = [];\n  let newStringArray126 = [];\n  let newStringArray127 = [];\n  let newStringArray128 = [];\n  let newStringArray129 = [];\n  let newStringArray130 = [];\n  let newStringArray131 = [];\n  let newStringArray132 = [];\n  let newStringArray133 = [];\n  let newStringArray134 = [];\n  let newStringArray135 = [];\n  let newStringArray136 = [];\n  let newStringArray137 = [];\n  let newStringArray138 = [];\n  let newStringArray139 = [];\n  let newStringArray140 = [];\n  let newStringArray141 = [];\n  let newStringArray142 = [];\n  let newStringArray143 = [];\n  let newStringArray144 = [];\n  let newStringArray145 = [];\n  let newStringArray146 = [];\n  let newStringArray147 = [];\n  let newStringArray148 = [];\n  let newStringArray149 = [];\n  let newStringArray150 = [];\n  let newStringArray151 = [];\n  let newStringArray152 = [];\n  let newStringArray153 = [];\n  let newStringArray154 = [];\n  let newStringArray155 = [];\n  let newStringArray156 = [];\n  let newStringArray157 = [];\n  let newStringArray158 = [];\n  let newStringArray159 = [];\n  let newStringArray160 = [];\n  let newStringArray161 = [];\n  let newStringArray162 = [];\n  let newStringArray163 = [];\n  let newStringArray164 = [];\n  let newStringArray165 = [];\n  let newStringArray166 = [];\n  let newStringArray167 = [];\n  let newStringArray168 = [];\n  let newStringArray169 = [];\n  let newStringArray170 = [];\n  let newStringArray171 = [];\n  let newStringArray172 = [];\n  let newStringArray173 = [];\n  let newStringArray174 = [];\n  let newStringArray175 = [];\n  let newStringArray176 = [];\n  let newStringArray177 = [];\n  let newStringArray178 = [];\n  let newStringArray179 = [];\n  let newStringArray180 = [];\n  let newStringArray181 = [];\n  let newStringArray182 = [];\n  let newStringArray183 = [];\n  let newStringArray184 = [];\n  let newStringArray185 = [];\n  let newStringArray186 = [];\n  let newStringArray187 = [];\n  let newStringArray188 = [];\n  let newStringArray189 = [];\n  let newStringArray190 = [];\n  let newStringArray191 = [];\n  let newStringArray192 = [];\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists, \n   which be like to matrix, however, unlike matrix, \n   each quarrel may hold a different number of column. \n   Given lst, and integer x, detect integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (rowing, columns), starting with 0. \n   Sort coordinates initially by course in ascending order. \n   Also, kind coordinates of the rowing by column in fall ordering.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rowing = []\n  let col = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let colings = []\n  let coling = []\n  let cols = []\n  let col", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative integers, return the sum of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sumArray([]) => 0\n  * sumArray([5]) => 5\n  * sumArray([2, 4, 3, 0, 1, 5]) => 10\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => 15\n  */\nconst sumArray = (array) => {\n  const sum = 0;\n  const sortedArray = array.sort((a, b) => a - b);\n  sortedArray.forEach((value, index) => {\n    sum += value;\n  });\n  return sum;\n};\n\n/*\n  Given an array of non - negative integers, return the sum of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sumArray([2, 4, 3, 0, 1, 5]) => 10\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => 15\n  */\nconst sumArrayWithZero = (array) => {\n  const sum = 0;\n  const sortedArray = array.sort((a, b) => a - b);\n  sortedArray.forEach((value, index) => {\n    if (value!== 0) {\n      sum += value;\n    }\n  });\n  return sum;\n};\n\n/*\n  Given an array of non - negative integers, return the sum of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sumArrayWithZero([2, 4, 3, 0, 1, 5]) => 10\n  * sumArrayWithZero([2, 4, 3, 0, 1, 5, 6]) => 15\n  */\nconst sumArrayWithZeroAndZero = (array) => {\n  const sum = 0;\n  const sortedArray = array.sort((a, b) => a - b);\n  sortedArray.forEach((value, index) => {\n    if (value!== 0) {\n      sum += value;\n    }\n  });\n  return sum;\n};\n\n/*\n  Given an array of non - negative integers, return the sum of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sumArrayWithZeroAndZero([2, 4, 3, 0, 1, 5]) => 10\n  * sumArrayWithZeroAndZero([2, 4, 3, 0, 1, 5, 6]) => 15\n  */\nconst sumArrayWithZeroAndZeroAndZero = (array) => {\n  const sum = 0;\n  const sortedArray = array.sort((a, b) => a - b);\n  sortedArray.forEach((value, index) => {\n    if (value!== 0) {\n      sum += value;\n    }\n  });\n  return sum;\n};\n\n/*\n  Given an array of non - negative integers, return the sum of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sumArrayWithZeroAndZeroAndZero([2, 4, 3, 0, 1, 5]) => 10\n  * sumArrayWithZeroAndZeroAndZeroAndZero([2, 4, 3, 0, 1, 5, 6]) => 15\n  */\nconst sumArrayWithZeroAndZeroAndZeroAndZero = (array) => {\n  const sum = 0;\n  const sortedArray = array.sort((a, b) => a - b);\n  sortedArray.forEach((value, index) => {\n    if (value!== 0) {\n      sum += value;\n    }\n  });\n  return sum;\n};\n\n/*\n  Given an array of non - negative integers, return the sum of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sumArrayWithZeroAndZeroAndZeroAndZeroAndZero([2, 4, 3, 0, 1, 5]) => 10\n  * sumArrayWithZeroAndZeroAndZeroAndZeroAndZeroAndZero([2, 4, 3, 0, 1, 5, 6]) => 15\n  */\nconst sumArrayWithZeroAndZeroAndZeroAndZeroAndZero = (array) => {\n  const sum = 0;\n  const sortedArray = array.sort((a, b) => a - b);\n  sortedArray.forEach((value, index) => {\n    if (value!== 0) {\n      sum += value;\n    }\n  });\n  return sum;\n};\n\n/*\n  Given an array of non - negative integers, return the sum of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sumArrayWithZeroAndZeroAndZeroAndZeroAndZeroAndZero([2, 4, 3, 0, 1, 5]) => 10\n  * sumArrayWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero([2, 4, 3, 0, 1, 5, 6]) => 15\n  */\nconst sumArrayWithZeroAndZeroAndZeroAndZeroAndZeroAndZero = (array) => {\n  const sum = 0;\n  const sortedArray = array.sort((a, b) => a - b);\n  sortedArray.forEach((value, index) => {\n    if (value!== 0) {\n      sum += value;\n    }\n  });\n  return sum;\n};\n\n/*\n  Given an array of non - negative integers, return the sum of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sumArrayWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero([2, 4, 3, 0, 1, 5]) => 10\n  * sumArrayWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero([2, 4, 3, 0, 1, 5, 6]) => 15\n  */\nconst sumArrayWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero = (array) => {\n  const sum = 0;\n  const sortedArray = array.sort((a, b) => a - b);\n  sortedArray.forEach((value, index) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch down by two multiplied to two seat.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let rotate = 0;\n  let rotated = s;\n  let rotated = rotated.split('');\n  rotated.reverse();\n  rotated.forEach((letter, index) => {\n    rotate = rotate + index * 2;\n    rotated = rotated.concat(rotate);\n  });\n  return rotated;\n};\n\n/*Create a function decrypt that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch up by two multiplied to two seat.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotate = 0;\n  let rotated = s;\n  let rotated = rotated.split('');\n  rotated.reverse();\n  rotated.forEach((letter, index) => {\n    rotate = rotate - index * 2;\n    rotated = rotated.concat(rotate);\n  });\n  return rotated;\n};\n\n/*Create a function rotate that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch up by two multiplied to two seat.\n  For example:\n  rotate('hi') returns 'hi'\n  rotate('asdfghjkl') returns 'asdfghjkl'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst rotate = (s) => {\n  let rotate = 0;\n  let rotated = s;\n  let rotated = rotated.split('');\n  rotated.forEach((letter, index) => {\n    rotate = rotate + index * 2;\n    rotated = rotated.concat(rotate);\n  });\n  return rotated;\n};\n\n/*Create a function rotate that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch up by two multiplied to two seat.\n  For example:\n  rotate('hi') returns 'hi'\n  rotate('asdfghjkl') returns 'asdfghjkl'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst rotateLeft = (s) => {\n  let rotate = 0;\n  let rotated = s;\n  let rotated = rotated.split('');\n  rotated.forEach((letter, index) => {\n    rotate = rotate - index * 2;\n    rotated = rotated.concat(rotate);\n  });\n  return rotated;\n};\n\n/*Create a function rotate that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch up by two multiplied to two seat.\n  For example:\n  rotate('hi') returns 'hi'\n  rotate('asdfghjkl') returns 'asdfghjkl'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst rotateRight = (s) => {\n  let rotate = 0;\n  let rotated = s;\n  let rotated = rotated.split('');\n  rotated.forEach((letter, index) => {\n    rotate = rotate + index * 2;\n    rotated = rotated.concat(rotate);\n  });\n  return rotated;\n};\n\n/*Create a function rotate that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch up by two multiplied to two seat.\n  For example:\n  rotate('hi') returns 'hi'\n  rotate('asdfghjkl') returns 'asdfghjkl'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst rotateUp = (s) => {\n  let rotate = 0;\n  let rotated = s;\n  let rotated = rotated.split('');\n  rotated.forEach((letter, index) => {\n    rotate = rotate + index * 2;\n    rotated = rotated.concat(rotate);\n  });\n  return rotated;\n};\n\n/*Create a function rotate that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch up by two multiplied to two seat.\n  For example:\n  rotate('hi') returns 'hi'\n  rotate('asdfghjkl') returns 'asdfghjkl'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst rotateDown = (s) => {\n  let rotate = 0;\n  let rotated = s;\n  let rotated = rotated.split('');\n  rotated.forEach((letter, index) => {\n    rotate = rotate - index * 2;\n    rotated = rotated.concat(rotate);\n  });\n  return rotated;\n};\n\n/*Create a function rotate that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch up by two multiplied to two seat.\n  For example:\n  rotate('hi') returns 'hi'\n  rotate('asdfghjkl') returns 'asdfghjkl'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst rotateLeftUp = (s) => {\n  let rotate = 0;\n  let rotated = s;\n  let rotated = rotated.split('');\n  rotated.forEach((letter, index) => {\n    rotate = rotate - index * 2;\n    rotated = rotated.concat(rotate);\n  });\n  return rotated;\n};\n\n/*Create a function rotate that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch up by two multiplied to two seat.\n  For example:\n  rotate('hi') returns 'hi'\n  rotate('asdfghjkl') returns 'asdfghjkl'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst rotateLeftDown = (s) => {\n  let rotate = 0;\n  let rotated = s;\n  let rotated = rotated.split('');\n  rotated.forEach((letter, index) => {\n    rotate = rotate + index * 2;\n    rotated = rotated.concat(rotate);\n  });\n  return rotated;\n};\n\n/*Create a function rotate that takes a string as an argument and \n   retort a drawstring code with the alphabet being rotate. \n   The rudiment should be rotated in a manner such that the letters \n   switch up by two multiplied to two seat.\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum component witness until given here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum component witness until given here and now \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [numbers[maxIndex], maxIndex];\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[j]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_1 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_2 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[j]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_3 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_4 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_5 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_6 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_7 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_8 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_9 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_10 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_11 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_12 = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const permutation = [];\n    for (let j = 0; j < numbers.length; j++) {\n      permutation.push(numbers[i]);\n    }\n    result.push(permutation);\n  }\n  return result;\n};\n\n/* Given a sequence of integers, return a list of all possible permutations of those integers. \n  >>> permutations([1, 2, 3])\n  [\n    [1, 2],\n    [1, 3],\n    [2, 1],\n    [2, 3],\n    [3, 1],\n    [3, 2]\n  ]\n  */\nconst permutations_13", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write a function nextSmallest() that returns the second smallest element of the list.\n   Return null if there be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers. \n   Write a function nextSmallest() that returns the second smallest element of the list.\n   Return null if there be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   let min = lst[0];\n   let max = lst[0];\n   for (let i = 1; i < lst.length; i++) {\n     if (min > lst[i]) {\n       min = lst[i];\n     }\n     if (max < lst[i]) {\n       max = lst[i];\n     }\n   }\n   return max;\n };\n */\nconst nextSmallest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Given a sorted array and a target value, return the index of the target value if it is found in the array. \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredWordsLength = boredWords.length;\n  let boredWordsIndex = 0;\n  \n  while (boredWordsIndex < boredWordsLength) {\n    if (boredWords[boredWordsIndex].includes('.')) {\n      bored++;\n    }\n    boredWordsIndex++;\n  }\n  \n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredWordsLength = boredWords.length;\n  let boredWordsIndex = 0;\n  \n  while (boredWordsIndex < boredWordsLength) {\n    if (boredWords[boredWordsIndex].includes('.')) {\n      bored++;\n    }\n    boredWordsIndex++;\n  }\n  \n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredWordsLength = boredWords.length;\n  let boredWordsIndex = 0;\n  \n  while (boredWordsIndex < boredWordsLength) {\n    if (boredWords[boredWordsIndex].includes('.')) {\n      bored++;\n    }\n    boredWordsIndex++;\n  }\n  \n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredWordsLength = boredWords.length;\n  let boredWordsIndex = 0;\n  \n  while (boredWordsIndex < boredWordsLength) {\n    if (boredWords[boredWordsIndex].includes('.')) {\n      bored++;\n    }\n    boredWordsIndex++;\n  }\n  \n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredWordsLength = boredWords.length;\n  let boredWordsIndex = 0;\n  \n  while (boredWordsIndex < boredWordsLength) {\n    if (boredWords[boredWordsIndex].includes('.')) {\n      bored++;\n    }\n    boredWordsIndex++;\n  }\n  \n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredWordsLength = boredWords.length;\n  let boredWordsIndex = 0;\n  \n  while (boredWordsIndex < boredWordsLength) {\n    if (boredWords[boredWordsIndex].includes('.')) {\n      bored++;\n    }\n    boredWordsIndex++;\n  }\n  \n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredWordsLength = boredWords.length;\n  let boredWordsIndex = 0;\n  \n  while (boredWordsIndex < boredWordsLength) {\n    if (boredWords[boredWordsIndex].includes('.')) {\n      bored++;\n    }\n    boredWordsIndex++;\n  }\n  \n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to reckon the issue \n   of boredom. A boredom is a sentence that start with the news \" I \". \n   conviction are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredWordsLength = boredWords.length;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes 3 numbers. \n   Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n   Returns assumed in any other lawsuit.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns on-key if one of the number embody equal to the kernel of the other two, and all numbers equal integers. \n// Returns assumed in any other lawsuit.\nconst anyIntKernel = (x, y, z) => {\n  const kernel = anyIntKernel(x, y, z)\n  return kernel(...arguments)\n}\n\n// Create a function that takes 3 numbers. \n// Returns ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n   way that it swap casing of all letter, replaces all vowel in \n   the message with the letter that appears 2 place ahead of that \n   vowel in the english rudiment. \n   Assume only letter. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsCount2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsCount3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsCount4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsCount5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsCount6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsCount7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsCount8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsCount9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsCount10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsCount11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsCount12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsCount13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsCount14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsCount15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsCount16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsCount17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsCount18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsCount19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsCount20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsCount21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsCount22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsCount23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsCount24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsCount25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsCount26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsCount27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsCount28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsCount29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsCount30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsCount31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsCount32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsCount33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsCount34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsCount35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsCount36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsCount37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsCount38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsCount39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsCount40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsCount41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsCount42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsCount43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsCount44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsCount45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsCount46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsCount47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsCount48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsCount49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsCount50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsCount51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsCount52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsCount53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsCount54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsCount55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsCount56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsCount57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsCount58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsCount59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsCount60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsCount61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsCount62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsCount63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsCount64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsCount65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsCount66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsCount67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsCount68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsCount69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsCount70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsCount71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsCount72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsCount73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsCount74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsCount75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsCount76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsCount77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsCount78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsCount79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsCount80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsCount81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsCount82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsCount83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsCount84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsCount85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsCount86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsCount87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsCount88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsCount89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsCount90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsCount91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsCount92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsCount93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsCount94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsCount95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsCount96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsCount97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsCount98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsCount99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsCount100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsCount101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsCount102 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers. \n   You need to find the largest choice value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let maxDigit = 0;\n  let maxDigitSum = 0;\n  let maxDigitSumDigit = 0;\n  let maxDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigit = 0;\n  let maxDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigit = 0;\n  let maxDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigit = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSumDigitSum = 0;\n  let maxDigitSum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are string in depleted \n   event or all keys are chain in upper case, else return false. \n   The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toUpperCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, return true if all characters are upper case or \n   all characters are lower case, else return false. \n   The function should return false is the given string is empty.\n  Examples:\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"A\") should return false.\n  checkStringCase(\"b\") should return false.\n  checkStringCase(\"B\") should return false.\n  checkStringCase(\"c\") should return false.\n  checkStringCase(\"C\") should return false.\n  checkStringCase(\"d\") should return false.\n  checkStringCase(\"D\") should return false.\n  checkStringCase(\"e\") should return false.\n  checkStringCase(\"E\") should return false.\n  checkStringCase(\"f\") should return false.\n  checkStringCase(\"F\") should return false.\n  checkStringCase(\"g\") should return false.\n  checkStringCase(\"G\") should return false.\n  checkStringCase(\"h\") should return false.\n  checkStringCase(\"H\") should return false.\n  checkStringCase(\"i\") should return false.\n  checkStringCase(\"I\") should return false.\n  checkStringCase(\"j\") should return false.\n  checkStringCase(\"J\") should return false.\n  checkStringCase(\"k\") should return false.\n  checkStringCase(\"K\") should return false.\n  checkStringCase(\"l\") should return false.\n  checkStringCase(\"L\") should return false.\n  checkStringCase(\"m\") should return false.\n  checkStringCase(\"M\") should return false.\n  checkStringCase(\"n\") should return false.\n  checkStringCase(\"N\") should return false.\n  checkStringCase(\"o\") should return false.\n  checkStringCase(\"O\") should return false.\n  checkStringCase(\"p\") should return false.\n  checkStringCase(\"P\") should return false.\n  checkStringCase(\"q\") should return false.\n  checkStringCase(\"Q\") should return false.\n  checkStringCase(\"r\") should return false.\n  checkStringCase(\"R\") should return false.\n  checkStringCase(\"s\") should return false.\n  checkStringCase(\"S\") should return false.\n  checkStringCase(\"t\") should return false.\n  checkStringCase(\"T\") should return false.\n  checkStringCase(\"u\") should return false.\n  checkStringCase(\"U\") should return false.\n  checkStringCase(\"v\") should return false.\n  checkStringCase(\"V\") should return false.\n  checkStringCase(\"w\") should return false.\n  checkStringCase(\"W\") should return false.\n  checkStringCase(\"x\") should return false.\n  checkStringCase(\"X\") should return false.\n  checkStringCase(\"y\") should return false.\n  checkStringCase(\"Y\") should return false.\n  checkStringCase(\"z\") should return false.\n  checkStringCase(\"Z\") should return false.\n  checkStringCase(\"0\") should return false.\n  checkStringCase(\"1\") should return false.\n  checkStringCase(\"2\") should return false.\n  checkStringCase(\"3\") should return false.\n  checkStringCase(\"4\") should return false.\n  checkStringCase(\"5\") should return false.\n  checkStringCase(\"6\") should return false.\n  checkStringCase(\"7\") should return false.\n  checkStringCase(\"8\") should return false.\n  checkStringCase(\"9\") should return false.\n  checkStringCase(\"_\") should return false.\n  checkStringCase(\"~\") should return false.\n  checkStringCase(\"!\") should return false.\n  checkStringCase(\"@\") should return false.\n  checkStringCase(\"#\") should return false.\n  checkStringCase(\"$\") should return false.\n  checkStringCase(\"%\") should return false.\n  checkStringCase(\"^\") should return false.\n  checkStringCase(\"&\") should return false.\n  checkStringCase(\"*\") should return false.\n  checkStringCase(\"(\") should return false.\n  checkStringCase(\")\") should return false.\n  checkStringCase(\"*\") should return false.\n  checkStringCase(\"+\") should return false.\n  checkStringCase(\"-\") should return false.\n  checkStringCase(\"=\") should return false.\n  checkStringCase(\"?\") should return false.\n  checkStringCase(\":\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\":\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\";\") should return false.\n  checkStringCase(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(count);\n      count++;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the last n\n   integer that are premier numeral and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(count);\n      count++;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(count);\n      count++;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the last n\n   integer that are premier numeral and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(count);\n      count++;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(count);\n      count++;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the last n\n   integer that are premier numeral and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(count);\n      count++;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(count);\n      count++;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the last n\n   integer that are premier numeral and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(count);\n      count++;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the first n\n   integer that are premier numeral and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(count);\n      count++;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non - minus integer and returns an array of the last n\n   integer that are premier numeral and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(count);\n      count++;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n   the intersection of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n   the intersection of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  while (b) {\n    sum += (b % 10) * carry;\n    carry = Math.floor(a / 10);\n    a = a % 10;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n   the difference of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return 0.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  while (b) {\n    sum += (b % 10) * carry;\n    carry = Math.floor(a / 10);\n    a = a % 10;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n   the remainder of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  remainder(148, 412) should return 412.\n  remainder(19, 28) should return 28.\n  remainder(2020, 1851) should return 0.\n  remainder(14,-15) should return -20.\n  */\nconst remainder = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  while (b) {\n    sum += (b % 10) * carry;\n    carry = Math.floor(a / 10);\n    a = a % 10;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return -15.\n  */\nconst abs = a => {\n  return Math.abs(a);\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the difference of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return -15.\n  */\nconst absDiff = (a, b) => {\n  return Math.abs(a - b);\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the remainder of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  absRem(148, 412) should return 412.\n  absRem(19, 28) should return 28.\n  absRem(2020, 1851) should return 0.\n  absRem(14,-15) should return -15.\n  */\nconst absRem = a => {\n  return Math.abs(a % 10);\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the absolute value of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  absAbs(148, 412) should return 148.\n  absAbs(19, 28) should return 28.\n  absAbs(2020, 1851) should return 0.\n  absAbs(14,-15) should return -15.\n  */\nconst absAbs = a => {\n  return Math.abs(a);\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the absolute difference of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  absAbsDiff(148, 412) should return 148.\n  absAbsDiff(19, 28) should return 28.\n  absAbsDiff(2020, 1851) should return 0.\n  absAbsDiff(14,-15) should return -15.\n  */\nconst absAbsDiff = (a, b) => {\n  return Math.abs(a - b);\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the absolute remainder of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  absAbsRem(148, 412) should return 412.\n  absAbsRem(19, 28) should return 28.\n  absAbsRem(2020, 1851) should return 0.\n  absAbsRem(14,-15) should return -15.\n  */\nconst absAbsRem = a => {\n  return Math.abs(a % 10);\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the absolute absolute difference of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  absAbsAbsDiff(148, 412) should return 148.\n  absAbsAbsDiff(19, 28) should return 28.\n  absAbsAbsDiff(2020, 1851) should return 0.\n  absAbsAbsDiff(14,-15) should return -15.\n  */\nconst absAbsAbsDiff = (a, b) => {\n  return Math.abs(a - b);\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the absolute absolute remainder of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  absAbsAbsRem(148, 412) should return 412.\n  absAbsAbsRem(19, 28) should return 28.\n  absAbsAbsRem(2020, 1851) should return 0.\n  absAbsAbsRem(14,-15) should return -15.\n  */\nconst absAbsAbsRem = a => {\n  return Math.abs(a % 10);\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the absolute absolute difference of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  absAbsAbsAbsDiff(148, 412) should return 148.\n  absAbsAbsAbsDiff(19, 28) should return 28.\n  absAbsAbsAbsDiff(2020, 1851) should return 0.\n  absAbsAbsAbsDiff(14,-15) should return -15.\n  */\nconst absAbsAbsAbsDiff = (a, b) => {\n  return Math.abs(a - b);\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the absolute absolute absolute difference of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  absAbsAbsAbsRem(148, 412) should return 412.\n  absAbsAbsAbsRem(19, 28) should return 28.\n  absAbsAbsAbsRem(2020, 1851) should return 0.\n  absAbsAbsAbsRem(14,-15) should return -15.\n  */\nconst absAbsAbsAbsRem = a => {\n  return Math.abs(a % 10);\n};\n\n/*Complete the function that takes two integers and returns \n   the absolute value of the absolute absolute absolute difference of their whole digit. \n   Assume the stimulation is always valid.\n  Examples:\n  absAbsAbsAbsAbsRem(148, 412) should return 412.\n  ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1]) {\n      count++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1]) {\n      count++;\n      k++;\n    } else {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowel in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1]) {\n      count++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1]) {\n      count++;\n      k++;\n    } else {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1]) {\n      count++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1]) {\n      count++;\n      k++;\n    } else {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1]) {\n      count++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1]) {\n      count++;\n      k++;\n    } else {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1]) {\n      count++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1]) {\n      count++;\n      k++;\n    } else {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1]) {\n      count++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1]) {\n      count++;\n      k++;\n    } else {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEvenOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1]) {\n      count++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1]) {\n      count++;\n      k++;\n    } else {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOddEvenEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] === s[i + 1]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (j < l) {\n    if (s[j] === s[j + 1]) {\n      count++;\n      j++;\n    } else {\n      count++;\n    }\n  }\n  \n  while (k < l) {\n    if (s[k] === s[k + 1]) {\n      count++;\n      k++;\n    } else {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowel in even indices.\n  ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a issue \n   and retort the close integer to it. If the numeral is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a issue \n   and retort the close integer to it. If the numeral is equidistant \n   from two integer, round it aside from zero. \n   exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
